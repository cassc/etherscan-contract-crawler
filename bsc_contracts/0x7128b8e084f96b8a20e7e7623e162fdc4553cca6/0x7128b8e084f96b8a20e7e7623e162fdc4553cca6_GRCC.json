{"SourceCode": "{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.2 \\u003c0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * \\u003e To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * \\u003e a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"},\"DividendPayingToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT License\\npragma solidity ^0.6.2;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./DividendPayingTokenInterface.sol\\\";\\nimport \\\"./DividendPayingTokenOptionalInterface.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./SafeMathUint.sol\\\";\\nimport \\\"./SafeMathInt.sol\\\";\\n\\ncontract DividendPayingToken is\\n    ERC20,\\n    Ownable,\\n    DividendPayingTokenInterface,\\n    DividendPayingTokenOptionalInterface\\n{\\n    using SafeMath for uint256;\\n    using SafeMathUint for uint256;\\n    using SafeMathInt for int256;\\n\\n    // With `magnitude`, we can properly distribute dividends even if the amount of received ether is small.\\n    // For more discussion about choosing the value of `magnitude`,\\n    //  see https://github.com/ethereum/EIPs/issues/1726#issuecomment-472352728\\n    uint256 internal constant magnitude = 2**128;\\n\\n    uint256 internal magnifiedDividendPerShare;\\n\\n    // About dividendCorrection:\\n    // If the token balance of a `_user` is never changed, the dividend of `_user` can be computed with:\\n    //   `dividendOf(_user) = dividendPerShare * balanceOf(_user)`.\\n    // When `balanceOf(_user)` is changed (via minting/burning/transferring tokens),\\n    //   `dividendOf(_user)` should not be changed,\\n    //   but the computed value of `dividendPerShare * balanceOf(_user)` is changed.\\n    // To keep the `dividendOf(_user)` unchanged, we add a correction term:\\n    //   `dividendOf(_user) = dividendPerShare * balanceOf(_user) + dividendCorrectionOf(_user)`,\\n    //   where `dividendCorrectionOf(_user)` is updated whenever `balanceOf(_user)` is changed:\\n    //   `dividendCorrectionOf(_user) = dividendPerShare * (old balanceOf(_user)) - (new balanceOf(_user))`.\\n    // So now `dividendOf(_user)` returns the same value before and after `balanceOf(_user)` is changed.\\n    mapping(address =\\u003e int256) internal magnifiedDividendCorrections;\\n    mapping(address =\\u003e uint256) internal withdrawnDividends;\\n\\n    uint256 public totalDividendsDistributed;\\n\\n    constructor(string memory _name, string memory _symbol)\\n        public\\n        ERC20(_name, _symbol)\\n    {}\\n\\n    receive() external payable {\\n        distributeBNBDividends();\\n    }\\n\\n    function distributeBNBDividends() public payable {\\n        require(totalSupply() \\u003e 0, \\\"DividendPayingToken: totalSupply = 0\\\");\\n        if (msg.value \\u003e 0) {\\n            magnifiedDividendPerShare = magnifiedDividendPerShare.add(\\n                (msg.value).mul(magnitude) / totalSupply()\\n            );\\n            emit DividendsDistributed(msg.sender, msg.value);\\n            totalDividendsDistributed = totalDividendsDistributed.add(\\n                msg.value\\n            );\\n        }\\n    }\\n\\n    /// @notice Withdraws the ether distributed to the sender.\\n    /// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.\\n    function withdrawDividend() public virtual override {\\n        _withdrawDividendOfUser(payable(msg.sender));\\n    }\\n\\n    /// @notice Withdraws the ether distributed to the sender.\\n    /// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.\\n    function _withdrawDividendOfUser(address payable user)\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 _withdrawableDividend = withdrawableDividendOf(user);\\n        if (_withdrawableDividend \\u003e 0) {\\n            withdrawnDividends[user] = withdrawnDividends[user].add(\\n                _withdrawableDividend\\n            );\\n            emit DividendWithdrawn(user, _withdrawableDividend);\\n            (bool success, ) = address(user).call{value: _withdrawableDividend}(\\n                \\\"\\\"\\n            );\\n            if (success) {\\n                return _withdrawableDividend;\\n            } else {\\n                withdrawnDividends[user] = withdrawnDividends[user].sub(\\n                    _withdrawableDividend\\n                );\\n                return 0;\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    /// @notice View the amount of dividend in wei that an address can withdraw.\\n    /// @param _owner The address of a token holder.\\n    /// @return The amount of dividend in wei that `_owner` can withdraw.\\n    function dividendOf(address _owner) public view override returns (uint256) {\\n        return withdrawableDividendOf(_owner);\\n    }\\n\\n    /// @notice View the amount of dividend in wei that an address can withdraw.\\n    /// @param _owner The address of a token holder.\\n    /// @return The amount of dividend in wei that `_owner` can withdraw.\\n    function withdrawableDividendOf(address _owner)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);\\n    }\\n\\n    /// @notice View the amount of dividend in wei that an address has withdrawn.\\n    /// @param _owner The address of a token holder.\\n    /// @return The amount of dividend in wei that `_owner` has withdrawn.\\n    function withdrawnDividendOf(address _owner)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return withdrawnDividends[_owner];\\n    }\\n\\n    /// @notice View the amount of dividend in wei that an address has earned in total.\\n    /// @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\\n    /// = (magnifiedDividendPerShare * balanceOf(_owner) + magnifiedDividendCorrections[_owner]) / magnitude\\n    /// @param _owner The address of a token holder.\\n    /// @return The amount of dividend in wei that `_owner` has earned in total.\\n    function accumulativeDividendOf(address _owner)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return\\n            magnifiedDividendPerShare\\n                .mul(balanceOf(_owner))\\n                .toInt256Safe()\\n                .add(magnifiedDividendCorrections[_owner])\\n                .toUint256Safe() / magnitude;\\n    }\\n\\n    /// @dev Internal function that transfer tokens from one address to another.\\n    /// Update magnifiedDividendCorrections to keep dividends unchanged.\\n    /// @param from The address to transfer from.\\n    /// @param to The address to transfer to.\\n    /// @param value The amount to be transferred.\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal virtual override {\\n        require(false);\\n\\n        int256 _magCorrection = magnifiedDividendPerShare\\n            .mul(value)\\n            .toInt256Safe();\\n        magnifiedDividendCorrections[from] = magnifiedDividendCorrections[from]\\n            .add(_magCorrection);\\n        magnifiedDividendCorrections[to] = magnifiedDividendCorrections[to].sub(\\n            _magCorrection\\n        );\\n    }\\n\\n    /// @dev Internal function that mints tokens to an account.\\n    /// Update magnifiedDividendCorrections to keep dividends unchanged.\\n    /// @param account The account that will receive the created tokens.\\n    /// @param value The amount that will be created.\\n    function _mint(address account, uint256 value) internal override {\\n        super._mint(account, value);\\n\\n        magnifiedDividendCorrections[account] = magnifiedDividendCorrections[\\n            account\\n        ].sub((magnifiedDividendPerShare.mul(value)).toInt256Safe());\\n    }\\n\\n    /// @dev Internal function that burns an amount of the token of a given account.\\n    /// Update magnifiedDividendCorrections to keep dividends unchanged.\\n    /// @param account The account whose tokens will be burnt.\\n    /// @param value The amount that will be burnt.\\n    function _burn(address account, uint256 value) internal override {\\n        super._burn(account, value);\\n\\n        magnifiedDividendCorrections[account] = magnifiedDividendCorrections[\\n            account\\n        ].add((magnifiedDividendPerShare.mul(value)).toInt256Safe());\\n    }\\n\\n    function _setBalance(address account, uint256 newBalance) internal {\\n        uint256 currentBalance = balanceOf(account);\\n\\n        if (newBalance \\u003e currentBalance) {\\n            uint256 mintAmount = newBalance.sub(currentBalance);\\n            _mint(account, mintAmount);\\n        } else if (newBalance \\u003c currentBalance) {\\n            uint256 burnAmount = currentBalance.sub(newBalance);\\n            _burn(account, burnAmount);\\n        }\\n    }\\n}\\n\"},\"DividendPayingTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/// @title Dividend-Paying Token Interface\\n/// @author Roger Wu (https://github.com/roger-wu)\\n/// @dev An interface for a dividend-paying token contract.\\ninterface DividendPayingTokenInterface {\\n    /// @notice View the amount of dividend in wei that an address can withdraw.\\n    /// @param _owner The address of a token holder.\\n    /// @return The amount of dividend in wei that `_owner` can withdraw.\\n    function dividendOf(address _owner) external view returns (uint256);\\n\\n    /// @notice Withdraws the ether distributed to the sender.\\n    /// @dev SHOULD transfer `dividendOf(msg.sender)` wei to `msg.sender`, and `dividendOf(msg.sender)` SHOULD be 0 after the transfer.\\n    ///  MUST emit a `DividendWithdrawn` event if the amount of ether transferred is greater than 0.\\n    function withdrawDividend() external;\\n\\n    /// @dev This event MUST emit when ether is distributed to token holders.\\n    /// @param from The address which sends ether to this contract.\\n    /// @param weiAmount The amount of distributed ether in wei.\\n    event DividendsDistributed(address indexed from, uint256 weiAmount);\\n\\n    /// @dev This event MUST emit when an address withdraws their dividend.\\n    /// @param to The address which withdraws ether from this contract.\\n    /// @param weiAmount The amount of withdrawn ether in wei.\\n    event DividendWithdrawn(address indexed to, uint256 weiAmount);\\n}\\n\"},\"DividendPayingTokenOptionalInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/// @title Dividend-Paying Token Optional Interface\\n/// @author Roger Wu (https://github.com/roger-wu)\\n/// @dev OPTIONAL functions for a dividend-paying token contract.\\ninterface DividendPayingTokenOptionalInterface {\\n    /// @notice View the amount of dividend in wei that an address can withdraw.\\n    /// @param _owner The address of a token holder.\\n    /// @return The amount of dividend in wei that `_owner` can withdraw.\\n    function withdrawableDividendOf(address _owner)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice View the amount of dividend in wei that an address has withdrawn.\\n    /// @param _owner The address of a token holder.\\n    /// @return The amount of dividend in wei that `_owner` has withdrawn.\\n    function withdrawnDividendOf(address _owner)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice View the amount of dividend in wei that an address has earned in total.\\n    /// @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\\n    /// @param _owner The address of a token holder.\\n    /// @return The amount of dividend in wei that `_owner` has earned in total.\\n    function accumulativeDividendOf(address _owner)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\"},\"DividendTracker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./DividendPayingToken.sol\\\";\\nimport \\\"./IterableMapping.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./SafeMathInt.sol\\\";\\n\\ncontract DividendTracker is Ownable, DividendPayingToken {\\n    using SafeMath for uint256;\\n    using SafeMathInt for int256;\\n    using IterableMapping for IterableMapping.Map;\\n\\n    IterableMapping.Map private tokenHoldersMap;\\n    uint256 public lastProcessedIndex;\\n\\n    mapping(address =\\u003e bool) public excludedFromDividends;\\n\\n    mapping(address =\\u003e uint256) public lastClaimTimes;\\n\\n    uint256 public claimWait;\\n    uint256 public minimumTokenBalanceForDividends;\\n\\n    event ExcludeFromDividends(address indexed account);\\n    event ClaimWaitUpdated(uint256 indexed newValue, uint256 indexed oldValue);\\n\\n    event Claim(\\n        address indexed account,\\n        uint256 amount,\\n        bool indexed automatic\\n    );\\n\\n    constructor(string memory name_, string memory symbol_, uint256 minimumTokenBalanceForDividends_)\\n        public\\n        DividendPayingToken(\\n            name_,\\n            symbol_\\n        )\\n    {\\n        claimWait = 3600;\\n        minimumTokenBalanceForDividends = minimumTokenBalanceForDividends_;\\n    }\\n\\n    function _transfer(\\n        address,\\n        address,\\n        uint256\\n    ) internal override {\\n        require(false, \\\"Dividend_Tracker: No transfers allowed\\\");\\n    }\\n\\n    function withdrawDividend() public override {\\n        require(\\n            false,\\n            \\\"Dividend_Tracker: withdrawDividend disabled. Use the \\u0027claim\\u0027 function on the main contract.\\\"\\n        );\\n    }\\n\\n    function excludeFromDividends(address account) external onlyOwner {\\n        if (excludedFromDividends[account]) {\\n            return; \\n        }\\n        excludedFromDividends[account] = true;\\n\\n        _setBalance(account, 0);\\n        tokenHoldersMap.remove(account);\\n\\n        emit ExcludeFromDividends(account);\\n    }\\n\\n    function isExcludedFromDividends(address account)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return excludedFromDividends[account];\\n    }\\n\\n    function updateClaimWait(uint256 newClaimWait) external onlyOwner {\\n        require(\\n            newClaimWait \\u003e= 3600 \\u0026\\u0026 newClaimWait \\u003c= 86400,\\n            \\\"Dividend_Tracker: claimWait must be updated to between 1 and 24 hours\\\"\\n        );\\n        require(\\n            newClaimWait != claimWait,\\n            \\\"Dividend_Tracker: Cannot update claimWait to same value\\\"\\n        );\\n        emit ClaimWaitUpdated(newClaimWait, claimWait);\\n        claimWait = newClaimWait;\\n    }\\n\\n    function updateMinimumTokenBalanceForDividends(uint256 amount)\\n        external\\n        onlyOwner\\n    {\\n        minimumTokenBalanceForDividends = amount;\\n    }\\n\\n    function getLastProcessedIndex() external view returns (uint256) {\\n        return lastProcessedIndex;\\n    }\\n\\n    function getNumberOfTokenHolders() external view returns (uint256) {\\n        return tokenHoldersMap.keys.length;\\n    }\\n\\n    function canAutoClaim(uint256 lastClaimTime) private view returns (bool) {\\n        if (lastClaimTime \\u003e block.timestamp) {\\n            return false;\\n        }\\n\\n        return block.timestamp.sub(lastClaimTime) \\u003e= claimWait;\\n    }\\n\\n    function setBalance(address payable account, uint256 newBalance)\\n        external\\n        onlyOwner\\n    {\\n        if (excludedFromDividends[account]) {\\n            return;\\n        }\\n        if (newBalance \\u003e= minimumTokenBalanceForDividends) {\\n            _setBalance(account, newBalance);\\n            tokenHoldersMap.set(account, newBalance);\\n        } else {\\n            _setBalance(account, 0);\\n            tokenHoldersMap.remove(account);\\n        }\\n        processAccount(account, true);\\n    }\\n\\n    function process(uint256 gas)\\n        public\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 numberOfTokenHolders = tokenHoldersMap.keys.length;\\n        if (numberOfTokenHolders == 0) {\\n            return (0, 0, lastProcessedIndex);\\n        }\\n        uint256 _lastProcessedIndex = lastProcessedIndex;\\n        uint256 gasUsed = 0;\\n        uint256 gasLeft = gasleft();\\n        uint256 iterations = 0;\\n        uint256 claims = 0;\\n\\n        while (gasUsed \\u003c gas \\u0026\\u0026 iterations \\u003c numberOfTokenHolders) {\\n            _lastProcessedIndex++;\\n            if (_lastProcessedIndex \\u003e= tokenHoldersMap.keys.length) {\\n                _lastProcessedIndex = 0;\\n            }\\n\\n            address account = tokenHoldersMap.keys[_lastProcessedIndex];\\n            if (canAutoClaim(lastClaimTimes[account])) {\\n                if (processAccount(payable(account), true)) {\\n                    claims++;\\n                }\\n            }\\n\\n            iterations++;\\n            uint256 newGasLeft = gasleft();\\n\\n            if (gasLeft \\u003e newGasLeft) {\\n                gasUsed = gasUsed.add(gasLeft.sub(newGasLeft));\\n            }\\n            gasLeft = newGasLeft;\\n        }\\n        lastProcessedIndex = _lastProcessedIndex;\\n        return (iterations, claims, lastProcessedIndex);\\n    }\\n\\n    function processAccount(address payable account, bool automatic)\\n        public\\n        onlyOwner\\n        returns (bool)\\n    {\\n        uint256 amount = _withdrawDividendOfUser(account);\\n\\n        if (amount \\u003e 0) {\\n            lastClaimTimes[account] = block.timestamp;\\n            emit Claim(account, amount, automatic);\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    function getAccount(address _account)\\n        public\\n        view\\n        returns (\\n            address account,\\n            int256 index,\\n            int256 iterationsUntilProcessed,\\n            uint256 withdrawableDividends, \\n            uint256 totalDividends, \\n            uint256 lastClaimTime,  \\n            uint256 nextClaimTime,  \\n            uint256 secondsUntilAutoClaimAvailable\\n        )\\n    {\\n        account = _account;\\n        index = tokenHoldersMap.getIndexOfKey(account);\\n        iterationsUntilProcessed = -1;\\n        \\n        if (index \\u003e= 0) {\\n            if (uint256(index) \\u003e lastProcessedIndex) {\\n                iterationsUntilProcessed = index.sub(\\n                    int256(lastProcessedIndex)\\n                );\\n            } else {\\n                uint256 processesUntilEndOfArray = tokenHoldersMap.keys.length \\u003e\\n                    lastProcessedIndex\\n                    ? tokenHoldersMap.keys.length.sub(lastProcessedIndex)\\n                    : 0;\\n\\n                iterationsUntilProcessed = index.add(\\n                    int256(processesUntilEndOfArray)\\n                );\\n            }\\n        }\\n\\n        withdrawableDividends = withdrawableDividendOf(account);\\n        totalDividends = accumulativeDividendOf(account);\\n        lastClaimTime = lastClaimTimes[account];\\n        nextClaimTime = lastClaimTime \\u003e 0 ? lastClaimTime.add(claimWait) : 0;\\n        secondsUntilAutoClaimAvailable = nextClaimTime \\u003e block.timestamp\\n            ? nextClaimTime.sub(block.timestamp)\\n            : 0;\\n    }\\n\\n    function getAccountAtIndex(uint256 index)\\n        public\\n        view\\n        returns (\\n            address,\\n            int256,\\n            int256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        if (index \\u003e= tokenHoldersMap.size()) {\\n            return (address(0), -1, -1, 0, 0, 0, 0, 0);\\n        }\\n        address account = tokenHoldersMap.getKeyAtIndex(index);\\n        return getAccount(account);\\n    }\\n}\\n\"},\"ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn\\u0027t required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address =\\u003e uint256) private _balances;\\n\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``\\u0027s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"},\"GRCC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Clones.sol\\\";\\nimport \\\"./IUniswapV2Factory.sol\\\";\\nimport \\\"./IUniswapV2Router02.sol\\\";\\nimport \\\"./DividendTracker.sol\\\";\\nimport \\\"./SafeERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\ncontract GRCC is ERC20, Ownable {\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    uint256 public constant VERSION = 1;\\n    string public constant NAME = \\\"GRCC\\\";\\n    string public constant SYMBOL = \\\"GRCC\\\";\\n    uint256 public constant ISSUE = 600000000;\\n\\n    uint256 public transferGasLimit = 23000;\\n\\n    IUniswapV2Router02 public uniswapV2Router;\\n    address public uniswapV2Pair;\\n\\n    bool public swapping;\\n    DividendTracker public dividendTracker;\\n\\n    uint256 public swapTokensAtAmount;\\n\\n    address public constant HOLE = address(0xdead);\\n    uint256 public constant PRECISION = 1000;\\n\\n    uint256 public tokenRewardsFee; \\n\\n    uint256 public daoFee; \\n    uint256 public cbnFee; \\n    uint256 public marketingFee; \\n\\n    uint256 public inviterFee; \\n    uint256 public destoryFee; \\n    uint256 public swapTotalFees; \\n    uint256 public transferDestoryFee; \\n\\n    address public marketingWallet; \\n    address public daoWallet; \\n    address public root; \\n    address public cbnWallet; \\n    uint256 public gasForProcessing; \\n\\n    \\n    mapping(address =\\u003e bool) public isExcludedFromFees;\\n\\n    \\n    \\n    mapping(address =\\u003e bool) public automatedMarketMakerPairs;\\n\\n    \\n    mapping(address =\\u003e bool) public blockList;\\n\\n    \\n    bool public tradingIsEnabled = false;\\n    \\n    uint256 public recommendRequire = 0;\\n    \\n    uint256 public sellRateLimit;\\n    \\n    \\n    mapping(address =\\u003e uint256) public inviterLockTime;\\n    mapping(address =\\u003e address) public inviter;\\n    \\n    uint256 public inviterRequireLockTime;\\n\\n    \\n    bool public blockContractDividend = true;\\n    bool public blockContractTransferTo = true;\\n    mapping(address =\\u003e bool) public whiteContractTransferTo;\\n\\n    event UpdateDividendTracker(\\n        address indexed newAddress,\\n        address indexed oldAddress\\n    );\\n\\n    event UpdateUniswapV2Router(\\n        address indexed newAddress,\\n        address indexed oldAddress\\n    );\\n\\n    event ExcludeFromFees(address indexed account, bool isExcluded);\\n    event ExcludeMultipleAccountsFromFees(address[] accounts, bool isExcluded);\\n\\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\\n\\n    event LiquidityWalletUpdated(\\n        address indexed newLiquidityWallet,\\n        address indexed oldLiquidityWallet\\n    );\\n\\n    event GasForProcessingUpdated(\\n        uint256 indexed newValue,\\n        uint256 indexed oldValue\\n    );\\n\\n    event SwapAndLiquify(\\n        uint256 tokensSwapped,\\n        uint256 ethReceived,\\n        uint256 tokensIntoLiqudity\\n    );\\n\\n    event SendDividends(uint256 tokensSwapped, uint256 amount);\\n\\n    event ProcessedDividendTracker(\\n        uint256 iterations,\\n        uint256 claims,\\n        uint256 lastProcessedIndex,\\n        bool indexed automatic,\\n        uint256 gas,\\n        address indexed processor\\n    );\\n\\n    event SetInviter(\\n        address indexed user,\\n        address indexed inviter,\\n        uint256 timestamp,\\n        bool sys\\n    );\\n\\n    function _strConcat(string memory _a, string memory _b)\\n        private\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory _ba = bytes(_a);\\n        bytes memory _bb = bytes(_b);\\n        string memory ret = new string(_ba.length + _bb.length);\\n        bytes memory bret = bytes(ret);\\n        uint256 k = 0;\\n        for (uint256 i = 0; i \\u003c _ba.length; i++) bret[k++] = _ba[i];\\n        for (uint256 i = 0; i \\u003c _bb.length; i++) bret[k++] = _bb[i];\\n        return string(ret);\\n    }\\n\\n    constructor(\\n        address[5] memory addrs_, \\n        uint256[7] memory feeSettings_, \\n        uint256 minimumTokenBalanceForDividends_, \\n        uint256 recommendRequire_, \\n        uint256 sellRateLimit_, \\n        uint256 inviterRequireLockTime_\\n    ) public ERC20(NAME, SYMBOL) {\\n        string memory name__ = _strConcat(NAME, \\\"_DIVIDEND_TRACKER\\\");\\n        string memory symbol__ = _strConcat(SYMBOL, \\\"_D_T\\\");\\n        dividendTracker = new DividendTracker(\\n            name__,\\n            symbol__,\\n            minimumTokenBalanceForDividends_ * 10**uint256(decimals())\\n        );\\n\\n        marketingWallet = addrs_[1];\\n        root = addrs_[2];\\n        cbnWallet = addrs_[3];\\n        daoWallet = addrs_[4];\\n\\n        \\n        tokenRewardsFee = feeSettings_[0]; \\n        marketingFee = feeSettings_[1]; \\n        daoFee = feeSettings_[2]; \\n        cbnFee = feeSettings_[3]; \\n        inviterFee = feeSettings_[4]; \\n        destoryFee = feeSettings_[5]; \\n        \\n        _updateSwapTotalFees();\\n        \\n        transferDestoryFee = feeSettings_[6];\\n\\n        recommendRequire = recommendRequire_ * 10**uint256(decimals());\\n        sellRateLimit = sellRateLimit_;\\n        \\n        inviterRequireLockTime = inviterRequireLockTime_;\\n\\n        \\n        uint256 totalSupply_ = ISSUE * 10**uint256(decimals());\\n        swapTokensAtAmount = totalSupply_.mul(2).div(10**6); \\n\\n        \\n        gasForProcessing = 300000;\\n\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(addrs_[0]);\\n        \\n        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\\n            .createPair(address(this), _uniswapV2Router.WETH());\\n        uniswapV2Router = _uniswapV2Router;\\n        uniswapV2Pair = _uniswapV2Pair;\\n        _setAutomatedMarketMakerPair(_uniswapV2Pair, true);\\n\\n        \\n        dividendTracker.excludeFromDividends(address(dividendTracker));\\n        dividendTracker.excludeFromDividends(address(this));\\n        dividendTracker.excludeFromDividends(owner());\\n        dividendTracker.excludeFromDividends(address(HOLE));\\n        dividendTracker.excludeFromDividends(address(_uniswapV2Router));\\n\\n        \\n        _excludeFromFees(owner(), true);\\n        _excludeFromFees(marketingWallet, true);\\n        _excludeFromFees(cbnWallet, true);\\n        _excludeFromFees(daoWallet, true);\\n        _excludeFromFees(address(this), true);\\n\\n        \\n        _mint(owner(), totalSupply_);\\n\\n        _setWhiteContractTransferTo(address(uniswapV2Router), true);\\n        _setWhiteContractTransferTo(address(uniswapV2Pair), true);\\n    }\\n\\n    function _setWhiteContractTransferTo(address ct, bool value) private {\\n        whiteContractTransferTo[ct] = value;\\n    }\\n\\n    function _excludeFromFees(address account, bool excluded) private {\\n        isExcludedFromFees[account] = excluded;\\n    }\\n\\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\\n        require(\\n            automatedMarketMakerPairs[pair] != value,\\n            \\\"CCC: Automated market maker pair is already set to that value\\\"\\n        );\\n        automatedMarketMakerPairs[pair] = value;\\n\\n        if (value) {\\n            dividendTracker.excludeFromDividends(pair);\\n        }\\n\\n        emit SetAutomatedMarketMakerPair(pair, value);\\n    }\\n\\n    function _updateSwapTotalFees() private {\\n        swapTotalFees = tokenRewardsFee\\n            .add(marketingFee)\\n            .add(daoFee)\\n            .add(cbnFee)\\n            .add(inviterFee)\\n            .add(destoryFee);\\n        require(\\n            swapTotalFees \\u003c= (25 * PRECISION) / 100,\\n            \\\"Total fee is over 25%\\\"\\n        );\\n    }\\n\\n    receive() external payable {}\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        if (amount == 0) {\\n            super._transfer(from, to, 0);\\n            return;\\n        }\\n\\n        if (to.isContract()) {\\n            \\n            if (blockContractTransferTo) {\\n                require(\\n                    whiteContractTransferTo[to] || from == owner(),\\n                    \\\"CCC: not allow transfer to contract\\\"\\n                );\\n            }\\n        }\\n\\n        \\n        bool isMng = isExcludedFromFees[from] || isExcludedFromFees[to];\\n\\n        \\n        if (!isMng) {\\n            require(!blockList[from] \\u0026\\u0026 !blockList[to], \\\"CCC: block\\\");\\n        }\\n\\n        \\n        if (!tradingIsEnabled \\u0026\\u0026 !isMng) {\\n            require(\\n                !automatedMarketMakerPairs[from] \\u0026\\u0026\\n                    !automatedMarketMakerPairs[to],\\n                \\\"CCC: trading is not enable\\\"\\n            );\\n        }\\n\\n        \\n        if (address(uniswapV2Router) == to \\u0026\\u0026 !isMng) {\\n            if (sellRateLimit \\u003c PRECISION) {\\n                \\n                require(\\n                    amount \\u003c= balanceOf(from).mul(sellRateLimit).div(PRECISION)\\n                ); \\n            }\\n        }\\n        \\n        uint256 contractTokenBalance = balanceOf(address(this));\\n        bool canSwap = contractTokenBalance \\u003e= swapTokensAtAmount;\\n        if (\\n            canSwap \\u0026\\u0026 !swapping \\u0026\\u0026 !automatedMarketMakerPairs[from] \\u0026\\u0026 !isMng\\n        ) {\\n            swapping = true;\\n            uint256 multiFees = marketingFee.add(daoFee).add(cbnFee);\\n            if (multiFees \\u003e 0) {\\n                \\n                \\n                uint256 marketingTokens = contractTokenBalance\\n                    .mul(multiFees)\\n                    .div(swapTotalFees);\\n                _swapAndSendBNBToFee(marketingTokens);\\n            }\\n            if (tokenRewardsFee \\u003e 0) {\\n                \\n                \\n                uint256 sellTokens = balanceOf(address(this));\\n                _swapAndSendBNBDividends(sellTokens);\\n            }\\n            swapping = false;\\n        }\\n\\n        \\n        bool shouldSetInviter = balanceOf(to) == 0 \\u0026\\u0026\\n            inviter[to] == address(0) \\u0026\\u0026\\n            !from.isContract() \\u0026\\u0026\\n            !to.isContract(); \\n\\n        if (shouldSetInviter) {\\n            inviter[to] = from;\\n            inviterLockTime[to] = block.timestamp; \\n            emit SetInviter(to, from, block.timestamp, false);\\n        }\\n\\n        bool isSwap = automatedMarketMakerPairs[from] ||\\n            automatedMarketMakerPairs[to]; \\n\\n        bool takeFee = !swapping \\u0026\\u0026 !isMng; \\n\\n        \\n        if (isSwap) {\\n            \\n            address user = automatedMarketMakerPairs[from] ? to : from; \\n            if (!user.isContract()) { \\n                if (inviter[user] == address(0)) {\\n                    inviter[user] = root; \\n                    inviterLockTime[user] = block.timestamp;\\n                    emit SetInviter(user, root, block.timestamp, true);\\n                } else {\\n                    if (\\n                        inviterLockTime[user] \\u003e\\n                        block.timestamp - inviterRequireLockTime \\u0026\\u0026\\n                        inviter[user] != root\\n                    ) {\\n                        \\n                        inviter[user] = root;\\n                        inviterLockTime[user] = block.timestamp;\\n                        emit SetInviter(user, root, block.timestamp, true);\\n                    }\\n                }\\n            }\\n\\n            \\n            if (takeFee) {\\n                uint256 fees = amount.mul(swapTotalFees).div(PRECISION);\\n                amount = amount.sub(fees);\\n                super._transfer(from, address(this), fees);\\n                if (inviterFee \\u003e 0) {\\n                    \\n                    if (automatedMarketMakerPairs[from]) {\\n                        \\n                        _sendRecommend(\\n                            to,\\n                            fees.mul(inviterFee).div(swapTotalFees)\\n                        );\\n                    } else {\\n                        \\n                        swapping = true;\\n                        _swapAndSendBNBRecommend(\\n                            from,\\n                            fees.mul(inviterFee).div(swapTotalFees)\\n                        );\\n                        swapping = false;\\n                    }\\n                }\\n                if (destoryFee \\u003e 0) {\\n                    \\n                    super._transfer(\\n                        address(this),\\n                        HOLE,\\n                        fees.mul(destoryFee).div(swapTotalFees)\\n                    );\\n                }\\n            }\\n        } else {\\n            \\n            if (takeFee) {\\n                if (transferDestoryFee \\u003e 0) {\\n                    uint256 fees = amount.mul(transferDestoryFee).div(\\n                        PRECISION\\n                    );\\n                    amount = amount.sub(fees);\\n                    super._transfer(from, HOLE, fees);\\n                }\\n            }\\n        }\\n        super._transfer(from, to, amount);\\n\\n        \\n        \\n        if (blockContractDividend \\u0026\\u0026 from.isContract()) {\\n            if (!dividendTracker.isExcludedFromDividends(from)) {\\n                dividendTracker.excludeFromDividends(from);\\n            }\\n        } else if (blockContractDividend \\u0026\\u0026 to.isContract()) {\\n            if (!dividendTracker.isExcludedFromDividends(to)) {\\n                dividendTracker.excludeFromDividends(to);\\n            }\\n        }\\n\\n        \\n        try\\n            dividendTracker.setBalance(payable(from), balanceOf(from))\\n        {} catch {}\\n\\n        try dividendTracker.setBalance(payable(to), balanceOf(to)) {} catch {}\\n\\n        if (!swapping) {\\n            uint256 gas = gasForProcessing;\\n\\n            try dividendTracker.process(gas) returns (\\n                uint256 iterations,\\n                uint256 claims,\\n                uint256 lastProcessedIndex\\n            ) {\\n                emit ProcessedDividendTracker(\\n                    iterations,\\n                    claims,\\n                    lastProcessedIndex,\\n                    true,\\n                    gas,\\n                    tx.origin\\n                );\\n            } catch {}\\n        }\\n    }\\n\\n    function _swapTokensForBNB(uint256 tokens) private {\\n        \\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = uniswapV2Router.WETH();\\n\\n        _approve(address(this), address(uniswapV2Router), tokens);\\n\\n        \\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokens,\\n            0, \\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    function _swapAndSendBNBToFee(uint256 tokens) private returns (bool) {\\n        if (balanceOf(address(this)) \\u003c tokens) {\\n            return false;\\n        }\\n        uint256 initialBalance = address(this).balance;\\n        _swapTokensForBNB(tokens);\\n        uint256 newBalance = address(this).balance.sub(initialBalance);\\n\\n        uint256 multiFees = marketingFee.add(daoFee).add(cbnFee);\\n\\n        (bool s1, ) = address(marketingWallet).call{\\n            value: newBalance.mul(marketingFee).div(multiFees),\\n            gas: transferGasLimit\\n        }(\\\"\\\");\\n        (bool s2, ) = address(daoWallet).call{\\n            value: newBalance.mul(daoFee).div(multiFees),\\n            gas: transferGasLimit\\n        }(\\\"\\\");\\n        (bool s3, ) = address(cbnWallet).call{\\n            value: newBalance.mul(cbnFee).div(multiFees),\\n            gas: transferGasLimit\\n        }(\\\"\\\");\\n\\n        return s1 \\u0026\\u0026 s2 \\u0026\\u0026 s3;\\n    }\\n\\n    function _swapAndSendBNBDividends(uint256 tokens) private returns (bool) {\\n        _swapTokensForBNB(tokens);\\n        uint256 dividends = address(this).balance;\\n        (bool success, ) = address(dividendTracker).call{value: dividends}(\\\"\\\");\\n        if (success) {\\n            emit SendDividends(tokens, dividends);\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function _swapAndSendBNBRecommend(address from, uint256 tokens)\\n        private\\n        returns (bool)\\n    {\\n        \\n        if (balanceOf(address(this)) \\u003c tokens) {\\n            return false;\\n        }\\n        uint256 initialBalance = address(this).balance;\\n        _swapTokensForBNB(tokens);\\n        uint256 newBalance = address(this).balance.sub(initialBalance);\\n        uint256 use = 0;\\n        address index = inviter[from];\\n        for (uint256 i = 1; i \\u003c= 13; i++) {\\n            if (index == address(0)) {\\n                break;\\n            }\\n            if (balanceOf(index) \\u003c recommendRequire) {\\n                index = inviter[index];\\n                continue;\\n            }\\n            uint256 x = 0;\\n            if (i == 1) {\\n                x = 100;\\n            } else if (i == 2) {\\n                x = 50;\\n            } else if (i == 3) {\\n                x = 30;\\n            } else if (i \\u003e= 4 \\u0026\\u0026 i \\u003c= 13) {\\n                x = 27;\\n            }\\n            uint256 reward = newBalance.mul(x).div(450);\\n            if (address(this).balance \\u003e= reward) {\\n                (bool success, ) = address(index).call{\\n                    value: reward,\\n                    gas: transferGasLimit\\n                }(\\\"\\\");\\n                if (success) {\\n                    use = use.add(reward);\\n                }\\n            } else {\\n                break;\\n            }\\n            index = inviter[index];\\n        }\\n        \\n        if (newBalance \\u003e use) {\\n            uint256 tmp = newBalance.sub(use);\\n            if (address(this).balance \\u003e= tmp) {\\n                (bool success, ) = address(root).call{\\n                    value: tmp,\\n                    gas: transferGasLimit\\n                }(\\\"\\\");\\n                return success;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function _sendRecommend(address from, uint256 tokens) private {\\n        \\n        if (balanceOf(address(this)) \\u003c tokens) {\\n            return;\\n        }\\n        uint256 use = 0;\\n        address index = inviter[from];\\n        for (uint256 i = 1; i \\u003c= 13; i++) {\\n            if (index == address(0)) {\\n                break;\\n            }\\n            if (balanceOf(index) \\u003c recommendRequire) {\\n                index = inviter[index];\\n                continue;\\n            }\\n            uint256 x = 0;\\n            if (i == 1) {\\n                x = 100;\\n            } else if (i == 2) {\\n                x = 50;\\n            } else if (i == 3) {\\n                x = 30;\\n            } else if (i \\u003e= 4 \\u0026\\u0026 i \\u003c= 13) {\\n                x = 27;\\n            }\\n            uint256 reward = tokens.mul(x).div(450);\\n            if (balanceOf(address(this)) \\u003e= reward) {\\n                use = use.add(reward);\\n                super._transfer(address(this), index, reward);\\n            } else {\\n                break;\\n            }\\n            index = inviter[index];\\n        }\\n        \\n        if (tokens \\u003e use) {\\n            uint256 tmp = tokens.sub(use);\\n            if (balanceOf(address(this)) \\u003e= tmp) {\\n                super._transfer(address(this), root, tmp);\\n            }\\n        }\\n    }\\n\\n    \\n    function strConcat(string memory _a, string memory _b)\\n        external\\n        pure\\n        returns (string memory)\\n    {\\n        return _strConcat(_a, _b);\\n    }\\n\\n    function setSwapTokensAtAmount(uint256 amount) external onlyOwner {\\n        swapTokensAtAmount = amount;\\n    }\\n\\n    function updateDividendTracker(address newAddress) external onlyOwner {\\n        require(\\n            newAddress != address(dividendTracker),\\n            \\\"CCC: The dividend tracker already has that address\\\"\\n        );\\n\\n        DividendTracker newDividendTracker = DividendTracker(\\n            payable(newAddress)\\n        );\\n\\n        require(\\n            newDividendTracker.owner() == address(this),\\n            \\\"CCC: The new dividend tracker must be owned by the CCC token contract\\\"\\n        );\\n\\n        newDividendTracker.excludeFromDividends(address(newDividendTracker));\\n        newDividendTracker.excludeFromDividends(address(this));\\n        newDividendTracker.excludeFromDividends(owner());\\n        dividendTracker.excludeFromDividends(address(HOLE));\\n        newDividendTracker.excludeFromDividends(address(uniswapV2Router));\\n\\n        emit UpdateDividendTracker(newAddress, address(dividendTracker));\\n\\n        dividendTracker = newDividendTracker;\\n    }\\n\\n    function updateUniswapV2Router(address newAddress) external onlyOwner {\\n        require(\\n            newAddress != address(uniswapV2Router),\\n            \\\"CCC: The router already has that address\\\"\\n        );\\n        emit UpdateUniswapV2Router(newAddress, address(uniswapV2Router));\\n        uniswapV2Router = IUniswapV2Router02(newAddress);\\n        address _uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory())\\n            .createPair(address(this), uniswapV2Router.WETH());\\n        uniswapV2Pair = _uniswapV2Pair;\\n    }\\n\\n    function excludeFromFees(address account, bool excluded)\\n        external\\n        onlyOwner\\n    {\\n        _excludeFromFees(account, excluded);\\n        emit ExcludeFromFees(account, excluded);\\n    }\\n\\n    function excludeMultipleAccountsFromFees(\\n        address[] calldata accounts,\\n        bool excluded\\n    ) external onlyOwner {\\n        for (uint256 i = 0; i \\u003c accounts.length; i++) {\\n            _excludeFromFees(accounts[i], excluded);\\n        }\\n        emit ExcludeMultipleAccountsFromFees(accounts, excluded);\\n    }\\n\\n    function setAutomatedMarketMakerPair(address pair, bool value)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            pair != uniswapV2Pair,\\n            \\\"CCC: The PancakeSwap pair cannot be removed from automatedMarketMakerPairs\\\"\\n        );\\n\\n        _setAutomatedMarketMakerPair(pair, value);\\n    }\\n\\n    function updateGasForProcessing(uint256 newValue) external onlyOwner {\\n        require(\\n            newValue \\u003e= 200000 \\u0026\\u0026 newValue \\u003c= 500000,\\n            \\\"CCC: gasForProcessing must be between 200,000 and 500,000\\\"\\n        );\\n        require(\\n            newValue != gasForProcessing,\\n            \\\"CCC: Cannot update gasForProcessing to same value\\\"\\n        );\\n        emit GasForProcessingUpdated(newValue, gasForProcessing);\\n        gasForProcessing = newValue;\\n    }\\n\\n    function updateClaimWait(uint256 claimWait) external onlyOwner {\\n        dividendTracker.updateClaimWait(claimWait);\\n    }\\n\\n    function getClaimWait() external view returns (uint256) {\\n        return dividendTracker.claimWait();\\n    }\\n\\n    function updateMinimumTokenBalanceForDividends(uint256 amount)\\n        external\\n        onlyOwner\\n    {\\n        dividendTracker.updateMinimumTokenBalanceForDividends(amount);\\n    }\\n\\n    function getMinimumTokenBalanceForDividends()\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return dividendTracker.minimumTokenBalanceForDividends();\\n    }\\n\\n    function getTotalDividendsDistributed() external view returns (uint256) {\\n        return dividendTracker.totalDividendsDistributed();\\n    }\\n\\n    function withdrawableDividendOf(address account)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return dividendTracker.withdrawableDividendOf(account);\\n    }\\n\\n    function dividendTokenBalanceOf(address account)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return dividendTracker.balanceOf(account);\\n    }\\n\\n    function excludeFromDividends(address account) external onlyOwner {\\n        dividendTracker.excludeFromDividends(account);\\n    }\\n\\n    function isExcludedFromDividends(address account)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return dividendTracker.isExcludedFromDividends(account);\\n    }\\n\\n    function getAccountDividendsInfo(address account)\\n        external\\n        view\\n        returns (\\n            address,\\n            int256,\\n            int256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return dividendTracker.getAccount(account);\\n    }\\n\\n    function getAccountDividendsInfoAtIndex(uint256 index)\\n        external\\n        view\\n        returns (\\n            address,\\n            int256,\\n            int256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return dividendTracker.getAccountAtIndex(index);\\n    }\\n\\n    function processDividendTracker(uint256 gas) external {\\n        (\\n            uint256 iterations,\\n            uint256 claims,\\n            uint256 lastProcessedIndex\\n        ) = dividendTracker.process(gas);\\n        emit ProcessedDividendTracker(\\n            iterations,\\n            claims,\\n            lastProcessedIndex,\\n            false,\\n            gas,\\n            tx.origin\\n        );\\n    }\\n\\n    function claim() external {\\n        dividendTracker.processAccount(payable(msg.sender), false);\\n    }\\n\\n    function getLastProcessedIndex() external view returns (uint256) {\\n        return dividendTracker.getLastProcessedIndex();\\n    }\\n\\n    function getNumberOfDividendTokenHolders() external view returns (uint256) {\\n        return dividendTracker.getNumberOfTokenHolders();\\n    }\\n\\n    function setMarketingWallet(address payable wallet) external onlyOwner {\\n        marketingWallet = wallet;\\n    }\\n\\n    function setTokenRewardsFee(uint256 value) external onlyOwner {\\n        tokenRewardsFee = value;\\n        _updateSwapTotalFees();\\n    }\\n\\n    function setMarketingFee(uint256 value) external onlyOwner {\\n        marketingFee = value;\\n        _updateSwapTotalFees();\\n    }\\n\\n    function setInviterFee(uint256 value) external onlyOwner {\\n        inviterFee = value;\\n        _updateSwapTotalFees();\\n    }\\n\\n    function setDestoryFee(uint256 value) external onlyOwner {\\n        destoryFee = value;\\n        _updateSwapTotalFees();\\n    }\\n\\n    function setDaoFee(uint256 value) external onlyOwner {\\n        daoFee = value;\\n        _updateSwapTotalFees();\\n    }\\n\\n    function setCbnFee(uint256 value) external onlyOwner {\\n        cbnFee = value;\\n        _updateSwapTotalFees();\\n    }\\n\\n    function setTransferDestoryFee(uint256 value) external onlyOwner {\\n        transferDestoryFee = value;\\n    }\\n\\n    function setTradingEnabled(bool flag) external onlyOwner {\\n        tradingIsEnabled = flag;\\n    }\\n\\n    function setRecommendRequire(uint256 value) external onlyOwner {\\n        recommendRequire = value;\\n    }\\n\\n    function setSellRateLimit(uint256 value) external onlyOwner {\\n        sellRateLimit = value;\\n    }\\n\\n    function setRoot(address addr) external onlyOwner {\\n        root = addr;\\n    }\\n\\n    function setDaoWallet(address addr) external onlyOwner {\\n        daoWallet = addr;\\n    }\\n\\n    function setCbnWallet(address addr) external onlyOwner {\\n        cbnWallet = addr;\\n    }\\n\\n    function addToBlockList(address account, bool status) external onlyOwner {\\n        blockList[account] = status;\\n    }\\n\\n    function addMultipleToBlockList(address[] calldata accounts, bool status)\\n        external\\n        onlyOwner\\n    {\\n        for (uint256 i = 0; i \\u003c accounts.length; i++) {\\n            blockList[accounts[i]] = status;\\n        }\\n    }\\n\\n    function setInviterRequireLockTime(uint256 value) external onlyOwner {\\n        inviterRequireLockTime = value;\\n    }\\n\\n    function setBlockContractDividend(bool value) external onlyOwner {\\n        blockContractDividend = value;\\n    }\\n\\n    function setWhiteContractTransferTo(address ct, bool value)\\n        external\\n        onlyOwner\\n    {\\n        _setWhiteContractTransferTo(ct, value);\\n    }\\n\\n    function setBlockContractTransferTo(bool value) external onlyOwner {\\n        blockContractTransferTo = value;\\n    }\\n\\n    function setTransferGasLimit(uint256 value) external onlyOwner {\\n        transferGasLimit = value;\\n    }\\n}\\n\"},\"GRCCLock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./SafeERC20.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\n\\ncontract GRCCLock is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    function unlock(address xToken) public onlyOwner {\\n        uint256 balance = IERC20(xToken).balanceOf(address(this));\\n        IERC20(xToken).safeTransfer(msg.sender, balance);\\n    }\\n}\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"},\"IterableMapping.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\nlibrary IterableMapping {\\n    // Iterable mapping from address to uint;\\n    struct Map {\\n        address[] keys;\\n        mapping(address =\\u003e uint256) values;\\n        mapping(address =\\u003e uint256) indexOf;\\n        mapping(address =\\u003e bool) inserted;\\n    }\\n\\n    function get(Map storage map, address key) public view returns (uint256) {\\n        return map.values[key];\\n    }\\n\\n    function getIndexOfKey(Map storage map, address key)\\n        public\\n        view\\n        returns (int256)\\n    {\\n        if (!map.inserted[key]) {\\n            return -1;\\n        }\\n        return int256(map.indexOf[key]);\\n    }\\n\\n    function getKeyAtIndex(Map storage map, uint256 index)\\n        public\\n        view\\n        returns (address)\\n    {\\n        return map.keys[index];\\n    }\\n\\n    function size(Map storage map) public view returns (uint256) {\\n        return map.keys.length;\\n    }\\n\\n    function set(\\n        Map storage map,\\n        address key,\\n        uint256 val\\n    ) public {\\n        if (map.inserted[key]) {\\n            map.values[key] = val;\\n        } else {\\n            map.inserted[key] = true;\\n            map.values[key] = val;\\n            map.indexOf[key] = map.keys.length;\\n            map.keys.push(key);\\n        }\\n    }\\n\\n    function remove(Map storage map, address key) public {\\n        if (!map.inserted[key]) {\\n            return;\\n        }\\n\\n        delete map.inserted[key];\\n        delete map.values[key];\\n\\n        uint256 index = map.indexOf[key];\\n        uint256 lastIndex = map.keys.length - 1;\\n        address lastKey = map.keys[lastIndex];\\n\\n        map.indexOf[lastKey] = index;\\n        delete map.indexOf[key];\\n\\n        map.keys[index] = lastKey;\\n        map.keys.pop();\\n    }\\n}\\n\"},\"IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint256\\n    );\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\"},\"IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\"},\"IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\"},\"IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\nimport \\\"./IUniswapV2Router01.sol\\\";\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n    address private _previousOwner;\\n    uint256 private _lockTime;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n     /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    function geUnlockTime() public view returns (uint256) {\\n        return _lockTime;\\n    }\\n\\n    //Locks the contract for owner for the amount of time provided\\n    function lock(uint256 time) public virtual onlyOwner {\\n        _previousOwner = _owner;\\n        _owner = address(0);\\n        _lockTime = block.timestamp + time;\\n        emit OwnershipTransferred(_owner, address(0));\\n    }\\n    \\n    //Unlocks the contract for owner when _lockTime is exceeds\\n    function unlock() public virtual {\\n        require(_previousOwner == msg.sender, \\\"Ownable: you don\\u0027t have permission to unlock\\\");\\n        require(block.timestamp \\u003e _lockTime , \\\"Ownable: can not unlock now\\\");\\n        emit OwnershipTransferred(_owner, _previousOwner);\\n        _owner = _previousOwner;\\n    }\\n}\"},\"SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\n        // we\\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length \\u003e 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c \\u003c a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b \\u003e a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003c= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003e 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003e 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"},\"SafeMathInt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/**\\n * @title SafeMathInt\\n * @dev Math operations for int256 with overflow safety checks.\\n */\\nlibrary SafeMathInt {\\n    int256 private constant MIN_INT256 = int256(1) \\u003c\\u003c 255;\\n    int256 private constant MAX_INT256 = ~(int256(1) \\u003c\\u003c 255);\\n\\n    /**\\n     * @dev Multiplies two int256 variables and fails on overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a * b;\\n\\n        // Detect overflow when multiplying MIN_INT256 with -1\\n        require(c != MIN_INT256 || (a \\u0026 MIN_INT256) != (b \\u0026 MIN_INT256));\\n        require((b == 0) || (c / b == a));\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Division of two int256 variables and fails on overflow.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        // Prevent overflow when dividing MIN_INT256 by -1\\n        require(b != -1 || a != MIN_INT256);\\n\\n        // Solidity already throws when dividing by 0.\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Subtracts two int256 variables and fails on overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b \\u003e= 0 \\u0026\\u0026 c \\u003c= a) || (b \\u003c 0 \\u0026\\u0026 c \\u003e a));\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Adds two int256 variables and fails on overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b \\u003e= 0 \\u0026\\u0026 c \\u003e= a) || (b \\u003c 0 \\u0026\\u0026 c \\u003c a));\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Converts to absolute value, and fails on overflow.\\n     */\\n    function abs(int256 a) internal pure returns (int256) {\\n        require(a != MIN_INT256);\\n        return a \\u003c 0 ? -a : a;\\n    }\\n\\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\\n        require(a \\u003e= 0);\\n        return uint256(a);\\n    }\\n}\"},\"SafeMathUint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/**\\n * @title SafeMathUint\\n * @dev Math operations with safety checks that revert on error\\n */\\nlibrary SafeMathUint {\\n    function toInt256Safe(uint256 a) internal pure returns (int256) {\\n        int256 b = int256(a);\\n        require(b \\u003e= 0);\\n        return b;\\n    }\\n}\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[5]\",\"name\":\"addrs_\",\"type\":\"address[5]\"},{\"internalType\":\"uint256[7]\",\"name\":\"feeSettings_\",\"type\":\"uint256[7]\"},{\"internalType\":\"uint256\",\"name\":\"minimumTokenBalanceForDividends_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recommendRequire_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellRateLimit_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inviterRequireLockTime_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeMultipleAccountsFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"GasForProcessingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newLiquidityWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldLiquidityWallet\",\"type\":\"address\"}],\"name\":\"LiquidityWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claims\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastProcessedIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"automatic\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"processor\",\"type\":\"address\"}],\"name\":\"ProcessedDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"inviter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"sys\",\"type\":\"bool\"}],\"name\":\"SetInviter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HOLE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ISSUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"addMultipleToBlockList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"addToBlockList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockContractDividend\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockContractTransferTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blockList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cbnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cbnWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destoryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"dividendTokenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendTracker\",\"outputs\":[{\"internalType\":\"contract DividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeMultipleAccountsFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasForProcessing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"geUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountDividendsInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAccountDividendsInfoAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimWait\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastProcessedIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumTokenBalanceForDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfDividendTokenHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDividendsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inviterFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviterLockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inviterRequireLockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromDividends\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"processDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recommendRequire\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"root\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellRateLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setBlockContractDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setBlockContractTransferTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setCbnFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setCbnWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setDaoFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setDaoWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setDestoryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setInviterFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setInviterRequireLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMarketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setRecommendRequire\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setSellRateLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setTokenRewardsFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setTradingEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setTransferDestoryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setTransferGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ct\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setWhiteContractTransferTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_a\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_b\",\"type\":\"string\"}],\"name\":\"strConcat\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenRewardsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingIsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDestoryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimWait\",\"type\":\"uint256\"}],\"name\":\"updateClaimWait\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateGasForProcessing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateMinimumTokenBalanceForDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteContractTransferTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawableDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "GRCC", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e000000000000000000000000999abb948ff0b48a6d0b76d06998406c6424e7f8000000000000000000000000a9f846c2c375252c5cbe41f7a215dacdf59c8bbe00000000000000000000000065f6d10d7108cadebbf47122735db9aca114f9820000000000000000000000007e6b4e3676adfeced7bdfc15d33ed5226ba6c68a000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000002d0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000493e000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000384000000000000000000000000000000000000000000000000000000000000001e", "EVMVersion": "Default", "Library": "IterableMapping:e5236ed1cc1b1d5d5df9bcb9e6e6995d355b2780", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://921d15717399c2018cddaa0fcd7b14a164f8bf94232a13a859f950d749faed33"}