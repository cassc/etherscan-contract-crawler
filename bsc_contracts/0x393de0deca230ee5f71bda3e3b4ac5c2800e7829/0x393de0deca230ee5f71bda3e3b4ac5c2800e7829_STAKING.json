{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.20;\r\n\r\n// File: @openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\utils\\Context.sol\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n \r\n// File: @openzeppelin\\contracts\\access\\Ownable.sol\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\ninterface WAL {\r\n    function send(address token, uint256 amount ,  address addr, address to) external returns (bool);\r\n    function myaddr(address addr) external view returns (address);\r\n    function sp(address addr) external view returns (address);\r\n}\r\n\r\ninterface MAR {\r\n    function get_jb(uint256 amount) external view returns (uint256);\r\n}\r\n\r\ncontract STAKING is Ownable {\r\n    \r\n\tstruct position {\r\n        uint256 pid;\r\n\t\taddress sp1;\r\n        address sp2;\r\n        address sp3;\r\n\t\taddress addr;\r\n\t\tuint256 day;\r\n        uint256 rate;\r\n        uint256 amount;\r\n\t\tuint256 time;\r\n        uint256 lastclaim;\r\n        bool done;\r\n\t}\r\n\r\n   position[] public stakes;\r\n \r\n   mapping(uint256 => uint256 ) public day;\r\n   mapping(uint256 => uint256 ) public rate;\r\n   mapping(uint256 => bool ) public open;\r\n   mapping(address => uint256 ) public affiliate;\r\n   mapping(address => uint256 ) public mystake;\r\n   mapping(address => uint256 ) public myjb;\r\n   \r\n\r\n   uint256 public minimum = 1e18;\r\n   address pool ;\r\n \r\n    constructor() {\r\n    day[0]=10; rate[0]=10;open[0]=true;\r\n    day[1]=20; rate[1]=12;open[1]=true;\r\n    day[2]=30; rate[2]=15;open[2]=true;\r\n    }\r\n\r\n\r\n    event Aff(uint256 time, address from, address  to, uint256 value);\r\n    event Claim(uint256 time, address  to, uint256 value);\r\n    event Buy(uint256 time, address  to, uint256 value);\r\n    event Unstake(uint256 time, address  to, uint256 value);\r\n    event Deposit(uint256 time, address  to, uint256 value);\r\n\r\n    address WALLET  =  0x4618C15FF8B59dC06C3Baf30C1ee47cF80d850eD;\r\n    address JB      =  0x531C1149068aDc6bcf01088e4a2D082dC1351E4C;\r\n    address MARKET  =  0x2BfB0a227dE0aAC9430616edb1370Fbd3163236a;\r\n    address USDT    =  0x55d398326f99059fF775485246999027B3197955;\r\n\r\n    function update(uint256 pid,uint256 day_,uint256 rate_,bool _open) external onlyOwner {\r\n       day[pid] = day_;\r\n       rate[pid] = rate_;\r\n       open[pid] = _open;\r\n    }\r\n\r\n    function setmin(uint256 min,address addr) external onlyOwner {\r\n       minimum = min;\r\n       pool = addr;\r\n    }\r\n\r\n    \r\n    function buy(uint256 amount) external returns(bool) {\r\n    require(amount >0 ,\"Amount required\");\r\n    uint256 est = MAR(MARKET).get_jb(amount);\r\n    require(est >0 ,\"Invalid Amount\");\r\n    WAL(WALLET).send(USDT,amount,msg.sender,pool);\r\n    myjb[msg.sender]+=est;\r\n    emit Buy(block.timestamp,msg.sender,amount);\r\n    return true;\r\n    }\r\n\r\n    function deposit(uint256 amount) external returns(bool) {\r\n    require(amount >0 ,\"Amount required\");\r\n    uint256 jb1 = IERC20(JB).balanceOf(address(this));\r\n    WAL(WALLET).send(JB,amount,msg.sender,address(this));\r\n    uint256 jb2 = IERC20(JB).balanceOf(address(this));\r\n    require(jb2 > jb1 ,\"Amount required\");\r\n    amount = jb2-jb1;\r\n    myjb[msg.sender]+=amount;\r\n     emit Deposit(block.timestamp,msg.sender,amount);\r\n    return true;\r\n    }\r\n\r\n\tfunction stake(uint256 pid,uint256 amount) external returns(bool) {\r\n        require(open[pid],\"Staking paused\");\r\n        require(amount >= minimum ,\"Staking minimum\");\r\n        require(amount <= myjb[msg.sender] ,\"Staking minimum\");\r\n\r\n        address sp1 = WAL(WALLET).sp(msg.sender);\r\n        address sp2 = WAL(WALLET).sp(sp1);\r\n        address sp3 = WAL(WALLET).sp(sp2);\r\n \r\n        mystake[msg.sender]+=amount;\r\n        myjb[msg.sender]-=amount;\r\n\r\n        stakes.push(position({\r\n          pid:pid,\r\n          sp1:sp1,\r\n          sp2:sp2,\r\n          sp3:sp3,\r\n\t\t  addr:msg.sender,\r\n\t\t  day:day[pid],\r\n          rate:rate[pid],\r\n          amount:amount,\r\n\t\t  time:block.timestamp,\r\n          lastclaim:block.timestamp,\r\n          done:false\r\n        }));\r\n        return true;\r\n    \r\n\t}\r\n\r\n    function stakingslenght() external  view returns(uint256) {\r\n        return stakes.length;\r\n    }\r\n\r\n\tfunction pending(uint256 pid) public view returns(uint256) {\r\n\t\tposition storage stake_info = stakes[pid];\r\n        uint256 rps = ((stake_info.amount * stake_info.rate) /  1000 )  / 86400;\r\n        uint256 ent = block.timestamp;\r\n        uint256 endtime = stake_info.time + (stake_info.day*86400);\r\n        if(ent>endtime) ent = endtime;\r\n        if(stake_info.lastclaim>=endtime) return 0;\r\n\t\treturn (rps * (ent - stake_info.lastclaim));\r\n\t}\r\n\r\n    function claim(uint256 pid) public  returns(bool) {\r\n        uint256 pend = pending(pid);\r\n        if(pend > 0 ){\r\n\r\n            position storage stake_info = stakes[pid];\r\n            address addr = WAL(WALLET).myaddr(stake_info.addr);\r\n            IERC20(JB).transfer(addr,pend);\r\n            emit Claim(block.timestamp,stake_info.addr,pend);\r\n\r\n            if(mystake[stake_info.sp1]>0){\r\n            affiliate[stake_info.sp1] = affiliate[stake_info.sp1] + (pend*10)/100;\r\n            emit Aff(block.timestamp,stake_info.addr,stake_info.sp1,(pend*10)/100);\r\n            }\r\n\r\n             if(mystake[stake_info.sp2]>0){\r\n            affiliate[stake_info.sp2] = affiliate[stake_info.sp2] + (pend*10)/100;\r\n             emit Aff(block.timestamp,stake_info.addr,stake_info.sp2,(pend*10)/100);\r\n             }\r\n\r\n            if(mystake[stake_info.sp3]>0){\r\n            affiliate[stake_info.sp3] = affiliate[stake_info.sp3] + (pend*5)/100;\r\n            emit Aff(block.timestamp,stake_info.addr,stake_info.sp3,(pend*5)/100);\r\n            }\r\n\r\n            stake_info.lastclaim = block.timestamp;\r\n        }\r\n\r\n    return true;\r\n    }\r\n\r\n     function claim_affiliate() external  returns(bool) {\r\n        uint256 pend = affiliate[msg.sender];\r\n        if(pend > 0 ){\r\n            address addr = WAL(WALLET).myaddr(msg.sender);\r\n            IERC20(JB).transfer(addr,pend);\r\n            affiliate[msg.sender] = 0;\r\n        }\r\n    return true;\r\n    }\r\n\r\n\tfunction unstake(uint256 pid) public {\r\n\t    position storage stake_info = stakes[pid];\r\n        uint256 endtime = stake_info.time + (stake_info.day*86400);\r\n        require(block.timestamp>=endtime,\"Waiting end time\");\r\n        require(!stake_info.done,\"Has been claimed\");\r\n        require(stake_info.addr == msg.sender,\"Just owner\");\r\n        claim(pid);\r\n\t\taddress addr = WAL(WALLET).myaddr(msg.sender);\r\n        IERC20(JB).transfer(addr,stake_info.amount);\r\n        mystake[msg.sender]-=stake_info.amount;\r\n        stake_info.done = true;\r\n        emit Unstake(block.timestamp,msg.sender,stake_info.amount);\r\n\t}\r\n\r\n    function extend(uint256 pid) public {\r\n\t    position storage stake_info = stakes[pid];\r\n        uint256 endtime = stake_info.time + (stake_info.day*86400);\r\n        require(block.timestamp>=endtime,\"Waiting end time\");\r\n        require(!stake_info.done,\"Has been claimed\");\r\n        require(stake_info.addr == msg.sender,\"Just owner\");\r\n        require(open[stake_info.pid],\"Staking paused\");\r\n        claim(pid);\r\n        stake_info.time = block.timestamp;\r\n        stake_info.day = day[pid];\r\n        stake_info.rate = rate[pid];\r\n        stake_info.time = block.timestamp;\r\n        stake_info.lastclaim=block.timestamp;\r\n\t}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Aff\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"affiliate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim_affiliate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"day\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"extend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"myjb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mystake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"open\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"pending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sp1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sp2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sp3\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastclaim\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"done\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingslenght\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"day_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_open\",\"type\":\"bool\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "STAKING", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://338ef9cccfd4c6b49723165d46aaedf69021d3f462618bb42827a368c5ad3396"}