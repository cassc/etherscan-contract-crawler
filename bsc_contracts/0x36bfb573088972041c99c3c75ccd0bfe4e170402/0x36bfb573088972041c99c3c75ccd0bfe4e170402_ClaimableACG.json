{"SourceCode": "// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     *\r\n     * Furthermore, `isContract` will also return true if the target contract within\r\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\r\n     * which only has an effect at the end of a transaction.\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\r\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 oldAllowance = token.allowance(address(this), spender);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\r\n     * 0 before setting it to a non-zero value.\r\n     */\r\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\r\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\r\n\r\n        if (!_callOptionalReturnBool(token, approvalCall)) {\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\r\n            _callOptionalReturn(token, approvalCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\r\n     * Revert on invalid signature.\r\n     */\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     *\r\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\r\n     */\r\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\r\n        // and not revert is the subcall reverts.\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        return\r\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\r\n    }\r\n}\r\n\r\n// File: acgClaim.sol\r\n\r\n\r\npragma solidity =0.8.17;\r\n\r\n\r\n// WBNB Price in (USDT)\r\ninterface IPriceFeed {\r\n    function latestAnswer() external view returns (int256);\r\n}\r\n\r\n// ACG Pair\r\ninterface IACGPair {\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 _reserve0,\r\n            uint112 _reserve1,\r\n            uint32 _blockTimestampLast\r\n        );\r\n}\r\n\r\n// ACG Token\r\ninterface IACGToken {\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\n// @ACG - ACG Rewards\r\ncontract ClaimableACG {\r\n    // Import the SafeERC20 library for safe ERC20 token operations.\r\n    using SafeERC20 for IERC20;\r\n\r\n    // Address of the contract owner.\r\n    address private _owner;\r\n\r\n    // Address of the sub-owner of the contract.\r\n    address private _subOwner;\r\n\r\n    // Addresses of external contracts used in this contract.\r\n    address private _wbnbPriceFeedAddress;\r\n    address private _acgPairAddress;\r\n    address private _acgTokenAddress;\r\n\r\n    // Interface instances for interacting with external contracts.\r\n    IPriceFeed private _wbnbPriceFeed;\r\n    IACGPair private _acgPair;\r\n    IACGToken private _acgToken;\r\n\r\n    // Address of the ERC20 token being claimed.\r\n    address private _tokenAddress;\r\n\r\n    // Required ACG balance holding in usdt\r\n    uint256 private _requiredAcgBalanceInUsdt;\r\n\r\n    // Mapping of user addresses to their claimable token balances.\r\n    mapping(address => uint256) private _userBalances;\r\n\r\n    // Mapping of user addresses to their claimed token balances.\r\n    mapping(address => uint256) private _claimedUserBalances;\r\n\r\n    // Array to keep track of indices of all addresses in the userBalances mapping.\r\n    address[] private _addressIndices;\r\n\r\n    // Mapping to track the lock status of each user's balance.\r\n    mapping(address => bool) private _userLocks;\r\n\r\n    // Flag to indicate if claiming is enabled or not.\r\n    bool private _isClaimEnabled;\r\n\r\n    // Modifier to allow only the contract owner (admin) to access the function.\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner, \"caller is not the Owner\");\r\n        _;\r\n    }\r\n\r\n    // Modifier to allow only the contract owner or sub-owner to access the function.\r\n    modifier onlyOwnerOrSub() {\r\n        require(\r\n            msg.sender == _owner || msg.sender == _subOwner,\r\n            \"caller is not the Owner or subOwner\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    // Modifier to check if claiming is currently enabled.\r\n    modifier checkIsClaimEnabled() {\r\n        require(_isClaimEnabled == true, \"Claim is not running now\");\r\n        _;\r\n    }\r\n\r\n    // Modifier to check if the contract holds enough tokens to fulfill a user's request.\r\n    modifier hasSufficientContractTokensForUser() {\r\n        require(\r\n            IERC20(_tokenAddress).balanceOf(address(this)) >=\r\n                _userBalances[msg.sender],\r\n            \"Contract does not have enough tokens\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    // Modifier to check if the contract holds tokens in an amount greater than or equal to the requested amount.\r\n    modifier hasSufficientContractTokens(uint256 _amount) {\r\n        require(\r\n            IERC20(_tokenAddress).balanceOf(address(this)) >= _amount,\r\n            \"Contract does not have enough tokens\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    // Modifier to check if a user's balance is locked.\r\n    modifier isUserBalanceLocked() {\r\n        require(!_userLocks[msg.sender], \"Your balance is locked\");\r\n        _;\r\n    }\r\n\r\n    // Modifier to check a user's balance and ensure it meets the required balance.\r\n    modifier checkBalanceAndRequiredB() {\r\n        // Check that the user has a balance greater than 0\r\n        require(\r\n            _userBalances[msg.sender] > 0,\r\n            \"Cannot claim tokens with a balance of 0\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    // Event emitted when a user claims all their rewards.\r\n    event ClaimedAllRewards(\r\n        uint256 userAcgHoldingsInUsdt, // The user's ACG holdings in USDT equivalent\r\n        uint256 claimedAmount // The amount of rewards claimed\r\n    );\r\n\r\n    // Event emitted when a user claims specific amount of rewards.\r\n    event ClaimedAmountOfRewards(\r\n        uint256 userAcgHoldingsInUsdt, // The user's ACG holdings in USDT equivalent\r\n        uint256 claimedAmount // The amount of rewards claimed\r\n    );\r\n\r\n    // Event to log the setting of claim amounts for multiple users.\r\n    event SetClaimAmounts(address[] users, uint256[] amounts);\r\n\r\n    // Constructor to initialize the contract with the ERC20 token address, owner, and sub-owner.\r\n    constructor(\r\n        address tokenAddress,\r\n        address wbnbPriceFeedAddress,\r\n        address acgPairAddress,\r\n        address acgTokenAddress,\r\n        uint256 requiredBalance\r\n    ) {\r\n        // Set the contract owner as the sender of the constructor transaction.\r\n        _owner = msg.sender;\r\n\r\n        // Enable claiming by default.\r\n        _isClaimEnabled = true;\r\n\r\n        // Set the address of the ERC20 token being claimed.\r\n        _tokenAddress = tokenAddress;\r\n\r\n        // Set the required ACG balance in USDT\r\n        _requiredAcgBalanceInUsdt = requiredBalance;\r\n\r\n        // Set the external contract addresses\r\n        _wbnbPriceFeedAddress = wbnbPriceFeedAddress;\r\n        _acgPairAddress = acgPairAddress;\r\n        _acgTokenAddress = acgTokenAddress;\r\n\r\n        // Initialize interface instances for external contracts.\r\n        _wbnbPriceFeed = IPriceFeed(wbnbPriceFeedAddress);\r\n        _acgPair = IACGPair(acgPairAddress);\r\n        _acgToken = IACGToken(acgTokenAddress);\r\n    }\r\n\r\n    // Fallback function to receive ETH\r\n    receive() external payable {}\r\n\r\n    // Get the address of the WBNB price feed contract.\r\n    function getWbnbPriceFeedAddress() public view returns (address) {\r\n        return _wbnbPriceFeedAddress;\r\n    }\r\n\r\n    // Get the address of the ACG pair contract.\r\n    function getAcgPairAddress() public view returns (address) {\r\n        return _acgPairAddress;\r\n    }\r\n\r\n    // Get the address of the ACG token contract.\r\n    function getAcgTokenAddress() public view returns (address) {\r\n        return _acgTokenAddress;\r\n    }\r\n\r\n    // Get the address of rewards token.\r\n    function getRewardsTokenAddress() public view returns (address) {\r\n        return _tokenAddress;\r\n    }\r\n\r\n    // Get the required ACG balance in Usdt.\r\n    function getRequiredAcgBalanceInUsdt() public view returns (uint256) {\r\n        return _requiredAcgBalanceInUsdt;\r\n    }\r\n\r\n    // Check a user's balance.\r\n    function checkBalance(address user) public view returns (uint256) {\r\n        // Return the user's balance.\r\n        return _userBalances[user];\r\n    }\r\n\r\n    // Check a user's claimed balance.\r\n    function checkClaimedBalance(address user) public view returns (uint256) {\r\n        // Return the user's claimed balance.\r\n        return _claimedUserBalances[user];\r\n    }\r\n\r\n    // Get the address of the contract owner.\r\n    function getOwner() public view returns (address) {\r\n        // Return the owner's address.\r\n        return _owner;\r\n    }\r\n\r\n    // Get the address of the sub-owner.\r\n    function getSubOwner() public view returns (address) {\r\n        // Return the sub-owner's address.\r\n        return _subOwner;\r\n    }\r\n\r\n    // Get the contract's BNB balance.\r\n    function getBNBBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    // Get the contract's ERC20 token balance.\r\n    function getErc20TokenBalance() public view returns (uint256) {\r\n        return IERC20(_tokenAddress).balanceOf(address(this));\r\n    }\r\n\r\n    // Set the required ACG balance in USDT\r\n    function setRequiredAcgBalanceInUsdt(uint256 _newValue) external onlyOwnerOrSub {\r\n        require(\r\n            _newValue != _requiredAcgBalanceInUsdt,\r\n            \"ACG: Already set to the same value.\"\r\n        );\r\n        require(\r\n            _newValue >= 0,\r\n            \"ACG: Please choose a value greater than 0.\"\r\n        );\r\n\r\n        _requiredAcgBalanceInUsdt = _newValue;\r\n    }\r\n\r\n    // Set a new ERC20 token address for claiming.\r\n    function setERC20ClaimableToken(address _newToken) external onlyOwnerOrSub {\r\n        require(\r\n            _newToken != address(0),\r\n            \"New token address cannot be address 0\"\r\n        );\r\n        require(\r\n            _newToken != _tokenAddress,\r\n            \"New token address cannot be the same as the old token address\"\r\n        );\r\n\r\n        _tokenAddress = _newToken;\r\n    }\r\n\r\n    // Set the address of the WBNB price feed contract.\r\n    function setWbnbPriceFeedAddress(address _newAddress)\r\n        external\r\n        onlyOwnerOrSub\r\n    {\r\n        require(\r\n            _newAddress != address(0),\r\n            \"New token address cannot be address 0\"\r\n        );\r\n        require(\r\n            _newAddress != _tokenAddress,\r\n            \"New address cannot be the same as the old wbnb feed address\"\r\n        );\r\n\r\n        _wbnbPriceFeedAddress = _newAddress;\r\n        // Update the interface instance\r\n        _wbnbPriceFeed = IPriceFeed(_newAddress);\r\n    }\r\n\r\n    // Set the address of the ACG pair contract.\r\n    function setAcgPairAddress(address _newAddress) external onlyOwnerOrSub {\r\n        require(\r\n            _newAddress != address(0),\r\n            \"New token address cannot be address 0\"\r\n        );\r\n        require(\r\n            _newAddress != _tokenAddress,\r\n            \"New address cannot be the same as the old acg pair address\"\r\n        );\r\n\r\n        _acgPairAddress = _newAddress;\r\n        // Update the interface instance\r\n        _acgPair = IACGPair(_newAddress);\r\n    }\r\n\r\n    // Set the address of the ACG token contract.\r\n    function setAcgTokenAddress(address _newAddress) external onlyOwnerOrSub {\r\n        require(\r\n            _newAddress != address(0),\r\n            \"New token address cannot be address 0\"\r\n        );\r\n        require(\r\n            _newAddress != _tokenAddress,\r\n            \"New address cannot be the same as the old acg token address\"\r\n        );\r\n\r\n        _acgTokenAddress = _newAddress;\r\n        // Update the interface instance\r\n        _acgToken = IACGToken(_newAddress);\r\n    }\r\n\r\n    // Transfer the contract's BNB balance to a specific wallet.\r\n    function recoverBNBToWallet(address _to, uint256 _amount)\r\n        external\r\n        onlyOwnerOrSub\r\n    {\r\n        require(_to != address(0), \"Transfer to the zero address\");\r\n        uint256 balance = address(this).balance;\r\n        require(\r\n            balance >= _amount,\r\n            \"Cannot recover more than the available balance\"\r\n        );\r\n        payable(_to).transfer(_amount);\r\n    }\r\n\r\n    // Transfer the contract's specific ERC20 token balance to a specific wallet.\r\n    function recoverERC20TokensToWallet(\r\n        address _token,\r\n        address _to,\r\n        uint256 _amount\r\n    ) external onlyOwnerOrSub {\r\n        require(_to != address(0), \"Transfer to the zero address\");\r\n        uint256 balance = IERC20(_token).balanceOf(address(this));\r\n        require(\r\n            balance >= _amount,\r\n            \"Cannot recover more than available balance\"\r\n        );\r\n        IERC20(_token).transfer(_to, _amount);\r\n    }\r\n\r\n    // Transfer ownership of the contract to a new owner.\r\n    function transferOwner(address newOwner) external onlyOwner {\r\n        // Set the new owner of the contract.\r\n        _owner = newOwner;\r\n    }\r\n\r\n    // Add a new sub-owner to the contract.\r\n    function addSubOwner(address newSubOwner) external onlyOwner {\r\n        require(\r\n            newSubOwner != _owner,\r\n            \"Sub-owner address cannot be the same as the owner's address\"\r\n        );\r\n        _subOwner = newSubOwner;\r\n    }\r\n\r\n    // Remove the sub-owner by setting the address to address(0).\r\n    function removeSubOwner() external onlyOwner {\r\n        _subOwner = address(0);\r\n    }\r\n\r\n    // Toggle the claim status to enable or disable claiming.\r\n    function setClaimStatus(bool _enabled) external onlyOwnerOrSub {\r\n        _isClaimEnabled = _enabled;\r\n    }\r\n\r\n    // Set a user's balance status as locked or unlocked.\r\n    function setUserStatus(address _user, bool _status)\r\n        external\r\n        onlyOwnerOrSub\r\n    {\r\n        _userLocks[_user] = _status;\r\n    }\r\n\r\n    // set the claim amounts for multiple users in a single transaction\r\n    function setClaimAmount(address[] memory users, uint256[] memory amounts)\r\n        external\r\n        onlyOwnerOrSub\r\n    {\r\n        // check that the number of users and amounts match\r\n        require(\r\n            users.length == amounts.length,\r\n            \"Incorrect number of users and amounts\"\r\n        );\r\n        // set the claim amount for each user\r\n        for (uint256 i = 0; i < users.length; i++) {\r\n            // add the specified amount to the user's existing claim amount\r\n            _userBalances[users[i]] += amounts[i];\r\n            // add the address to the array of indices\r\n            _addressIndices.push(users[i]);\r\n        }\r\n\r\n        // Emit an event to log the action\r\n        emit SetClaimAmounts(users, amounts);\r\n    }\r\n\r\n    // Internal function to calculate the ACG token price in USDT.\r\n    function getAcgPriceInUsdtInternal() internal view returns (uint256) {\r\n        // Get the BNB price in USDT from the external contract\r\n        int256 getBnbPriceInUsdt = _wbnbPriceFeed.latestAnswer();\r\n        uint256 bnbPriceInUsdt = uint256(getBnbPriceInUsdt) * 10**10;\r\n\r\n        // Get the ACG reserves from the external contract\r\n        (uint112 _reserve0, uint112 _reserve1, ) = _acgPair.getReserves();\r\n        uint256 _tokenReserve = uint256(_reserve0);\r\n        uint256 _wbnbReserve = uint256(_reserve1) * 10**18; // Adjust for decimals\r\n\r\n        // Calculate ACG price in WBNB\r\n        uint256 acgPriceInWbnb = _wbnbReserve / _tokenReserve;\r\n\r\n        // Calculate ACG price in USDT\r\n        uint256 acgPriceInUsdt = (bnbPriceInUsdt * acgPriceInWbnb) / 10**18; // Adjust for decimals\r\n\r\n        return acgPriceInUsdt;\r\n    }\r\n\r\n    // Internal function to calculate the user's ACG token holdings in USDT.\r\n    function claculateUserAcgHoldingsInUsdt(address player) internal view returns (uint256) {\r\n        // Calculate ACG price in USDT\r\n        uint256 acgPriceInUsdt = getAcgPriceInUsdtInternal();\r\n\r\n        // Get the user's ACG balance from the external contract\r\n        uint256 userAcgBalance = _acgToken.balanceOf(player);\r\n\r\n        // Calculate the user's ACG holdings in USDT\r\n        uint256 userAcgHoldingsInUsdt = (userAcgBalance * acgPriceInUsdt) /\r\n            10**18; // Adjust for decimals\r\n\r\n        return userAcgHoldingsInUsdt;\r\n    }\r\n\r\n    // Claim all the tokens won by a specific user. This function calculates the user's ACG token holdings in USDT,\r\n    // verifies that the user's ACG holdings meet the required balance, transfers the tokens, updates balances, and emits an event.\r\n    function claim()\r\n        external\r\n        checkIsClaimEnabled\r\n        isUserBalanceLocked\r\n        hasSufficientContractTokensForUser\r\n        checkBalanceAndRequiredB\r\n    {\r\n        // Lock the user's balance to prevent reentrancy attacks\r\n        _userLocks[msg.sender] = true;\r\n\r\n        // Get the balance of the caller inside the contract\r\n        uint256 playerBalance = _userBalances[msg.sender];\r\n\r\n        // Calculate the user's ACG holdings in USDT\r\n        uint256 userAcgHoldingsInUsdt = claculateUserAcgHoldingsInUsdt(msg.sender);\r\n\r\n        // Check if the user's ACG holdings in USDT are greater than or equal to the specified amount\r\n        require(\r\n            userAcgHoldingsInUsdt >= _requiredAcgBalanceInUsdt,\r\n            \"Insufficient ACG holdings\"\r\n        );\r\n\r\n        // Get the ERC20 token contract\r\n        IERC20 token = IERC20(_tokenAddress);\r\n\r\n        // Transfer the balance of the caller inside the contract to the caller\r\n        token.safeTransfer(msg.sender, playerBalance);\r\n\r\n        // Update the user's balance\r\n        _userBalances[msg.sender] = 0;\r\n\r\n        // Update the user's claimed balance\r\n        _claimedUserBalances[msg.sender] += playerBalance;\r\n\r\n        // Unlock the user's balance\r\n        _userLocks[msg.sender] = false;\r\n\r\n        // Emit an event to indicate the successful claim\r\n        emit ClaimedAllRewards(userAcgHoldingsInUsdt, playerBalance);\r\n    }\r\n\r\n    // claim a specific amount of tokens by the caller of this function\r\n    function claimAmount(uint256 amount)\r\n        external\r\n        checkIsClaimEnabled\r\n        isUserBalanceLocked\r\n        checkBalanceAndRequiredB\r\n        hasSufficientContractTokens(amount)\r\n    {\r\n        // Check that the specified amount is valid (greater than 0)\r\n        require(amount > 0, \"Invalid amount\");\r\n\r\n        // Get the balance of the caller inside the contract\r\n        uint256 playerBalance = _userBalances[msg.sender];\r\n\r\n        // Check that the player is greater or equal to the amount requested\r\n        require(playerBalance >= amount, \"Not enough rewards\");\r\n\r\n        // Calculate the user's ACG holdings in USDT\r\n        uint256 userAcgHoldingsInUsdt = claculateUserAcgHoldingsInUsdt(msg.sender);\r\n\r\n        // Check if the user's ACG holdings in USDT are greater than or equal to the specified amount\r\n        require(\r\n            userAcgHoldingsInUsdt >= _requiredAcgBalanceInUsdt,\r\n            \"Insufficient ACG holdings\"\r\n        );\r\n\r\n        // Lock the user's balance to prevent reentrancy attacks\r\n        _userLocks[msg.sender] = true;\r\n\r\n        // get the ERC20 token contract\r\n        IERC20 token = IERC20(_tokenAddress);\r\n\r\n        // Transfer the specified amount of tokens to the user\r\n        token.safeTransfer(msg.sender, amount);\r\n        // Update the user's balance\r\n        _userBalances[msg.sender] -= amount;\r\n        // Update the user's claimed balance\r\n        _claimedUserBalances[msg.sender] += amount;\r\n        // Unlock the user's balance\r\n        _userLocks[msg.sender] = false;\r\n\r\n        emit ClaimedAmountOfRewards(userAcgHoldingsInUsdt, amount);\r\n    }\r\n\r\n    // Admin function to claim all remaining tokens held by the contract. This function disables claiming temporarily,\r\n    // transfers the remaining tokens to the owner or sub-owner, and clears user balances and locks.\r\n    // It then re-enables claiming.\r\n    function adminClaim() external onlyOwnerOrSub returns (bool) {\r\n        _isClaimEnabled = false;\r\n\r\n        // Get the ERC20 token contract\r\n        IERC20 token = IERC20(_tokenAddress);\r\n\r\n        // Get the contract balance\r\n        uint256 contractTokenBalance = IERC20(_tokenAddress).balanceOf(\r\n            address(this)\r\n        );\r\n\r\n        // Determine the recipient address (owner or sub-owner)\r\n        address recipient = msg.sender == _subOwner ? _subOwner : _owner;\r\n\r\n        // Transfer the remaining tokens to the recipient\r\n        token.safeTransfer(recipient, contractTokenBalance);\r\n\r\n        // Clear user balances and locks\r\n        for (uint256 i = 0; i < _addressIndices.length; i++) {\r\n            delete _userBalances[_addressIndices[i]];\r\n            delete _userLocks[_addressIndices[i]];\r\n        }\r\n        delete _addressIndices;\r\n\r\n        // Re-enable claiming\r\n        _isClaimEnabled = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    // Public function to get the ACG price in USDT. It retrieves the ACG price by calling the internal function.\r\n    function getAcgPriceInUSDT() external view returns (uint256) {\r\n        return getAcgPriceInUsdtInternal();\r\n    }\r\n    \r\n\r\n    // Public function to get the platyer ACG holdings in USDT\r\n    function getPlayerAcgHoldingInUsdt(address player) external view returns (uint256) {\r\n        return claculateUserAcgHoldingsInUsdt(player);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wbnbPriceFeedAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"acgPairAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"acgTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requiredBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userAcgHoldingsInUsdt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"}],\"name\":\"ClaimedAllRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userAcgHoldingsInUsdt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"}],\"name\":\"ClaimedAmountOfRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"SetClaimAmounts\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSubOwner\",\"type\":\"address\"}],\"name\":\"addSubOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"checkBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"checkClaimedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAcgPairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAcgPriceInUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAcgTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBNBBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getErc20TokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getPlayerAcgHoldingInUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequiredAcgBalanceInUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardsTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSubOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWbnbPriceFeedAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverBNBToWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20TokensToWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeSubOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setAcgPairAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setAcgTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"setClaimAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setClaimStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newToken\",\"type\":\"address\"}],\"name\":\"setERC20ClaimableToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"setRequiredAcgBalanceInUsdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setUserStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setWbnbPriceFeedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ClaimableACG", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005a1da94ddd7cd2cc390917467cbead125158d5060000000000000000000000000567f2323251f0aab15c8dfb1967e4e8a7d42aee0000000000000000000000001103062e8ba0ab6899829486bc023e3c106387a40000000000000000000000005a1da94ddd7cd2cc390917467cbead125158d5060000000000000000000000000000000000000000000000000000000000000014", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f44b31795ef6b10549ddc6919318e355fa31834c3f2757b47836ece3fcfa20d1"}