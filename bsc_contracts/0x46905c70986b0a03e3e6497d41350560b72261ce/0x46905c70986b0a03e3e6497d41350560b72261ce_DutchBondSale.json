{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/bond/DutchBondSale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity 0.8.16;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"contracts/bond/IBondSale.sol\\\";\\r\\nimport \\\"contracts/staking/IStakingAmounts.sol\\\";\\r\\nimport \\\"contracts/kyc/IKYCProvider.sol\\\";\\r\\nimport \\\"contracts/staking/IStakingAmounts.sol\\\";\\r\\nimport \\\"contracts/oracle/ISupraOraclePull.sol\\\";\\r\\nimport \\\"contracts/oracle/IPriceSink.sol\\\";\\r\\n\\r\\ncontract DutchBondSale is IBondSale, IPriceSink, Ownable, Pausable, ReentrancyGuard {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    uint256 public constant MAX_BONDS_PER_USER = 20;\\r\\n    uint256 public maxBondAmount = 500 * (10 ** 18);\\r\\n    uint256 public maxPriceDelay = 300;\\r\\n\\r\\n    IERC20 public immutable bondToken;\\r\\n    IERC20 public immutable peggedToken;\\r\\n    uint256 public immutable totalBondSize;\\r\\n    uint256 public totalBondedTokens;\\r\\n    address public bondReserve;\\r\\n\\r\\n    uint256 public latestPrice;\\r\\n    uint256 public latestPriceTimestamp;\\r\\n\\r\\n    IStakingAmounts public stakingAmounts;\\r\\n    uint256 public minStake;\\r\\n    address public kycProvider;\\r\\n\\r\\n    uint16 private constant DISCOUNT_PRECISION = 10000; /// @notice 10000 = 100%\\r\\n    uint16 private constant ONE_PERCENT = 100; /// @notice 100 = 1%\\r\\n    uint16 private immutable discountStart;\\r\\n    uint16 private immutable discountEnd;\\r\\n\\r\\n    mapping(address => Bond[]) public bonds;\\r\\n    mapping(address => uint256) public totalBondedValues;\\r\\n\\r\\n    // The oracle contract\\r\\n    ISupraOraclePull public oracle;\\r\\n    // The index of the pair to check the price of\\r\\n    uint256 public pairIndex;\\r\\n\\r\\n    mapping(address => bool) public adminsWhitelist;\\r\\n\\r\\n    uint256 public bondStartTime;\\r\\n\\r\\n    // Event emitted when a pair price is received\\r\\n    event PairPrice(uint256 pair, uint256 price, uint256 decimals);\\r\\n\\r\\n    modifier onlyWhenStaked(address account) {\\r\\n        if ((address(stakingAmounts) != address(0)) && !adminsWhitelist[account]) {\\r\\n            require(stakingAmounts.stakedOf(account) >= minStake, \\\"Staking balance below minimum\\\");\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Modifier to check if the address is whitelisted or not\\r\\n     */\\r\\n    modifier onlyWhiteListed(address _account) {\\r\\n        require(\\r\\n            IKYCProvider(kycProvider).isWhitelisted(_account),\\r\\n            \\\"ProjectSale: account is not whitelisted\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address _bondReserve,\\r\\n        address _bondingTokenAddress,\\r\\n        address _paymentTokenAddress,\\r\\n        uint256 _totalSaleCap,\\r\\n        uint16 _discountStart,\\r\\n        uint16 _discountEnd,\\r\\n        address _kycProvider,\\r\\n        uint256 _bondStartTime\\r\\n    ) {\\r\\n        require(_bondReserve != address(0), \\\"Bond reserve cannot be zero address\\\");\\r\\n        require(_bondingTokenAddress != address(0), \\\"Bonding token cannot be zero address\\\");\\r\\n        require(_paymentTokenAddress != address(0), \\\"Payment token cannot be zero address\\\");\\r\\n        require(_totalSaleCap > 0, \\\"Total sale cap must be greater than 0\\\");\\r\\n        require(\\r\\n            _discountStart >= _discountEnd,\\r\\n            \\\"Discount start must be greater than or equal to discount end\\\"\\r\\n        );\\r\\n        require(\\r\\n            _discountStart < DISCOUNT_PRECISION,\\r\\n            \\\"Discount start must be less than or equal than percision\\\"\\r\\n        );\\r\\n        require(_kycProvider != address(0), \\\"KYC provider cannot be zero address\\\");\\r\\n        require(_bondStartTime > block.timestamp, \\\"Bond start time must be in the future\\\");\\r\\n\\r\\n        bondReserve = _bondReserve;\\r\\n        bondToken = IERC20(_bondingTokenAddress);\\r\\n        peggedToken = IERC20(_paymentTokenAddress);\\r\\n        totalBondSize = _totalSaleCap;\\r\\n\\r\\n        discountStart = _discountStart;\\r\\n        discountEnd = _discountEnd;\\r\\n\\r\\n        kycProvider = _kycProvider;\\r\\n        bondStartTime = _bondStartTime;\\r\\n    }\\r\\n\\r\\n    function setBondStartTime(uint256 _bondStartTime) external onlyOwner {\\r\\n        require(_bondStartTime > block.timestamp, \\\"Bond start time must be in the future\\\");\\r\\n        bondStartTime = _bondStartTime;\\r\\n    }\\r\\n\\r\\n    function addWhitelistedUser(address _user) external onlyOwner {\\r\\n        adminsWhitelist[_user] = true;\\r\\n    }\\r\\n\\r\\n    function removeWhitelistedUser(address _user) external onlyOwner {\\r\\n        adminsWhitelist[_user] = false;\\r\\n    }\\r\\n\\r\\n    function pause() external onlyOwner {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    function unpause() external onlyOwner {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    function setMaxBondAmount(uint256 _maxBondAmount) external onlyOwner {\\r\\n        maxBondAmount = _maxBondAmount;\\r\\n    }\\r\\n\\r\\n    function setMaxPriceDelay(uint256 _maxPriceDelay) external onlyOwner {\\r\\n        maxPriceDelay = _maxPriceDelay;\\r\\n    }\\r\\n\\r\\n    function setStaking(address _stakingAmounts, uint256 _minStake) external onlyOwner {\\r\\n        stakingAmounts = IStakingAmounts(_stakingAmounts);\\r\\n        minStake = _minStake;\\r\\n    }\\r\\n\\r\\n    function updatePrice(uint256 _currentPrice) external onlyOwner {\\r\\n        latestPrice = _currentPrice;\\r\\n        latestPriceTimestamp = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function depositedOf(address account) external view returns (uint256) {\\r\\n        return totalBondedValues[account];\\r\\n    }\\r\\n\\r\\n    function updatePriceOracle(ISupraOraclePull oracle_, uint256 _pairIndex) external onlyOwner {\\r\\n        oracle = oracle_;\\r\\n        pairIndex = _pairIndex;\\r\\n    }\\r\\n\\r\\n    function setPriceFromOracle(bytes calldata _bytesProof) external returns (uint256) {\\r\\n        ISupraOraclePull.PriceData memory prices = oracle.verifyOracleProof(_bytesProof);\\r\\n        uint256 price = 0;\\r\\n        uint256 decimals = 0;\\r\\n        for (uint256 i = 0; i < prices.pairs.length; i++) {\\r\\n            if (prices.pairs[i] == pairIndex) {\\r\\n                price = prices.prices[i];\\r\\n                decimals = prices.decimals[i];\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        require(price != 0, \\\"Pair not found\\\");\\r\\n        latestPrice = price;\\r\\n        latestPriceTimestamp = block.timestamp;\\r\\n        return price;\\r\\n    }\\r\\n\\r\\n    function setBondReserve(address _bondReserve) external onlyOwner {\\r\\n        require(_bondReserve != address(0), \\\"Bond reserve cannot be zero address\\\");\\r\\n        bondReserve = _bondReserve;\\r\\n    }\\r\\n\\r\\n    function setKycProvider(address _kycProvider) external onlyOwner {\\r\\n        require(_kycProvider != address(0), \\\"KYC provider cannot be zero address\\\");\\r\\n        kycProvider = _kycProvider;\\r\\n    }\\r\\n\\r\\n    function bond(\\r\\n        uint256 _peggedToken,\\r\\n        uint256 _bondToken,\\r\\n        uint16 _slippage\\r\\n    ) external whenNotPaused nonReentrant onlyWhiteListed(msg.sender) onlyWhenStaked(msg.sender) {\\r\\n        require(block.timestamp >= bondStartTime, \\\"Bonding has not started yet\\\");\\r\\n        require(block.timestamp <= latestPriceTimestamp + maxPriceDelay, \\\"Price is outdated\\\");\\r\\n        require(_peggedToken > 0, \\\"Amount must be greater than 0\\\");\\r\\n        require(_bondToken > 0, \\\"Amount must be greater than 0\\\");\\r\\n        require(_slippage > 0, \\\"Slippage must be greater than 0\\\");\\r\\n        require(_slippage <= 10000, \\\"Slippage must be less than or equal to 10000\\\");\\r\\n        require(totalBondedTokens + _bondToken <= totalBondSize, \\\"Bonding sale cap reached\\\");\\r\\n        require(bonds[msg.sender].length < MAX_BONDS_PER_USER, \\\"Max bonds per user reached\\\");\\r\\n\\r\\n        uint16 discountRate = currentDiscountFor(_bondToken);\\r\\n        uint256 tokenPrice = currentDiscountedPriceFor(_bondToken);\\r\\n        uint256 peggedValue = (_bondToken * tokenPrice) / 1e18;\\r\\n        require(\\r\\n            totalBondedValues[msg.sender] + peggedValue <= maxBondAmount,\\r\\n            \\\"Max bond amount reached\\\"\\r\\n        );\\r\\n\\r\\n        uint256 difference = _peggedToken > peggedValue\\r\\n            ? _peggedToken - peggedValue\\r\\n            : peggedValue - _peggedToken;\\r\\n        uint256 _actualSlippage = (difference * 10000) / _peggedToken;\\r\\n        require(_actualSlippage <= _slippage, \\\"Slippage tolerance exceeded\\\");\\r\\n\\r\\n        uint256 vestingDuration = currentVestingDurationFor(peggedValue);\\r\\n        bonds[msg.sender].push(\\r\\n            Bond(_bondToken, 0, block.timestamp, vestingDuration, discountRate, tokenPrice)\\r\\n        );\\r\\n\\r\\n        totalBondedTokens += _bondToken;\\r\\n        totalBondedValues[msg.sender] += peggedValue;\\r\\n        peggedToken.safeTransferFrom(msg.sender, bondReserve, peggedValue);\\r\\n\\r\\n        emit Bonded(msg.sender, _bondToken, tokenPrice, discountRate);\\r\\n    }\\r\\n\\r\\n    function claim() external {\\r\\n        for (uint256 i = 0; i < bonds[msg.sender].length; i++) {\\r\\n            Bond memory userBond = bonds[msg.sender][i];\\r\\n            if (userBond.claimed >= userBond.amount) {\\r\\n                continue;\\r\\n            }\\r\\n            claimBond(i);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function hasStakedEnough(address account) external view returns (bool) {\\r\\n        if (address(stakingAmounts) == address(0)) {\\r\\n            return true;\\r\\n        }\\r\\n        return stakingAmounts.stakedOf(account) >= minStake;\\r\\n    }\\r\\n\\r\\n    function claimableOf(address account) external view returns (uint256) {\\r\\n        uint256 _amount = 0;\\r\\n        Bond[] memory userBonds = bonds[account];\\r\\n        for (uint256 i = 0; i < userBonds.length; i++) {\\r\\n            uint256 _claimable = claimableAmountFor(userBonds[i]);\\r\\n            _amount += _claimable;\\r\\n        }\\r\\n        return _amount;\\r\\n    }\\r\\n\\r\\n    function vestedOf(address account) external view returns (uint256) {\\r\\n        uint256 _amount = 0;\\r\\n        Bond[] memory userBonds = bonds[account];\\r\\n        for (uint256 i = 0; i < userBonds.length; i++) {\\r\\n            _amount += userBonds[i].amount;\\r\\n        }\\r\\n        return _amount;\\r\\n    }\\r\\n\\r\\n    function bondsOf(address account) external view returns (Bond[] memory) {\\r\\n        return bonds[account];\\r\\n    }\\r\\n\\r\\n    function currentDiscountedPrice() external view returns (uint256) {\\r\\n        return currentDiscountedPriceFor(0);\\r\\n    }\\r\\n\\r\\n    function currentDiscount() external view returns (uint16) {\\r\\n        return currentDiscountFor(0);\\r\\n    }\\r\\n\\r\\n    function currentVestingDuration() external view returns (uint256) {\\r\\n        return currentVestingDurationFor(0);\\r\\n    }\\r\\n\\r\\n    function currentDiscountedPriceFor(uint256 _amount) public view returns (uint256) {\\r\\n        uint256 discount = currentDiscountFor(_amount);\\r\\n        return (currentPrice() * (10000 - discount)) / 10000;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the current discount for a given amount of bond tokens\\r\\n     * @param _amount The amount of bond tokens to calculate the discount for\\r\\n     */\\r\\n    function currentDiscountFor(uint256 _amount) public view returns (uint16) {\\r\\n        uint256 discountNow = discountAt(totalBondedTokens);\\r\\n        uint256 discountAfter = discountAt(totalBondedTokens + _amount);\\r\\n        uint256 average = (discountNow + discountAfter) / 2;\\r\\n        return uint16(average);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the current vesting duration for a given amount of bond tokens\\r\\n     * @param _amount The amount of bond tokens to calculate the vesting duration for\\r\\n     */\\r\\n    function currentVestingDurationFor(uint256 _amount) public view returns (uint256) {\\r\\n        uint256 discount = currentDiscountFor(_amount);\\r\\n        uint256 vestingTime = 20 days;\\r\\n        return vestingTime;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate the amount of bond tokens for a given amount of pegged tokens\\r\\n     * @param _amount amount of bond tokens to calculate the pegged value for\\r\\n     */\\r\\n    function currentPeggedValueFor(uint256 _amount) public view returns (uint256) {\\r\\n        uint256 discountedPrice = currentDiscountedPriceFor(_amount);\\r\\n        return (_amount * discountedPrice) / 1e18;\\r\\n    }\\r\\n\\r\\n    // Get the price of a pair from oracle data\\r\\n    function currentPrice() public view returns (uint256) {\\r\\n        return latestPrice;\\r\\n    }\\r\\n\\r\\n    function claimBond(uint256 index) internal {\\r\\n        require(index < bonds[msg.sender].length, \\\"Invalid bond index\\\");\\r\\n        Bond storage userBond = bonds[msg.sender][index];\\r\\n\\r\\n        uint256 _claimable = claimableAmountFor(userBond);\\r\\n        userBond.claimed += _claimable;\\r\\n        bondToken.safeTransferFrom(bondReserve, msg.sender, _claimable);\\r\\n\\r\\n        emit Claimed(msg.sender, _claimable);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the current discount for a given amount of bonded tokens\\r\\n     * @param _amount The amount of bond tokens to calculate the discount for\\r\\n     */\\r\\n    function discountAt(uint256 _amount) internal view returns (uint16) {\\r\\n        uint256 percentageSold = (_amount * DISCOUNT_PRECISION) / totalBondSize;\\r\\n        uint256 discountDelta = discountStart - discountEnd;\\r\\n        uint256 discount = discountStart - ((discountDelta * percentageSold) / DISCOUNT_PRECISION);\\r\\n        return uint16(discount);\\r\\n    }\\r\\n\\r\\n    function claimableAmountFor(Bond memory _bond) internal view returns (uint256) {\\r\\n        uint256 elapsed;\\r\\n        uint256 bondEnd = _bond.startTime + _bond.duration;\\r\\n        if (block.timestamp >= bondEnd) {\\r\\n            elapsed = _bond.duration;\\r\\n        } else if (block.timestamp <= _bond.startTime) {\\r\\n            elapsed = 0;\\r\\n        } else {\\r\\n            elapsed = block.timestamp - _bond.startTime;\\r\\n        }\\r\\n        uint256 claimable = ((_bond.amount * elapsed) / _bond.duration) - _bond.claimed;\\r\\n        return claimable;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/bond/IBondSale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity 0.8.16;\\r\\n\\r\\ninterface IBondSale {\\r\\n    struct Bond {\\r\\n        uint256 amount; /// @notice Total amount of bond tokens to be claimed\\r\\n        uint256 claimed; /// @notice Amount of bond tokens already claimed\\r\\n        uint256 startTime; /// @notice Start time of the vesting\\r\\n        uint256 duration; /// @notice Duration of the vesting in seconds\\r\\n        uint16 discountRate; /// @notice Discount rate of the bond\\r\\n        uint256 tokenPrice; /// @notice Price of the bond token\\r\\n    }\\r\\n\\r\\n    event Bonded(\\r\\n        address indexed account,\\r\\n        uint256 bondAmount,\\r\\n        uint256 tokenPrice,\\r\\n        uint16 discountRate\\r\\n    );\\r\\n\\r\\n    event Claimed(address indexed account, uint256 amount);\\r\\n\\r\\n    function bond(uint256 _peggedTokenAmount, uint256 _bondTokenAmount, uint16 _slippage) external;\\r\\n\\r\\n    function claim() external;\\r\\n\\r\\n    function totalBondedTokens() external view returns (uint256);\\r\\n\\r\\n    function hasStakedEnough(address _account) external view returns (bool);\\r\\n\\r\\n    function totalBondSize() external view returns (uint256);\\r\\n\\r\\n    function currentPrice() external view returns (uint256);\\r\\n\\r\\n    function currentPeggedValueFor(uint256 _amount) external view returns (uint256);\\r\\n\\r\\n    function currentDiscountedPriceFor(uint256 _amount) external view returns (uint256);\\r\\n\\r\\n    function currentDiscountedPrice() external view returns (uint256);\\r\\n\\r\\n    function currentDiscountFor(uint256 _amount) external view returns (uint16);\\r\\n\\r\\n    function currentDiscount() external view returns (uint16);\\r\\n\\r\\n    function currentVestingDurationFor(uint256 _amount) external view returns (uint256);\\r\\n\\r\\n    function currentVestingDuration() external view returns (uint256);\\r\\n\\r\\n    function bondsOf(address account) external view returns (Bond[] memory);\\r\\n\\r\\n    function depositedOf(address account) external view returns (uint256);\\r\\n\\r\\n    function claimableOf(address account) external view returns (uint256);\\r\\n\\r\\n    function vestedOf(address account) external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/kyc/IKYCProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity 0.8.16;\\r\\n\\r\\ninterface IKYCProvider {\\r\\n    /**\\r\\n     * @dev Emitted when `_account` is added to whitelist\\r\\n     */\\r\\n    event Whitelisted(address indexed _account, uint256 _timestamp);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `_account` is removed from whitelist\\r\\n     */\\r\\n    event Blacklisted(address indexed _account, uint256 _timestamp);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if `_account` is KYC approve\\r\\n     * @param _account Account to check\\r\\n     */\\r\\n    function isWhitelisted(address _account) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Adds `_account` to whitelist\\r\\n     * @param _account Account to add to whitelist\\r\\n     */\\r\\n    function addToWhitelist(address _account) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Adds `_accounts` to whitelist in a single transaction\\r\\n     */\\r\\n    function batchAddToWhitelist(address[] memory _accounts) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Removes `_account` from whitelist\\r\\n     * @param _account Account to remove from whitelist\\r\\n     */\\r\\n    function removeFromWhitelist(address _account) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Removes `_accounts` from whitelist in a single transaction\\r\\n     * @param _accounts Accounts to remove from whitelist\\r\\n     */\\r\\n    function batchRemoveFromWhitelist(address[] memory _accounts) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/oracle/IPriceSink.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.16;\\r\\n\\r\\ninterface IPriceSink {\\r\\n    function updatePrice(uint256 _price) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/oracle/ISupraOraclePull.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.16;\\r\\n\\r\\ninterface ISupraOraclePull {\\r\\n    // Verified price data\\r\\n    struct PriceData {\\r\\n        // List of pairs\\r\\n        uint256[] pairs;\\r\\n        // List of prices prices[i] is the price of pairs[i]\\r\\n        uint256[] prices;\\r\\n        // List of decimals decimals[i] is the decimals of pairs[i]\\r\\n        uint256[] decimals;\\r\\n    }\\r\\n\\r\\n    function verifyOracleProof(bytes calldata _bytesProof) external returns (PriceData memory);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/staking/IStakingAmounts.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity 0.8.16;\\r\\n\\r\\n/**\\r\\n * @dev Interface of Staking Amounts .\\r\\n */\\r\\ninterface IStakingAmounts {\\r\\n    /**\\r\\n     * @dev Returns the total staked amount for a user\\r\\n     * @param _user Address of the user\\r\\n     * @return uint256 Total staked amount for the user\\r\\n     *\\r\\n     */\\r\\n    function stakedOf(address _user) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the total staked amount for all users\\r\\n     * @return uint256 Total staked amount for all users\\r\\n     *\\r\\n     */\\r\\n    function totalStaked() external view returns (uint256);\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bondReserve\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bondingTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paymentTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalSaleCap\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_discountStart\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_discountEnd\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_kycProvider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bondStartTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"discountRate\",\"type\":\"uint16\"}],\"name\":\"Bonded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pair\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"PairPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_BONDS_PER_USER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"addWhitelistedUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"adminsWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_peggedToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bondToken\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_slippage\",\"type\":\"uint16\"}],\"name\":\"bond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondReserve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bonds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"discountRate\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"bondsOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"discountRate\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct IBondSale.Bond[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimableOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentDiscount\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"currentDiscountFor\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentDiscountedPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"currentDiscountedPriceFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"currentPeggedValueFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentVestingDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"currentVestingDurationFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"depositedOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasStakedEnough\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kycProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestPriceTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBondAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPriceDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract ISupraOraclePull\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"peggedToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"removeWhitelistedUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bondReserve\",\"type\":\"address\"}],\"name\":\"setBondReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bondStartTime\",\"type\":\"uint256\"}],\"name\":\"setBondStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_kycProvider\",\"type\":\"address\"}],\"name\":\"setKycProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxBondAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxBondAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxPriceDelay\",\"type\":\"uint256\"}],\"name\":\"setMaxPriceDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytesProof\",\"type\":\"bytes\"}],\"name\":\"setPriceFromOracle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingAmounts\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minStake\",\"type\":\"uint256\"}],\"name\":\"setStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingAmounts\",\"outputs\":[{\"internalType\":\"contract IStakingAmounts\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBondSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBondedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalBondedValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currentPrice\",\"type\":\"uint256\"}],\"name\":\"updatePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISupraOraclePull\",\"name\":\"oracle_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"}],\"name\":\"updatePriceOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"vestedOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DutchBondSale", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005402e8523a99c97275a96a11d8d69b824ea9c89d0000000000000000000000004d2d32d8652058bf98c772953e1df5c5c85d9f4500000000000000000000000055d398326f99059ff775485246999027b31979550000000000000000000000000000000000000000000008d2b7e8241221c8000000000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000000000000003e80000000000000000000000004bb49ce2b4623f5287c08954969b5c9d756e375200000000000000000000000000000000000000000000000000000000659d4350", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}