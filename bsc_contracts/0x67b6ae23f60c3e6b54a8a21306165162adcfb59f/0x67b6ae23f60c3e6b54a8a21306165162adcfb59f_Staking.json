{"SourceCode": "// SPDX-License-Identifier: UNILICENSED\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Implementation of the {IERC721Receiver} interface.\r\n *\r\n * Accepts all token transfers.\r\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\r\n */\r\ncontract ERC721Holder is IERC721Receiver {\r\n    /**\r\n     * @dev See {IERC721Receiver-onERC721Received}.\r\n     *\r\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        bytes memory\r\n    ) public virtual override returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed approved,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(\r\n        address indexed owner,\r\n        address indexed operator,\r\n        bool approved\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length)\r\n        internal\r\n        pure\r\n        returns (string memory)\r\n    {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n// File: contracts/staking.sol\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2021-12-17\r\n */\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2021-12-07\r\n */\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n// File: contracts/MNBMarketplace.sol\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.8.13;\r\n\r\n//import \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\n//import \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n//import \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\r\n\r\ncontract Staking is Ownable, ERC721Holder {\r\n    using SafeMath for uint256;\r\n    // using SafeERC20 for IERC20;\r\n    IERC721 public nftCollection;\r\n    IERC20Metadata public erc20Contract;\r\n\r\n    struct stakingPairInfo {\r\n        string stakedType; // ercToken or type of NFT\r\n        address stakedAddr;\r\n        string rewardType; // ercToken or type of NFT\r\n        address rewardAddr;\r\n        uint256 stakeAmount;\r\n        uint256 rewardAmount;\r\n        uint256 rewardInterval;\r\n        string intervalUnit; //h/d/m- hours/days\r\n        uint256 minStakingTime;\r\n        string minUnit; //h/d/m- hours/days\r\n        uint256 maxStakeAmount;\r\n        bool isOneTimeReward;\r\n    }\r\n\r\n    struct stakingInfo {\r\n        uint256 amount;\r\n        uint256 claimDate;\r\n        uint256 stakeDate;\r\n        uint256[] tokenIds;\r\n    }\r\n\r\n    struct userExists {\r\n        address user;\r\n        bool isActive;\r\n    }\r\n\r\n    mapping(string => stakingPairInfo) public stakingPairMap; //Staking Pair to info\r\n    mapping(string => bool) public stakingPairStatusMap; //Staking pair to status\r\n    mapping(string => mapping(address => stakingInfo)) private StakeMap; //StakingPair to user to stake info\r\n    mapping(string => uint256) private pairTotRewards;\r\n    mapping(string => uint256) private pairMaxPoolSize;\r\n    mapping(string => uint256) private pairTotStaked; //StakingPair to total Staked\r\n    mapping(string => mapping(address => uint256)) private userTotRewards;\r\n    mapping(string => mapping(address => uint256)) private userTotStaked;\r\n    mapping(string => address[]) private pairActiveUsers;\r\n    string[] stakingPairIds;\r\n    mapping(address => uint256[]) private nftTypeTokens;\r\n    mapping(address => mapping(uint256 => bool)) private nftTypeTokenExists;\r\n\r\n    function createStakingPair(\r\n        string memory stakedType,\r\n        address stakedAddr,\r\n        string memory rewardType,\r\n        address rewardAddr,\r\n        uint256 stakeAmount,\r\n        uint256 rewardAmount,\r\n        uint256 rewardInterval,\r\n        string memory intervalUnit,\r\n        uint256 minStakingTime,\r\n        string memory minUnit,\r\n        uint256 maxStakeAmount,\r\n        uint256 maxPoolAmount\r\n    ) external onlyOwner returns (bool) {\r\n        require(stakeAmount != 0, \"Stake Amount cannot be 0\");\r\n        require(rewardAmount != 0, \"Reward amount should not be 0\");\r\n        require(minStakingTime != 0, \"Min Staking Time cannot be 0\");\r\n        require(\r\n            (keccak256(abi.encodePacked(intervalUnit)) ==\r\n                keccak256(abi.encodePacked(\"hours\")) ||\r\n                keccak256(abi.encodePacked(intervalUnit)) ==\r\n                keccak256(abi.encodePacked(\"days\"))),\r\n            \"Unit should be hours/days\"\r\n        );\r\n        require(\r\n            (keccak256(abi.encodePacked(minUnit)) ==\r\n                keccak256(abi.encodePacked(\"hours\")) ||\r\n                keccak256(abi.encodePacked(minUnit)) ==\r\n                keccak256(abi.encodePacked(\"days\"))),\r\n            \"Unit should be hours/days\"\r\n        );\r\n\r\n        string memory pairID = Strings.toString(block.timestamp); //getPairID(stakedAddr,rewardAddr);\r\n\r\n        stakingPairInfo memory spi;\r\n        spi.stakedType = stakedType;\r\n        spi.stakedAddr = stakedAddr;\r\n        spi.rewardType = rewardType;\r\n        spi.rewardAddr = rewardAddr;\r\n        spi.stakeAmount = stakeAmount;\r\n        spi.rewardAmount = rewardAmount;\r\n        spi.rewardInterval = rewardInterval;\r\n        spi.intervalUnit = intervalUnit;\r\n        spi.minStakingTime = minStakingTime;\r\n        spi.minUnit = minUnit;\r\n        spi.maxStakeAmount = maxStakeAmount;\r\n        if (rewardInterval == 0) {\r\n            spi.isOneTimeReward = true;\r\n        } else {\r\n            spi.isOneTimeReward = false;\r\n        }\r\n        //\r\n        stakingPairMap[pairID] = spi;\r\n        stakingPairStatusMap[pairID] = true;\r\n        stakingPairIds.push(pairID);\r\n        pairMaxPoolSize[pairID] = maxPoolAmount;\r\n        return true;\r\n    }\r\n\r\n    function setMapPoolSize(string memory pairID, uint256 maxPoolAmount)\r\n        external\r\n        onlyOwner\r\n    {}\r\n\r\n    function addressToString(address _address)\r\n        internal\r\n        pure\r\n        returns (string memory)\r\n    {\r\n        bytes32 _bytes = bytes32(uint256(uint160(_address)));\r\n        bytes memory HEX = \"0123456789abcdef\";\r\n        bytes memory _string = new bytes(42);\r\n        _string[0] = \"0\";\r\n        _string[1] = \"x\";\r\n        for (uint256 i = 0; i < 20; i++) {\r\n            _string[2 + i * 2] = HEX[uint8(_bytes[i + 12] >> 4)];\r\n            _string[3 + i * 2] = HEX[uint8(_bytes[i + 12] & 0x0f)];\r\n        }\r\n        return string(_string);\r\n    }\r\n\r\n    function getStakingPairs(bool activeStatus)\r\n        public\r\n        view\r\n        returns (string memory)\r\n    {\r\n        string memory strStakingPairs = \"\";\r\n        string memory fseparator = \",\";\r\n        //string memory wrapStart=\"[\";\r\n        //string memory wrapEnd=\"]\";\r\n        for (uint256 s = 0; s < stakingPairIds.length; s += 1) {\r\n            if (stakingPairStatusMap[stakingPairIds[s]] == activeStatus) {\r\n                strStakingPairs = string(\r\n                    abi.encodePacked(\r\n                        strStakingPairs,\r\n                        \"{\",\r\n                        \"Id:\",\r\n                        \"[\",\r\n                        stakingPairIds[s],\r\n                        \"]\",\r\n                        fseparator,\r\n                        \"stakedType:\",\r\n                        \"[\",\r\n                        stakingPairMap[stakingPairIds[s]].stakedType,\r\n                        \"]\",\r\n                        fseparator,\r\n                        \"stakedAddr:\",\r\n                        \"[\",\r\n                        addressToString(\r\n                            stakingPairMap[stakingPairIds[s]].stakedAddr\r\n                        ),\r\n                        \"]\",\r\n                        fseparator\r\n                    )\r\n                );\r\n\r\n                strStakingPairs = string(\r\n                    abi.encodePacked(\r\n                        strStakingPairs,\r\n                        \"rewardType:\",\r\n                        \"[\",\r\n                        stakingPairMap[stakingPairIds[s]].rewardType,\r\n                        \"]\",\r\n                        fseparator,\r\n                        \"rewardAddr:\",\r\n                        \"[\",\r\n                        addressToString(\r\n                            stakingPairMap[stakingPairIds[s]].rewardAddr\r\n                        ),\r\n                        \"]\",\r\n                        fseparator,\r\n                        \"stakeAmount:\",\r\n                        \"[\",\r\n                        Strings.toString(\r\n                            stakingPairMap[stakingPairIds[s]].stakeAmount\r\n                        ),\r\n                        \"]\",\r\n                        fseparator\r\n                    )\r\n                );\r\n\r\n                strStakingPairs = string(\r\n                    abi.encodePacked(\r\n                        strStakingPairs,\r\n                        \"rewardAmount:\",\r\n                        \"[\",\r\n                        Strings.toString(\r\n                            stakingPairMap[stakingPairIds[s]].rewardAmount\r\n                        ),\r\n                        \"]\",\r\n                        fseparator,\r\n                        \"rewardInterval:\",\r\n                        \"[\",\r\n                        Strings.toString(\r\n                            stakingPairMap[stakingPairIds[s]].rewardInterval\r\n                        ),\r\n                        \"]\",\r\n                        fseparator\r\n                    )\r\n                );\r\n\r\n                strStakingPairs = string(\r\n                    abi.encodePacked(\r\n                        strStakingPairs,\r\n                        \"intervalUnit:\",\r\n                        \"[\",\r\n                        stakingPairMap[stakingPairIds[s]].intervalUnit,\r\n                        \"]\",\r\n                        fseparator,\r\n                        \"minStakingTime:\",\r\n                        \"[\",\r\n                        Strings.toString(\r\n                            stakingPairMap[stakingPairIds[s]].minStakingTime\r\n                        ),\r\n                        \"]\",\r\n                        fseparator,\r\n                        \"minUnit:\",\r\n                        \"[\",\r\n                        stakingPairMap[stakingPairIds[s]].minUnit,\r\n                        \"]\",\r\n                        \"}\"\r\n                    )\r\n                );\r\n            }\r\n        }\r\n        return strStakingPairs;\r\n    }\r\n\r\n    function getStakingPairIds() public view returns (string[] memory) {\r\n        return stakingPairIds;\r\n    }\r\n\r\n    function setStakingPairStatus(string memory _pairId, bool status)\r\n        external\r\n        onlyOwner\r\n    {\r\n        if (stakingPairStatusMap[_pairId] && status == false) {\r\n            for (uint256 s = 0; s < pairActiveUsers[_pairId].length; s += 1) {\r\n                unstakeAllUser(_pairId, pairActiveUsers[_pairId][s]);\r\n            }\r\n        }\r\n        stakingPairStatusMap[_pairId] = status;\r\n    }\r\n\r\n    function addNftBalanceTokens(address _nftType, uint256[] memory tokenIds)\r\n        external\r\n        onlyOwner\r\n    {\r\n        nftCollection = IERC721(_nftType);\r\n\r\n        for (uint256 s = 0; s < tokenIds.length; s += 1) {\r\n            // require(nftCollection.ownerOf(tokenIds[s]) == address(this), \"Can't add tokens you don't own!\");\r\n            nftCollection.safeTransferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                tokenIds[s]\r\n            );\r\n            if (!nftTypeTokenExists[_nftType][tokenIds[s]]) {\r\n                nftTypeTokens[_nftType].push(tokenIds[s]);\r\n                nftTypeTokenExists[_nftType][tokenIds[s]] = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    function stake(\r\n        uint256 _amount,\r\n        string memory _pairId,\r\n        uint256 tokenId\r\n    ) external returns (bool) {\r\n        require(_amount > 0, \"Amount must be greater than 0\");\r\n        require(\r\n            stakingPairStatusMap[_pairId],\r\n            \"Staking not allowed for this pair.\"\r\n        );\r\n        require(\r\n            _amount <= stakingPairMap[_pairId].maxStakeAmount,\r\n            \"Amount must be less than max stake amount\"\r\n        );\r\n        uint256 totalStake = pairTotStaked[_pairId];\r\n        totalStake = totalStake + _amount;\r\n        //require(userTotStaked[_pairId][msg.sender] > 0, \"You have already staked for this pair\");\r\n        require(totalStake <= pairMaxPoolSize[_pairId], \"Staking pool is full\");\r\n\r\n        bool isErcToken = keccak256(\r\n            abi.encodePacked(stakingPairMap[_pairId].stakedType)\r\n        ) == keccak256(abi.encodePacked(\"ercToken\"));\r\n        erc20Contract = IERC20Metadata(stakingPairMap[_pairId].stakedAddr);\r\n        if (isErcToken) {\r\n            // erc20Contract.safeTransfer(address(this), _amount);\r\n            // erc20Contract.approve(msg.sender, _amount);\r\n            erc20Contract.transferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                _amount.mul(10**erc20Contract.decimals())\r\n            );\r\n            // require(ERC20(stakingPairMap[_pairId].stakedAddr).transferFrom(msg.sender,address(this),_amount));\r\n        } else {\r\n            nftCollection = IERC721(stakingPairMap[_pairId].stakedAddr);\r\n            _amount = 1;\r\n            nftCollection.safeTransferFrom(msg.sender, address(this), tokenId);\r\n        }\r\n\r\n        if (StakeMap[_pairId][msg.sender].amount == 0) {\r\n            StakeMap[_pairId][msg.sender].amount = _amount;\r\n            if (!isErcToken) {\r\n                StakeMap[_pairId][msg.sender].tokenIds.push(tokenId);\r\n            }\r\n            pairActiveUsers[_pairId].push(msg.sender);\r\n        } else {\r\n            claimUser(_pairId, msg.sender);\r\n            StakeMap[_pairId][msg.sender].amount = StakeMap[_pairId][msg.sender]\r\n                .amount\r\n                .add(_amount);\r\n            if (!isErcToken) {\r\n                StakeMap[_pairId][msg.sender].tokenIds.push(tokenId);\r\n            }\r\n        }\r\n\r\n        StakeMap[_pairId][msg.sender].stakeDate = block.timestamp;\r\n        StakeMap[_pairId][msg.sender].claimDate = block.timestamp;\r\n\r\n        pairTotStaked[_pairId] = pairTotStaked[_pairId].add(_amount);\r\n        userTotStaked[_pairId][msg.sender] = userTotStaked[_pairId][msg.sender]\r\n            .add(_amount);\r\n        return true;\r\n    }\r\n\r\n    event claimed(uint256 amount);\r\n\r\n    function claim(string memory _pairId) public returns (uint256) {\r\n        require(\r\n            stakingPairStatusMap[_pairId],\r\n            \"Claim not allowed for this pair.\"\r\n        );\r\n        require(StakeMap[_pairId][msg.sender].amount > 0, \"No stake.\");\r\n        require(\r\n            isStakedForInterval(_pairId, msg.sender),\r\n            \"Nothing to claim. Wait for stake time.\"\r\n        );\r\n        require(\r\n            isClaimedForInterval(_pairId, msg.sender),\r\n            \"Nothing to claim. Wait for interval time.\"\r\n        );\r\n\r\n        return claimUser(_pairId, msg.sender);\r\n    }\r\n\r\n    function claimUser(string memory _pairId, address _userAddress)\r\n        private\r\n        returns (uint256)\r\n    {\r\n        if (!stakingPairStatusMap[_pairId]) {\r\n            return 0;\r\n        }\r\n        if (StakeMap[_pairId][_userAddress].amount == 0) {\r\n            return 0;\r\n        }\r\n        uint256 actualInterval = getUserClaimInterval(_pairId, _userAddress); // taxDays * 1 days;\r\n        // require(isClaimedForInterval(_pairId,_userAddress),\"Nothing to claim.\");\r\n\r\n        bool isErcToken = keccak256(\r\n            abi.encodePacked(stakingPairMap[_pairId].rewardType)\r\n        ) == keccak256(abi.encodePacked(\"ercToken\"));\r\n\r\n        uint256 rewardIntervalInSecs = getIntervalInSecs(\r\n            stakingPairMap[_pairId].rewardInterval,\r\n            stakingPairMap[_pairId].intervalUnit\r\n        );\r\n        uint256 stakedAmountUser = StakeMap[_pairId][_userAddress].amount;\r\n        uint256 rewardAmountUser = 0;\r\n        if (stakingPairMap[_pairId].isOneTimeReward) {\r\n            rewardAmountUser = (\r\n                stakedAmountUser.mul(stakingPairMap[_pairId].rewardAmount)\r\n            ).div(stakingPairMap[_pairId].stakeAmount);\r\n            if (userTotRewards[_pairId][_userAddress] >= rewardAmountUser) {\r\n                return 0;\r\n            }\r\n        } else {\r\n            rewardAmountUser = (\r\n                stakedAmountUser.mul(stakingPairMap[_pairId].rewardAmount).mul(\r\n                    actualInterval\r\n                )\r\n            ).div(\r\n                    stakingPairMap[_pairId].stakeAmount.mul(\r\n                        rewardIntervalInSecs\r\n                    )\r\n                );\r\n        }\r\n\r\n        if (isErcToken) {\r\n            erc20Contract = IERC20Metadata(stakingPairMap[_pairId].rewardAddr); //rewardAddr\r\n\r\n            erc20Contract.transfer(\r\n                _userAddress,\r\n                rewardAmountUser.mul(10**erc20Contract.decimals())\r\n            );\r\n            // require(ERC20(stakingPairMap[_pairId].stakedAddr).transfer(_userAddress,rewardAmountUser));\r\n        } else {\r\n            uint256 _tokenId = 0;\r\n            address _nftType = stakingPairMap[_pairId].rewardAddr;\r\n            nftCollection = IERC721(stakingPairMap[_pairId].rewardAddr);\r\n            //if (rewardAmountUser > nftTypeTokens[_nftType].length){return 0;}\r\n            require(\r\n                rewardAmountUser <= nftTypeTokens[_nftType].length,\r\n                \"Nft Reward Amount greater than available-tokens.\"\r\n            );\r\n            for (uint256 s = 0; s < rewardAmountUser; s += 1) {\r\n                _tokenId = nftTypeTokens[_nftType][\r\n                    nftTypeTokens[_nftType].length - 1\r\n                ];\r\n                nftCollection.safeTransferFrom(\r\n                    address(this),\r\n                    _userAddress,\r\n                    _tokenId\r\n                );\r\n                nftTypeTokenExists[_nftType][_tokenId] = false;\r\n                nftTypeTokens[_nftType].pop();\r\n            }\r\n        }\r\n        StakeMap[_pairId][_userAddress].claimDate = block.timestamp;\r\n        pairTotRewards[_pairId] = pairTotRewards[_pairId].add(rewardAmountUser);\r\n        userTotRewards[_pairId][_userAddress] = userTotRewards[_pairId][\r\n            _userAddress\r\n        ].add(rewardAmountUser);\r\n\r\n        emit claimed(rewardAmountUser);\r\n        return rewardAmountUser;\r\n    }\r\n\r\n    function getIntervalInSecs(uint256 interval, string memory intervalUnit)\r\n        private\r\n        pure\r\n        returns (uint256 intervalInSecs)\r\n    {\r\n        // uint256 intervalInSecs=0;\r\n        if (\r\n            keccak256(abi.encodePacked(intervalUnit)) ==\r\n            keccak256(abi.encodePacked(\"days\"))\r\n        ) {\r\n            intervalInSecs = interval * 1 days;\r\n        } else if (\r\n            keccak256(abi.encodePacked(intervalUnit)) ==\r\n            keccak256(abi.encodePacked(\"hours\"))\r\n        ) {\r\n            intervalInSecs = interval * 1 hours;\r\n        }\r\n        return intervalInSecs;\r\n    }\r\n\r\n    function getUserRewards(string memory _pairId, address _userAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        // address _userAddress=msg.sender;\r\n        if (!stakingPairStatusMap[_pairId]) {\r\n            return 0;\r\n        }\r\n        if (StakeMap[_pairId][_userAddress].amount <= 0) {\r\n            return 0;\r\n        }\r\n\r\n        if (stakingPairMap[_pairId].isOneTimeReward) {\r\n            if (userTotStaked[_pairId][_userAddress] > 0) {\r\n                return\r\n                    (\r\n                        userTotStaked[_pairId][_userAddress].div(\r\n                            stakingPairMap[_pairId].stakeAmount\r\n                        )\r\n                    ).mul(stakingPairMap[_pairId].rewardAmount);\r\n            }\r\n            return 0;\r\n        }\r\n\r\n        uint256 rewardIntervalInSecs = getIntervalInSecs(\r\n            stakingPairMap[_pairId].rewardInterval,\r\n            stakingPairMap[_pairId].intervalUnit\r\n        );\r\n\r\n        uint256 actualInterval = getUserClaimInterval(_pairId, _userAddress); // taxDays * 1 days;\r\n        if (actualInterval < rewardIntervalInSecs) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 stakedAmountUser = StakeMap[_pairId][_userAddress].amount;\r\n        uint256 rewardAmountUser = (\r\n            stakedAmountUser.mul(stakingPairMap[_pairId].rewardAmount).mul(\r\n                actualInterval\r\n            )\r\n        ).div(stakingPairMap[_pairId].stakeAmount.mul(rewardIntervalInSecs));\r\n        return rewardAmountUser;\r\n    }\r\n\r\n    function getUserClaimInterval(string memory _pairId, address userAddr)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (!stakingPairStatusMap[_pairId]) {\r\n            return 0;\r\n        }\r\n        if (StakeMap[_pairId][userAddr].amount <= 0) {\r\n            return 0;\r\n        }\r\n        uint256 interval = 0;\r\n        if (\r\n            keccak256(abi.encodePacked(stakingPairMap[_pairId].intervalUnit)) ==\r\n            keccak256(abi.encodePacked(\"days\"))\r\n        ) {\r\n            interval = (block.timestamp -\r\n                StakeMap[_pairId][userAddr].claimDate); // * 1 days;\r\n        } else if (\r\n            keccak256(abi.encodePacked(stakingPairMap[_pairId].intervalUnit)) ==\r\n            keccak256(abi.encodePacked(\"hours\"))\r\n        ) {\r\n            interval = (block.timestamp -\r\n                StakeMap[_pairId][userAddr].claimDate); // * 1 hours;\r\n        }\r\n        return interval;\r\n    }\r\n\r\n    function isClaimedForInterval(string memory _pairId, address userAddr)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        bool _isClaimedForInterval = false;\r\n\r\n        if (!stakingPairStatusMap[_pairId]) {\r\n            return false;\r\n        }\r\n        if (StakeMap[_pairId][userAddr].amount <= 0) {\r\n            return false;\r\n        }\r\n        uint256 interval = 0;\r\n        if (\r\n            keccak256(abi.encodePacked(stakingPairMap[_pairId].intervalUnit)) ==\r\n            keccak256(abi.encodePacked(\"days\"))\r\n        ) {\r\n            interval = (block.timestamp -\r\n                StakeMap[_pairId][userAddr].claimDate); // * 1 days;\r\n            if (interval >= stakingPairMap[_pairId].rewardInterval * 1 days) {\r\n                _isClaimedForInterval = true;\r\n            }\r\n        } else if (\r\n            keccak256(abi.encodePacked(stakingPairMap[_pairId].intervalUnit)) ==\r\n            keccak256(abi.encodePacked(\"hours\"))\r\n        ) {\r\n            interval = (block.timestamp -\r\n                StakeMap[_pairId][userAddr].claimDate); // * 1 hours;\r\n            if (interval >= stakingPairMap[_pairId].rewardInterval * 1 hours) {\r\n                _isClaimedForInterval = true;\r\n            }\r\n        }\r\n        return _isClaimedForInterval;\r\n    }\r\n\r\n    function getUserStakedInterval(string memory _pairId, address userAddr)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (!stakingPairStatusMap[_pairId]) {\r\n            return 0;\r\n        }\r\n        if (StakeMap[_pairId][userAddr].amount <= 0) {\r\n            return 0;\r\n        }\r\n        uint256 interval = 0;\r\n        if (\r\n            keccak256(abi.encodePacked(stakingPairMap[_pairId].intervalUnit)) ==\r\n            keccak256(abi.encodePacked(\"days\"))\r\n        ) {\r\n            interval = (block.timestamp -\r\n                StakeMap[_pairId][userAddr].stakeDate); // * 1 days;\r\n        } else if (\r\n            keccak256(abi.encodePacked(stakingPairMap[_pairId].intervalUnit)) ==\r\n            keccak256(abi.encodePacked(\"hours\"))\r\n        ) {\r\n            interval = (block.timestamp -\r\n                StakeMap[_pairId][userAddr].stakeDate); // * 1 hours;\r\n        }\r\n        return interval;\r\n    }\r\n\r\n    function isStakedForInterval(string memory _pairId, address userAddr)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        bool _isStakedForInterval = false;\r\n        if (!stakingPairStatusMap[_pairId]) {\r\n            return false;\r\n        }\r\n        if (StakeMap[_pairId][userAddr].amount <= 0) {\r\n            return false;\r\n        }\r\n        uint256 interval = 0;\r\n        if (\r\n            keccak256(abi.encodePacked(stakingPairMap[_pairId].intervalUnit)) ==\r\n            keccak256(abi.encodePacked(\"days\"))\r\n        ) {\r\n            interval = (block.timestamp -\r\n                StakeMap[_pairId][userAddr].stakeDate); //* 1 days;\r\n            if (interval >= stakingPairMap[_pairId].minStakingTime * 1 days) {\r\n                _isStakedForInterval = true;\r\n            }\r\n        } else if (\r\n            keccak256(abi.encodePacked(stakingPairMap[_pairId].intervalUnit)) ==\r\n            keccak256(abi.encodePacked(\"hours\"))\r\n        ) {\r\n            interval = (block.timestamp -\r\n                StakeMap[_pairId][userAddr].stakeDate); // * 1 hours;\r\n            if (interval >= stakingPairMap[_pairId].minStakingTime * 1 hours) {\r\n                _isStakedForInterval = true;\r\n            }\r\n        }\r\n        return _isStakedForInterval;\r\n    }\r\n\r\n    function unstakeAll(string memory _pairId)\r\n        external\r\n        returns (uint256, uint256)\r\n    {\r\n        require(StakeMap[_pairId][msg.sender].amount > 0, \"Stake is 0.\");\r\n        require(stakingPairStatusMap[_pairId], \"Staking pair not active\");\r\n        return\r\n            unstake(StakeMap[_pairId][msg.sender].amount, _pairId, msg.sender);\r\n    }\r\n\r\n    function unstakeAllUser(string memory _pairId, address _userAddress)\r\n        private\r\n        returns (uint256, uint256)\r\n    {\r\n        //require(StakeMap[_pairId][_userAddress].amount > 0,\"Stake is 0.\");\r\n        return\r\n            unstake(\r\n                StakeMap[_pairId][_userAddress].amount,\r\n                _pairId,\r\n                _userAddress\r\n            );\r\n    }\r\n\r\n    function unstakeAmount(uint256 _amount, string memory _pairId)\r\n        external\r\n        returns (uint256, uint256)\r\n    {\r\n        require(_amount > 0, \"Amount cannot be 0\");\r\n        require(\r\n            _amount <= StakeMap[_pairId][msg.sender].amount,\r\n            \"Amount greater than staked\"\r\n        );\r\n        require(stakingPairStatusMap[_pairId], \"Staking pair not active\");\r\n        return unstake(_amount, _pairId, msg.sender);\r\n    }\r\n\r\n    function unstake(\r\n        uint256 _amount,\r\n        string memory _pairId,\r\n        address _userAddress\r\n    ) private returns (uint256, uint256) {\r\n        require(\r\n            isStakedForInterval(_pairId, msg.sender),\r\n            \"Wait for stake time to complete.\"\r\n        );\r\n        bool isErcToken = keccak256(\r\n            abi.encodePacked(stakingPairMap[_pairId].stakedType)\r\n        ) == keccak256(abi.encodePacked(\"ercToken\"));\r\n        if (!isErcToken)\r\n            require(\r\n                _amount <= StakeMap[_pairId][_userAddress].tokenIds.length,\r\n                \"Amount greater than staked-tokens.\"\r\n            );\r\n        if (!isStakedForInterval(_pairId, _userAddress)) {\r\n            return (0, 0);\r\n        }\r\n        // uint stakedInterval =getUserStakedInterval(_pairId,_userAddress);// taxDays * 1 days;\r\n\r\n        uint256 userRewards = claimUser(_pairId, msg.sender);\r\n\r\n        if (isErcToken) {\r\n            require(\r\n                erc20Contract.balanceOf(address(this)) >=\r\n                    _amount.mul(10**erc20Contract.decimals()),\r\n                \"Not enough contract balance for unstake\"\r\n            );\r\n            erc20Contract = IERC20Metadata(stakingPairMap[_pairId].stakedAddr);\r\n            require(\r\n                erc20Contract.transfer(\r\n                    _userAddress,\r\n                    _amount.mul(10**erc20Contract.decimals())\r\n                ),\r\n                \"Unstake failed for user.\"\r\n            );\r\n            // require(ERC20(stakingPairMap[_pairId].stakedAddr).transfer(_userAddress,_amount));\r\n        } else {\r\n            nftCollection = IERC721(stakingPairMap[_pairId].stakedAddr);\r\n            uint256 _tokenId = 0;\r\n            for (uint256 s = 0; s < _amount; s += 1) {\r\n                _tokenId = StakeMap[_pairId][_userAddress].tokenIds[\r\n                    StakeMap[_pairId][_userAddress].tokenIds.length - 1\r\n                ];\r\n                nftCollection.safeTransferFrom(\r\n                    address(this),\r\n                    _userAddress,\r\n                    _tokenId\r\n                );\r\n                StakeMap[_pairId][_userAddress].tokenIds.pop();\r\n            }\r\n        }\r\n\r\n        StakeMap[_pairId][_userAddress].amount = StakeMap[_pairId][_userAddress]\r\n            .amount\r\n            .sub(_amount);\r\n        StakeMap[_pairId][_userAddress].claimDate = block.timestamp;\r\n        pairTotStaked[_pairId] = pairTotStaked[_pairId].sub(_amount);\r\n        userTotStaked[_pairId][_userAddress] = userTotStaked[_pairId][\r\n            _userAddress\r\n        ].sub(_amount);\r\n        if (StakeMap[_pairId][_userAddress].amount <= 0) {\r\n            removeStakeholder(_pairId, _userAddress);\r\n        }\r\n        return (_amount, userRewards);\r\n    }\r\n\r\n    function isStakeholder(string memory _pairId, address _address)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        for (uint256 s = 0; s < pairActiveUsers[_pairId].length; s += 1) {\r\n            if (_address == pairActiveUsers[_pairId][s]) return (s + 1);\r\n        }\r\n        return (0);\r\n    }\r\n\r\n    function removeStakeholder(string memory _pairId, address _stakeholder)\r\n        public\r\n    {\r\n        uint256 s = isStakeholder(_pairId, _stakeholder);\r\n        if (s > 0) {\r\n            pairActiveUsers[_pairId][s - 1] = pairActiveUsers[_pairId][\r\n                pairActiveUsers[_pairId].length - 1\r\n            ];\r\n            pairActiveUsers[_pairId].pop();\r\n        }\r\n    }\r\n\r\n    function transferAnyBEP20(\r\n        address _tokenAddress,\r\n        address _to,\r\n        uint256 _amount\r\n    ) external onlyOwner {\r\n        IERC20Metadata(_tokenAddress).transfer(_to, _amount);\r\n    }\r\n\r\n    function transferStuckBNB(address _to, uint256 _amount) external onlyOwner {\r\n        payable(_to).transfer(_amount);\r\n    }\r\n\r\n    function transferStuckNFT(\r\n        address _tokenAddress,\r\n        address _to,\r\n        uint256 _tokenId\r\n    ) external onlyOwner {\r\n        IERC721(_tokenAddress).safeTransferFrom(address(this), _to, _tokenId);\r\n    }\r\n\r\n    function getUserStakeMap(address _user, string memory _pairId)\r\n        external\r\n        view\r\n        returns (stakingInfo memory)\r\n    {\r\n        return StakeMap[_pairId][_user];\r\n    }\r\n\r\n    function getPairPoolSize(string memory _pairId)\r\n        external\r\n        view\r\n        returns (uint256, uint256)\r\n    {\r\n        return (pairTotStaked[_pairId], pairMaxPoolSize[_pairId]);\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftType\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"addNftBalanceTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pairId\",\"type\":\"string\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"stakedType\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"stakedAddr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"rewardType\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"rewardAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardInterval\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"intervalUnit\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"minStakingTime\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"minUnit\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxStakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPoolAmount\",\"type\":\"uint256\"}],\"name\":\"createStakingPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20Contract\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pairId\",\"type\":\"string\"}],\"name\":\"getPairPoolSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingPairIds\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"activeStatus\",\"type\":\"bool\"}],\"name\":\"getStakingPairs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pairId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"getUserClaimInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pairId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getUserRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_pairId\",\"type\":\"string\"}],\"name\":\"getUserStakeMap\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Staking.stakingInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pairId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"getUserStakedInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pairId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"isClaimedForInterval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pairId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"isStakedForInterval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pairId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isStakeholder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftCollection\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pairId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_stakeholder\",\"type\":\"address\"}],\"name\":\"removeStakeholder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"pairID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxPoolAmount\",\"type\":\"uint256\"}],\"name\":\"setMapPoolSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pairId\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setStakingPairStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_pairId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"stakingPairMap\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"stakedType\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"stakedAddr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"rewardType\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"rewardAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardInterval\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"intervalUnit\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"minStakingTime\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"minUnit\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxStakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOneTimeReward\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"stakingPairStatusMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferAnyBEP20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferStuckBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferStuckNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pairId\",\"type\":\"string\"}],\"name\":\"unstakeAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_pairId\",\"type\":\"string\"}],\"name\":\"unstakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Staking", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b156d776b5824991d24f576857e6d5cd0432b32219df7d8938df60734c3b840f"}