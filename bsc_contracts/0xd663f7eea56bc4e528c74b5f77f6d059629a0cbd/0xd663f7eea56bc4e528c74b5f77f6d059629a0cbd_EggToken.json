{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/token/EggToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache license 2.0\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./ERC20Pausable.sol\\\";\\nimport \\\"./ERC20Burnable.sol\\\";\\nimport \\\"./ERC20Mintable.sol\\\";\\nimport \\\"./ERC20Lockable.sol\\\";\\nimport \\\"../interfaces/IBurning.sol\\\";\\nimport \\\"../interfaces/IStaking.sol\\\";\\nimport \\\"../libraries/SafeMathUint.sol\\\";\\n\\n/**\\n * @dev EggToken is a {ERC20} implementation with various extensions\\n * and custom functionality.\\n */\\ncontract EggToken is ERC20Burnable, ERC20Mintable, ERC20Pausable, ERC20Lockable {\\n  using SafeMathUint for uint256;\\n\\n  IBurning _burning;\\n  IStaking _staking;\\n\\n  mapping (address=>bool) private _allowedMinters;\\n\\n  /**\\n   * @dev Sets the values for {name} and {symbol}, allocates the `initialTotalSupply`.\\n   */\\n  constructor(\\n    string memory name,\\n    string memory symbol,\\n    uint256 initialTotalSupply\\n  ) ERC20(name, symbol) {\\n    _totalSupply = initialTotalSupply;\\n    _balances[_msgSender()] = _balances[_msgSender()].add(_totalSupply);\\n    emit Transfer(address(0), _msgSender(), _totalSupply);\\n  }\\n\\n  /**\\n   * @dev Enables the burning, allocates the `burningBalance` to {IBurning} contract.\\n   */\\n  function setBurningContract(IBurning burning, uint256 burningBalance) external onlyOwner {\\n    _burning = burning;\\n\\n    // _totalSupply = _totalSupply.add(burningBalance); no need to do this , total supply remains fixed\\n    _balances[_msgSender()] = _balances[_msgSender()].sub(burningBalance);\\n    _balances[address(burning)] = _balances[address(burning)].add(burningBalance);\\n    emit Transfer(address(0), address(burning), burningBalance);\\n  }\\n\\n  /**\\n   * @dev Enables the staking via {IStaking} contract.\\n   */\\n  function setStakingContract(IStaking staking) external onlyOwner {\\n    _staking = staking;\\n  }\\n\\n  /**\\n   * @dev Enables the token distribution with 'lock-in' period via {LockableDistribution} contract.\\n   *\\n   * See {ERC20Lockable}.\\n   */\\n  function setLockableDistributionContract(address lockableDistribution) external onlyOwner {\\n    _lockableDistribution = lockableDistribution;\\n  }\\n\\n  function setMinter(address _address, bool _role) external onlyOwner {\\n    _allowedMinters[_address] = _role;\\n  }\\n\\n  function getMinterRole(address _address) external view returns (bool) {\\n    return _allowedMinters[_address];\\n  }\\n\\n  /**\\n   * @dev Moves each of `values` in tokens from the caller's account to the list of `to`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event per each transfer.\\n   */\\n  function transferBatch(address[] calldata to, uint256[] calldata values) external returns (bool) {\\n    require(\\n      to.length == values.length && to.length > 0,\\n      \\\"EggToken: to and values arrays should be equal in size and non-empty\\\"\\n    );\\n\\n    uint256 i = 0;\\n    while (i < to.length) {\\n      require(to[i] != address(0), \\\"EggToken: transfer to the zero address\\\");\\n\\n      _beforeTokenTransfer(_msgSender(), to[i], values[i]);\\n\\n      _balances[_msgSender()] = _balances[_msgSender()].sub(\\n        values[i],\\n        \\\"EggToken: transfer amount exceeds balance\\\"\\n      );\\n      _balances[to[i]] = _balances[to[i]].add(values[i]);\\n      emit Transfer(_msgSender(), to[i], values[i]);\\n      i++;\\n    }\\n\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Triggers token burn through the {IBurning} `_burning` contract.\\n   *\\n   * Requirements:\\n   *\\n   * - only contract owner can trigger the burning.\\n   */\\n  function periodicBurn() external onlyOwner returns (bool success) {\\n    require(_burning.burn(), \\\"Burning: not possible to perform the periodic token burn\\\");\\n\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Enables withdrawal of {ERC20} tokens accidentally sent to this smart contract.\\n   *\\n   * Requirements:\\n   *\\n   * - only contract owner can transfer out {ERC20} tokens.\\n   */\\n  function transferAnyERC20Token(address tokenAddress, uint256 tokens)\\n    external\\n    onlyOwner\\n    returns (bool success)\\n  {\\n    return IERC20(tokenAddress).transfer(_msgSender(), tokens);\\n  }\\n\\n  /**\\n   * @dev See {ERC20-_beforeTokenTransfer},\\n   * {ERC20Pausable-_beforeTokenTransfer}, {ERC20Lockable-_beforeTokenTransfer}.\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal virtual override(ERC20, ERC20Pausable, ERC20Lockable) {\\n    super._beforeTokenTransfer(from, to, amount);\\n  }\\n\\n  /**\\n   * @dev Restricts token minting.\\n   *\\n   * Requirements:\\n   *\\n   * - only {IStaking} `_staking` contract can mint tokens (staking rewards).\\n   */\\n  function _beforeMint() internal virtual override {\\n    require(_allowedMinters[_msgSender()], \\\"Minting: only contracts with minter roles can mint tokens\\\");\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache license 2.0\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Context.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context, Ownable {\\n  /**\\n   * @dev Emitted when the pause is triggered by `account`.\\n   */\\n  event LogPaused(address account);\\n\\n  /**\\n   * @dev Emitted when the pause is lifted by `account`.\\n   */\\n  event LogUnpaused(address account);\\n\\n  bool private _paused;\\n\\n  /**\\n   * @dev Initializes the contract in unpaused state.\\n   */\\n  constructor() {\\n    _paused = false;\\n  }\\n\\n  /**\\n   * @dev Returns true if the contract is paused, and false otherwise.\\n   */\\n  function paused() public view returns (bool) {\\n    return _paused;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   *\\n   * Requirements:\\n   *\\n   * - The contract must not be paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!_paused, \\\"Pausable: paused\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   *\\n   * Requirements:\\n   *\\n   * - The contract must be paused.\\n   */\\n  modifier whenPaused() {\\n    require(_paused, \\\"Pausable: not paused\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Triggers stopped state.\\n   *\\n   * Requirements:\\n   *\\n   * - The contract must not be paused.\\n   */\\n  function pause() external virtual whenNotPaused onlyOwner {\\n    _paused = true;\\n    emit LogPaused(_msgSender());\\n  }\\n\\n  /**\\n   * @dev Returns to normal state.\\n   *\\n   * Requirements:\\n   *\\n   * - The contract must be paused.\\n   */\\n  function unpause() external virtual whenPaused onlyOwner {\\n    _paused = false;\\n    emit LogUnpaused(_msgSender());\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/utils/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache license 2.0\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n  event LogOwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  address private _owner;\\n\\n  /**\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\n   */\\n  constructor() {\\n    _owner = _msgSender();\\n  }\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() public view returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(_msgSender() == _owner, \\\"Ownable: only contract owner can call this function.\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Checks if transaction sender account is an owner.\\n   */\\n  function isOwner() external view returns (bool) {\\n    return _msgSender() == _owner;\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) external onlyOwner {\\n    require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n    emit LogOwnershipTransferred(_owner, newOwner);\\n    _owner = newOwner;\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache license 2.0\\n\\npragma solidity ^0.7.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal virtual view returns (address payable) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal virtual view returns (bytes memory) {\\n    this;\\n    return msg.data;\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/token/ERC20Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache license 2.0\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"../utils/Pausable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n */\\nabstract contract ERC20Pausable is ERC20, Pausable {\\n  /**\\n   * @dev See {ERC20-_beforeTokenTransfer}.\\n   *\\n   * Requirements:\\n   *\\n   * - the contract must not be paused.\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal virtual override {\\n    super._beforeTokenTransfer(from, to, amount);\\n    require(!paused(), \\\"ERC20Pausable: token transfer while paused\\\");\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/token/ERC20Mintable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache license 2.0\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows new tokens to be created,\\n * in a way that can be recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Mintable is Context, ERC20 {\\n  /**\\n   * @dev Creates `amount` tokens for `account`.\\n   *\\n   * See {ERC20-_mint}.\\n   */\\n  function mint(address account, uint256 amount) external virtual returns (bool success) {\\n    _mint(account, amount);\\n    return true;\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/token/ERC20Lockable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache license 2.0\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"./ERC20Pausable.sol\\\";\\nimport \\\"../libraries/SafeMathUint.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows to set up a 'lock-in' period for tokens,\\n * which means a percentage of tokens received through from {LockableDistribution} contract\\n * will not be transferrable until the end of 'lock-in' period.\\n */\\nabstract contract ERC20Lockable is Context, ERC20Pausable {\\n  using SafeMathUint for uint256;\\n\\n  address _lockableDistribution;\\n\\n  struct BalanceLock {\\n    uint256 lockedAmount;\\n    uint256 unlockTimestamp;\\n  }\\n  mapping(address => BalanceLock) internal _balanceLocks;\\n\\n  /**\\n   * @dev Creates a 'lock-in' period for `lockAmount` tokens on `lockFor` address\\n   * that lasts until `unlockTimestamp` timestamp.\\n   */\\n  function lock(\\n    address lockFor,\\n    uint256 lockAmount,\\n    uint256 unlockTimestamp\\n  ) external {\\n    require(\\n      _msgSender() == _lockableDistribution,\\n      \\\"ERC20Lockable: only distribution contract can lock tokens\\\"\\n    );\\n\\n    _balanceLocks[lockFor].lockedAmount = lockAmount;\\n    _balanceLocks[lockFor].unlockTimestamp = unlockTimestamp;\\n  }\\n\\n  /**\\n   * @dev Returns a 'lock-in' period details for `account` address.\\n   */\\n  function lockOf(address account)\\n    public\\n    view\\n    returns (uint256 lockedAmount, uint256 unlockTimestamp)\\n  {\\n    return (_balanceLocks[account].lockedAmount, _balanceLocks[account].unlockTimestamp);\\n  }\\n\\n  /**\\n   * @dev Hook that restricts transfers according to the 'lock-in' period.\\n   *\\n   * See {ERC20-_beforeTokenTransfer}.\\n   *\\n   * Requirements:\\n   *\\n   * - transferred amount should not include tokens that are 'locked-in'.\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal virtual override {\\n    super._beforeTokenTransfer(from, to, amount);\\n\\n    uint256 lockedAmount;\\n    uint256 unlockTimestamp;\\n    (lockedAmount, unlockTimestamp) = lockOf(from);\\n    if (unlockTimestamp != 0 && block.timestamp < unlockTimestamp) {\\n      require(\\n        amount <= balanceOf(from).sub(lockedAmount),\\n        \\\"ERC20Lockable: transfer amount exceeds the non-locked balance\\\"\\n      );\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/token/ERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache license 2.0\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"../libraries/SafeMathUint.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n  using SafeMathUint for uint256;\\n\\n  /**\\n   * @dev Destroys `amount` tokens from the caller.\\n   *\\n   * See {ERC20-_burn}.\\n   */\\n  function burn(uint256 amount) external virtual returns (bool success) {\\n    _burn(_msgSender(), amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n   * allowance.\\n   *\\n   * See {ERC20-_burn} and {ERC20-allowance}.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have allowance for `accounts`'s tokens of at least\\n   * `amount`.\\n   */\\n  function burnFrom(address account, uint256 amount) external virtual returns (bool success) {\\n    uint256 decreasedAllowance = allowance(account, _msgSender()).sub(\\n      amount,\\n      \\\"ERC20Burnable: burn amount exceeds allowance\\\"\\n    );\\n    _approve(account, _msgSender(), decreasedAllowance);\\n    _burn(account, amount);\\n    return true;\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/token/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache license 2.0\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../libraries/SafeMathUint.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * Functions revert instead of returning `false` on failure.\\n * This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * The non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n  using SafeMathUint for uint256;\\n\\n  mapping(address => uint256) internal _balances;\\n\\n  mapping(address => mapping(address => uint256)) private _allowances;\\n\\n  uint256 internal _totalSupply;\\n\\n  string private _name;\\n  string private _symbol;\\n  uint8 private _decimals;\\n\\n  /**\\n   * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n   * a default value of 18.\\n   *\\n   * To select a different value for {decimals}, use {_setupDecimals}.\\n   *\\n   * All three of these values are immutable: they can only be set once during\\n   * construction.\\n   */\\n  constructor(string memory name, string memory symbol) {\\n    _name = name;\\n    _symbol = symbol;\\n    _decimals = 18;\\n  }\\n\\n  /**\\n   * @dev Returns the name of the token.\\n   */\\n  function name() public view returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev Returns the symbol of the token, usually a shorter version of the\\n   * name.\\n   */\\n  function symbol() public view returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n   * @dev Returns the number of decimals used to get its user representation.\\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n   * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n   *\\n   * Tokens usually opt for a value of 18, imitating the relationship between\\n   * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n   * called.\\n   *\\n   * NOTE: This information is only used for _display_ purposes: it in\\n   * no way affects any of the arithmetic of the contract, including\\n   * {IERC20-balanceOf} and {IERC20-transfer}.\\n   */\\n  function decimals() public view returns (uint8) {\\n    return _decimals;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-totalSupply}.\\n   */\\n  function totalSupply() public override view returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-balanceOf}.\\n   */\\n  function balanceOf(address account) public override view returns (uint256) {\\n    return _balances[account];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transfer}.\\n   *\\n   * Requirements:\\n   *\\n   * - `recipient` cannot be the zero address.\\n   * - the caller must have a balance of at least `amount`.\\n   */\\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n    _transfer(_msgSender(), recipient, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-allowance}.\\n   */\\n  function allowance(address owner, address spender)\\n    public\\n    virtual\\n    override\\n    view\\n    returns (uint256)\\n  {\\n    return _allowances[owner][spender];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-approve}.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n    _approve(_msgSender(), spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transferFrom}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance. This is not\\n   * required by the EIP. See the note at the beginning of {ERC20}.\\n   *\\n   * Requirements:\\n   *\\n   * - `sender` and `recipient` cannot be the zero address.\\n   * - `sender` must have a balance of at least `amount`.\\n   * - the caller must have allowance for ``sender``'s tokens of at least\\n   * `amount`.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) public virtual override returns (bool) {\\n    _transfer(sender, recipient, amount);\\n    _approve(\\n      sender,\\n      _msgSender(),\\n      _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\")\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   * - `spender` must have allowance for the caller of at least\\n   * `subtractedValue`.\\n   */\\n  function decreaseAllowance(address spender, uint256 subtractedValue)\\n    public\\n    virtual\\n    returns (bool)\\n  {\\n    _approve(\\n      _msgSender(),\\n      spender,\\n      _allowances[_msgSender()][spender].sub(\\n        subtractedValue,\\n        \\\"ERC20: decreased allowance below zero\\\"\\n      )\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Moves tokens `amount` from `sender` to `recipient`.\\n   *\\n   * This is internal function is equivalent to {transfer}, and can be used to\\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\\n   *\\n   * Emits a {Transfer} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `sender` cannot be the zero address.\\n   * - `recipient` cannot be the zero address.\\n   * - `sender` must have a balance of at least `amount`.\\n   */\\n  function _transfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) internal virtual {\\n    require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n    require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n    _beforeTokenTransfer(sender, recipient, amount);\\n\\n    _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n    _balances[recipient] = _balances[recipient].add(amount);\\n    emit Transfer(sender, recipient, amount);\\n  }\\n\\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n   * the total supply.\\n   *\\n   * Emits a {Transfer} event with `from` set to the zero address.\\n   *\\n   * Requirements:\\n   *\\n   * - `to` cannot be the zero address.\\n   */\\n  function _mint(address account, uint256 amount) internal virtual {\\n    require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n    _beforeMint();\\n    _beforeTokenTransfer(address(0), account, amount);\\n\\n    _totalSupply = _totalSupply.add(amount);\\n    _balances[account] = _balances[account].add(amount);\\n    emit Transfer(address(0), account, amount);\\n  }\\n\\n  /**\\n   * @dev Destroys `amount` tokens from `account`, reducing the\\n   * total supply.\\n   *\\n   * Emits a {Transfer} event with `to` set to the zero address.\\n   *\\n   * Requirements:\\n   *\\n   * - `account` cannot be the zero address.\\n   * - `account` must have at least `amount` tokens.\\n   */\\n  function _burn(address account, uint256 amount) internal virtual {\\n    require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n    _beforeTokenTransfer(account, address(0), amount);\\n\\n    _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n    _totalSupply = _totalSupply.sub(amount);\\n    emit Transfer(account, address(0), amount);\\n  }\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n   *\\n   * This internal function is equivalent to `approve`, and can be used to\\n   * e.g. set automatic allowances for certain subsystems, etc.\\n   *\\n   * Emits an {Approval} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `owner` cannot be the zero address.\\n   * - `spender` cannot be the zero address.\\n   */\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  ) internal virtual {\\n    require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n    require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n    _allowances[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  /**\\n   * @dev Hook that is called before any transfer of tokens. This includes\\n   * minting and burning.\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal virtual {}\\n\\n  /**\\n   * @dev Hook that is called before any token mint.\\n   */\\n  function _beforeMint() internal virtual {}\\n}\\n\"\r\n    },\r\n    \"/contracts/libraries/SafeMathUint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache license 2.0\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMathUint` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUint {\\n  /**\\n   * @dev Returns the addition of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `+` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - Addition cannot overflow.\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `*` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - Multiplication cannot overflow.\\n   */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   *\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, \\\"SafeMath: division by zero\\\");\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   *\\n   * - The divisor cannot be zero.\\n   */\\n  function div(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b > 0, errorMessage);\\n    uint256 c = a / b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   *\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts with custom message when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   *\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n\\n  /**\\n   * @dev Converts an unsigned integer to a signed integer,\\n   * Reverts when convertation overflows.\\n   *\\n   * Requirements:\\n   *\\n   * - Operation cannot overflow.\\n   */\\n  function toInt256Safe(uint256 a) internal pure returns (int256) {\\n    int256 b = int256(a);\\n    require(b >= 0, \\\"SafeMath: convertation overflow\\\");\\n    return b;\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache license 2.0\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC900 standard with custom modifications.\\n *\\n * See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-900.md\\n */\\ninterface IStaking {\\n  /**\\n   * @dev Emitted when the `user` stakes an `amount` of tokens and\\n   * passes arbitrary `data`, therefore `total` is changed as well,\\n   * `personalStakeIndex`, `unlockedTimestamp` and `stakePercentageBasisPoints` are captured\\n   * according to the chosen stake option.\\n   */\\n  event LogStaked(\\n    address indexed user,\\n    uint256 amount,\\n    uint256 personalStakeIndex,\\n    uint256 unlockedTimestamp,\\n    uint16 stakePercentageBasisPoints,\\n    uint256 total,\\n    bytes data\\n  );\\n\\n  /**\\n   * @dev Emitted when the `user` unstakes an `amount` of tokens and\\n   * passes arbitrary `data`, therefore `total` is changed as well,\\n   * `personalStakeIndex` and `stakeReward` are captured.\\n   */\\n  event LogUnstaked(\\n    address indexed user,\\n    uint256 amount,\\n    uint256 personalStakeIndex,\\n    uint256 stakeReward,\\n    uint256 total,\\n    bytes data\\n  );\\n\\n  /**\\n   * @notice Stakes a certain amount of tokens, this MUST transfer the given amount from the user\\n   * @notice MUST trigger Staked event\\n   * @param stakeOptionIndex uint8 the chosen stake option\\n   * @param amount uint256 the amount of tokens to stake\\n   * @param data bytes optional data to include in the Stake event\\n   */\\n  function stake(\\n    uint8 stakeOptionIndex,\\n    uint256 amount,\\n    bytes calldata data\\n  ) external;\\n\\n  /**\\n   * @notice Stakes a certain amount of tokens, this MUST transfer the given amount from the caller\\n   * @notice MUST trigger Staked event\\n   * @param stakeOptionIndex uint8 the chosen stake option\\n   * @param user address the address the tokens are staked for\\n   * @param amount uint256 the amount of tokens to stake\\n   * @param data bytes optional data to include in the Stake event\\n   */\\n  function stakeFor(\\n    uint8 stakeOptionIndex,\\n    address user,\\n    uint256 amount,\\n    bytes calldata data\\n  ) external;\\n\\n  /**\\n   * @notice Unstakes tokens, this SHOULD return the given amount of tokens to the user,\\n   * if unstaking is currently not possible the function MUST revert\\n   * @notice MUST trigger Unstaked event\\n   * @dev Unstaking tokens is an atomic operation\u2014either all of the tokens in a stake, or none of the tokens.\\n   * @dev Stake reward is minted if function is called after the stake's `unlockTimestamp`.\\n   * @param personalStakeIndex uint256 index of the stake to withdraw in the personalStakes mapping\\n   * @param data bytes optional data to include in the Unstake event\\n   */\\n  function unstake(uint256 personalStakeIndex, bytes calldata data) external;\\n\\n  /**\\n   * @notice Returns the current total of tokens staked for an address\\n   * @param addr address The address to query\\n   * @return uint256 The number of tokens staked for the given address\\n   */\\n  function totalStakedFor(address addr) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the current total of tokens staked\\n   * @return uint256 The number of tokens staked in the contract\\n   */\\n  function totalStaked() external view returns (uint256);\\n\\n  /**\\n   * @notice Address of the token being used by the staking interface\\n   * @return address The address of the ERC20 token used for staking\\n   */\\n  function token() external view returns (address);\\n\\n  /**\\n   * @notice MUST return true if the optional history functions are implemented, otherwise false\\n   * @dev Since we don't implement the optional interface, this always returns false\\n   * @return bool Whether or not the optional history functions are implemented\\n   */\\n  function supportsHistory() external pure returns (bool);\\n\\n  /**\\n   * @notice Sets the pairs of currently available staking options,\\n   * which will regulate the stake duration and reward percentage.\\n   * Stakes that were created through the old stake options will remain unchanged.\\n   * @param stakeDurations uint256[] array of stake option durations\\n   * @param stakePercentageBasisPoints uint16[] array of stake rewarding percentages (basis points)\\n   */\\n  function setStakingOptions(\\n    uint256[] memory stakeDurations,\\n    uint16[] memory stakePercentageBasisPoints\\n  ) external;\\n\\n  /**\\n   * @notice Returns the pairs of currently available staking options,\\n   * so that staker can choose a suitable combination of\\n   * stake duration and reward percentage.\\n   * @return stakeOptionIndexes uint256[] array of the stake option indexes used in other functions of this contract\\n   * @return stakeDurations uint256[] array of stake option durations\\n   * @return stakePercentageBasisPoints uint16[] array of stake rewarding percentages (basis points)\\n   */\\n  function getStakingOptions()\\n    external\\n    view\\n    returns (\\n      uint256[] memory stakeOptionIndexes,\\n      uint256[] memory stakeDurations,\\n      uint16[] memory stakePercentageBasisPoints\\n    );\\n\\n  /**\\n   * @dev Returns the stake indexes for\\n   * the last `amountToRetrieve` (with `offset` for pagination)\\n   * personal stakes created by `user`.\\n   * @param user address The address to query\\n   * @param amountToRetrieve uint256 Configures the amount of stakes to gather data for\\n   * @param offset uint256 Configures the offset for results pagination\\n   * @return uint256[] stake indexes array\\n   */\\n  function getPersonalStakeIndexes(\\n    address user,\\n    uint256 amountToRetrieve,\\n    uint256 offset\\n  ) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the stake unlock timestamps for\\n   * the last `amountToRetrieve` (with `offset` for pagination)\\n   * personal stakes created by `user`.\\n   * @param user address The address to query\\n   * @param amountToRetrieve uint256 Configures the amount of stakes to gather data for\\n   * @param offset uint256 Configures the offset for results pagination\\n   * @return uint256[] stake unlock timestamps array\\n   */\\n  function getPersonalStakeUnlockedTimestamps(\\n    address user,\\n    uint256 amountToRetrieve,\\n    uint256 offset\\n  ) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the stake values of\\n   * the last `amountToRetrieve` (with `offset` for pagination)\\n   * the personal stakes created by `user`.\\n   * @param user address The address to query\\n   * @param amountToRetrieve uint256 Configures the amount of stakes to gather data for\\n   * @param offset uint256 Configures the offset for results pagination\\n   * @return uint256[] stake values array\\n   */\\n  function getPersonalStakeActualAmounts(\\n    address user,\\n    uint256 amountToRetrieve,\\n    uint256 offset\\n  ) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the adresses of stake owners of\\n   * the last `amountToRetrieve` (with `offset` for pagination)\\n   * personal stakes created by `user`.\\n   * @param user address The address to query\\n   * @param amountToRetrieve uint256 Configures the amount of stakes to gather data for\\n   * @param offset uint256 Configures the offset for results pagination\\n   * @return address[] addresses of stake owners array\\n   */\\n  function getPersonalStakeForAddresses(\\n    address user,\\n    uint256 amountToRetrieve,\\n    uint256 offset\\n  ) external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns the stake rewards percentage (basis points) of\\n   * the last `amountToRetrieve` (with `offset` for pagination)\\n   * personal stakes created by `user`.\\n   * @param user address The address to query\\n   * @param amountToRetrieve uint256 Configures the amount of stakes to gather data for\\n   * @param offset uint256 Configures the offset for results pagination\\n   * @return uint256[] stake rewards percentage (basis points) array\\n   */\\n  function getPersonalStakePercentageBasisPoints(\\n    address user,\\n    uint256 amountToRetrieve,\\n    uint256 offset\\n  ) external view returns (uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache license 2.0\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IBurning.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache license 2.0\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the smart contract that configures rules\\n * and executes burning of the passed {ERC20Burnable} token.\\n */\\ninterface IBurning {\\n  /**\\n   * @dev Emitted when `value` tokens are burned via `burningContract`.\\n   */\\n  event LogPeriodicTokenBurn(address indexed burningContract, uint256 value);\\n\\n  /**\\n   * @dev Attempts to burn tokens.\\n   */\\n  function burn() external returns (bool);\\n\\n  /**\\n   * @dev Returns a total amount of tokens that were already burned.\\n   */\\n  function burned() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns a total maximum amount of tokens to be burnt.\\n   */\\n  function burnLimit() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns a one-time amount to be burned upon each request.\\n   */\\n  function singleBurnAmount() external view returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"initialTotalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"LogOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"LogPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"LogUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getMinterRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lockFor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTimestamp\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"lockOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodicBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBurning\",\"name\":\"burning\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"burningBalance\",\"type\":\"uint256\"}],\"name\":\"setBurningContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lockableDistribution\",\"type\":\"address\"}],\"name\":\"setLockableDistributionContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_role\",\"type\":\"bool\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStaking\",\"name\":\"staking\",\"type\":\"address\"}],\"name\":\"setStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"transferBatch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EggToken", "CompilerVersion": "v0.7.0+commit.9e61f92b", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000084595161401484a000000000000000000000000000000000000000000000000000000000000000000000c4547472050726f746f636f6c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034547470000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}