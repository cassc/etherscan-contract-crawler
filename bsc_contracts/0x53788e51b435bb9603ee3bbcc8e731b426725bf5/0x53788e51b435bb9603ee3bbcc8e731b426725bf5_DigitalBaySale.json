{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.11;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal virtual view returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n    function _msgData() internal virtual view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor()  {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// import ierc20 & safemath & non-standard\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary SafeMath {\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract DigitalBaySale  is Ownable {\r\n    using SafeMath for uint256;\r\n    event ClaimableAmount(address _user, uint256 _claimableAmount);\r\n    \r\n    uint256 public rate; \r\n    bool public presaleOver;\r\n    mapping(address => uint256) public claimable;\r\n    uint256 public totalInvested;\r\n    uint256 public hardcap;\r\n    uint256 public allowedUserBalance;\r\n    uint256 public decimalFactor = 1;\r\n\r\n    mapping(address => bool) public supportedToken;\r\n    mapping(address => uint256) public supportedTokenDecimal;\r\n    mapping(uint256 => uint256) public minAmount;\r\n    mapping(uint256 => uint256) public maxAmount;\r\n    \r\n    address[] public participatedUsers;\r\n\r\n    constructor(address[] memory _tokens, uint256[] memory _decimals, uint256 _rate, uint256 _allowedUserBalance, uint256 _hardcap, uint256 _minAmount, uint256 _maxAmount)  {\r\n        rate = _rate;\r\n        allowedUserBalance = _allowedUserBalance;\r\n        presaleOver = true;\r\n        hardcap = _hardcap;\r\n        minAmount[0] = _minAmount/10**12;\r\n        maxAmount[0] = _maxAmount/10**12;\r\n        minAmount[1] = _minAmount;\r\n        maxAmount[1] = _maxAmount;\r\n        for(uint i = 0; i < _tokens.length; i++){\r\n            supportedToken[_tokens[i]] = true;\r\n            supportedTokenDecimal[_tokens[i]] = _decimals[i];\r\n        }\r\n    }\r\n\r\n    function isParticipatedUser() internal view returns(bool) {\r\n        bool isValid;\r\n        for(uint256 i = 0 ; i < participatedUsers.length; i++){\r\n            if(participatedUsers[i] == msg.sender){\r\n                isValid = true;\r\n                return isValid;\r\n            }\r\n        }\r\n        return isValid;\r\n    }\r\n\r\n    modifier isPresaleOver() {\r\n        require(presaleOver == true, \"Sale Round is not over\");\r\n        _;\r\n    }\r\n\r\n    function getTotalParticipatedUser() public view returns(uint256){\r\n        return participatedUsers.length;\r\n    }\r\n\r\n    function endPresale() external onlyOwner returns (bool) {\r\n        presaleOver = true;\r\n        return presaleOver;\r\n    }\r\n\r\n    function startPresale() external onlyOwner returns (bool) {\r\n        presaleOver = false;\r\n        return presaleOver;\r\n    }\r\n\r\n    function setMinAmount(uint256 _amount) external onlyOwner returns (uint256) {\r\n        minAmount[0] = _amount/10**12;\r\n        minAmount[1] = _amount;\r\n        return _amount;\r\n    }\r\n\r\n    function setMaxAmount(uint256 _amount) external onlyOwner returns (uint256) {\r\n        maxAmount[0] = _amount/10**12;\r\n        maxAmount[1] = _amount;\r\n        return _amount;\r\n    }\r\n\r\n    function setHardcap(uint256 _hardcap) external onlyOwner returns (uint256) {\r\n        hardcap = _hardcap;\r\n        return _hardcap;\r\n    }\r\n\r\n    function setRate(uint256 _rate) external onlyOwner returns (uint256) {\r\n        rate = _rate;\r\n        return _rate;\r\n    }\r\n\r\n    function setDecimalFactor(uint256 _decimalFactor) external onlyOwner returns (uint256) {\r\n        decimalFactor = _decimalFactor;\r\n        return _decimalFactor;\r\n    }\r\n\r\n    function setAllowedUserBalance(uint256 _allowedUserBalance) external onlyOwner returns (uint256) {\r\n        allowedUserBalance = _allowedUserBalance;\r\n        return _allowedUserBalance;\r\n    }\r\n    \r\n    function setSupportedToken(address _supportedToken, uint256 _decimal) external onlyOwner returns (uint256) {\r\n        supportedToken[_supportedToken] = true;\r\n        supportedTokenDecimal[_supportedToken] = _decimal;\r\n        return _decimal;\r\n    }\r\n\r\n    function buyToken(address _token,uint256 _amount) external payable {\r\n        require(presaleOver == false, \"Sale Round is over you cannot buy now\");\r\n        uint256 convertedAmount;\r\n        require(supportedToken[_token], \"Not valid token\");\r\n        if(supportedTokenDecimal[_token] > 0){\r\n            if(supportedTokenDecimal[_token] == 6){\r\n                require(_amount >= minAmount[0] && _amount <= maxAmount[0], \"Please enter valid amount\");\r\n                convertedAmount = _amount * 10**12;\r\n            }else if(supportedTokenDecimal[_token] == 18){\r\n                require(_amount >= minAmount[1] && _amount <= maxAmount[1], \"Please enter valid amount\");\r\n                convertedAmount = _amount;\r\n            }\r\n        }\r\n        uint256 tokensPurchased = convertedAmount.mul(rate).div(decimalFactor);\r\n        require(claimable[msg.sender].add(tokensPurchased) <= allowedUserBalance, \"Not allowed to purchase more\" );\r\n        \r\n        uint256 userUpdatedBalance = claimable[msg.sender].add(tokensPurchased);\r\n\r\n        require( convertedAmount.add(totalInvested) <= hardcap, \"Hardcap reached\");\r\n        totalInvested += convertedAmount;\r\n        IERC20(_token).transferFrom(_msgSender(), address(this), _amount);\r\n        claimable[msg.sender] = userUpdatedBalance;\r\n\r\n        if(!isParticipatedUser()){\r\n            participatedUsers.push(msg.sender);\r\n        }\r\n        emit ClaimableAmount(msg.sender, tokensPurchased);\r\n    }\r\n    \r\n    function getUsersList(uint startIndex, uint endIndex) external view returns(address[] memory userAddress, uint[] memory amount){\r\n        uint length = endIndex.sub(startIndex);\r\n        address[] memory _userAddress = new address[](length);\r\n        uint[] memory _amount = new uint[](length);\r\n\r\n        for (uint i = startIndex; i < endIndex; i = i.add(1)) {\r\n            address user = participatedUsers[i];\r\n            uint listIndex = i.sub(startIndex);\r\n            _userAddress[listIndex] = user;\r\n            _amount[listIndex] = claimable[user];\r\n        }\r\n\r\n        return (_userAddress, _amount);\r\n    }\r\n\r\n\r\n    function transferAnyERC20Tokens(address _tokenAddress, uint256 _value) external onlyOwner{\r\n        IERC20(_tokenAddress).transfer(_msgSender(), _value);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_decimals\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allowedUserBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_hardcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_claimableAmount\",\"type\":\"uint256\"}],\"name\":\"ClaimableAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allowedUserBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimalFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endPresale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalParticipatedUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"getUsersList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"userAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hardcap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"maxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"minAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"participatedUsers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleOver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allowedUserBalance\",\"type\":\"uint256\"}],\"name\":\"setAllowedUserBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_decimalFactor\",\"type\":\"uint256\"}],\"name\":\"setDecimalFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hardcap\",\"type\":\"uint256\"}],\"name\":\"setHardcap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMaxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMinAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_supportedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_decimal\",\"type\":\"uint256\"}],\"name\":\"setSupportedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startPresale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportedTokenDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DigitalBaySale", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000d3c21bcecceda100000000000000000000000000000000000000000000000000043c33c19375648000000000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d5600000000000000000000000055d398326f99059ff775485246999027b31979550000000000000000000000008ac76a51cc950d9822d68b83fe1ad97b32cd580d0000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000012", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://65ee42dbb828d3cc36c21c034e559acdabbae81c1cafc7a790dd97e0a58c7633"}