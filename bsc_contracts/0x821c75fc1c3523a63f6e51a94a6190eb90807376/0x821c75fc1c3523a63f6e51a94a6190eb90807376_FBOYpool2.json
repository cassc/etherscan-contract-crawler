{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity ^0.8.15;\r\n\r\nlibrary SafeMath {\r\n    \r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n    \r\n}\r\n\r\n\r\ncontract FBOYpool2 { \r\n    using SafeMath for uint256;\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    \r\n    mapping(address => bool) private _whiteList;\r\n    address private _owner;\r\n    address public Wallet_Fboy=0x8A3708EbDCA49b2324e1ef5dfE2421A350A14B0F;\r\n    //address public Wallet_Fboy=0xF6e28C626e06E771f99764cC0c030306B48eFa00;\r\n    \r\n    address payable public Wallet_USDT= payable(0x55d398326f99059fF775485246999027B3197955);\r\n    //address payable public Wallet_USDT= payable(0x115f28bE3E397B769cB179ca3F7D38965A6C13De);\r\n    address payable public Wallet_Project = payable(0x36f2dAE586cC46fA9fbfe10DdadBbBbfFd178AD8);\r\n    \r\n    address public Wallet_CakeLP=0xE76992ED0a780793C3DCF6906A6A910A031ECEcB;\r\n    //address public Wallet_CakeLP=0xBF1b05B799e9bb5bffA064Fb2477F16003213B70;\r\n    address public  FboyPair=0xE76992ED0a780793C3DCF6906A6A910A031ECEcB;\r\n    //address public  FboyPair=0xBF1b05B799e9bb5bffA064Fb2477F16003213B70;\r\n\r\n    address payable public constant Wallet_Burn = payable(0x000000000000000000000000000000000000dEaD); \r\n    \r\n    uint8 private constant _decimals = 18;\r\n    uint256 public totalLP; \r\n    uint256 public totalInvest; \r\n    \r\n    uint256 constant public TIME_STEP = 1 days;\r\n    uint256[] public DepositTimes = [30,60,90];\r\n    uint256[] public BountRate = [30,100,240];\r\n   \r\n\r\n    uint256 public _startTime;  \r\n     IUniswapV2Router02 public uniswapV2Router;\r\n\r\n     uint256 public LPStopTime;\r\n    uint256 public LPBountRate;\r\n\r\n    uint256 constant public PERCENTS_DIVIDER = 1000;\r\n    \r\n\r\n    struct User {\r\n        Deposit[] investLists;\r\n        uint256 checkpoint;\r\n        uint256 totalInvest;\r\n        uint256 withdrawn;\r\n        uint256 canwithdrawn;\r\n    \r\n       \r\n    }\r\n     struct LpUser {\r\n        Deposit[] LPlists;\r\n        uint256 LPcheckpoint;\r\n        uint256 totalLP;\r\n        uint256 LPwithdrawn;\r\n        uint256 LPcanwithdrawn;\r\n\r\n    }\r\n\r\n    struct Deposit {\r\n        uint256 amount;\r\n        uint256 Deposittype;\r\n        uint256 start;\r\n        uint256 checkpoint;\r\n    }\r\n\r\n    mapping(address => User) public Users;\r\n    mapping(address => LpUser) public LpUsers;\r\n    \r\n    event AddLP(address indexed user, uint256 amount1, uint256 amount2);\r\n    event Invest(address indexed user, uint256 amount1);\r\n    event WithdrawnInvest(address indexed user, uint256 amount, uint256 itype);\r\n    event RemoveLP(address indexed user, uint256 amount);\r\n    event RemoveInvest(address indexed user, uint256 amount);\r\n    event WithdrawnLP(address indexed user, uint256 amount);\r\n    \r\n   \r\n    constructor () {\r\n        _owner=msg.sender;\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E); \r\n        //IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0xc443a2ec0E50802F814E45b11E6122939B311BFe); \r\n        \r\n        uniswapV2Router = _uniswapV2Router;\r\n        LPStopTime=1685462400;\r\n        LPBountRate=30;\r\n\r\n    }\r\n\r\n\r\n    receive() external payable {}\r\n\r\n    function invest(uint256  FboyAmount ,uint256  Deposittype ) public   returns (bool){\r\n        require( block.timestamp>_startTime , \"It's not startTime1\");\r\n        require(FboyAmount > 0,'error1');\r\n        require(Deposittype <3,'error2');\r\n        \r\n        require(IERC20(Wallet_Fboy).balanceOf(msg.sender) >=FboyAmount, \"have not enough  FBOY token.\");   \r\n        User storage user=Users[msg.sender];\r\n        \r\n        //\u5148\u8ba1\u7b97\u53ef\u63d0\u73b0\r\n        safeTransferFrom(Wallet_Fboy,msg.sender,address(this),FboyAmount);\r\n   \r\n        totalInvest=totalInvest+FboyAmount;\r\n        user.totalInvest=user.totalInvest+FboyAmount;\r\n        user.investLists.push(Deposit(FboyAmount,Deposittype,block.timestamp,block.timestamp));\r\n        emit Invest(msg.sender,FboyAmount);\r\n        return true;\r\n    }\r\n\r\n    \r\n    function removeInvest(uint256  index) public   returns (bool){\r\n        User storage user=Users[msg.sender];\r\n        require(user.investLists.length >index, \"err1\");\r\n        require( block.timestamp>_startTime , \"It's not startTime1\");\r\n        //\u53ef\u63d0\u73b0\u6e05\u96f6\r\n        Deposit storage deposit=user.investLists[index];\r\n        uint256 amount=deposit.amount;\r\n        require(amount >0, \"err2\");\r\n\r\n        user.totalInvest =user.totalInvest -amount;\r\n        totalInvest=totalInvest-amount;\r\n        deposit.amount=0;\r\n        IERC20(Wallet_Fboy).transfer(msg.sender, amount);\r\n\r\n        emit RemoveInvest(msg.sender,amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    function withdrawInvest(uint256  index) public   returns (bool){\r\n        User storage user=Users[msg.sender];\r\n        require(user.investLists.length >index, \"err1\");\r\n        require( block.timestamp>_startTime , \"It's not startTime1\");\r\n        Deposit storage deposit=user.investLists[index];\r\n        require(deposit.amount >0, \"err2\");\r\n       \r\n        uint256 candwithdrawAmount=CanWithdrawInvest(msg.sender,index);\r\n        require(candwithdrawAmount >0, \"err4\");\r\n        require(deposit.start+ DepositTimes[deposit.Deposittype].mul(TIME_STEP)<block.timestamp, \"err3\");\r\n        deposit.checkpoint=block.timestamp;\r\n        IERC20(Wallet_Fboy).transfer(msg.sender, candwithdrawAmount);\r\n        emit WithdrawnInvest(msg.sender,candwithdrawAmount,0);\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    function withdrawInvestAll() public   returns (bool){\r\n        User storage user=Users[msg.sender];\r\n        require(user.investLists.length >0, \"err1\");\r\n        require( block.timestamp>_startTime , \"It's not startTime1\");\r\n        uint256 totalCanWithdraw=0;\r\n        Deposit storage deposit;\r\n        uint256 candwithdrawAmount;\r\n        for(uint256 index=0;index<user.investLists.length;index++){\r\n            deposit=user.investLists[index];\r\n            candwithdrawAmount=CanWithdrawInvest(msg.sender,index);\r\n            if(candwithdrawAmount>0 && deposit.start+ DepositTimes[deposit.Deposittype].mul(TIME_STEP)<block.timestamp){\r\n                totalCanWithdraw=totalCanWithdraw+candwithdrawAmount;\r\n                deposit.checkpoint=block.timestamp;\r\n            }\r\n\r\n\r\n        }\r\n        require(totalCanWithdraw >0, \"err2\");\r\n        IERC20(Wallet_Fboy).transfer(msg.sender, totalCanWithdraw);\r\n        emit WithdrawnInvest(msg.sender,totalCanWithdraw,1);\r\n        return true;\r\n    }\r\n\r\n    function CanWithdrawInvest(address useraddress,uint256  index) public  view returns (uint256){\r\n        if(block.timestamp <= _startTime)return 0;\r\n        Deposit memory deposit=Users[useraddress].investLists[index];\r\n        if(deposit.amount==0)return 0;\r\n        uint256 dividends  =deposit.amount.mul(BountRate[deposit.Deposittype]).div(PERCENTS_DIVIDER).div(DepositTimes[deposit.Deposittype])\r\n\t\t\t\t.mul(block.timestamp.sub(deposit.checkpoint))\r\n\t\t\t\t.div(TIME_STEP);\r\n        return dividends;\r\n    }\r\n\r\n\r\n\r\n    function addLP(uint256 usdtAmount ) public   returns (bool){\r\n       require( block.timestamp>_startTime , \"It's not startTime1\");\r\n       \r\n        require(IERC20(Wallet_USDT).balanceOf(msg.sender) >=usdtAmount, \"have not enough USDT token.\");   \r\n        uint256  FboyAmount=usdtAmount*10**_decimals/tokenPrice();\r\n \r\n        require(FboyAmount > 0,'error1');\r\n        \r\n        require(IERC20(Wallet_Fboy).balanceOf(msg.sender) >=FboyAmount, \"have not enough  FBOY token.\");   \r\n        LpUser storage user=LpUsers[msg.sender];\r\n        //\u5148\u8ba1\u7b97\u53ef\u63d0\u73b0\r\n        uint256 candwithdrawlp=CanWithdrawLP(msg.sender);\r\n        user.LPcanwithdrawn=user.LPcanwithdrawn+candwithdrawlp;\r\n        user.LPcheckpoint=block.timestamp;\r\n        safeTransferFrom(Wallet_Fboy,msg.sender,address(this),FboyAmount);\r\n        safeTransferFrom(Wallet_USDT,msg.sender,address(this),usdtAmount);\r\n            \r\n        uint256 balance1=IERC20(Wallet_CakeLP).balanceOf(address(this));\r\n        addLiquidityAndStake(FboyAmount,usdtAmount);\r\n        uint256 balance2=IERC20(Wallet_CakeLP).balanceOf(address(this));\r\n        uint256 LP=balance2-balance1;\r\n        totalLP=totalLP+LP;\r\n        user.totalLP=user.totalLP+LP;\r\n        user.LPlists.push(Deposit(LP,0,block.timestamp,block.timestamp));\r\n        emit AddLP(msg.sender, usdtAmount,FboyAmount);\r\n        return true;\r\n    }\r\n\r\n    \r\n\r\n    function removeLP(uint256  amount) public   returns (bool){\r\n        require(amount >0, \"It's not enough BNB\");\r\n        LpUser storage user=LpUsers[msg.sender];\r\n        require(user.totalLP >=amount, \"It's not enough BNB\");\r\n        require( block.timestamp>_startTime , \"It's not startTime1\");\r\n        //\u53ef\u63d0\u73b0\u6e05\u96f6\r\n        user.LPcheckpoint=block.timestamp;\r\n        user.LPcanwithdrawn=user.LPcanwithdrawn+CanWithdrawLP(msg.sender);\r\n\r\n        user.totalLP =user.totalLP -amount;\r\n        totalLP=totalLP-amount;\r\n\r\n        uint256 Fboybalance1=IERC20(Wallet_Fboy).balanceOf(address(this));\r\n        uint256 Usdtbalance1=IERC20(Wallet_USDT).balanceOf(address(this));\r\n\r\n        (uint256 amountToken ,uint256 amountETH)  =removeLiquidityAndStake(address(this),amount);\r\n        \r\n        uint256 Fboybalance2=IERC20(Wallet_Fboy).balanceOf(address(this));\r\n        uint256 Usdtbalance2=IERC20(Wallet_USDT).balanceOf(address(this));\r\n\r\n        if(amountToken>0 && Fboybalance2>Fboybalance1){\r\n            amountToken=(amountToken>(Fboybalance2-Fboybalance1))?(Fboybalance2-Fboybalance1):amountToken;\r\n            IERC20(Wallet_Fboy).transfer(msg.sender, amountToken);\r\n        }\r\n        if(amountETH>0 && Usdtbalance2>Usdtbalance1){\r\n            amountETH=(amountToken>(Usdtbalance2-Usdtbalance1))?(Usdtbalance2-Usdtbalance1):amountETH;\r\n            IERC20(Wallet_USDT).transfer(msg.sender, amountETH);\r\n        }\r\n        user.LPlists.push(Deposit(amount,1,block.timestamp,block.timestamp));\r\n\r\n        emit RemoveLP(msg.sender,amount);\r\n        return true;\r\n    }\r\n\r\n    function withdrawLP() public   returns (bool){\r\n        LpUser storage user=LpUsers[msg.sender];\r\n        //require(user.totalLP >0, \"not LP\");\r\n        require( block.timestamp>_startTime , \"It's not startTime1\");\r\n        uint256 candwithdrawlp=CanWithdrawLP(msg.sender);\r\n        uint256 amount= user.LPcanwithdrawn+candwithdrawlp;\r\n        user.LPcheckpoint=block.timestamp;\r\n        user.LPcanwithdrawn=0;\r\n        \r\n        uint256 lpamount=amount; \r\n        IERC20(Wallet_Fboy).transfer(msg.sender, lpamount);\r\n        emit WithdrawnLP(msg.sender,amount);\r\n        return true;\r\n    }\r\n\r\n    function CanWithdrawLP(address useraddress) public  view returns (uint256){\r\n        LpUser memory lpuser = LpUsers[useraddress];\r\n\t\tif(block.timestamp <= _startTime)return 0;\r\n        if(LPStopTime>0 && LPStopTime <= lpuser.LPcheckpoint)return 0;\r\n        if(lpuser.totalLP==0)return 0;\r\n        uint256 FboyReverse=getTokenReverse();\r\n        IUniswapV2Pair swapPair = IUniswapV2Pair(FboyPair);\r\n        uint256 totalBalance=swapPair.totalSupply();\r\n        //uint256 userBalance=swapPair.balanceOf(useraddress);\r\n        uint256 marketValue=FboyReverse.mul(lpuser.totalLP).div(totalBalance).mul(2);\r\n        uint256 endtime=block.timestamp;\r\n        if(endtime>LPStopTime && LPStopTime>0)endtime=LPStopTime;\r\n\r\n        uint256 dividends  =marketValue.mul(LPBountRate).div(30000)\r\n\t\t\t\t.mul(endtime.sub(lpuser.LPcheckpoint))\r\n\t\t\t\t.div(TIME_STEP);\r\n        return dividends;\r\n    }\r\n\r\n\r\n    function adminAddLP( address useraddr ,uint256 Amount )  public virtual onlyOwner   returns (bool){\r\n       require( block.timestamp>_startTime , \"It's not startTime1\");\r\n        LpUser storage user=LpUsers[useraddr];\r\n       //\u5148\u8ba1\u7b97\u53ef\u63d0\u73b0\r\n        uint256 candwithdrawlp=CanWithdrawLP(useraddr);\r\n        user.LPcanwithdrawn=user.LPcanwithdrawn+candwithdrawlp;\r\n        user.LPcheckpoint=block.timestamp;\r\n            \r\n        totalLP=totalLP+Amount;\r\n        user.totalLP=user.totalLP+Amount;\r\n        user.LPlists.push(Deposit(Amount,0,block.timestamp,block.timestamp));\r\n        return true;\r\n    }\r\n\r\n    function adminRemoveLP( address useraddr ,uint256 Amount )  public virtual onlyOwner   returns (bool){\r\n       require( block.timestamp>_startTime , \"It's not startTime1\");\r\n        LpUser storage user=LpUsers[useraddr];\r\n        require( user.totalLP>=Amount , \"It's not startTime1\");\r\n       \r\n        //\u5148\u8ba1\u7b97\u53ef\u63d0\u73b0\r\n        uint256 candwithdrawlp=CanWithdrawLP(useraddr);\r\n        user.LPcanwithdrawn=user.LPcanwithdrawn+candwithdrawlp;\r\n        user.LPcheckpoint=block.timestamp;\r\n             \r\n        totalLP=totalLP-Amount;\r\n        user.totalLP=user.totalLP-Amount;\r\n        user.LPlists.push(Deposit(Amount,0,block.timestamp,block.timestamp));\r\n        return true;\r\n    }\r\n\r\n\r\n    function AdminAddinvest(address useraddr ,uint256  FboyAmount ,uint256  Deposittype )  public virtual onlyOwner   returns (bool){\r\n        require( block.timestamp>_startTime , \"It's not startTime1\");\r\n        require(FboyAmount > 0,'error1');\r\n        require(Deposittype <3,'error2');\r\n        User storage user=Users[useraddr];\r\n        totalInvest=totalInvest+FboyAmount;\r\n        user.totalInvest=user.totalInvest+FboyAmount;\r\n        user.investLists.push(Deposit(FboyAmount,Deposittype,block.timestamp,block.timestamp));\r\n        emit Invest(useraddr,FboyAmount);\r\n        return true;\r\n    }\r\n\r\n   function AdminRemoveinvest(address useraddr ,uint256  index )  public virtual onlyOwner   returns (bool){\r\n        require( block.timestamp>_startTime , \"It's not startTime1\");\r\n        User storage user=Users[useraddr];\r\n        Deposit storage deposit=user.investLists[index];\r\n        require(deposit.amount >0, \"err2\");\r\n        deposit.amount=0;\r\n        totalInvest=totalInvest-deposit.amount;\r\n        user.totalInvest=user.totalInvest-deposit.amount;\r\n        deposit.amount=0;\r\n        emit RemoveInvest(msg.sender,deposit.amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    function addLiquidityAndStake(uint256 tokenAmount, uint256 ethAmount) private {\r\n        IERC20(Wallet_Fboy).approve(address(uniswapV2Router), tokenAmount);\r\n        IERC20(Wallet_USDT).approve(address(uniswapV2Router), ethAmount);\r\n\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidity(\r\n            Wallet_Fboy,\r\n            Wallet_USDT,\r\n            tokenAmount,\r\n            ethAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function removeLiquidityAndStake(address useraddr,uint256 tokenAmount) private returns (uint256 amountToken, uint256 amountETH) {\r\n        IERC20(Wallet_CakeLP).approve(address(uniswapV2Router), tokenAmount);\r\n        (uint256 Token, uint256 ETH)=uniswapV2Router.removeLiquidity(\r\n            Wallet_Fboy,\r\n            Wallet_USDT,\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            useraddr,\r\n            block.timestamp\r\n        );\r\n        return(Token,ETH);\r\n\r\n    }\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function swapTokensForRewardToken(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = Wallet_USDT;\r\n        path[1] = Wallet_Fboy;\r\n\r\n        //_approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        IERC20(Wallet_USDT).approve( address(uniswapV2Router), tokenAmount);\r\n       // make the swap\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    function getAmounts(address tokenaddressout ,uint256 amountIn) public view returns (uint256[] memory)  {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = Wallet_USDT;\r\n        path[1] = tokenaddressout;\r\n       \r\n      uint[] memory amounts= uniswapV2Router.getAmountsOut(\r\n            amountIn, // accept any amount of ETH\r\n            path\r\n        );\r\n        return amounts;\r\n    }\r\n\r\n\r\n\r\n    function setLPBountRate(uint256 value)   public virtual onlyOwner  returns (bool) {\r\n        LPBountRate=value;\r\n        return true;\r\n    }\r\n    function setLPStopTime(uint256 value)   public virtual onlyOwner  returns (bool) {\r\n        LPStopTime=value;\r\n        return true;\r\n    }\r\n\r\n    \r\n\r\n    function setBountRate(uint256 index,uint256 value)   public virtual onlyOwner  returns (bool) {\r\n        BountRate[index]=value;\r\n        return true;\r\n    }\r\n\r\n    function setCakeLPAddress(address wallet)   public virtual onlyOwner  returns (bool) {\r\n        Wallet_CakeLP=payable(wallet);\r\n        return true;\r\n    }\r\n\r\n      function setFboyPairAddress(address wallet)   public virtual onlyOwner  returns (bool) {\r\n        FboyPair=payable(wallet);\r\n        return true;\r\n    }\r\n\r\n    function setstartTime(uint256 value) public   returns (bool) {\r\n         require(_owner == msg.sender);\r\n        _startTime = value;\r\n        return true;\r\n    }\r\n\r\n    function getTokenReverse() public view returns (uint256){\r\n        ISwapPair swapPair = ISwapPair(FboyPair);\r\n        (uint256 reverse0,uint256 reverse1,) = swapPair.getReserves();\r\n        address token0 = swapPair.token0();\r\n        uint256 usdtReverse;\r\n        uint256 tokenReverse;\r\n        if (Wallet_USDT == token0) {\r\n            usdtReverse = reverse0;\r\n            tokenReverse = reverse1;\r\n        } else {\r\n            usdtReverse = reverse1;\r\n            tokenReverse = reverse0;\r\n        }\r\n        return tokenReverse;\r\n    }\r\n\r\n    function tokenPrice() public view returns (uint256){\r\n        ISwapPair swapPair = ISwapPair(FboyPair);\r\n        (uint256 reverse0,uint256 reverse1,) = swapPair.getReserves();\r\n        address token0 = swapPair.token0();\r\n        uint256 usdtReverse;\r\n        uint256 tokenReverse;\r\n        if (Wallet_USDT == token0) {\r\n            usdtReverse = reverse0;\r\n            tokenReverse = reverse1;\r\n        } else {\r\n            usdtReverse = reverse1;\r\n            tokenReverse = reverse0;\r\n        }\r\n        if (0 == tokenReverse) {\r\n            return 0;\r\n        }\r\n        return 10 ** _decimals * usdtReverse / tokenReverse;\r\n    }\r\n\r\n\r\n\r\n    function bindCoinAddress(address coinAddr) public  {\r\n        require(_owner == msg.sender);\r\n        Wallet_Fboy=coinAddr;\r\n    }\r\n    function setWalletProjectAddress(address wallet)   public virtual onlyOwner  returns (bool) {\r\n        Wallet_Project=payable(wallet);\r\n        return true;\r\n    }\r\n    \r\n    function setWalletUsdtAddress(address wallet)   public virtual onlyOwner  returns (bool) {\r\n        Wallet_USDT=payable(wallet);\r\n        return true;\r\n    }\r\n\r\n\tfunction getUserLPlistLength(address userAddress) public view returns(uint256) {\r\n\t\treturn LpUsers[userAddress].LPlists.length;\r\n\t}\r\n\r\n\tfunction getUserLPlists(address userAddress,uint256 index) public view returns(uint256,uint256,uint256) {\r\n\t    LpUser memory user = LpUsers[userAddress];\r\n        return (user.LPlists[index].start,user.LPlists[index].amount,user.LPlists[index].Deposittype);\r\n\t}\r\n\r\n\r\n\tfunction getUserInvestlistLength(address userAddress) public view returns(uint256) {\r\n\t\treturn Users[userAddress].investLists.length;\r\n\t}\r\n\r\n\tfunction getUserInvestlists(address userAddress,uint256 index) public view returns(uint256,uint256,uint256,uint256) {\r\n\t    User memory user = Users[userAddress];\r\n        return (user.investLists[index].start,user.investLists[index].amount,user.investLists[index].Deposittype,user.investLists[index].checkpoint);\r\n\t}\r\n\r\n    \r\n\tfunction getUserLpInfo(address userAddress) public view returns(uint256,uint256,uint256,uint256) {\r\n\t    LpUser memory user = LpUsers[userAddress];\r\n        return (user.LPcheckpoint,user.totalLP,user.LPwithdrawn,user.LPcanwithdrawn);\r\n\t}\r\n\r\n\r\n    function remove_Random_Tokens(address random_Token_Address, address addr, uint256 amount) public  returns(bool _sent){\r\n        require(_owner == msg.sender);\r\n        require(random_Token_Address != address(this), \"Can not remove native token\");\r\n        uint256 totalRandom = IERC20(random_Token_Address).balanceOf(address(this));\r\n        uint256 removeRandom = (amount>totalRandom)?totalRandom:amount;\r\n        _sent = IERC20(random_Token_Address).transfer(addr, removeRandom);\r\n    }\r\n\r\n    function remove_BNB(address addr, uint256 amount) public {\r\n        require(_owner == msg.sender);\r\n        uint256 balance= address(this).balance;\r\n        uint256 removeRandom = (amount>balance)?balance:amount;\r\n        payable(addr).transfer(removeRandom);\r\n    }\r\n                // Set new router and make the new pair address\r\n    function setNewRouter(address newRouter)  public returns (bool){\r\n        if(msg.sender == _owner){\r\n            IUniswapV2Router02 _newPCSRouter = IUniswapV2Router02(newRouter);\r\n            uniswapV2Router = _newPCSRouter;\r\n        }\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\n    interface  poolInterFace {\r\n\r\n        function Referrers(address addr) external view returns (address);\r\n        function setReferrer(address addr,address referrer) external returns (bool);\r\n       \r\n    }\r\n\r\n\r\ninterface IERC20 {\r\n    function burnFrom(address addr, uint value) external   returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ninterface ISwapPair {\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function token0() external view returns (address);\r\n    function sync() external;\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount2\",\"type\":\"uint256\"}],\"name\":\"AddLP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Invest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RemoveInvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RemoveLP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itype\",\"type\":\"uint256\"}],\"name\":\"WithdrawnInvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawnLP\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"useraddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"FboyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Deposittype\",\"type\":\"uint256\"}],\"name\":\"AdminAddinvest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"useraddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"AdminRemoveinvest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BountRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"useraddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"CanWithdrawInvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"useraddress\",\"type\":\"address\"}],\"name\":\"CanWithdrawLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"DepositTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FboyPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LPBountRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LPStopTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"LpUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"LPcheckpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LPwithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LPcanwithdrawn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalInvest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"canwithdrawn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Wallet_Burn\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Wallet_CakeLP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Wallet_Fboy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Wallet_Project\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Wallet_USDT\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"addLP\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"useraddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"adminAddLP\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"useraddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"adminRemoveLP\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coinAddr\",\"type\":\"address\"}],\"name\":\"bindCoinAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenaddressout\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getAmounts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenReverse\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserInvestlistLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserInvestlists\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserLPlistLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserLPlists\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserLpInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"FboyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Deposittype\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"removeInvest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeLP\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"remove_BNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"random_Token_Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"remove_Random_Tokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_sent\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setBountRate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setCakeLPAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setFboyPairAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setLPBountRate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setLPStopTime\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"setNewRouter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setWalletProjectAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setWalletUsdtAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setstartTime\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"withdrawInvest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawInvestAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLP\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FBOYpool2", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3d6543eea29a216a01f343d8d942748633677670bb1832c5bb54db947952e72c"}