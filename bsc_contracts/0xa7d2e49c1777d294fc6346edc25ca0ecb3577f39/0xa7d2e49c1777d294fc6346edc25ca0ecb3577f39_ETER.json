{"SourceCode": "// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: ContentCreator.sol\r\n\r\n\r\npragma solidity 0.8.0;\r\n\r\n/**\r\n * @title ContentCreator mint\r\n * @dev Contains functionality to handle mint for content creators\r\n */\r\nabstract contract ContentCreator {\r\n    uint256 private constant MAX_CONTENT_CREATORS_SUPPLY =\r\n        300000 * uint256(10)**18;\r\n    uint256 private _totalContentCreatorMinted = 0;\r\n    uint256 private constant MAX_DAILY_MINT = 3000 * uint256(10)**18;\r\n    uint256 private _lastMintTime = 0;\r\n\r\n    modifier notExceedContentCreatorSupply(uint256 _amount) {\r\n        uint256 nextContentCreatorMinted = _totalContentCreatorMinted +\r\n            _amount;\r\n        require(nextContentCreatorMinted <= MAX_CONTENT_CREATORS_SUPPLY);\r\n        _;\r\n    }\r\n\t\r\n    modifier mintDailyLimitContentCreators(uint256 _amount) {\r\n        bool canMint = _lastMintTime == 0 ||\r\n            block.timestamp > _lastMintTime + 1 days;\r\n\r\n        require(canMint, \"You can mint only once every day\");\r\n        require(_amount <= MAX_DAILY_MINT, \"The amount exceed max daily mint\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev increase total content creator minted amount and update lastMintTime\r\n     */\r\n    function increaseTotalContentCreatorMinted(uint256 _amount)\r\n        internal\r\n        notExceedContentCreatorSupply(_amount)\r\n        mintDailyLimitContentCreators(_amount)\r\n    {\r\n        _totalContentCreatorMinted += _amount;\r\n        _lastMintTime = block.timestamp;\r\n    }\r\n\r\n    function getTotalContentCreatorMinted() public view returns (uint256) {\r\n        return _totalContentCreatorMinted;\r\n    }\r\n}\r\n\r\n// File: Event.sol\r\n\r\n\r\npragma solidity 0.8.0;\r\n\r\n/**\r\n * @title Event mint\r\n * @dev Contains functionality to handle mint for events in eterland game\r\n */\r\nabstract contract Event {\r\n    modifier notExceedEventSupply(uint256 _amount) {\r\n        uint256 nextEventMinted = _totalEventSupplyMinted + _amount;\r\n        require(nextEventMinted <= MAX_EVENTS_SUPPLY);\r\n        _;\r\n    }\r\n    modifier mintDailyLimitEvent(uint256 _amount) {\r\n        bool canMint = _lastMintTime == 0 ||\r\n            block.timestamp > _lastMintTime + 1 days;\r\n\r\n        require(canMint, \"You can mint only once every day\");\r\n        require(_amount <= MAX_DAILY_MINT, \"The amount exceed max daily mint\");\r\n        _;\r\n    }\r\n\r\n    uint256 private constant MAX_EVENTS_SUPPLY = 300000 * uint256(10)**18;\r\n    uint256 private _totalEventSupplyMinted = 0;\r\n\r\n\t/**\r\n \t* @dev max daily mint (1% of total events supply)\r\n \t*/\r\n    uint256 private constant MAX_DAILY_MINT = 3000 * uint256(10)**18;\r\n    uint256 private _lastMintTime = 0;\r\n\r\n\t/**\r\n \t* @dev increment event supply if not exceed allowed daily amount and max supply \r\n \t*/\r\n    function _incrementEventSupply(uint256 _amount)\r\n        internal\r\n        mintDailyLimitEvent(_amount)\r\n        notExceedEventSupply(_amount)\r\n    {\r\n        _totalEventSupplyMinted += _amount;\r\n        _lastMintTime = block.timestamp;\r\n    }\r\n\r\n    function getTotalEventMinted() public view returns (uint256) {\r\n        return _totalEventSupplyMinted;\r\n    }\r\n}\r\n\r\n// File: Staking.sol\r\n\r\n\r\npragma solidity 0.8.0;\r\n/**\r\n * @title Stacking mint\r\n * @dev Contains functionality to handle mint for stacking\r\n */\r\nabstract contract Staking {\r\n    uint256 private constant MAX_STAKING_SUPPLY = 1500000 * uint256(10)**18;\r\n    uint256 private _totalStakingMinted = 0;\r\n    uint256 private constant MAX_DAILY_MINT = 15000 * uint256(10)**18;\r\n    uint256 private _lastMintTime = 0;\r\n    modifier notExceedStakingSupply(uint256 _amount) {\r\n        uint256 nextStakingMinted = _totalStakingMinted + _amount;\r\n        require(nextStakingMinted <= MAX_STAKING_SUPPLY);\r\n        _;\r\n    }\r\n    modifier mintDailyLimitStaking(uint256 _amount) {\r\n        bool canMint = _lastMintTime == 0 ||\r\n            block.timestamp > _lastMintTime + 1 days;\r\n\r\n        require(canMint, \"You can mint only once every day\");\r\n        require(_amount <= MAX_DAILY_MINT, \"The amount exceed max daily mint\");\r\n        _;\r\n    }\r\n\r\n\r\n \t/**\r\n \t* @dev increment staking supply if not exceed allowed daily amount and max supply \r\n \t*/\r\n    function _increaseTotalStakingMinted(uint256 _amount)\r\n        internal\r\n        notExceedStakingSupply(_amount)\r\n        mintDailyLimitStaking(_amount)\r\n    {\r\n        _totalStakingMinted += _amount;\r\n        _lastMintTime = block.timestamp;\r\n    }\r\n\r\n    function getTotalStakingMinted() public view returns (uint256) {\r\n        return _totalStakingMinted;\r\n    }\r\n}\r\n\r\n// File: Moderator.sol\r\n\r\n\r\npragma solidity 0.8.0;\r\n/**\r\n * @title Moderator mint\r\n * @dev Contains functionality to handle mint for Moderators\r\n */\r\nabstract contract Moderator {\r\n    uint256 private constant MAX_MOD_SUPPLY = 30000 * uint256(10)**18;\r\n    uint256 private constant MAX_DAILY_MINT = 300 * uint256(10)**18;\r\n    uint256 private _totalModeratorMinted = 0;\r\n    uint256 private _lastMintTime = 0;\r\n    modifier notExceedModeratorSupply(uint256 _amount) {\r\n        uint256 nextModeratorMinted = _totalModeratorMinted + _amount;\r\n        require(nextModeratorMinted <= MAX_MOD_SUPPLY);\r\n        _;\r\n    }\r\n    \r\n    modifier mintDailyLimitModerator(uint256 _amount) {\r\n        bool canMint = _lastMintTime == 0 ||\r\n            block.timestamp > _lastMintTime + 1 days;\r\n\r\n        require(canMint, \"You can mint only once every day\");\r\n        require(_amount <= MAX_DAILY_MINT, \"The amount exceed max daily mint\");\r\n        _;\r\n    }\r\n\r\n \t/**\r\n \t* @dev increment moderator supply if not exceed allowed daily amount and max supply \r\n \t*/\r\n    function _incrementModeratorSupply(uint256 _amount) \r\n    mintDailyLimitModerator(_amount)\r\n    notExceedModeratorSupply(_amount)\r\n    internal \r\n    {\r\n        _totalModeratorMinted += _amount;\r\n        _lastMintTime = block.timestamp;\r\n    }\r\n\r\n    function getTotalModeratorMinted() public view returns(uint256){\r\n        return _totalModeratorMinted;\r\n    }\r\n\r\n\r\n  \r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Counters.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (utils/Counters.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n */\r\nlibrary Counters {\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        unchecked {\r\n            counter._value += 1;\r\n        }\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        uint256 value = counter._value;\r\n        require(value > 0, \"Counter: decrement overflow\");\r\n        unchecked {\r\n            counter._value = value - 1;\r\n        }\r\n    }\r\n\r\n    function reset(Counter storage counter) internal {\r\n        counter._value = 0;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/IAccessControl.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (access/IAccessControl.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev External interface of AccessControl declared to support ERC165 detection.\r\n */\r\ninterface IAccessControl {\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {AccessControl-_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/AccessControl.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (access/AccessControl.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\r\n * members except through off-chain means by accessing the contract event logs. Some\r\n * applications may benefit from on-chain enumerability, for those cases see\r\n * {AccessControlEnumerable}.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\r\n    struct RoleData {\r\n        mapping(address => bool) members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping(bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Modifier that checks that an account has a specific role. Reverts\r\n     * with a standardized message including the required role.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     *\r\n     * _Available since v4.1._\r\n     */\r\n    modifier onlyRole(bytes32 role) {\r\n        _checkRole(role, _msgSender());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\r\n        return _roles[role].members[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `account` is missing `role`.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     */\r\n    function _checkRole(bytes32 role, address account) internal view {\r\n        if (!hasRole(role, account)) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        \"AccessControl: account \",\r\n                        Strings.toHexString(uint160(account), 20),\r\n                        \" is missing role \",\r\n                        Strings.toHexString(uint256(role), 32)\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual override {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     *\r\n     * NOTE: This function is deprecated in favor of {_grantRole}.\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        bytes32 previousAdminRole = getRoleAdmin(role);\r\n        _roles[role].adminRole = adminRole;\r\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     */\r\n    function _grantRole(bytes32 role, address account) internal virtual {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].members[account] = true;\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     */\r\n    function _revokeRole(bytes32 role, address account) internal virtual {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].members[account] = false;\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n\r\n// File: ExtendedAccessControl.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @title ExtendedAccessControl\r\n * @dev This is a extension from openzeppelin AccessControl that allow to require determinated number of admin votes to assign or revoke roles\r\n */\r\nabstract contract ExtendedAccessControl is AccessControl {\r\n    using Counters for Counters.Counter;\r\n    Counters.Counter private _emergencyRecoverIds;\r\n\r\n    /**\r\n\t\t@dev set required number of votes to assign or revoke role\r\n\t**/\r\n    constructor(uint8 requiredVotes) {\r\n        _requiredVotes = requiredVotes;\r\n    }\r\n\r\n    uint8 private _requiredVotes;\r\n    /**\r\n\t\t@dev stores  approvals for specific address and role\r\n\t**/\r\n    mapping(address => mapping(bytes32 => mapping(address => bool)))\r\n        private _roleApprovalVotation;\r\n\r\n    /**\r\n\t\t@dev stores address of administrators that voted to assign a role to a specific address\r\n\t**/\r\n    mapping(address => mapping(bytes32 => address[]))\r\n        private _rolesApprovalVotes;\r\n\r\n    /**\r\n\t\t@dev stores votes to revoke specific role for an addres\r\n\t**/\r\n    mapping(address => mapping(bytes32 => mapping(address => bool)))\r\n        private _roleRevokeVotation;\r\n\r\n    /**\r\n\t\t@dev stores address of admnistrators that voted to revoke a role to a specific address\r\n\t**/\r\n    mapping(address => mapping(bytes32 => address[])) private _rolesRevokeVotes;\r\n\r\n    /**\r\n\r\n\t*/\r\n\r\n    event emergencyRecover(\r\n        uint256 _id,\r\n        uint256 _timestamp,\r\n        bool _isDenied,\r\n        bool _isCompleted,\r\n        uint8 _votes\r\n    );\r\n\r\n    struct EmergencyRecoverRequest {\r\n        address _beneficiary;\r\n        uint256 _timestamp;\r\n        bool _isDenied;\r\n        bool _isCompleted;\r\n        uint8 _votes;\r\n    }\r\n\r\n    uint256 private constant REQUIRED_EMERGENCY_TIME = 60 days;\r\n\r\n    mapping(uint256 => EmergencyRecoverRequest) private _recoverRequest;\r\n    mapping(uint256 => mapping(address => bool)) private _addressVotation;\r\n\r\n    function createEmergencyRecover(address _beneficiary)\r\n        external\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        require(_beneficiary != address(0));\r\n        require(_beneficiary != _msgSender());\r\n\r\n        _emergencyRecoverIds.increment();\r\n\r\n        uint256 id = _emergencyRecoverIds.current();\r\n\r\n        _recoverRequest[id] = EmergencyRecoverRequest(\r\n            _beneficiary,\r\n            block.timestamp,\r\n            false,\r\n            false,\r\n            1\r\n        );\r\n        _addressVotation[id][_msgSender()] = true;\r\n\r\n        emit emergencyRecover(\r\n            id,\r\n            _recoverRequest[id]._timestamp,\r\n            false,\r\n            false,\r\n            1\r\n        );\r\n    }\r\n\r\n    function changeEmergencyRecoverStatus(uint256 id, bool isRevokeRequest )\r\n        external\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        require(\r\n            _recoverRequest[id]._beneficiary != address(0),\r\n            \"doesn't exist\"\r\n        );\r\n        require(_addressVotation[id][_msgSender()] == false, \"already voted\");\r\n        require(_recoverRequest[id]._isDenied == false, \"is denied\");\r\n        require(_recoverRequest[id]._isCompleted == false, \"already completed\");\r\n\r\n        if (isRevokeRequest) {\r\n            _recoverRequest[id]._isDenied = true;\r\n        } else {\r\n            _addressVotation[id][_msgSender()] = true;\r\n            _recoverRequest[id]._votes++;\r\n        }\r\n\r\n        emit emergencyRecover(\r\n            id,\r\n            _recoverRequest[id]._timestamp,\r\n            _recoverRequest[id]._isDenied,\r\n            _recoverRequest[id]._isCompleted,\r\n            _recoverRequest[id]._votes\r\n        );\r\n    }\r\n\r\n    function applyEmergencyRecover(uint256 id)\r\n        external\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        require(\r\n            _recoverRequest[id]._beneficiary != address(0),\r\n            \"doesn't exist\"\r\n        );\r\n        require(_recoverRequest[id]._isDenied == false, \"is denied\");\r\n        require(_recoverRequest[id]._isCompleted == false, \"already completed\");\r\n        require(_recoverRequest[id]._votes > 0, \"invalid request\");\r\n        uint256 elapsedTime = block.timestamp - _recoverRequest[id]._timestamp;\r\n        uint256 decreaseTime = (15 days * _recoverRequest[id]._votes);\r\n        uint256 requiredElapsedTime = 0;\r\n\r\n        if (decreaseTime < REQUIRED_EMERGENCY_TIME) {\r\n            requiredElapsedTime = REQUIRED_EMERGENCY_TIME - decreaseTime;\r\n        }\r\n\r\n        require(elapsedTime >= requiredElapsedTime, \"can't apply yet\");\r\n\r\n        _recoverRequest[id]._isCompleted = true;\r\n\r\n        super.grantRole(DEFAULT_ADMIN_ROLE, _recoverRequest[id]._beneficiary);\r\n\r\n        emit emergencyRecover(\r\n            id,\r\n            _recoverRequest[id]._timestamp,\r\n            _recoverRequest[id]._isDenied,\r\n            _recoverRequest[id]._isCompleted,\r\n            _recoverRequest[id]._votes\r\n        );\r\n    }\r\n\r\n    /**\r\n\t\t@dev update votation to revoke role and if the number of votes are greater than the required votes revoke role \r\n\t**/\r\n    function revokeRole(bytes32 role, address account)\r\n        public\r\n        override\r\n        onlyRole(getRoleAdmin(role))\r\n    {\r\n        _revokeRoleVote(account, role);\r\n\r\n        if (_rolesRevokeVotes[account][role].length >= _requiredVotes) {\r\n            super.revokeRole(role, account);\r\n            _restoreVotation(account, role);\r\n        }\r\n    }\r\n\r\n    /**\r\n\t\t@dev update votation to assign a role to an address and if the votes are greater than required votes assign role\r\n\t**/\r\n    function grantRole(bytes32 role, address account)\r\n        public\r\n        override\r\n        onlyRole(getRoleAdmin(role))\r\n    {\r\n        _approveRoleVote(account, role);\r\n\r\n        if (_rolesApprovalVotes[account][role].length >= _requiredVotes) {\r\n            super.grantRole(role, account);\r\n            _restoreVotation(account, role);\r\n        }\r\n    }\r\n\r\n    /**\r\n\t\t@dev update votation to assign a role\r\n\t**/\r\n    function _approveRoleVote(address _address, bytes32 _role)\r\n        private\r\n        returns (bool)\r\n    {\r\n        require(_address != address(0));\r\n        require(\r\n            !_roleApprovalVotation[_address][_role][_msgSender()],\r\n            \"You can vote only one time\"\r\n        );\r\n\r\n        _roleApprovalVotation[_address][_role][_msgSender()] = true;\r\n        _rolesApprovalVotes[_address][_role].push(_msgSender());\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n\t\t@dev update votation to revoke a role\r\n\t**/\r\n    function _revokeRoleVote(address _address, bytes32 _role)\r\n        private\r\n        returns (bool)\r\n    {\r\n        require(_address != address(0));\r\n        require(\r\n            !_roleRevokeVotation[_address][_role][_msgSender()],\r\n            \"You can vote only one time\"\r\n        );\r\n\r\n        _roleRevokeVotation[_address][_role][_msgSender()] = true;\r\n        _rolesRevokeVotes[_address][_role].push(_msgSender());\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n\t\t@dev reset votation for specific address and role\r\n\t**/\r\n    function _restoreVotation(address _address, bytes32 _role) private {\r\n        for (\r\n            uint256 i = 0;\r\n            i < _rolesRevokeVotes[_address][_role].length;\r\n            i++\r\n        ) {\r\n            delete _roleRevokeVotation[_address][_role][\r\n                _rolesRevokeVotes[_address][_role][i]\r\n            ];\r\n        }\r\n        delete _rolesRevokeVotes[_address][_role];\r\n\r\n        for (\r\n            uint256 i = 0;\r\n            i < _rolesApprovalVotes[_address][_role].length;\r\n            i++\r\n        ) {\r\n            delete _roleApprovalVotation[_address][_role][\r\n                _rolesApprovalVotes[_address][_role][i]\r\n            ];\r\n        }\r\n        delete _rolesApprovalVotes[_address][_role];\r\n    }\r\n}\r\n\r\n// File: EterAccessControl.sol\r\n\r\n\r\npragma solidity 0.8.0;\r\n\r\n\r\n/**\r\n * @title EterAccessControl\r\n * @dev This contract defines all roles and modifiers for Eter token authorization\r\n */\r\nabstract contract EterAccessControl is ExtendedAccessControl {\r\n    \r\n\tconstructor(uint8 requiredVotes) \r\n\tExtendedAccessControl(requiredVotes){\r\n\r\n\t}\r\n\t\r\n\tbytes32 private constant ECOSYSTEM_MINTER_ROLE =\r\n        keccak256(\"ECOSYSTEM_MINTER_ROLE\");\r\n    bytes32 private constant LIQUIDITY_MINTER_ROLE =\r\n        keccak256(\"LIQUIDITY_MINTER_ROLE\");\r\n    bytes32 private constant MOD_MINTER_ROLE = keccak256(\"MOD_MINTER_ROLE\");\r\n    bytes32 private constant STAKING_MINTER_ROLE =\r\n        keccak256(\"STAKING_MINTER_ROLE\");\r\n    bytes32 private constant EVENTS_MINTER_ROLE =\r\n        keccak256(\"EVENTS_MINTER_ROLE\");\r\n    bytes32 private constant CONTENT_CREATORS_MINTER_ROLE =\r\n        keccak256(\"CONTENT_CREATORS_MINTER_ROLE\");\r\n    bytes32 private constant BURN_ROLE = \r\n\t\tkeccak256(\"BURN_ROLE\");\r\n\r\n   \r\n\r\n\r\n\r\n    modifier hasBurnRole() {\r\n        require(\r\n            hasRole(BURN_ROLE, msg.sender),\r\n            \"Only the burn role can perform this action\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier hasEcosystemMinterRole() {\r\n        require(\r\n            hasRole(ECOSYSTEM_MINTER_ROLE, msg.sender),\r\n            \"Caller is not ecosystem minter\"\r\n        );\r\n        _;\r\n    }\r\n    modifier hasLiquidityMinterRole() {\r\n        require(\r\n            hasRole(LIQUIDITY_MINTER_ROLE, msg.sender),\r\n            \"Caller is not liquidity minter\"\r\n        );\r\n        _;\r\n    }\r\n    modifier hasModeratorRole() {\r\n        require(\r\n            hasRole(MOD_MINTER_ROLE, msg.sender),\r\n            \"Caller is not moderator\"\r\n        );\r\n        _;\r\n    }\r\n    modifier hasStakingRole() {\r\n        require(\r\n            hasRole(STAKING_MINTER_ROLE, msg.sender),\r\n            \"Caller is not staking\"\r\n        );\r\n        _;\r\n    }\r\n    modifier hasEventMinterRole() {\r\n        require(hasRole(EVENTS_MINTER_ROLE, msg.sender), \"Caller is not event\");\r\n        _;\r\n    }\r\n    modifier hasContentCreatorRole() {\r\n        require(\r\n            hasRole(CONTENT_CREATORS_MINTER_ROLE, msg.sender),\r\n            \"Caller is not content creator\"\r\n        );\r\n        _;\r\n    }\r\n\r\n\t/**\r\n\t\t@dev return all available roles\r\n\t**/\r\n    function getRoles()\r\n        public\r\n        pure\r\n        returns (\r\n            bytes32 EcosystemMinter,\r\n            bytes32 LiquidityMinter,\r\n            bytes32 ModMinter,\r\n            bytes32 StakingMinter,\r\n            bytes32 EventsMinter,\r\n            bytes32 ContentCreatorsMinter,\r\n            bytes32 BurnRole\r\n        )\r\n    {\r\n        EcosystemMinter = ECOSYSTEM_MINTER_ROLE;\r\n        LiquidityMinter = LIQUIDITY_MINTER_ROLE;\r\n        ModMinter = MOD_MINTER_ROLE;\r\n        StakingMinter = STAKING_MINTER_ROLE;\r\n        EventsMinter = EVENTS_MINTER_ROLE;\r\n        ContentCreatorsMinter = CONTENT_CREATORS_MINTER_ROLE;\r\n        BurnRole = BURN_ROLE;\r\n    }\r\n\r\n \r\n}\r\n\r\n// File: Token.sol\r\n\r\n\r\npragma solidity 0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ETER is\r\n    ERC20,\r\n    EterAccessControl,\r\n    ContentCreator,\r\n    Moderator,\r\n    Staking,\r\n    Event\r\n{\r\n    modifier notExceedMaximumSupply(uint256 _amount) {\r\n        uint256 nextSupply = totalMinted + _amount;\r\n        require(\r\n            nextSupply < MAX_SUPPLY,\r\n            \"The transaction exceed maximum supply\"\r\n        );\r\n        _;\r\n    }\r\n\r\n\r\n   \r\n    uint256 public constant MAX_SUPPLY = 30000000 ether;\r\n    \r\n\tuint256 public totalMinted = 0;\r\n    uint256 private constant MAX_TEAM_SUPPLY = 2670000 ether;\r\n\r\n    uint256 private constant MAX_PRIVATE_SALE_SELL = 1200000 ether;\r\n\r\n    uint256 private constant MAX_ECOSYSTEM_SUPPLY = 18000000 ether;\r\n\tuint256 private constant MAX_LIQUIDITY_SUPPLY = 6000000 ether;\r\n    uint256 public totalBurn = 0;\r\n\r\n   \t/*\r\n\t\tset all team members as administrators and mint private sell and team supply \r\n\t\tteam supply will have a vesting for 3 years\r\n    */\r\n    constructor(address CTO, address CEO, address INV1, address INV2) ERC20(\"Eterland\",\"ETER\")  EterAccessControl(4){\r\n\r\n\t\tuint256 initialMint = MAX_TEAM_SUPPLY + MAX_PRIVATE_SALE_SELL + MAX_ECOSYSTEM_SUPPLY + MAX_LIQUIDITY_SUPPLY;\r\n        //Mint team supply\r\n        _mint(msg.sender,initialMint);\r\n\t\ttotalMinted += initialMint;\r\n\r\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n        _setupRole(DEFAULT_ADMIN_ROLE, CEO);\r\n        _setupRole(DEFAULT_ADMIN_ROLE, CTO);\r\n\t\t_setupRole(DEFAULT_ADMIN_ROLE, INV1);\r\n\t\t_setupRole(DEFAULT_ADMIN_ROLE, INV2);\r\n    }\r\n\t\r\n\t/**\r\n     * @dev create amount of new tokens for the message sender from the \r\n\t moderator tokens\r\n\r\n\t \tRequirements:\r\n\t\t- the caller must have the `MOD_MINTER_ROLE`.\r\n\t\t- the amount must be less or equal than the MAX_DAILY_MINT for moderators \r\n\t\t- the amount must be less or equal than MAX_SUPPLY\r\n     */\r\n    function mintModerator(uint256 _amount)\r\n        public\r\n        hasModeratorRole\r\n        notExceedMaximumSupply(_amount)\r\n    {\r\n        require(msg.sender != address(0), \"cannot mint to the zero address\");\r\n        _incrementModeratorSupply(_amount);\r\n        _mint(msg.sender, _amount);\r\n        totalMinted += _amount;\r\n    }\r\n\r\n\t/**\r\n     * @dev create amount of new tokens for the message sender from the \r\n\t staking tokens\r\n\r\n\t \tRequirements:\r\n\t\t- the caller must have the `STAKING_MINTER_ROLE`.\r\n\t\t- the amount must be less or equal than the MAX_DAILY_MINT for staking \r\n\t\t- the amount must be less or equal than MAX_SUPPLY\r\n     */\r\n    function mintStaking(uint256 _amount)\r\n        public\r\n        hasStakingRole\r\n        notExceedMaximumSupply(_amount)\r\n    {\r\n        require(msg.sender != address(0), \"cannot mint to the zero address\");\r\n        _increaseTotalStakingMinted(_amount);\r\n        _mint(msg.sender, _amount);\r\n        totalMinted += _amount;\r\n    }\r\n\r\n\t/**\r\n     * @dev create amount of new tokens for the message sender from the \r\n\t event tokens\r\n\r\n\t \tRequirements:\r\n\t\t- the caller must have the `EVENTS_MINTER_ROLE`.\r\n\t\t- the amount must be less or equal than the MAX_DAILY_MINT for events \r\n\t\t- the amount must be less or equal than MAX_SUPPLY\r\n     */\r\n    function mintEvent(uint256 _amount)\r\n        public\r\n        hasEventMinterRole\r\n        notExceedMaximumSupply(_amount)\r\n    {\r\n        require(msg.sender != address(0), \"cannot mint to the zero address\");\r\n        _incrementEventSupply(_amount);\r\n        _mint(msg.sender, _amount);\r\n\t\ttotalMinted += _amount;\r\n    }\r\n\r\n\t/**\r\n     * @dev create amount of new tokens for the message sender from the \r\n\t content creator tokens\r\n\r\n\t \tRequirements:\r\n\t\t- the caller must have the `CONTENT_CREATORS_MINTER_ROLE`.\r\n\t\t- the amount must be less or equal than the MAX_DAILY_MINT for content creators \r\n\t\t- the amount must be less or equal than MAX_SUPPLY\r\n     */\r\n    function mintContentCreator(uint256 _amount)\r\n        public\r\n        hasContentCreatorRole\r\n        notExceedMaximumSupply(_amount)\r\n    {\r\n        require(msg.sender != address(0), \"cannot mint to the zero address\");\r\n        increaseTotalContentCreatorMinted(_amount);\r\n        _mint(msg.sender, _amount);\r\n        totalMinted += _amount;\r\n    }\r\n\r\n\t/**\r\n     * @dev\tburn amount of tokens from the message sender\r\n\r\n\t \tRequirements:\r\n\t\t- the caller must have the `BURN_ROLE`.\r\n     */\r\n    function burn(uint256 _amount) public hasBurnRole {\r\n\t\t\r\n        _burn(msg.sender, _amount);\r\n        totalBurn += _amount;\r\n        \r\n    }\r\n\r\n\tfunction _beforeTokenTransfer(address from,address  to,uint256 amount) \r\n\tinternal view override {\r\n\t   // if some user transfer his tokens to this contract will loss the funds so we prevent\r\n\t   require( to != address(this) );\r\n\t}\r\n    \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"CTO\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"CEO\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"INV1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"INV2\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isDenied\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isCompleted\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_votes\",\"type\":\"uint8\"}],\"name\":\"emergencyRecover\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"applyEmergencyRecover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isRevokeRequest\",\"type\":\"bool\"}],\"name\":\"changeEmergencyRecoverStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"createEmergencyRecover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRoles\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"EcosystemMinter\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"LiquidityMinter\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"ModMinter\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"StakingMinter\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"EventsMinter\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"ContentCreatorsMinter\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"BurnRole\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalContentCreatorMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalEventMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalModeratorMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStakingMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintContentCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintModerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ETER", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000991eaf2eae03d77ec564f280a97ad604442acd4f00000000000000000000000013133cac72faeeec3b13573b62431778f5aefb58000000000000000000000000bd8b0c1b69f1d4491a22c60c09babcfd76eb3174000000000000000000000000cbc8ca20a5ec408b30c008c5f5c2aa425618b194", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a83c42b2264e429a4b3b6372add9dff6c13936b9af7155870b0c68eb014eda7b"}