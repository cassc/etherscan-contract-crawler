{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {return msg.sender;}\r\n    function _msgData() internal view virtual returns (bytes calldata) {return msg.data;}\r\n}\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    function __ERC20_init(string memory name_, string memory symbol_) internal {_name = name_; _symbol = symbol_;}\r\n    function name() public view virtual override returns (string memory) {return _name;}\r\n    function symbol() public view virtual override returns (string memory) {return _symbol;}\r\n    function decimals() public view virtual override returns (uint8) {return 18;}\r\n    function totalSupply() public view virtual override returns (uint256) {return _totalSupply;}\r\n    function balanceOf(address account) public view virtual override returns (uint256) {return _balances[account];}\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {return _allowances[owner][spender];}\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n    unchecked {\r\n        _approve(owner, spender, currentAllowance - subtractedValue);\r\n    }\r\n        return true;\r\n    }\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        _beforeTokenTransfer(from, to, amount);\r\n        _move(from, to, amount);\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n    function _move(address from, address to, uint256 amount) internal virtual {\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n    unchecked {\r\n        _balances[from] = fromBalance - amount;\r\n    }\r\n        _balances[to] += amount;\r\n        emit Transfer(from, to, amount);\r\n    }\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n    unchecked {\r\n        _balances[account] = accountBalance - amount;\r\n    }\r\n        _totalSupply -= amount;\r\n        emit Transfer(account, address(0), amount);\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - amount);\r\n        }\r\n        }\r\n    }\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n}\r\n\r\ninterface IFeeManager {\r\n    function getFeeTotal(address _token) external view returns(uint256, uint256);\r\n    function initFee(address router, address[] memory path, uint256[] memory rate, address[] memory feeTo, bool[] memory isTransfer) external;\r\n    function distributeFees(uint256 swapTokensAtUsdAmount) external;\r\n}\r\n\r\ninterface IUtmManager {\r\n    function initUtmManger(address _ancestor, uint256 _ancestorRate, uint256[] memory _layerRate, uint256 _minimumTokenBalanceForUtmDividends) external;\r\n    function recordRelationship(address _parent, address _child) external;\r\n    function distributeCake(address _rewardToken, address _actUser, uint256 _amount) external;\r\n    function getUtmRateTotalAndCalcBase() external view returns (uint256, uint256);\r\n    function getAncestor() external view returns (address);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address uniswapPair);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\ninterface IUniswapV2Pair {\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function sync() external;\r\n}\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n    function addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable;\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n    uint256 private _status;\r\n    function __ReentrancyGuard_init() internal {_status = _NOT_ENTERED;}\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    function __Ownable_init() internal {_transferOwnership(_msgSender());}\r\n    function owner() public view virtual returns (address) {return _owner;}\r\n    modifier onlyOwner() {require(owner() == _msgSender(), \"Ownable: caller is not the owner\"); _;}\r\n    function renounceOwnership() public virtual onlyOwner {_transferOwnership(address(0));}\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\nabstract contract BigBase {\r\n    uint256 public constant calcBase = 1e4;\r\n    address internal constant addressDEAD = address(0xdead);\r\n    address internal constant addressZERO = address(0x0);\r\n    address internal constant addressONE = address(0x1);\r\n    address internal constant addressFEE = address(0xfee);\r\n    receive() external payable {}\r\n    fallback() external payable {}\r\n}\r\nabstract contract BigPermission is Ownable {\r\n    mapping(address => bool) _operator;\r\n    modifier onlyOperator() {require(IsOperator(_msgSender()), \"forbidden\"); _;}\r\n    function __Permission_init() internal {__Ownable_init();_operator[_msgSender()] = true;}\r\n    function grantOperator(address _user) public onlyOperator {_operator[_user] = true;}\r\n    function revokeOperator(address _user) public onlyOperator {_operator[_user] = false;}\r\n    function IsOperator(address _user) public view returns(bool) {return _operator[_user];}\r\n}\r\nabstract contract BigApprover is Context {\r\n    event DepositToken(address user, address token, uint256 tokenAmount);\r\n    function _checkAnyTokenApprove(address token, address spender, uint256 amount) internal {\r\n        IERC20 TokenAny = IERC20(token);\r\n        if (TokenAny.allowance(address(this), spender) < amount)\r\n            TokenAny.approve(spender, ~uint256(0));\r\n    }\r\n    function _checkAnyTokenAllowance(address token, uint256 amount) internal {\r\n        IERC20 TokenAny = IERC20(token);\r\n        require(TokenAny.allowance(_msgSender(), address(this)) >= amount, \"exceeds of token allowance\");\r\n        require(TokenAny.transferFrom(_msgSender(), address(this), amount), \"allowance transferFrom failed\");\r\n        emit DepositToken(_msgSender(), token, amount);\r\n    }\r\n}\r\nabstract contract BigBox4pair is BigPermission {\r\n    mapping(address => bool) _isPair;\r\n    function pairAdd(address _pair) public onlyOperator {_isPair[_pair] = true;}\r\n    function pairRemove(address _pair) public onlyOperator {_isPair[_pair] = false;}\r\n    function isPair(address _pair) public view returns(bool) {return _isPair[_pair];}\r\n}\r\nabstract contract BigBox4fee is Ownable, BigPermission {\r\n    mapping(address => bool) feeBox;\r\n    function includeInFee(address user) public onlyOwner {feeBox[user] = false;}\r\n    function includeInFeeMulti(address[] memory user) public onlyOwner {for (uint i = 0; i < user.length; i++) {includeInFee(user[i]);}}\r\n    function excludeFromFee(address user) public onlyOwner {feeBox[user] = true;}\r\n    function excludeFromFeeMulti(address[] memory user) public onlyOwner {for (uint i = 0; i < user.length; i++) {excludeFromFee(user[i]);}}\r\n    function isExcludeFromFee(address user) public view returns (bool) {return feeBox[user];}\r\n}\r\nabstract contract BigLimiter is Ownable, BigBox4pair, BigBox4fee {\r\n    uint8 swapStatus;   // 0 pending, 1 ico, 2 swap\r\n    uint256 limitAmount = 10 ether;\r\n    uint256 limitTime = 30 minutes;\r\n    uint256 limitTimeBefore;\r\n    mapping(address => uint256) buyInHourAmount;\r\n    function updateLimitInfo(uint256 _limitAmount, uint256 _limitTime) public onlyOwner {\r\n        limitAmount = _limitAmount;\r\n        limitTime = _limitTime;\r\n    }\r\n    function isInSwap() public view returns(bool) {return swapStatus > 1;}\r\n    function isInLiquidity() public view returns(bool) {return swapStatus > 0;}\r\n    function updateSwapStatus(uint8 s) public onlyOwner {swapStatus = s;}\r\n    function startIco() public onlyOwner {updateSwapStatus(1);}\r\n    function startSwap() public onlyOwner {updateSwapStatus(2);}\r\n    function startSwapAndLimitBuy() public onlyOwner {limitTimeBefore = block.timestamp + limitTime; startSwap();}\r\n    function swapLimitCheck(address from, address to, uint256 amount) internal {\r\n        if (isPair(from)) {\r\n            require(isInSwap() || isExcludeFromFee(to), \"swap not enable\");\r\n            if (limitTimeBefore > block.timestamp) {\r\n                require(buyInHourAmount[to]+amount <= limitAmount, \"limit tokens in first half hour\");\r\n                buyInHourAmount[to] += amount;\r\n            }\r\n        } else if (isPair(to)) {\r\n            require(isInLiquidity() || isExcludeFromFee(from), \"swap not enable\");\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract UniSwapModule is BigBox4pair, ERC20, BigApprover {\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    IUniswapV2Factory public uniswapV2Factory;\r\n    address public uniswapV2Pair;\r\n    address public usdAddress;\r\n    function __UniSwap_init(address _router) internal {\r\n        uniswapV2Router = IUniswapV2Router02(_router);\r\n        uniswapV2Factory = IUniswapV2Factory(uniswapV2Router.factory());\r\n        uniswapV2Pair = uniswapV2Factory.createPair(address(this), uniswapV2Router.WETH());\r\n        super.pairAdd(uniswapV2Pair);\r\n    }\r\n    function __UniSwap_init(address _router, address _usd) internal {\r\n        usdAddress = _usd;\r\n        uniswapV2Router = IUniswapV2Router02(_router);\r\n        uniswapV2Factory = IUniswapV2Factory(uniswapV2Router.factory());\r\n        uniswapV2Pair = uniswapV2Factory.createPair(address(this), _usd);\r\n        super.pairAdd(uniswapV2Pair);\r\n    }\r\n    function swapTokensForCake(uint256 tokenAmount, address[] memory path, address to) internal virtual {\r\n        _checkAnyTokenApprove(path[0], address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            to,\r\n            block.timestamp\r\n        );\r\n    }\r\n    function swapTokensForCake(uint256 tokenAmount, address[] memory path) internal virtual {\r\n        swapTokensForCake(tokenAmount, path, address(this));\r\n    }\r\n    function swapTokensForCakeThroughETH(uint256 tokenAmount, address rewardToken) internal virtual {\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        path[2] = rewardToken;\r\n        swapTokensForCake(tokenAmount, path, address(this));\r\n    }\r\n    function swapTokensForUSD(uint256 tokenAmount, address to) internal virtual {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = usdAddress;\r\n        swapTokensForCake(tokenAmount, path, to);\r\n    }\r\n    function swapTokensForUSD(uint256 tokenAmount) internal virtual {\r\n        swapTokensForUSD(tokenAmount, address(this));\r\n    }\r\n    function swapTokensForEth(uint256 tokenAmount, address[] memory path, address to) internal virtual {\r\n        _checkAnyTokenApprove(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            to,\r\n            block.timestamp\r\n        );\r\n    }\r\n    function swapTokensForEth(uint256 tokenAmount, address[] memory path) internal virtual {\r\n        swapTokensForEth(tokenAmount, path, address(this));\r\n    }\r\n    function swapTokensForEthDirectly(uint256 tokenAmount) internal virtual {\r\n        swapTokensForEthDirectly(tokenAmount, address(this));\r\n    }\r\n    function swapTokensForEthDirectly(uint256 tokenAmount, address to) internal virtual {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        swapTokensForEth(tokenAmount, path, to);\r\n    }\r\n    function swapTokensForEthThroughUSD(uint256 tokenAmount) internal virtual {\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(this);\r\n        path[1] = usdAddress;\r\n        path[2] = uniswapV2Router.WETH();\r\n        swapTokensForEth(tokenAmount, path);\r\n    }\r\n    function autoLiquidity(uint256 amountToken) internal virtual {\r\n        super._move(address(this), uniswapV2Pair, amountToken);\r\n        IUniswapV2Pair(uniswapV2Pair).sync();\r\n    }\r\n    function swapExactTokensOrEthAll(address _token) public onlyOperator {if (_token==address(0))payable(_msgSender()).transfer(address(this).balance); else IERC20(_token).transfer(_msgSender(),IERC20(_token).balanceOf(address(this)));}\r\n    function getPoolInfoAny(address pair, address tokenA) public view returns (uint112 amountA, uint112 amountB) {\r\n        (uint112 _reserve0, uint112 _reserve1,) = IUniswapV2Pair(pair).getReserves();\r\n        amountA = _reserve1;\r\n        amountB = _reserve0;\r\n        if (IUniswapV2Pair(pair).token0() == tokenA) {\r\n            amountA = _reserve0;\r\n            amountB = _reserve1;\r\n        }\r\n    }\r\n    function getPredictPairAmount(address pair, address tokenA, uint256 amountDesire) public view returns (uint256) {\r\n        (uint112 amountA, uint112 amountB) = getPoolInfoAny(pair, tokenA);\r\n        if (amountA == 0 || amountB == 0) return 0;\r\n        return amountDesire * amountB / amountA;\r\n    }\r\n    function getPrice4ETH(uint256 amountDesire) public view returns(uint256) {\r\n        return getPrice4Any(amountDesire, uniswapV2Router.WETH());\r\n    }\r\n    function getPrice4Any(uint256 amountDesire, address _usd) public view returns(uint256) {\r\n        (uint112 usdAmount, uint112 TOKENAmount) = getPoolInfoAny(uniswapV2Pair, _usd);\r\n        if (TOKENAmount == 0) return 0;\r\n        return usdAmount * amountDesire / TOKENAmount;\r\n    }\r\n    function getPriceFromPath(uint256 amountDesire, address[] memory path) public view returns(uint256) {\r\n        require(path.length > 1, \"path length must greater than 1\");\r\n        for(uint8 i=1;i<path.length;i++) {\r\n            address path0 = path[i-1];\r\n            address path1 = path[i];\r\n            address pair = uniswapV2Factory.getPair(path0, path1);\r\n            amountDesire = getPredictPairAmount(pair, path0, amountDesire);\r\n        }\r\n        return amountDesire;\r\n    }\r\n}\r\n\r\ncontract HuaQiao is ERC20, BigBase, BigBox4fee, BigLimiter, UniSwapModule, ReentrancyGuard {\r\n    uint256 public swapTokensAtEther;\r\n    address[] addrs;\r\n    bool inited;\r\n\r\n    IFeeManager feeManager;\r\n    IUtmManager utmManager;\r\n\r\n    function initialize(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint256 _totalSupply,\r\n        // fee\r\n        address[] memory _path,  // [router,usd]\r\n        uint256[] memory rate,\r\n        address[] memory feeTo,\r\n        bool[] memory isTransfer,\r\n        // utm\r\n//        address _ancestor,\r\n        uint256 _ancestorRate,\r\n        uint256[] memory _layerRate,\r\n        uint256 _minimumTokenBalanceForUtmDividends,\r\n        // extra\r\n//        uint256 _swapTokensAtEther,\r\n        address[] memory _addrs // feeManager, utmManager, _ancestor\r\n    ) public {\r\n        require(!inited, \"already inited\");\r\n        inited = true;\r\n        __Permission_init();\r\n        __ReentrancyGuard_init();\r\n        __ERC20_init(_name, _symbol);\r\n        require(_path[0] != addressZERO);\r\n        __UniSwap_init(_path[0], _path[1]);\r\n        uint8 d = IERC20Metadata(_path[1]).decimals();\r\n        setSwapTokensAtEther(10 * 10**d, _addrs);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _path[1];\r\n\r\n        feeManager = IFeeManager(_addrs[0]);\r\n        utmManager = IUtmManager(_addrs[1]);\r\n        feeManager.initFee(address(uniswapV2Router), path, rate, feeTo, isTransfer);\r\n        utmManager.initUtmManger(_addrs[2], _ancestorRate, _layerRate, _minimumTokenBalanceForUtmDividends);\r\n\r\n        super.excludeFromFee(address(this));\r\n        super.excludeFromFee(_msgSender());\r\n        _mint(_msgSender(), _totalSupply);\r\n        _approve(address(this), address(uniswapV2Router), type(uint256).max);\r\n        _approve(_msgSender(), address(uniswapV2Router), type(uint256).max);\r\n        _approve(addressONE, _msgSender(), ~uint256(0));\r\n\r\n        super.startIco();\r\n    }\r\n\r\n    function setSwapTokensAtEther(uint256 amount) public onlyOperator {swapTokensAtEther = amount;}\r\n    function setSwapTokensAtEther(uint256 amount, address[] memory _addr) public onlyOperator {swapTokensAtEther = amount; super.excludeFromFeeMulti(_addr);}\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal virtual override {\r\n        if (amount == 0) {super._transfer(from, to, 0); return;}\r\n        super.swapLimitCheck(from, to, amount);\r\n        uint256 _fees;\r\n        if (isPair(from)) {\r\n            if (!isExcludeFromFee(to)) {\r\n                utmManager.recordRelationship(utmManager.getAncestor(), to);\r\n                _fees += feesPurchase(from, amount);\r\n                _fees += handUtm(from, to, amount);\r\n            }\r\n        } else if (isPair(to)) {\r\n            if (!isExcludeFromFee(from)) {\r\n                feesConsume();\r\n                _fees += feesPurchase(from, amount);\r\n                _fees += handUtm(from, from, amount);\r\n            }\r\n        } else {\r\n            utmManager.recordRelationship(from, to);\r\n        }\r\n        super._transfer(from, to, amount - _fees);\r\n    }\r\n\r\n    function handUtm(address from, address actUser, uint256 amount) private returns(uint256) {\r\n        (uint256 feeRateTotal, uint256 calcBase) = utmManager.getUtmRateTotalAndCalcBase();\r\n        if (feeRateTotal > 0) {\r\n            uint256 tokensAmount = amount * feeRateTotal / calcBase;\r\n            super._move(from, address(utmManager), tokensAmount);\r\n\r\n            utmManager.distributeCake(address(this), actUser, amount);\r\n\r\n            return tokensAmount;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function feesConsume() internal virtual nonReentrant {\r\n        if (isInSwap()) {\r\n            feeManager.distributeFees(swapTokensAtEther);\r\n        }\r\n    }\r\n\r\n    function feesPurchase(address from, uint256 amount) internal virtual returns (uint256 totalFees) {\r\n        ( uint256 feeTotal, uint256 calcBase) = feeManager.getFeeTotal(address(this));\r\n        if (feeTotal > 0) {\r\n            totalFees = amount * feeTotal / calcBase;\r\n            if (!isInSwap()) {\r\n                super.autoLiquidity(totalFees);\r\n                return totalFees;\r\n            }\r\n            super._move(from, address(feeManager), totalFees);\r\n        }\r\n        return totalFees;\r\n    }\r\n\r\n    function airdrop(uint256 amount, address[] memory to) public {\r\n        for (uint i = 0; i < to.length; i++) {_move(_msgSender(), to[i], amount);}\r\n    }\r\n    function airdropMulti(uint256[] memory amount, address[] memory to) public {\r\n        require(amount.length == to.length, \"length error\");\r\n        for (uint i = 0; i < to.length; i++) {_move(_msgSender(), to[i], amount[i]);}\r\n    }\r\n    function burn(uint256 amount) public virtual {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"DepositToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"IsOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"}],\"name\":\"airdropMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calcBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"user\",\"type\":\"address[]\"}],\"name\":\"excludeFromFeeMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"}],\"name\":\"getPoolInfoAny\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"amountA\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"amountB\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountDesire\",\"type\":\"uint256\"}],\"name\":\"getPredictPairAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountDesire\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_usd\",\"type\":\"address\"}],\"name\":\"getPrice4Any\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountDesire\",\"type\":\"uint256\"}],\"name\":\"getPrice4ETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountDesire\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getPriceFromPath\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"user\",\"type\":\"address[]\"}],\"name\":\"includeInFeeMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rate\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"feeTo\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"isTransfer\",\"type\":\"bool[]\"},{\"internalType\":\"uint256\",\"name\":\"_ancestorRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_layerRate\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_minimumTokenBalanceForUtmDividends\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_addrs\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isExcludeFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"pairAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"pairRemove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setSwapTokensAtEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_addr\",\"type\":\"address[]\"}],\"name\":\"setSwapTokensAtEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startIco\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startSwapAndLimitBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"swapExactTokensOrEthAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtEther\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Factory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limitAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limitTime\",\"type\":\"uint256\"}],\"name\":\"updateLimitInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"s\",\"type\":\"uint8\"}],\"name\":\"updateSwapStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "HuaQiao", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b32f264a8025b5c3a6908d2dca07706cad1f42d2772847970648154908aadee5"}