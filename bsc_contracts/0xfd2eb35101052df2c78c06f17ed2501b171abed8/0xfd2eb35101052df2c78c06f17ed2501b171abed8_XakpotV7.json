{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\"\r\n    },\r\n    \"contracts/xakpotV7.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\ninterface BEP20Token\\r\\n{\\r\\n    function mintTokens(address receipient, uint256 tokenAmount) external returns(bool);\\r\\n    function transfer(address _to, uint256 _value) external returns (bool success);\\r\\n    function balanceOf(address user) external view returns(uint256);\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function maxsupply() external view returns (uint256);\\r\\n    function transferFrom(address _from, address _to, uint256 _value) external returns(bool);\\r\\n    function burn_internal(uint256 _value, address _to) external returns (bool);\\r\\n}\\r\\n\\r\\ncontract XakpotV7 {\\r\\n    BEP20Token public rewardToken;\\r\\n\\r\\n    AggregatorV3Interface internal priceFeed;\\r\\n    using SafeMath for uint;\\r\\n    using SafeMath for uint256;\\r\\n    struct User{\\r\\n        address stockiest;\\r\\n        string userType;\\r\\n        uint[] gameIDs;\\r\\n        uint comission;\\r\\n        uint withdrawan;\\r\\n        bool isRegisterd;\\r\\n        address sponsor;\\r\\n        bool isstockiest;\\r\\n        uint registerAmount;\\r\\n        uint userSide;\\r\\n    }\\r\\n\\r\\n    struct Game{\\r\\n        uint gameID;\\r\\n        uint gameTotalInvest;\\r\\n        uint winingNo;\\r\\n        bool numberPicked;\\r\\n        uint endtime;\\r\\n    }\\r\\n\\r\\n    struct Distributor{\\r\\n        DistributorDeposit[] depositInfo;\\r\\n        uint[10] dnumbers;\\r\\n    }\\r\\n\\r\\n    struct DistributorDeposit{\\r\\n        uint time;\\r\\n        uint totalAmountBNB;\\r\\n        uint totalAmountToken;\\r\\n    }\\r\\n   \\r\\n    string[3] public userTypes;\\r\\n    address payable public admin;\\r\\n    address public creator;\\r\\n    address payable public defaultStockiest;\\r\\n    bool private IsInitinalized;\\r\\n    uint public time_stamp;\\r\\n    uint public subRefundTime;\\r\\n    uint public lastDistribution;\\r\\n    uint public tokenPriceUSD;\\r\\n    uint private contractFee;\\r\\n    uint private baseDivider;\\r\\n    uint public gameNo;\\r\\n    bool private drawingPhase;\\r\\n    uint public totalSupply;\\r\\n    uint[10] number;\\r\\n    uint public min_amount;\\r\\n    uint public min_amountdistributor;\\r\\n\\r\\n\\r\\n    mapping(address => User) public users;\\r\\n    mapping(uint => mapping(address => uint[10])) public userHistory;\\r\\n    mapping(uint => mapping(address => uint[10])) public distributorHistory;\\r\\n    mapping(uint => mapping(address => uint[10])) public distributorOldHistory;\\r\\n    mapping(uint => mapping(address => uint[])) public winings;\\r\\n    mapping (uint =>address[] )public distributorAddress;\\r\\n    mapping(uint => mapping(address =>bool)) public claimInfo;\\r\\n    mapping(uint => mapping(address => uint)) public commision;\\r\\n    mapping(uint => Game) public games;\\r\\n\\r\\n\\r\\n    modifier adminOnly() {\\r\\n        require(msg.sender == admin, \\\"admin: wut?\\\");\\r\\n        _;\\r\\n    }\\r\\n    modifier creatorOnly() {\\r\\n        require(msg.sender == creator, \\\"admin: wut?\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyDistributor() {\\r\\n        string memory a = users[msg.sender].userType;\\r\\n        string memory b = userTypes[1];\\r\\n        require(keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\\r\\n        _;\\r\\n    }\\r\\n    modifier onlyStockiest() {\\r\\n            string memory a = users[msg.sender].userType;\\r\\n            string memory b = userTypes[2];\\r\\n            require(keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\\r\\n            _;\\r\\n        }\\r\\n\\r\\n    uint public tokenPool;\\r\\n    uint public buy_sell_per;\\r\\n    \\r\\nfunction initialize(address payable _admin,address payable _defaultStockiest,BEP20Token _token,address _creator) public {\\r\\n         require (IsInitinalized == false,\\\"Already Started\\\");\\r\\n         userTypes = ['player','distributor','stockiest'];\\r\\n         time_stamp =  11 hours + 58 minutes;\\r\\n         subRefundTime =  20 minutes;\\r\\n         lastDistribution = block.timestamp;\\r\\n         priceFeed = AggregatorV3Interface(0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE);\\r\\n         admin = _admin;\\r\\n         creator = _creator;\\r\\n         defaultStockiest = _defaultStockiest;\\r\\n         users[_defaultStockiest].userType =userTypes[2];\\r\\n         users[_defaultStockiest].isRegisterd = true;\\r\\n         tokenPriceUSD = 1000000;\\r\\n         baseDivider = 1000;\\r\\n         gameNo = 1;\\r\\n         rewardToken = _token;\\r\\n         min_amount = 10e8;\\r\\n         min_amountdistributor = 100e8;\\r\\n         IsInitinalized = true;\\r\\n\\r\\n}\\r\\n\\r\\nfunction register(uint _index,address _stockiest,address _sponsor,uint side) public payable returns(bool){\\r\\n    User storage user = users[msg.sender];\\r\\n    require(_index< userTypes.length,\\\"You select a wrong package\\\");\\r\\n    require(user.isRegisterd==false,\\\"already register\\\");\\r\\n    if(_index == 1){\\r\\n        string memory a = users[_stockiest].userType;\\r\\n        string memory b = userTypes[2];\\r\\n        require(keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))),\\\"Invalid stockiest\\\");\\r\\n        user.userType = userTypes[_index];\\r\\n        user.stockiest = _stockiest;\\r\\n    }\\r\\n    else {\\r\\n        if(_index==2){\\r\\n          require(uint256(TotalusdPrice(int(msg.value))) >=99*1e8, \\\"USD do not  match\\\");\\r\\n          require((users[_sponsor].isstockiest ==true && _sponsor != msg.sender) || admin == msg.sender,  \\\"No upline found\\\");\\r\\n          if (user.sponsor == address(0) && admin != msg.sender) {\\r\\n\\t\\t\\t        user.sponsor = _sponsor;\\r\\n            }\\r\\n          user.isstockiest = true;\\r\\n          user.registerAmount += 99*1e8;\\r\\n          user.userSide = side;\\r\\n        }\\r\\n         user.userType = userTypes[_index];\\r\\n    }\\r\\n    user.isRegisterd = true;\\r\\n    return true;\\r\\n\\r\\n}\\r\\n\\r\\nfunction withdrawbyAdmin(address _user,uint _usdamount) public {\\r\\n    require(creator == msg.sender,\\\"Permission denied\\\");\\r\\n    uint bnb = getCalculatedBnbRecieved(_usdamount);\\r\\n\\r\\n    payable(_user).transfer(bnb);  \\r\\n}\\r\\n\\r\\nfunction changeAdmin(address payable _admin) public creatorOnly {\\r\\n    admin = _admin;\\r\\n}\\r\\n\\r\\n\\r\\nfunction makeDistributor(address _user) public onlyStockiest returns(bool) {\\r\\n    string memory c = userTypes[0];\\r\\n    string memory d = users[_user].userType;\\r\\n    require(keccak256(abi.encodePacked((d))) == keccak256(abi.encodePacked((c))),\\\"User  need to register first as player\\\");\\r\\n    users[_user].userType = userTypes[1];\\r\\n    users[_user].stockiest = msg.sender;\\r\\n    return true;\\r\\n}\\r\\n\\r\\nfunction buy(uint _value) payable public onlyDistributor returns(bool){\\r\\n    require(block.timestamp<= lastDistribution.add(time_stamp),\\\"time is over\\\");\\r\\n    require(uint256(TotalusdPrice(int(msg.value))) >=_value, \\\"USD do not  match\\\");\\r\\n    require(_value >=min_amountdistributor, \\\"Min amount is 100 USD\\\");\\r\\n    uint token = _value;\\r\\n    uint amount = token.div(10);\\r\\n    uint count = distributorHistory[gameNo][msg.sender].length;\\r\\n    for(uint i=0; i<count;i++){\\r\\n        uint bal = distributorHistory[gameNo][msg.sender][i];\\r\\n        bal = bal.add(amount);\\r\\n        distributorHistory[gameNo][msg.sender][i] = bal;\\r\\n    }\\r\\n    games[gameNo].gameID = gameNo;\\r\\n    games[gameNo].gameTotalInvest = games[gameNo].gameTotalInvest.add(token);\\r\\n    bool check = findInArray(msg.sender);\\r\\n    if(check == false){\\r\\n    users[msg.sender].gameIDs.push(gameNo);\\r\\n    distributorAddress[gameNo].push(msg.sender);\\r\\n    claimInfo[gameNo][msg.sender] = false;\\r\\n    }\\r\\n    totalSupply = totalSupply.add(token);\\r\\n    uint comission1 = token.mul(10).div(100);\\r\\n    commision[gameNo][msg.sender] = commision[gameNo][msg.sender].add(comission1);\\r\\n    address upline = users[msg.sender].stockiest;\\r\\n    uint comission2 = token.mul(1).div(100);\\r\\n    commision[gameNo][upline] = commision[gameNo][upline].add(comission2);\\r\\n    \\r\\n    \\r\\n    return true;\\r\\n}\\r\\n\\r\\nfunction refund() public onlyDistributor returns(bool){\\r\\n    require(block.timestamp <= lastDistribution.add(time_stamp).sub(subRefundTime),\\\"refund portal is closed\\\");\\r\\n    uint[10] memory _dnumbers = distributorHistory[gameNo][msg.sender];\\r\\n    uint minAmount = min(_dnumbers);\\r\\n    require(minAmount > 0,\\\"No amount to refund\\\");\\r\\n    for(uint i=0; i<distributorHistory[gameNo][msg.sender].length;i++){\\r\\n        uint bal = distributorHistory[gameNo][msg.sender][i];\\r\\n        bal = bal.sub(minAmount);\\r\\n        distributorHistory[gameNo][msg.sender][i] = bal;\\r\\n    }\\r\\n    uint refundtoken = minAmount.mul(10);\\r\\n    games[gameNo].gameTotalInvest = games[gameNo].gameTotalInvest.sub(refundtoken);\\r\\n    totalSupply = totalSupply.sub(refundtoken);\\r\\n    uint comission1 = refundtoken.mul(10).div(100);\\r\\n    commision[gameNo][msg.sender] = commision[gameNo][msg.sender].sub(comission1);\\r\\n    address upline = users[msg.sender].stockiest;\\r\\n    uint comission2 = refundtoken.mul(1).div(100);\\r\\n    commision[gameNo][upline] = commision[gameNo][upline].sub(comission2);\\r\\n    uint refundAmountBNB = calculateBnbReceived(refundtoken);\\r\\n    payable(msg.sender).transfer(refundAmountBNB);\\r\\n    return true;\\r\\n\\r\\n\\r\\n}\\r\\n\\r\\nfunction min(uint256[10] memory numbers) private pure returns (uint256) {\\r\\n     require(numbers.length > 0); // throw an exception if the condition is not met\\r\\n        uint256 minNumber; // default 0, the lowest value of `uint256`\\r\\n\\r\\n        for (uint256 i = 0; i < numbers.length; i++) {\\r\\n           if(i==0){\\r\\n                if (minNumber <= numbers[i]) {\\r\\n                    minNumber = numbers[i];\\r\\n                }\\r\\n           }else if (minNumber > numbers[i]){\\r\\n                    minNumber = numbers[i]; \\r\\n                } \\r\\n        }\\r\\n\\r\\n        return minNumber;\\r\\n}\\r\\nfunction playerBuy(address _distributer, uint _index,uint count) payable public returns(bool){\\r\\n    string memory a = users[msg.sender].userType;\\r\\n    string memory b = userTypes[1];\\r\\n    require(keccak256(abi.encodePacked((a))) != keccak256(abi.encodePacked((b))),\\\"Distributor can't buy\\\");\\r\\n    require(users[msg.sender].isRegisterd == true,\\\"Register First\\\");\\r\\n    require(block.timestamp<= lastDistribution.add(time_stamp),\\\"time is over\\\");\\r\\n    uint amount = distributorHistory[gameNo][_distributer][_index];\\r\\n    uint token =min_amount.mul(count);\\r\\n    require(uint256(TotalusdPrice(int(msg.value))) >= token, 'required min 10 USD!');\\r\\n    require(token<=amount,\\\"Distributor don't have funds\\\" );\\r\\n    userHistory[gameNo][msg.sender][_index] = userHistory[gameNo][msg.sender][_index].add(token); \\r\\n    distributorHistory[gameNo][_distributer][_index] = distributorHistory[gameNo][_distributer][_index].sub(token);\\r\\n    bool check = findInArray(msg.sender);\\r\\n    if(check == false ){\\r\\n        users[msg.sender].gameIDs.push(gameNo);\\r\\n        claimInfo[gameNo][msg.sender] = false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\n\\r\\nfunction claimReward(uint _gameID) public returns(bool) {\\r\\nrequire(_gameID != gameNo,\\\"game is currently in progress\\\");\\r\\nrequire(claimInfo[_gameID][msg.sender] == false, \\\"You already Claim Your Reward\\\");\\r\\n    uint amount = rewardInfo(msg.sender,_gameID);\\r\\n    uint withdrawn = calculateBnbReceived(amount);\\r\\n    require(amount != 0 , \\\"You don't Win any amount\\\");\\r\\n    \\r\\n    payable(msg.sender).transfer(withdrawn);\\r\\n    claimInfo[_gameID][msg.sender] = true;\\r\\n    \\r\\n    return true;\\r\\n \\r\\n}\\r\\n\\r\\nfunction rewardInfo(address _user,uint _gameID) public view returns(uint _winingAmount){\\r\\n    string memory a = users[_user].userType;\\r\\n    string memory b = userTypes[1];\\r\\n    if(_gameID != gameNo){\\r\\n        if((keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))))){\\r\\n            for(uint i=0; i<10;i++){\\r\\n                 if(i==games[_gameID].winingNo){\\r\\n                    uint bal = distributorHistory[_gameID][_user][i];\\r\\n                    return _winingAmount = (bal.mul(8));\\r\\n                }\\r\\n            }\\r\\n        } else{ \\r\\n            for(uint j=0; j<10;j++){\\r\\n                if(j==games[_gameID].winingNo){\\r\\n                    uint bal = userHistory[_gameID][_user][j];\\r\\n                    return _winingAmount = (bal.mul(8));\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nfunction withdraw() public returns(bool){\\r\\n    uint amount = getCommison(msg.sender);\\r\\n    require(amount > 0,\\\"No Funds to withdraw\\\");\\r\\n    users[msg.sender].withdrawan =  users[msg.sender].withdrawan.add(amount);\\r\\n    uint withdrawAmount = calculateBnbReceived(amount);\\r\\n    payable(msg.sender).transfer(withdrawAmount);\\r\\n    return true;\\r\\n\\r\\n}\\r\\n\\r\\nfunction getCommison(address _user) public view returns(uint){\\r\\n    uint count = users[_user].gameIDs.length;\\r\\n    uint _amount;\\r\\n    for(uint i=0;i<count;i++){\\r\\n      uint id = users[_user].gameIDs[i];\\r\\n      if(id==gameNo){\\r\\n        break;\\r\\n      }\\r\\n    uint bal = commision[id][_user];\\r\\n    _amount = _amount.add(bal);\\r\\n\\r\\n    }\\r\\n    uint withdrawAmount = _amount.sub(users[_user].withdrawan);\\r\\n    return withdrawAmount;\\r\\n     \\r\\n}\\r\\n\\r\\nfunction reset() external creatorOnly {\\r\\n     require(block.timestamp >= lastDistribution.add(time_stamp),\\\"game is not end yet\\\");\\r\\n        pickWiningNo();\\r\\n        uint amount = games[gameNo].gameTotalInvest;\\r\\n        if(amount > 0){\\r\\n        uint adminFee = amount.mul(7).div(100);\\r\\n        uint adminFeeBNB = calculateBnbReceived(adminFee);\\r\\n        uint newAmount = amount.mul(2).div(100);\\r\\n        tokenPool = tokenPool.add(newAmount);\\r\\n        newAmount = newAmount*1e2;\\r\\n        uint _totalSupply = rewardToken.totalSupply();\\r\\n        if(_totalSupply>0){\\r\\n        uint per = (newAmount/_totalSupply).mul(100);\\r\\n        per = per/1e8;\\r\\n        uint tokenIncrement = tokenPriceUSD.mul(per).div(10000);\\r\\n        tokenPriceUSD = tokenPriceUSD.add(tokenIncrement);\\r\\n        }\\r\\n        admin.transfer(adminFeeBNB);\\r\\n        }\\r\\n    \\r\\n        gameNo = gameNo.add(1);\\r\\n        lastDistribution = block.timestamp;\\r\\n        drawingPhase = false;\\r\\n        // lastDrawTimestamp = block.timestamp;\\r\\n       \\r\\n    }\\r\\n\\r\\nfunction calculateBnbReceived(uint _token) public view returns(uint ){\\r\\n        uint tokenInUsd = _token;\\r\\n        uint bnbprice = getCalculatedBnbRecieved(tokenInUsd);\\r\\n        return bnbprice;\\r\\n    }\\r\\n\\r\\nfunction pickWiningNo() internal{\\r\\n    require(block.timestamp >= lastDistribution.add(time_stamp),\\\"game is not end yet\\\");\\r\\n    require( games[gameNo].numberPicked == false, \\\"number is picked already\\\");\\r\\n    uint index = random() % 10;\\r\\n    games[gameNo].winingNo = index;\\r\\n    games[gameNo].endtime = block.timestamp;\\r\\n    games[gameNo].numberPicked = true;\\r\\n        \\r\\n}\\r\\nfunction random() private view returns (uint) {\\r\\n        return uint(keccak256(abi.encodePacked(block.difficulty, block.timestamp,number.length)));\\r\\n    }\\r\\n\\r\\nfunction findInArray(address _user) public view returns (bool){\\r\\n            if(users[_user].gameIDs.length > 0){\\r\\n                for(uint i = 0 ; i<users[_user].gameIDs.length;i++){\\r\\n                    uint count = users[_user].gameIDs[i];\\r\\n                    if(count==gameNo){\\r\\n                        return true;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n\\r\\n        return false;\\r\\n}\\r\\n\\r\\nfunction getDistributorData(address _user,uint _gameid) public view returns(uint[10] memory _numbers){\\r\\n      _numbers =   distributorHistory[_gameid][_user];\\r\\n      return _numbers;\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\nfunction getLatestPrice() public view returns (int) {\\r\\n    (\\r\\n        /* uint80 roundID */,\\r\\n        int price,\\r\\n        /*uint startedAt */,\\r\\n        /*uint timeStamp*/,\\r\\n        /* uint80 answeredInRound*/\\r\\n    ) = priceFeed.latestRoundData();\\r\\n    return price;\\r\\n}\\r\\n\\r\\nfunction TotalusdPrice(int _amount) public view returns (int) {\\r\\n    int usdt = getLatestPrice();\\r\\n    return (usdt * _amount)/1e18;\\r\\n}\\r\\n\\r\\nfunction getCalculatedBnbRecieved(uint _amount) public view returns(uint) {\\r\\n    uint usdt = uint(getLatestPrice());\\r\\n    uint recieved_bnb = (_amount*1e18/usdt*1e18)/1e18;\\r\\n    return recieved_bnb;\\r\\n    }\\r\\n\\r\\nfunction getshowInfo(address _user,uint _gameid) public view returns(uint[10] memory _numbers){\\r\\n    string memory a = users[_user].userType;\\r\\n    string memory b = userTypes[1];\\r\\n    if((keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))))){\\r\\n      _numbers  = distributorHistory[_gameid][_user];\\r\\n    }else{\\r\\n      _numbers  = userHistory[_gameid][_user];\\r\\n    }\\r\\n    return _numbers;\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\nfunction getUserData(address _user,uint _gameid) public view returns(uint[10] memory _numbers){\\r\\n      _numbers =   userHistory[_gameid][_user];\\r\\n      return _numbers;\\r\\n}\\r\\n\\r\\n\\r\\nfunction getUserGameID(address _user,uint _index) public view returns(uint _game_id){\\r\\n    uint length = getUsergameIdLength(_user);\\r\\n    if(length > 0){\\r\\n        _game_id = users[_user].gameIDs[_index];\\r\\n    }\\r\\n    \\r\\n    return _game_id;\\r\\n}\\r\\n\\r\\nfunction getUsergameIdLength(address _user) public view returns(uint _count){\\r\\n        _count = users[_user].gameIDs.length;\\r\\n        return _count;\\r\\n}\\r\\n\\r\\nfunction getDistributorAddressLength(uint _gameID) public view returns(uint _count){\\r\\n    _count = distributorAddress[_gameID].length;\\r\\n}\\r\\n\\r\\n\\r\\nfunction calculateTokenRecived(uint usd_value) public view returns(uint _tokens) {\\r\\n    usd_value= usd_value.sub(usd_value.mul(buy_sell_per).div(1000));\\r\\n    uint usd = usd_value*1e8;\\r\\n    _tokens = (usd/tokenPriceUSD);\\r\\n}\\r\\n\\r\\n\\r\\nfunction calculateUSdRecived(uint _token) public view returns(uint usd) {\\r\\n    usd = (_token.mul(tokenPriceUSD)).div(1e8);\\r\\n    usd = usd.sub(usd.mul(buy_sell_per).div(1000));\\r\\n}\\r\\n\\r\\nfunction setBuySellper(uint _value) public creatorOnly{\\r\\n    buy_sell_per = _value;\\r\\n}\\r\\n\\r\\n\\r\\nfunction buyToken() public payable{\\r\\n    uint usdt_value = uint256(TotalusdPrice(int(msg.value)));\\r\\n    uint _token = calculateTokenRecived(usdt_value);\\r\\n    tokenPool= tokenPool.add(usdt_value);\\r\\n    rewardToken.mintTokens(msg.sender, _token);\\r\\n}\\r\\n\\r\\nfunction sellToken(uint _token) public payable{\\r\\n    uint usd = calculateUSdRecived(_token);\\r\\n    uint bnb = calculateBnbReceived(usd);\\r\\n    require(tokenPool>=usd,\\\"No Funds Available\\\");\\r\\n    uint balance = tokenBalnceCheck(msg.sender);\\r\\n    require(balance>=_token,\\\"Insufficient  Balance\\\");\\r\\n    tokenPool = tokenPool.sub(usd);\\r\\n    rewardToken.transferFrom(msg.sender,address(this), _token);\\r\\n    payable(msg.sender).transfer(bnb);\\r\\n}\\r\\n\\r\\nfunction tokenBalnceCheck(address _user) public view returns(uint _balance){\\r\\n    _balance = rewardToken.balanceOf(_user);\\r\\n}\\r\\n\\r\\nfunction changeMinValue(uint _playerMIN,uint _distributorMin) public creatorOnly{\\r\\n    min_amount = _playerMIN;\\r\\n    min_amountdistributor = _distributorMin;\\r\\n}\\r\\n\\r\\nfunction changerefundTime() public creatorOnly{\\r\\n    subRefundTime = 5 minutes;\\r\\n} \\r\\n\\r\\n\\r\\n\\r\\n\\r\\n}\\r\\ninterface AggregatorV3Interface {\\r\\n\\r\\n  function decimals() external view returns (uint8);\\r\\n\\r\\n  function description() external view returns (string memory);\\r\\n\\r\\n  function version()external view returns (uint);\\r\\n\\r\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\r\\n  // if they do not have data to report, instead of returning unset values\\r\\n  // which could be misinterpreted as actual reported values.\\r\\n  function getRoundData(uint80 _roundId)external view returns (\\r\\n      uint80 roundId,\\r\\n      int256 answer,\\r\\n      uint startedAt,\\r\\n      uint updatedAt,\\r\\n      uint80 answeredInRound\\r\\n    );\\r\\n\\r\\n  function latestRoundData()external view returns (\\r\\n      uint80 roundId,\\r\\n      int256 answer,\\r\\n      uint startedAt,\\r\\n      uint updatedAt,\\r\\n      uint80 answeredInRound\\r\\n    );\\r\\n\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_amount\",\"type\":\"int256\"}],\"name\":\"TotalusdPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buy_sell_per\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_token\",\"type\":\"uint256\"}],\"name\":\"calculateBnbReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usd_value\",\"type\":\"uint256\"}],\"name\":\"calculateTokenRecived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_token\",\"type\":\"uint256\"}],\"name\":\"calculateUSdRecived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_playerMIN\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_distributorMin\",\"type\":\"uint256\"}],\"name\":\"changeMinValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changerefundTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameID\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"commision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultStockiest\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"distributorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"distributorHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"distributorOldHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"findInArray\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameNo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gameID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gameTotalInvest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winingNo\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"numberPicked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"endtime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getCalculatedBnbRecieved\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getCommison\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameID\",\"type\":\"uint256\"}],\"name\":\"getDistributorAddressLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gameid\",\"type\":\"uint256\"}],\"name\":\"getDistributorData\",\"outputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"_numbers\",\"type\":\"uint256[10]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gameid\",\"type\":\"uint256\"}],\"name\":\"getUserData\",\"outputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"_numbers\",\"type\":\"uint256[10]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getUserGameID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_game_id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUsergameIdLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gameid\",\"type\":\"uint256\"}],\"name\":\"getshowInfo\",\"outputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"_numbers\",\"type\":\"uint256[10]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_defaultStockiest\",\"type\":\"address\"},{\"internalType\":\"contract BEP20Token\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"makeDistributor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"min_amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"min_amountdistributor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_distributer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"playerBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_stockiest\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sponsor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"side\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gameID\",\"type\":\"uint256\"}],\"name\":\"rewardInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_winingAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract BEP20Token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_token\",\"type\":\"uint256\"}],\"name\":\"sellToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setBuySellper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subRefundTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"time_stamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"tokenBalnceCheck\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPriceUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userTypes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"stockiest\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"userType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"comission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawan\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isRegisterd\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isstockiest\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"registerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userSide\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_usdamount\",\"type\":\"uint256\"}],\"name\":\"withdrawbyAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "XakpotV7", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}