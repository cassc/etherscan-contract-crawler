{"SourceCode": "{\"ERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n\\ncontract ERC20 {\\n    function transfer(address recipient, uint amount)  external returns (bool success);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool success);\\n    function decimals() external view returns (uint8);\\n    function approve(address spender, uint amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    \\n    event Transfer(address indexed from, address indexed to, uint tokens);\\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\\n    event Burn(address indexed from, uint256 value);\\n}\"},\"HeroCatKey.sol\":{\"content\":\"pragma solidity ^0.5.0;\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\n \\ncontract HeroKey is ERC20 {\\n    \\n    using SafeMath for uint;\\n    using SafeMath for uint256;\\n    string public name;\\n    string public symbol; \\n    uint8 public decimals; // 18 decimals is the strongly suggested default, avoid changing it\\n\\n    uint256 public _totalSupply;\\n    address public owner; \\n    \\n    mapping(address =\\u003e uint) balances;\\n    mapping(address =\\u003e mapping(address =\\u003e uint)) allowed;\\n\\n    /**\\n     * Constrctor function\\n     *\\n     * Initializes contract with initial supply tokens to the creator of the contract\\n     */\\n    constructor(uint256 initialSupply,string memory tokenName,string memory tokenSymbol) public {\\n        name = tokenName;\\n        symbol = tokenSymbol;\\n        decimals = 18;\\n        _totalSupply = initialSupply * 10 ** uint256(decimals);\\n\\n        balances[msg.sender] = _totalSupply;\\n        emit Transfer(address(0), msg.sender, _totalSupply);\\n   }\\n    function totalSupply() public view returns (uint) {\\n        return _totalSupply  - balances[address(0)];\\n    }\\n\\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\\n        return balances[tokenOwner];\\n    }\\n\\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\\n        return allowed[tokenOwner][spender];\\n    }\\n\\n    function approve(address spender, uint tokens) public returns (bool success) {\\n        allowed[msg.sender][spender] = tokens;\\n        emit Approval(msg.sender, spender, tokens);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint tokens) public returns (bool success) {\\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\\n        balances[to] = balances[to].add(tokens);\\n        emit Transfer(msg.sender, to, tokens);\\n        return true;\\n    }\\n\\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\\n        balances[from] = balances[from].sub(tokens);\\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\\n        balances[to] = balances[to].add(tokens);\\n        emit Transfer(from, to, tokens);\\n        return true;\\n    }\\n    \\n    function burn(uint256 _value) public returns (bool success) {\\n        require(balances[msg.sender] \\u003e= _value);\\n        balances[msg.sender] -= _value;\\n        _totalSupply -= _value;\\n        emit Burn(msg.sender, _value);\\n        return true;\\n   }\\n\\n   function burnFrom(address _from, uint256 _value) public returns (bool success) {\\n        require(balances[_from] \\u003e= _value);\\n        require(_value \\u003c= allowed[_from][msg.sender]);\\n        balances[_from] -= _value;\\n        allowed[_from][msg.sender] -= _value;\\n        _totalSupply -= _value;\\n        emit Burn(_from, _value);\\n        return true;\\n   }\\n}\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nlibrary SafeMath {\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b);\\n\\n    return c;\\n  }\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b \\u003e 0); // Solidity only automatically asserts when dividing by 0\\n    uint256 c = a / b;\\n    return c;\\n  }\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b \\u003c= a);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c \\u003e= a);\\n\\n    return c;\\n  }\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0);\\n    return a % b;\\n  }\\n}\"}}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]", "ContractName": "HeroKey", "CompilerVersion": "v0.5.10+commit.5a6ea5b1", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000011e1a300000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000c4865726f20436174204b65790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000348434b0000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://24ae509e021dee803809558c55635d8caefeff4a4b295740b8ba8a96db681eff"}