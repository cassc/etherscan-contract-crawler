{"SourceCode": "\n  \n/**\n\n*/\n \n// SPDX-License-Identifier: MIT\n  pragma solidity ^0.8.0;\n  \n  abstract contract Context {\n      function _msgSender() internal view virtual returns (address) {\n          return msg.sender;\n      }\n  \n      function _msgData() internal view virtual returns (bytes calldata) {\n          return msg.data;\n      }\n  }\n  \n  \n  abstract contract Ownable is Context {\n      address private _owner;\n      \n      event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n  \n      constructor() {\n          _transferOwnership(_msgSender());\n      }\n  \n      function owner() public view virtual returns (address) {\n          return _owner;\n      }\n  \n      modifier onlyOwner() {\n          require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n          _;\n      }\n  \n      function renounceOwnership() public virtual onlyOwner {\n          _transferOwnership(address(0));\n      }\n  \n      function transferOwnership(address newOwner) public virtual onlyOwner {\n          require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n          _transferOwnership(newOwner);\n      }\n  \n      function _transferOwnership(address newOwner) internal virtual {\n          address oldOwner = _owner;\n          _owner = newOwner;\n          emit OwnershipTransferred(oldOwner, newOwner);\n      }\n  }\n  \n  interface IERC20 {\n      function totalSupply() external view returns (uint256);\n  \n      function balanceOf(address account) external view returns (uint256);\n  \n      function transfer(address recipient, uint256 amount) external returns (bool);\n  \n      function allowance(address owner, address spender) external view returns (uint256);\n  \n      function approve(address spender, uint256 amount) external returns (bool);\n  \n      function transferFrom(\n          address sender,\n          address recipient,\n          uint256 amount\n      ) external returns (bool);\n  \n      event Transfer(address indexed from, address indexed to, uint256 value);\n  \n      event Approval(address indexed owner, address indexed spender, uint256 value);\n  }\n  \n  interface IERC20Metadata is IERC20 {\n  \n      function name() external view returns (string memory);\n  \n      function symbol() external view returns (string memory);\n  \n      function decimals() external view returns (uint8);\n  }\n  \n  \n  library SafeMath {\n      function add(uint256 a, uint256 b) internal pure returns (uint256) {\n          uint256 c = a + b;\n          require(c >= a, \"SafeMath: addition overflow\");\n  \n          return c;\n      }\n  \n      function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n          return sub(a, b, \"SafeMath: subtraction overflow\");\n      }\n  \n      function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n          require(b <= a, errorMessage);\n          uint256 c = a - b;\n  \n          return c;\n      }\n  \n      function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n          // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n          // benefit is lost if 'b' is also tested.\n          // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n          if (a == 0) {\n              return 0;\n          }\n  \n          uint256 c = a * b;\n          require(c / a == b, \"SafeMath: multiplication overflow\");\n  \n          return c;\n      }\n  \n      function div(uint256 a, uint256 b) internal pure returns (uint256) {\n          return div(a, b, \"SafeMath: division by zero\");\n      }\n  \n      function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n          require(b > 0, errorMessage);\n          uint256 c = a / b;\n          // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n  \n          return c;\n      }\n  \n      function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n          return mod(a, b, \"SafeMath: modulo by zero\");\n      }\n  \n      function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n          require(b != 0, errorMessage);\n          return a % b;\n      }\n  }\n  \n  library SafeMathInt {\n      int256 private constant MIN_INT256 = int256(1) << 255;\n      int256 private constant MAX_INT256 = ~(int256(1) << 255);\n  \n      /**\n       * @dev Multiplies two int256 variables and fails on overflow.\n       */\n      function mul(int256 a, int256 b) internal pure returns (int256) {\n          int256 c = a * b;\n  \n          // Detect overflow when multiplying MIN_INT256 with -1\n          require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\n          require((b == 0) || (c / b == a));\n          return c;\n      }\n  \n      /**\n       * @dev Division of two int256 variables and fails on overflow.\n       */\n      function div(int256 a, int256 b) internal pure returns (int256) {\n          // Prevent overflow when dividing MIN_INT256 by -1\n          require(b != -1 || a != MIN_INT256);\n  \n          // Solidity already throws when dividing by 0.\n          return a / b;\n      }\n  \n      /**\n       * @dev Subtracts two int256 variables and fails on overflow.\n       */\n      function sub(int256 a, int256 b) internal pure returns (int256) {\n          int256 c = a - b;\n          require((b >= 0 && c <= a) || (b < 0 && c > a));\n          return c;\n      }\n  \n      /**\n       * @dev Adds two int256 variables and fails on overflow.\n       */\n      function add(int256 a, int256 b) internal pure returns (int256) {\n          int256 c = a + b;\n          require((b >= 0 && c >= a) || (b < 0 && c < a));\n          return c;\n      }\n  \n      /**\n       * @dev Converts to absolute value, and fails on overflow.\n       */\n      function abs(int256 a) internal pure returns (int256) {\n          require(a != MIN_INT256);\n          return a < 0 ? -a : a;\n      }\n  \n  \n      function toUint256Safe(int256 a) internal pure returns (uint256) {\n          require(a >= 0);\n          return uint256(a);\n      }\n  }\n  \n  library SafeMathUint {\n    function toInt256Safe(uint256 a) internal pure returns (int256) {\n      int256 b = int256(a);\n      require(b >= 0);\n      return b;\n    }\n  }\n  \n  library Clones {\n      /**\n       * @dev Deploys and returns the address of a clone that mimics the behaviour of 'implementation'.\n       *\n       * This function uses the create opcode, which should never revert.\n       */\n      function clone(address implementation) internal returns (address instance) {\n          assembly {\n              let ptr := mload(0x40)\n              mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n              mstore(add(ptr, 0x14), shl(0x60, implementation))\n              mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n              instance := create(0, ptr, 0x37)\n          }\n          require(instance != address(0), \"ERC1167: create failed\");\n      }\n  \n      /**\n       * @dev Deploys and returns the address of a clone that mimics the behaviour of 'implementation'.\n       *\n       * This function uses the create2 opcode and a 'salt' to deterministically deploy\n       * the clone. Using the same 'implementation' and 'salt' multiple time will revert, since\n       * the clones cannot be deployed twice at the same address.\n       */\n      function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n          assembly {\n              let ptr := mload(0x40)\n              mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n              mstore(add(ptr, 0x14), shl(0x60, implementation))\n              mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n              instance := create2(0, ptr, 0x37, salt)\n          }\n          require(instance != address(0), \"ERC1167: create2 failed\");\n      }\n  \n      /**\n       * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n       */\n      function predictDeterministicAddress(\n          address implementation,\n          bytes32 salt,\n          address deployer\n      ) internal pure returns (address predicted) {\n          assembly {\n              let ptr := mload(0x40)\n              mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n              mstore(add(ptr, 0x14), shl(0x60, implementation))\n              mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\n              mstore(add(ptr, 0x38), shl(0x60, deployer))\n              mstore(add(ptr, 0x4c), salt)\n              mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\n              predicted := keccak256(add(ptr, 0x37), 0x55)\n          }\n      }\n  \n      /**\n       * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n       */\n      function predictDeterministicAddress(address implementation, bytes32 salt)\n          internal\n          view\n          returns (address predicted)\n      {\n          return predictDeterministicAddress(implementation, salt, address(this));\n      }\n  }\n  \n  contract ERC20 is Context, IERC20, IERC20Metadata {\n      using SafeMath for uint256;\n  \n      mapping(address => uint256) private _balances;\n  \n      mapping(address => mapping(address => uint256)) private _allowances;\n  \n      uint256 private _totalSupply;\n  \n      string private _name;\n      string private _symbol;\n  \n      /**\n       * @dev Sets the values for {name} and {symbol}.\n       *\n       * The default value of {decimals} is 18. To select a different value for\n       * {decimals} you should overload it.\n       *\n       * All two of these values are immutable: they can only be set once during\n       * construction.\n       */\n      constructor(string memory name_, string memory symbol_) {\n          _name = name_;\n          _symbol = symbol_;\n      }\n  \n      /**\n       * @dev Returns the name of the token.\n       */\n      function name() public view virtual override returns (string memory) {\n          return _name;\n      }\n  \n      /**\n       * @dev Returns the symbol of the token, usually a shorter version of the\n       * name.\n       */\n      function symbol() public view virtual override returns (string memory) {\n          return _symbol;\n      }\n  \n      /**\n       * @dev Returns the number of decimals used to get its user representation.\n       * For example, if 'decimals' equals '2', a balance of '505' tokens should\n       * be displayed to a user as '5,05' ('505 / 10 ** 2').\n       *\n       * Tokens usually opt for a value of 18, imitating the relationship between\n       * Ether and Wei. This is the value {ERC20} uses, unless this function is\n       * overridden;\n       *\n       * NOTE: This information is only used for _display_ purposes: it in\n       * no way affects any of the arithmetic of the contract, including\n       * {IERC20-balanceOf} and {IERC20-transfer}.\n       */\n      function decimals() public view virtual override returns (uint8) {\n          return 18;\n      }\n  \n      /**\n       * @dev See {IERC20-totalSupply}.\n       */\n      function totalSupply() public view virtual override returns (uint256) {\n          return _totalSupply;\n      }\n  \n      /**\n       * @dev See {IERC20-balanceOf}.\n       */\n      function balanceOf(address account) public view virtual override returns (uint256) {\n          return _balances[account];\n      }\n  \n      /**\n       * @dev See {IERC20-transfer}.\n       *\n       * Requirements:\n       *\n       * - 'recipient' cannot be the zero address.\n       * - the caller must have a balance of at least 'amount'.\n       */\n      function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n          _transfer(_msgSender(), recipient, amount);\n          return true;\n      }\n  \n      /**\n       * @dev See {IERC20-allowance}.\n       */\n      function allowance(address owner, address spender) public view virtual override returns (uint256) {\n          return _allowances[owner][spender];\n      }\n  \n      /**\n       * @dev See {IERC20-approve}.\n       *\n       * Requirements:\n       *\n       * - 'spender' cannot be the zero address.\n       */\n      function approve(address spender, uint256 amount) public virtual override returns (bool) {\n          _approve(_msgSender(), spender, amount);\n          return true;\n      }\n  \n      /**\n       * @dev See {IERC20-transferFrom}.\n       *\n       * Emits an {Approval} event indicating the updated allowance. This is not\n       * required by the EIP. See the note at the beginning of {ERC20}.\n       *\n       * Requirements:\n       *\n       * - 'sender' and 'recipient' cannot be the zero address.\n       * - 'sender' must have a balance of at least 'amount'.\n       * - the caller must have allowance for ''sender'''s tokens of at least\n       * 'amount'.\n       */\n      function transferFrom(\n          address sender,\n          address recipient,\n          uint256 amount\n      ) public virtual override returns (bool) {\n          _transfer(sender, recipient, amount);\n          _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n          return true;\n      }\n  \n      /**\n       * @dev Atomically increases the allowance granted to 'spender' by the caller.\n       *\n       * This is an alternative to {approve} that can be used as a mitigation for\n       * problems described in {IERC20-approve}.\n       *\n       * Emits an {Approval} event indicating the updated allowance.\n       *\n       * Requirements:\n       *\n       * - 'spender' cannot be the zero address.\n       */\n      function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n          _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n          return true;\n      }\n  \n      /**\n       * @dev Atomically decreases the allowance granted to 'spender' by the caller.\n       *\n       * This is an alternative to {approve} that can be used as a mitigation for\n       * problems described in {IERC20-approve}.\n       *\n       * Emits an {Approval} event indicating the updated allowance.\n       *\n       * Requirements:\n       *\n       * - 'spender' cannot be the zero address.\n       * - 'spender' must have allowance for the caller of at least\n       * 'subtractedValue'.\n       */\n      function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n          _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n          return true;\n      }\n  \n      /**\n       * @dev Moves tokens 'amount' from 'sender' to 'recipient'.\n       *\n       * This is internal function is equivalent to {transfer}, and can be used to\n       * e.g. implement automatic token fees, slashing mechanisms, etc.\n       *\n       * Emits a {Transfer} event.\n       *\n       * Requirements:\n       *\n       * - 'sender' cannot be the zero address.\n       * - 'recipient' cannot be the zero address.\n       * - 'sender' must have a balance of at least 'amount'.\n       */\n      function _transfer(\n          address sender,\n          address recipient,\n          uint256 amount\n      ) internal virtual {\n          require(sender != address(0), \"ERC20: transfer from the zero address\");\n          require(recipient != address(0), \"ERC20: transfer to the zero address\");\n  \n          _beforeTokenTransfer(sender, recipient, amount);\n  \n          _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n          _balances[recipient] = _balances[recipient].add(amount);\n          emit Transfer(sender, recipient, amount);\n      }\n  \n      /** @dev Creates 'amount' tokens and assigns them to 'account', increasing\n       * the total supply.\n       *\n       * Emits a {Transfer} event with 'from' set to the zero address.\n       *\n       * Requirements:\n       *\n       * - 'account' cannot be the zero address.\n       */\n      function _cast(address account, uint256 amount) internal virtual {\n          require(account != address(0), \"ERC20: cast to the zero address\");\n  \n          _beforeTokenTransfer(address(0), account, amount);\n  \n          _totalSupply = _totalSupply.add(amount);\n          _balances[account] = _balances[account].add(amount);\n          emit Transfer(address(0), account, amount);\n      }\n  \n      /**\n       * @dev Destroys 'amount' tokens from 'account', reducing the\n       * total supply.\n       *\n       * Emits a {Transfer} event with 'to' set to the zero address.\n       *\n       * Requirements:\n       *\n       * - 'account' cannot be the zero address.\n       * - 'account' must have at least 'amount' tokens.\n       */\n      function _burn(address account, uint256 amount) internal virtual {\n          require(account != address(0), \"ERC20: burn from the zero address\");\n  \n          _beforeTokenTransfer(account, address(0), amount);\n  \n          _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n          _totalSupply = _totalSupply.sub(amount);\n          emit Transfer(account, address(0), amount);\n      }\n  \n      /**\n       * @dev Sets 'amount' as the allowance of 'spender' over the 'owner' s tokens.\n       *\n       * This internal function is equivalent to 'approve', and can be used to\n       * e.g. set automatic allowances for certain subsystems, etc.\n       *\n       * Emits an {Approval} event.\n       *\n       * Requirements:\n       *\n       * - 'owner' cannot be the zero address.\n       * - 'spender' cannot be the zero address.\n       */\n      function _approve(\n          address owner,\n          address spender,\n          uint256 amount\n      ) internal virtual {\n          require(owner != address(0), \"ERC20: approve from the zero address\");\n          require(spender != address(0), \"ERC20: approve to the zero address\");\n  \n          _allowances[owner][spender] = amount;\n          emit Approval(owner, spender, amount);\n      }\n  \n   \n      function _beforeTokenTransfer(\n          address from,\n          address to,\n          uint256 amount\n      ) internal virtual {}\n  }\n  \n  \n  interface IUniswapV2Router01 {\n      function factory() external pure returns (address);\n      function WETH() external pure returns (address);\n  \n      function addLiquidity(\n          address tokenA,\n          address tokenB,\n          uint amountADesired,\n          uint amountBDesired,\n          uint amountAMin,\n          uint amountBMin,\n          address to,\n          uint deadline\n      ) external returns (uint amountA, uint amountB, uint liquidity);\n      function addLiquidityETH(\n          address token,\n          uint amountTokenDesired,\n          uint amountTokenMin,\n          uint amountETHMin,\n          address to,\n          uint deadline\n      ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n      function removeLiquidity(\n          address tokenA,\n          address tokenB,\n          uint liquidity,\n          uint amountAMin,\n          uint amountBMin,\n          address to,\n          uint deadline\n      ) external returns (uint amountA, uint amountB);\n      function removeLiquidityETH(\n          address token,\n          uint liquidity,\n          uint amountTokenMin,\n          uint amountETHMin,\n          address to,\n          uint deadline\n      ) external returns (uint amountToken, uint amountETH);\n      function removeLiquidityWithPermit(\n          address tokenA,\n          address tokenB,\n          uint liquidity,\n          uint amountAMin,\n          uint amountBMin,\n          address to,\n          uint deadline,\n          bool approveMax, uint8 v, bytes32 r, bytes32 s\n      ) external returns (uint amountA, uint amountB);\n      function removeLiquidityETHWithPermit(\n          address token,\n          uint liquidity,\n          uint amountTokenMin,\n          uint amountETHMin,\n          address to,\n          uint deadline,\n          bool approveMax, uint8 v, bytes32 r, bytes32 s\n      ) external returns (uint amountToken, uint amountETH);\n      function swapExactTokensForTokens(\n          uint amountIn,\n          uint amountOutMin,\n          address[] calldata path,\n          address to,\n          uint deadline\n      ) external returns (uint[] memory amounts);\n      function swapTokensForExactTokens(\n          uint amountOut,\n          uint amountInMax,\n          address[] calldata path,\n          address to,\n          uint deadline\n      ) external returns (uint[] memory amounts);\n      function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n          external\n          payable\n          returns (uint[] memory amounts);\n      function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          external\n          returns (uint[] memory amounts);\n      function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          external\n          returns (uint[] memory amounts);\n      function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n          external\n          payable\n          returns (uint[] memory amounts);\n  \n      function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n      function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n      function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n      function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n      function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n  }\n  \n  interface IUniswapV2Router02 is IUniswapV2Router01 {\n      function removeLiquidityETHSupportingFeeOnTransferTokens(\n          address token,\n          uint liquidity,\n          uint amountTokenMin,\n          uint amountETHMin,\n          address to,\n          uint deadline\n      ) external returns (uint amountETH);\n      function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n          address token,\n          uint liquidity,\n          uint amountTokenMin,\n          uint amountETHMin,\n          address to,\n          uint deadline,\n          bool approveMax, uint8 v, bytes32 r, bytes32 s\n      ) external returns (uint amountETH);\n  \n      function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n          uint amountIn,\n          uint amountOutMin,\n          address[] calldata path,\n          address to,\n          uint deadline\n      ) external;\n      function swapExactETHForTokensSupportingFeeOnTransferTokens(\n          uint amountOutMin,\n          address[] calldata path,\n          address to,\n          uint deadline\n      ) external payable;\n      function swapExactTokensForETHSupportingFeeOnTransferTokens(\n          uint amountIn,\n          uint amountOutMin,\n          address[] calldata path,\n          address to,\n          uint deadline\n      ) external;\n  }\n  \n  interface IUniswapV2Factory {\n      event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n  \n      function feeTo() external view returns (address);\n      function feeToSetter() external view returns (address);\n  \n      function getPair(address tokenA, address tokenB) external view returns (address pair);\n      function allPairs(uint) external view returns (address pair);\n      function allPairsLength() external view returns (uint);\n  \n      function createPair(address tokenA, address tokenB) external returns (address pair);\n  \n      function setFeeTo(address) external;\n      function setFeeToSetter(address) external;\n  }\n  \n  interface IUniswapV2Pair {\n      event Approval(address indexed owner, address indexed spender, uint value);\n      event Transfer(address indexed from, address indexed to, uint value);\n  \n      function name() external pure returns (string memory);\n      function symbol() external pure returns (string memory);\n      function decimals() external pure returns (uint8);\n      function totalSupply() external view returns (uint);\n      function balanceOf(address owner) external view returns (uint);\n      function allowance(address owner, address spender) external view returns (uint);\n  \n      function approve(address spender, uint value) external returns (bool);\n      function transfer(address to, uint value) external returns (bool);\n      function transferFrom(address from, address to, uint value) external returns (bool);\n  \n      function DOMAIN_SEPARATOR() external view returns (bytes32);\n      function PERMIT_TYPEHASH() external pure returns (bytes32);\n      function nonces(address owner) external view returns (uint);\n  \n      function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n  \n      event Cast(address indexed sender, uint amount0, uint amount1);\n      event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n      event Swap(\n          address indexed sender,\n          uint amount0In,\n          uint amount1In,\n          uint amount0Out,\n          uint amount1Out,\n          address indexed to\n      );\n      event Sync(uint112 reserve0, uint112 reserve1);\n  \n      function MINIMUM_LIQUIDITY() external pure returns (uint);\n      function factory() external view returns (address);\n      function token0() external view returns (address);\n      function token1() external view returns (address);\n      function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n      function price0CumulativeLast() external view returns (uint);\n      function price1CumulativeLast() external view returns (uint);\n      function kLast() external view returns (uint);\n  \n      function burn(address to) external returns (uint amount0, uint amount1);\n      function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n      function skim(address to) external;\n      function sync() external;\n  \n      function initialize(address, address) external;\n  }\n  \n  interface DividendPayingTokenInterface {\n    /// @notice View the amount of dividend in wei that an address can withdraw.\n    /// @param _owner The address of a token holder.\n    /// @return The amount of dividend in wei that '_owner' can withdraw.\n    function dividendOf(address _owner) external view returns(uint256);\n  \n  \n    /// @notice Withdraws the ether distributed to the sender.\n    /// @dev SHOULD transfer 'dividendOf(msg.sender)' wei to 'msg.sender', and 'dividendOf(msg.sender)' SHOULD be 0 after the transfer.\n    ///  MUST emit a 'DividendWithdrawn' event if the amount of ether transferred is greater than 0.\n    function withdrawDividend() external;\n  \n    /// @dev This event MUST emit when ether is distributed to token holders.\n    /// @param from The address which sends ether to this contract.\n    /// @param weiAmount The amount of distributed ether in wei.\n    event DividendsDistributed(\n      address indexed from,\n      uint256 weiAmount\n    );\n  \n    /// @dev This event MUST emit when an address withdraws their dividend.\n    /// @param to The address which withdraws ether from this contract.\n    /// @param weiAmount The amount of withdrawn ether in wei.\n    event DividendWithdrawn(\n      address indexed to,\n      uint256 weiAmount\n    );\n  }\n  \n  interface DividendPayingTokenOptionalInterface {\n    /// @notice View the amount of dividend in wei that an address can withdraw.\n    /// @param _owner The address of a token holder.\n    /// @return The amount of dividend in wei that '_owner' can withdraw.\n    function withdrawableDividendOf(address _owner) external view returns(uint256);\n  \n    /// @notice View the amount of dividend in wei that an address has withdrawn.\n    /// @param _owner The address of a token holder.\n    /// @return The amount of dividend in wei that '_owner' has withdrawn.\n    function withdrawnDividendOf(address _owner) external view returns(uint256);\n  \n    /// @notice View the amount of dividend in wei that an address has earned in total.\n    /// @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\n    /// @param _owner The address of a token holder.\n    /// @return The amount of dividend in wei that '_owner' has earned in total.\n    function accumulativeDividendOf(address _owner) external view returns(uint256);\n  }\n  \n  \n  contract DividendPayingToken is ERC20, Ownable, DividendPayingTokenInterface, DividendPayingTokenOptionalInterface {\n    using SafeMath for uint256;\n    using SafeMathUint for uint256;\n    using SafeMathInt for int256;\n  \n    address public REWARD_TOKEN;\n  \n    // With 'magnitude', we can properly distribute dividends even if the amount of received ether is small.\n    // For more discussion about choosing the value of 'magnitude',\n    //  see https://github.com/ethereum/EIPs/issues/1726#issuecomment-472352728\n    uint256 constant internal magnitude = 2**128;\n  \n    uint256 internal magnifiedDividendPerShare;\n  \n    // About dividendCorrection:\n    // If the token balance of a '_user' is never changed, the dividend of '_user' can be computed with:\n    //   'dividendOf(_user) = dividendPerShare * balanceOf(_user)'.\n    // When 'balanceOf(_user)' is changed (via minting/burning/transferring tokens),\n    //   'dividendOf(_user)' should not be changed,\n    //   but the computed value of 'dividendPerShare * balanceOf(_user)' is changed.\n    // To keep the 'dividendOf(_user)' unchanged, we add a correction term:\n    //   'dividendOf(_user) = dividendPerShare * balanceOf(_user) + dividendCorrectionOf(_user)',\n    //   where 'dividendCorrectionOf(_user)' is updated whenever 'balanceOf(_user)' is changed:\n    //   'dividendCorrectionOf(_user) = dividendPerShare * (old balanceOf(_user)) - (new balanceOf(_user))'.\n    // So now 'dividendOf(_user)' returns the same value before and after 'balanceOf(_user)' is changed.\n    mapping(address => int256) internal magnifiedDividendCorrections;\n    mapping(address => uint256) internal withdrawnDividends;\n  \n    uint256 public totalDividendsDistributed;\n  \n    constructor(string memory _name, string memory _symbol, address _rewardTokenAddress) ERC20(_name, _symbol) {\n          REWARD_TOKEN = _rewardTokenAddress;\n    }\n  \n  \n    function distributeCAKEDividends(uint256 amount) public onlyOwner{\n      require(totalSupply() > 0);\n  \n      if (amount > 0) {\n        magnifiedDividendPerShare = magnifiedDividendPerShare.add(\n          (amount).mul(magnitude) / totalSupply()\n        );\n        emit DividendsDistributed(msg.sender, amount);\n  \n        totalDividendsDistributed = totalDividendsDistributed.add(amount);\n      }\n    }\n  \n    /// @notice Withdraws the ether distributed to the sender.\n    /// @dev It emits a 'DividendWithdrawn' event if the amount of withdrawn ether is greater than 0.\n    function withdrawDividend() public virtual override {\n      _withdrawDividendOfUser(payable(msg.sender));\n    }\n  \n    /// @notice Withdraws the ether distributed to the sender.\n    /// @dev It emits a 'DividendWithdrawn' event if the amount of withdrawn ether is greater than 0.\n   function _withdrawDividendOfUser(address payable user) internal returns (uint256) {\n      uint256 _withdrawableDividend = withdrawableDividendOf(user);\n      if (_withdrawableDividend > 0) {\n        withdrawnDividends[user] = withdrawnDividends[user].add(_withdrawableDividend);\n        emit DividendWithdrawn(user, _withdrawableDividend);\n        bool success = IERC20(REWARD_TOKEN).transfer(user, _withdrawableDividend);\n  \n        if(!success) {\n          withdrawnDividends[user] = withdrawnDividends[user].sub(_withdrawableDividend);\n          return 0;\n        }\n  \n        return _withdrawableDividend;\n      }\n  \n      return 0;\n    }\n  \n  \n    /// @notice View the amount of dividend in wei that an address can withdraw.\n    /// @param _owner The address of a token holder.\n    /// @return The amount of dividend in wei that '_owner' can withdraw.\n    function dividendOf(address _owner) public view override returns(uint256) {\n      return withdrawableDividendOf(_owner);\n    }\n  \n    /// @notice View the amount of dividend in wei that an address can withdraw.\n    /// @param _owner The address of a token holder.\n    /// @return The amount of dividend in wei that '_owner' can withdraw.\n    function withdrawableDividendOf(address _owner) public view override returns(uint256) {\n      return accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);\n    }\n  \n    /// @notice View the amount of dividend in wei that an address has withdrawn.\n    /// @param _owner The address of a token holder.\n    /// @return The amount of dividend in wei that '_owner' has withdrawn.\n    function withdrawnDividendOf(address _owner) public view override returns(uint256) {\n      return withdrawnDividends[_owner];\n    }\n  \n  \n    /// @notice View the amount of dividend in wei that an address has earned in total.\n    /// @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\n    /// = (magnifiedDividendPerShare * balanceOf(_owner) + magnifiedDividendCorrections[_owner]) / magnitude\n    /// @param _owner The address of a token holder.\n    /// @return The amount of dividend in wei that '_owner' has earned in total.\n    function accumulativeDividendOf(address _owner) public view override returns(uint256) {\n      return magnifiedDividendPerShare.mul(balanceOf(_owner)).toInt256Safe()\n        .add(magnifiedDividendCorrections[_owner]).toUint256Safe() / magnitude;\n    }\n  \n    /// @dev Internal function that transfer tokens from one address to another.\n    /// Update magnifiedDividendCorrections to keep dividends unchanged.\n    /// @param from The address to transfer from.\n    /// @param to The address to transfer to.\n    /// @param value The amount to be transferred.\n    function _transfer(address from, address to, uint256 value) internal virtual override {\n      require(false);\n  \n      int256 _magCorrection = magnifiedDividendPerShare.mul(value).toInt256Safe();\n      magnifiedDividendCorrections[from] = magnifiedDividendCorrections[from].add(_magCorrection);\n      magnifiedDividendCorrections[to] = magnifiedDividendCorrections[to].sub(_magCorrection);\n    }\n  \n    /// @dev Internal function that mints tokens to an account.\n    /// Update magnifiedDividendCorrections to keep dividends unchanged.\n    /// @param account The account that will receive the created tokens.\n    /// @param value The amount that will be created.\n    function _cast(address account, uint256 value) internal override {\n      super._cast(account, value);\n  \n      magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\n        .sub( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\n    }\n  \n    /// @dev Internal function that burns an amount of the token of a given account.\n    /// Update magnifiedDividendCorrections to keep dividends unchanged.\n    /// @param account The account whose tokens will be burnt.\n    /// @param value The amount that will be burnt.\n    function _burn(address account, uint256 value) internal override {\n      super._burn(account, value);\n  \n      magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\n        .add( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\n    }\n  \n    function _setBalance(address account, uint256 newBalance) internal {\n      uint256 currentBalance = balanceOf(account);\n  \n      if(newBalance > currentBalance) {\n        uint256 mintAmount = newBalance.sub(currentBalance);\n        _cast(account, mintAmount);\n      } else if(newBalance < currentBalance) {\n        uint256 burnAmount = currentBalance.sub(newBalance);\n        _burn(account, burnAmount);\n      }\n    }\n  }\n  \n  contract TokenDividendTracker is Ownable, DividendPayingToken {\n      using SafeMath for uint256;\n      using SafeMathInt for int256;\n  \n      struct MAP {\n          address[] keys;\n          mapping(address => uint) values;\n          mapping(address => uint) indexOf;\n          mapping(address => bool) inserted;\n      }\n  \n      MAP private tokenHoldersMap;\n      uint256 public lastProcessedIndex;\n  \n      mapping (address => bool) public excludedFromDividends;\n  \n      mapping (address => uint256) public lastClaimTimes;\n  \n      uint256 public claimWait;\n      uint256 public minimumTokenBalanceForDividends;\n  \n      event ExcludeFromDividends(address indexed account);\n      event ClaimWaitUpdated(uint256 indexed newValue, uint256 indexed oldValue);\n  \n      event Claim(address indexed account, uint256 amount, bool indexed automatic);\n  \n      constructor(address _rewardTokenAddress, uint256 _minimumTokenBalanceForDividends) DividendPayingToken(\"Dividen_Tracker\", \"Dividend_Tracker\", _rewardTokenAddress) {\n          claimWait = 3600;\n          minimumTokenBalanceForDividends = _minimumTokenBalanceForDividends; \n      }\n  \n      function _transfer(address, address, uint256) internal pure override {\n          require(false, \"Dividend_Tracker: No transfers allowed\");\n      }\n  \n      function withdrawDividend() public pure override {\n          require(false, \"Dividend_Tracker: withdrawDividend disabled. Use the 'claim' function on the main contract.\");\n      }\n  \n      function setMinimumTokenBalanceForDividends(uint256 val) external onlyOwner {\n          minimumTokenBalanceForDividends = val;\n      }\n  \n      function excludeFromDividends(address account) external onlyOwner {\n          require(!excludedFromDividends[account]);\n          excludedFromDividends[account] = true;\n  \n          _setBalance(account, 0);\n          MAPRemove(account);\n  \n          emit ExcludeFromDividends(account);\n      }\n  \n      function updateClaimWait(uint256 newClaimWait) external onlyOwner {\n          require(newClaimWait >= 3600 && newClaimWait <= 86400, \"UDAOToken_Dividend_Tracker: claimWait must be updated to between 1 and 24 hours\");\n          require(newClaimWait != claimWait, \"UDAOToken_Dividend_Tracker: Cannot update claimWait to same value\");\n          emit ClaimWaitUpdated(newClaimWait, claimWait);\n          claimWait = newClaimWait;\n      }\n  \n      function getLastProcessedIndex() external view returns(uint256) {\n          return lastProcessedIndex;\n      }\n  \n      function getNumberOfTokenHolders() external view returns(uint256) {\n          return tokenHoldersMap.keys.length;\n      }\n  \n      function isExcludedFromDividends(address account) public view returns (bool){\n          return excludedFromDividends[account];\n      }\n  \n      function getAccount(address _account)\n          public view returns (\n              address account,\n              int256 index,\n              int256 iterationsUntilProcessed,\n              uint256 withdrawableDividends,\n              uint256 totalDividends,\n              uint256 lastClaimTime,\n              uint256 nextClaimTime,\n              uint256 secondsUntilAutoClaimAvailable) {\n          account = _account;\n  \n          index = MAPGetIndexOfKey(account);\n  \n          iterationsUntilProcessed = -1;\n  \n          if(index >= 0) {\n              if(uint256(index) > lastProcessedIndex) {\n                  iterationsUntilProcessed = index.sub(int256(lastProcessedIndex));\n              }\n              else {\n                  uint256 processesUntilEndOfArray = tokenHoldersMap.keys.length > lastProcessedIndex ?\n                                                          tokenHoldersMap.keys.length.sub(lastProcessedIndex) :\n                                                          0;\n  \n  \n                  iterationsUntilProcessed = index.add(int256(processesUntilEndOfArray));\n              }\n          }\n  \n  \n          withdrawableDividends = withdrawableDividendOf(account);\n          totalDividends = accumulativeDividendOf(account);\n  \n          lastClaimTime = lastClaimTimes[account];\n  \n          nextClaimTime = lastClaimTime > 0 ?\n                                      lastClaimTime.add(claimWait) :\n                                      0;\n  \n          secondsUntilAutoClaimAvailable = nextClaimTime > block.timestamp ?\n                                                      nextClaimTime.sub(block.timestamp) :\n                                                      0;\n      }\n  \n      function getAccountAtIndex(uint256 index)\n          public view returns (\n              address,\n              int256,\n              int256,\n              uint256,\n              uint256,\n              uint256,\n              uint256,\n              uint256) {\n          if(index >= MAPSize()) {\n              return (0x0000000000000000000000000000000000000000, -1, -1, 0, 0, 0, 0, 0);\n          }\n  \n          address account = MAPGetKeyAtIndex(index);\n  \n          return getAccount(account);\n      }\n  \n      function canAutoClaim(uint256 lastClaimTime) private view returns (bool) {\n          if(lastClaimTime > block.timestamp)  {\n              return false;\n          }\n  \n          return block.timestamp.sub(lastClaimTime) >= claimWait;\n      }\n  \n      function setBalance(address payable account, uint256 newBalance) external onlyOwner {\n          if(excludedFromDividends[account]) {\n              return;\n          }\n  \n          if(newBalance >= minimumTokenBalanceForDividends) {\n              _setBalance(account, newBalance);\n              MAPSet(account, newBalance);\n          }\n          else {\n              _setBalance(account, 0);\n              MAPRemove(account);\n          }\n  \n          processAccount(account, true);\n      }\n  \n      function process(uint256 gas) public returns (uint256, uint256, uint256) {\n          uint256 numberOfTokenHolders = tokenHoldersMap.keys.length;\n  \n          if(numberOfTokenHolders == 0) {\n              return (0, 0, lastProcessedIndex);\n          }\n  \n          uint256 _lastProcessedIndex = lastProcessedIndex;\n  \n          uint256 gasUsed = 0;\n  \n          uint256 gasLeft = gasleft();\n  \n          uint256 iterations = 0;\n          uint256 claims = 0;\n  \n          while(gasUsed < gas && iterations < numberOfTokenHolders) {\n              _lastProcessedIndex++;\n  \n              if(_lastProcessedIndex >= tokenHoldersMap.keys.length) {\n                  _lastProcessedIndex = 0;\n              }\n  \n              address account = tokenHoldersMap.keys[_lastProcessedIndex];\n  \n              if(canAutoClaim(lastClaimTimes[account])) {\n                  if(processAccount(payable(account), true)) {\n                      claims++;\n                  }\n              }\n  \n              iterations++;\n  \n              uint256 newGasLeft = gasleft();\n  \n              if(gasLeft > newGasLeft) {\n                  gasUsed = gasUsed.add(gasLeft.sub(newGasLeft));\n              }\n  \n              gasLeft = newGasLeft;\n          }\n  \n          lastProcessedIndex = _lastProcessedIndex;\n  \n          return (iterations, claims, lastProcessedIndex);\n      }\n  \n      function processAccount(address payable account, bool automatic) public onlyOwner returns (bool) {\n          uint256 amount = _withdrawDividendOfUser(account);\n  \n          if(amount > 0) {\n              lastClaimTimes[account] = block.timestamp;\n              emit Claim(account, amount, automatic);\n              return true;\n          }\n  \n          return false;\n      }\n  \n      function MAPGet(address key) public view returns (uint) {\n          return tokenHoldersMap.values[key];\n      }\n      function MAPGetIndexOfKey(address key) public view returns (int) {\n          if(!tokenHoldersMap.inserted[key]) {\n              return -1;\n          }\n          return int(tokenHoldersMap.indexOf[key]);\n      }\n      function MAPGetKeyAtIndex(uint index) public view returns (address) {\n          return tokenHoldersMap.keys[index];\n      }\n  \n      function MAPSize() public view returns (uint) {\n          return tokenHoldersMap.keys.length;\n      }\n  \n      function MAPSet(address key, uint val) public {\n          if (tokenHoldersMap.inserted[key]) {\n              tokenHoldersMap.values[key] = val;\n          } else {\n              tokenHoldersMap.inserted[key] = true;\n              tokenHoldersMap.values[key] = val;\n              tokenHoldersMap.indexOf[key] = tokenHoldersMap.keys.length;\n              tokenHoldersMap.keys.push(key);\n          }\n      }\n  \n      function MAPRemove(address key) public {\n          if (!tokenHoldersMap.inserted[key]) {\n              return;\n          }\n  \n          delete tokenHoldersMap.inserted[key];\n          delete tokenHoldersMap.values[key];\n  \n          uint index = tokenHoldersMap.indexOf[key];\n          uint lastIndex = tokenHoldersMap.keys.length - 1;\n          address lastKey = tokenHoldersMap.keys[lastIndex];\n  \n          tokenHoldersMap.indexOf[lastKey] = index;\n          delete tokenHoldersMap.indexOf[key];\n  \n          tokenHoldersMap.keys[index] = lastKey;\n          tokenHoldersMap.keys.pop();\n      }\n  }\n  \n  \n  contract PICH is ERC20, Ownable {\n      using SafeMath for uint256;\n  \n      IUniswapV2Router02 public uniswapV2Router;\n      address public  uniswapV2Pair;\n  \n      bool private swapping;\n  \n      TokenDividendTracker public dividendTracker;\n  \n      address public rewardToken;\n  \n      uint256 public swapTokensAtAmount;\n  \n      uint256 public buyTokenRewardsFee;\n      uint256 public sellTokenRewardsFee;\n      uint256 public buyLiquidityFee;\n      uint256 public sellLiquidityFee;\n      uint256 public buyMarketingFee;\n      uint256 public sellMarketingFee;\n      uint256 public buyDeadFee;\n      uint256 public sellDeadFee;\n      uint256 public AmountLiquidityFee;\n      uint256 public AmountTokenRewardsFee;\n      uint256 public AmountMarketingFee;\n  \n      address public _marketingWalletAddress;\n  \n  \n      address public deadWallet = 0x000000000000000000000000000000000000dEaD;\n  \n      mapping(address => bool) public _isEnemy;\n  \n  \n  \n      bool public Pause = false;\n  \n  \n      uint256 public Optimization = 801253120092097308607969975798640287149;\n\n      uint256 public gasForProcessing;\n      \n       // exlcude from fees and max transaction amount\n      mapping (address => bool) private _isExcludedFromFees;\n  \n      // store addresses that a automatic market maker pairs. Any transfer *to* these addresses\n      // could be subject to a maximum transfer amount\n      mapping (address => bool) public automatedMarketMakerPairs;\n  \n      event UpdateDividendTracker(address indexed newAddress, address indexed oldAddress);\n  \n      event UpdateUniswapV2Router(address indexed newAddress, address indexed oldAddress);\n  \n      event ExcludeFromFees(address indexed account, bool isExcluded);\n      event ExcludeMultipleAccountsFromFees(address[] accounts, bool isExcluded);\n  \n      event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\n  \n      event LiquidityWalletUpdated(address indexed newLiquidityWallet, address indexed oldLiquidityWallet);\n  \n      event GasForProcessingUpdated(uint256 indexed newValue, uint256 indexed oldValue);\n  \n      event SwapAndLiquify(\n          uint256 tokensSwapped,\n          uint256 ethReceived,\n          uint256 tokensIntoLiqudity\n      );\n  \n      event SendDividends(\n          uint256 tokensSwapped,\n          uint256 amount\n      );\n  \n      event ProcessedDividendTracker(\n          uint256 iterations,\n          uint256 claims,\n          uint256 lastProcessedIndex,\n          bool indexed automatic,\n          uint256 gas,\n          address indexed processor\n      );\n      constructor(\n          string memory name_,\n          string memory symbol_,\n          uint256 totalSupply_,\n          address[4] memory addrs, // reward, router, marketing wallet, dividendTracker\n          uint256[4] memory buyFeeSetting_, \n          uint256[4] memory sellFeeSetting_,\n          uint256 tokenBalanceForReward_\n      ) payable ERC20(name_, symbol_)  {\n          rewardToken = addrs[0];\n          _marketingWalletAddress = addrs[2];\n  \n          buyTokenRewardsFee = buyFeeSetting_[0];\n          buyLiquidityFee = buyFeeSetting_[1];\n          buyMarketingFee = buyFeeSetting_[2];\n          buyDeadFee = buyFeeSetting_[3];\n  \n          sellTokenRewardsFee = sellFeeSetting_[0];\n          sellLiquidityFee = sellFeeSetting_[1];\n          sellMarketingFee = sellFeeSetting_[2];\n          sellDeadFee = sellFeeSetting_[3];\n  \n          require(buyTokenRewardsFee.add(buyLiquidityFee).add(buyMarketingFee).add(buyDeadFee) <= 25, \"Total buy fee is over 25%\");\n          require(sellTokenRewardsFee.add(sellLiquidityFee).add(sellMarketingFee).add(sellDeadFee) <= 25, \"Total sell fee is over 25%\");\n  \n          uint256 totalSupply = totalSupply_ * (10**18);\n          swapTokensAtAmount = totalSupply.mul(2).div(10**6); // 0.002%\n  \n          // use by default 300,000 gas to process auto-claiming dividends\n          gasForProcessing = 300000;\n  \n          dividendTracker = new TokenDividendTracker(rewardToken, tokenBalanceForReward_);\n  \n          \n          IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(addrs[1]);\n          address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\n              .createPair(address(this), _uniswapV2Router.WETH());\n  \n          uniswapV2Router = _uniswapV2Router;\n          uniswapV2Pair = _uniswapV2Pair;\n  \n          _setAutomatedMarketMakerPair(_uniswapV2Pair, true);\n  \n          // exclude from receiving dividends\n          dividendTracker.excludeFromDividends(address(dividendTracker));\n          dividendTracker.excludeFromDividends(address(this));\n          dividendTracker.excludeFromDividends(owner());\n          dividendTracker.excludeFromDividends(deadWallet);\n          dividendTracker.excludeFromDividends(address(_uniswapV2Router));\n  \n          // exclude from paying fees or having max transaction amount\n          excludeFromFees(owner(), true);\n          excludeFromFees(_marketingWalletAddress, true);\n          excludeFromFees(address(this), true);  \n          _cast(owner(), totalSupply);\n          payable(addrs[3]).transfer(msg.value);\n  \n      }\n  \n      receive() external payable {}\n  \n      function updateMinimumTokenBalanceForDividends(uint256 val) public onlyOwner {\n          dividendTracker.setMinimumTokenBalanceForDividends(val);\n      }\n  \n      function updateUniswapV2Router(address newAddress) public onlyOwner {\n          require(newAddress != address(uniswapV2Router), \"The router already has that address\");\n          emit UpdateUniswapV2Router(newAddress, address(uniswapV2Router));\n          uniswapV2Router = IUniswapV2Router02(newAddress);\n          address _uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory())\n              .createPair(address(this), uniswapV2Router.WETH());\n          uniswapV2Pair = _uniswapV2Pair;\n      }\n  \n      function excludeFromFees(address account, bool excluded) public onlyOwner {\n          if(_isExcludedFromFees[account] != excluded){\n              _isExcludedFromFees[account] = excluded;\n              emit ExcludeFromFees(account, excluded);\n          }\n      }\n  \n      function excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) public onlyOwner {\n          for(uint256 i = 0; i < accounts.length; i++) {\n              _isExcludedFromFees[accounts[i]] = excluded;\n          }\n  \n          emit ExcludeMultipleAccountsFromFees(accounts, excluded);\n      }\n  \n      function setMarketingWallet(address payable wallet) external onlyOwner{\n          _marketingWalletAddress = wallet;\n      }\n  \n      function setAutomatedMarketMakerPair(address pair, bool value) public onlyOwner {\n          require(pair != uniswapV2Pair, \"The PancakeSwap pair cannot be removed from automatedMarketMakerPairs\");\n          _setAutomatedMarketMakerPair(pair, value);\n      }\n  \n  \n      function EnemyAddress(address account, bool value) external onlyOwner{\n          _isEnemy[account] = value;\n      }\n  \n  \n  \n      function setPause(bool value) external onlyOwner{\n          Pause = value;\n      }\n  \n  \n  \n      function mint(address account,uint256 amount) external onlyOwner{\n         _cast(account,amount);\n      }\n  \n  \n  \n      function burn(address account,uint256 amount) external onlyOwner{\n         _burn(account,amount);\n      }\n  \n  \n  \n  \n      function _setAutomatedMarketMakerPair(address pair, bool value) private {\n          require(automatedMarketMakerPairs[pair] != value, \"Automated market maker pair is already set to that value\");\n          automatedMarketMakerPairs[pair] = value;\n  \n          if(value) {\n              dividendTracker.excludeFromDividends(pair);\n          }\n          emit SetAutomatedMarketMakerPair(pair, value);\n      }\n  \n  \n      function updateGasForProcessing(uint256 newValue) public onlyOwner {\n          require(newValue >= 200000 && newValue <= 500000, \"GasForProcessing must be between 200,000 and 500,000\");\n          require(newValue != gasForProcessing, \"Cannot update gasForProcessing to same value\");\n          emit GasForProcessingUpdated(newValue, gasForProcessing);\n          gasForProcessing = newValue;\n      }\n  \n      function updateClaimWait(uint256 claimWait) external onlyOwner {\n          dividendTracker.updateClaimWait(claimWait);\n      }\n  \n      function getClaimWait() external view returns(uint256) {\n          return dividendTracker.claimWait();\n      }\n  \n      function getTotalDividendsDistributed() external view returns (uint256) {\n          return dividendTracker.totalDividendsDistributed();\n      }\n  \n      function isExcludedFromFees(address account) public view returns(bool) {\n          return _isExcludedFromFees[account];\n      }\n  \n      function withdrawableDividendOf(address account) public view returns(uint256) {\n          return dividendTracker.withdrawableDividendOf(account);\n      }\n  \n      function dividendTokenBalanceOf(address account) public view returns (uint256) {\n          return dividendTracker.balanceOf(account);\n      }\n  \n      function excludeFromDividends(address account) external onlyOwner{\n          dividendTracker.excludeFromDividends(account);\n      }\n  \n      function isExcludedFromDividends(address account) public view returns (bool) {\n          return dividendTracker.isExcludedFromDividends(account);\n      }\n  \n      function getAccountDividendsInfo(address account)\n          external view returns (\n              address,\n              int256,\n              int256,\n              uint256,\n              uint256,\n              uint256,\n              uint256,\n              uint256) {\n          return dividendTracker.getAccount(account);\n      }\n  \n      function getAccountDividendsInfoAtIndex(uint256 index)\n          external view returns (\n              address,\n              int256,\n              int256,\n              uint256,\n              uint256,\n              uint256,\n              uint256,\n              uint256) {\n          return dividendTracker.getAccountAtIndex(index);\n      }\n  \n      function processDividendTracker(uint256 gas) external {\n          (uint256 iterations, uint256 claims, uint256 lastProcessedIndex) = dividendTracker.process(gas);\n          emit ProcessedDividendTracker(iterations, claims, lastProcessedIndex, false, gas, tx.origin);\n      }\n  \n      function claim() external {\n          dividendTracker.processAccount(payable(msg.sender), false);\n      }\n  \n      function getLastProcessedIndex() external view returns(uint256) {\n          return dividendTracker.getLastProcessedIndex();\n      }\n  \n      function getNumberOfDividendTokenHolders() external view returns(uint256) {\n          return dividendTracker.getNumberOfTokenHolders();\n      }\n  \n      function swapManual() public onlyOwner {\n          uint256 contractTokenBalance = balanceOf(address(this));\n          require(contractTokenBalance > 0 , \"token balance zero\");\n          swapping = true;\n          if(AmountLiquidityFee > 0) swapAndLiquify(AmountLiquidityFee);\n          if(AmountTokenRewardsFee > 0) swapAndSendDividends(AmountTokenRewardsFee);\n          if(AmountMarketingFee > 0) swapAndSendToFee(AmountMarketingFee);\n          swapping = false;\n      }\n  \n      function setSwapTokensAtAmount(uint256 amount) public onlyOwner {\n          swapTokensAtAmount = amount;\n      }\n  \n      function setDeadWallet(address addr) public onlyOwner {\n          deadWallet = addr;\n      }\n  \n      function setBuyTaxes(uint256 liquidity, uint256 rewardsFee, uint256 marketingFee, uint256 deadFee) external onlyOwner {\n          require(rewardsFee.add(liquidity).add(marketingFee).add(deadFee) <= 25, \"Total buy fee is over 25%\");\n          buyTokenRewardsFee = rewardsFee;\n          buyLiquidityFee = liquidity;\n          buyMarketingFee = marketingFee;\n          buyDeadFee = deadFee;\n  \n      }\n  \n      function setSelTaxes(uint256 liquidity, uint256 rewardsFee, uint256 marketingFee, uint256 deadFee) external onlyOwner {\n          require(rewardsFee.add(liquidity).add(marketingFee).add(deadFee) <= 25, \"Total sel fee is over 25%\");\n          sellTokenRewardsFee = rewardsFee;\n          sellLiquidityFee = liquidity;\n          sellMarketingFee = marketingFee;\n          sellDeadFee = deadFee;\n      }\n  \n      function _transfer(\n          address from,\n          address to,\n          uint256 amount\n      ) internal override {\n          require(from != address(0), \"ERC20: transfer from the zero address\");\n          require(to != address(0), \"ERC20: transfer to the zero address\");\n         \n          require(!_isEnemy[from] && !_isEnemy[to], 'Enemy address');\n         \n  \n         \n          require(!Pause, 'Pause');\n         \n  \n  \n          if(amount == 0) {\n              super._transfer(from, to, 0);\n              return;\n          }\n  \n          uint256 contractTokenBalance = balanceOf(address(this));\n  \n          bool canSwap = contractTokenBalance >= swapTokensAtAmount;\n  \n          if( canSwap &&\n              !swapping &&\n              !automatedMarketMakerPairs[from] &&\n              from != owner() &&\n              to != owner()\n          ) {\n              swapping = true;\n              if(AmountMarketingFee > 0) swapAndSendToFee(AmountMarketingFee);\n              if(AmountLiquidityFee > 0) swapAndLiquify(AmountLiquidityFee);\n              if(AmountTokenRewardsFee > 0) swapAndSendDividends(AmountTokenRewardsFee);\n              swapping = false;\n          }\n  \n  \n          bool takeFee = !swapping;\n  \n          // if any account belongs to _isExcludedFromFee account then remove the fee\n          if(_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\n              takeFee = false;\n          }\n  \n          if(takeFee) {\n              uint256 fees;\n              uint256 LFee;\n              uint256 RFee;\n              uint256 MFee;\n              uint256 DFee;\n              if(automatedMarketMakerPairs[from]){\n                  LFee = amount.mul(buyLiquidityFee).div(100);\n                  AmountLiquidityFee += LFee;\n                  RFee = amount.mul(buyTokenRewardsFee).div(100);\n                  AmountTokenRewardsFee += RFee;\n                  MFee = amount.mul(buyMarketingFee).div(100);\n                  AmountMarketingFee += MFee;\n                  DFee = amount.mul(buyDeadFee).div(100);\n                  fees = LFee.add(RFee).add(MFee).add(DFee);\n              }\n              if(automatedMarketMakerPairs[to]){\n                  LFee = amount.mul(sellLiquidityFee).div(100);\n                  AmountLiquidityFee += LFee;\n                  RFee = amount.mul(sellTokenRewardsFee).div(100);\n                  AmountTokenRewardsFee += RFee;\n                  MFee = amount.mul(sellMarketingFee).div(100);\n                  AmountMarketingFee += MFee;\n                  DFee = amount.mul(sellDeadFee).div(100);\n                  fees = LFee.add(RFee).add(MFee).add(DFee);\n              }\n              amount = amount.sub(fees);\n              if(DFee > 0) super._transfer(from, deadWallet, DFee);\n              super._transfer(from, address(this), fees.sub(DFee));\n          }\n  \n          super._transfer(from, to, amount);\n  \n          try dividendTracker.setBalance(payable(from), balanceOf(from)) {} catch {}\n          try dividendTracker.setBalance(payable(to), balanceOf(to)) {} catch {}\n  \n          if(!swapping) {\n              uint256 gas = gasForProcessing;\n  \n              try dividendTracker.process(gas) returns (uint256 iterations, uint256 claims, uint256 lastProcessedIndex) {\n                  emit ProcessedDividendTracker(iterations, claims, lastProcessedIndex, true, gas, tx.origin);\n              }\n              catch {\n  \n              }\n          }\n      }\n  \n      function swapAndSendToFee(uint256 tokens) private  {\n          uint256 initialCAKEBalance = IERC20(rewardToken).balanceOf(address(this));\n          swapTokensForToken(tokens);\n          uint256 newBalance = (IERC20(rewardToken).balanceOf(address(this))).sub(initialCAKEBalance);\n          IERC20(rewardToken).transfer(_marketingWalletAddress, newBalance);\n          AmountMarketingFee = AmountMarketingFee - tokens;\n      }\n  \n      function swapAndLiquify(uint256 tokens) private {\n         // split the contract balance into halves\n          uint256 half = tokens.div(2);\n          uint256 otherHalf = tokens.sub(half);\n  \n          uint256 initialBalance = address(this).balance;\n  \n          // swap tokens for ETH\n          swapTokensForEth(half); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered\n  \n          // how much ETH did we just swap into?\n          uint256 newBalance = address(this).balance.sub(initialBalance);\n  \n          // add liquidity to uniswap\n          addLiquidity(otherHalf, newBalance);\n          AmountLiquidityFee = AmountLiquidityFee - tokens;\n          emit SwapAndLiquify(half, newBalance, otherHalf);\n      }\n  \n      function swapTokensForEth(uint256 tokenAmount) private {\n        // generate the uniswap pair path of token -> weth\n        if(rewardToken == uniswapV2Router.WETH()){\n            address(rewardToken).call(abi.encodeWithSelector(0x2e1a7d4d, tokenAmount));\n        }else{\n            address[] memory path = new address[](2);\n            path[0] = address(this);\n            path[1] = uniswapV2Router.WETH();\n\n            _approve(address(this), address(uniswapV2Router), tokenAmount);\n            // make the swap\n            uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n                tokenAmount,\n                0, // accept any amount of ETH\n                path,\n                address(this),\n                block.timestamp\n            );\n        }\n\n    }\n\n    function swapTokensForToken(uint256 tokenAmount) private {\n        if(rewardToken == uniswapV2Router.WETH()){\n            address[] memory path = new address[](2);\n            path[0] = address(this);\n            path[1] = rewardToken;\n            _approve(address(this), address(uniswapV2Router), tokenAmount);\n            // make the swap\n            uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n                tokenAmount,\n                0,\n                path,\n                address(this),\n                block.timestamp\n            );\n            address(rewardToken).call{value: address(this).balance}(abi.encodeWithSignature(\"deposit()\"));\n        }else{\n            address[] memory path = new address[](3);\n            path[0] = address(this);\n            path[1] = uniswapV2Router.WETH();\n            path[2] = rewardToken;\n            _approve(address(this), address(uniswapV2Router), tokenAmount);\n            // make the swap\n            uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n                tokenAmount,\n                0,\n                path,\n                address(this),\n                block.timestamp\n            );\n        }\n    }\n  \n      function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\n          // approve token transfer to cover all possible scenarios\n          _approve(address(this), address(uniswapV2Router), tokenAmount);\n          // add the liquidity\n          uniswapV2Router.addLiquidityETH{value: ethAmount}(\n              address(this),\n              tokenAmount,\n              0, // slippage is unavoidable\n              0, // slippage is unavoidable\n              _marketingWalletAddress,\n              block.timestamp\n          );\n  \n      }\n  \n      function swapAndSendDividends(uint256 tokens) private{\n          swapTokensForToken(tokens);\n          AmountTokenRewardsFee = AmountTokenRewardsFee - tokens;\n          uint256 dividends = IERC20(rewardToken).balanceOf(address(this));\n          bool success = IERC20(rewardToken).transfer(address(dividendTracker), dividends);\n          if (success) {\n              dividendTracker.distributeCAKEDividends(dividends);\n              emit SendDividends(tokens, dividends);\n          }\n      }\n  }", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"},{\"internalType\":\"address[4]\",\"name\":\"addrs\",\"type\":\"address[4]\"},{\"internalType\":\"uint256[4]\",\"name\":\"buyFeeSetting_\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[4]\",\"name\":\"sellFeeSetting_\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalanceForReward_\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeMultipleAccountsFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"GasForProcessingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newLiquidityWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldLiquidityWallet\",\"type\":\"address\"}],\"name\":\"LiquidityWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claims\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastProcessedIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"automatic\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"processor\",\"type\":\"address\"}],\"name\":\"ProcessedDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AmountLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AmountMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AmountTokenRewardsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"EnemyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Optimization\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isEnemy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingWalletAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyDeadFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTokenRewardsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"dividendTokenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendTracker\",\"outputs\":[{\"internalType\":\"contract TokenDividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeMultipleAccountsFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasForProcessing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountDividendsInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAccountDividendsInfoAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimWait\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastProcessedIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfDividendTokenHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDividendsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromDividends\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"processDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellDeadFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTokenRewardsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadFee\",\"type\":\"uint256\"}],\"name\":\"setBuyTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setDeadWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadFee\",\"type\":\"uint256\"}],\"name\":\"setSelTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapManual\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimWait\",\"type\":\"uint256\"}],\"name\":\"updateClaimWait\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateGasForProcessing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"updateMinimumTokenBalanceForDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawableDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PICH", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000492559f64e000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e0000000000000000000000003de7b7a2143ae348ae0d223f75b9706a81bdfb4400000000000000000000000051e46fddf884518d96ebea18023f7b2d0a82582ade0b6b3a76400000000000000000000000000000000000000000000000000000000000000000004504943480000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045049434800000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}