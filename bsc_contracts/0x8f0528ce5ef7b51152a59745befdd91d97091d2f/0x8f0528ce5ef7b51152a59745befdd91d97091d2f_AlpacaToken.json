{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2021-02-26\r\n*/\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) public {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal virtual {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// AlpacaToken with Governance.\r\ncontract AlpacaToken is ERC20(\"AlpacaToken\", \"ALPACA\"), Ownable {\r\n  uint256 private _cap = 188000000e18;\r\n  uint256 private _totalLock;\r\n\r\n  uint256 public startReleaseBlock;\r\n  uint256 public endReleaseBlock;\r\n  uint256 public manualMintLimit = 8000000e18;\r\n  uint256 public manualMinted = 0;\r\n\r\n  mapping(address => uint256) private _locks;\r\n  mapping(address => uint256) private _lastUnlockBlock;\r\n\r\n  event Lock(address indexed to, uint256 value);\r\n\r\n  constructor(uint256 _startReleaseBlock, uint256 _endReleaseBlock) public {\r\n    require(_endReleaseBlock > _startReleaseBlock, \"endReleaseBlock < startReleaseBlock\");\r\n    _setupDecimals(18);\r\n    startReleaseBlock = _startReleaseBlock;\r\n    endReleaseBlock = _endReleaseBlock;\r\n\r\n    // maunalMint 250k for seeding liquidity\r\n    manualMint(msg.sender, 250000e18);\r\n  }\r\n\r\n  function setReleaseBlock(uint256 _startReleaseBlock, uint256 _endReleaseBlock) public onlyOwner {\r\n    require(_endReleaseBlock > _startReleaseBlock, \"endReleaseBlock < startReleaseBlock\");\r\n    startReleaseBlock = _startReleaseBlock;\r\n    endReleaseBlock = _endReleaseBlock;\r\n  }\r\n\r\n  function cap() public view returns (uint256) {\r\n    return _cap;\r\n  }\r\n\r\n  function unlockedSupply() public view returns (uint256) {\r\n    return totalSupply().sub(totalLock());\r\n  }\r\n\r\n  function totalLock() public view returns (uint256) {\r\n    return _totalLock;\r\n  }\r\n\r\n  function manualMint(address _to, uint256 _amount) public onlyOwner {\r\n    require(manualMinted <= manualMintLimit, \"mint limit exceeded\");\r\n    mint(_to, _amount);\r\n  }\r\n\r\n  function mint(address _to, uint256 _amount) public onlyOwner {\r\n    require(totalSupply().add(_amount) <= cap(), \"cap exceeded\");\r\n    _mint(_to, _amount);\r\n    _moveDelegates(address(0), _delegates[_to], _amount);\r\n  }\r\n\r\n  function burn(address _account, uint256 _amount) public onlyOwner {\r\n    _burn(_account, _amount);\r\n  }\r\n\r\n  function totalBalanceOf(address _account) public view returns (uint256) {\r\n    return _locks[_account].add(balanceOf(_account));\r\n  }\r\n\r\n  function lockOf(address _account) public view returns (uint256) {\r\n    return _locks[_account];\r\n  }\r\n\r\n  function lastUnlockBlock(address _account) public view returns (uint256) {\r\n    return _lastUnlockBlock[_account];\r\n  }\r\n\r\n  function lock(address _account, uint256 _amount) public onlyOwner {\r\n    require(_account != address(0), \"no lock to address(0)\");\r\n    require(_amount <= balanceOf(_account), \"no lock over balance\");\r\n\r\n    _transfer(_account, address(this), _amount);\r\n\r\n    _locks[_account] = _locks[_account].add(_amount);\r\n    _totalLock = _totalLock.add(_amount);\r\n\r\n    if (_lastUnlockBlock[_account] < startReleaseBlock) {\r\n      _lastUnlockBlock[_account] = startReleaseBlock;\r\n    }\r\n\r\n    emit Lock(_account, _amount);\r\n  }\r\n\r\n  function canUnlockAmount(address _account) public view returns (uint256) {\r\n    // When block number less than startReleaseBlock, no ALPACAs can be unlocked\r\n    if (block.number < startReleaseBlock) {\r\n      return 0;\r\n    }\r\n    // When block number more than endReleaseBlock, all locked ALPACAs can be unlocked\r\n    else if (block.number >= endReleaseBlock) {\r\n      return _locks[_account];\r\n    }\r\n    // When block number is more than startReleaseBlock but less than endReleaseBlock,\r\n    // some ALPACAs can be released\r\n    else\r\n    {\r\n      uint256 releasedBlock = block.number.sub(_lastUnlockBlock[_account]);\r\n      uint256 blockLeft = endReleaseBlock.sub(_lastUnlockBlock[_account]);\r\n      return _locks[_account].mul(releasedBlock).div(blockLeft);\r\n    }\r\n  }\r\n\r\n  function unlock() public {\r\n    require(_locks[msg.sender] > 0, \"no locked ALPACAs\");\r\n\r\n    uint256 amount = canUnlockAmount(msg.sender);\r\n\r\n    _transfer(address(this), msg.sender, amount);\r\n    _locks[msg.sender] = _locks[msg.sender].sub(amount);\r\n    _lastUnlockBlock[msg.sender] = block.number;\r\n    _totalLock = _totalLock.sub(amount);\r\n  }\r\n\r\n  // @dev move ALPACAs with its locked funds to another account\r\n  function transferAll(address _to) public {\r\n    _locks[_to] = _locks[_to].add(_locks[msg.sender]);\r\n\r\n    if (_lastUnlockBlock[_to] < startReleaseBlock) {\r\n      _lastUnlockBlock[_to] = startReleaseBlock;\r\n    }\r\n\r\n    if (_lastUnlockBlock[_to] < _lastUnlockBlock[msg.sender]) {\r\n      _lastUnlockBlock[_to] = _lastUnlockBlock[msg.sender];\r\n    }\r\n\r\n    _locks[msg.sender] = 0;\r\n    _lastUnlockBlock[msg.sender] = 0;\r\n\r\n    _transfer(msg.sender, _to, balanceOf(msg.sender));\r\n  }\r\n\r\n  // Copied and modified from YAM code:\r\n  // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernanceStorage.sol\r\n  // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernance.sol\r\n  // Which is copied and modified from COMPOUND:\r\n  // https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/Comp.sol\r\n\r\n  /// @notice A record of each accounts delegate\r\n  mapping(address => address) internal _delegates;\r\n\r\n  /// @notice A checkpoint for marking number of votes from a given block\r\n  struct Checkpoint {\r\n    uint32 fromBlock;\r\n    uint256 votes;\r\n  }\r\n\r\n  /// @notice A record of votes checkpoints for each account, by index\r\n  mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\r\n\r\n  /// @notice The number of checkpoints for each account\r\n  mapping(address => uint32) public numCheckpoints;\r\n\r\n  /// @notice The EIP-712 typehash for the contract's domain\r\n  bytes32 public constant DOMAIN_TYPEHASH = keccak256(\r\n    \"EIP712Domain(string name,uint256 chainId,address verifyingContract)\"\r\n  );\r\n\r\n  /// @notice The EIP-712 typehash for the delegation struct used by the contract\r\n  bytes32 public constant DELEGATION_TYPEHASH = keccak256(\r\n    \"Delegation(address delegatee,uint256 nonce,uint256 expiry)\"\r\n  );\r\n\r\n  /// @notice A record of states for signing / validating signatures\r\n  mapping(address => uint256) public nonces;\r\n\r\n  /// @notice An event thats emitted when an account changes its delegate\r\n  event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\r\n\r\n  /// @notice An event thats emitted when a delegate account's vote balance changes\r\n  event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\r\n\r\n  /**\r\n    * @notice Delegate votes from `msg.sender` to `delegatee`\r\n    * @param delegator The address to get delegatee for\r\n    */\r\n  function delegates(address delegator) external view returns (address) {\r\n    return _delegates[delegator];\r\n  }\r\n\r\n  /**\r\n    * @notice Delegate votes from `msg.sender` to `delegatee`\r\n    * @param delegatee The address to delegate votes to\r\n    */\r\n  function delegate(address delegatee) external {\r\n    return _delegate(msg.sender, delegatee);\r\n  }\r\n\r\n  /**\r\n    * @notice Delegates votes from signatory to `delegatee`\r\n    * @param delegatee The address to delegate votes to\r\n    * @param nonce The contract state required to match the signature\r\n    * @param expiry The time at which to expire the signature\r\n    * @param v The recovery byte of the signature\r\n    * @param r Half of the ECDSA signature pair\r\n    * @param s Half of the ECDSA signature pair\r\n    */\r\n  function delegateBySig(\r\n    address delegatee,\r\n    uint256 nonce,\r\n    uint256 expiry,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external {\r\n    bytes32 domainSeparator = keccak256(\r\n      abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name())), getChainId(), address(this))\r\n    );\r\n\r\n    bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\r\n\r\n    bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n\r\n    address signatory = ecrecover(digest, v, r, s);\r\n    require(signatory != address(0), \"ALPACA::delegateBySig: invalid signature\");\r\n    require(nonce == nonces[signatory]++, \"ALPACA::delegateBySig: invalid nonce\");\r\n    require(now <= expiry, \"ALPACA::delegateBySig: signature expired\");\r\n    return _delegate(signatory, delegatee);\r\n  }\r\n\r\n  /**\r\n    * @notice Gets the current votes balance for `account`\r\n    * @param account The address to get votes balance\r\n    * @return The number of current votes for `account`\r\n    */\r\n  function getCurrentVotes(address account) external view returns (uint256) {\r\n    uint32 nCheckpoints = numCheckpoints[account];\r\n    return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\r\n  }\r\n\r\n  /**\r\n    * @notice Determine the prior number of votes for an account as of a block number\r\n    * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\r\n    * @param account The address of the account to check\r\n    * @param blockNumber The block number to get the vote balance at\r\n    * @return The number of votes the account had as of the given block\r\n    */\r\n  function getPriorVotes(address account, uint256 blockNumber) external view returns (uint256) {\r\n    require(blockNumber < block.number, \"ALPACA::getPriorVotes: not yet determined\");\r\n\r\n    uint32 nCheckpoints = numCheckpoints[account];\r\n    if (nCheckpoints == 0) {\r\n      return 0;\r\n    }\r\n\r\n    // First check most recent balance\r\n    if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\r\n      return checkpoints[account][nCheckpoints - 1].votes;\r\n    }\r\n\r\n    // Next check implicit zero balance\r\n    if (checkpoints[account][0].fromBlock > blockNumber) {\r\n      return 0;\r\n    }\r\n\r\n    uint32 lower = 0;\r\n    uint32 upper = nCheckpoints - 1;\r\n    while (upper > lower) {\r\n      uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\r\n      Checkpoint memory cp = checkpoints[account][center];\r\n      if (cp.fromBlock == blockNumber) {\r\n        return cp.votes;\r\n      } else if (cp.fromBlock < blockNumber) {\r\n        lower = center;\r\n      } else {\r\n        upper = center - 1;\r\n      }\r\n    }\r\n    return checkpoints[account][lower].votes;\r\n  }\r\n\r\n  function _delegate(address delegator, address delegatee) internal {\r\n    address currentDelegate = _delegates[delegator];\r\n    uint256 delegatorBalance = balanceOf(delegator); // balance of underlying ALPACAs (not scaled);\r\n    _delegates[delegator] = delegatee;\r\n\r\n    emit DelegateChanged(delegator, currentDelegate, delegatee);\r\n\r\n    _moveDelegates(currentDelegate, delegatee, delegatorBalance);\r\n  }\r\n\r\n  function _moveDelegates(\r\n    address srcRep,\r\n    address dstRep,\r\n    uint256 amount\r\n  ) internal {\r\n    if (srcRep != dstRep && amount > 0) {\r\n      if (srcRep != address(0)) {\r\n        // decrease old representative\r\n        uint32 srcRepNum = numCheckpoints[srcRep];\r\n        uint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\r\n        uint256 srcRepNew = srcRepOld.sub(amount);\r\n        _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\r\n      }\r\n\r\n      if (dstRep != address(0)) {\r\n        // increase new representative\r\n        uint32 dstRepNum = numCheckpoints[dstRep];\r\n        uint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\r\n        uint256 dstRepNew = dstRepOld.add(amount);\r\n        _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\r\n      }\r\n    }\r\n  }\r\n\r\n  function _writeCheckpoint(\r\n    address delegatee,\r\n    uint32 nCheckpoints,\r\n    uint256 oldVotes,\r\n    uint256 newVotes\r\n  ) internal {\r\n    uint32 blockNumber = safe32(block.number, \"ALPACA::_writeCheckpoint: block number exceeds 32 bits\");\r\n\r\n    if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\r\n      checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\r\n    } else {\r\n      checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\r\n      numCheckpoints[delegatee] = nCheckpoints + 1;\r\n    }\r\n\r\n    emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\r\n  }\r\n\r\n  function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\r\n    require(n < 2**32, errorMessage);\r\n    return uint32(n);\r\n  }\r\n\r\n  function getChainId() internal pure returns (uint256) {\r\n    uint256 chainId;\r\n    assembly {\r\n      chainId := chainid()\r\n    }\r\n    return chainId;\r\n  }\r\n}\r\n\r\ninterface IFairLaunch {\r\n  function poolLength() external view returns (uint256);\r\n\r\n  function addPool(\r\n    uint256 _allocPoint,\r\n    address _stakeToken,\r\n    bool _withUpdate\r\n  ) external;\r\n\r\n  function setPool(\r\n    uint256 _pid,\r\n    uint256 _allocPoint,\r\n    bool _withUpdate\r\n  ) external;\r\n\r\n  function pendingAlpaca(uint256 _pid, address _user) external view returns (uint256);\r\n\r\n  function updatePool(uint256 _pid) external;\r\n\r\n  function deposit(address _for, uint256 _pid, uint256 _amount) external;\r\n\r\n  function withdraw(address _for, uint256 _pid, uint256 _amount) external;\r\n\r\n  function withdrawAll(address _for, uint256 _pid) external;\r\n\r\n  function harvest(uint256 _pid) external;\r\n}\r\n\r\n// FairLaunch is a smart contract for distributing ALPACA by asking user to stake the ERC20-based token.\r\ncontract FairLaunch is IFairLaunch, Ownable {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for IERC20;\r\n\r\n  // Info of each user.\r\n  struct UserInfo {\r\n    uint256 amount; // How many Staking tokens the user has provided.\r\n    uint256 rewardDebt; // Reward debt. See explanation below.\r\n    uint256 bonusDebt; // Last block that user exec something to the pool.\r\n    address fundedBy; // Funded by who?\r\n    //\r\n    // We do some fancy math here. Basically, any point in time, the amount of ALPACAs\r\n    // entitled to a user but is pending to be distributed is:\r\n    //\r\n    //   pending reward = (user.amount * pool.accAlpacaPerShare) - user.rewardDebt\r\n    //\r\n    // Whenever a user deposits or withdraws Staking tokens to a pool. Here's what happens:\r\n    //   1. The pool's `accAlpacaPerShare` (and `lastRewardBlock`) gets updated.\r\n    //   2. User receives the pending reward sent to his/her address.\r\n    //   3. User's `amount` gets updated.\r\n    //   4. User's `rewardDebt` gets updated.\r\n  }\r\n\r\n  // Info of each pool.\r\n  struct PoolInfo {\r\n    address stakeToken; // Address of Staking token contract.\r\n    uint256 allocPoint; // How many allocation points assigned to this pool. ALPACAs to distribute per block.\r\n    uint256 lastRewardBlock; // Last block number that ALPACAs distribution occurs.\r\n    uint256 accAlpacaPerShare; // Accumulated ALPACAs per share, times 1e12. See below.\r\n    uint256 accAlpacaPerShareTilBonusEnd; // Accumated ALPACAs per share until Bonus End.\r\n  }\r\n\r\n  // The Alpaca TOKEN!\r\n  AlpacaToken public alpaca;\r\n  // Dev address.\r\n  address public devaddr;\r\n  // ALPACA tokens created per block.\r\n  uint256 public alpacaPerBlock;\r\n  // Bonus muliplier for early alpaca makers.\r\n  uint256 public bonusMultiplier;\r\n  // Block number when bonus ALPACA period ends.\r\n  uint256 public bonusEndBlock;\r\n  // Bonus lock-up in BPS\r\n  uint256 public bonusLockUpBps;\r\n\r\n  // Info of each pool.\r\n  PoolInfo[] public poolInfo;\r\n  // Info of each user that stakes Staking tokens.\r\n  mapping(uint256 => mapping(address => UserInfo)) public userInfo;\r\n  // Total allocation poitns. Must be the sum of all allocation points in all pools.\r\n  uint256 public totalAllocPoint;\r\n  // The block number when ALPACA mining starts.\r\n  uint256 public startBlock;\r\n\r\n  event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n  event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n  event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n\r\n  constructor(\r\n    AlpacaToken _alpaca,\r\n    address _devaddr,\r\n    uint256 _alpacaPerBlock,\r\n    uint256 _startBlock,\r\n    uint256 _bonusLockupBps,\r\n    uint256 _bonusEndBlock\r\n  ) public {\r\n    bonusMultiplier = 0;\r\n    totalAllocPoint = 0;\r\n    alpaca = _alpaca;\r\n    devaddr = _devaddr;\r\n    alpacaPerBlock = _alpacaPerBlock;\r\n    bonusLockUpBps = _bonusLockupBps;\r\n    bonusEndBlock = _bonusEndBlock;\r\n    startBlock = _startBlock;\r\n  }\r\n\r\n  /*\r\n  \u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2588\u2557\u2003\u2003\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\r\n  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2551\u2003\u2003\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\r\n  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2588\u2588\u2554\u2588\u2588\u2551\u2003\u2003\u255a\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\r\n  \u2588\u2588\u2554\u2550\u2550\u2550\u255d\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2003\u2003\u2591\u255a\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\r\n  \u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u255a\u2550\u255d\u2591\u2588\u2588\u2551\u2003\u2003\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\r\n  \u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u2003\u2003\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\r\n  */\r\n\r\n  // Update dev address by the previous dev.\r\n  function setDev(address _devaddr) public {\r\n    require(msg.sender == devaddr, \"dev: wut?\");\r\n    devaddr = _devaddr;\r\n  }\r\n\r\n  function setAlpacaPerBlock(uint256 _alpacaPerBlock) public onlyOwner {\r\n    alpacaPerBlock = _alpacaPerBlock;\r\n  }\r\n\r\n  // Set Bonus params. bonus will start to accu on the next block that this function executed\r\n  // See the calculation and counting in test file.\r\n  function setBonus(\r\n    uint256 _bonusMultiplier,\r\n    uint256 _bonusEndBlock,\r\n    uint256 _bonusLockUpBps\r\n  ) public onlyOwner {\r\n    require(_bonusEndBlock > block.number, \"setBonus: bad bonusEndBlock\");\r\n    require(_bonusMultiplier > 1, \"setBonus: bad bonusMultiplier\");\r\n    bonusMultiplier = _bonusMultiplier;\r\n    bonusEndBlock = _bonusEndBlock;\r\n    bonusLockUpBps = _bonusLockUpBps;\r\n  }\r\n\r\n  // Add a new lp to the pool. Can only be called by the owner.\r\n  function addPool(\r\n    uint256 _allocPoint,\r\n    address _stakeToken,\r\n    bool _withUpdate\r\n  ) public override onlyOwner {\r\n    if (_withUpdate) {\r\n      massUpdatePools();\r\n    }\r\n    require(_stakeToken != address(0), \"add: not stakeToken addr\");\r\n    require(!isDuplicatedPool(_stakeToken), \"add: stakeToken dup\");\r\n    uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\r\n    totalAllocPoint = totalAllocPoint.add(_allocPoint);\r\n    poolInfo.push(\r\n      PoolInfo({\r\n        stakeToken: _stakeToken,\r\n        allocPoint: _allocPoint,\r\n        lastRewardBlock: lastRewardBlock,\r\n        accAlpacaPerShare: 0,\r\n        accAlpacaPerShareTilBonusEnd: 0\r\n      })\r\n    );\r\n  }\r\n\r\n  // Update the given pool's ALPACA allocation point. Can only be called by the owner.\r\n  function setPool(\r\n    uint256 _pid,\r\n    uint256 _allocPoint,\r\n    bool _withUpdate\r\n  ) public override onlyOwner {\r\n    if (_withUpdate) {\r\n      massUpdatePools();\r\n    }\r\n    totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\r\n    poolInfo[_pid].allocPoint = _allocPoint;\r\n  }\r\n\r\n  /*\r\n  \u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\r\n  \u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2588\u2588\u2554\u255d\r\n  \u2591\u255a\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2550\u255d\u2591\r\n  \u2591\u2591\u2588\u2588\u2588\u2588\u2554\u2550\u2588\u2588\u2588\u2588\u2551\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2588\u2588\u2557\u2591\r\n  \u2591\u2591\u255a\u2588\u2588\u2554\u255d\u2591\u255a\u2588\u2588\u2554\u255d\u2591\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u255a\u2588\u2588\u2557\r\n  \u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\r\n  */\r\n\r\n  function isDuplicatedPool(address _stakeToken) public view returns (bool) {\r\n    uint256 length = poolInfo.length;\r\n    for (uint256 _pid = 0; _pid < length; _pid++) {\r\n      if(poolInfo[_pid].stakeToken == _stakeToken) return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function poolLength() external override view returns (uint256) {\r\n    return poolInfo.length;\r\n  }\r\n\r\n  function manualMint(address _to, uint256 _amount) public onlyOwner {\r\n    alpaca.manualMint(_to, _amount);\r\n  }\r\n\r\n  // Return reward multiplier over the given _from to _to block.\r\n  function getMultiplier(uint256 _lastRewardBlock, uint256 _currentBlock) public view returns (uint256) {\r\n    if (_currentBlock <= bonusEndBlock) {\r\n      return _currentBlock.sub(_lastRewardBlock).mul(bonusMultiplier);\r\n    }\r\n    if (_lastRewardBlock >= bonusEndBlock) {\r\n      return _currentBlock.sub(_lastRewardBlock);\r\n    }\r\n    // This is the case where bonusEndBlock is in the middle of _lastRewardBlock and _currentBlock block.\r\n    return bonusEndBlock.sub(_lastRewardBlock).mul(bonusMultiplier).add(_currentBlock.sub(bonusEndBlock));\r\n  }\r\n\r\n  // View function to see pending ALPACAs on frontend.\r\n  function pendingAlpaca(uint256 _pid, address _user) external override view returns (uint256) {\r\n    PoolInfo storage pool = poolInfo[_pid];\r\n    UserInfo storage user = userInfo[_pid][_user];\r\n    uint256 accAlpacaPerShare = pool.accAlpacaPerShare;\r\n    uint256 lpSupply = IERC20(pool.stakeToken).balanceOf(address(this));\r\n    if (block.number > pool.lastRewardBlock && lpSupply != 0) {\r\n      uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\r\n      uint256 alpacaReward = multiplier.mul(alpacaPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\r\n      accAlpacaPerShare = accAlpacaPerShare.add(alpacaReward.mul(1e12).div(lpSupply));\r\n    }\r\n    return user.amount.mul(accAlpacaPerShare).div(1e12).sub(user.rewardDebt);\r\n  }\r\n\r\n  // Update reward vairables for all pools. Be careful of gas spending!\r\n  function massUpdatePools() public {\r\n    uint256 length = poolInfo.length;\r\n    for (uint256 pid = 0; pid < length; ++pid) {\r\n      updatePool(pid);\r\n    }\r\n  }\r\n\r\n  // Update reward variables of the given pool to be up-to-date.\r\n  function updatePool(uint256 _pid) public override {\r\n    PoolInfo storage pool = poolInfo[_pid];\r\n    if (block.number <= pool.lastRewardBlock) {\r\n      return;\r\n    }\r\n    uint256 lpSupply = IERC20(pool.stakeToken).balanceOf(address(this));\r\n    if (lpSupply == 0) {\r\n      pool.lastRewardBlock = block.number;\r\n      return;\r\n    }\r\n    uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\r\n    uint256 alpacaReward = multiplier.mul(alpacaPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\r\n    alpaca.mint(devaddr, alpacaReward.div(10));\r\n    alpaca.mint(address(this), alpacaReward);\r\n    pool.accAlpacaPerShare = pool.accAlpacaPerShare.add(alpacaReward.mul(1e12).div(lpSupply));\r\n    // update accAlpacaPerShareTilBonusEnd\r\n    if (block.number <= bonusEndBlock) {\r\n      alpaca.lock(devaddr, alpacaReward.div(10).mul(bonusLockUpBps).div(10000));\r\n      pool.accAlpacaPerShareTilBonusEnd = pool.accAlpacaPerShare;\r\n    }\r\n    if(block.number > bonusEndBlock && pool.lastRewardBlock < bonusEndBlock) {\r\n      uint256 alpacaBonusPortion = bonusEndBlock.sub(pool.lastRewardBlock).mul(bonusMultiplier).mul(alpacaPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\r\n      alpaca.lock(devaddr, alpacaBonusPortion.div(10).mul(bonusLockUpBps).div(10000));\r\n      pool.accAlpacaPerShareTilBonusEnd = pool.accAlpacaPerShareTilBonusEnd.add(alpacaBonusPortion.mul(1e12).div(lpSupply));\r\n    }\r\n    pool.lastRewardBlock = block.number;\r\n  }\r\n\r\n  // Deposit Staking tokens to FairLaunchToken for ALPACA allocation.\r\n  function deposit(address _for, uint256 _pid, uint256 _amount) public override {\r\n    PoolInfo storage pool = poolInfo[_pid];\r\n    UserInfo storage user = userInfo[_pid][_for];\r\n    if (user.fundedBy != address(0)) require(user.fundedBy == msg.sender, \"bad sof\");\r\n    require(pool.stakeToken != address(0), \"deposit: not accept deposit\");\r\n    updatePool(_pid);\r\n    if (user.amount > 0) _harvest(_for, _pid);\r\n    if (user.fundedBy == address(0)) user.fundedBy = msg.sender;\r\n    IERC20(pool.stakeToken).safeTransferFrom(address(msg.sender), address(this), _amount);\r\n    user.amount = user.amount.add(_amount);\r\n    user.rewardDebt = user.amount.mul(pool.accAlpacaPerShare).div(1e12);\r\n    user.bonusDebt = user.amount.mul(pool.accAlpacaPerShareTilBonusEnd).div(1e12);\r\n    emit Deposit(msg.sender, _pid, _amount);\r\n  }\r\n\r\n  // Withdraw Staking tokens from FairLaunchToken.\r\n  function withdraw(address _for, uint256 _pid, uint256 _amount) public override {\r\n    _withdraw(_for, _pid, _amount);\r\n  }\r\n\r\n  function withdrawAll(address _for, uint256 _pid) public override {\r\n    _withdraw(_for, _pid, userInfo[_pid][_for].amount);\r\n  }\r\n\r\n  function _withdraw(address _for, uint256 _pid, uint256 _amount) internal {\r\n    PoolInfo storage pool = poolInfo[_pid];\r\n    UserInfo storage user = userInfo[_pid][_for];\r\n    require(user.fundedBy == msg.sender, \"only funder\");\r\n    require(user.amount >= _amount, \"withdraw: not good\");\r\n    updatePool(_pid);\r\n    _harvest(_for, _pid);\r\n    user.amount = user.amount.sub(_amount);\r\n    user.rewardDebt = user.amount.mul(pool.accAlpacaPerShare).div(1e12);\r\n    user.bonusDebt = user.amount.mul(pool.accAlpacaPerShareTilBonusEnd).div(1e12);\r\n    if (pool.stakeToken != address(0)) {\r\n      IERC20(pool.stakeToken).safeTransfer(address(msg.sender), _amount);\r\n    }\r\n    emit Withdraw(msg.sender, _pid, user.amount);\r\n  }\r\n\r\n  // Harvest ALPACAs earn from the pool.\r\n  function harvest(uint256 _pid) public override {\r\n    PoolInfo storage pool = poolInfo[_pid];\r\n    UserInfo storage user = userInfo[_pid][msg.sender];\r\n    updatePool(_pid);\r\n    _harvest(msg.sender, _pid);\r\n    user.rewardDebt = user.amount.mul(pool.accAlpacaPerShare).div(1e12);\r\n    user.bonusDebt = user.amount.mul(pool.accAlpacaPerShareTilBonusEnd).div(1e12);\r\n  }\r\n\r\n  function _harvest(address _to, uint256 _pid) internal {\r\n    PoolInfo storage pool = poolInfo[_pid];\r\n    UserInfo storage user = userInfo[_pid][_to];\r\n    require(user.amount > 0, \"nothing to harvest\");\r\n    uint256 pending = user.amount.mul(pool.accAlpacaPerShare).div(1e12).sub(user.rewardDebt);\r\n    require(pending <= alpaca.balanceOf(address(this)), \"wtf not enough alpaca\");\r\n    uint256 bonus = user.amount.mul(pool.accAlpacaPerShareTilBonusEnd).div(1e12).sub(user.bonusDebt);\r\n    safeAlpacaTransfer(_to, pending);\r\n    alpaca.lock(_to, bonus.mul(bonusLockUpBps).div(10000));\r\n  }\r\n\r\n  // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n  function emergencyWithdraw(uint256 _pid) public {\r\n    PoolInfo storage pool = poolInfo[_pid];\r\n    UserInfo storage user = userInfo[_pid][msg.sender];\r\n    IERC20(pool.stakeToken).safeTransfer(address(msg.sender), user.amount);\r\n    emit EmergencyWithdraw(msg.sender, _pid, user.amount);\r\n    user.amount = 0;\r\n    user.rewardDebt = 0;\r\n  }\r\n\r\n    // Safe alpaca transfer function, just in case if rounding error causes pool to not have enough ALPACAs.\r\n  function safeAlpacaTransfer(address _to, uint256 _amount) internal {\r\n    uint256 alpacaBal = alpaca.balanceOf(address(this));\r\n    if (_amount > alpacaBal) {\r\n      alpaca.transfer(_to, alpacaBal);\r\n    } else {\r\n      alpaca.transfer(_to, _amount);\r\n    }\r\n  }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endReleaseBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELEGATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"canUnlockAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endReleaseBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCurrentVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPriorVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"lastUnlockBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"lockOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"manualMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualMintLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endReleaseBlock\",\"type\":\"uint256\"}],\"name\":\"setReleaseBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startReleaseBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"totalBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AlpacaToken", "CompilerVersion": "v0.6.6+commit.6c089d02", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000632d410000000000000000000000000000000000000000000000000000000000663a81", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d14cba8cfdfc68cd304b4f3aa05e1d3557635990fa63d029452b55e718c31177"}