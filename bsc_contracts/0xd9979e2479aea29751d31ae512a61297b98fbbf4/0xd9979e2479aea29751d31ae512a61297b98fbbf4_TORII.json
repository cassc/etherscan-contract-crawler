{"SourceCode": "/** \r\n\r\n\t___________________ __________.___.___ \r\n\t\\__    ___/\\_____  \\\\______   \\   |   |\r\n\t  |    |    /   |   \\|       _/   |   |\r\n\t  |    |   /    |    \\    |   \\   |   |\r\n\t  |____|   \\_______  /____|_  /___|___|\r\n\t                   \\/       \\/         \r\n                                                                        \r\n         *****************************                                                        \r\n                    TORII v2 \r\n\t\t\t\t\t     \r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.9;\r\n\r\n// ----------------------------------------------- Context ---------------------------------------------------\r\ncontract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// ----------------------------------------------- Ownable ---------------------------------------------------\r\ncontract Ownable is Context {\r\n    address _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), 'Ownable: caller is not the owner');\r\n        _;\r\n    }    \r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), 'Ownable: new owner is the zero address');\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// ----------------------------------------------- Pausable ---------------------------------------------------\r\ncontract Pausable is Ownable {\r\n\tevent Pause();\r\n\tevent Unpause();\r\n\tbool public paused = false;  \r\n\tmodifier whenNotPaused() {\r\n\t\trequire(!paused);\r\n\t\t_;\r\n\t}  \r\n\tmodifier whenPaused() {\r\n\t\trequire(paused);\r\n\t\t_;\r\n\t}  \r\n\tfunction pause() onlyOwner whenNotPaused public {\r\n\t\tpaused = true;\r\n\t\temit Pause();\r\n\t}\t\r\n\tfunction unpause() onlyOwner whenPaused public {\r\n\t\tpaused = false;\r\n\t\temit Unpause();\r\n\t}\r\n}\r\n\r\n// ----------------------------------------------- IBEP20 ---------------------------------------------------\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// ----------------------------------------------- SafeMath ---------------------------------------------------\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, 'SafeMath: addition overflow');\r\n        return c;\r\n    }\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, 'SafeMath: subtraction overflow');\r\n    }\r\n    function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, 'SafeMath: multiplication overflow');\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, 'SafeMath: division by zero');\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }    \r\n}\r\n\r\n// ----------------------------------------------- Address ---------------------------------------------------\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, 'Address: insufficient balance');\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}('');\r\n        require(success, 'Address: unable to send value, recipient may have reverted');\r\n    }\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, 'Address: low-level call failed');\r\n    }\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, 'Address: low-level call with value failed');\r\n    }\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, 'Address: insufficient balance for call');\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), 'Address: call to non-contract');\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// ----------------------------------------------- BEP20 ---------------------------------------------------\r\nabstract contract BEP20 is Context, IBEP20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping(address => uint256) _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) _allowances;\r\n\r\n    uint256 _totalSupply;\r\n\r\n    string _name;\r\n    string _symbol;\r\n    uint8 _decimals;\r\n    \r\n    function getOwner() external override view returns (address) {\r\n        return owner();\r\n    }\r\n   \r\n    function name() public override view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() public override view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n   \r\n    function symbol() public override view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function totalSupply() public override view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public override view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(address owner, address spender) public override view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    \r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n    \r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(subtractedValue, 'BEP20: decreased allowance below zero')\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), 'BEP20: mint to the zero address');\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n    \r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        require(owner != address(0), 'BEP20: approve from the zero address');\r\n        require(spender != address(0), 'BEP20: approve to the zero address');\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n}\r\n\r\nlibrary SafeBEP20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IBEP20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\t\r\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeBEP20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            require(abi.decode(returndata, (bool)), \"SafeBEP20: BEP20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// ----------------------------------------------- PancakeSwap ---------------------------------------------------\r\ninterface IPancakeSwapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);    \r\n}\r\ninterface IPancakeSwapV2Router02 is IPancakeSwapV2Router01 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;   \r\n}\r\ninterface IPancakeSwapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\n// ---------------------------------------------------------------------------------------------------------------\r\n// ----------------------------------------------- TORII ---------------------------------------------------------\r\n// ---------------------------------------------------------------------------------------------------------------\r\ncontract TORII is BEP20, Pausable { \r\n\tusing SafeMath for uint256; \r\n\tusing SafeBEP20 for IBEP20;\r\n\t\r\n\tuint256 public immutable MAX_SYPPLY; \r\n\tuint256 MAX_INT = 2**256 - 1;\r\n    \r\n\tuint256 public maxTransferAmount;\r\n\tuint256 public maxTaxFreeTransferAmount;\t\t\r\n\tuint256 public taxPercent;  \r\n\t\t         \r\n    mapping (address => bool) public taxExcludedList;\r\n\tmapping (address => bool) public operatorsList;\r\n\tmapping (address => bool) public exchangesList;\t\r\n\tmapping (address => bool) public blackList;\t\r\n    \t\t\t\r\n\tIPancakeSwapV2Router02 public immutable pancakeSwapV2Router;\r\n\taddress public immutable pancakeSwapV2Pair;\r\n\r\n\tuint256 public lpUnlockTimestamp;\r\n\tbool inSwapAndLiquify;\r\n\tbool lockingLiquidity;\r\n    bool public swapAndLiquifyEnabled;\r\n\tuint256 public addToLiquidityAmount;\r\n\r\n\tmodifier onlyOperator() {\r\n        require(operatorsList[_msgSender()], 'TORII: caller is not the operator');\r\n        _;\r\n    }\r\n\r\n\tmodifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n\tmodifier lockLiquidity {\r\n        lockingLiquidity = true;\r\n        _;\r\n        lockingLiquidity = false;\r\n    }\r\n\r\n\tevent Taxed(address from, address to, uint256 value);\r\n\tevent SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity);\r\n\tevent Liquify(address from, uint256 tokenAmount, uint256 ethAmount);\r\n\tevent LpLocked(uint256 lockTime, uint256 unlockTime);\r\n\t\r\n\tconstructor(){\r\n\t    _name = 'TORII';\r\n        _symbol = 'TORII';\r\n        _decimals = 18;\r\n\t\tMAX_SYPPLY = 32000 * 1e18;\r\n\r\n\t\tpancakeSwapV2Router = IPancakeSwapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\t\tpancakeSwapV2Pair = IPancakeSwapV2Factory(pancakeSwapV2Router.factory())\r\n            .createPair(address(this), pancakeSwapV2Router.WETH());\r\n\t\texchangesList[pancakeSwapV2Pair] = true;\r\n\r\n\t\tswapAndLiquifyEnabled = true;\t\t\t\t\r\n\t\taddToLiquidityAmount = 3 * 1e18;\r\n\t\tmaxTaxFreeTransferAmount = 3 * 1e18;\r\n\t\tmaxTransferAmount = 6 * 1e18;\t\r\n\t\ttaxPercent = 100; // 1%\t\r\n        \r\n\t\ttaxExcludedList[address(this)] = true; \r\n\t\t\r\n\t\t_owner = _msgSender();\r\n\t\ttaxExcludedList[_owner] = true;\r\n   \t}\r\n\r\n\tfunction addLockedLiquidity(uint256 tokenAmount, uint256 bnbAmount) public payable lockLiquidity onlyOperator {\r\n        uint256 currentBalance = balanceOf(address(this));\t\t\t\t\r\n\t\tif ( tokenAmount > currentBalance ) {\r\n\t\t\tmintTo(address(this), tokenAmount.sub(currentBalance));\r\n\t\t}\r\n\t\trequire(bnbAmount <= address(this).balance, 'TORII: not enough BNB');\r\n        \r\n        addLiquidity(tokenAmount, bnbAmount);\r\n\t\temit Liquify(_msgSender(), tokenAmount, bnbAmount);\r\n    }\r\n\r\n\tfunction addLiquidity(uint256 tokenAmount, uint256 bnbAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(pancakeSwapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\t\t\r\n        pancakeSwapV2Router.addLiquidityETH{ value: bnbAmount }(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            address(this),\r\n            block.timestamp\r\n        );\t\t\t\t\r\n    }\r\n\r\n\tfunction swapAndLiquify(uint256 amount) private lockTheSwap {\r\n        // split the contract balance into halves\r\n        uint256 half = amount.div(2);\r\n        uint256 otherHalf = amount.sub(half);\r\n\r\n        // capture the contract's current BNB balance.\r\n        // this is so that we can capture exactly the amount of BNB that the\r\n        // swap creates, and not make the liquidity event include any BNB that\r\n        // has been manually sent to the contract\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        // swap tokens for BNB\r\n        swapTokensForBnb(half); // <- this breaks the BNB -> swap when swap + liquify is triggered\r\n\r\n        // how much BNB did we just swap into?\r\n        uint256 newBalance = address(this).balance.sub(initialBalance);\r\n\r\n        // add liquidity to pancakeSwap\r\n        addLiquidity(otherHalf, newBalance);\r\n        \r\n        emit SwapAndLiquify(half, newBalance, otherHalf);\r\n    }\r\n\r\n\tfunction swapTokensForBnb(uint256 tokenAmount) private {\r\n        // generate the pancakeSwap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = pancakeSwapV2Router.WETH();\r\n\r\n        _approve(address(this), address(pancakeSwapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        pancakeSwapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of BNB\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n\t\trequire(!blackList[sender] && !blackList[recipient], 'TORII: transfer from/to blacklisted address');\t\t\r\n        require(sender != address(0), 'TORII: transfer from the zero address');\r\n        require(recipient != address(0), 'TORII: transfer to the zero address');\r\n\t\tif ( paused ) {\r\n\t\t    require(operatorsList[sender], \"TORII: sender not whitelist to transfer when paused\");\r\n\t\t}\r\n\t\t\r\n\t\tbool takeTax = false; \t\r\n\t\t\r\n\t\t// tax and max transfer check\r\n\t\tif ( \r\n        \t!inSwapAndLiquify && // if not adding liquidity auto now       \t\r\n            !lockingLiquidity && // if not adding liquidity manual now\r\n            sender != address(pancakeSwapV2Router) && // router -> pair is removing liquidity which shouldn't have max\r\n            exchangesList[recipient] && // sells only by detecting transfer to market maker pair\r\n            !taxExcludedList[sender] && // no max for those excluded\r\n\t\t\t!operatorsList[sender]\r\n        ) {\r\n            require(amount <= maxTransferAmount, \"TORII: sell transfer amount exceeds the max allowed\");\r\n\t\t\tif (\r\n\t\t\t\ttaxPercent != 0 &&\r\n\t\t\t\tamount > maxTaxFreeTransferAmount\t\t\t\t\t\t\t\r\n\t\t\t) {\r\n\t\t\t\ttakeTax = true;\r\n\t\t\t}\r\n        }\r\n\t\t\r\n\t\t// auto add to liquidity\r\n        if (\r\n\t\t\tswapAndLiquifyEnabled && // if enabled\r\n\t\t\tbalanceOfToken() >= addToLiquidityAmount && // if balance more than min add to liquidity\r\n            !inSwapAndLiquify && // if not adding liquidity auto now  \r\n            !lockingLiquidity && // if not adding liquidity manual now\r\n            sender != pancakeSwapV2Pair &&\r\n\t\t\tsender != address(pancakeSwapV2Router) && // router -> pair is removing liquidity \r\n\t\t\tsender != address(this) &&\r\n\t\t\t!exchangesList[sender] && // sells only by detecting transfer to market maker pair\r\n            !taxExcludedList[sender] && // if sender not excluded from tax \r\n\t\t\t!operatorsList[sender] &&  // if not operator \r\n            recipient != address(this)\r\n        ) {\r\n            swapAndLiquify(addToLiquidityAmount); // add liquidity\r\n        }\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, 'TORII: transfer amount exceeds balance');\r\n        \r\n\t\t// tax\r\n\t\tuint256 taxAmount;\t\t\t\r\n\t\tif ( takeTax ) { \r\n            taxAmount = amount.mul(taxPercent).div(10000);\r\n\t\t\tamount = amount.sub(taxAmount);\r\n\t\t\t_balances[address(this)] = _balances[address(this)].add(taxAmount);\r\n\t\t\temit Taxed(sender, recipient, taxAmount);\r\n\t\t\temit Transfer(sender, address(this), taxAmount);\t\t\r\n        }\r\n\t\t\r\n\t\t_balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n\tfunction balanceOfToken() public view returns (uint256) {\r\n        return balanceOf(address(this));\r\n    }\r\n\r\n\tfunction balanceOfBnb() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n\tfunction balanceOfLp() public view returns (uint256) {\r\n        return IBEP20(pancakeSwapV2Pair).balanceOf(address(this));\r\n    }\r\n\r\n\tfunction balanceOfBep20(address token) public view returns (uint256) {\r\n        return IBEP20(token).balanceOf(address(this));\r\n    }\r\n\t\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, 'TORII: transfer amount exceeds allowance') );\r\n        return true;\r\n    }\r\n\r\n\tfunction lockLpTokens(uint256 unlockTimestamp) external onlyOwner {\r\n\t\trequire(lpUnlockTimestamp <= block.timestamp, 'TORII: already locked');\r\n\t\tlpUnlockTimestamp = block.timestamp;\r\n\t\temit LpLocked(block.timestamp, unlockTimestamp);\t\r\n\t}\r\n\r\n\tfunction toggleOperatorsList(address account) external onlyOwner returns (bool) {\r\n\t\toperatorsList[account] = !operatorsList[account];\t\r\n\t\treturn operatorsList[account];\r\n\t}\r\n   \t\t    \r\n\t// set tax: 100 = 1%, 50 = 0,5%, 350 = 3,5%, 1000 = 10% (MAX), 0 for no tax\r\n    function setTaxPercent(uint256 newTaxPercent) external onlyOwner {\r\n\t\trequire(newTaxPercent <= 1200, 'TORII: tax can`t be more than 12%');\r\n\t\ttaxPercent = newTaxPercent;\t\r\n\t}\r\n\t\r\n    function setMaxTransferAmount(uint256 newMaxTransferAmount) external onlyOwner {\r\n\t\tmaxTransferAmount = newMaxTransferAmount;\t\r\n\t}\r\n\r\n\tfunction toggleExchangesList(address account) external onlyOwner returns (bool) {\r\n\t\trequire(account != pancakeSwapV2Pair, 'TORII: pancakeSwapV2Pair can`t be removed from list');\r\n\t\texchangesList[account] = !exchangesList[account];\t\r\n\t\treturn exchangesList[account];\r\n\t}\r\n\r\n\tfunction toggleBlackList(address account) external onlyOwner returns (bool) {\r\n\t\tblackList[account] = !blackList[account];\t\r\n\t\treturn blackList[account];\r\n\t}\r\n\r\n\tfunction toggleSwapAndLiquifyEnabled() external onlyOwner returns (bool) {\r\n\t\tswapAndLiquifyEnabled = !swapAndLiquifyEnabled;\r\n\t\treturn swapAndLiquifyEnabled;\t\r\n\t}\r\n\r\n\tfunction toggleTaxExcluded(address account) external onlyOwner returns (bool) {\r\n\t\ttaxExcludedList[account] = !taxExcludedList[account];\t\r\n\t\treturn taxExcludedList[account];\r\n\t}\r\n\t\r\n\tfunction setAddToLiquidityAmount(uint256 newAddToLiquidityAmount) external onlyOwner {\r\n\t\taddToLiquidityAmount = newAddToLiquidityAmount;\t\r\n\t}\r\n\t\r\n\tfunction setMaxTaxFreeTransferAmount(uint256 newMaxTaxFreeTransferAmount) external onlyOwner {\r\n\t\tmaxTaxFreeTransferAmount = newMaxTaxFreeTransferAmount;\t\r\n\t}\r\n\t\r\n\t// drop to list of recipients with different amounts for each\t\r\n   \tfunction migrateAccounts(address[] memory recipients, uint256[] memory amounts) public onlyOperator returns (uint256 amountTotal) {\r\n        uint8 cnt = uint8(recipients.length);\r\n        require(cnt > 0 && cnt <= 255, 'TORII: number or recipients must be more then 0 and not much than 255');\r\n        require(amounts.length == recipients.length, 'TORII: number or recipients must be equal to number of amounts');\r\n        for ( uint i = 0; i < cnt; i++ ){\r\n\t\t\trequire(amounts[i] != 0, 'TORII: you can`t drop 0');\r\n            amountTotal = amountTotal.add(amounts[i]);\r\n\t\t\tmintTo(recipients[i], amounts[i]);\r\n        }        \r\n        return amountTotal;\r\n    }\r\n\r\n\tfunction availableTokensToMint() public view returns (uint256) {\r\n   \t    return MAX_SYPPLY.sub(_totalSupply); \r\n    }\r\n   \t \t   \t\r\n   \tfunction mint(uint256 amount) public onlyOperator {\r\n\t\trequire(_totalSupply.add(amount) <= MAX_SYPPLY, 'TORII: exceed max supply');\r\n        _mint(_msgSender(), amount);        \r\n    }\r\n    \r\n    function mintTo(address recipient, uint256 amount) public onlyOperator {\r\n        require(_totalSupply.add(amount) <= MAX_SYPPLY, 'TORII: exceed max supply');\r\n        _mint(recipient, amount);        \r\n    }\r\n\r\n\tfunction recoverTokens(address token, uint256 amount) external onlyOwner {\r\n        if (token == pancakeSwapV2Pair) {\r\n\t\t\trequire(lpUnlockTimestamp <= block.timestamp, 'TORII: can`t withdraw LP tokens before unlock time');\t\t\t\r\n\t\t}\t\t\t\t\r\n\t\tIBEP20(token).safeTransfer(_msgSender(), amount);        \r\n    }\r\n\r\n\tfunction recoverBnb(uint256 amount) external onlyOwner {\t\t\r\n\t\trequire(amount <= balanceOfBnb(), 'TORII: transfer amount exceeds BNB balance');\r\n        (bool sent,) = _msgSender().call{ value: amount }(\"\");\r\n        require(sent, 'TORII: failed');       \r\n    }\r\n        \r\n\t//to recieve BNB from pancakeSwapV2Router when swaping\r\n    receive() external payable {}\r\n   \t\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"Liquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"name\":\"LpLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Taxed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_SYPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bnbAmount\",\"type\":\"uint256\"}],\"name\":\"addLockedLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addToLiquidityAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableTokensToMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"balanceOfBep20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfBnb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfLp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exchangesList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unlockTimestamp\",\"type\":\"uint256\"}],\"name\":\"lockLpTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpUnlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTaxFreeTransferAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransferAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"migrateAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountTotal\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"operatorsList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeSwapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeSwapV2Router\",\"outputs\":[{\"internalType\":\"contract IPancakeSwapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverBnb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAddToLiquidityAmount\",\"type\":\"uint256\"}],\"name\":\"setAddToLiquidityAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxTaxFreeTransferAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTaxFreeTransferAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxTransferAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTransferAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTaxPercent\",\"type\":\"uint256\"}],\"name\":\"setTaxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"taxExcludedList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"toggleBlackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"toggleExchangesList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"toggleOperatorsList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleSwapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"toggleTaxExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TORII", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7d40bd0b51665a6aaed13983be95c12a3c9859745e945fb4da1591bcf1dcfa54"}