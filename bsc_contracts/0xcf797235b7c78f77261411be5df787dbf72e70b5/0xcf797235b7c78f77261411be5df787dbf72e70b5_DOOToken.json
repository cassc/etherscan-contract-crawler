{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    //   constructor () internal { }\r\n\r\n    function _msgSender() internal view returns (address) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(\r\n            _owner,\r\n            0x000000000000000000000000000000000000dEaD\r\n        );\r\n        _owner = 0x000000000000000000000000000000000000dEaD;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n}\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ncontract TokenRepo {\r\n    address private token;\r\n    address private currency;\r\n    address private lpAddress;\r\n    IPancakeRouter02 private swapRouter;\r\n\r\n    bool private inSwap;\r\n    modifier lockTheSwap() {\r\n        require(!inSwap, \"locked\");\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    modifier onlyMaster() {\r\n        require(msg.sender == token, \"forbidden\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address Router,\r\n        address Currency,\r\n        address LpAddress\r\n    ) {\r\n        token = msg.sender;\r\n        currency = Currency;\r\n        lpAddress = LpAddress;\r\n        swapRouter = IPancakeRouter02(Router);\r\n\r\n        IERC20(currency).approve(Router, ~uint256(0));\r\n    }\r\n\r\n    function swapToken(uint256 abcAmount) external lockTheSwap onlyMaster {\r\n        address[] memory path = new address[](2);\r\n        path[0] = token;\r\n        path[1] = currency;\r\n\r\n        swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            abcAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLP() external lockTheSwap onlyMaster {\r\n        uint256 cAmount = IERC20(currency).balanceOf(address(this));\r\n        cAmount = random(cAmount) * (10**14);\r\n        if (cAmount > IERC20(currency).balanceOf(address(this))) return;\r\n\r\n        uint256 tAmount = (IERC20(token).balanceOf(address(this)) / (10**16)) *\r\n            (10**16);\r\n        if (tAmount == 0) return;\r\n\r\n        swapRouter.addLiquidity(\r\n            currency,\r\n            token,\r\n            cAmount,\r\n            tAmount,\r\n            0,\r\n            0,\r\n            lpAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function random(uint256 cAmount) internal view returns (uint256 randNum) {\r\n        randNum =\r\n            ((\r\n                uint256(\r\n                    keccak256(\r\n                        abi.encodePacked(\r\n                            block.timestamp * cAmount,\r\n                            cAmount,\r\n                            lpAddress\r\n                        )\r\n                    )\r\n                )\r\n            ) % 1292) +\r\n            5;\r\n    }\r\n\r\n    function tokenApprove() external {\r\n        require(msg.sender == token || msg.sender == lpAddress);\r\n        IERC20(token).approve(address(swapRouter), ~uint256(0));\r\n    }\r\n}\r\n\r\ncontract BaseToken is IERC20, Ownable {\r\n    address public currency;\r\n    address internal fundAddress;\r\n    address internal erc19Address;\r\n\r\n    string public override name;\r\n    string public override symbol;\r\n    uint256 public override decimals;\r\n    uint256 public override totalSupply;\r\n\r\n    address internal deadWallet = 0x000000000000000000000000000000000000dEaD;\r\n    uint256 internal constant MAX = ~uint256(0);\r\n\r\n    mapping(address => uint256) internal _balances;\r\n    mapping(address => mapping(address => uint256)) internal _allowances;\r\n\r\n    IPancakeRouter02 internal _swapRouter;\r\n    IUniswapV2Factory internal _swapFactory;\r\n\r\n    mapping(address => bool) internal _swapPairList;\r\n\r\n    mapping(address => bool) internal _feeList;\r\n    address public _mainPair;\r\n\r\n    uint256 internal tokenSwapForFund;\r\n    uint256 internal tokenSwapForRepo;\r\n\r\n    uint256 internal initialPrice;\r\n\r\n    function launch() external onlyOwner {\r\n        require(startTradeBlock == 0, \"already started\");\r\n        startTradeBlock = block.number;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {}\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external virtual override returns (bool) {}\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function setFeeList(address[] calldata addr, bool enable)\r\n        external\r\n        onlyOwner\r\n    {\r\n        for (uint256 i = 0; i < addr.length; i++) {\r\n            _feeList[addr[i]] = enable;\r\n        }\r\n    }\r\n\r\n    uint256 internal startTradeBlock;\r\n    uint256 internal startAddLPBlock;\r\n\r\n    function startAddLP() external onlyOwner {\r\n        require(0 == startAddLPBlock, \"startedAddLP\");\r\n        startAddLPBlock = block.number;\r\n    }\r\n\r\n    function startTrade() external onlyOwner {\r\n        require(0 == startTradeBlock, \"trading\");\r\n        startTradeBlock = block.number;\r\n    }\r\n\r\n    function tokenPrice() internal view returns (uint256 price) {\r\n        uint256 tokenOfPair = balanceOf(_mainPair);\r\n        uint256 usdtOfPair = IERC20(currency).balanceOf(_mainPair);\r\n        if (tokenOfPair > 0 && usdtOfPair > 0) {\r\n            price = (usdtOfPair * (10**18)) / tokenOfPair;\r\n        }\r\n    }\r\n\r\n    function calculateSwapToken(uint256 tokenSwap)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (initialPrice == 0) return tokenSwap;\r\n        uint256 multiple = tokenPrice() / initialPrice;\r\n        if (multiple > 1000) {\r\n            return tokenSwap / 16;\r\n        } else if (multiple > 100) {\r\n            return tokenSwap / 8;\r\n        } else if (multiple > 50) {\r\n            return tokenSwap / 4;\r\n        } else if (multiple > 10) {\r\n            return tokenSwap / 2;\r\n        }\r\n        return tokenSwap;\r\n    }\r\n}\r\n\r\ncontract DOOToken is BaseToken {\r\n    TokenRepo private _tokenRepo;\r\n\r\n    bool private inSwap;\r\n\r\n    modifier lockTheSwap() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor(\r\n        string memory NAME,\r\n        string memory SYMBOL,\r\n        uint256 TOTALSUPPLY,\r\n        uint256 TOKENSWAPFORFUND,\r\n        uint256 TOKENSWAPFORREPO,\r\n        address CURRENCY,\r\n        address ROUTER,\r\n        address LPADDRESS,\r\n        address BURNADDRESS,\r\n        address FUNDADDRESS,\r\n        address ERC19ADDRESS\r\n    ) {\r\n        name = NAME;\r\n        symbol = SYMBOL;\r\n        decimals = 18;\r\n        totalSupply = TOTALSUPPLY;\r\n        currency = CURRENCY;\r\n\r\n        IPancakeRouter02 swapRouter = IPancakeRouter02(ROUTER);\r\n        _swapRouter = swapRouter;\r\n        IERC20(CURRENCY).approve(address(swapRouter), MAX);\r\n        _allowances[address(this)][address(swapRouter)] = MAX;\r\n\r\n        _swapFactory = IUniswapV2Factory(_swapRouter.factory());\r\n\r\n        _balances[LPADDRESS] = (totalSupply * 40) / 100;\r\n        emit Transfer(address(0), LPADDRESS, (totalSupply * 40) / 100);\r\n        _balances[BURNADDRESS] = (totalSupply * 60) / 100;\r\n        emit Transfer(address(0), BURNADDRESS, (totalSupply * 60) / 100);\r\n\r\n        fundAddress = FUNDADDRESS;\r\n        erc19Address = ERC19ADDRESS;\r\n\r\n        tokenSwapForFund = TOKENSWAPFORFUND;\r\n        tokenSwapForRepo = TOKENSWAPFORREPO;\r\n\r\n        _tokenRepo = new TokenRepo(ROUTER, CURRENCY, LPADDRESS);\r\n\r\n        _feeList[FUNDADDRESS] = true;\r\n        _feeList[LPADDRESS] = true;\r\n        _feeList[ROUTER] = true;\r\n        _feeList[address(this)] = true;\r\n        _feeList[address(_tokenRepo)] = true;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] =\r\n                _allowances[sender][msg.sender] -\r\n                amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function isContract(address _addr) private view returns (bool) {\r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n        return (size > 0);\r\n    }\r\n\r\n    function _basicTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        _balances[sender] -= amount;\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        uint256 balance = _balances[from];\r\n        require(balance >= amount, \"balanceNotEnough\");\r\n        require(from != erc19Address && to != erc19Address, \"erc19Address\");\r\n\r\n        if (\r\n            _mainPair == address(0) &&\r\n            _swapFactory.getPair(currency, address(this)) != address(0)\r\n        ) {\r\n            _mainPair = _swapFactory.getPair(currency, address(this));\r\n            _swapPairList[_mainPair] = true;\r\n        }\r\n\r\n        if (initialPrice == 0 && tokenPrice() > 0) {\r\n            initialPrice = tokenPrice();\r\n        }\r\n\r\n        bool takeFee;\r\n\r\n        if (_swapPairList[from] || _swapPairList[to]) {\r\n            if (!_feeList[from] && !_feeList[to]) {\r\n                if (0 == startTradeBlock) {\r\n                    require(0 < startAddLPBlock && _swapPairList[to], \"!startAddLP\");\r\n                }\r\n                if (block.number < startTradeBlock + 2) {\r\n                    _basicTransfer(from, fundAddress, amount);\r\n                    return;\r\n                }\r\n\r\n                if (_swapPairList[to]) {\r\n                    if (!inSwap) {\r\n                        uint256 tokenSwapFund = calculateSwapToken(\r\n                            tokenSwapForFund\r\n                        );\r\n                        uint256 tokenSwapRepo = calculateSwapToken(\r\n                            tokenSwapForRepo\r\n                        );\r\n\r\n                        uint256 contractTokenBalance = _balances[address(this)];\r\n                        if (contractTokenBalance > tokenSwapFund) {\r\n                            swapTokenForFund(\r\n                                (contractTokenBalance / (10**16)) * (10**16)\r\n                            );\r\n                        }\r\n\r\n                        _tokenRepo.addLP();\r\n                        uint256 repoTokenBalance = balanceOf(\r\n                            address(_tokenRepo)\r\n                        );\r\n                        if (repoTokenBalance > tokenSwapRepo) {\r\n                            _tokenRepo.swapToken(\r\n                                ((repoTokenBalance / (10**16)) * (10**16)) / 2\r\n                            );\r\n                        }\r\n                    }\r\n                }\r\n                takeFee = true;\r\n            }\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount;\r\n\r\n        if (takeFee) {\r\n            uint256 fundAmount = (tAmount * 20) / 1000;\r\n            uint256 repoAmount = (tAmount * 15) / 1000;\r\n            uint256 burnAmount = (tAmount * 5) / 1000;\r\n\r\n            feeAmount = fundAmount + repoAmount + burnAmount;\r\n\r\n            _takeTransfer(sender, address(this), fundAmount);\r\n            _takeTransfer(sender, address(_tokenRepo), repoAmount);\r\n            _takeTransfer(sender, deadWallet, burnAmount);\r\n        }\r\n\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    event Failed_swapExactTokensForTokensSupportingFeeOnTransferTokens();\r\n\r\n    function swapTokenForFund(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = currency;\r\n\r\n        try\r\n            _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                tokenAmount,\r\n                0,\r\n                path,\r\n                fundAddress,\r\n                block.timestamp\r\n            )\r\n        {} catch {\r\n            emit Failed_swapExactTokensForTokensSupportingFeeOnTransferTokens();\r\n        }\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    function tokenApprove() external onlyOwner {\r\n        _tokenRepo.tokenApprove();\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"NAME\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"SYMBOL\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"TOTALSUPPLY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TOKENSWAPFORFUND\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TOKENSWAPFORREPO\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"CURRENCY\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ROUTER\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"LPADDRESS\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"BURNADDRESS\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"FUNDADDRESS\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ERC19ADDRESS\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Failed_swapExactTokensForTokensSupportingFeeOnTransferTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currency\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAddLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenApprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DOOToken", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000204fce5e3e25026110000000000000000000000000000000000000000000000000034f086f3b33b68400000000000000000000000000000000000000000000000000d3c21bcecceda1000000000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e000000000000000000000000f555932f8ce3f0194f11e951ed1aa3cfb2805c680000000000000000000000004f723bded3e2183a843cef456d090acf1f11560e000000000000000000000000b4fdc2c16a565334f3516f0a3368473c4c58cbc80000000000000000000000000ed943ce24baebf257488771759f9bf482c39706000000000000000000000000000000000000000000000000000000000000000a446f67656e6f6d696373000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003444f4f0000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d8799c865b537bd40ee202e94579f7289eb747f838ae20e14d90e3c72b02e497"}