{"SourceCode": "// File: openzeppelin-solidity-2.3.0/contracts/utils/ReentrancyGuard.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the `nonReentrant` modifier\r\n * available, which can be aplied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n */\r\ncontract ReentrancyGuard {\r\n    /// @dev counter to allow mutex lock with only one SSTORE operation\r\n    uint256 private _guardCounter;\r\n\r\n    constructor () internal {\r\n        // The counter starts at one to prevent changing it from zero to a non-zero\r\n        // value, which is a more expensive operation.\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity-2.3.0/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity-2.3.0/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity-2.3.0/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when `approve` or `transferFrom` are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity-2.3.0/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the `IERC20` interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using `_mint`.\r\n * For a generic mechanism see `ERC20Mintable`.\r\n *\r\n * *For a detailed writeup see our guide [How to implement supply\r\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See `IERC20.approve`.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See `IERC20.totalSupply`.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.balanceOf`.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transfer`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.allowance`.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.approve`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transferFrom`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of `ERC20`;\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `value`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to `transfer`, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a `Transfer` event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n     /**\r\n     * @dev Destoys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a `Transfer` event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an `Approval` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See `_burn` and `_approve`.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity-2.3.0/contracts/math/Math.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// File: contracts/SafeToken.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\ninterface ERC20Interface {\r\n    function balanceOf(address user) external view returns (uint256);\r\n}\r\n\r\nlibrary SafeToken {\r\n    function myBalance(address token) internal view returns (uint256) {\r\n        return ERC20Interface(token).balanceOf(address(this));\r\n    }\r\n\r\n    function balanceOf(address token, address user) internal view returns (uint256) {\r\n        return ERC20Interface(token).balanceOf(user);\r\n    }\r\n\r\n    function safeApprove(address token, address to, uint256 value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"!safeApprove\");\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint256 value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"!safeTransfer\");\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint256 value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"!safeTransferFrom\");\r\n    }\r\n\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call.value(value)(new bytes(0));\r\n        require(success, \"!safeTransferETH\");\r\n    }\r\n}\r\n\r\n// File: contracts/PToken.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract PToken is ERC20, Ownable {\r\n    using SafeToken for address;\r\n    using SafeMath for uint256;\r\n\r\n    string public name = \"\";\r\n    string public symbol = \"\";\r\n    uint8 public decimals;\r\n\r\n    event Mint(address sender, address account, uint amount);\r\n    event Burn(address sender, address account, uint amount);\r\n\r\n    constructor(string memory _symbol, uint8 _decimals) public {\r\n        name = _symbol;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n    }\r\n\r\n    function mint(address account, uint256 amount) public onlyOwner {\r\n        _mint(account, amount);\r\n        emit Mint(msg.sender, account, amount);\r\n    }\r\n\r\n    function burn(address account, uint256 value) public onlyOwner {\r\n        _burn(account, value);\r\n        emit Burn(msg.sender, account, value);\r\n    }\r\n}\r\n\r\n// File: contracts/PTokenFactory.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\ncontract PTokenFactory {\r\n\r\n    function genPToken(string memory _symbol, uint8 _decimals) public returns(address) {\r\n        return address(new PToken(_symbol, _decimals));\r\n    }\r\n}\r\n\r\n// File: contracts/Goblin.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\ninterface Goblin {\r\n\r\n    /// @dev Work on a (potentially new) position. Optionally send surplus token back to Bank.\r\n    function work(uint256 id, address user, address borrowToken, uint256 borrow, uint256 debt, bytes calldata data) external payable;\r\n\r\n    /// @dev Return the amount of ETH wei to get back if we are to liquidate the position.\r\n    function health(uint256 id, address borrowToken) external view returns (uint256);\r\n\r\n    /// @dev Liquidate the given position to token need. Send all ETH back to Bank.\r\n    function liquidate(uint256 id, address user, address borrowToken) external;\r\n}\r\n\r\n// File: contracts/interfaces/IBankConfig.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\ninterface IBankConfig {\r\n\r\n    function getInterestRate(uint256 debt, uint256 floating) external view returns (uint256);\r\n\r\n    function getReserveBps() external view returns (uint256);\r\n\r\n    function getLiquidateBps() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/Bank.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Bank is PTokenFactory, Ownable, ReentrancyGuard {\r\n    using SafeToken for address;\r\n    using SafeMath for uint256;\r\n\r\n    event OpPosition(uint256 indexed id, uint256 debt, uint back);\r\n    event Liquidate(uint256 indexed id, address indexed killer, uint256 prize, uint256 left);\r\n\r\n    struct TokenBank {\r\n        address tokenAddr;\r\n        address pTokenAddr;\r\n        bool isOpen;\r\n        bool canDeposit;\r\n        bool canWithdraw;\r\n        uint256 totalVal;\r\n        uint256 totalDebt;\r\n        uint256 totalDebtShare;\r\n        uint256 totalReserve;\r\n        uint256 lastInterestTime;\r\n    }\r\n\r\n    struct Production {\r\n        address coinToken;\r\n        address currencyToken;\r\n        address borrowToken;\r\n        bool isOpen;\r\n        bool canBorrow;\r\n        address goblin;\r\n        uint256 minDebt;\r\n        uint256 openFactor;\r\n        uint256 liquidateFactor;\r\n    }\r\n\r\n    struct Position {\r\n        address owner;\r\n        uint256 productionId;\r\n        uint256 debtShare;\r\n    }\r\n\r\n    IBankConfig config;\r\n\r\n    mapping(address => TokenBank) public banks;\r\n\r\n    mapping(uint256 => Production) public productions;\r\n    uint256 public currentPid = 1;\r\n\r\n    mapping(uint256 => Position) public positions;\r\n    uint256 public currentPos = 1;\r\n\r\n    modifier onlyEOA() {\r\n        require(msg.sender == tx.origin, \"not eoa\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {}\r\n\r\n    /// read\r\n    function positionInfo(uint256 posId) public view returns (uint256, uint256, uint256, address) {\r\n        Position storage pos = positions[posId];\r\n        Production storage prod = productions[pos.productionId];\r\n\r\n        return (pos.productionId, Goblin(prod.goblin).health(posId, prod.borrowToken),\r\n            debtShareToVal(prod.borrowToken, pos.debtShare), pos.owner);\r\n    }\r\n\r\n    function totalToken(address token) public view returns (uint256) {\r\n        TokenBank storage bank = banks[token];\r\n        require(bank.isOpen, 'token not exists');\r\n\r\n        uint balance = token == address(0)? address(this).balance: SafeToken.myBalance(token);\r\n        balance = bank.totalVal < balance? bank.totalVal: balance;\r\n\r\n        return balance.add(bank.totalDebt).sub(bank.totalReserve);\r\n    }\r\n\r\n    function debtShareToVal(address token, uint256 debtShare) public view returns (uint256) {\r\n        TokenBank storage bank = banks[token];\r\n        require(bank.isOpen, 'token not exists');\r\n\r\n        if (bank.totalDebtShare == 0) return debtShare;\r\n        return debtShare.mul(bank.totalDebt).div(bank.totalDebtShare);\r\n    }\r\n\r\n    function debtValToShare(address token, uint256 debtVal) public view returns (uint256) {\r\n        TokenBank storage bank = banks[token];\r\n        require(bank.isOpen, 'token not exists');\r\n\r\n        if (bank.totalDebt == 0) return debtVal;\r\n        return debtVal.mul(bank.totalDebtShare).div(bank.totalDebt);\r\n    }\r\n\r\n\r\n    /// write\r\n    function deposit(address token, uint256 amount) external payable nonReentrant {\r\n        TokenBank storage bank = banks[token];\r\n        require(bank.isOpen && bank.canDeposit, 'Token not exist or cannot deposit');\r\n\r\n        calInterest(token);\r\n\r\n        if (token == address(0)) {//HT\r\n            amount = msg.value;\r\n        } else {\r\n            SafeToken.safeTransferFrom(token, msg.sender, address(this), amount);\r\n        }\r\n\r\n        bank.totalVal = bank.totalVal.add(amount);\r\n        uint256 total = totalToken(token).sub(amount);\r\n        uint256 pTotal = PToken(bank.pTokenAddr).totalSupply();\r\n\r\n        uint256 pAmount = (total == 0 || pTotal == 0) ? amount: amount.mul(pTotal).div(total);\r\n        PToken(bank.pTokenAddr).mint(msg.sender, pAmount);\r\n    }\r\n\r\n    function withdraw(address token, uint256 pAmount) external nonReentrant {\r\n        TokenBank storage bank = banks[token];\r\n        require(bank.isOpen && bank.canWithdraw, 'Token not exist or cannot withdraw');\r\n\r\n        calInterest(token);\r\n\r\n        uint256 amount = pAmount.mul(totalToken(token)).div(PToken(bank.pTokenAddr).totalSupply());\r\n        bank.totalVal = bank.totalVal.sub(amount);\r\n\r\n        PToken(bank.pTokenAddr).burn(msg.sender, pAmount);\r\n\r\n        if (token == address(0)) {//HT\r\n            SafeToken.safeTransferETH(msg.sender, amount);\r\n        } else {\r\n            SafeToken.safeTransfer(token, msg.sender, amount);\r\n        }\r\n    }\r\n\r\n    function opPosition(uint256 posId, uint256 pid, uint256 borrow, bytes calldata data)\r\n    external payable onlyEOA nonReentrant {\r\n\r\n        if (posId == 0) {\r\n            posId = currentPos;\r\n            currentPos ++;\r\n            positions[posId].owner = msg.sender;\r\n            positions[posId].productionId = pid;\r\n\r\n        } else {\r\n            require(posId < currentPos, \"bad position id\");\r\n            require(positions[posId].owner == msg.sender, \"not position owner\");\r\n\r\n            pid = positions[posId].productionId;\r\n        }\r\n\r\n        Production storage production = productions[pid];\r\n        require(production.isOpen, 'Production not exists');\r\n\r\n        require(borrow == 0 || production.canBorrow, \"Production can not borrow\");\r\n        calInterest(production.borrowToken);\r\n\r\n        uint256 debt = _removeDebt(positions[posId], production).add(borrow);\r\n        bool isBorrowHt = production.borrowToken == address(0);\r\n\r\n        uint256 sendHT = msg.value;\r\n        uint256 beforeToken = 0;\r\n        if (isBorrowHt) {\r\n            sendHT = sendHT.add(borrow);\r\n            require(sendHT <= address(this).balance && debt <= banks[production.borrowToken].totalVal, \"insufficient HT in the bank\");\r\n            beforeToken = address(this).balance.sub(sendHT);\r\n\r\n        } else {\r\n            beforeToken = SafeToken.myBalance(production.borrowToken);\r\n            require(borrow <= beforeToken && debt <= banks[production.borrowToken].totalVal, \"insufficient borrowToken in the bank\");\r\n            beforeToken = beforeToken.sub(borrow);\r\n            SafeToken.safeApprove(production.borrowToken, production.goblin, borrow);\r\n        }\r\n\r\n        Goblin(production.goblin).work.value(sendHT)(posId, msg.sender, production.borrowToken, borrow, debt, data);\r\n\r\n        uint256 backToken = isBorrowHt? (address(this).balance.sub(beforeToken)) :\r\n            SafeToken.myBalance(production.borrowToken).sub(beforeToken);\r\n\r\n        if(backToken > debt) {\r\n            backToken = backToken.sub(debt);\r\n            debt = 0;\r\n\r\n            isBorrowHt? SafeToken.safeTransferETH(msg.sender, backToken):\r\n                SafeToken.safeTransfer(production.borrowToken, msg.sender, backToken);\r\n\r\n        } else if (debt > backToken) {\r\n            debt = debt.sub(backToken);\r\n            backToken = 0;\r\n\r\n            require(debt >= production.minDebt, \"too small debt size\");\r\n            uint256 health = Goblin(production.goblin).health(posId, production.borrowToken);\r\n            if(posId != 0 && borrow == 0){\r\n                require(health.mul(production.liquidateFactor) >= debt.mul(10000), \"bad work factory\");\r\n            } else {\r\n                require(health.mul(production.openFactor) >= debt.mul(10000), \"bad work factor for open\");\r\n            }\r\n\r\n            _addDebt(positions[posId], production, debt);\r\n        }\r\n        emit OpPosition(posId, debt, backToken);\r\n    }\r\n\r\n    function liquidate(uint256 posId) external payable onlyEOA nonReentrant {\r\n        Position storage pos = positions[posId];\r\n        require(pos.debtShare > 0, \"no debt\");\r\n        Production storage production = productions[pos.productionId];\r\n\r\n        uint256 debt = _removeDebt(pos, production);\r\n\r\n        uint256 health = Goblin(production.goblin).health(posId, production.borrowToken);\r\n        require(health.mul(production.liquidateFactor) < debt.mul(10000), \"can't liquidate\");\r\n\r\n        bool isHT = production.borrowToken == address(0);\r\n        uint256 before = isHT? address(this).balance: SafeToken.myBalance(production.borrowToken);\r\n\r\n        Goblin(production.goblin).liquidate(posId, pos.owner, production.borrowToken);\r\n\r\n        uint256 back = isHT? address(this).balance: SafeToken.myBalance(production.borrowToken);\r\n        back = back.sub(before);\r\n\r\n        require(config.getLiquidateBps() <= 10000, \"liquidate bps cannot > 1\");\r\n        uint256 prize = back.mul(config.getLiquidateBps()).div(10000);\r\n        uint256 rest = back.sub(prize);\r\n        uint256 left = 0;\r\n\r\n        if (prize > 0) {\r\n            isHT? SafeToken.safeTransferETH(msg.sender, prize): SafeToken.safeTransfer(production.borrowToken, msg.sender, prize);\r\n        }\r\n        if (rest > debt) {\r\n            left = rest.sub(debt);\r\n            isHT? SafeToken.safeTransferETH(pos.owner, left): SafeToken.safeTransfer(production.borrowToken, pos.owner, left);\r\n        } else {\r\n            banks[production.borrowToken].totalVal = banks[production.borrowToken].totalVal.sub(debt).add(rest);\r\n        }\r\n        emit Liquidate(posId, msg.sender, prize, left);\r\n    }\r\n\r\n    function _addDebt(Position storage pos, Production storage production, uint256 debtVal) internal {\r\n        if (debtVal == 0) {\r\n            return;\r\n        }\r\n\r\n        TokenBank storage bank = banks[production.borrowToken];\r\n\r\n        uint256 debtShare = debtValToShare(production.borrowToken, debtVal);\r\n        pos.debtShare = pos.debtShare.add(debtShare);\r\n\r\n        bank.totalVal = bank.totalVal.sub(debtVal);\r\n        bank.totalDebtShare = bank.totalDebtShare.add(debtShare);\r\n        bank.totalDebt = bank.totalDebt.add(debtVal);\r\n    }\r\n\r\n    function _removeDebt(Position storage pos, Production storage production) internal returns (uint256) {\r\n        TokenBank storage bank = banks[production.borrowToken];\r\n\r\n        uint256 debtShare = pos.debtShare;\r\n        if (debtShare > 0) {\r\n            uint256 debtVal = debtShareToVal(production.borrowToken, debtShare);\r\n            pos.debtShare = 0;\r\n\r\n            bank.totalVal = bank.totalVal.add(debtVal);\r\n            bank.totalDebtShare = bank.totalDebtShare.sub(debtShare);\r\n            bank.totalDebt = bank.totalDebt.sub(debtVal);\r\n            return debtVal;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function updateConfig(IBankConfig _config) external onlyOwner {\r\n        config = _config;\r\n    }\r\n\r\n    function addToken(address token, string calldata _symbol, uint8 _decimals) external onlyOwner {\r\n        TokenBank storage bank = banks[token];\r\n        require(!bank.isOpen, 'token already exists');\r\n\r\n        bank.isOpen = true;\r\n        address pToken = genPToken(_symbol, _decimals);\r\n        bank.tokenAddr = token;\r\n        bank.pTokenAddr = pToken;\r\n        bank.canDeposit = true;\r\n        bank.canWithdraw = true;\r\n        bank.totalVal = 0;\r\n        bank.totalDebt = 0;\r\n        bank.totalDebtShare = 0;\r\n        bank.totalReserve = 0;\r\n        bank.lastInterestTime = now;\r\n    }\r\n\r\n    function updateToken(address token, bool canDeposit, bool canWithdraw) external onlyOwner {\r\n        TokenBank storage bank = banks[token];\r\n        require(bank.isOpen, 'token not exists');\r\n\r\n        bank.canDeposit = canDeposit;\r\n        bank.canWithdraw = canWithdraw;\r\n    }\r\n\r\n    function opProduction(uint256 pid, bool isOpen, bool canBorrow,\r\n        address coinToken, address currencyToken, address borrowToken, address goblin,\r\n        uint256 minDebt, uint256 openFactor, uint256 liquidateFactor) external onlyOwner {\r\n\r\n        if(pid == 0){\r\n            pid = currentPid;\r\n            currentPid ++;\r\n        } else {\r\n            require(pid < currentPid, \"bad production id\");\r\n        }\r\n\r\n        Production storage production = productions[pid];\r\n        production.isOpen = isOpen;\r\n        production.canBorrow = canBorrow;\r\n\r\n        production.coinToken = coinToken;\r\n        production.currencyToken = currencyToken;\r\n        production.borrowToken = borrowToken;\r\n        production.goblin = goblin;\r\n\r\n        production.minDebt = minDebt;\r\n        production.openFactor = openFactor;\r\n        production.liquidateFactor = liquidateFactor;\r\n    }\r\n\r\n    function calInterest(address token) public {\r\n        TokenBank storage bank = banks[token];\r\n        require(bank.isOpen, 'token not exists');\r\n\r\n        if (now > bank.lastInterestTime) {\r\n            uint256 timePast = now.sub(bank.lastInterestTime);\r\n            uint256 totalDebt = bank.totalDebt;\r\n            uint256 totalBalance = totalToken(token);\r\n\r\n            uint256 ratePerSec = config.getInterestRate(totalDebt, totalBalance);\r\n            uint256 interest = ratePerSec.mul(timePast).mul(totalDebt).div(1e18);\r\n\r\n            require(config.getReserveBps() <= 10000, \"reserve bps cannot > 1\");\r\n            uint256 toReserve = interest.mul(config.getReserveBps()).div(10000);\r\n            bank.totalReserve = bank.totalReserve.add(toReserve);\r\n            bank.totalDebt = bank.totalDebt.add(interest);\r\n            bank.lastInterestTime = now;\r\n        }\r\n    }\r\n\r\n    function withdrawReserve(address token, address to, uint256 value) external onlyOwner nonReentrant {\r\n        TokenBank storage bank = banks[token];\r\n        require(bank.isOpen, 'token not exists');\r\n\r\n        uint balance = token == address(0)? address(this).balance: SafeToken.myBalance(token);\r\n        if(balance >= bank.totalVal.add(value)) {\r\n            // do nothing\r\n        } else {\r\n            bank.totalReserve = bank.totalReserve.sub(value);\r\n            bank.totalVal = bank.totalVal.sub(value);\r\n        }\r\n\r\n        if (token == address(0)) {\r\n            SafeToken.safeTransferETH(to, value);\r\n        } else {\r\n            SafeToken.safeTransfer(token, to, value);\r\n        }\r\n    }\r\n\r\n    function() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"killer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"back\",\"type\":\"uint256\"}],\"name\":\"OpPosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"}],\"name\":\"addToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"banks\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pTokenAddr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canDeposit\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canWithdraw\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalVal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDebtShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastInterestTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"calInterest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"debtShare\",\"type\":\"uint256\"}],\"name\":\"debtShareToVal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"debtVal\",\"type\":\"uint256\"}],\"name\":\"debtValToShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"}],\"name\":\"genPToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"posId\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"posId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrow\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"opPosition\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canBorrow\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"coinToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currencyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrowToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"goblin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidateFactor\",\"type\":\"uint256\"}],\"name\":\"opProduction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"posId\",\"type\":\"uint256\"}],\"name\":\"positionInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"productionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtShare\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"productions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"coinToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currencyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrowToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canBorrow\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"goblin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidateFactor\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IBankConfig\",\"name\":\"_config\",\"type\":\"address\"}],\"name\":\"updateConfig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"canDeposit\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canWithdraw\",\"type\":\"bool\"}],\"name\":\"updateToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawReserve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Bank", "CompilerVersion": "v0.5.16+commit.9c3226ce", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://29e0eb14b93dd84d5071e4c665ace1a8d0bffc6c9ebb698bfe360b3d12574672"}