{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/Interface/ILockedStake.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n\\r\\ninterface ILockedStake  {\\r\\n    function getFavor(address _user) external view returns (uint256);\\r\\n}\"\r\n    },\r\n    \"contracts/Interface/IOlaFinance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface OlaFinance {\\r\\n    \\r\\n    function mint(uint mintAmount) external returns (uint);\\r\\n    function redeem(uint redeemTokens) external returns (uint);\\r\\n    // function redeemUnderlying(uint redeemTokens) external returns (uint);\\r\\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function balanceOfUnderlying(address account) external returns (uint);\\r\\n    function exchangeRateStored() external view returns (uint);\\r\\n    function borrowRatePerBlock() external view returns (uint);\\r\\n    function supplyRatePerBlock() external view returns (uint);\\r\\n\\r\\n    function borrow(uint256) external returns (uint256);\\r\\n    function borrowBalanceCurrent(address) external returns (uint256);\\r\\n    function borrowBalanceStored(address account) external view returns (uint);\\r\\n    function repayBorrow(uint256) external returns (uint256);\\r\\n    \\r\\n}\\r\\n\\r\\ninterface RainMakerForOlaLens {\\r\\n    function claimComp(address holder) external;\\r\\n    function claimVenus(address holder) external;\\r\\n    function compAccrued(address holder) external view returns (uint);\\r\\n    function venusAccrued(address holder) external view returns (uint);\\r\\n}\\r\\n\\r\\ninterface Comptroller {\\r\\n\\r\\n    function markets(address) external returns (bool, uint256);\\r\\n    function enterMarkets(address[] calldata) external returns (uint256[] memory);\\r\\n    function getAccountLiquidity(address) external view returns (uint256, uint256, uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Interface/IxWinEmitEvent.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IxWinEmitEvent {\\r\\n\\r\\n    function feeTransfered(\\r\\n        address _token,\\r\\n        uint _amount,\\r\\n        address _contractAddress\\r\\n\\r\\n    ) external;\\r\\n\\r\\n\\r\\n    function FeeEvent(string memory _eventtype, address _contractaddress, uint256 _fee) external;\\r\\n    function FundEvent(\\r\\n        string memory _type,\\r\\n        address _contractaddress, \\r\\n        address _useraddress, \\r\\n        uint _rate, \\r\\n        uint _amount, \\r\\n        uint _shares\\r\\n    ) external;\\r\\n\\r\\n    function setExecutor(address _address, bool _allow) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Interface/IxWinPriceMaster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IxWinPriceMaster {\\r\\n    function getPrice(address _from, address _to) external view returns (uint rate);\\r\\n}\"\r\n    },\r\n    \"contracts/Interface/IxWinSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IxWinSwap {\\r\\n    function swapTokenToToken(uint _amount, address _fromToken, address _toToken) external payable returns (uint);\\r\\n    function swapTokenToToken(uint _amount, address _fromToken, address _toToken, uint32 _slippage) external payable returns (uint);\\r\\n    function swapTokenToExactToken(uint _amount, uint _exactAmount, address _fromToken, address _toToken) external payable returns (uint);\\r\\n\\r\\n    function addTokenPath(\\r\\n            address _router, \\r\\n            address _fromtoken, \\r\\n            address _totoken, \\r\\n            address[] memory path,\\r\\n            uint256 _slippage\\r\\n        ) external;\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/strategies/xWinSingleAssetOla.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\r\\nimport \\\"../xWinStrategyWithFee.sol\\\";\\r\\nimport \\\"../Interface/IOlaFinance.sol\\\";\\r\\nimport \\\"../Interface/IxWinSwap.sol\\\";\\r\\nimport \\\"../Interface/IxWinPriceMaster.sol\\\";\\r\\n\\r\\ncontract xWinSingleAssetOla is xWinStrategyWithFee {\\r\\n    \\r\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\r\\n\\r\\n    \\r\\n    IxWinSwap public swapEngine;\\r\\n    IxWinPriceMaster public xWinPriceMaster; \\r\\n    OlaFinance public _OlaFinance; \\r\\n    RainMakerForOlaLens public _rainMaker;\\r\\n    IERC20Upgradeable public lendingRewardToken;\\r\\n    uint256 public smallRatio;\\r\\n    mapping(address => bool) public executors;\\r\\n    \\r\\n    event SwitchProtocol(address fromProtocol, address toProtocol);\\r\\n\\r\\n    modifier onlyExecutor {\\r\\n        require(\\r\\n            executors[msg.sender],\\r\\n            \\\"executor: wut?\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function initialize(\\r\\n        string calldata name,\\r\\n        string calldata symbol,\\r\\n        address _baseToken,\\r\\n        address _USDTokenAddr,\\r\\n        uint256 _managerFee,\\r\\n        uint256 _performanceFee,\\r\\n        uint256 _collectionPeriod,\\r\\n        address _managerAddr\\r\\n    ) initializer external {\\r\\n        __xWinStrategyWithFee_init(name, symbol, _baseToken, _USDTokenAddr, _managerFee, _performanceFee, _collectionPeriod, _managerAddr);\\r\\n        smallRatio = 100;\\r\\n    }\\r\\n\\r\\n    function init(\\r\\n        address _swapEngine,\\r\\n        address _lendingRewardToken,\\r\\n        address _xWinPriceMaster\\r\\n    ) external onlyOwner {\\r\\n        require(address(lendingRewardToken) == address(0), \\\"already called init\\\");\\r\\n        swapEngine = IxWinSwap(_swapEngine);\\r\\n        xWinPriceMaster = IxWinPriceMaster(_xWinPriceMaster);\\r\\n        lendingRewardToken = IERC20Upgradeable(_lendingRewardToken);\\r\\n    }\\r\\n \\r\\n\\r\\n    function updateProperties(\\r\\n        address olaFinance_,\\r\\n        address rainMaker_\\r\\n    ) external onlyOwner {\\r\\n        require(olaFinance_ != address(0), \\\"olaFinance is 0\\\");\\r\\n        require(rainMaker_ != address(0), \\\"rainMaker is 0\\\");\\r\\n        require(address(_OlaFinance) == address(0), \\\"Already initialized properties\\\");\\r\\n        _OlaFinance = OlaFinance(olaFinance_);\\r\\n        _rainMaker = RainMakerForOlaLens(rainMaker_);\\r\\n    }\\r\\n\\r\\n    function getUserBalance(address _user)  public view returns (uint256) {        \\r\\n        return IERC20Upgradeable(address(this)).balanceOf(_user);\\r\\n    }\\r\\n\\r\\n    function getSupplyRatePerBlock()  public view returns (uint256) {\\r\\n        return _OlaFinance.supplyRatePerBlock();\\r\\n    }\\r\\n\\r\\n    function getBorrowRatePerBlock()  public view returns (uint256) {\\r\\n        return _OlaFinance.borrowRatePerBlock();\\r\\n    }\\r\\n\\r\\n    function getUnitPrice()  public view override returns (uint256) {\\r\\n        return _convertTo18(_getUnitPrice(), baseToken);\\r\\n    }\\r\\n\\r\\n    function _getUnitPrice() internal view override returns (uint256) {\\r\\n        uint vValue = _getVaultValues();\\r\\n        return (getFundTotalSupply() == 0 || vValue == 0) ? 1e18 : vValue * 1e18 / getFundTotalSupply();\\r\\n    }\\r\\n\\r\\n    function _getUnitPrice(uint256 fundvalue) internal view returns(uint256){\\r\\n        return (getFundTotalSupply() == 0 || fundvalue == 0) ? 1e18 : _convertTo18(fundvalue * 1e18 / getFundTotalSupply(), baseToken);\\r\\n    }\\r\\n\\r\\n\\r\\n    function getUnitPriceInUSD()  public view override returns (uint256) {\\r\\n        uint vValue = _getVaultValuesInUSD();\\r\\n        return (getFundTotalSupply() == 0 || vValue == 0) ? 1e18 : _convertTo18(vValue * 1e18 / getFundTotalSupply(), stablecoinUSDAddr);\\r\\n    }\\r\\n\\r\\n    function deposit(uint256 _amount) external override nonReentrant whenNotPaused returns (uint256) {\\r\\n        return _deposit(_amount, 0);\\r\\n    }\\r\\n\\r\\n    function deposit(uint256 _amount, uint32 _slippage)\\r\\n        public\\r\\n        override\\r\\n        nonReentrant\\r\\n        whenNotPaused\\r\\n        returns (uint256)\\r\\n    {        \\r\\n        return _deposit(_amount, _slippage);\\r\\n    }\\r\\n\\r\\n    function _deposit(uint256 _amount, uint32 _slippage) internal returns (uint256) {\\r\\n        \\r\\n        require(_amount > 0, \\\"Nothing to deposit\\\");\\r\\n        _calcFundFee();\\r\\n        IERC20Upgradeable(baseToken).safeTransferFrom(msg.sender, address(this), _amount);\\r\\n\\r\\n        uint currentShares = _getMintQty(_amount);        \\r\\n        \\r\\n        _mint(msg.sender, currentShares);\\r\\n\\r\\n        if(!_isContract(msg.sender)){\\r\\n            emitEvent.FundEvent(\\\"deposit\\\", address(this), msg.sender, getUnitPrice(), _amount, currentShares);\\r\\n        }\\r\\n        return currentShares;\\r\\n    }\\r\\n\\r\\n    function withdraw(uint256 _amount) external override nonReentrant whenNotPaused returns (uint256){\\r\\n        return _withdraw(_amount, 0);\\r\\n    }\\r\\n\\r\\n    function withdraw(uint256 _amount, uint32 _slippage)\\r\\n        public\\r\\n        override\\r\\n        nonReentrant\\r\\n        whenNotPaused\\r\\n        returns (uint)\\r\\n    {\\r\\n        return _withdraw(_amount, _slippage);\\r\\n    }\\r\\n\\r\\n    function _withdraw(uint256 _amount, uint32 _slippage) internal returns (uint256){\\r\\n\\r\\n        require(_amount > 0, \\\"Nothing to withdraw\\\");\\r\\n        require(_amount <= IERC20Upgradeable(address(this)).balanceOf(msg.sender), \\\"Withdraw amount exceeds balance\\\");\\r\\n        _calcFundFee();\\r\\n        // swap any comp available into target token so that it is included into fund total values\\r\\n        uint256 redeemratio = _amount * 1e18 / getFundTotalSupply();\\r\\n        \\r\\n        uint targetBalB4 = IERC20Upgradeable(baseToken).balanceOf(address(this));\\r\\n        uint totalRefund = redeemratio * targetBalB4 / 1e18;\\r\\n        \\r\\n        uint totalOlaAmount = IERC20Upgradeable(address(_OlaFinance)).balanceOf(address(this));\\r\\n        uint withdrawOlaAmt = redeemratio * totalOlaAmount / 1e18;\\r\\n        withdrawOlaAmt = totalOlaAmount < withdrawOlaAmt ? totalOlaAmount: withdrawOlaAmt;\\r\\n        if(withdrawOlaAmt > 0) _removeOla(withdrawOlaAmt);\\r\\n        uint targetBalAfter = IERC20Upgradeable(baseToken).balanceOf(address(this));\\r\\n        uint targetDiff = targetBalAfter - targetBalB4;\\r\\n        totalRefund = totalRefund + targetDiff;\\r\\n        \\r\\n        _burn(msg.sender, _amount);\\r\\n        IERC20Upgradeable(baseToken).safeTransfer(msg.sender, totalRefund);\\r\\n\\r\\n        if(!_isContract(msg.sender)){\\r\\n            emitEvent.FundEvent(\\\"withdraw\\\", address(this), msg.sender, getUnitPrice(), totalRefund, _amount);\\r\\n        }\\r\\n        return totalRefund;\\r\\n    }\\r\\n\\r\\n    // Get total vault value in target token i.e. BTCB\\r\\n    function getVaultValues() external override view returns (uint vaultValue){                \\r\\n        return _convertTo18(_getVaultValues(), baseToken);\\r\\n    }\\r\\n\\r\\n    // Get total vault value in base ccy i.e. USDT\\r\\n    function getVaultValuesInUSD() external override view returns (uint vaultValue){        \\r\\n        return _convertTo18(_getVaultValuesInUSD(), stablecoinUSDAddr); \\r\\n    }\\r\\n\\r\\n    function _getVaultValues() internal override view returns (uint256){\\r\\n        uint valueInUSD = _getVaultValuesInUSD();\\r\\n        uint rate = xWinPriceMaster.getPrice(stablecoinUSDAddr, baseToken); \\r\\n        return (rate * valueInUSD / getDecimals(address(stablecoinUSDAddr)));\\r\\n    }\\r\\n    \\r\\n    function _getVaultValuesInUSD() internal view returns (uint256) {\\r\\n        uint exRateTargetBase = xWinPriceMaster.getPrice(baseToken, stablecoinUSDAddr); \\r\\n        uint exRateLendingBase = xWinPriceMaster.getPrice(address(lendingRewardToken), stablecoinUSDAddr); \\r\\n        \\r\\n        // staking target token balance\\r\\n        uint exchangeRateStaking = _OlaFinance.exchangeRateStored();\\r\\n        uint balanceStakingToken = _OlaFinance.balanceOf(address(this));\\r\\n        uint balanceStakingTokenInUSD = balanceStakingToken == 0 ? 0 : balanceStakingToken * exchangeRateStaking * exRateTargetBase / getDecimals(baseToken) / 1e18;\\r\\n        \\r\\n        // target token balance in the contract\\r\\n        uint baseTokenBal = IERC20Upgradeable(baseToken).balanceOf(address(this));\\r\\n        baseTokenBal = exRateTargetBase * baseTokenBal / getDecimals(baseToken); \\r\\n        \\r\\n        // accrueComp accumulated during staking\\r\\n        uint accruedComp = getAccruedComp(); \\r\\n        uint accruedCompInUSD = exRateLendingBase *  accruedComp / getDecimals(address(lendingRewardToken));\\r\\n        \\r\\n        return balanceStakingTokenInUSD + baseTokenBal + accruedCompInUSD;\\r\\n    }\\r\\n    \\r\\n\\r\\n    function canReclaimRainMaker() public view returns (bool) {\\r\\n\\r\\n        uint fundValueInUSD = _getVaultValuesInUSD();\\r\\n        uint accruedComp = getAccruedComp(); \\r\\n        uint exRateLendingBase = xWinPriceMaster.getPrice(address(lendingRewardToken), stablecoinUSDAddr); \\r\\n        uint accruedCompInUSD = exRateLendingBase *  accruedComp;\\r\\n        uint percentage = accruedCompInUSD * 10000 / fundValueInUSD / getDecimals(address(lendingRewardToken));\\r\\n        return percentage > smallRatio;        \\r\\n    }\\r\\n\\r\\n    function canSystemDeposit() public view returns (bool){\\r\\n        \\r\\n        uint fundValue = _getVaultValues();\\r\\n        uint targetbal = IERC20Upgradeable(baseToken).balanceOf(address(this));\\r\\n        uint percentage = targetbal * 10000 / fundValue;\\r\\n        return percentage > smallRatio;\\r\\n    }\\r\\n\\r\\n    function systemDeposit()\\r\\n        external \\r\\n        onlyExecutor\\r\\n        nonReentrant \\r\\n    {\\r\\n        _depositOla();\\r\\n    }\\r\\n\\r\\n    function emergencyUnWindPosition() external whenPaused nonReentrant onlyOwner {\\r\\n        uint balanceToken = _OlaFinance.balanceOf(address(this));\\r\\n        _removeOla(balanceToken);\\r\\n        if (address(_rainMaker) != address(0)){\\r\\n            if(_rainMaker.compAccrued(address(this)) > 0){\\r\\n                _rainMaker.claimComp(address(this));\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function reinvestClaimComp() public nonReentrant {\\r\\n        if (address(_rainMaker) == address(0)) return;\\r\\n        if(_rainMaker.compAccrued(address(this)) > 0){\\r\\n            _rainMaker.claimComp(address(this));\\r\\n        }\\r\\n        uint bal = lendingRewardToken.balanceOf(address(this));\\r\\n        if(bal > 0){\\r\\n            lendingRewardToken.safeIncreaseAllowance(address(swapEngine), bal);\\r\\n            swapEngine.swapTokenToToken(bal, address(lendingRewardToken), baseToken); \\r\\n            _depositOla();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getAccruedComp() public view returns (uint) {\\r\\n        if (address(_rainMaker) == address(0)) return 0;\\r\\n        return _rainMaker.compAccrued(address(this));\\r\\n    }\\r\\n\\r\\n    function getStrategyInfo() external view returns (\\r\\n        address targetaddress, \\r\\n        address rewardaddress\\r\\n        ) {\\r\\n        return (baseToken, address(lendingRewardToken));\\r\\n    }\\r\\n\\r\\n    function _depositOla() internal {   \\r\\n\\r\\n        uint bal = IERC20Upgradeable(baseToken).balanceOf(address(this));  \\r\\n        if(bal > 0){\\r\\n            IERC20Upgradeable(baseToken).safeIncreaseAllowance(address(_OlaFinance), bal);\\r\\n            _OlaFinance.mint(bal);\\r\\n        }  \\r\\n    }\\r\\n    \\r\\n    function _removeOla(uint _amount) internal {        \\r\\n        _OlaFinance.redeem(_amount);\\r\\n    }\\r\\n\\r\\n    // Support multiple wallets or address as admin\\r\\n    function setExecutor(address _wallet, bool _allow) external onlyOwner {\\r\\n        executors[_wallet] = _allow;\\r\\n    }\\r\\n\\r\\n    /// @dev update small ratio\\r\\n    function updateSmallRatio(uint _ratio) external onlyOwner  {        \\r\\n        smallRatio = _ratio;\\r\\n    }\\r\\n\\r\\n    function setSwapEngine(address _newSwapEngine) external onlyOwner  {        \\r\\n        swapEngine = IxWinSwap(_newSwapEngine);\\r\\n    }\\r\\n\\r\\n    function setPriceMaster(address _newPriceMaster) external onlyOwner  {        \\r\\n        xWinPriceMaster = IxWinPriceMaster(_newPriceMaster);\\r\\n    }\\r\\n\\r\\n    function getDecimals(address _token) private view returns (uint) {\\r\\n        return (10 ** ERC20Upgradeable(_token).decimals());\\r\\n    }\\r\\n\\r\\n    function setLendingRewardToken(address _newRewardToken) public onlyOwner {\\r\\n        lendingRewardToken = IERC20Upgradeable(_newRewardToken);\\r\\n    }\\r\\n\\r\\n    function setRainMaker(address rainMaker_) public onlyOwner {\\r\\n        _rainMaker = RainMakerForOlaLens(rainMaker_);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/xWinStrategy.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\r\\nimport \\\"./Interface/IxWinEmitEvent.sol\\\";\\r\\n\\r\\n\\r\\nabstract contract xWinStrategy is ERC20Upgradeable, OwnableUpgradeable, ReentrancyGuardUpgradeable, PausableUpgradeable {\\r\\n    \\r\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\r\\n    address public stablecoinUSDAddr;\\r\\n    address public baseToken; // DEPOSIT/WITHDRAW TOKEN\\r\\n    IxWinEmitEvent public emitEvent;\\r\\n    uint256[10] private __gap;\\r\\n\\r\\n    function __xWinStrategy_init(\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        address _baseToken,\\r\\n        address _USDTokenAddr\\r\\n     ) onlyInitializing internal {\\r\\n        require(_baseToken != address(0), \\\"_baseToken input 0\\\");\\r\\n        require(_USDTokenAddr != address(0), \\\"_USDTokenAddr input 0\\\");\\r\\n        __Ownable_init();\\r\\n        __ERC20_init(name, symbol);\\r\\n        __ReentrancyGuard_init();\\r\\n        __Pausable_init();\\r\\n        baseToken = _baseToken;\\r\\n        stablecoinUSDAddr = _USDTokenAddr;\\r\\n    }\\r\\n\\r\\n    event _Deposit(uint256 datetime, address contractaddress, uint256 rate, uint256 depositAmount, uint256 shares);\\r\\n    event _Withdraw(uint256 datetime, address contractaddress, uint256 rate, uint256 avrCost, uint256 withdrawAmount, uint256 shares);\\r\\n\\r\\n\\r\\n    function getVaultValues() external virtual view returns (uint256);\\r\\n    function _getVaultValues() internal virtual view returns (uint256);\\r\\n    function getUnitPrice()  external virtual view returns (uint256);\\r\\n    function _getUnitPrice() internal virtual view returns (uint256);   \\r\\n    function getVaultValuesInUSD() external virtual view returns (uint256);        \\r\\n    function getUnitPriceInUSD()  external virtual view returns (uint256);\\r\\n    function deposit(uint256 amount) external virtual returns (uint256);\\r\\n    function withdraw(uint256 amount) external virtual returns (uint256);\\r\\n        function deposit(uint256 amount, uint32 slippage) external virtual returns (uint256);\\r\\n    function withdraw(uint256 amount, uint32 slippage) external virtual returns (uint256);\\r\\n\\r\\n    function setEmitEvent(address _addr) external onlyOwner {\\r\\n        require(_addr != address(0), \\\"_addr input is 0\\\");\\r\\n         emitEvent = IxWinEmitEvent(_addr);\\r\\n    }\\r\\n\\r\\n    function updateUSDAddr(address _newUSDAddr) external onlyOwner {\\r\\n        require(_newUSDAddr != address(0), \\\"_newUSDAddr input is 0\\\");\\r\\n        stablecoinUSDAddr = _newUSDAddr;\\r\\n    }\\r\\n\\r\\n    function setPause() external onlyOwner {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    function setUnPause() external onlyOwner {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/xWinStrategyWithFee.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\r\\nimport \\\"./xWinStrategy.sol\\\";\\r\\nimport \\\"./Interface/ILockedStake.sol\\\";\\r\\n// import \\\"hardhat/console.sol\\\";\\r\\n\\r\\nabstract contract xWinStrategyWithFee is xWinStrategy {\\r\\n     \\r\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\r\\n\\r\\n    mapping(address => bool) public waivedPerformanceFees;\\r\\n    uint256 public performanceFee; // 10%\\r\\n    uint256 public managerFee;\\r\\n    uint256 public pendingMFee;\\r\\n    uint256 public collectionPeriod; // Tomorrow 12PM\\r\\n    uint256 public collectionBlock;\\r\\n    uint256 public prevCollectionBlock;\\r\\n    uint256 public watermarkUnitprice;\\r\\n    address public strategyManager;\\r\\n    uint256 public lastManagerFeeCollection;\\r\\n    uint256 public blocksPerDay;\\r\\n    uint256 public pendingNewPerformanceFee;\\r\\n    address public lockingAddress;\\r\\n    uint256[10] private __gap;\\r\\n    \\r\\n    function __xWinStrategyWithFee_init(\\r\\n        string memory _name,\\r\\n        string memory _symbol,\\r\\n        address _baseToken,\\r\\n        address _USDTokenAddr,\\r\\n        uint256 _managerFee,\\r\\n        uint256 _performanceFee,\\r\\n        uint256 _collectionPeriod,\\r\\n        address _managerAddr\\r\\n    ) onlyInitializing internal {\\r\\n        require(_managerFee <= 300, \\\"Strategy Fee capped at 3%\\\");\\r\\n        require(_performanceFee <= 2000, \\\"Performance Fee capped at 20%\\\");\\r\\n        require(_managerAddr != address(0), \\\"_managerAddr input 0\\\");\\r\\n        __xWinStrategy_init(_name, _symbol, _baseToken, _USDTokenAddr);\\r\\n        performanceFee = _performanceFee;\\r\\n        managerFee = _managerFee;\\r\\n        collectionPeriod = _collectionPeriod;\\r\\n        strategyManager = _managerAddr;\\r\\n        lastManagerFeeCollection = block.number;\\r\\n        collectionBlock = block.number + collectionPeriod;\\r\\n        prevCollectionBlock = block.number;\\r\\n        watermarkUnitprice = (10 ** ERC20Upgradeable(_baseToken).decimals());\\r\\n        blocksPerDay = 28800;\\r\\n    }\\r\\n\\r\\n    function updateLockedStakingAddress(address _lockedStaking) external onlyOwner {\\r\\n        lockingAddress = _lockedStaking;\\r\\n    }\\r\\n\\r\\n    function canCollectPerformanceFee() public virtual view returns (bool) {\\r\\n        return block.number > collectionBlock;\\r\\n    }\\r\\n\\r\\n    function _calcFundFee() internal virtual {\\r\\n        uint256 totalblock = block.number - lastManagerFeeCollection;\\r\\n        lastManagerFeeCollection = block.number;\\r\\n        uint256 supply = getFundTotalSupply();\\r\\n\\r\\n        if(supply == 0) return;\\r\\n\\r\\n        // calculate number of shares to create per block\\r\\n        uint256 uPerBlock = supply * 10000 / (10000 - managerFee);\\r\\n        uPerBlock = uPerBlock - supply; // total new blocks generated in a year\\r\\n        uPerBlock = uPerBlock / (blocksPerDay * 365);\\r\\n\\r\\n        // award the shares\\r\\n        pendingMFee = pendingMFee + (totalblock * uPerBlock);\\r\\n    }\\r\\n\\r\\n    function collectFundFee() external virtual {\\r\\n        _calcFundFee();\\r\\n        uint256 toAward = pendingMFee;\\r\\n        pendingMFee = 0;\\r\\n        _mint(strategyManager, toAward);\\r\\n    }\\r\\n\\r\\n    function collectPerformanceFee() external virtual {\\r\\n        require(canCollectPerformanceFee(), \\\"block number has not passed collection block\\\");\\r\\n        uint unitPrice = _getUnitPrice();\\r\\n        if (watermarkUnitprice < unitPrice) {\\r\\n            uint totalUnits = getFundTotalSupply();\\r\\n            uint totalProfit = (unitPrice - watermarkUnitprice) * totalUnits / 1e18;\\r\\n            // collect performance fee\\r\\n            uint feeAmt = totalProfit * performanceFee / 10000;\\r\\n            uint newShares = _getMintQty(feeAmt); \\r\\n            _mint(strategyManager, newShares);\\r\\n            watermarkUnitprice = unitPrice;\\r\\n        }\\r\\n        collectionBlock = block.number + collectionPeriod;\\r\\n        prevCollectionBlock = block.number;\\r\\n\\r\\n        // check if there is a pending update to performfee\\r\\n        if (pendingNewPerformanceFee > 0) {\\r\\n            performanceFee = pendingNewPerformanceFee;\\r\\n            pendingNewPerformanceFee = 0;\\r\\n        }\\r\\n        // emit event\\r\\n    }\\r\\n\\r\\n    function performanceWithdraw(uint256 _withdrawUnits, uint256 _amtOut) internal returns (uint256) {\\r\\n        if(performanceFee == 0) return _amtOut;\\r\\n        uint256 unitPrice = _getUnitPrice();\\r\\n        if (unitPrice <= watermarkUnitprice || waivedPerformanceFees[msg.sender]) {\\r\\n            return _amtOut; // no profit => no performance fee, manager => no performance fee\\r\\n        }\\r\\n        \\r\\n        uint blockDiff = block.number - prevCollectionBlock;\\r\\n        if (blockDiff > collectionPeriod) {\\r\\n            blockDiff = collectionPeriod;\\r\\n        }\\r\\n        uint256 profit = (unitPrice - watermarkUnitprice) * _withdrawUnits * blockDiff / collectionPeriod / 1e18;\\r\\n        uint256 fee = profit * performanceFee / 10000;\\r\\n        \\r\\n        if (lockingAddress != address(0)) {\\r\\n            uint256 discount = ILockedStake(lockingAddress).getFavor(msg.sender);\\r\\n            fee = fee - ((fee * discount) / 10000);\\r\\n        }\\r\\n        IERC20Upgradeable(baseToken).safeTransfer(strategyManager, fee);\\r\\n        return  _amtOut - fee;\\r\\n    }\\r\\n\\r\\n    /// @dev Calc qty to issue during subscription \\r\\n    function _getMintQty(uint256 _depositAmt) internal virtual view returns (uint256 mintQty)  {\\r\\n        \\r\\n        _depositAmt = _convertTo18(_depositAmt, address(baseToken));\\r\\n        uint256 totalFundAfter = this.getVaultValues();\\r\\n        uint256 totalFundB4 = totalFundAfter > _depositAmt ?  totalFundAfter - _depositAmt : 0;\\r\\n        mintQty = _getNewFundUnits(totalFundB4, totalFundAfter);\\r\\n        return (mintQty);\\r\\n    }\\r\\n\\r\\n    /// @dev Mint unit back to investor\\r\\n    function _getNewFundUnits(uint256 totalFundB4, uint256 totalValueAfter) \\r\\n        internal virtual view returns (uint256){\\r\\n          \\r\\n        if(totalValueAfter == 0) return 0;\\r\\n        if(totalFundB4 == 0) return totalValueAfter; \\r\\n\\r\\n        uint256 totalUnitAfter = totalValueAfter * getFundTotalSupply() / totalFundB4;\\r\\n        uint256 mintUnit = totalUnitAfter - getFundTotalSupply();\\r\\n        \\r\\n        return mintUnit;\\r\\n    }\\r\\n\\r\\n    function setPerformanceFee(uint256 _newPerformanceFee) external onlyOwner {\\r\\n        require(_newPerformanceFee <= 2000, \\\"Performance Fee capped at 20%\\\");\\r\\n        pendingNewPerformanceFee = _newPerformanceFee;\\r\\n    }\\r\\n\\r\\n    function setManagerFee(uint256 _newManagerFee) external onlyOwner {\\r\\n        require(_newManagerFee <= 300, \\\"Strategy Fee capped at 3%\\\");\\r\\n        managerFee = _newManagerFee;\\r\\n    }\\r\\n\\r\\n    function setPerformanceCollectionPeriod(uint256 _newPeriod) external onlyOwner {\\r\\n        collectionPeriod = _newPeriod;\\r\\n    }\\r\\n\\r\\n    function setBlockPerDay(uint256 _newBlocksPerDay) external onlyOwner {\\r\\n        blocksPerDay = _newBlocksPerDay;\\r\\n    }\\r\\n\\r\\n    function getFundTotalSupply() public virtual view returns(uint256) {\\r\\n        return totalSupply() + pendingMFee;\\r\\n    }\\r\\n\\r\\n    /// Get All the fund data needed for client\\r\\n    function GetStrategyData() external view returns (\\r\\n          address baseCcy,\\r\\n          uint256 totalUnitB4,\\r\\n          uint256 unitprice,\\r\\n          uint256 fundvalue,\\r\\n          uint256 unitpriceUSD,\\r\\n          uint256 fundvalueUSD,\\r\\n          string memory name,\\r\\n          string memory symbol,\\r\\n          uint256 managementFee,\\r\\n          uint256 performFee,\\r\\n          address mAddr,\\r\\n          uint256 highWaterMarkPrice\\r\\n        ){\\r\\n            return (\\r\\n                baseToken, \\r\\n                getFundTotalSupply(), \\r\\n                this.getUnitPrice(), \\r\\n                this.getVaultValues(),\\r\\n                this.getUnitPriceInUSD(), \\r\\n                this.getVaultValuesInUSD(),\\r\\n                this.name(),\\r\\n                this.symbol(),\\r\\n                managerFee,\\r\\n                performanceFee,\\r\\n                strategyManager,\\r\\n                watermarkUnitprice\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function setManagerWallet(address _newManagerWallet) external onlyOwner {\\r\\n        require(_newManagerWallet != address(0), \\\"_newManagerWallet input is 0\\\");\\r\\n        strategyManager = _newManagerWallet;\\r\\n    }\\r\\n\\r\\n    function _convertTo18(uint value, address token) internal view returns (uint){\\r\\n        uint diffDecimal = 18 - ERC20Upgradeable(token).decimals();\\r\\n        return diffDecimal > 0 ? (value * (10**diffDecimal)) : value; \\r\\n    } \\r\\n\\r\\n    function _convertFrom18(uint value, address token) internal view returns (uint){\\r\\n        uint diffDecimal = 18 - ERC20Upgradeable(token).decimals();\\r\\n        return diffDecimal > 0 ? (value / (10**diffDecimal)) : value; \\r\\n    } \\r\\n\\r\\n    function addWaiveFee(address _contract) external onlyOwner {\\r\\n        waivedPerformanceFees[_contract] = true; \\r\\n    }\\r\\n\\r\\n    function removeWaiveFee(address _contract) external onlyOwner {\\r\\n        waivedPerformanceFees[_contract] = false;\\r\\n    }\\r\\n\\r\\n    function _isContract(address addr) internal view returns (bool) {\\r\\n        \\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(addr)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromProtocol\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toProtocol\",\"type\":\"address\"}],\"name\":\"SwitchProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"datetime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractaddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"_Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"datetime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractaddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"avrCost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"_Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GetStrategyData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"baseCcy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalUnitB4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitprice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundvalue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitpriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundvalueUSD\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"managementFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"performFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"mAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"highWaterMarkPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_OlaFinance\",\"outputs\":[{\"internalType\":\"contract OlaFinance\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rainMaker\",\"outputs\":[{\"internalType\":\"contract RainMakerForOlaLens\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"addWaiveFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blocksPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canCollectPerformanceFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canReclaimRainMaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canSystemDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectFundFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectionBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectionPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_slippage\",\"type\":\"uint32\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyUnWindPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emitEvent\",\"outputs\":[{\"internalType\":\"contract IxWinEmitEvent\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"executors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAccruedComp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBorrowRatePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStrategyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"targetaddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardaddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupplyRatePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnitPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnitPriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultValuesInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapEngine\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lendingRewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_xWinPriceMaster\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_USDTokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_managerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_performanceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collectionPeriod\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_managerAddr\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastManagerFeeCollection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendingRewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingMFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingNewPerformanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prevCollectionBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvestClaimComp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"removeWaiveFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newBlocksPerDay\",\"type\":\"uint256\"}],\"name\":\"setBlockPerDay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setEmitEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_allow\",\"type\":\"bool\"}],\"name\":\"setExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRewardToken\",\"type\":\"address\"}],\"name\":\"setLendingRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newManagerFee\",\"type\":\"uint256\"}],\"name\":\"setManagerFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newManagerWallet\",\"type\":\"address\"}],\"name\":\"setManagerWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPeriod\",\"type\":\"uint256\"}],\"name\":\"setPerformanceCollectionPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPerformanceFee\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newPriceMaster\",\"type\":\"address\"}],\"name\":\"setPriceMaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rainMaker_\",\"type\":\"address\"}],\"name\":\"setRainMaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newSwapEngine\",\"type\":\"address\"}],\"name\":\"setSwapEngine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setUnPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smallRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stablecoinUSDAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEngine\",\"outputs\":[{\"internalType\":\"contract IxWinSwap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"systemDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockedStaking\",\"type\":\"address\"}],\"name\":\"updateLockedStakingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"olaFinance_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rainMaker_\",\"type\":\"address\"}],\"name\":\"updateProperties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ratio\",\"type\":\"uint256\"}],\"name\":\"updateSmallRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newUSDAddr\",\"type\":\"address\"}],\"name\":\"updateUSDAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"waivedPerformanceFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"watermarkUnitprice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_slippage\",\"type\":\"uint32\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xWinPriceMaster\",\"outputs\":[{\"internalType\":\"contract IxWinPriceMaster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "xWinSingleAssetOla", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}