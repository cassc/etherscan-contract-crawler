{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/MoniwarToken/MowaTokenPresaleV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"../Library/Context.sol\\\";\\r\\nimport \\\"../Library/Ownable.sol\\\";\\r\\nimport \\\"../Library/SafeMath.sol\\\";\\r\\nimport \\\"../Library/ReentrancyGuard.sol\\\";\\r\\nimport \\\"../Library/IERC20.sol\\\";\\r\\nimport \\\"../Library/BlockTime.sol\\\";\\r\\n\\r\\ncontract MowaTokenPresaleV2 is Ownable, ReentrancyGuard, BlockTime {\\r\\n    using SafeMath for uint256;\\r\\n    IERC20 public mowaToken;\\r\\n\\r\\n    // typeVesting: 1 seed, 2 private1, 3 private2\\r\\n    // block user vesting\\r\\n    struct BlackList {\\r\\n        uint256 startTime;\\r\\n        uint256 endTime;\\r\\n        uint256 startBlock;\\r\\n        uint256 endBlock;\\r\\n    }\\r\\n    // address => number lock =>  BlackList\\r\\n    mapping(address => mapping(uint256 => BlackList)) public blackList;\\r\\n    mapping(address => uint256) public countBlackList;\\r\\n\\r\\n    struct PartnerClaim {\\r\\n        uint256 totalReward;\\r\\n        uint256 blockStartClaim;\\r\\n        uint256 blockEndClaim;\\r\\n        uint256 mowaRewardByBlock; // (totalReward / (blockEndClaim - blockStartClaim))\\r\\n        uint256 hasClaim;\\r\\n        uint256 claimLastTime;\\r\\n        uint256 currentMOWAClaim;\\r\\n        bool hasLocked;\\r\\n    }\\r\\n\\r\\n    // address => typeVesting => PartnerClaim\\r\\n    mapping(address => mapping(uint256 => PartnerClaim)) public partnerClaim;\\r\\n\\r\\n    struct Claimed {\\r\\n        uint256 time;\\r\\n        uint256 mowa;\\r\\n    }\\r\\n    // address => typeVesting => Claimed\\r\\n    mapping(address => mapping(uint256 => Claimed[])) public claimed;\\r\\n\\r\\n    address private supervisor = 0x171a1639Aa7fe24b406c098C8d91198D625791e9;\\r\\n    address private admin = 0x36b5628e587C257B64c41c63c9f0b67c0D27cad4;\\r\\n    bool isActive = true;\\r\\n\\r\\n    constructor(IERC20 _mowaToken) {\\r\\n        mowaToken = _mowaToken;\\r\\n    }\\r\\n\\r\\n    modifier onlySupervisor() {\\r\\n        require(isActive == true, \\\"ask admin for approval\\\");\\r\\n        require(_msgSender() == supervisor, \\\"require safe supervisor Address.\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAdmin(){\\r\\n        require(_msgSender() == admin, \\\"require safe Admin Address.\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function changeMowaToken(address _mowa) public onlyOwner {\\r\\n        mowaToken = IERC20(_mowa);\\r\\n    }\\r\\n\\r\\n    function changeSupervisor(address _supervisor) public onlyOwner {\\r\\n        supervisor = _supervisor;\\r\\n    }\\r\\n\\r\\n    function changeAdmin(address _admin) public onlyOwner {\\r\\n        admin = _admin;\\r\\n    }\\r\\n\\r\\n    function getInfoClaim(address user, uint256 typeVesting) public view returns (PartnerClaim memory) {\\r\\n        bool hasLocked = checkBlacklist(user);\\r\\n        uint256 _calculatorMowa;\\r\\n        if(hasLocked == true){\\r\\n            _calculatorMowa = 0;\\r\\n        } else {\\r\\n            _calculatorMowa = calculatorMowa(user, typeVesting);\\r\\n        }\\r\\n        return PartnerClaim({\\r\\n            totalReward : partnerClaim[user][typeVesting].totalReward,\\r\\n            blockStartClaim : partnerClaim[user][typeVesting].blockStartClaim,\\r\\n            blockEndClaim : partnerClaim[user][typeVesting].blockEndClaim,\\r\\n            mowaRewardByBlock : partnerClaim[user][typeVesting].mowaRewardByBlock,\\r\\n            hasClaim : partnerClaim[user][typeVesting].hasClaim,\\r\\n            claimLastTime : partnerClaim[user][typeVesting].claimLastTime,\\r\\n            currentMOWAClaim : _calculatorMowa,\\r\\n            hasLocked : hasLocked\\r\\n        });\\r\\n    }\\r\\n\\r\\n    function historyClaim(address user, uint256 typeVesting) public view returns (Claimed[] memory){\\r\\n        return claimed[user][typeVesting];\\r\\n    }\\r\\n\\r\\n    // check blacklist user\\r\\n    function checkBlacklist(address user) public view returns (bool hasBlacklist){\\r\\n        hasBlacklist = false;\\r\\n        if(countBlackList[user] > 0){\\r\\n            for(uint256 index = 1; index <= countBlackList[user]; index++){\\r\\n                if(block.number >= blackList[user][index].startBlock && block.number <= blackList[user][index].endBlock){\\r\\n                    hasBlacklist = true;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function calculatorMowa(address user, uint256 typeVesting) public view returns (uint256 mowa){\\r\\n        if(\\r\\n            block.number < partnerClaim[user][typeVesting].blockStartClaim ||\\r\\n            partnerClaim[user][typeVesting].totalReward == 0 ||\\r\\n            partnerClaim[user][typeVesting].totalReward == partnerClaim[user][typeVesting].hasClaim\\r\\n        ){\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint currentBlockReward = block.number.sub(partnerClaim[user][typeVesting].blockStartClaim);\\r\\n        if(countBlackList[user] > 0){\\r\\n            uint256 rewardLock = 0;\\r\\n            for(uint256 index = 1; index <= countBlackList[user]; index++){\\r\\n                if(block.number >= blackList[user][index].endBlock){\\r\\n                    rewardLock += (blackList[user][index].endBlock - blackList[user][index].startBlock);\\r\\n                }\\r\\n            }\\r\\n            currentBlockReward -= rewardLock;\\r\\n        }\\r\\n        uint _MowaReward = (currentBlockReward.mul(partnerClaim[user][typeVesting].mowaRewardByBlock));\\r\\n        if(_MowaReward > partnerClaim[user][typeVesting].totalReward){\\r\\n            _MowaReward = partnerClaim[user][typeVesting].totalReward;\\r\\n        }\\r\\n        _MowaReward -= partnerClaim[user][typeVesting].hasClaim;\\r\\n        return _MowaReward;\\r\\n    }\\r\\n\\r\\n    function claimToken(uint256 typeVesting) public nonReentrant {\\r\\n        require(partnerClaim[_msgSender()][typeVesting].totalReward > 0, \\\"wallet not in whitelist\\\");\\r\\n        bool hasBlacklist = checkBlacklist(_msgSender());\\r\\n        require(hasBlacklist == false, \\\"This wallet address is locked\\\");\\r\\n\\r\\n        uint256 amount = calculatorMowa(_msgSender(), typeVesting);\\r\\n        require(amount > 0, \\\"Currently there is no MOWA available to claim\\\");\\r\\n\\r\\n        uint256 mowaBalance = mowaToken.balanceOf(address(this));\\r\\n        require(mowaBalance >= amount, \\\"not enough mowa to pay the reward\\\");\\r\\n\\r\\n        mowaToken.transfer(_msgSender(), amount);\\r\\n        partnerClaim[_msgSender()][typeVesting].hasClaim += amount;\\r\\n        partnerClaim[_msgSender()][typeVesting].claimLastTime = block.timestamp;\\r\\n\\r\\n        claimed[_msgSender()][typeVesting].push(Claimed({\\r\\n            time : block.timestamp,\\r\\n            mowa : amount\\r\\n        }));\\r\\n    }\\r\\n\\r\\n    function setBlackList(address user, uint256 _startTime, uint256 _endTime) public onlySupervisor {\\r\\n        require(_startTime >= block.timestamp && _startTime < _endTime, \\\"Incorrect start and end times\\\");\\r\\n        uint256 blockStart = getBlockNumber(_startTime);\\r\\n        uint256 blockEnd = getBlockNumber(_endTime);\\r\\n        bool addContinue = true;\\r\\n        if(countBlackList[user] > 0){\\r\\n            for(uint256 index = 1; index <= countBlackList[user]; index++){\\r\\n                if(_startTime <= blackList[user][index].endTime){\\r\\n                    addContinue = false;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        require(addContinue == true, \\\"time add must be more than time before add\\\");\\r\\n        countBlackList[user] += 1;\\r\\n\\r\\n        blackList[user][countBlackList[user]].startTime = _startTime;\\r\\n        blackList[user][countBlackList[user]].startBlock = blockStart;\\r\\n        blackList[user][countBlackList[user]].endTime = _endTime;\\r\\n        blackList[user][countBlackList[user]].endBlock = blockEnd;\\r\\n    }\\r\\n\\r\\n    function editBlackList(address user, uint256 _startTime, uint256 _endTime, uint256 number) public onlySupervisor {\\r\\n        require(_startTime < _endTime, \\\"Incorrect start and end times\\\");\\r\\n        uint256 blockStart = getBlockNumber(_startTime);\\r\\n        uint256 blockEnd = getBlockNumber(_endTime);\\r\\n\\r\\n        blackList[user][number].startTime = _startTime;\\r\\n        blackList[user][number].startBlock = blockStart;\\r\\n        blackList[user][number].endTime = _endTime;\\r\\n        blackList[user][number].endBlock = blockEnd;\\r\\n    }\\r\\n\\r\\n    function changeWallet(address userOld, address userNew, uint256 typeVesting) public onlySupervisor {\\r\\n        require(partnerClaim[userNew][typeVesting].totalReward == 0, \\\"wallet address already exists\\\");\\r\\n        require(partnerClaim[userOld][typeVesting].totalReward > 0, \\\"wallet address is not define\\\");\\r\\n\\r\\n        partnerClaim[userNew][typeVesting] = partnerClaim[userOld][typeVesting];\\r\\n        if(countBlackList[userOld] > 0){\\r\\n            for(uint256 index = 1; index <= countBlackList[userOld]; index++){\\r\\n                blackList[userNew][index] = blackList[userOld][index];\\r\\n                delete blackList[userOld][index];\\r\\n            }\\r\\n        }\\r\\n        delete partnerClaim[userOld][typeVesting];\\r\\n        claimed[userNew][typeVesting] = claimed[userOld][typeVesting];\\r\\n        delete claimed[userOld][typeVesting];\\r\\n\\r\\n        countBlackList[userNew] = countBlackList[userOld];\\r\\n        delete countBlackList[userOld];\\r\\n    }\\r\\n\\r\\n    function addWallet(address[] memory user, uint256[] memory _totalReward, uint256[] memory startTime, uint256[] memory endTime, uint256 typeVesting) public onlyOwner {\\r\\n        for (uint256 index = 0; index < user.length; index++) {\\r\\n            partnerClaim[user[index]][typeVesting].totalReward = _totalReward[index];\\r\\n            partnerClaim[user[index]][typeVesting].blockStartClaim = getBlockNumber(startTime[index]);\\r\\n            partnerClaim[user[index]][typeVesting].blockEndClaim = getBlockNumber(endTime[index]);\\r\\n            partnerClaim[user[index]][typeVesting].mowaRewardByBlock = partnerClaim[user[index]][typeVesting].totalReward.div(partnerClaim[user[index]][typeVesting].blockEndClaim - partnerClaim[user[index]][typeVesting].blockStartClaim);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function changIsActive(bool active) public onlyAdmin {\\r\\n        isActive = active;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraw bnb from this contract (Callable by owner only)\\r\\n     */\\r\\n    function SwapExactToken(\\r\\n        address coinAddress,\\r\\n        uint256 value,\\r\\n        address payable to\\r\\n    ) public onlyOwner {\\r\\n        if (coinAddress == address(0)) {\\r\\n            return to.transfer(value);\\r\\n        }\\r\\n        IERC20(coinAddress).transfer(to, value);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/contracts/Library/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        uint256 c = a + b;\\r\\n        if (c < a) return (false, 0);\\r\\n        return (true, c);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        if (b > a) return (false, 0);\\r\\n        return (true, a - b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) return (true, 0);\\r\\n        uint256 c = a * b;\\r\\n        if (c / a != b) return (false, 0);\\r\\n        return (true, c);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        if (b == 0) return (false, 0);\\r\\n        return (true, a / b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        if (b == 0) return (false, 0);\\r\\n        return (true, a % b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) return 0;\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/contracts/Library/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module that helps prevent reentrant calls to a function.\\r\\n *\\r\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\r\\n * available, which can be applied to functions to make sure there are no nested\\r\\n * (reentrant) calls to them.\\r\\n *\\r\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\r\\n * `nonReentrant` may not call one another. This can be worked around by making\\r\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\r\\n * points to them.\\r\\n *\\r\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\r\\n * to protect against it, check out our blog post\\r\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\r\\n */\\r\\nabstract contract ReentrancyGuard {\\r\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\r\\n    // word because each write operation emits an extra SLOAD to first read the\\r\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\r\\n    // back. This is the compiler's defense against contract upgrades and\\r\\n    // pointer aliasing, and it cannot be disabled.\\r\\n\\r\\n    // The values being non-zero value makes deployment a bit more expensive,\\r\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\r\\n    // amount. Since refunds are capped to a percentage of the total\\r\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\r\\n    // increase the likelihood of the full refund coming into effect.\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    constructor() {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and making it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _status = _ENTERED;\\r\\n\\r\\n        _;\\r\\n\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/contracts/Library/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\nimport \\\"./Context.sol\\\";\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\n \\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }    \\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/Library/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"\r\n    },\r\n    \"/contracts/Library/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with GSN meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/Library/BlockTime.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\ncontract BlockTime {\\r\\n    function getBlockNumber(uint256 _time) public view returns (uint256 _block) {\\r\\n        uint256 timeNow = block.timestamp;\\r\\n        uint256 blockNumber = block.number;\\r\\n        if(_time == timeNow){\\r\\n            return blockNumber;\\r\\n        } else if(_time > timeNow){\\r\\n            uint256 calBlock = (_time - timeNow) / 3;\\r\\n            return blockNumber + calBlock;\\r\\n        } else {\\r\\n            uint256 calBlock = (timeNow - _time) / 3;\\r\\n            return blockNumber - calBlock;\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_mowaToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coinAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"SwapExactToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"user\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_totalReward\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"startTime\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"endTime\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"typeVesting\",\"type\":\"uint256\"}],\"name\":\"addWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blackList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"typeVesting\",\"type\":\"uint256\"}],\"name\":\"calculatorMowa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mowa\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"changIsActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mowa\",\"type\":\"address\"}],\"name\":\"changeMowaToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_supervisor\",\"type\":\"address\"}],\"name\":\"changeSupervisor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userOld\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userNew\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"typeVesting\",\"type\":\"uint256\"}],\"name\":\"changeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"checkBlacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasBlacklist\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"typeVesting\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mowa\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"countBlackList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"editBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"getBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"typeVesting\",\"type\":\"uint256\"}],\"name\":\"getInfoClaim\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockStartClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockEndClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mowaRewardByBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hasClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimLastTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentMOWAClaim\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasLocked\",\"type\":\"bool\"}],\"internalType\":\"struct MowaTokenPresaleV2.PartnerClaim\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"typeVesting\",\"type\":\"uint256\"}],\"name\":\"historyClaim\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mowa\",\"type\":\"uint256\"}],\"internalType\":\"struct MowaTokenPresaleV2.Claimed[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mowaToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"partnerClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockStartClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockEndClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mowaRewardByBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hasClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimLastTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentMOWAClaim\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasLocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MowaTokenPresaleV2", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000411ec510c85c9e56271bf4e10364ffa909e685d9", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}