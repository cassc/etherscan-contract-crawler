{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals()\r\n    external\r\n    view\r\n    returns (\r\n      uint8\r\n    );\r\n\r\n  function description()\r\n    external\r\n    view\r\n    returns (\r\n      string memory\r\n    );\r\n\r\n  function version()\r\n    external\r\n    view\r\n    returns (\r\n      uint256\r\n    );\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(\r\n    uint80 _roundId\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n}\r\n\r\npragma solidity ^0.8.0;\r\npragma abicoder v2;\r\n\r\n/**\r\n * @title PancakePredictionV2\r\n */\r\ncontract PancakePredictionV2 is Ownable, Pausable, ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n\r\n    AggregatorV3Interface public oracle;\r\n\r\n    bool public genesisLockOnce = false;\r\n    bool public genesisStartOnce = false;\r\n\r\n    address public adminAddress; // address of the admin\r\n    address public operatorAddress; // address of the operator\r\n\r\n    uint256 public bufferSeconds; // number of seconds for valid execution of a prediction round\r\n    uint256 public intervalSeconds; // interval in seconds between two prediction rounds\r\n\r\n    uint256 public minBetAmount; // minimum betting amount (denominated in wei)\r\n    uint256 public treasuryFee; // treasury rate (e.g. 200 = 2%, 150 = 1.50%)\r\n    uint256 public treasuryAmount; // treasury amount that was not claimed\r\n\r\n    uint256 public currentEpoch; // current epoch for prediction round\r\n\r\n    uint256 public oracleLatestRoundId; // converted from uint80 (Chainlink)\r\n    uint256 public oracleUpdateAllowance; // seconds\r\n\r\n    uint256 public constant MAX_TREASURY_FEE = 1000; // 10%\r\n\r\n    mapping(uint256 => mapping(address => BetInfo)) public ledger;\r\n    mapping(uint256 => Round) public rounds;\r\n    mapping(address => uint256[]) public userRounds;\r\n\r\n    enum Position {\r\n        Bull,\r\n        Bear\r\n    }\r\n\r\n    struct Round {\r\n        uint256 epoch;\r\n        uint256 startTimestamp;\r\n        uint256 lockTimestamp;\r\n        uint256 closeTimestamp;\r\n        int256 lockPrice;\r\n        int256 closePrice;\r\n        uint256 lockOracleId;\r\n        uint256 closeOracleId;\r\n        uint256 totalAmount;\r\n        uint256 bullAmount;\r\n        uint256 bearAmount;\r\n        uint256 rewardBaseCalAmount;\r\n        uint256 rewardAmount;\r\n        bool oracleCalled;\r\n    }\r\n\r\n    struct BetInfo {\r\n        Position position;\r\n        uint256 amount;\r\n        bool claimed; // default false\r\n    }\r\n\r\n    event BetBear(address indexed sender, uint256 indexed epoch, uint256 amount);\r\n    event BetBull(address indexed sender, uint256 indexed epoch, uint256 amount);\r\n    event Claim(address indexed sender, uint256 indexed epoch, uint256 amount);\r\n    event EndRound(uint256 indexed epoch, uint256 indexed roundId, int256 price);\r\n    event LockRound(uint256 indexed epoch, uint256 indexed roundId, int256 price);\r\n\r\n    event NewAdminAddress(address admin);\r\n    event NewBufferAndIntervalSeconds(uint256 bufferSeconds, uint256 intervalSeconds);\r\n    event NewMinBetAmount(uint256 indexed epoch, uint256 minBetAmount);\r\n    event NewTreasuryFee(uint256 indexed epoch, uint256 treasuryFee);\r\n    event NewOperatorAddress(address operator);\r\n    event NewOracle(address oracle);\r\n    event NewOracleUpdateAllowance(uint256 oracleUpdateAllowance);\r\n\r\n    event Pause(uint256 indexed epoch);\r\n    event RewardsCalculated(\r\n        uint256 indexed epoch,\r\n        uint256 rewardBaseCalAmount,\r\n        uint256 rewardAmount,\r\n        uint256 treasuryAmount\r\n    );\r\n\r\n    event StartRound(uint256 indexed epoch);\r\n    event TokenRecovery(address indexed token, uint256 amount);\r\n    event TreasuryClaim(uint256 amount);\r\n    event Unpause(uint256 indexed epoch);\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == adminAddress, \"Not admin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdminOrOperator() {\r\n        require(msg.sender == adminAddress || msg.sender == operatorAddress, \"Not operator/admin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(msg.sender == operatorAddress, \"Not operator\");\r\n        _;\r\n    }\r\n\r\n    modifier notContract() {\r\n        require(!_isContract(msg.sender), \"Contract not allowed\");\r\n        require(msg.sender == tx.origin, \"Proxy contract not allowed\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param _oracleAddress: oracle address\r\n     * @param _adminAddress: admin address\r\n     * @param _operatorAddress: operator address\r\n     * @param _intervalSeconds: number of time within an interval\r\n     * @param _bufferSeconds: buffer of time for resolution of price\r\n     * @param _minBetAmount: minimum bet amounts (in wei)\r\n     * @param _oracleUpdateAllowance: oracle update allowance\r\n     * @param _treasuryFee: treasury fee (1000 = 10%)\r\n     */\r\n    constructor(\r\n        address _oracleAddress,\r\n        address _adminAddress,\r\n        address _operatorAddress,\r\n        uint256 _intervalSeconds,\r\n        uint256 _bufferSeconds,\r\n        uint256 _minBetAmount,\r\n        uint256 _oracleUpdateAllowance,\r\n        uint256 _treasuryFee\r\n    ) {\r\n        require(_treasuryFee <= MAX_TREASURY_FEE, \"Treasury fee too high\");\r\n\r\n        oracle = AggregatorV3Interface(_oracleAddress);\r\n        adminAddress = _adminAddress;\r\n        operatorAddress = _operatorAddress;\r\n        intervalSeconds = _intervalSeconds;\r\n        bufferSeconds = _bufferSeconds;\r\n        minBetAmount = _minBetAmount;\r\n        oracleUpdateAllowance = _oracleUpdateAllowance;\r\n        treasuryFee = _treasuryFee;\r\n    }\r\n\r\n    /**\r\n     * @notice Bet bear position\r\n     * @param epoch: epoch\r\n     */\r\n    function betBear(uint256 epoch) external payable whenNotPaused nonReentrant notContract {\r\n        require(epoch == currentEpoch, \"Bet is too early/late\");\r\n        require(_bettable(epoch), \"Round not bettable\");\r\n        require(msg.value >= minBetAmount, \"Bet amount must be greater than minBetAmount\");\r\n        require(ledger[epoch][msg.sender].amount == 0, \"Can only bet once per round\");\r\n\r\n        // Update round data\r\n        uint256 amount = msg.value;\r\n        Round storage round = rounds[epoch];\r\n        round.totalAmount = round.totalAmount + amount;\r\n        round.bearAmount = round.bearAmount + amount;\r\n\r\n        // Update user data\r\n        BetInfo storage betInfo = ledger[epoch][msg.sender];\r\n        betInfo.position = Position.Bear;\r\n        betInfo.amount = amount;\r\n        userRounds[msg.sender].push(epoch);\r\n\r\n        emit BetBear(msg.sender, epoch, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Bet bull position\r\n     * @param epoch: epoch\r\n     */\r\n    function betBull(uint256 epoch) external payable whenNotPaused nonReentrant notContract {\r\n        require(epoch == currentEpoch, \"Bet is too early/late\");\r\n        require(_bettable(epoch), \"Round not bettable\");\r\n        require(msg.value >= minBetAmount, \"Bet amount must be greater than minBetAmount\");\r\n        require(ledger[epoch][msg.sender].amount == 0, \"Can only bet once per round\");\r\n\r\n        // Update round data\r\n        uint256 amount = msg.value;\r\n        Round storage round = rounds[epoch];\r\n        round.totalAmount = round.totalAmount + amount;\r\n        round.bullAmount = round.bullAmount + amount;\r\n\r\n        // Update user data\r\n        BetInfo storage betInfo = ledger[epoch][msg.sender];\r\n        betInfo.position = Position.Bull;\r\n        betInfo.amount = amount;\r\n        userRounds[msg.sender].push(epoch);\r\n\r\n        emit BetBull(msg.sender, epoch, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Claim reward for an array of epochs\r\n     * @param epochs: array of epochs\r\n     */\r\n    function claim(uint256[] calldata epochs) external nonReentrant notContract {\r\n        uint256 reward; // Initializes reward\r\n\r\n        for (uint256 i = 0; i < epochs.length; i++) {\r\n            require(rounds[epochs[i]].startTimestamp != 0, \"Round has not started\");\r\n            require(block.timestamp > rounds[epochs[i]].closeTimestamp, \"Round has not ended\");\r\n\r\n            uint256 addedReward = 0;\r\n\r\n            // Round valid, claim rewards\r\n            if (rounds[epochs[i]].oracleCalled) {\r\n                require(claimable(epochs[i], msg.sender), \"Not eligible for claim\");\r\n                Round memory round = rounds[epochs[i]];\r\n                addedReward = (ledger[epochs[i]][msg.sender].amount * round.rewardAmount) / round.rewardBaseCalAmount;\r\n            }\r\n            // Round invalid, refund bet amount\r\n            else {\r\n                require(refundable(epochs[i], msg.sender), \"Not eligible for refund\");\r\n                addedReward = ledger[epochs[i]][msg.sender].amount;\r\n            }\r\n\r\n            ledger[epochs[i]][msg.sender].claimed = true;\r\n            reward += addedReward;\r\n\r\n            emit Claim(msg.sender, epochs[i], addedReward);\r\n        }\r\n\r\n        if (reward > 0) {\r\n            _safeTransferBNB(address(msg.sender), reward);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Start the next round n, lock price for round n-1, end round n-2\r\n     * @dev Callable by operator\r\n     */\r\n    function executeRound() external whenNotPaused onlyOperator {\r\n        require(\r\n            genesisStartOnce && genesisLockOnce,\r\n            \"Can only run after genesisStartRound and genesisLockRound is triggered\"\r\n        );\r\n\r\n        (uint80 currentRoundId, int256 currentPrice) = _getPriceFromOracle();\r\n\r\n        oracleLatestRoundId = uint256(currentRoundId);\r\n\r\n        // CurrentEpoch refers to previous round (n-1)\r\n        _safeLockRound(currentEpoch, currentRoundId, currentPrice);\r\n        _safeEndRound(currentEpoch - 1, currentRoundId, currentPrice);\r\n        _calculateRewards(currentEpoch - 1);\r\n\r\n        // Increment currentEpoch to current round (n)\r\n        currentEpoch = currentEpoch + 1;\r\n        _safeStartRound(currentEpoch);\r\n    }\r\n\r\n    /**\r\n     * @notice Lock genesis round\r\n     * @dev Callable by operator\r\n     */\r\n    function genesisLockRound() external whenNotPaused onlyOperator {\r\n        require(genesisStartOnce, \"Can only run after genesisStartRound is triggered\");\r\n        require(!genesisLockOnce, \"Can only run genesisLockRound once\");\r\n\r\n        (uint80 currentRoundId, int256 currentPrice) = _getPriceFromOracle();\r\n\r\n        oracleLatestRoundId = uint256(currentRoundId);\r\n\r\n        _safeLockRound(currentEpoch, currentRoundId, currentPrice);\r\n\r\n        currentEpoch = currentEpoch + 1;\r\n        _startRound(currentEpoch);\r\n        genesisLockOnce = true;\r\n    }\r\n\r\n    /**\r\n     * @notice Start genesis round\r\n     * @dev Callable by admin or operator\r\n     */\r\n    function genesisStartRound() external whenNotPaused onlyOperator {\r\n        require(!genesisStartOnce, \"Can only run genesisStartRound once\");\r\n\r\n        currentEpoch = currentEpoch + 1;\r\n        _startRound(currentEpoch);\r\n        genesisStartOnce = true;\r\n    }\r\n\r\n    /**\r\n     * @notice called by the admin to pause, triggers stopped state\r\n     * @dev Callable by admin or operator\r\n     */\r\n    function pause() external whenNotPaused onlyAdminOrOperator {\r\n        _pause();\r\n\r\n        emit Pause(currentEpoch);\r\n    }\r\n\r\n    /**\r\n     * @notice Claim all rewards in treasury\r\n     * @dev Callable by admin\r\n     */\r\n    function claimTreasury() external nonReentrant onlyAdmin {\r\n        uint256 currentTreasuryAmount = treasuryAmount;\r\n        treasuryAmount = 0;\r\n        _safeTransferBNB(adminAddress, currentTreasuryAmount);\r\n\r\n        emit TreasuryClaim(currentTreasuryAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice called by the admin to unpause, returns to normal state\r\n     * Reset genesis state. Once paused, the rounds would need to be kickstarted by genesis\r\n     */\r\n    function unpause() external whenPaused onlyAdmin {\r\n        genesisStartOnce = false;\r\n        genesisLockOnce = false;\r\n        _unpause();\r\n\r\n        emit Unpause(currentEpoch);\r\n    }\r\n\r\n    /**\r\n     * @notice Set buffer and interval (in seconds)\r\n     * @dev Callable by admin\r\n     */\r\n    function setBufferAndIntervalSeconds(uint256 _bufferSeconds, uint256 _intervalSeconds)\r\n        external\r\n        whenPaused\r\n        onlyAdmin\r\n    {\r\n        require(_bufferSeconds < _intervalSeconds, \"bufferSeconds must be inferior to intervalSeconds\");\r\n        bufferSeconds = _bufferSeconds;\r\n        intervalSeconds = _intervalSeconds;\r\n\r\n        emit NewBufferAndIntervalSeconds(_bufferSeconds, _intervalSeconds);\r\n    }\r\n\r\n    /**\r\n     * @notice Set minBetAmount\r\n     * @dev Callable by admin\r\n     */\r\n    function setMinBetAmount(uint256 _minBetAmount) external whenPaused onlyAdmin {\r\n        require(_minBetAmount != 0, \"Must be superior to 0\");\r\n        minBetAmount = _minBetAmount;\r\n\r\n        emit NewMinBetAmount(currentEpoch, minBetAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Set operator address\r\n     * @dev Callable by admin\r\n     */\r\n    function setOperator(address _operatorAddress) external onlyAdmin {\r\n        require(_operatorAddress != address(0), \"Cannot be zero address\");\r\n        operatorAddress = _operatorAddress;\r\n\r\n        emit NewOperatorAddress(_operatorAddress);\r\n    }\r\n\r\n    /**\r\n     * @notice Set Oracle address\r\n     * @dev Callable by admin\r\n     */\r\n    function setOracle(address _oracle) external whenPaused onlyAdmin {\r\n        require(_oracle != address(0), \"Cannot be zero address\");\r\n        oracleLatestRoundId = 0;\r\n        oracle = AggregatorV3Interface(_oracle);\r\n\r\n        // Dummy check to make sure the interface implements this function properly\r\n        oracle.latestRoundData();\r\n\r\n        emit NewOracle(_oracle);\r\n    }\r\n\r\n    /**\r\n     * @notice Set oracle update allowance\r\n     * @dev Callable by admin\r\n     */\r\n    function setOracleUpdateAllowance(uint256 _oracleUpdateAllowance) external whenPaused onlyAdmin {\r\n        oracleUpdateAllowance = _oracleUpdateAllowance;\r\n\r\n        emit NewOracleUpdateAllowance(_oracleUpdateAllowance);\r\n    }\r\n\r\n    /**\r\n     * @notice Set treasury fee\r\n     * @dev Callable by admin\r\n     */\r\n    function setTreasuryFee(uint256 _treasuryFee) external whenPaused onlyAdmin {\r\n        require(_treasuryFee <= MAX_TREASURY_FEE, \"Treasury fee too high\");\r\n        treasuryFee = _treasuryFee;\r\n\r\n        emit NewTreasuryFee(currentEpoch, treasuryFee);\r\n    }\r\n\r\n    /**\r\n     * @notice It allows the owner to recover tokens sent to the contract by mistake\r\n     * @param _token: token address\r\n     * @param _amount: token amount\r\n     * @dev Callable by owner\r\n     */\r\n    function recoverToken(address _token, uint256 _amount) external onlyOwner {\r\n        IERC20(_token).safeTransfer(address(msg.sender), _amount);\r\n\r\n        emit TokenRecovery(_token, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Set admin address\r\n     * @dev Callable by owner\r\n     */\r\n    function setAdmin(address _adminAddress) external onlyOwner {\r\n        require(_adminAddress != address(0), \"Cannot be zero address\");\r\n        adminAddress = _adminAddress;\r\n\r\n        emit NewAdminAddress(_adminAddress);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns round epochs and bet information for a user that has participated\r\n     * @param user: user address\r\n     * @param cursor: cursor\r\n     * @param size: size\r\n     */\r\n    function getUserRounds(\r\n        address user,\r\n        uint256 cursor,\r\n        uint256 size\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint256[] memory,\r\n            BetInfo[] memory,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 length = size;\r\n\r\n        if (length > userRounds[user].length - cursor) {\r\n            length = userRounds[user].length - cursor;\r\n        }\r\n\r\n        uint256[] memory values = new uint256[](length);\r\n        BetInfo[] memory betInfo = new BetInfo[](length);\r\n\r\n        for (uint256 i = 0; i < length; i++) {\r\n            values[i] = userRounds[user][cursor + i];\r\n            betInfo[i] = ledger[values[i]][user];\r\n        }\r\n\r\n        return (values, betInfo, cursor + length);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns round epochs length\r\n     * @param user: user address\r\n     */\r\n    function getUserRoundsLength(address user) external view returns (uint256) {\r\n        return userRounds[user].length;\r\n    }\r\n\r\n    /**\r\n     * @notice Get the claimable stats of specific epoch and user account\r\n     * @param epoch: epoch\r\n     * @param user: user address\r\n     */\r\n    function claimable(uint256 epoch, address user) public view returns (bool) {\r\n        BetInfo memory betInfo = ledger[epoch][user];\r\n        Round memory round = rounds[epoch];\r\n        if (round.lockPrice == round.closePrice) {\r\n            return false;\r\n        }\r\n        return\r\n            round.oracleCalled &&\r\n            betInfo.amount != 0 &&\r\n            !betInfo.claimed &&\r\n            ((round.closePrice > round.lockPrice && betInfo.position == Position.Bull) ||\r\n                (round.closePrice < round.lockPrice && betInfo.position == Position.Bear));\r\n    }\r\n\r\n    /**\r\n     * @notice Get the refundable stats of specific epoch and user account\r\n     * @param epoch: epoch\r\n     * @param user: user address\r\n     */\r\n    function refundable(uint256 epoch, address user) public view returns (bool) {\r\n        BetInfo memory betInfo = ledger[epoch][user];\r\n        Round memory round = rounds[epoch];\r\n        return\r\n            !round.oracleCalled &&\r\n            !betInfo.claimed &&\r\n            block.timestamp > round.closeTimestamp + bufferSeconds &&\r\n            betInfo.amount != 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate rewards for round\r\n     * @param epoch: epoch\r\n     */\r\n    function _calculateRewards(uint256 epoch) internal {\r\n        require(rounds[epoch].rewardBaseCalAmount == 0 && rounds[epoch].rewardAmount == 0, \"Rewards calculated\");\r\n        Round storage round = rounds[epoch];\r\n        uint256 rewardBaseCalAmount;\r\n        uint256 treasuryAmt;\r\n        uint256 rewardAmount;\r\n\r\n        // Bull wins\r\n        if (round.closePrice > round.lockPrice) {\r\n            rewardBaseCalAmount = round.bullAmount;\r\n            treasuryAmt = (round.totalAmount * treasuryFee) / 10000;\r\n            rewardAmount = round.totalAmount - treasuryAmt;\r\n        }\r\n        // Bear wins\r\n        else if (round.closePrice < round.lockPrice) {\r\n            rewardBaseCalAmount = round.bearAmount;\r\n            treasuryAmt = (round.totalAmount * treasuryFee) / 10000;\r\n            rewardAmount = round.totalAmount - treasuryAmt;\r\n        }\r\n        // House wins\r\n        else {\r\n            rewardBaseCalAmount = 0;\r\n            rewardAmount = 0;\r\n            treasuryAmt = round.totalAmount;\r\n        }\r\n        round.rewardBaseCalAmount = rewardBaseCalAmount;\r\n        round.rewardAmount = rewardAmount;\r\n\r\n        // Add to treasury\r\n        treasuryAmount += treasuryAmt;\r\n\r\n        emit RewardsCalculated(epoch, rewardBaseCalAmount, rewardAmount, treasuryAmt);\r\n    }\r\n\r\n    /**\r\n     * @notice End round\r\n     * @param epoch: epoch\r\n     * @param roundId: roundId\r\n     * @param price: price of the round\r\n     */\r\n    function _safeEndRound(\r\n        uint256 epoch,\r\n        uint256 roundId,\r\n        int256 price\r\n    ) internal {\r\n        require(rounds[epoch].lockTimestamp != 0, \"Can only end round after round has locked\");\r\n        require(block.timestamp >= rounds[epoch].closeTimestamp, \"Can only end round after closeTimestamp\");\r\n        require(\r\n            block.timestamp <= rounds[epoch].closeTimestamp + bufferSeconds,\r\n            \"Can only end round within bufferSeconds\"\r\n        );\r\n        Round storage round = rounds[epoch];\r\n        round.closePrice = price;\r\n        round.closeOracleId = roundId;\r\n        round.oracleCalled = true;\r\n\r\n        emit EndRound(epoch, roundId, round.closePrice);\r\n    }\r\n\r\n    /**\r\n     * @notice Lock round\r\n     * @param epoch: epoch\r\n     * @param roundId: roundId\r\n     * @param price: price of the round\r\n     */\r\n    function _safeLockRound(\r\n        uint256 epoch,\r\n        uint256 roundId,\r\n        int256 price\r\n    ) internal {\r\n        require(rounds[epoch].startTimestamp != 0, \"Can only lock round after round has started\");\r\n        require(block.timestamp >= rounds[epoch].lockTimestamp, \"Can only lock round after lockTimestamp\");\r\n        require(\r\n            block.timestamp <= rounds[epoch].lockTimestamp + bufferSeconds,\r\n            \"Can only lock round within bufferSeconds\"\r\n        );\r\n        Round storage round = rounds[epoch];\r\n        round.closeTimestamp = block.timestamp + intervalSeconds;\r\n        round.lockPrice = price;\r\n        round.lockOracleId = roundId;\r\n\r\n        emit LockRound(epoch, roundId, round.lockPrice);\r\n    }\r\n\r\n    /**\r\n     * @notice Start round\r\n     * Previous round n-2 must end\r\n     * @param epoch: epoch\r\n     */\r\n    function _safeStartRound(uint256 epoch) internal {\r\n        require(genesisStartOnce, \"Can only run after genesisStartRound is triggered\");\r\n        require(rounds[epoch - 2].closeTimestamp != 0, \"Can only start round after round n-2 has ended\");\r\n        require(\r\n            block.timestamp >= rounds[epoch - 2].closeTimestamp,\r\n            \"Can only start new round after round n-2 closeTimestamp\"\r\n        );\r\n        _startRound(epoch);\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer BNB in a safe way\r\n     * @param to: address to transfer BNB to\r\n     * @param value: BNB amount to transfer (in wei)\r\n     */\r\n    function _safeTransferBNB(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(\"\");\r\n        require(success, \"TransferHelper: BNB_TRANSFER_FAILED\");\r\n    }\r\n\r\n    /**\r\n     * @notice Start round\r\n     * Previous round n-2 must end\r\n     * @param epoch: epoch\r\n     */\r\n    function _startRound(uint256 epoch) internal {\r\n        Round storage round = rounds[epoch];\r\n        round.startTimestamp = block.timestamp;\r\n        round.lockTimestamp = block.timestamp + intervalSeconds;\r\n        round.closeTimestamp = block.timestamp + (2 * intervalSeconds);\r\n        round.epoch = epoch;\r\n        round.totalAmount = 0;\r\n\r\n        emit StartRound(epoch);\r\n    }\r\n\r\n    /**\r\n     * @notice Determine if a round is valid for receiving bets\r\n     * Round must have started and locked\r\n     * Current timestamp must be within startTimestamp and closeTimestamp\r\n     */\r\n    function _bettable(uint256 epoch) internal view returns (bool) {\r\n        return\r\n            rounds[epoch].startTimestamp != 0 &&\r\n            rounds[epoch].lockTimestamp != 0 &&\r\n            block.timestamp > rounds[epoch].startTimestamp &&\r\n            block.timestamp < rounds[epoch].lockTimestamp;\r\n    }\r\n\r\n    /**\r\n     * @notice Get latest recorded price from oracle\r\n     * If it falls below allowed buffer or has not updated, it would be invalid.\r\n     */\r\n    function _getPriceFromOracle() internal view returns (uint80, int256) {\r\n        uint256 leastAllowedTimestamp = block.timestamp + oracleUpdateAllowance;\r\n        (uint80 roundId, int256 price, , uint256 timestamp, ) = oracle.latestRoundData();\r\n        require(timestamp <= leastAllowedTimestamp, \"Oracle update exceeded max timestamp allowance\");\r\n        require(\r\n            uint256(roundId) > oracleLatestRoundId,\r\n            \"Oracle update roundId must be larger than oracleLatestRoundId\"\r\n        );\r\n        return (roundId, price);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns true if `account` is a contract.\r\n     * @param account: account address\r\n     */\r\n    function _isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_adminAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operatorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_intervalSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bufferSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minBetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_oracleUpdateAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_treasuryFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BetBear\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BetBull\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"}],\"name\":\"EndRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"}],\"name\":\"LockRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"NewAdminAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bufferSeconds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"intervalSeconds\",\"type\":\"uint256\"}],\"name\":\"NewBufferAndIntervalSeconds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minBetAmount\",\"type\":\"uint256\"}],\"name\":\"NewMinBetAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"NewOperatorAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"NewOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oracleUpdateAllowance\",\"type\":\"uint256\"}],\"name\":\"NewOracleUpdateAllowance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"treasuryFee\",\"type\":\"uint256\"}],\"name\":\"NewTreasuryFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardBaseCalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"treasuryAmount\",\"type\":\"uint256\"}],\"name\":\"RewardsCalculated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"StartRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenRecovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TreasuryClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_TREASURY_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"betBear\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"betBull\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bufferSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"epochs\",\"type\":\"uint256[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisLockOnce\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisLockRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisStartOnce\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisStartRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cursor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"getUserRounds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"enum PancakePredictionV2.Position\",\"name\":\"position\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"internalType\":\"struct PancakePredictionV2.BetInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserRoundsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"intervalSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ledger\",\"outputs\":[{\"internalType\":\"enum PancakePredictionV2.Position\",\"name\":\"position\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleLatestRoundId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleUpdateAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"refundable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closeTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"lockPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"closePrice\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"lockOracleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closeOracleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bullAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bearAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardBaseCalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"oracleCalled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adminAddress\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bufferSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_intervalSeconds\",\"type\":\"uint256\"}],\"name\":\"setBufferAndIntervalSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBetAmount\",\"type\":\"uint256\"}],\"name\":\"setMinBetAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operatorAddress\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_oracleUpdateAllowance\",\"type\":\"uint256\"}],\"name\":\"setOracleUpdateAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_treasuryFee\",\"type\":\"uint256\"}],\"name\":\"setTreasuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userRounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PancakePredictionV2", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "99999", "ConstructorArguments": "000000000000000000000000d276fcf34d54a926773c399ebaa772c12ec394ac0000000000000000000000003e87fede12d340820037b62b6c23f366294c44350000000000000000000000003e87fede12d340820037b62b6c23f366294c4435000000000000000000000000000000000000000000000000000000000000012c000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000009184e72a000000000000000000000000000000000000000000000000000000000000000012c00000000000000000000000000000000000000000000000000000000000001f4", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://dd1626b1d44955d097a7d94a773f25f0f2965373fe9ea617d55cd73fb5e5f6f8"}