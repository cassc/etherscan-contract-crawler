{"SourceCode": "/**\r\n* \r\n*.     $$$.$$$$$$                                   $$$\r\n*.     $$$      $$                                  $$$\r\n*      $$$      $$ .$$$$$$.$$$  $$$.$$$$$$*  .$$$$$.$$$  .$$$$$$.$$$\r\n*.     $$$.$$$$$$  $$$     $$   $$$$   $$$$  $$$    $$$  $$$     $$\r\n*.     $$$         $$$     $$   $$$     $$$  $$$    $$$  $$$     $$\r\n*.     $$$         $$$     $$   $$$     $$$  $$$    $$$  $$$     $$\r\n*.     $$$         .$$$$$**$$$  $$$     $$$  *$$$$$*$$$  .$$$$$**$$$\r\n*.    \r\n*.                                                           \r\n*.                                                                        \r\n*/                                                                         \r\n\r\n\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n\r\n\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\ninterface ILotteryTracker {\r\n    function updateAccount(address account, uint256 amount) external;\r\n    function removeEntryFromWallet(address account, uint256 amount) external;\r\n    function removeAccount(address account) external;\r\n    function isActiveAccount(address account) external view returns(bool);\r\n}\r\n\r\n\r\ninterface IPinkAntiBot {\r\n  function setTokenOwner(address owner) external;\r\n\r\n  function onPreTransferCheck(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) external;\r\n}\r\n\r\n\r\ncontract PandaMint is Context, IERC20, Ownable{\r\n\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _rOwned;\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => bool) private _isExcluded;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) public _isExcludedFromAutoLiquidity;\r\n    mapping (address => bool) private _isBot;\r\n    mapping (address => bool) internal _isExcludedFromTxLimit;\r\n    mapping(address => bool) private _canAddLiquidity;\r\n    mapping (address => bool) private _loweredTaxExclusions;\r\n    address[] private _excluded;\r\n    address payable public _marketingWallet = payable(0xc2A27043469197Baa71601ff067504e1D4ED4E5a); \r\n    address payable public _buyBackWallet = payable(0xc2A27043469197Baa71601ff067504e1D4ED4E5a); \r\n    address payable public _lotteryWallet = payable(0xc2A27043469197Baa71601ff067504e1D4ED4E5a); \r\n    address payable public _ecosystemWallet = payable(0xc2A27043469197Baa71601ff067504e1D4ED4E5a); \r\n    IERC20 public rewardToken;\r\n    // set default to BUSD 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56\r\n    // busd on beta 0x8301F2213c0eeD49a7E28Ae4c3e91722919B8B47\r\n    IERC20 public busdToken = IERC20(0x55d398326f99059fF775485246999027B3197955);\r\n    ILotteryTracker public lotteryTracker;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal = 100_000_000 * 10**18;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n    bool public rewardInBNB = false;\r\n    bool public isEarlySellingEnabled = true;\r\n    bool public disableLotteryLogic = false;\r\n    mapping(address => bool) _isExcludedFromEarlySellingLimit;\r\n    mapping (address => uint256) private lastBuyTime;\r\n    uint public earlySellingHour = 24;\r\n    uint256 public earlySellingFeeCutOffPercent = 5;\r\n    uint256 public entryDivider = 25000 * 10**18;\r\n    mapping(address => bool) _isExcludedFromLottery;\r\n    mapping(address => bool) _accountInLottery;\r\n    mapping(address => bool) _isLpPair;\r\n    mapping(address => bool) _allowLotteryEntryOnTransferList;\r\n\r\n    string private constant _name     = \"PandaMint\";\r\n    string private constant _symbol   = \"PDM\";\r\n    uint8  private constant _decimals = 18;\r\n    uint256 public  _lowerTaxBy       = 1;// Enter the percentage like 1% or 2% and it will be subtracted from the total. \r\n    uint256 private  _lotteryTax       = 2;\r\n    uint256 private  _marketingTax       = 3;\r\n    uint256 private  _buyBackTax       = 2;\r\n    uint256 public  _taxFee       = 1; // holders tax\r\n    uint256 public  _ecosystemDevelopmentTax = 1; // ecosystem development tax\r\n    uint256 public  _totalTaxForDistribution  = _lotteryTax.add(_marketingTax).add(_buyBackTax); // total tax for distribution\r\n    uint256 public  _totalFees      = _taxFee.add(_ecosystemDevelopmentTax).add(_totalTaxForDistribution);\r\n    \r\n    uint256 public  _maxTxAmount     = 250000 * 10**3 * 10**18;\r\n    uint256 private _minimumTokenBalance = 500 * 10**3 * 10**18;\r\n\r\n    IPinkAntiBot public pinkAntiBot;\r\n    bool public antiBotEnabled;\r\n\r\n    \r\n    IUniswapV2Router02 public pancakeV2Router;\r\n    address            public pancakeV2Pair;\r\n    bool inSwap;\r\n    bool public swapEnabled = true;\r\n    event MinimumTokensBeforeSwapUpdated(uint256 minimumTokensBeforeSwap);\r\n    event SwapEnabledUpdated(bool enabled);\r\n    event Swap(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived\r\n    );\r\n    event UpdateLastBuyTime(address account, uint256 time);\r\n    event RemoveAccountFromLottery(address account);\r\n    event AddAccountToLottery(address account);\r\n    \r\n    modifier ltsTheSwap{\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n    \r\n    constructor (address _lotteryTracker) {\r\n        _rOwned[_msgSender()] = _rTotal;\r\n        // set default to BUSD 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56\r\n        // busd on beta 0x8301F2213c0eeD49a7E28Ae4c3e91722919B8B47\r\n        rewardToken = IERC20(0x55d398326f99059fF775485246999027B3197955);\r\n\r\n        lotteryTracker = ILotteryTracker(_lotteryTracker);\r\n        // Create an instance of the PinkAntiBot variable from the provided address\r\n        // pinkAntiBot = IPinkAntiBot(pinkAntiBot_);\r\n        // Register the deployer to be the token owner with PinkAntiBot. You can\r\n        // later change the token owner in the PinkAntiBot contract\r\n        // pinkAntiBot.setTokenOwner(msg.sender);\r\n        // pancake\r\n        //beta router 0xD99D1c33F9fC3444f8101754aBC46c52416550D1\r\n        // prod router 0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n        IUniswapV2Router02 _pancakeV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        pancakeV2Pair = IUniswapV2Factory(_pancakeV2Router.factory())\r\n            .createPair(address(this), _pancakeV2Router.WETH());\r\n        pancakeV2Router = _pancakeV2Router;\r\n        \r\n        // exclude system address\r\n        _isExcludedFromFee[_msgSender()]    = true;\r\n        _isExcludedFromFee[address(this)]   = true;\r\n        _isExcludedFromFee[_marketingWallet] = true;\r\n        _isExcludedFromFee[_buyBackWallet] = true;\r\n        _isExcludedFromFee[_lotteryWallet] = true;\r\n        _isExcludedFromFee[_ecosystemWallet] = true;\r\n        _isExcludedFromEarlySellingLimit[_msgSender()] = true;\r\n        _isExcludedFromEarlySellingLimit[address(this)] = true;\r\n        _isExcludedFromEarlySellingLimit[_marketingWallet] = true;\r\n        _isExcludedFromEarlySellingLimit[_buyBackWallet] = true;\r\n        _isExcludedFromEarlySellingLimit[_lotteryWallet] = true;\r\n        _isExcludedFromEarlySellingLimit[_ecosystemWallet] = true;\r\n        _isExcludedFromEarlySellingLimit[pancakeV2Pair] = true;\r\n        _isExcludedFromEarlySellingLimit[address(pancakeV2Router)] = true;\r\n        _isExcludedFromAutoLiquidity[pancakeV2Pair]            = true;\r\n        _isExcludedFromAutoLiquidity[address(pancakeV2Router)] = true;\r\n        _isExcludedFromLottery[address(this)] = true;\r\n        _isExcludedFromLottery[pancakeV2Pair] = true;\r\n        _isExcludedFromLottery[address(pancakeV2Router)] = true;\r\n        _isLpPair[pancakeV2Pair] = true;\r\n        _isLpPair[address(pancakeV2Router)] = true;\r\n        _isExcludedFromTxLimit[owner()] = true;\r\n        _isExcludedFromTxLimit[address(this)] = true;\r\n        _isExcludedFromTxLimit[_marketingWallet] = true;\r\n        _isExcludedFromTxLimit[_buyBackWallet] = true;\r\n        _isExcludedFromTxLimit[_lotteryWallet] = true;\r\n        _isExcludedFromTxLimit[_ecosystemWallet] = true;\r\n        _isExcludedFromLottery[_msgSender()] = true;\r\n        _isExcludedFromLottery[_marketingWallet] = true;\r\n        _isExcludedFromLottery[_lotteryWallet] = true;\r\n        _isExcludedFromLottery[_ecosystemWallet] = true;\r\n        _isExcludedFromLottery[_buyBackWallet] = true;\r\n        _canAddLiquidity[_msgSender()] = true;\r\n        _allowLotteryEntryOnTransferList[_msgSender()] = true;\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function isExcludedFromReward(address account) external view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    function totalFees() external view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n        (, uint256 tFee, uint256 tLiquidity) = _getTValues(tAmount,0);\r\n        uint256 currentRate = _getRate();\r\n\r\n        if (!deductTransferFee) {\r\n            (uint256 rAmount,,) = _getRValues(tAmount, tFee, tLiquidity, currentRate);\r\n            return rAmount;\r\n\r\n        } else {\r\n            (, uint256 rTransferAmount,) = _getRValues(tAmount, tFee, tLiquidity, currentRate);\r\n            return rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n\r\n        uint256 currentRate = _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function excludeFromReward(address account) public onlyOwner {\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n\r\n        if (_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    function includeInReward(address account) external onlyOwner {\r\n        require(_isExcluded[account], \"Account is already included\");\r\n\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function setEnableAntiBot(bool _enable) external onlyOwner {\r\n         antiBotEnabled = _enable;\r\n    }\r\n\r\n    function getLotteryEntryAmount(uint256 amount) internal view returns(uint256) {\r\n        if (amount == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 entries = amount / entryDivider;\r\n        if (amount % entryDivider > 0) {\r\n            return entries + 1;\r\n        }\r\n\r\n        return entries;\r\n    }\r\n    \r\n    function setCanAddLiquidity(address holder, bool a) external onlyOwner {\r\n        _canAddLiquidity[holder] = a;\r\n    }\r\n\r\n    function isCanAddLiquidity(address holder) external view returns(bool) {\r\n        return _canAddLiquidity[holder];\r\n    }\r\n    \r\n\r\n    function isBot(address _bot) external view returns(bool) {\r\n        return _isBot[_bot];\r\n    }\r\n\r\n    function addBot(address _bot) external onlyOwner {\r\n        require(_bot != pancakeV2Pair, \"Lp pair is blacklisted\");\r\n        require(_bot != address(pancakeV2Router), \"Router is blacklisted\");\r\n        _isBot[_bot] = true;\r\n    }\r\n\r\n    function removeBot(address _bot) external onlyOwner {\r\n        _isBot[_bot] = false;\r\n    }\r\n    \r\n    function bulkAddBots(address[] calldata _bots) external onlyOwner {\r\n        for (uint256 i = 0; i < _bots.length; i++) {\r\n            require(_bots[i] != pancakeV2Pair, \"Lp pair is blacklisted\");\r\n            require(_bots[i] != address(pancakeV2Router), \"Router is blacklisted\");\r\n            _isBot[_bots[i]]= true;\r\n        }\r\n    }\r\n\r\n    function setLotteryTracker(address _lotteryTracker) external onlyOwner {\r\n        lotteryTracker = ILotteryTracker(_lotteryTracker);\r\n        _isExcludedFromLottery[address(_lotteryTracker)] = true;\r\n    }\r\n\r\n\r\n    function setRewardInBNB(bool  a) external onlyOwner{\r\n        rewardInBNB = a;\r\n    }\r\n\r\n    function setDisableLotteryLogic(bool  a) external onlyOwner{\r\n        disableLotteryLogic = a;\r\n    }\r\n\r\n    function setEarlySellingEnabled(bool  a) external onlyOwner{\r\n        isEarlySellingEnabled = a;\r\n    }\r\n    \r\n    function setRewardToken(address token) external onlyOwner{\r\n       rewardToken = IERC20(token);\r\n    }\r\n\r\n    function setExcludedFromLottery(address holder, bool a) external onlyOwner {\r\n        _isExcludedFromLottery[holder] = a;\r\n    }\r\n\r\n    function isExcludedFromLottery(address holder) external view returns(bool) {\r\n        return _isExcludedFromLottery[holder];\r\n    }\r\n\r\n    function setExcludedFromTxLimit(address holder, bool a) external onlyOwner {\r\n        _isExcludedFromTxLimit[holder] = a;\r\n    }\r\n\r\n    function isExcludedFromTxLimit(address holder) external view returns(bool) {\r\n        return _isExcludedFromTxLimit[holder];\r\n    }\r\n\r\n    function isAccountInLottery(address account) external view returns(bool) {\r\n        if(_accountInLottery[account]){\r\n            return lotteryTracker.isActiveAccount(account);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function setMarketingWallet(address  wallet) external onlyOwner{\r\n        _marketingWallet = payable(wallet);\r\n        _isExcludedFromFee[_marketingWallet] = true;\r\n        _isExcludedFromEarlySellingLimit[_marketingWallet] = true;\r\n        _isExcludedFromTxLimit[_marketingWallet] = true;\r\n        _isExcludedFromLottery[_marketingWallet] = true;\r\n    }\r\n\r\n    function setBuyBackWallet(address  wallet) external onlyOwner{\r\n        _buyBackWallet = payable(wallet);\r\n        _isExcludedFromFee[_buyBackWallet] = true;\r\n        _isExcludedFromEarlySellingLimit[_buyBackWallet] = true;\r\n        _isExcludedFromTxLimit[_buyBackWallet] = true;\r\n        _isExcludedFromLottery[_buyBackWallet] = true;\r\n    }\r\n\r\n    function setLotteryWallet(address  wallet) external onlyOwner{\r\n        _lotteryWallet = payable(wallet);\r\n        _isExcludedFromFee[_lotteryWallet] = true;\r\n        _isExcludedFromEarlySellingLimit[_lotteryWallet] = true;\r\n        _isExcludedFromTxLimit[_lotteryWallet] = true;\r\n        _isExcludedFromLottery[_lotteryWallet] = true;\r\n    } \r\n\r\n    function setEcosystemWallet(address  wallet) external onlyOwner{\r\n        _ecosystemWallet = payable(wallet);\r\n        _isExcludedFromFee[_ecosystemWallet] = true;\r\n        _isExcludedFromEarlySellingLimit[_ecosystemWallet] = true;\r\n        _isExcludedFromTxLimit[_ecosystemWallet] = true;\r\n        _isExcludedFromLottery[_ecosystemWallet] = true;\r\n    } \r\n    function setExcludedFromFee(address account, bool e) external onlyOwner {\r\n        _isExcludedFromFee[account] = e;\r\n    }\r\n    function isExcludedFromFee(address account) public view returns(bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n    // Quantity required for Loto entry\r\n    function setEntryDivider(uint256 entryDividerAmount) external onlyOwner {\r\n        require(entryDividerAmount>1000000000, \"EntryDividerAmount  is less than 1\");\r\n        entryDivider = entryDividerAmount;\r\n    }\r\n\r\n    function setEarlySellingCutOffTax(uint256 hoursToSet, uint256 taxFee) external onlyOwner {\r\n        require(taxFee>0, \"EarlySellingFeeCutOffPercent tax is less than 0\");\r\n        require(hoursToSet>0, \"Hours can not be 0\");\r\n        earlySellingHour = hoursToSet;\r\n        earlySellingFeeCutOffPercent = taxFee;\r\n    }\r\n\r\n\r\n    function setHoldersFeePercent(uint256 taxFee) external onlyOwner {\r\n        require(taxFee>0, \"Holder tax is less than 0\");\r\n        _taxFee = taxFee;\r\n        _totalFees      = _taxFee.add(_ecosystemDevelopmentTax).add(_totalTaxForDistribution);\r\n        require(_totalFees<30, \"Total tax is more than 30\");\r\n    }\r\n    \r\n    function setEcosystemDevelopmentFeePercent(uint256 ecosystemDevelopmentTax) external onlyOwner {\r\n        require(ecosystemDevelopmentTax>0, \"EcosystemDevelopmentTax tax is less than 0\");\r\n        _ecosystemDevelopmentTax = ecosystemDevelopmentTax;\r\n        _totalFees      = _taxFee.add(_ecosystemDevelopmentTax).add(_totalTaxForDistribution);\r\n        require(_totalFees<30, \"Total tax is more than 30\");\r\n    }\r\n\r\n    function setLowerTaxFeePercent(uint256 lowerTaxBy) external onlyOwner {\r\n        _lowerTaxBy = lowerTaxBy;\r\n    }\r\n\r\n    function setTotalTaxForDistribution(uint256 lotteryTax,uint256 marketingTax,uint256 buyBackTax) external onlyOwner {\r\n        require(lotteryTax>0, \"Lottery tax is less than 0\");\r\n        require(marketingTax>0, \"Marketing tax is less than 0\");\r\n        require(buyBackTax>0, \"BuyBack tax is less than 0\");\r\n        _totalTaxForDistribution = lotteryTax.add(marketingTax).add(buyBackTax);\r\n        _lotteryTax = lotteryTax;\r\n        _marketingTax = marketingTax;\r\n        _buyBackTax = buyBackTax;\r\n        _totalFees      = _taxFee.add(_ecosystemDevelopmentTax).add(_totalTaxForDistribution);\r\n        require(_totalFees<30, \"Total tax is more than 30\");\r\n    }\r\n    \r\n    function setMaxTx(uint256 maxTx) external onlyOwner {\r\n        require(maxTx >100000000000000, \"Max transaction is less than 100000\");\r\n        _maxTxAmount = maxTx;\r\n    }\r\n\r\n    function setContractSellThreshold(uint256 minimumTokenBalance) external onlyOwner {\r\n        require(minimumTokenBalance > 10000000000000, \"Max transaction is less than 10000\");\r\n        _minimumTokenBalance = minimumTokenBalance;\r\n    }\r\n\r\n    function setSwapEnabled(bool _enabled) external onlyOwner {\r\n        swapEnabled = _enabled;\r\n        emit SwapEnabledUpdated(_enabled);\r\n    }\r\n    \r\n    receive() external payable {}\r\n\r\n    \r\n    function updateNewRouter(address _router) external onlyOwner returns(address _pair) {\r\n       \r\n        IUniswapV2Router02 _pancakeV2Router = IUniswapV2Router02(_router);\r\n        _pair = IUniswapV2Factory(_pancakeV2Router.factory()).getPair(address(this), _pancakeV2Router.WETH());\r\n        if(_pair == address(0)){\r\n            // Pair doesn't exist, create a new one\r\n            _pair = IUniswapV2Factory(_pancakeV2Router.factory())\r\n            .createPair(address(this), _pancakeV2Router.WETH());\r\n        }\r\n        pancakeV2Pair = _pair;\r\n        // Update the router of the contract variables\r\n        pancakeV2Router = _pancakeV2Router;\r\n        _isExcludedFromAutoLiquidity[pancakeV2Pair]            = true;\r\n        _isExcludedFromAutoLiquidity[address(pancakeV2Router)] = true;\r\n        _isExcludedFromEarlySellingLimit[pancakeV2Pair] = true;\r\n        _isExcludedFromEarlySellingLimit[address(pancakeV2Router)] = true;\r\n        _isLpPair[pancakeV2Pair] = true;\r\n        _isLpPair[address(pancakeV2Router)] = true;\r\n        \r\n    }\r\n    \r\n\r\n    function setIsLpPair(address a, bool b) external onlyOwner {\r\n        _isLpPair[a] = b;\r\n    }\r\n\r\n     function isAddressLpPair(address a) external view returns(bool) {\r\n        return _isLpPair[a];\r\n    }\r\n\r\n    function setAllowLotteryEntryOnTransfer(address a, bool b) external onlyOwner {\r\n        _allowLotteryEntryOnTransferList[a] = b;\r\n    }\r\n\r\n     function isAllowLotteryEntryOnTransfer(address a) external view returns(bool) {\r\n        return _allowLotteryEntryOnTransferList[a];\r\n    }\r\n\r\n    function setExcludedFromAutoLiquidity(address a, bool b) external onlyOwner {\r\n        _isExcludedFromAutoLiquidity[a] = b;\r\n    }\r\n\r\n    function setLoweredTaxExclusions(address _address, bool setTo) external onlyOwner {\r\n        _loweredTaxExclusions[_address] = setTo;\r\n    }\r\n\r\n    function getLoweredTaxExclusions(address account) external view returns (bool) {\r\n        return _loweredTaxExclusions[account];\r\n    }\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal    = _rTotal.sub(rFee);\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount, uint256 earlySellingTaxAmount) private view returns (uint256, uint256, uint256) {\r\n        //Total fee for distribution and autolp\r\n        uint256 _totalFeesForBNB = _ecosystemDevelopmentTax.add(_totalTaxForDistribution);\r\n        uint256 tFee       = tAmount.mul(_taxFee).div(100);\r\n        uint256 tLiquidity = tAmount.mul(_totalFeesForBNB).div(100);\r\n        uint256 tTransferAmount = tAmount.sub(tFee);\r\n        if(earlySellingTaxAmount>0){\r\n            tLiquidity = tLiquidity.add(earlySellingTaxAmount);\r\n        }\r\n        tTransferAmount = tTransferAmount.sub(tLiquidity);\r\n        return (tTransferAmount, tFee, tLiquidity);\r\n    }\r\n\r\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\n        uint256 rAmount    = tAmount.mul(currentRate);\r\n        uint256 rFee       = tFee.mul(currentRate);\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rFee);\r\n        rTransferAmount = rTransferAmount.sub(rLiquidity);\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n    function _getRate() private view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;      \r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\r\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\r\n        }\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n    \r\n    function takeTransactionFee(address to, uint256 tAmount, uint256 currentRate) private {\r\n        if (tAmount <= 0) { return; }\r\n\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        _rOwned[to] = _rOwned[to].add(rAmount);\r\n        if (_isExcluded[to]) {\r\n            _tOwned[to] = _tOwned[to].add(tAmount);\r\n        }\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    \r\n\r\n    function checkTxLimit(address sender,address receiver, uint256 amount) internal view {\r\n        if (_isExcludedFromTxLimit[sender] || _isExcludedFromTxLimit[receiver]) {\r\n            return;\r\n        }\r\n        // allow the LP pair, as they are buy\r\n        if(_isLpPair[sender]){\r\n            return;\r\n        }\r\n        require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\r\n        require (!_isBot[sender],'Robot detected');\r\n        \r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        if (antiBotEnabled) {\r\n          pinkAntiBot.onPreTransferCheck(from, to, amount);\r\n        }\r\n        checkTxLimit(from,to,amount);\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        \r\n        if (contractTokenBalance >= _maxTxAmount) {\r\n            contractTokenBalance = _maxTxAmount;\r\n        }\r\n        \r\n        bool isOverMinimumTokenBalance = contractTokenBalance >= _minimumTokenBalance;\r\n        if (\r\n            isOverMinimumTokenBalance &&\r\n            !inSwap &&\r\n            !_isExcludedFromAutoLiquidity[from] &&\r\n            swapEnabled\r\n        ) {\r\n            contractTokenBalance = _minimumTokenBalance;\r\n            swapAndTakeFees(contractTokenBalance);\r\n        }\r\n        // When from is LP pair then its a buy\r\n        if(!inSwap && _isLpPair[from]){\r\n            recordLastBuy(to);\r\n        }\r\n        \r\n        bool takeFee = false;\r\n        if (_isLpPair[from] || _isLpPair[to]) {\r\n            takeFee = true;\r\n        }\r\n\r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\r\n            takeFee = false;\r\n        }\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n    }\r\n\r\n    function swapAndTakeFees(uint256 contractTokenBalance) private ltsTheSwap {\r\n        \r\n        \r\n        uint256 distributionPart = contractTokenBalance;\r\n        // swap and take distribution part\r\n        uint256 initialBalance = address(this).balance;\r\n        swapTokensForBnb(distributionPart);\r\n        uint256 newBalance = address(this).balance.sub(initialBalance);\r\n        emit Swap(distributionPart, newBalance);\r\n        uint256 ecosystemPart = newBalance.mul(_ecosystemDevelopmentTax).div(_totalTaxForDistribution + _ecosystemDevelopmentTax );\r\n        uint256 lotteryPart = newBalance.mul(_lotteryTax).div(_totalTaxForDistribution + _ecosystemDevelopmentTax );\r\n        uint256 marketingPart = newBalance.mul(_marketingTax).div(_totalTaxForDistribution + _ecosystemDevelopmentTax );\r\n        uint256 buyBackPart = newBalance.mul(_buyBackTax).div(_totalTaxForDistribution + _ecosystemDevelopmentTax);\r\n        transferToAddressBNB(_marketingWallet,marketingPart);\r\n        transferToAddressBNB(_buyBackWallet,buyBackPart);\r\n        if(rewardInBNB){\r\n            transferToAddressBNB(_lotteryWallet,lotteryPart);\r\n        }else{\r\n            swapAndSendToken(lotteryPart);\r\n        }\r\n        // ecosystem development part\r\n        swapBusdAndSendToken(ecosystemPart);\r\n    }\r\n\r\n   \r\n    function swapAndSendToken(uint256 bnbBalance) private ltsTheSwap {\r\n        uint256 initialBalance = rewardToken.balanceOf(address(this));\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = pancakeV2Router.WETH();\r\n        path[1] = address(rewardToken);\r\n\r\n        pancakeV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: bnbBalance}(\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 tokenReceived = rewardToken.balanceOf(address(this)).sub(initialBalance);\r\n        rewardToken.transfer(_lotteryWallet, tokenReceived);\r\n    }\r\n\r\n    function swapBusdAndSendToken(uint256 bnbBalance) private ltsTheSwap {\r\n        uint256 initialBalance = busdToken.balanceOf(address(this));\r\n        address[] memory path = new address[](2);\r\n        path[0] = pancakeV2Router.WETH();\r\n        path[1] = address(busdToken);\r\n\r\n        pancakeV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: bnbBalance}(\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 tokenReceived = busdToken.balanceOf(address(this)).sub(initialBalance);\r\n        busdToken.transfer(_ecosystemWallet, tokenReceived);\r\n    }\r\n\r\n    function swapTokensForBnb(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = pancakeV2Router.WETH();\r\n\r\n        _approve(address(this), address(pancakeV2Router), tokenAmount);\r\n        pancakeV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of BNB\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function setExcludedFromEarlySellingLimit(address holder, bool status) external onlyOwner {\r\n        _isExcludedFromEarlySellingLimit[holder] = status;\r\n    }\r\n\r\n    function getExcludedFromEarlySellingLimit(address holder) external view returns (bool) {\r\n        return  _isExcludedFromEarlySellingLimit[holder];\r\n    }\r\n\r\n    function recordLastBuy(address buyer) internal {\r\n       lastBuyTime[buyer] = block.timestamp;\r\n       emit UpdateLastBuyTime(buyer, block.timestamp);\r\n    }\r\n\r\n    function getLastBuy(address buyer) external view returns(uint256) {\r\n        return lastBuyTime[buyer];\r\n    }\r\n\r\n    function calculateEarlySellingFee(address from, uint256 amount) internal view returns(uint256) {\r\n        if (_isExcludedFromEarlySellingLimit[from]) {\r\n            return 0;\r\n        }\r\n        if (block.timestamp.sub(lastBuyTime[from]) < earlySellingHour * 1 hours) {\r\n            return amount.mul(earlySellingFeeCutOffPercent).div(100);\r\n        }\r\n        return 0;\r\n    }\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {\r\n        uint256 previousTaxFee       = _taxFee;\r\n        uint256 previousEcosystemDevelopmentFee = _ecosystemDevelopmentTax;\r\n        uint256 previousTaxForDistributionFee  = _totalTaxForDistribution;\r\n        uint256 earlySellingTaxAmount = 0;\r\n        if(isEarlySellingEnabled && takeFee){\r\n            earlySellingTaxAmount = calculateEarlySellingFee(sender, amount);\r\n        }\r\n\r\n        if (!takeFee) {\r\n            _taxFee       = 0;\r\n            _ecosystemDevelopmentTax = 0;\r\n            _totalTaxForDistribution  = 0;\r\n        }\r\n        if(_loweredTaxExclusions[sender] && takeFee){\r\n            if(_lowerTaxBy > _totalTaxForDistribution){\r\n                _totalTaxForDistribution = 0;\r\n            }else{\r\n                _totalTaxForDistribution = _totalTaxForDistribution - _lowerTaxBy;\r\n            }\r\n            \r\n        } \r\n        \r\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferFromExcluded(sender, recipient, amount,earlySellingTaxAmount);\r\n\r\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferToExcluded(sender, recipient, amount,earlySellingTaxAmount);\r\n\r\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferBothExcluded(sender, recipient, amount,earlySellingTaxAmount);\r\n\r\n        } else {\r\n            _transferStandard(sender, recipient, amount,earlySellingTaxAmount);\r\n        }\r\n        \r\n        if (!takeFee) {\r\n            _taxFee       = previousTaxFee;\r\n            _ecosystemDevelopmentTax = previousEcosystemDevelopmentFee;\r\n            _totalTaxForDistribution  = previousTaxForDistributionFee;\r\n        }\r\n\r\n        if(_loweredTaxExclusions[sender] && takeFee){\r\n            _totalTaxForDistribution  = previousTaxForDistributionFee;\r\n        }\r\n    }\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount,uint256 earlySellingTaxAmount) private {\r\n        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTValues(tAmount,earlySellingTaxAmount);\r\n        uint256 currentRate = _getRate();\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, currentRate);\r\n        _rOwned[sender]    = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        takeTransactionFee(address(this), tLiquidity, currentRate);\r\n        _reflectFee(rFee, tFee);\r\n        updateAccountLottery(sender,recipient,tTransferAmount);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount,uint256 earlySellingTaxAmount) private {\r\n        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTValues(tAmount,earlySellingTaxAmount);\r\n        uint256 currentRate = _getRate();\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, currentRate);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        takeTransactionFee(address(this), tLiquidity, currentRate);\r\n        _reflectFee(rFee, tFee);\r\n        updateAccountLottery(sender,recipient,tTransferAmount);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount,uint256 earlySellingTaxAmount) private {\r\n        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTValues(tAmount,earlySellingTaxAmount);\r\n        uint256 currentRate = _getRate();\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, currentRate);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        takeTransactionFee(address(this), tLiquidity, currentRate);\r\n        _reflectFee(rFee, tFee);\r\n        updateAccountLottery(sender,recipient,tTransferAmount);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount,uint256 earlySellingTaxAmount) private {\r\n        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTValues(tAmount,earlySellingTaxAmount);\r\n        uint256 currentRate = _getRate();\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, currentRate);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        takeTransactionFee(address(this), tLiquidity, currentRate);\r\n        _reflectFee(rFee, tFee);\r\n        updateAccountLottery(sender,recipient,tTransferAmount);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function updateAccountLottery(address removeAccount, address addAccount, uint256 amount) internal {\r\n        if(disableLotteryLogic){ \r\n            return;\r\n        }\r\n        // add a new rule so that if a user transfers tokens it does NOT remove their entries \r\n        //it only removes the amount of entries based on number of tokens transfered out, do this as long as its not a sell.\r\n        // On claim and on presale lotter entry needs to be allowed.\r\n        if(!_isLpPair[addAccount] && !_isLpPair[removeAccount] && !_allowLotteryEntryOnTransferList[removeAccount]){   \r\n            uint256 entries = getLotteryEntryAmount(amount);\r\n            lotteryTracker.removeEntryFromWallet(removeAccount, entries);\r\n            return;\r\n        }\r\n        // removeaccount is sender and he is a normal user, this is a sell as addaccount user  is a lp pair, remove all sender's entry\r\n        if (_accountInLottery[removeAccount]) {\r\n            _accountInLottery[removeAccount] = false;\r\n            if(lotteryTracker.isActiveAccount(removeAccount)){\r\n                lotteryTracker.removeAccount(removeAccount);\r\n            }\r\n            emit RemoveAccountFromLottery(removeAccount);\r\n        }\r\n        //this is buy case\r\n        if (!_isExcludedFromLottery[addAccount] ) {\r\n            uint256 entries = getLotteryEntryAmount(amount);\r\n            lotteryTracker.updateAccount(addAccount, entries);\r\n            if (!_accountInLottery[addAccount]) {\r\n                _accountInLottery[addAccount] = true;\r\n                emit AddAccountToLottery(addAccount);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function transferToAddressBNB(address payable recipient, uint256 amount) private {\r\n        recipient.transfer(amount);\r\n    }\r\n    \r\n    // This is recommended by Certik, if this is not used many BNB will be lost forever.\r\n    function sweep(address to) external onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        payable(to).transfer(balance);\r\n    }\r\n\r\n\r\n   function prepareForPresale() external onlyOwner {\r\n        _taxFee       = 0; // holders tax\r\n        _ecosystemDevelopmentTax = 0; // auto lp tax\r\n        _lotteryTax       = 0;\r\n        _marketingTax       = 0;\r\n        _buyBackTax       = 0;\r\n        _totalTaxForDistribution  = 0;\r\n        _totalFees      = _taxFee.add(_ecosystemDevelopmentTax).add(_totalTaxForDistribution);\r\n        _maxTxAmount = _tTotal;\r\n        swapEnabled = false; \r\n    }\r\n    \r\n    function activateContractAfterPresale() external onlyOwner {\r\n        _maxTxAmount     = 250000 * 10**3 * 10**18;\r\n        swapEnabled = true;\r\n        _taxFee       = 1; // holders tax\r\n        _ecosystemDevelopmentTax = 1; // auto lp tax\r\n        _lotteryTax       = 2;\r\n        _marketingTax       = 3;\r\n        _buyBackTax       = 2;\r\n        _totalTaxForDistribution  = 8;\r\n        _totalFees      = _taxFee.add(_ecosystemDevelopmentTax).add(_totalTaxForDistribution);\r\n    }\r\n        \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lotteryTracker\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddAccountToLottery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinimumTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveAccountFromLottery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"UpdateLastBuyTime\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_buyBackWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ecosystemDevelopmentTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ecosystemWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromAutoLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lotteryWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lowerTaxBy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalTaxForDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activateContractAfterPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bot\",\"type\":\"address\"}],\"name\":\"addBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiBotEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_bots\",\"type\":\"address[]\"}],\"name\":\"bulkAddBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busdToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableLotteryLogic\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlySellingFeeCutOffPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlySellingHour\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entryDivider\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getExcludedFromEarlySellingLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"getLastBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLoweredTaxExclusions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAccountInLottery\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"isAddressLpPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"isAllowLotteryEntryOnTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bot\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"isCanAddLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isEarlySellingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"isExcludedFromLottery\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"isExcludedFromTxLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryTracker\",\"outputs\":[{\"internalType\":\"contract ILotteryTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pinkAntiBot\",\"outputs\":[{\"internalType\":\"contract IPinkAntiBot\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prepareForPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bot\",\"type\":\"address\"}],\"name\":\"removeBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardInBNB\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"setAllowLotteryEntryOnTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setBuyBackWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"a\",\"type\":\"bool\"}],\"name\":\"setCanAddLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumTokenBalance\",\"type\":\"uint256\"}],\"name\":\"setContractSellThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"a\",\"type\":\"bool\"}],\"name\":\"setDisableLotteryLogic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"hoursToSet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"}],\"name\":\"setEarlySellingCutOffTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"a\",\"type\":\"bool\"}],\"name\":\"setEarlySellingEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ecosystemDevelopmentTax\",\"type\":\"uint256\"}],\"name\":\"setEcosystemDevelopmentFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setEcosystemWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"setEnableAntiBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entryDividerAmount\",\"type\":\"uint256\"}],\"name\":\"setEntryDivider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"setExcludedFromAutoLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setExcludedFromEarlySellingLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"e\",\"type\":\"bool\"}],\"name\":\"setExcludedFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"a\",\"type\":\"bool\"}],\"name\":\"setExcludedFromLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"a\",\"type\":\"bool\"}],\"name\":\"setExcludedFromTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"}],\"name\":\"setHoldersFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"setIsLpPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lotteryTracker\",\"type\":\"address\"}],\"name\":\"setLotteryTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setLotteryWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lowerTaxBy\",\"type\":\"uint256\"}],\"name\":\"setLowerTaxFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"setTo\",\"type\":\"bool\"}],\"name\":\"setLoweredTaxExclusions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTx\",\"type\":\"uint256\"}],\"name\":\"setMaxTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"a\",\"type\":\"bool\"}],\"name\":\"setRewardInBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lotteryTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyBackTax\",\"type\":\"uint256\"}],\"name\":\"setTotalTaxForDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"updateNewRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PandaMint", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000988802f431a33504236925f0c4a9f99411c1749", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://36557a3ad5cf35c773cd5450bb823b5412ea8dcb00e661fa5ea98c52706d3361"}