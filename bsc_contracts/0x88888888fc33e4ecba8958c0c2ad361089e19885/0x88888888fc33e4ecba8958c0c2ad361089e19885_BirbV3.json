{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n//                .  .......\r\n//             .DDDDNIIIINDDDN .\r\n//           DDNIIII$$$$$Z$IIINDN.\r\n//         ?D?II$$$$$$$$$$$$$$ZIDD\r\n//        NDIIZ$$$$$$$$$,,,,,,?$$ID.\r\n//        D7IZ$N$$DDDN,,,,,,,,,,,,$D.\r\n//       NII$$$$$D.DDDD,,,,,,DDDN,,D+\r\n//      .DII$$$$$DDDDDD,,,,D=:,::=DDD.\r\n//      DDI$$$$$$,NDOD:,,,DI======:ND.\r\n//      D8I$$$$$$,,,,,,,,D+========:DO\r\n//     .DII$$$$$~,,,,,,,,DD??????I+=DD\r\n//     .DII$$$$$,,,,,,,,,D=D88OOD,,DDD\r\n//     NNI$$$$$$,,,,,,,,,N??=DDDDDD,D.\r\n//    NDII$$$$$Z,,,,,,,,,,D???????D,D.\r\n//   NIIZ$O$$$$,,,,,,,,,,,+N????ID,,D.\r\n// .DII$$$$ONZ$,,,,,,,,,,,,,,DD$,,,DD.\r\n//  II$$$$$$OD,,,,,,,,,,,,,,,,,,,,,DN\r\n//   Z$$$$$$OOD,,,,,,,,,,,,,,,,,,,,D.\r\n//    $$$$$$OOD,,,,,,,,,,,,,,,,,,,,D.\r\n//     ,$$$$OOZD,,,,,,,,,,,,,,,,,,DD\r\n//      .$$ZOOZD~,,,,,,,,,,,,,,,,,D.\r\n//        .ZOOD=~~~,,,,,,,,,,,,,~DD\r\n//          ..D~~~~~~~~=,,,~~~~~..\r\n//                 .:~~~~~~~~~ .\r\n//\r\n//                     BIRB\r\n\r\nabstract contract Auth {\r\n    address internal owner;\r\n    mapping (address => bool) internal authorizations;\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n        authorizations[_owner] = true;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"!OWNER\"); _;\r\n    }\r\n\r\n    modifier authorized() {\r\n        require(isAuthorized(msg.sender), \"!AUTHORIZED\"); _;\r\n    }\r\n\r\n    function authorize(address adr) public onlyOwner {\r\n        authorizations[adr] = true;\r\n    }\r\n\r\n    function unauthorize(address adr) public onlyOwner {\r\n        authorizations[adr] = false;\r\n    }\r\n\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    function isAuthorized(address adr) public view returns (bool) {\r\n        return authorizations[adr];\r\n    }\r\n\r\n    function transferOwnership(address payable adr) public onlyOwner {\r\n        owner = adr;\r\n        authorizations[adr] = true;\r\n        emit OwnershipTransferred(adr);\r\n    }\r\n\r\n    event OwnershipTransferred(address owner);\r\n}\r\n\r\ninterface IBEP20 {\r\n\r\n  function totalSupply() external view returns (uint256);\r\n  function decimals() external view returns (uint8);\r\n  function symbol() external view returns (string memory);\r\n  function name() external view returns (string memory);\r\n  function getOwner() external view returns (address);\r\n  function balanceOf(address account) external view returns (uint256);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IDexRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n \r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n \r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n \r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n \r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n \r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IDexFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ncontract BirbV3 is IBEP20, Auth {\r\n\r\n\taddress constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address constant ZERO = 0x0000000000000000000000000000000000000000;\r\n\r\n\tstring constant _name = \"Birb\";\r\n    string constant _symbol = \"BIRB\";\r\n    uint8 constant _decimals = 18;\r\n\r\n    uint256 _totalSupply = 100_000_000 ether;\r\n    uint256 public _maxTxAmount = _totalSupply / 100;\r\n\tuint256 public _maxWalletAmount = _totalSupply / 100;\r\n\r\n\tmapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n    mapping (address => bool) isFeeExempt;\r\n    mapping (address => bool) isTxLimitExempt;\r\n    mapping (address => uint256) lastTx;\r\n\r\n\t// Fees. Some may be completely inactive at all times.\r\n\tuint256 liquidityFee = 0;\r\n\tuint256 ecosystemFee = 0;\r\n\tuint256 developerFee = 0;\r\n    uint256 feeDenominator = 1000;\r\n\tuint256 liquidityFeeSell = 20;\r\n\tuint256 ecosystemFeeSell = 0;\r\n\tuint256 developerFeeSell = 30;\r\n    uint256 feeDenominatorSell = 1000;\r\n\tbool public feeOnNonTrade = false;\r\n    uint256 private launchBlock;\r\n\r\n\taddress public autoLiquidityReceiver;\r\n\taddress public ecosystemFeeReceiver;\r\n\taddress public devFeeReceiver;\r\n    address public V2 = 0x3CF33Ff134c0e00A2664f148A4232adeA1515C6f;\r\n\r\n\tIDexRouter public router;\r\n    address public dexPair;\r\n\tmapping(address => bool) public pairs;\r\n\r\n\tbool public swapEnabled = true;\r\n    uint256 public swapThreshold = _totalSupply / 20000;\r\n    bool inSwap;\r\n    modifier swapping() {\r\n\t\tinSwap = true;\r\n\t\t_;\r\n\t\tinSwap = false;\r\n\t}\r\n\r\n\tevent AutoLiquifyEnabled(bool enabledOrNot);\r\n\tevent AutoLiquify(uint256 amountBNB, uint256 amountToken);\r\n\r\n\tconstructor(address r) Auth(msg.sender) {\r\n\t\trouter = IDexRouter(r);\r\n        dexPair = IDexFactory(router.factory()).createPair(router.WETH(), address(this));\r\n        _allowances[address(this)][address(router)] = type(uint256).max;\r\n\r\n\t\tisFeeExempt[msg.sender] = true;\r\n        isFeeExempt[address(this)] = true;\r\n\t\tisTxLimitExempt[msg.sender] = true;\r\n\t\tisTxLimitExempt[address(this)] = true;\r\n        isTxLimitExempt[DEAD] = true;\r\n        isTxLimitExempt[ZERO] = true;\r\n\r\n\t\tautoLiquidityReceiver = msg.sender;\r\n\t\tpairs[dexPair] = true;\r\n\t\t_balances[msg.sender] = _totalSupply;\r\n\r\n\t\temit Transfer(address(0), msg.sender, _totalSupply);\r\n\t}\r\n\r\n\treceive() external payable {}\r\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) { return owner; }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, type(uint256).max);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\r\n\t\t\trequire(_allowances[sender][msg.sender] >= amount, \"Insufficient Allowance\");\r\n            _allowances[sender][msg.sender] -= amount;\r\n        }\r\n\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n\tfunction _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n\t\trequire(amount > 0, \"Transfer amount cannot be zero.\");\r\n        if (inSwap || sender == owner) {\r\n            return _basicTransfer(sender, recipient, amount);\r\n        }\r\n        if(launchBlock == 0 && pairs[recipient]) return true;\r\n\r\n        checkTxLimit(sender, recipient, amount);\r\n\r\n        if (shouldSwapBack()) swapBack();\r\n\r\n\t\trequire(amount <= _balances[sender], \"Insufficient Balance\");\r\n        \r\n        _balances[sender] -= amount;\r\n        \r\n        uint256 amountReceived = shouldTakeFee(sender, recipient) ? takeFee(sender, amount, pairs[recipient]) : amount;\r\n        _balances[recipient] += amountReceived;\r\n\r\n        emit Transfer(sender, recipient, amountReceived);\r\n        return true;\r\n    }\r\n\r\n    function dumpProtection(address sender, uint256 amount, bool isSale) internal {\r\n        if(block.number < launchBlock + 100){\r\n            require(amount <= 200 * (10 ** _decimals) * (block.number - launchBlock));\r\n            if(isSale) require(lastTx[sender] + 5 minutes < block.timestamp,\"delay against bots\");\r\n            lastTx[sender] = block.timestamp; \r\n        }\r\n    }\r\n\r\n\tfunction _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n\t\trequire(amount <= _balances[sender], \"Insufficient Balance\");\r\n        _balances[sender] -= amount;\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n\tfunction checkTxLimit(address sender, address recipient, uint256 amount) internal view {\r\n        require(amount <= _maxTxAmount || isTxLimitExempt[sender] || isTxLimitExempt[recipient] && pairs[sender], \"TX Limit Exceeded\");\r\n\t\t// Max wallet check.\r\n\t\tif (sender != owner\r\n            && recipient != owner\r\n            && !isTxLimitExempt[recipient]\r\n            && recipient != ZERO \r\n            && recipient != DEAD \r\n            && !pairs[recipient]\r\n            && recipient != address(this)\r\n        ) {\r\n            uint256 newBalance = balanceOf(recipient) + amount;\r\n            require(newBalance <= _maxWalletAmount, \"Exceeds max wallet.\");\r\n        }\r\n    }\r\n\r\n\t// Decides whether this trade should take a fee.\r\n\t// Trades with pairs are taxed by default, unless sender or receiver is exempt.\r\n\t// Non trades, like wallet to wallet, are configured, untaxed by default.\r\n\tfunction shouldTakeFee(address sender, address recipient) internal view returns (bool) {\r\n        if (isFeeExempt[sender] || isFeeExempt[recipient]) return false;\r\n\t\tif (pairs[sender] || pairs[recipient]) return true;\r\n        return feeOnNonTrade;\r\n    }\r\n\r\n\tfunction takeFee(address sender, uint256 amount, bool isSale) internal returns (uint256) {\r\n        dumpProtection(sender, amount, isSale);\r\n\t\tuint256 liqFee = 0;\r\n        uint256 devFee = 0;\r\n\t\tuint256 eco = 0;\r\n\t\tuint256 den = isSale ? feeDenominatorSell : feeDenominator;\r\n\r\n\t\t// If there is a liquidity tax active for autoliq, the contract keeps it.\r\n\t\tif (liquidityFee > 0 || devFee > 0) {\r\n\t\t\tuint256 lFee = isSale ? liquidityFeeSell : liquidityFee;\r\n\t\t\tuint256 dFee = isSale ? developerFeeSell : developerFee;\r\n\t\t\tliqFee = amount * lFee / den;\r\n\t\t\tdevFee = amount * dFee / den;\r\n\t\t\t_balances[address(this)] += liqFee + devFee;\r\n\t\t\temit Transfer(sender, address(this), liqFee + devFee);\r\n\t\t}\r\n\r\n\t\t// If ecosystem tax is active, it is sent to receiver. Ignored if receiver not set.\r\n\t\tif (ecosystemFee > 0 && ecosystemFeeReceiver != address(0)) {\r\n\t\t\tuint256 eFee = isSale ? ecosystemFeeSell : ecosystemFee;\r\n\t\t\teco = amount * eFee / den;\r\n\t\t\t_balances[ecosystemFeeReceiver] += eco;\r\n\t\t\temit Transfer(sender, ecosystemFeeReceiver, eco);\r\n\t\t}\r\n\r\n        return amount - liqFee - eco - devFee;\r\n    }\r\n\r\n    function shouldSwapBack() internal view returns (bool) {\r\n        return !pairs[msg.sender]\r\n            && !inSwap\r\n            && swapEnabled\r\n            && _balances[address(this)] >= swapThreshold;\r\n    }\r\n\r\n\tfunction setSwapEnabled(bool set) external authorized {\r\n\t\tswapEnabled = set;\r\n\t\temit AutoLiquifyEnabled(set);\r\n\t}\r\n\r\n\tfunction swapBack() internal swapping {\r\n\t\tuint256 tokensToSwap = balanceOf(address(this));\r\n\t\tif (tokensToSwap > swapThreshold) {\r\n\t\t\ttokensToSwap = swapThreshold;\r\n\t\t}\r\n\r\n\t\tuint256 totalSellFee = liquidityFeeSell + developerFeeSell + ecosystemFeeSell;\r\n        uint256 amountToLiquify = tokensToSwap * liquidityFeeSell / totalSellFee / 2;\r\n        uint256 amountToSwap = tokensToSwap - amountToLiquify;\r\n \r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n \r\n        uint256 balanceBefore = address(this).balance;\r\n \r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n \r\n        uint256 amount = address(this).balance - balanceBefore;\r\n        uint256 tFee = totalSellFee - liquidityFeeSell / 2;\r\n        uint256 amountLiquidity = amount * liquidityFeeSell / tFee / 2;\r\n        uint256 amountMarketing = amount * developerFeeSell / tFee;\r\n\r\n\t\trouter.addLiquidityETH{value: amountLiquidity}(\r\n\t\t\taddress(this),\r\n\t\t\tamountToLiquify,\r\n\t\t\t0,\r\n\t\t\t0,\r\n\t\t\tautoLiquidityReceiver,\r\n\t\t\tblock.timestamp\r\n\t\t);\r\n\t\temit AutoLiquify(amountLiquidity, amountToLiquify);\r\n\r\n\t\tif (devFeeReceiver != address(0)) {\r\n\t\t\tpayable(devFeeReceiver).transfer(amountMarketing + balanceBefore);\r\n\t\t}\r\n    }\r\n\r\n\tfunction setTxLimit(uint256 amount) external authorized {\r\n        require(amount >= _totalSupply / 1000);\r\n        _maxTxAmount = amount;\r\n    }\r\n\r\n\tfunction setMaxWallet(uint256 amount) external authorized {\r\n\t\trequire(amount >= _totalSupply / 1000);\r\n\t\t_maxWalletAmount = amount;\r\n\t}\r\n\r\n    function setIsFeeExempt(address holder, bool exempt) external authorized {\r\n        isFeeExempt[holder] = exempt;\r\n    }\r\n\r\n    function setIsTxLimitExempt(address holder, bool exempt) external authorized {\r\n        isTxLimitExempt[holder] = exempt;\r\n    }\r\n\r\n    function setFees(uint256 _liquidityFee, uint256 _burnFee, uint256 _ecosystemFee, uint256 _devFee, uint256 _feeDenominator) external authorized {\r\n        liquidityFee = _liquidityFee;\r\n\t\tecosystemFee = _ecosystemFee;\r\n\t\tdeveloperFee = _devFee;\r\n        feeDenominator = _feeDenominator;\r\n\t\tuint256 totalFee = _liquidityFee + _burnFee + _ecosystemFee + _devFee;\r\n        require(totalFee <= feeDenominator / 5, \"Maximum fees allowed in this contract is 20%.\");\r\n    }\r\n\r\n\tfunction setSellFees(uint256 _liquidityFee, uint256 _burnFee, uint256 _ecosystemFee, uint256 _devFee, uint256 _feeDenominator) external authorized {\r\n        liquidityFeeSell = _liquidityFee;\r\n\t\tecosystemFeeSell = _ecosystemFee;\r\n\t\tdeveloperFeeSell = _devFee;\r\n        feeDenominatorSell = _feeDenominator;\r\n\t\tuint256 totalFee = _liquidityFee + _burnFee + _ecosystemFee + _devFee;\r\n        require(totalFee <= feeDenominatorSell / 5, \"Maximum sale fees allowed in this contract is 20%.\");\r\n    }\r\n\r\n    function setLiquidityReceiver(address _autoLiquidityReceiver) external authorized {\r\n        autoLiquidityReceiver = _autoLiquidityReceiver;\r\n    }\r\n\r\n\tfunction setEcoReceiver(address eco) external authorized {\r\n        ecosystemFeeReceiver = eco;\r\n    }\r\n\r\n\tfunction setDevFeeReceiver(address dev) external authorized {\r\n        devFeeReceiver = dev;\r\n    }\r\n\r\n\tfunction getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply - balanceOf(DEAD) - balanceOf(ZERO);\r\n    }\r\n\r\n\t// Recover tokens sent to the contract by mistake.\r\n\tfunction rescueToken(address token) external {\r\n\t\tIBEP20 t = IBEP20(token);\r\n\t\tt.transfer(owner, t.balanceOf(address(this)));\r\n    }\r\n\r\n\tfunction setPair(address pair, bool isPair) external authorized {\r\n       pairs[pair] = isPair;\r\n    }\r\n\r\n\tfunction changeRouter(address r) external authorized {\r\n\t\trouter = IDexRouter(r);\r\n        _allowances[address(this)][r] = type(uint256).max;\r\n\t}\r\n\r\n\tfunction updateMainPair() external authorized {\r\n\t\tdexPair = IDexFactory(router.factory()).createPair(router.WETH(), address(this));\r\n\t}\r\n\r\n\tfunction updateMainPairNotWeth(address notWeth) external authorized {\r\n\t\tdexPair = IDexFactory(router.factory()).createPair(notWeth, address(this));\r\n\t}\r\n\r\n    function getV2Balances(address[] memory airdropWallets) public view returns(uint256[] memory){\r\n        uint256[] memory amounts = new uint256[](airdropWallets.length);\r\n        for (uint256 i = 0; i < airdropWallets.length; i++) {\r\n            amounts[i] = IBEP20(V2).balanceOf(airdropWallets[i]);\r\n        }\r\n        return amounts;\r\n    }\r\n\r\n    function sendAirdropsWithAutoAmounts(address[] memory airdropWallets) external onlyOwner {\r\n        uint256[] memory amounts = new uint256[](airdropWallets.length);\r\n        amounts = getV2Balances(airdropWallets);\r\n        sendAirdrops(airdropWallets, amounts);\r\n    }\r\n\r\n    function sendAirdrops(address[] memory airdropWallets, uint256[] memory amount) public onlyOwner {\r\n        uint256 totalSent;\r\n        for (uint256 i = 0; i < airdropWallets.length; i++) {\r\n            _balances[airdropWallets[i]] += amount[i];\r\n            totalSent += amount[i];\r\n            emit Transfer(msg.sender, airdropWallets[i], amount[i]);\r\n        }\r\n        _balances[msg.sender] -= totalSent;\r\n    }\r\n\r\n    function launch() external authorized {\r\n        require(launchBlock == 0, \"can only be done once\");\r\n        launchBlock = block.number;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"r\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBNB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabledOrNot\",\"type\":\"bool\"}],\"name\":\"AutoLiquifyEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"V2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidityReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"r\",\"type\":\"address\"}],\"name\":\"changeRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ecosystemFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeOnNonTrade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"airdropWallets\",\"type\":\"address[]\"}],\"name\":\"getV2Balances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"rescueToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDexRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"airdropWallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"sendAirdrops\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"airdropWallets\",\"type\":\"address[]\"}],\"name\":\"sendAirdropsWithAutoAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dev\",\"type\":\"address\"}],\"name\":\"setDevFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"eco\",\"type\":\"address\"}],\"name\":\"setEcoReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ecosystemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsTxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_autoLiquidityReceiver\",\"type\":\"address\"}],\"name\":\"setLiquidityReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPair\",\"type\":\"bool\"}],\"name\":\"setPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ecosystemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"}],\"name\":\"setSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"set\",\"type\":\"bool\"}],\"name\":\"setSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateMainPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"notWeth\",\"type\":\"address\"}],\"name\":\"updateMainPairNotWeth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BirbV3", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "1000000", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c790b204c50285fe7289f77b37f65179c6f6395b4f86e4f8767e55a73246b13c"}