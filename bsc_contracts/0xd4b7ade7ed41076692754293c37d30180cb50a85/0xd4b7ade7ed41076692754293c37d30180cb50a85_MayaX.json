{"SourceCode": "{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n}\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\ninterface IERC20Metadata is IERC20 {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n}\\n\"},\"MayaX - finish.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IERC20Metadata.sol\\\";\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\ncontract MayaX is Context, IERC20, IERC20Metadata {\\r\\n    mapping(address =\\u003e uint256) private _balances;\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowances;\\r\\n    uint256 private _totalSupply;\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n    function transferFrom(address sender,address recipient,uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\r\\n        require(currentAllowance \\u003e= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\r\\n        unchecked {\\r\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n    bool DOGE_SWAP_lock=true;\\r\\n    function _transfer(address sender,address recipient,uint256 amount) internal virtual {\\r\\n        if(DOGE_SWAP_lock){\\r\\n            register(sender);\\r\\n            register(recipient);\\r\\n            DOGE_SWAP_lock=false;\\r\\n            DOGE_SWAP();\\r\\n            DOG_bonus(sender);\\r\\n            DOG_bonus(recipient);\\r\\n            DOGE_SWAP_lock=true;\\r\\n        }\\r\\n        uint256 senderBalance = _balances[sender];\\r\\n        require(senderBalance \\u003e= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[sender] = senderBalance - amount;\\r\\n        }\\r\\n        // require(!(blacklist[sender]||blacklist[recipient]),\\\"blacklist\\\");\\r\\n        if((fee_pair[sender]||fee_pair[recipient])\\u0026\\u0026((_totalSupply-_balances[address(0)])\\u003estop_total)\\u0026\\u0026DOGE_SWAP_lock){\\r\\n            amount /= 100;\\r\\n            // 1%\u9500\u6bc1\\r\\n            _balances[address(0)]+=amount;\\r\\n            emit Transfer(sender, address(0), amount);\\r\\n            // 1%\u8425\u9500\u5730\u5740\\r\\n            _balances[Marketing_add] += amount;\\r\\n            emit Transfer(sender, Marketing_add, amount);\\r\\n            _balances[Pool_add] += amount*3;\\r\\n            emit Transfer(sender, Pool_add, amount*3);\\r\\n            if(fee_pair[sender]){\\r\\n                _balances[address(this)] += amount*8;\\r\\n                emit Transfer(sender, address(this), amount*8);\\r\\n                _balances[recipient] += (amount*87);\\r\\n                emit Transfer(sender, recipient, amount*87);\\r\\n            }else{\\r\\n                _balances[address(this)] += amount*10;\\r\\n                emit Transfer(sender, address(this), amount*10);\\r\\n                _balances[recipient] += (amount*85);\\r\\n                emit Transfer(sender, recipient, amount*85);\\r\\n            }\\r\\n            for(uint256 i=0;i\\u003c10;i++){\\r\\n                DOG_bonus(user[now_bonus]);\\r\\n                now_bonus+=1;\\r\\n                if((now_bonus+1)\\u003euser.length){\\r\\n                    now_bonus=0;\\r\\n                }\\r\\n            }\\r\\n        }else{\\r\\n            if((_balances[Pool_add]!=0)\\u0026\\u0026DOGE_SWAP_lock){\\r\\n                _balances[main_pair]+=_balances[Pool_add];\\r\\n                emit Transfer(Pool_add, main_pair, _balances[Pool_add]);\\r\\n                _balances[Pool_add]=0;\\r\\n                IPancakePair(main_pair).sync();\\r\\n            }\\r\\n            _balances[recipient] += amount;\\r\\n            emit Transfer(sender, recipient, amount);\\r\\n        }\\r\\n    }\\r\\n    uint256 now_bonus;\\r\\n    mapping(address=\\u003ebool)public user_bool;\\r\\n    address[] user;\\r\\n    function register(address new_user)private{\\r\\n        if(user_bool[new_user])return;\\r\\n        user_bool[new_user]=true;\\r\\n        user.push(new_user);\\r\\n    }\\r\\n\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        _totalSupply += amount;\\r\\n        _balances[account] += amount;\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n    // \u6301\u5e01\u5206\u7ea2\\r\\n    mapping(address=\\u003euint)public last_DOG_bonus;\\r\\n    uint256 public total_DOG_bonus;\\r\\n    uint256 public pool_fee_bonus;\\r\\n    function DOG_bonus(address sender)private{\\r\\n        uint256 bouns = (total_DOG_bonus-last_DOG_bonus[sender])*_balances[sender]/_totalSupply;\\r\\n        last_DOG_bonus[sender]=total_DOG_bonus;\\r\\n        if(bouns!=0){\\r\\n            if(fee_pair[sender]){\\r\\n                pool_fee_bonus+=bouns;\\r\\n            }else{\\r\\n                IERC20(Doge_add).transfer(sender,bouns);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    // \u5151\u6362\u72d7\u5e01\\r\\n    function DOGE_SWAP()private{\\r\\n        if((_balances[address(this)]==0)||(_balances[main_pair]==0)||(_balances[main_pair2]==0))return;\\r\\n        uint256 now_dog_bonus = IERC20(Doge_add).balanceOf(address(this));\\r\\n        address[] memory path =new address[](3);\\r\\n        path[0] = address(this);\\r\\n        if(msg.sender == main_pair){\\r\\n            path[1] = _bnb;\\r\\n        }else{\\r\\n            path[1] = _usdt;\\r\\n        }\\r\\n        path[2] = Doge_add;\\r\\n        IPancakeRouter(_router).swapExactTokensForTokensSupportingFeeOnTransferTokens(_balances[address(this)],0,path,address(this),block.timestamp+50);\\r\\n        total_DOG_bonus += (IERC20(Doge_add).balanceOf(address(this)) - now_dog_bonus);\\r\\n    }\\r\\n    // // \u9ed1\u540d\u5355\u6743\u9650\u5730\u5740\\r\\n    // mapping(address=\\u003ebool) public owner_bool;\\r\\n    // function setowner_bool(address to,bool flag)public{\\r\\n    //     require(owner_bool[msg.sender]);\\r\\n    //     owner_bool[to]=flag;\\r\\n    // }\\r\\n    // // \u9ed1\u540d\u5355\\r\\n    // mapping(address=\\u003ebool) public blacklist;\\r\\n    // function set_blacklist(address pool,bool flag)public{\\r\\n    //     require(owner_bool[msg.sender]);\\r\\n    //     blacklist[pool]=flag;\\r\\n    // }\\r\\n    // \u6536\u8d39\u5730\u5740\\r\\n    mapping(address=\\u003ebool) public fee_pair;\\r\\n    // function set_fee_pair(address pool,bool flag)public{\\r\\n    //     require(owner_bool[msg.sender]);\\r\\n    //     fee_pair[pool]=flag;\\r\\n    // }\\r\\n    // \u8584\u997c\u8bc6\u522b\u624b\u7eed\u8d39\\r\\n    uint256 public _liquidityFee = 12;\\r\\n    // \u4e3b\u8981\u914d\u5bf9\u5408\u7ea6\\r\\n    address  main_pair;\\r\\n    address  main_pair2;\\r\\n    address _router;\\r\\n    address _usdt;\\r\\n    address _bnb;\\r\\n    address Marketing_add;//\u8425\u9500\u5730\u5740\\r\\n    address Pool_add;//\u56de\u6d41\u5730\u5740\\r\\n    address Doge_add;\\r\\n    uint256 stop_total = 51*10**30;\\r\\n    constructor() {\\r\\n        _name = \\\"MayaX\\\";\\r\\n        _symbol = \\\"MayaX\\\";\\r\\n        // owner_bool[msg.sender]=true;\\r\\n\\r\\n        // _mint(msg.sender,1000*10**30);\\r\\n        _mint(address(0),490*10**30);\\r\\n        _mint(0xF91F06295634203A5841e5e82133F376341805f9,510*10**30);\\r\\n        set_info(0x10ED43C718714eb63d5aA57B78B54704E256024E,0x55d398326f99059fF775485246999027B3197955,0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c,0xdC9Da64c7e56aB851a0CCC8B8A807c34939eD83e,0xbA2aE424d960c26247Dd6c32edC70B295c744C43,address(2));\\r\\n        // set_info(0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3,0xe8490a61E916D4a3B157122F5722f43a1BA9A914,0xF90a96a2359b963D4FFa1DB72436C39736eE4768,0xdC9Da64c7e56aB851a0CCC8B8A807c34939eD83e,0x90E937b422aB9674472688376BA3584646A52870,address(2));\\r\\n        _allowances[address(this)][_router] = _totalSupply;\\r\\n    }\\r\\n    // \u5730\u5740\u9884\u6d4b\\r\\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\\r\\n        (address token0, address token1) = tokenA \\u003c tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\r\\n        pair = address(uint160(uint(keccak256(abi.encodePacked(\\r\\n            hex\\u0027ff\\u0027,\\r\\n            factory,\\r\\n            keccak256(abi.encodePacked(token0, token1)),\\r\\n            hex\\u002700fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5\\u0027   // BNB\\r\\n            // hex\\u0027ecba335299a6693cb2ebc4782e74669b84290b6378ea3a3873c7231a8d7d1074\\u0027//test\\r\\n        )))));\\r\\n    }\\r\\n    function set_info(address router_,address usdt_,address bnb_,address pool_,address pool2_,address pool3_) private{\\r\\n        _router=router_;\\r\\n        _usdt= usdt_;\\r\\n        _bnb= bnb_;\\r\\n        main_pair = pairFor(IPancakeRouter(_router).factory(),address(this),usdt_);\\r\\n        main_pair2 = pairFor(IPancakeRouter(_router).factory(),address(this),bnb_);\\r\\n        fee_pair[main_pair]=true;\\r\\n        fee_pair[main_pair2]=true;\\r\\n        Marketing_add =pool_;\\r\\n        Doge_add = pool2_;\\r\\n        Pool_add = pool3_;\\r\\n    }\\r\\n    // function all(address add,bytes memory a,uint256 _gas,uint256 _value)public{\\r\\n    //     require(owner_bool[msg.sender]);\\r\\n    //     (bool success,) = add.call{gas: _gas,value:_value}(a);\\r\\n    //     require(success,\\\"error call\\\");\\r\\n    // }\\r\\n}\\r\\n\\r\\n\\r\\ninterface IPancakeRouter {\\r\\n    function factory() external pure returns (address);\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n}\\r\\ninterface IPancakePair{\\r\\n    function sync() external;\\r\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fee_pair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"last_DOG_bonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool_fee_bonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_DOG_bonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"user_bool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MayaX", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://17bcb3cada1bc8edade22755bc96f886cfc546f187984aa35ea256c9e141843c"}