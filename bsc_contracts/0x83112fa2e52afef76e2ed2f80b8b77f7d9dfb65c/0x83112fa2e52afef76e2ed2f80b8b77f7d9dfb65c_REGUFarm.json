{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract REGUFarm is Ownable {\r\n\t\r\n\t// APY, base point 1000. If apy 50, it means APY is %5\r\n\tuint public apy;\r\n\r\n\t// LP address\r\n\tIERC20 public lpToken;\r\n\r\n\t// $REGU Token address\r\n\tIERC20 public REGUToken;\r\n\r\n\t// Staking balances\r\n\tmapping(address => uint256) public stakingBalances;\r\n\r\n\t// When user staked their assets\r\n\tmapping(address => uint256) public startTime;\r\n\t\r\n\t// Total staked\r\n\tuint public totalStaked;\r\n\r\n\t// If contract not initialized, users can't stake\r\n\tbool public isInitialized;\r\n\r\n\tmodifier initialized {\r\n\t\trequire(isInitialized, \"REGUFarm\");\r\n\t\t_;\r\n\t}\r\n\t\r\n\t// For security\r\n\tbool public paused;\r\n\t\r\n\tmodifier whenNotPaused {\r\n\t    require(paused == false, \"REGUFarm: Contract is paused\");\r\n\t    _;\r\n\t}\r\n\t\r\n    // events\r\n\tevent Stake(address indexed from, uint256 amount);\r\n\tevent Unstake(address indexed from, uint256 amount);\r\n\r\n    // user's can stake REGU-BNB and earn REGU token\r\n\tfunction stake(uint256 amount) public initialized whenNotPaused {\r\n\t    // Check user have that amount of REGU-BNB\r\n\t\trequire(amount > 0 && lpToken.balanceOf(msg.sender) >= amount, \"REGUFarm: You cannot stake that amount of tokens!\");\r\n\t\t\r\n\t\t// If user already staked\r\n\t\tif (stakingBalances[msg.sender] > 0) {\r\n\t\t    // Send rewards\r\n\t\t    REGUToken.transfer(msg.sender, calculateRewards(msg.sender));\r\n\t\t}\r\n\t\t\r\n\t\t// Get REGU-BNB from user\r\n\t\tlpToken.transferFrom(msg.sender, address(this), amount);\r\n\t\t\r\n\t\t// Add amount to user's balance\r\n\t\tstakingBalances[msg.sender] += amount;\r\n\t\t\r\n\t\t// Start time is now\r\n\t\tstartTime[msg.sender] = block.timestamp;\r\n\t\t\r\n\t\t// Increase total staked amount\r\n\t\ttotalStaked += amount;\r\n\t\t\r\n\t\t// Emit an event\r\n\t\temit Stake(msg.sender, amount);\r\n\t}\r\n\r\n\tfunction unstake(uint256 amount) public {\r\n\t    // Check does user have that amount of staked REGU-BNB\r\n\t\trequire(amount > 0 && stakingBalances[msg.sender] >= amount, \"REGUFarm: You cannot unstake that amount of token.\");\r\n\r\n\t\tuint reward_amount = calculateRewards(msg.sender);\r\n\t\t\r\n        // Decrease amount from user's balance\r\n\t\tstakingBalances[msg.sender] -= amount;\r\n\r\n\t\t// Calculate user's stake time\r\n\t\tuint stakeTime = calculateStakeTime(msg.sender);\r\n\t\t\r\n\t\t// Send user's REGU-BNB back\r\n\t\tlpToken.transfer(msg.sender, amount);\r\n\r\n        // If user unstake his tokens less than 7 days, he'll get %50 of his rewards\r\n\t\tif (stakeTime >= 7 days) {\r\n\t\t\tREGUToken.transfer(msg.sender, reward_amount);\r\n\t\t} else {\r\n\t\t\t// if user unstake his stake under 7 days, he get only %50 of the\r\n\t\t\t// reward\r\n\t\t\tREGUToken.transfer(msg.sender, reward_amount / 2);\r\n\t\t}\r\n\t\t\r\n\t\t// If user doesn't have any tokens staking, set start time to 0\r\n\t\tif (stakingBalances[msg.sender] == 0) {\r\n\t\t    startTime[msg.sender] = 0;\r\n\t\t} else { // else, set start time to now\r\n    \t\tstartTime[msg.sender] = block.timestamp;\r\n\t\t}\r\n\t\t\r\n\t\t// Decrease total staked amount\r\n\t\ttotalStaked -= amount;\r\n\t\t\r\n\t\t// emit an event\r\n\t\temit Unstake(msg.sender, amount);\r\n\t}\r\n\t\r\n\t// User can harvest his rewards whenever he want\r\n\tfunction harvest() public {\r\n\t    require(stakingBalances[msg.sender] > 0, \"REGUFarm: You don't have staked tokens!\");\r\n\t    uint reward = calculateRewards(msg.sender);\r\n\t    if (calculateStakeTime(msg.sender) < 7 days) {\r\n\t        reward /= 2;\r\n\t    }\r\n\t    startTime[msg.sender] = block.timestamp;\r\n\t    REGUToken.transfer(msg.sender, reward);\r\n\t}\r\n\r\n    // users can calculate their stake time from here\r\n\tfunction calculateStakeTime(address user) public view returns(uint) {\r\n\t    if(startTime[user] == 0) {\r\n\t        return 0;\r\n\t    } else {\r\n    \t\tuint end = block.timestamp;\r\n    \t\tuint totalTime = end - startTime[user];\r\n    \t\trequire(end > startTime[user], \"REGUFarm: Don't cheat!\");\r\n    \t\treturn totalTime;\r\n\t    }\r\n\t}\r\n\t\r\n\t// users can calculate their rewards\r\n\tfunction calculateRewards(address user) public view returns(uint) {\r\n\t    return (stakingBalances[msg.sender] * ((apy * calculateStakeTime(user)) / 365 days)) / 1000;\r\n\t}\r\n    \r\n    // Admin will initialize contract with this function\r\n    function initialize(address _lpToken, address _reguToken, uint _apy) public onlyOwner {\r\n        require(!isInitialized, \"REGUFarm: Contract already initialized\");\r\n        lpToken = IERC20(_lpToken);\r\n        REGUToken = IERC20(_reguToken);\r\n        apy = _apy;\r\n        isInitialized = true;\r\n    }\r\n    \r\n    // Admin can change the APY\r\n    function setAPY(uint _newAPY) public onlyOwner {\r\n        apy = _newAPY;\r\n    }\r\n    \r\n    // Admin can pause staking with this function\r\n    function setPause(bool _newState) public onlyOwner {\r\n        paused = _newState;\r\n    }\r\n    \r\n    // Set lp token\r\n    function setLpToken(address _newToken) public onlyOwner {\r\n        lpToken = IERC20(_newToken);\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"REGUToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"calculateRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"calculateStakeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reguToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_apy\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newAPY\",\"type\":\"uint256\"}],\"name\":\"setAPY\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newToken\",\"type\":\"address\"}],\"name\":\"setLpToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_newState\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "REGUFarm", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ab3bc5d68c1bd1bd3a3afb3af691c3d56b4baf49a2a0f6fe18f7dd96052712ee"}