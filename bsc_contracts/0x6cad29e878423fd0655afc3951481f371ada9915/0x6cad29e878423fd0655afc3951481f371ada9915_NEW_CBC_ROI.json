{"SourceCode": "// File contracts/LEXEACH_RBCF.sol\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(\r\n        address _owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function freezeToken(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function unfreezeToken(address account) external returns (bool);\r\n\r\n    function mint(address _to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Unfreeze(\r\n        address indexed _unfreezer,\r\n        address indexed _to,\r\n        uint256 _amount\r\n    );\r\n}\r\n\r\ncontract NEW_CBC_ROI {\r\n    address public ownerWallet;\r\n    uint public currUserID = 499;\r\n    uint public level_income = 0;\r\n    // Percentage and Times of Fee Increament\r\n    // Setting the renewal auto increament of\r\n\r\n    struct UserStruct {\r\n        bool isExist;\r\n        uint id;\r\n        uint referrerID;\r\n        uint topupAmount;\r\n        uint referredUsers;\r\n        uint capping;\r\n        uint income;\r\n        uint rootBalance;\r\n        uint assuredReward;\r\n        uint levelIncomeReceived;\r\n        uint incomeTaken;\r\n        uint takenROI;\r\n        uint256 stakeTimes;\r\n        mapping(uint => uint) levelExpired;\r\n        uint incomeMissed;\r\n    }\r\n    struct StackeStruct {\r\n        uint stakeTimes;\r\n        uint lastStaked;\r\n        uint totalStaked;\r\n        uint currentStaked;\r\n        uint rootStakeBalance;\r\n        uint rewardPercentage;\r\n        uint takenStkngReward;\r\n        //uint withdrawableStaking;\r\n    }\r\n    // MATRIX CONFIG FOR AUTO-POOL FUND\r\n    // USERS\r\n    mapping(address => UserStruct) public users;\r\n    mapping(address => StackeStruct) public stakeUser;\r\n\r\n    mapping(uint => address) public userList;\r\n    mapping(uint => uint) public LEVEL_PRICE;\r\n    mapping(address => uint256) public lastTopup;\r\n    mapping(address => uint256) public rewardWin;\r\n    mapping(address => uint256) public regTime;\r\n    mapping(address => uint256) public stakeMonths;\r\n    mapping(address => uint256) public stkTime;\r\n    mapping(address => uint256) public stkCapping;\r\n    mapping(address => uint256) public totalIncomeTaken;\r\n    mapping(uint256 => bool) public stakeExist;\r\n    IBEP20 token;\r\n    IBEP20 public stableCoin;\r\n\r\n    //   mapping(string => address) token; // Token Address Hold with name\r\n    uint public REGESTRATION_FESS;\r\n\r\n    bool ownerPaid;\r\n    // Events\r\n    event SponsorIncome(address indexed _user,address indexed _referrer,uint _time);\r\n    event rewardBonus(address indexed _user,address indexed _referrer,uint _amount);\r\n    event WithdrawROI(address indexed user, uint256 reward);\r\n    event WithdrawStakingROI(address indexed user, uint256 reward);\r\n    event WithdrawWorkingIncome(address indexed user, uint256 reward);\r\n    event TopUp(address indexed sender, uint256 amount, uint256 now);\r\n    event Staked(address indexed sender, uint256 amount, uint256 now);\r\n    event WithdrawStable(address sender, address _to,uint256 amount);\r\n    event allIncomeWithdrawn(address indexed sender, uint256 amount, uint256 now);\r\n    event LevelsIncome(address indexed _user,address indexed _referral,uint indexed _level,uint _amount,uint _time);\r\n    event TopupLevelsIncome(address indexed _user,address indexed _referral,uint indexed _level,uint _amount,uint _time);\r\n\r\n    UserStruct[] private requests;\r\n\r\n    // Owner Set Token Acceptance Format\r\n    // string tokenAcceptType = \"NATIVE-COIN\";\r\n\r\n    constructor(address _token, address stableCoin_) {\r\n        ownerWallet = msg.sender;\r\n        currUserID++;\r\n        REGESTRATION_FESS = 25e18;\r\n        LEVEL_PRICE[1] = REGESTRATION_FESS / 2;\r\n        LEVEL_PRICE[2] = REGESTRATION_FESS * 6 / 100;\r\n        LEVEL_PRICE[3] = REGESTRATION_FESS * 6 / 100;\r\n        LEVEL_PRICE[4] = REGESTRATION_FESS * 6 / 100;\r\n        LEVEL_PRICE[5] = REGESTRATION_FESS * 6 / 100;\r\n        LEVEL_PRICE[6] = REGESTRATION_FESS * 3 / 100;\r\n        LEVEL_PRICE[7] = REGESTRATION_FESS * 3 / 100;\r\n        LEVEL_PRICE[8] = REGESTRATION_FESS * 3 / 100;\r\n        LEVEL_PRICE[9] = REGESTRATION_FESS * 2 / 100;\r\n        LEVEL_PRICE[10] = REGESTRATION_FESS * 2 / 100;\r\n        LEVEL_PRICE[11] = REGESTRATION_FESS * 2 / 100;\r\n        //LEVEL_PRICE[12] = REGESTRATION_FESS / 100;\r\n        //LEVEL_PRICE[13] = REGESTRATION_FESS / 100;\r\n        //LEVEL_PRICE[14] = REGESTRATION_FESS / 100;\r\n        level_income = REGESTRATION_FESS / 100;\r\n        users[ownerWallet].isExist = true;\r\n        users[ownerWallet].id = currUserID;\r\n        stakeExist[24] = true;\r\n        stakeExist[36] = true;\r\n        stakeExist[48] = true;\r\n        //stakeExist[60] = true;\r\n        // user\r\n        userList[currUserID] = ownerWallet;\r\n        token = IBEP20(_token);\r\n\r\n        stableCoin = IBEP20(stableCoin_);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(\r\n            msg.sender == ownerWallet,\r\n            \"Only Owner can access this function.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function Registration(uint _referrerID, uint256 _amount) public payable {\r\n        require(!users[msg.sender].isExist, \"User Exists\");\r\n        require(\r\n            _referrerID > 499 && _referrerID <= currUserID,\r\n            \"Incorrect referral ID\"\r\n        );\r\n        require(_amount == REGESTRATION_FESS, \"Incorrect Value\");\r\n        require(\r\n            stableCoin.allowance(msg.sender, address(this)) >= _amount,\r\n            \"NEED_TO_APPROVE_TOKEN\"\r\n        );\r\n        stableCoin.transferFrom(msg.sender, address(this), _amount);\r\n        currUserID++;\r\n        users[msg.sender].isExist = true;\r\n        users[msg.sender].id = currUserID;\r\n        users[msg.sender].referrerID = _referrerID;\r\n        userList[currUserID] = msg.sender;\r\n        regTime[msg.sender] = block.timestamp;\r\n        // Calculating ROI\r\n       // uint256 amountTo = withdrawableROI(msg.sender);\r\n        //users[msg.sender].withdrawable += amountTo;\r\n        users[msg.sender].stakeTimes = block.timestamp;\r\n\r\n        users[userList[users[msg.sender].referrerID]].referredUsers =\r\n            users[userList[users[msg.sender].referrerID]].referredUsers +\r\n            1;\r\n        users[msg.sender].topupAmount = users[msg.sender].topupAmount + _amount;\r\n        users[msg.sender].capping = users[msg.sender].capping + (_amount * 4);\r\n        users[msg.sender].rootBalance =users[msg.sender].rootBalance +(_amount * 2);\r\n        users[msg.sender].assuredReward =users[msg.sender].assuredReward +(_amount * 2);\r\n        //token.mint(msg.sender, _amount); // Transfer Rewarded Token\r\n        // send reward who refer 10 user in 5 days\r\n        if (users[userList[_referrerID]].referredUsers == 10 &&\r\n            users[msg.sender].stakeTimes - users[userList[_referrerID]].stakeTimes <= 432000){\r\n                rewardWin[userList[_referrerID]] = rewardWin[userList[_referrerID]]+15e18;\r\n                users[userList[_referrerID]].income = users[userList[_referrerID]].income + 15e18;\r\n              //(stableCoin.transfer(userList[_referrerID],15e18));  \r\n              emit rewardBonus(msg.sender, userList[_referrerID],_amount-10e18);\r\n            }\r\n        payReferral(1, msg.sender, msg.value);\r\n\r\n        emit SponsorIncome(msg.sender, userList[_referrerID], block.timestamp);\r\n    }\r\n\r\n    function topUp(uint256 _amount) public {\r\n        require(users[msg.sender].isExist, \"User not Exists\");\r\n        if (lastTopup[msg.sender] == 0) {\r\n            require(_amount == 50e18, \"Incorrect amount\");\r\n        } else if (lastTopup[msg.sender] == 400e18) {\r\n            require(_amount == 400e18, \"Incorrect amount\");\r\n        } else {\r\n            require(\r\n                _amount == (lastTopup[msg.sender]) * 2,\r\n                \"Incorrect amount\"\r\n            );\r\n        }\r\n        require(\r\n            stableCoin.allowance(msg.sender, address(this)) >= _amount,\r\n            \"NEED_TO_APPROVE_TOKEN\"\r\n        );\r\n        stableCoin.transferFrom(msg.sender, address(this), _amount);\r\n        //token.mint(msg.sender, _amount); // Transfer Rewarded Token\r\n        lastTopup[msg.sender] = _amount;\r\n        users[msg.sender].capping = users[msg.sender].capping + (_amount * 4);\r\n        payTopupLevel(1, msg.sender, _amount);\r\n        emit TopUp(msg.sender, _amount, block.timestamp);\r\n    }\r\n\r\n    function stakeCBC(uint256 _amount,uint _month) public {\r\n        require(users[msg.sender].isExist, \"User not Exists\");\r\n        require(stakeUser[msg.sender].currentStaked == 0, \"Already staked\");\r\n        require(_amount % 100e18 == 0, \"Amount must be a multiple of 100\");\r\n        require(_amount >= 100e18  && _amount <= 2400e18,\"Incorrect amount not in range\");\r\n        //require(stakeExist[_amount], \"Stacke Not Exist\");\r\n        require(stakeExist[_month], \"invalid time period\");\r\n        require( stableCoin.allowance(msg.sender, address(this)) >= _amount,\"NEED_TO_APPROVE_TOKEN\");\r\n        \r\n        //uint256 amountTo = withdrawableStakingROI(msg.sender);\r\n        stableCoin.transferFrom(msg.sender, address(this), _amount);\r\n        token.mint(msg.sender,_amount);\r\n        if (_month == 24){\r\n        stakeMonths[msg.sender] = 24;    \r\n        stakeUser[msg.sender].rootStakeBalance = _amount*72/100;\r\n        stkCapping[msg.sender] = stkCapping[msg.sender] + _amount*72/100;\r\n        stakeUser[msg.sender].rewardPercentage = 1000;\r\n        }\r\n\r\n        if (_month == 36){\r\n        stakeMonths[msg.sender] = 36;\r\n        stakeUser[msg.sender].rootStakeBalance = _amount*144/100;\r\n        stkCapping[msg.sender] = stkCapping[msg.sender] + _amount*144/100;\r\n        stakeUser[msg.sender].rewardPercentage = 750;\r\n        }\r\n        if (_month == 48){\r\n        stakeMonths[msg.sender] = 48;    \r\n        stakeUser[msg.sender].rootStakeBalance= _amount*240/100;\r\n        stkCapping[msg.sender] = stkCapping[msg.sender] + _amount*240/100;\r\n        stakeUser[msg.sender].rewardPercentage = 600;\r\n        }\r\n        \r\n        //rootStakeBalance[msg.sender] += _amount;\r\n        stakeUser[msg.sender].stakeTimes = block.timestamp;\r\n        stkTime[msg.sender] = block.timestamp;\r\n        //stakeUser[msg.sender].totalStaked += _amount;\r\n        stakeUser[msg.sender].currentStaked = _amount;\r\n        stakeUser[msg.sender].takenStkngReward = 0;\r\n        users[userList[users[msg.sender].referrerID]].income =\r\n            users[userList[users[msg.sender].referrerID]].income +\r\n            (_amount / 10);\r\n        stakeUser[userList[users[msg.sender].referrerID]].totalStaked = \r\n        stakeUser[userList[users[msg.sender].referrerID]].totalStaked +\r\n        (_amount / 10);\r\n        //stakeUser[msg.sender].lastStaked = _amount;\r\n        emit Staked(msg.sender, _amount, block.timestamp);\r\n    }\r\n\r\n        \r\n    \r\n\r\n    function withdrawROI() public  {\r\n        uint256 reward = withdrawableROI(msg.sender);\r\n       // require(reward > 0, \"No any withdrawableROI Found\");\r\n        if (reward >= users[msg.sender].rootBalance) {\r\n            reward = users[msg.sender].rootBalance;\r\n            users[msg.sender].assuredReward = 0;\r\n        }\r\n        users[msg.sender].rootBalance -= reward;\r\n        users[msg.sender].takenROI += reward;\r\n       // stableCoin.transfer(msg.sender, reward);\r\n        //totalFreeze[msg.sender] -= reward;\r\n       // users[msg.sender].withdrawable = 0;\r\n        users[msg.sender].stakeTimes = block.timestamp;\r\n        emit WithdrawROI(msg.sender, reward);\r\n    }\r\n\r\n    /**\r\n     * @dev Withrawable ROI amount till now\r\n     */\r\n    function withdrawableROI(\r\n        address _address\r\n    ) public view returns (uint reward) \r\n    //{\r\n       // if (users[_address].stakeTimes == 0) {\r\n         //   return users[_address].withdrawable;\r\n    //  }\r\n\r\n       { uint256 numDays = (block.timestamp - users[_address].stakeTimes) / 86400;\r\n        if (numDays > 0) {\r\n            return\r\n                ((users[_address].assuredReward * numDays) / 500);\r\n        }else {\r\n            return (0);\r\n    }\r\n       }\r\n    function withdrawStakingROI() public  {\r\n        require(realWithdrawableStakingROI(msg.sender)>=10e18,\"staking bonus is less then 10 OSDT\");\r\n        uint256 reward = withdrawableStakingROI(msg.sender);\r\n        address _user = msg.sender;\r\n        //require(reward > 0,\"No any withdrawableStaking ROI Found\");\r\n        if (reward >= stakeUser[msg.sender].rootStakeBalance) {\r\n            reward = stakeUser[msg.sender].rootStakeBalance;\r\n            stakeUser[msg.sender].lastStaked = stakeUser[msg.sender].currentStaked = 0;\r\n            stakeUser[msg.sender].currentStaked = 0;\r\n            stakeUser[msg.sender].rewardPercentage = 0;\r\n            stakeMonths[msg.sender] = 0; \r\n            stkCapping[msg.sender] = 0;      \r\n        }\r\n        stakeUser[msg.sender].rootStakeBalance -= reward;\r\n        stableCoin.transfer(_user,(reward/100)*80);\r\n        \r\n        //totalFreeze[msg.sender] -= reward;\r\n        stakeUser[msg.sender].takenStkngReward += reward;\r\n        stakeUser[msg.sender].stakeTimes = block.timestamp;\r\n        totalIncomeTaken[msg.sender] = totalIncomeTaken[msg.sender] + reward;\r\n        \r\n        emit WithdrawStakingROI(msg.sender, reward);\r\n    }\r\n    \r\n    function realWithdrableROI(address _address) public view returns (uint reward) {\r\n       if (withdrawableROI(_address) > users[_address].rootBalance){\r\n        return (users[_address].rootBalance);\r\n        } else {\r\n            return withdrawableROI(_address);\r\n        }\r\n    }\r\n    /**\r\n     * @dev Withrawable Staking ROI amount till now\r\n     */\r\n    function withdrawableStakingROI(address _address) public view returns (uint reward) {\r\n        //if (stakeUser[_address].stakeTimes == 0) {\r\n            if (stakeUser[_address].currentStaked > 0) {\r\n            uint256 numDays = (block.timestamp - stakeUser[_address].stakeTimes) / 86400;\r\n        if (numDays > 0) {\r\n            return ((stakeUser[_address].currentStaked * numDays) / stakeUser[_address].rewardPercentage);\r\n            \r\n        } else {\r\n            return (0);\r\n        \r\n            //return stakeUser[_address].withdrawableStaking;}\r\n                // +\r\n                //stakeUser[_address].withdrawableStaking;\r\n        //} else {\r\n          //  return stakeUser[_address].withdrawableStaking;\r\n        }\r\n\r\n    }\r\n    }\r\n    function realWithdrawableStakingROI(address _address) public view returns (uint reward) {\r\n       if (withdrawableStakingROI(_address) > stakeUser[_address].rootStakeBalance){\r\n        return (stakeUser[_address].rootStakeBalance);\r\n        } else {\r\n            return withdrawableStakingROI(_address);\r\n        }\r\n    }\r\n\r\n\r\n    function withdrawIncome() public  {\r\n        \r\n        uint256 reward = withdrawableIncome(msg.sender);\r\n        //address _user = msg.sender;\r\n        //require(reward > 0,\"No any withdrawableStaking ROI Found\");\r\n       // if (reward > 0) {\r\n         //   reward = users[msg.sender].incomeWithdrawable;\r\n                   \r\n        //stableCoin.transfer(_user, reward);\r\n        users[msg.sender].incomeTaken = users[msg.sender].incomeTaken + reward;\r\n        //stableCoin.transfer(msg.sender, reward);\r\n\r\n        //totalFreeze[msg.sender] -= reward;\r\n       // users[msg.sender].incomeWithdrawable = 0;\r\n        //users[msg.sender].stakeTimes = block.timestamp;\r\n        emit WithdrawWorkingIncome(msg.sender, reward);\r\n    }\r\n    function withdrawableIncome (\r\n        address _address\r\n    ) public view returns (uint reward) {\r\n        {\r\n            return\r\n                (users[_address].income)-(users[_address].incomeTaken);\r\n                \r\n    }\r\n    }\r\n    \r\n    function totalWithdrawable (\r\n        address _address\r\n    ) public view returns (uint reward) {\r\n        {\r\n            return\r\n                realWithdrawableStakingROI(_address) +\r\n                realWithdrableROI(_address) +\r\n                withdrawableIncome(_address);\r\n                //((users[_address].income)-(users[_address].incomeTaken));\r\n        }\r\n    }\r\n\r\n    function withdrawAllIncome() public {\r\n        require(users[msg.sender].isExist, \"User not Exists\");\r\n        require(users[msg.sender].referredUsers >= 1,\"Refer_an_users_first\");\r\n        uint256 reward = realWithdrableROI(msg.sender) + withdrawableIncome(msg.sender);\r\n\r\n        address _user = msg.sender;\r\n        if ((users[msg.sender].id)!= 500) {\r\n        require((users[msg.sender].takenROI +\r\n        users[msg.sender].incomeTaken + reward) <= (users[msg.sender].capping),\"capping limit crossed\");\r\n        }\r\n        require(reward >= 10e18, \"Less then 10 USDT\");\r\n        stableCoin.transfer(_user,(reward/100)*80);\r\n        totalIncomeTaken[msg.sender] = totalIncomeTaken[msg.sender] + reward;\r\n\r\n        \r\n        //(users[msg.sender].incomeTaken) += (users[msg.sender].WithrawableIncome);\r\n        \r\n        \r\n       \r\n        if (withdrawableROI(msg.sender) > 0) {\r\n            withdrawROI();\r\n        }\r\n        if (withdrawableIncome(msg.sender) > 0) {\r\n            withdrawIncome();\r\n        }\r\n        \r\n        \r\n        //send total withdrawable income( withdrawableRIO + withdrawableStakingRIO + withdrawableWorkingIncome to user and\r\n        //run three function 1. withdrawROI 2. withdrawStakingROI and reset withdrawableWorkingincome to 0\r\n        emit allIncomeWithdrawn(msg.sender, reward, block.timestamp);\r\n    }\r\n\r\n    function payTopupLevel(\r\n        uint _level,\r\n        address _user,\r\n        uint _value\r\n    ) internal {\r\n        address referer;\r\n        referer = userList[users[_user].referrerID];\r\n       // bool sent = false;\r\n        uint level_price_local = 0;\r\n        // Condition of level from 1- 1o and number of reffered user\r\n        if (_level == 1 && users[referer].referredUsers >= 0) {\r\n                level_price_local = (_value * 40) / 100;\r\n            }\r\n        else if (_level == 2 && users[referer].referredUsers >= 1) {\r\n            level_price_local = (_value * 6) / 100;\r\n         }\r\n        else if (_level == 3 && users[referer].referredUsers >= 2) {\r\n            level_price_local = (_value * 6) / 100;\r\n        }\r\n        else if (_level == 4 && users[referer].referredUsers >= 3) {\r\n            level_price_local = (_value * 6) / 100;\r\n        }\r\n        else if (_level == 5 && users[referer].referredUsers >= 4) {\r\n            level_price_local = (_value * 6) / 100;\r\n        }\r\n        else if (_level == 6 && users[referer].referredUsers >= 5) {\r\n            level_price_local = (_value * 3) / 100;\r\n        }\r\n        else if (_level == 7 && users[referer].referredUsers >= 6) {\r\n            level_price_local = (_value * 3) / 100;\r\n        }\r\n        else if (_level == 8 && users[referer].referredUsers >= 6) {\r\n            level_price_local = (_value * 3) / 100;\r\n        }\r\n        else if (_level == 9 && users[referer].referredUsers >= 7) {\r\n            level_price_local = (_value * 2) / 100;\r\n        }\r\n        else if (_level == 10 && users[referer].referredUsers >= 7) {\r\n            level_price_local = (_value * 2) / 100;\r\n        }\r\n        else if (_level == 11 && users[referer].referredUsers >= 8) {\r\n            level_price_local = (_value * 2) / 100;\r\n        }\r\n        else if (_level == 12 && users[referer].referredUsers >= 8) {\r\n            level_price_local = (_value * 1) / 100;\r\n        }\r\n        else if (_level == 13 && users[referer].referredUsers >= 9) {\r\n            level_price_local = (_value * 1) / 100;\r\n        }\r\n        else if (_level == 14 && users[referer].referredUsers >= 9) {\r\n            level_price_local = (_value * 1) / 100;\r\n        }\r\n        else if (_level == 15 && users[referer].referredUsers >= 10) {\r\n            level_price_local = (_value * 1) / 100;\r\n        }\r\n        else if (_level == 16 && users[referer].referredUsers >= 10) {\r\n            level_price_local = (_value * 1) / 100;\r\n        }\r\n         else {\r\n            users[referer].incomeMissed++;\r\n        }\r\n        //sent = stableCoin.transfer(address(uint160(referer)),level_price_local);\r\n\r\n        //users[referer].levelIncomeReceived = users[referer].levelIncomeReceived + 1;\r\n        users[userList[users[_user].referrerID]].income =\r\n            users[userList[users[_user].referrerID]].income +\r\n            level_price_local;\r\n        //if (sent) {\r\n            emit TopupLevelsIncome(referer, msg.sender, _level,level_price_local, block.timestamp);\r\n            // level incone distributed counting direct as level one\r\n            //for exampl, 10 maeans 1+9 one is direct plus 9 level after direct\r\n            if (_level < 16 && users[referer].referrerID >= 1) {\r\n                payTopupLevel(_level + 1, referer, _value);\r\n           // } else {}\r\n        }\r\n        //if (!sent) {\r\n        //  payTopupLevel(_level, referer, _value);\r\n        }\r\n    \r\n    function withdrawalStableCoin(address payable _to, uint256 _amount) external onlyOwner{// Owner Withdraw Token From Contract\r\n      \r\n       stableCoin.transfer(_to,_amount);\r\n    emit WithdrawStable(msg.sender, _to, _amount);\r\n    }\r\n\r\n    function payReferral(uint _level, address _user, uint _value) internal {\r\n        address referer;\r\n        referer = userList[users[_user].referrerID];\r\n       // bool sent = false;\r\n        uint level_price_local = 0;\r\n            // Condition of level from 1- 1o and number of reffered user \r\n        if (_level == 1 && users[referer].referredUsers >= 0) {\r\n            level_price_local = LEVEL_PRICE[_level];\r\n         }\r\n        else if (_level == 2 && users[referer].referredUsers >= 1) {\r\n            level_price_local = LEVEL_PRICE[_level];\r\n         }\r\n        else if (_level == 3 && users[referer].referredUsers >= 2) {\r\n            level_price_local = LEVEL_PRICE[_level];\r\n        }\r\n        else if (_level == 4 && users[referer].referredUsers >= 3) {\r\n            level_price_local = LEVEL_PRICE[_level];\r\n        }\r\n        else if (_level == 5 && users[referer].referredUsers >= 4) {\r\n            level_price_local = LEVEL_PRICE[_level];\r\n        }\r\n        else if (_level == 6 && users[referer].referredUsers >= 5) {\r\n            level_price_local = LEVEL_PRICE[_level];\r\n        }\r\n        else if (_level == 7 && users[referer].referredUsers >= 6) {\r\n            level_price_local = LEVEL_PRICE[_level];\r\n        }\r\n        else if (_level == 8 && users[referer].referredUsers >= 6) {\r\n            level_price_local = LEVEL_PRICE[_level];\r\n        }\r\n        else if (_level == 9 && users[referer].referredUsers >= 7) {\r\n            level_price_local = LEVEL_PRICE[_level];\r\n        }\r\n        else if (_level == 10 && users[referer].referredUsers >= 7) {\r\n            level_price_local = LEVEL_PRICE[_level];\r\n        }\r\n        else if (_level == 11 && users[referer].referredUsers >= 8) {\r\n            level_price_local = LEVEL_PRICE[_level];\r\n        }\r\n        else if (_level == 12 && users[referer].referredUsers >= 8) {\r\n            level_price_local = level_income;\r\n        }\r\n        else if (_level == 13 && users[referer].referredUsers >= 9) {\r\n            level_price_local = level_income;\r\n        }\r\n        else if (_level == 14 && users[referer].referredUsers >= 9) {\r\n            level_price_local = level_income;\r\n        }\r\n        else if (_level == 15 && users[referer].referredUsers >= 10) {\r\n            level_price_local = level_income;\r\n        }\r\n        else if (_level == 16 && users[referer].referredUsers >= 10) {\r\n            level_price_local = level_income;\r\n        }\r\n        else{\r\n            users[referer].incomeMissed ++;\r\n        }\r\n                //sent = stableCoin.transfer(address(uint160(referer)),level_price_local); \r\n        \r\n        users[referer].levelIncomeReceived =\r\n            users[referer].levelIncomeReceived +\r\n            1;\r\n        users[userList[users[_user].referrerID]].income =\r\n            users[userList[users[_user].referrerID]].income +\r\n            level_price_local;\r\n      //  if (sent) {\r\n        \r\n            emit LevelsIncome(\r\n                referer,\r\n                msg.sender,\r\n                _level,\r\n                level_price_local,\r\n                block.timestamp\r\n               );\r\n            // level incone distributed counting direct as level one \r\n            //for exampl, 10 maeans 1+9 one is direct plus 9 level after direct \r\n            if (_level < 16 && users[referer].referrerID >= 1) {\r\n                payReferral(_level + 1, referer, _value);\r\n         //   } else {\r\n            }\r\n        }\r\n     //   if (!sent) {\r\n         //   payReferral(_level, referer, _value);\r\n    \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableCoin_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"LevelsIncome\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"SponsorIncome\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"now\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"now\",\"type\":\"uint256\"}],\"name\":\"TopUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"TopupLevelsIncome\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"WithdrawROI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawStable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"WithdrawStakingROI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"WithdrawWorkingIncome\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"now\",\"type\":\"uint256\"}],\"name\":\"allIncomeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rewardBonus\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LEVEL_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REGESTRATION_FESS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referrerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Registration\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastTopup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"level_income\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"realWithdrableROI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"realWithdrawableStakingROI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"regTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardWin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableCoin\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_month\",\"type\":\"uint256\"}],\"name\":\"stakeCBC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeMonths\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeTimes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rootStakeBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takenStkngReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stkCapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stkTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"topUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalIncomeTaken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"totalWithdrawable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"topupAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referredUsers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"capping\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"income\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rootBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assuredReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"levelIncomeReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"incomeTaken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takenROI\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeTimes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"incomeMissed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllIncome\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawIncome\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawROI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStakingROI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"withdrawableIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"withdrawableROI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"withdrawableStakingROI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawalStableCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NEW_CBC_ROI", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000057949388158dd8d2a790dbfc51cdf3caa265b64d00000000000000000000000055d398326f99059ff775485246999027b3197955", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f92b79fbef38c0e9891825d07fbd5cacfdbd24c586e7bf3d691ebebf1293eacb"}