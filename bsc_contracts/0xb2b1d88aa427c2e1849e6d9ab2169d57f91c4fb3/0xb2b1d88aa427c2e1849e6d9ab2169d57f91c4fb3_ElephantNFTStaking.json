{"SourceCode": "/*\r\n    SPDX-License-Identifier: MIT\r\n    A Bankteller Production\r\n    Elephant Money\r\n    Copyright 2023\r\n*/\r\n\r\n/**\r\n\r\n   ELEPHANT MONEY UNLIMITED STAKING\r\n\r\n*/\r\n\r\n/***\r\n *        ________           __                __                       \r\n *       / ____/ /__  ____  / /_  ____ _____  / /_                      \r\n *      / __/ / / _ \\/ __ \\/ __ \\/ __ `/ __ \\/ __/                      \r\n *     / /___/ /  __/ /_/ / / / / /_/ / / / / /_                        \r\n *    /_____/_/\\___/ .___/_/ /_/\\__,_/_/ /_/\\__/                        \r\n *       /  |/  /_/_/ ____  ___  __  __                                 \r\n *      / /|_/ / __ \\/ __ \\/ _ \\/ / / /                                 \r\n *     / /  / / /_/ / / / /  __/ /_/ /                                  \r\n *    /_/  /_/\\____/_/ /_/\\___/\\__, /                                   \r\n *       __  __      ___      /____/ __           __                    \r\n *      / / / /___  / (_)___ ___  (_) /____  ____/ /                    \r\n *     / / / / __ \\/ / / __ `__ \\/ / __/ _ \\/ __  /                     \r\n *    / /_/ / / / / / / / / / / / / /_/  __/ /_/ /                      \r\n *    \\____/_/ /_/_/_/_/_/_/_/_/_/\\__/\\___/\\__,_/                       \r\n *                     / ___// /_____ _/ /__(_)___  ____ _              \r\n *     ____________    \\__ \\/ __/ __ `/ //_/ / __ \\/ __ `/  ____________\r\n *    /_____/_____/   ___/ / /_/ /_/ / ,< / / / / / /_/ /  /_____/_____/\r\n *                   /____/\\__/\\__,_/_/|_/_/_/ /_/\\__, /                \r\n *                                               /____/                 \r\n */\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.17;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\r\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\r\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/utils/ERC721Holder.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC721Receiver} interface.\r\n *\r\n * Accepts all token transfers.\r\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\r\n */\r\ncontract ERC721Holder is IERC721Receiver {\r\n    /**\r\n     * @dev See {IERC721Receiver-onERC721Received}.\r\n     *\r\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n}\r\n\r\n// File: ElephantNFTStaking.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract ElephantNFTStaking is ERC721Holder {\r\n\r\n    IERC20 public rewardsToken;\r\n    IERC721 public nft;\r\n\r\n    uint256 constant internal magnitude = 2 ** 64;\r\n    uint256 constant internal precision = 1e18;\r\n\r\n    uint256 internal profitPerShare;\r\n    uint256 public totalRewards;\r\n    uint256 public txs;\r\n    \r\n    struct Staker {\r\n        uint256[] tokenIds;\r\n        int256 payouts;\r\n        uint256 rewardsReleased;\r\n    }\r\n\r\n    /// @dev Create a deposit dependent staking contract for an nft collection and ERC20 reward token\r\n    constructor(IERC721 _nft, IERC20 _rewardsToken) {\r\n        nft = _nft;\r\n        rewardsToken = _rewardsToken;\r\n    }\r\n\r\n    /// @notice mapping of a staker to its wallet\r\n    mapping(address => Staker) private stakers;\r\n\r\n    /// @notice Mapping from token ID to owner address\r\n\r\n    mapping(uint256 => address) private tokenOwner;\r\n\r\n    /// @notice event emitted when a user has staked a nft\r\n\r\n    event Staked(address owner, uint256 amount);\r\n\r\n    /// @notice event emitted when a user has unstaked a nft\r\n    event Unstaked(address owner, uint256 amount);\r\n\r\n    /// @notice event emitted when a user claims reward\r\n    event RewardPaid(address indexed user, uint256 reward);\r\n\r\n    // @notic event emitted when funding is sent to contract\r\n    event Fund(address indexed source, uint amount);\r\n\r\n    function fund(uint256 _amount) external {\r\n\r\n        require(_amount > 0, \"must donate positive value\");\r\n        require(totalSupply() > 0, \"tokens must be staked\");\r\n        require(\r\n            rewardsToken.transferFrom(msg.sender, address(this), _amount),\r\n            \"fund - failed transfer\"\r\n        );        \r\n\r\n        //This is the magic right here;\r\n        profitPerShare += (_amount * magnitude) / totalSupply();\r\n\r\n        totalRewards += _amount;\r\n\r\n        emit Fund(msg.sender, _amount);\r\n\r\n    }\r\n\r\n    /// @dev Retrieves the balance of tokens staked \r\n    function totalSupply() public view returns (uint256) {\r\n        return nft.balanceOf(address(this));\r\n    } \r\n\r\n    /// @dev Retrieve the token balance of any single address.\r\n    function balanceOf(address _user) public view returns (uint256) {\r\n        return stakers[_user].tokenIds.length;\r\n    }\r\n\r\n    /// @dev Retrieve the total rewards of any single address.\r\n    function totalRewardsOf(address _user) public view returns (uint256) {\r\n        return stakers[_user].rewardsReleased;\r\n    }\r\n\r\n    /// @dev Retrieves the owner of any given _tokenID\r\n    function ownerOf(uint256 _tokenId) public view returns (address) {\r\n        return tokenOwner[_tokenId];\r\n    }\r\n\r\n    /// @dev Retrieve the tokenIds of any single address.\r\n    function tokensOfOwner(\r\n        address _owner\r\n    ) public view returns (uint256[] memory tokenIds) {\r\n        return stakers[_owner].tokenIds;\r\n    }\r\n\r\n    /// @dev Retrieve the rewards balance of any single address.\r\n    function rewardsOf(address _user) public view returns (uint256) {\r\n        return (uint256) ((int256) (profitPerShare * balanceOf(_user)) - stakers[_user].payouts) / magnitude;\r\n    }\r\n\r\n     /// @dev The percentage of the\r\n    function percentage(address _user) public view returns (uint256) {\r\n        require(totalSupply() > 0, \"no tokens staked\");\r\n        return (balanceOf(_user) * precision) / totalSupply(); \r\n    }\r\n\r\n    /// @dev Stakes one or more tokens if owned by the sender\r\n    function stake(uint256[] memory tokenIds) public {\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            _stake(msg.sender, tokenIds[i]);\r\n        }\r\n\r\n        txs++;\r\n    }\r\n\r\n    /// @dev Unstakes one or more tokens if owned by the sender\r\n    function unstake(uint256[] memory tokenIds) public {\r\n        _claimReward(msg.sender);\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            if (tokenOwner[tokenIds[i]] == msg.sender) {\r\n                _unstake(msg.sender, tokenIds[i]);\r\n            }\r\n        }\r\n\r\n        txs++;\r\n    }\r\n\r\n    /// @dev Attempt to claim the available dividends for sender\r\n    function claim() external {\r\n       _claimReward(msg.sender);\r\n\r\n       txs++;\r\n    }\r\n\r\n    function _stake(address _user, uint256 _tokenId) internal {\r\n        //verifying ownership means the staking contract doesn't own it\r\n        require(\r\n            nft.ownerOf(_tokenId) == _user &&\r\n            (nft.getApproved(_tokenId) == address(this) ||\r\n            nft.isApprovedForAll(_user, address(this))),\r\n            \"not owned or approved\"\r\n            ); \r\n\r\n        Staker storage staker = stakers[_user];\r\n\r\n        staker.tokenIds.push(_tokenId);\r\n        \r\n        tokenOwner[_tokenId] = _user; //assign ownership within this contract\r\n\r\n        //adjust payouts to avoid overpayment \r\n        staker.payouts += int256(profitPerShare);  //PPS * amount, but just 1 NFT\r\n\r\n        nft.safeTransferFrom(_user, address(this), _tokenId);\r\n\r\n        emit Staked(_user, _tokenId);\r\n    }\r\n\r\n    function _claimReward(address _user) internal {\r\n\r\n        uint256 _rewardAmount = rewardsOf(_user);\r\n\r\n        Staker storage staker = stakers[_user];\r\n\r\n        if (_rewardAmount > 0) {\r\n            staker.rewardsReleased += _rewardAmount;\r\n            rewardsToken.transfer(_user, _rewardAmount);\r\n\r\n            // update dividend tracker\r\n            staker.payouts += (int256) (_rewardAmount * magnitude);\r\n\r\n            emit RewardPaid(_user, _rewardAmount);\r\n        }\r\n    }\r\n\r\n    function _unstake(address _user, uint256 _tokenId) internal {\r\n        require(\r\n            tokenOwner[_tokenId] == _user,\r\n            \"user must be the owner of the staked nft\"\r\n        );\r\n\r\n        Staker storage staker = stakers[_user];\r\n\r\n        //remove _tokenId from list\r\n        for (uint i=0; i < staker.tokenIds.length; i++) {\r\n            if (staker.tokenIds[i] == _tokenId) {\r\n                staker.tokenIds[i] = staker.tokenIds[staker.tokenIds.length - 1];\r\n                staker.tokenIds.pop();\r\n                break;\r\n            }\r\n        }\r\n        \r\n        delete tokenOwner[_tokenId]; //remove ownership\r\n\r\n        //update dividends tracker\r\n        staker.payouts -= int256(profitPerShare); //PPS * amount, but just 1 NFT\r\n\r\n        nft.safeTransferFrom(address(this), _user, _tokenId);\r\n\r\n        emit Unstaked(_user, _tokenId);\r\n\r\n    }\r\n\r\n    \r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Fund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"percentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"rewardsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"totalRewardsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ElephantNFTStaking", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000b92afedc8f8618be4198fbe5d97adb7c60ab3198000000000000000000000000e283d0e3b8c102badf5e8166b73e02d96d92f688", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0c0c8ca79670523c31a7371efc06d8eee3d5e3bc6dd0dfc650d413efb1196ebe"}