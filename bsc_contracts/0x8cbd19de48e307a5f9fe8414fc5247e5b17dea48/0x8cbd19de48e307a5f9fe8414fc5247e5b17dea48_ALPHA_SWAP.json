{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-09-25\r\n*/\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.19;\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\ninterface IAlphaVault{\r\n    function depositVault(uint256 amount, address referer) external;\r\n    function proxyDepositVault(address _sender, uint amount, address _addr) external;\r\n    function buyBUSDForVaultDeposit(uint256 busdAmount, address referer) external;\r\n    function sellAlphaForBUSD(uint256 tokenAmount) external;\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\utils\\Address.sol\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor (){\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\ncontract ALPHA_SWAP is Ownable, ReentrancyGuard{\r\n    //using SafeMath for uint256;\r\n    //using SafeBEP20 for IERC20;\r\n    IERC20 public token;\r\n    IERC20 public BUSD;\r\n    //contract information\r\n    string private _name = \"ALPHA SWAP\";\r\n    string private _symbol = \"A-SWAP\";\r\n    uint8 private _decimals = 18;\r\n    \r\n    //fees settings\r\n    uint256 public referralFee = 50;\r\n    //uint256 public totalDepositFee = 10;\r\n    uint256 public totalSellFee = 12;\r\n    bool public useVault = true;\r\n    \r\n    //fee address\r\n    address public vaultAddress;\r\n    address public vaultGasAddress = 0xCa5C49f3C20D187BdC3D1EC16ce99b76CaFf880b;//alpha Sigma multisig\r\n    address public dasAddress= 0x9224CAe52E0d36cd5875947d148a60443E70E56A;//Decentralize Account System Wallet\r\n    address public sigmaAddress=0xF423860A73FD17DeF9a3029F84a79E7b226121a7;//Team multisigWallet //0xF423860A73FD17DeF9a3029F84a79E7b226121a7//0x319366e8d08b9DA18ac7103bb8cbC722C066335b\r\n    address public rewardPoolAddress = 0x303eB2Fa35E1d1FdFCe8d7CCA6d671516f73f555; //reward nft Wallet\r\n    address public liqWallet=  0xCa5C49f3C20D187BdC3D1EC16ce99b76CaFf880b; // liquidity wallet\r\n    //deposit and withdraw variable settings\r\n    uint256 public maxSell = 200 ether;\r\n    uint256 public maxBuy = 1000 ether;\r\n    uint256 public minBuy = 1 ether;\r\n    uint public tokenPriceInBusd = 500;//5busd per alpha\r\n    uint public busdPriceInToken = 500;//1alpha per 5busd\r\n    \r\n    mapping(address => uint256) public todaySell;\r\n    mapping(address => uint256) private lastSell;\r\n\r\n    event LogTokenApproval(address token, uint256 total);\r\n    event investmentReport(address investorAddress, uint256 amount, uint256 currentROI, uint256 investmentDate);\r\n    event claimInvestment(address from, address to, uint256 totalEarned, uint256 ctime); \r\n    \r\n    constructor(){\r\n        token = IERC20(0x5d75675E9DA82524B5DfBe3439Fe3a6E29f2b967);//0xB7EbEC4b254ec40bE26368bdC011D28B6d80a916;//0x42C47bDEe5Ff82FAc177402eFfc1306362491c83\r\n        BUSD = IERC20(0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d);//0xaB1a4d4f1D656d2450692D237fdD6C7f9146e814 //0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d\r\n        rewardPoolAddress = 0x303eB2Fa35E1d1FdFCe8d7CCA6d671516f73f555;\r\n        vaultAddress = 0xF5c27FaD680Ea584dc9973F80920D74aCc1290af;\r\n    }\r\n\r\n    //function to return values\r\n    function name() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    \r\n    function getCurrentTime() external view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    function getBUSDValue(uint _busdAmount) public view returns (uint){\r\n        require(_busdAmount > 0, \"no value to calculate\");\r\n            return (_busdAmount / tokenPriceInBusd) * 100;\r\n    }\r\n    function getTokenValue(uint _tokenAmount) public view returns (uint){\r\n        require(_tokenAmount > 0, \"no value to calculate\");\r\n            return (_tokenAmount * busdPriceInToken) / 100;\r\n    }\r\n\r\n    function vaultSettings(uint256 _maxSell, uint256 _maxBuy, uint256 _minBuy) external onlyOwner{\r\n        maxSell = _maxSell;\r\n        maxBuy = _maxBuy;\r\n        minBuy = _minBuy;\r\n    }\r\n\r\n    function updateTokenAddress(address _token, address _nft, address _vaultAddress) external onlyOwner{\r\n        token = IERC20(_token);\r\n        rewardPoolAddress = _nft;\r\n        vaultAddress = _vaultAddress;\r\n    }\r\n\r\n    function updateTokenPrice(uint256 _tokenPriceInBusd, uint256 _busdPriceInToken) external onlyOwner{\r\n        tokenPriceInBusd = _tokenPriceInBusd;\r\n        busdPriceInToken = _busdPriceInToken;\r\n    }\r\n\r\n    function updateUseSwap(bool _flag) external onlyOwner{\r\n        useVault = _flag;\r\n    }\r\n\r\n    function updateFeeAddr(address _dasAddress, address _sigmaAddress, address _liqWallet, address _vaultGasAddress) external onlyOwner{\r\n        dasAddress = _dasAddress;\r\n        sigmaAddress = _sigmaAddress;\r\n        liqWallet = _liqWallet;\r\n        vaultGasAddress = _vaultGasAddress;\r\n    }\r\n    \r\n    function depositPresaleToVault(uint256 tokenToSend,address referBy) external nonReentrant{\r\n        //uint _busdVal = getTokenValue(tokenToSend);\r\n        token.transferFrom(msg.sender, address(this), tokenToSend);\r\n        require(tokenToSend >= minBuy && tokenToSend <= maxBuy,\"You can't buy less than 10alpha and more than 1000 alpha\");\r\n        token.transfer(vaultAddress,tokenToSend);\r\n        IAlphaVault(vaultAddress).proxyDepositVault(msg.sender,tokenToSend,referBy);\r\n    }\r\n\r\n    function depositTokenToVault(uint256 tokenToSend,address referBy) external nonReentrant{\r\n        //uint _busdVal = getTokenValue(tokenToSend);\r\n        token.transferFrom(msg.sender, address(this), tokenToSend);\r\n        require(tokenToSend >= minBuy && tokenToSend <= maxBuy,\"You can't buy less than 10alpha and more than 1000 alpha\");\r\n        token.transfer(vaultAddress,tokenToSend);\r\n        if(useVault==true){\r\n        IAlphaVault(vaultAddress).depositVault(tokenToSend,referBy);\r\n        }\r\n    }\r\n\r\n    function buyBUSDForVaultDeposit(uint256 busdAmount, address referer) external nonReentrant{\r\n            address investor = msg.sender;  \r\n            require(busdAmount > 0 && msg.sender != referer, \"amount check fail\");\r\n            \r\n            if(referer == address(0)){\r\n            referer = sigmaAddress;\r\n            }\r\n            BUSD.transferFrom(investor, address(this), busdAmount);\r\n            uint _tokenVal = getBUSDValue(busdAmount);\r\n            \r\n            require(_tokenVal >= minBuy && _tokenVal <= maxBuy,\"You can't buy more than 1000 alpha\");\r\n            distributeBuyDepositFee(busdAmount);\r\n            if(useVault==true){\r\n                IAlphaVault(vaultAddress).proxyDepositVault(msg.sender,_tokenVal,referer);\r\n            //IAlphaVault(vaultAddress).buyBUSDForVaultDeposit(_tokenVal,referer); \r\n            }       \r\n    }\r\n\r\n    function sellAlphaForBUSD(uint256 tokenAmount, uint256 _halfBalance) external  nonReentrant{\r\n            uint256 ctime = block.timestamp;\r\n            uint256 halfBalance = _halfBalance; //(50 * allVaultBalance) / 100;\r\n            require(tokenAmount > 0 && tokenAmount <= maxSell, \"amount check fail\");\r\n            require(todaySell[msg.sender] < ctime || ((lastSell[msg.sender] + tokenAmount) <= maxSell) ,\"You can not claim again today!\");\r\n            \r\n            token.transferFrom(msg.sender, address(this), tokenAmount);\r\n            uint256 busdAmount = getTokenValue(tokenAmount);\r\n            uint256 taxes = (totalSellFee * busdAmount) / 100;\r\n            uint256 amountTosend = busdAmount - taxes;  \r\n            if(tokenAmount > halfBalance){\r\n                amountTosend = (10 * busdAmount) / 100;\r\n                distributeDumpTax(busdAmount);\r\n            }\r\n            else{\r\n            distributeSellFee(busdAmount);\r\n            }\r\n\r\n            if(lastSell[msg.sender] > 0 && ctime < todaySell[msg.sender]){\r\n                lastSell[msg.sender] += tokenAmount;\r\n            }\r\n            else{\r\n                lastSell[msg.sender]  = tokenAmount;\r\n                todaySell[msg.sender] = ctime + 86400;\r\n            }\r\n            \r\n            BUSD.transfer(msg.sender, amountTosend);\r\n            \r\n    }\r\n\r\n    function distributeBuyDepositFee(uint256 amount) private {\r\n        uint256 balance = amount;\r\n        //uint256 ref = (50 * balance) / 1000;\r\n        uint256 sigma = (25 * balance) / 1000;\r\n        uint256 das = (35 * balance) / 1000;\r\n        uint256 nftReward = (20 * balance) / 1000;\r\n        BUSD.transfer(dasAddress, das);\r\n        BUSD.transfer(sigmaAddress, sigma);\r\n        BUSD.transfer(rewardPoolAddress, nftReward);    \r\n    }\r\n\r\n    function distributeDepositFee(uint256 amount) private {\r\n            uint256 balance = amount;\r\n            uint256 sigma = (20 * balance) / 1000;\r\n            token.transfer(sigmaAddress,sigma );\r\n    }\r\n\r\n    function distributeSellFee(uint256 amount) private {\r\n            uint256 balance = amount;\r\n            uint256 liq = (20 * balance) / 1000;\r\n            uint256 sigma = (15 * balance) / 1000;\r\n            uint256 nftReward = (15 * balance) / 1000;\r\n            BUSD.transfer(liqWallet, liq);\r\n            BUSD.transfer(sigmaAddress, sigma);\r\n            BUSD.transfer(rewardPoolAddress, nftReward);\r\n    }\r\n\r\n    function distributeDumpTax(uint256 amount) private {\r\n            uint256 balance = amount;\r\n            uint256 liq = (30 * balance) / 100;\r\n            uint256 sigma = (10 * balance) / 100;\r\n            uint256 das = (10 * balance) / 100;\r\n            BUSD.transfer(sigmaAddress, sigma);\r\n            BUSD.transfer(dasAddress, das);\r\n            BUSD.transfer(liqWallet, liq);    \r\n    }\r\n\r\n    // Withdraw ERC20 tokens that are potentially stuck\r\n    function recoverETHfromContract() external onlyOwner {\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n    function withdraw_busd (uint amount, address _addr) external onlyOwner {\r\n        BUSD.transfer(_addr, amount);\r\n    }\r\n    function withdraw_token (uint amount, address _addr) external onlyOwner {\r\n        token.transfer(_addr, amount);\r\n    }\r\n    //referer box\r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"LogTokenApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalEarned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ctime\",\"type\":\"uint256\"}],\"name\":\"claimInvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"investorAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentROI\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investmentDate\",\"type\":\"uint256\"}],\"name\":\"investmentReport\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BUSD\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busdPriceInToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"busdAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referer\",\"type\":\"address\"}],\"name\":\"buyBUSDForVaultDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dasAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenToSend\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referBy\",\"type\":\"address\"}],\"name\":\"depositPresaleToVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenToSend\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referBy\",\"type\":\"address\"}],\"name\":\"depositTokenToVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_busdAmount\",\"type\":\"uint256\"}],\"name\":\"getBUSDValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"getTokenValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liqWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverETHfromContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_halfBalance\",\"type\":\"uint256\"}],\"name\":\"sellAlphaForBUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sigmaAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"todaySell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPriceInBusd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dasAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sigmaAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liqWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultGasAddress\",\"type\":\"address\"}],\"name\":\"updateFeeAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"}],\"name\":\"updateTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenPriceInBusd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_busdPriceInToken\",\"type\":\"uint256\"}],\"name\":\"updateTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"updateUseSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useVault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultGasAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minBuy\",\"type\":\"uint256\"}],\"name\":\"vaultSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"withdraw_busd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"withdraw_token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ALPHA_SWAP", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7c4832cea3af16ee87d0c42c8b5171298800202902d3a37006a87db96a0f4ec2"}