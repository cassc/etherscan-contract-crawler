{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.17;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"new 0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract InvitePool {\r\n    address public _owner;\r\n    constructor () {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function claimToken(address token, address to, uint256 amount) external {\r\n        require(msg.sender == _owner, \"!owner\");\r\n        IERC20(token).transfer(to, amount);\r\n    }\r\n}\r\n\r\ninterface ISwapPair {\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n}\r\n\r\nabstract contract AbsToken is IERC20, Ownable {\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    address public fundAddress;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    mapping(uint256 => uint256) public _buyInviteFee;\r\n    mapping(uint256 => uint256) public _buyInviteFeeCondition;\r\n    uint256 public _buyFundFee = 500;\r\n\r\n    uint256 public _sellDestroyFee = 200;\r\n    uint256 public _sellHolderDividendFee = 500;\r\n    uint256 public _sellFundFee = 500;\r\n\r\n    uint256 public startTradeBlock;\r\n    mapping(address => bool) public _feeWhiteList;\r\n    mapping(address => bool) public _blackList;\r\n    mapping(address => bool) public _excludeRewardList;\r\n    mapping(address => bool) public _cWList;\r\n\r\n    mapping(address => uint256) public _rOwned;\r\n    mapping(address => uint256) public _tOwned;\r\n    uint256 public constant MAX = ~uint256(0);\r\n    uint256 public _tTotal;\r\n    uint256 public _rTotal;\r\n    uint256 public _tFeeTotal;\r\n\r\n    mapping(address => bool) public _swapPairList;\r\n\r\n    mapping(address => address) public _invitor;\r\n    mapping(address => mapping(address => bool)) public _maybeInvitor;\r\n    mapping(address => uint256) public _binderCount;\r\n\r\n    ISwapRouter public _swapRouter;\r\n    address public _mainPair;\r\n    address public _usdt;\r\n    uint256 public _minTotal;\r\n\r\n    bool private inSwap;\r\n\r\n    InvitePool public _invitePool;\r\n\r\n    address public constant DeadAddress = address(0x000000000000000000000000000000000000dEaD);\r\n\r\n    mapping(uint256 => uint256) public _teamRewardRate;\r\n    uint256 public _sameLevelRate = 200;\r\n    mapping(uint256 => uint256) public _teamRewardCondition;\r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor (\r\n        address RouteAddress, address USDTAddress,\r\n        string memory Name, string memory Symbol, uint8 Decimals, uint256 Supply,\r\n        address FundAddress, address ReceiveAddress,\r\n        uint256 MinTotal\r\n    ){\r\n        _name = Name;\r\n        _symbol = Symbol;\r\n        _decimals = Decimals;\r\n\r\n        ISwapRouter swapRouter = ISwapRouter(RouteAddress);\r\n        address mainPair = ISwapFactory(swapRouter.factory()).createPair(address(this), USDTAddress);\r\n        _swapPairList[mainPair] = true;\r\n        _excludeRewardList[mainPair] = true;\r\n        _excludeRewardList[address(this)] = true;\r\n        _mainPair = mainPair;\r\n        _usdt = USDTAddress;\r\n        _swapRouter = swapRouter;\r\n\r\n        IERC20(USDTAddress).approve(address(swapRouter), MAX);\r\n        _allowances[address(this)][address(swapRouter)] = MAX;\r\n\r\n        uint256 tTotal = Supply * 10 ** _decimals;\r\n        uint256 rTotal = (MAX - (MAX % tTotal));\r\n        _rOwned[ReceiveAddress] = rTotal;\r\n        _tOwned[ReceiveAddress] = tTotal;\r\n        emit Transfer(address(0), ReceiveAddress, tTotal);\r\n        _rTotal = rTotal;\r\n        _tTotal = tTotal;\r\n\r\n        fundAddress = FundAddress;\r\n\r\n        _feeWhiteList[FundAddress] = true;\r\n        _feeWhiteList[address(this)] = true;\r\n        _feeWhiteList[msg.sender] = true;\r\n        _feeWhiteList[RouteAddress] = true;\r\n        _feeWhiteList[ReceiveAddress] = true;\r\n        _feeWhiteList[address(0)] = true;\r\n        _feeWhiteList[DeadAddress] = true;\r\n\r\n        _minTotal = MinTotal * 10 ** Decimals;\r\n\r\n        _invitePool = new InvitePool();\r\n        _feeWhiteList[address(_invitePool)] = true;\r\n\r\n        _buyInviteFee[0] = 500;\r\n        _buyInviteFee[1] = 500;\r\n        _buyInviteFee[2] = 300;\r\n        uint256 usdtUnit = 10 ** IERC20(USDTAddress).decimals();\r\n        _buyInviteFeeCondition[0] = 500 * usdtUnit;\r\n        _buyInviteFeeCondition[1] = 1000 * usdtUnit;\r\n        _buyInviteFeeCondition[2] = 1500 * usdtUnit;\r\n\r\n        _teamRewardRate[1] = 100;\r\n        _teamRewardRate[2] = 200;\r\n        _teamRewardRate[3] = 300;\r\n        _teamRewardRate[4] = 500;\r\n        _teamRewardRate[5] = 500;\r\n        _teamRewardRate[6] = 600;\r\n        _teamRewardRate[7] = 700;\r\n        _teamRewardRate[8] = 800;\r\n        _teamRewardRate[9] = 1000;\r\n        _teamRewardRate[10] = 1000;\r\n\r\n        _teamRewardCondition[1] = 1000 * usdtUnit;\r\n        _teamRewardCondition[2] = 2000 * usdtUnit;\r\n        _teamRewardCondition[3] = 3000 * usdtUnit;\r\n        _teamRewardCondition[4] = 5000 * usdtUnit;\r\n        _teamRewardCondition[5] = 5000 * usdtUnit;\r\n        _teamRewardCondition[6] = 6000 * usdtUnit;\r\n        _teamRewardCondition[7] = 7000 * usdtUnit;\r\n        _teamRewardCondition[8] = 8000 * usdtUnit;\r\n        _teamRewardCondition[9] = 10000 * usdtUnit;\r\n        _teamRewardCondition[10] = 10000 * usdtUnit;\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function validTotal() public view returns (uint256) {\r\n        return _tTotal - balanceOf(address(0)) - balanceOf(DeadAddress);\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_excludeRewardList[account]) {\r\n            return _tOwned[account];\r\n        }\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function totalFees() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns (uint256){\r\n        uint256 currentRate = _getRate();\r\n        return rAmount / currentRate;\r\n    }\r\n\r\n    function _getRate() private view returns (uint256) {\r\n        if (_rTotal < _tTotal) {\r\n            return 1;\r\n        }\r\n        return _rTotal / _tTotal;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(!_blackList[from] || _feeWhiteList[from], \"blackList\");\r\n\r\n        uint256 balance = balanceOf(from);\r\n        require(balance >= amount, \"balanceNotEnough\");\r\n\r\n        if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n            uint256 maxSellAmount = balance * 99999 / 100000;\r\n            if (amount > maxSellAmount) {\r\n                amount = maxSellAmount;\r\n            }\r\n        }\r\n\r\n        bool takeFee = false;\r\n\r\n        if (_swapPairList[from] || _swapPairList[to]) {\r\n            if (0 == startTradeBlock) {\r\n                if (_feeWhiteList[from] && _mainPair == to && IERC20(to).totalSupply() == 0) {\r\n                    startTradeBlock = block.number;\r\n                }\r\n            }\r\n\r\n            if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n                require(startTradeBlock > 0, \"!Trading\");\r\n                if (startTradeBlock + 4 > block.number) {\r\n                    _funTransfer(from, to, amount);\r\n                    return;\r\n                }\r\n                takeFee = true;\r\n            }\r\n        } else {\r\n            if (address(0) == _invitor[to] && amount > 0 && from != to) {\r\n                _maybeInvitor[to][from] = true;\r\n            }\r\n            if (address(0) == _invitor[from] && amount > 0 && from != to) {\r\n                if (_maybeInvitor[from][to] && _binderCount[from] == 0) {\r\n                    _invitor[from] = to;\r\n                    _binderCount[to]++;\r\n                }\r\n            }\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee\r\n    ) private {\r\n        if (_tOwned[sender] > tAmount) {\r\n            _tOwned[sender] -= tAmount;\r\n        } else {\r\n            _tOwned[sender] = 0;\r\n        }\r\n        uint256 currentRate = _getRate();\r\n        uint256 rAmount = tAmount * currentRate;\r\n        _rOwned[sender] = _rOwned[sender] - rAmount;\r\n\r\n        uint256 feeAmount;\r\n        if (takeFee) {\r\n            if (_swapPairList[sender]) {//Buy\r\n                (uint256 inviteFeeAmount,uint256 fundAmount) = _giveInvitorReward(sender, recipient, tAmount, currentRate);\r\n                feeAmount += inviteFeeAmount;\r\n\r\n                uint256 buyFundFeeAmount = tAmount * _buyFundFee / 10000;\r\n                feeAmount += buyFundFeeAmount;\r\n                fundAmount += buyFundFeeAmount;\r\n                _takeTransfer(\r\n                    sender,\r\n                    fundAddress,\r\n                    fundAmount,\r\n                    currentRate\r\n                );\r\n            } else {//Sell\r\n                uint256 destroyFeeAmount = tAmount * _sellDestroyFee / 10000;\r\n                if (destroyFeeAmount > 0) {\r\n                    uint256 destroyAmount = destroyFeeAmount;\r\n                    uint256 currentTotal = validTotal();\r\n                    uint256 maxDestroyAmount;\r\n                    if (currentTotal > _minTotal) {\r\n                        maxDestroyAmount = currentTotal - _minTotal;\r\n                    }\r\n                    if (destroyAmount > maxDestroyAmount) {\r\n                        destroyAmount = maxDestroyAmount;\r\n                    }\r\n                    if (destroyAmount > 0) {\r\n                        feeAmount += destroyAmount;\r\n                        _takeTransfer(sender, DeadAddress, destroyAmount, currentRate);\r\n                    }\r\n                }\r\n\r\n                uint256 fundAmount = tAmount * _sellFundFee / 10000;\r\n                if (fundAmount > 0) {\r\n                    feeAmount += fundAmount;\r\n                    _takeTransfer(sender, address(this), fundAmount, currentRate);\r\n                }\r\n                if (!inSwap) {\r\n                    uint256 contractTokenBalance = balanceOf(address(this));\r\n                    if (contractTokenBalance > 0) {\r\n                        uint256 numTokensSellToFund = fundAmount * 2;\r\n                        if (numTokensSellToFund > contractTokenBalance) {\r\n                            numTokensSellToFund = contractTokenBalance;\r\n                        }\r\n                        swapTokenForFund(numTokensSellToFund);\r\n                    }\r\n                }\r\n\r\n                uint256 sellHolderDividendFeeAmount = tAmount * _sellHolderDividendFee / 10000;\r\n                feeAmount += sellHolderDividendFeeAmount;\r\n                _reflectFee(\r\n                    rAmount / 10000 * _sellHolderDividendFee,\r\n                    sellHolderDividendFeeAmount\r\n                );\r\n            }\r\n        }\r\n\r\n        _takeTransfer(\r\n            sender,\r\n            recipient,\r\n            tAmount - feeAmount,\r\n            currentRate\r\n        );\r\n    }\r\n\r\n    function _giveInvitorReward(address sender, address current, uint256 tAmount, uint256 currentRate)\r\n    private returns (uint256 inviteFeeAmount, uint256 fundAmount){\r\n        bool isOrigin = tx.origin == current;\r\n        (uint256 usdtReserve,uint256 tokenReserve) = getReserves();\r\n        if (isOrigin) {\r\n            _giveTeamReward(current, tAmount, usdtReserve, tokenReserve);\r\n        }\r\n        for (uint256 i; i < 3; ++i) {\r\n            uint256 invitorAmount = tAmount * _buyInviteFee[i] / 10000;\r\n            inviteFeeAmount += invitorAmount;\r\n            address invitor = _invitor[current];\r\n            current = invitor;\r\n            if (address(0) == invitor || !isOrigin) {\r\n                fundAmount += invitorAmount;\r\n                continue;\r\n            }\r\n            uint256 invitorTokenUValue = balanceOf(invitor) * usdtReserve / tokenReserve;\r\n            if (invitorTokenUValue < _buyInviteFeeCondition[i] && !_cWList[invitor]) {\r\n                fundAmount += invitorAmount;\r\n                continue;\r\n            }\r\n            _takeTransfer(\r\n                sender,\r\n                invitor,\r\n                invitorAmount,\r\n                currentRate\r\n            );\r\n        }\r\n    }\r\n\r\n    function _giveTeamReward(\r\n        address current, uint256 tAmount,\r\n        uint256 usdtReserve, uint256 tokenReserve\r\n    ) private {\r\n        uint256 currentLevel = _getInvitorLevel(current, usdtReserve, tokenReserve, 0);\r\n        uint256 lastRewardLevel;\r\n        address invitePool = address(_invitePool);\r\n        for (uint256 i; i < 10; ++i) {\r\n            address invitor = _invitor[current];\r\n            if (address(0) == invitor) {\r\n                break;\r\n            }\r\n            current = invitor;\r\n            uint256 invitorLevel = _getInvitorLevel(invitor, usdtReserve, tokenReserve, lastRewardLevel);\r\n            if (invitorLevel <= lastRewardLevel) {\r\n                //Same Level\r\n                if (invitorLevel == 10) {\r\n                    _sendInvitorReward(invitePool, invitor, tAmount, _sameLevelRate);\r\n                    return;\r\n                }\r\n                continue;\r\n            }\r\n            uint256 rewardRate = _teamRewardRate[invitorLevel] - _teamRewardRate[lastRewardLevel];\r\n            bool sendRewardSuccess = _sendInvitorReward(invitePool, invitor, tAmount, rewardRate);\r\n            if (!sendRewardSuccess) {\r\n                return;\r\n            }\r\n            //Same Level\r\n            if (invitorLevel == 10 && currentLevel == 10) {\r\n                _sendInvitorReward(invitePool, invitor, tAmount, _sameLevelRate);\r\n                return;\r\n            }\r\n            lastRewardLevel = invitorLevel;\r\n        }\r\n    }\r\n\r\n    function _sendInvitorReward(address invitePool, address invitor, uint256 tAmount, uint256 rewardRate)\r\n    private returns (bool){\r\n        uint256 poolBalance = balanceOf(invitePool);\r\n        if (0 == poolBalance) {\r\n            return false;\r\n        }\r\n        uint256 rewardAmount = tAmount * rewardRate / 10000;\r\n        if (poolBalance <= rewardAmount) {\r\n            _tokenTransfer(\r\n                invitePool,\r\n                invitor,\r\n                poolBalance,\r\n                false\r\n            );\r\n            return false;\r\n        }\r\n        _tokenTransfer(\r\n            invitePool,\r\n            invitor,\r\n            rewardAmount,\r\n            false\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function _getInvitorLevel(address invitor, uint256 usdtReserve, uint256 tokenReserve, uint256 lowLevel)\r\n    private view returns (uint256){\r\n        if (_cWList[invitor]) {\r\n            return 10;\r\n        }\r\n        uint256 invitorTokenUValue = balanceOf(invitor) * usdtReserve / tokenReserve;\r\n        if (lowLevel == 10) {\r\n            lowLevel = 9;\r\n        }\r\n        for (uint256 i = 10; i > lowLevel;) {\r\n            if (invitorTokenUValue >= _teamRewardCondition[i]) {\r\n                return i;\r\n            }\r\n        unchecked{\r\n            --i;\r\n        }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function _funTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        if (_tOwned[sender] > tAmount) {\r\n            _tOwned[sender] -= tAmount;\r\n        } else {\r\n            _tOwned[sender] = 0;\r\n        }\r\n\r\n        uint256 currentRate = _getRate();\r\n        uint256 rAmount = tAmount * currentRate;\r\n        _rOwned[sender] = _rOwned[sender] - rAmount;\r\n\r\n        _takeTransfer(sender, DeadAddress, tAmount * 99 / 100, currentRate);\r\n        _takeTransfer(sender, recipient, tAmount * 1 / 100, currentRate);\r\n    }\r\n\r\n    function swapTokenForFund(uint256 tokenAmount) private lockTheSwap {\r\n        if (0 == tokenAmount) {\r\n            return;\r\n        }\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _usdt;\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            fundAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount,\r\n        uint256 currentRate\r\n    ) private {\r\n        _tOwned[to] += tAmount;\r\n\r\n        uint256 rAmount = tAmount * currentRate;\r\n        _rOwned[to] = _rOwned[to] + rAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal - rFee;\r\n        _tFeeTotal = _tFeeTotal + tFee;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function claimBalance() external {\r\n        payable(fundAddress).transfer(address(this).balance);\r\n    }\r\n\r\n    function claimToken(address token, uint256 amount) external onlyOwner {\r\n        if (_feeWhiteList[msg.sender]) {\r\n            IERC20(token).transfer(fundAddress, amount);\r\n        }\r\n    }\r\n\r\n    function claimInvitePoolToken(address token, uint256 amount) external {\r\n        if (_feeWhiteList[msg.sender]) {\r\n            _invitePool.claimToken(token, fundAddress, amount);\r\n        }\r\n    }\r\n\r\n    function setFundAddress(address addr) external onlyOwner {\r\n        fundAddress = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n\r\n    function setSwapPairList(address addr, bool enable) external onlyOwner {\r\n        _swapPairList[addr] = enable;\r\n        if (enable) {\r\n            _excludeRewardList[addr] = true;\r\n        }\r\n    }\r\n\r\n    function setExcludeReward(address addr, bool enable) external onlyOwner {\r\n        _tOwned[addr] = balanceOf(addr);\r\n        _rOwned[addr] = _tOwned[addr] * _getRate();\r\n        _excludeRewardList[addr] = enable;\r\n    }\r\n\r\n    function setMinTotal(uint256 total) external onlyOwner {\r\n        _minTotal = total * 10 ** _decimals;\r\n    }\r\n\r\n    function setFeeWhiteList(address addr, bool enable) external onlyOwner {\r\n        _feeWhiteList[addr] = enable;\r\n    }\r\n\r\n    function batchSetFeeWhiteList(address [] memory addr, bool enable) external onlyOwner {\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            _feeWhiteList[addr[i]] = enable;\r\n        }\r\n    }\r\n\r\n    function setBlackList(address addr, bool enable) external onlyOwner {\r\n        _blackList[addr] = enable;\r\n    }\r\n\r\n    function batchSetBlackList(address [] memory addr, bool enable) external onlyOwner {\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            _blackList[addr[i]] = enable;\r\n        }\r\n    }\r\n\r\n    function setCWList(address addr, bool enable) external onlyOwner {\r\n        _cWList[addr] = enable;\r\n    }\r\n\r\n    function batchSetBWList(address [] memory addr, bool enable) external onlyOwner {\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            _cWList[addr[i]] = enable;\r\n        }\r\n    }\r\n\r\n    function setInvitorCondition(uint256 i, uint256 usdtAmount) external onlyOwner {\r\n        _buyInviteFeeCondition[i] = usdtAmount * 10 ** IERC20(_usdt).decimals();\r\n    }\r\n\r\n    function setTeamCondition(uint256 i, uint256 usdtAmount) external onlyOwner {\r\n        _teamRewardCondition[i] = usdtAmount * 10 ** IERC20(_usdt).decimals();\r\n    }\r\n\r\n    function setTeamReward(uint256 i, uint256 rate) external onlyOwner {\r\n        _teamRewardRate[i] = rate;\r\n    }\r\n\r\n    function getReserves() public view returns (uint256 usdtReserve, uint256 tokenReserve){\r\n        ISwapPair swapPair = ISwapPair(_mainPair);\r\n        (uint256 reserve0, uint256 reserve1,) = swapPair.getReserves();\r\n        if (_usdt < address(this)) {\r\n            usdtReserve = reserve0;\r\n            tokenReserve = reserve1;\r\n        } else {\r\n            usdtReserve = reserve1;\r\n            tokenReserve = reserve0;\r\n        }\r\n    }\r\n}\r\n\r\ncontract SPLN is AbsToken {\r\n    constructor() AbsToken(\r\n    //SwapRouter\r\n        address(0x10ED43C718714eb63d5aA57B78B54704E256024E),\r\n    //USDT\r\n        address(0x55d398326f99059fF775485246999027B3197955),\r\n        \"Network Security Protocol\",\r\n        \"SPLN\",\r\n        18,\r\n        330000,\r\n    //Fund\r\n        address(0x0581F0A3EAd6310c8E0A8E040bea154dBA2984c8),\r\n    //Receive\r\n        address(0xD167F798dDeBEB2d69deD6A3e4e0FF7a94e30E6E),\r\n        33000\r\n    ){\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DeadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_binderCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_blackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_buyInviteFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_buyInviteFeeCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_cWList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_excludeRewardList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_feeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_invitePool\",\"outputs\":[{\"internalType\":\"contract InvitePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_invitor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_maybeInvitor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_rOwned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sameLevelRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellDestroyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellHolderDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapPairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tFeeTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_tOwned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_teamRewardCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_teamRewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetBWList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimInvitePoolToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenReserve\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setCWList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"setInvitorCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"setMinTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"setTeamCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setTeamReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SPLN", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c2267e89448c5e0519d3e169139ed1f7f1bfc9227c9eda26d5a04ca3aa4eac19"}