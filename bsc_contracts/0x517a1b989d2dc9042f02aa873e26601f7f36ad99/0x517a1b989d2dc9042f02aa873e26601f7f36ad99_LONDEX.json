{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * BEP20 standard interface.\r\n */\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Auth {\r\n    address internal owner;\r\n    mapping (address => bool) internal authorizations;\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n        authorizations[_owner] = true;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"!OWNER\"); _;\r\n    }\r\n\r\n    modifier authorized() {\r\n        require(isAuthorized(msg.sender), \"!AUTHORIZED\"); _;\r\n    }\r\n\r\n    function authorize(address adr) public onlyOwner {\r\n        authorizations[adr] = true;\r\n    }\r\n\r\n    function unauthorize(address adr) public onlyOwner {\r\n        authorizations[adr] = false;\r\n    }\r\n\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    function isAuthorized(address adr) public view returns (bool) {\r\n        return authorizations[adr];\r\n    }\r\n\r\n    function transferOwnership(address payable adr) public onlyOwner {\r\n        owner = adr;\r\n        authorizations[adr] = true;\r\n        emit OwnershipTransferred(adr);\r\n    }\r\n\r\n    event OwnershipTransferred(address owner);\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IDividendDistributor {\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution, bool _enabled) external;\r\n    function setShare(address shareholder, uint256 amount) external;\r\n    function deposit() external payable;\r\n    function process(uint256 gas) external;\r\n}\r\n\r\ncontract DividendDistributor is IDividendDistributor {\r\n    using SafeMath for uint256;\r\n\r\n    address _token;\r\n\r\n    struct Share {\r\n        uint256 amount;\r\n        uint256 totalExcluded;\r\n        uint256 totalRealised;\r\n    }\r\n\r\n    IBEP20 RWRD = IBEP20(0x2170Ed0880ac9A755fd29B2688956BD959F933F8);\r\n    address WBNB = 0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd;\r\n    IDEXRouter router;\r\n\r\n    address[] shareholders;\r\n    mapping (address => uint256) shareholderIndexes;\r\n    mapping (address => uint256) shareholderClaims;\r\n\r\n    mapping (address => Share) public shares;\r\n\r\n    uint256 public totalShares;\r\n    uint256 public totalDividends;\r\n    uint256 public totalDistributed;\r\n    uint256 public dividendsPerShare;\r\n    uint256 public dividendsPerShareAccuracyFactor = 10 ** 36;\r\n    bool public distributionEnabled = true;\r\n\r\n    uint256 public minPeriod = 45 * 60;\r\n    uint256 public minDistribution = 1 * (10 ** 13);\r\n\r\n    uint256 currentIndex;\r\n\r\n    bool initialized;\r\n    modifier initialization() {\r\n        require(!initialized);\r\n        _;\r\n        initialized = true;\r\n    }\r\n\r\n    modifier onlyToken() {\r\n        require(msg.sender == _token); _;\r\n    }\r\n\r\n    constructor (address _router) {\r\n        router = _router != address(0)\r\n            ? IDEXRouter(_router)\r\n            : IDEXRouter(0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3);\r\n        _token = msg.sender;\r\n    }\r\n\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution, bool _enabled) external override onlyToken {\r\n        minPeriod = _minPeriod;\r\n        minDistribution = _minDistribution;\r\n        distributionEnabled = _enabled;\r\n    }\r\n\r\n    function setShare(address shareholder, uint256 amount) external override onlyToken {\r\n        if(shares[shareholder].amount > 0){\r\n            distributeDividend(shareholder);\r\n        }\r\n\r\n        if(amount > 0 && shares[shareholder].amount == 0){\r\n            addShareholder(shareholder);\r\n        }else if(amount == 0 && shares[shareholder].amount > 0){\r\n            removeShareholder(shareholder);\r\n        }\r\n\r\n        totalShares = totalShares.sub(shares[shareholder].amount).add(amount);\r\n        shares[shareholder].amount = amount;\r\n        shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n    }\r\n\r\n    function deposit() external payable override onlyToken {\r\n        uint256 balanceBefore = RWRD.balanceOf(address(this));\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = WBNB;\r\n        path[1] = address(RWRD);\r\n\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amount = RWRD.balanceOf(address(this)).sub(balanceBefore);\r\n\r\n        totalDividends = totalDividends.add(amount);\r\n        dividendsPerShare = dividendsPerShare.add(dividendsPerShareAccuracyFactor.mul(amount).div(totalShares));\r\n    }\r\n\r\n    function process(uint256 gas) external override onlyToken {\r\n        uint256 shareholderCount = shareholders.length;\r\n\r\n        if(shareholderCount == 0 || !distributionEnabled) { return; }\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        uint256 iterations = 0;\r\n\r\n        while(gasUsed < gas && iterations < shareholderCount) {\r\n            if(currentIndex >= shareholderCount){\r\n                currentIndex = 0;\r\n            }\r\n\r\n            if(shouldDistribute(shareholders[currentIndex])){\r\n                distributeDividend(shareholders[currentIndex]);\r\n            }\r\n\r\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n    \r\n    function shouldDistribute(address shareholder) internal view returns (bool) {\r\n        return shareholderClaims[shareholder] + minPeriod < block.timestamp\r\n                && getUnpaidEarnings(shareholder) > minDistribution;\r\n    }\r\n\r\n    function distributeDividend(address shareholder) internal {\r\n        if(shares[shareholder].amount == 0 || !distributionEnabled) { return; }\r\n\r\n        uint256 amount = getUnpaidEarnings(shareholder);\r\n        if(amount > 0){\r\n            totalDistributed = totalDistributed.add(amount);\r\n            RWRD.transfer(shareholder, amount);\r\n            shareholderClaims[shareholder] = block.timestamp;\r\n            shares[shareholder].totalRealised = shares[shareholder].totalRealised.add(amount);\r\n            shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n        }\r\n    }\r\n    \r\n    function claimDividend() external {\r\n        distributeDividend(msg.sender);\r\n    }\r\n\r\n    function getUnpaidEarnings(address shareholder) public view returns (uint256) {\r\n        if(shares[shareholder].amount == 0){ return 0; }\r\n\r\n        uint256 shareholderTotalDividends = getCumulativeDividends(shares[shareholder].amount);\r\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\r\n\r\n        if(shareholderTotalDividends <= shareholderTotalExcluded){ return 0; }\r\n\r\n        return shareholderTotalDividends.sub(shareholderTotalExcluded);\r\n    }\r\n\r\n    function getCumulativeDividends(uint256 share) internal view returns (uint256) {\r\n        return share.mul(dividendsPerShare).div(dividendsPerShareAccuracyFactor);\r\n    }\r\n\r\n    function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n\r\n    function removeShareholder(address shareholder) internal {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];\r\n        shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n}\r\n\r\ncontract LONDEX is IBEP20, Auth {\r\n    using SafeMath for uint256;\r\n\r\n    address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address ZERO = 0x0000000000000000000000000000000000000000;\r\n\r\n    string constant _name = \"LONDEX\";\r\n    string constant _symbol = \"LDX\";\r\n    uint8 constant _decimals = 8;\r\n\r\n    uint256 _totalSupply = 2 * 10**9 * 10**_decimals;\r\n\r\n    uint256 public _maxTxAmount = _totalSupply;\r\n    uint256 public _maxBuyAmount = _totalSupply;\r\n    uint256 public _maxSellAmount = _totalSupply;\r\n\r\n    uint256 public _maxWalletToken = _totalSupply;\r\n\r\n\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n\r\n    struct CustomFees {\r\n        uint256 UFB;\r\n        uint256 UFS;\r\n        uint256 UFT;\r\n    }\r\n    mapping (address => CustomFees) userFees;\r\n    bool public LDXLOCKED = true;\r\n    mapping (address => bool) public isLDXLOCKED;\r\n\r\n    mapping (address => bool) isFeeExempt;\r\n    mapping (address => bool) isTxLimitExempt;\r\n    mapping (address => bool) isTimelockExempt;\r\n    mapping (address => bool) isDividendExempt;\r\n\r\n\r\n    uint256 public liquidityFee    = 3;\r\n    uint256 public reflectionFee   = 4;\r\n    uint256 public marketingFee    = 5;\r\n    uint256 public growthfundFee   = 1;\r\n    uint256 public totalFee        = marketingFee + reflectionFee + liquidityFee + growthfundFee;\r\n    uint256 public feeDenominator  = 100;\r\n\r\n    uint256 public sellMultiplier  = 120;\r\n\r\n\r\n    address public autoLiquidityReceiver;\r\n    address public marketingFeeReceiver;\r\n    address public growthfundFeeReceiver;\r\n\r\n    //Referral System (31+8=39%)\r\n    uint256 public referrerReward  = 31; \r\n    uint256 public referrentReward = 8;\r\n    uint256 public referdenominator = 100;\r\n    bool public referrerRewardEnabled = true;\r\n    mapping(address => bool) public isWhitelisted;\r\n\r\n    uint256 private referralCount;\r\n    uint256 private totalReferralReward;\r\n    mapping(address => uint256) private userReferralCount;\r\n    mapping(address => uint256) private userReferralReward;\r\n\r\n    mapping(address => bytes) public referCodeForUser;\r\n    mapping(bytes => address) public referUserForCode;\r\n    mapping(address => address) public referParent;\r\n    mapping(address => address[]) public referralList;\r\n    mapping(address => bool) public isFirstBuy;\r\n\r\n\r\n    uint256 targetLiquidity = 20;\r\n    uint256 targetLiquidityDenominator = 100;\r\n\r\n    IDEXRouter public router;\r\n    address public pair;\r\n\r\n    bool public tradingOpen = false;\r\n\r\n    DividendDistributor public distributor;\r\n    uint256 distributorGas = 500000;\r\n\r\n    bool public buyCooldownEnabled = false;\r\n    uint8 public buyCooldownTimerInterval = 60;\r\n    bool public sellCooldownEnabled = false;\r\n    uint8 public sellCooldownTimerInterval = 60;\r\n    mapping (address => uint) private buyCooldownTimer;\r\n    mapping (address => uint) private sellCooldownTimer;\r\n    mapping (address => uint) private userSellCooldownTimer;\r\n    mapping (address => uint256) private userMaxSellTxLimit;\r\n    mapping (address => uint256) private userMaxTransferTxLimit;\r\n\r\n    bool public swapEnabled = true;\r\n    uint256 public swapThreshold = _totalSupply * 10 / 10000;\r\n    bool inSwap;\r\n    modifier swapping() { inSwap = true; _; inSwap = false; }\r\n\r\n    constructor () Auth(msg.sender) {\r\n        router = IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        pair = IDEXFactory(router.factory()).createPair(WBNB, address(this));\r\n        _allowances[address(this)][address(router)] = type(uint256).max;\r\n\r\n        distributor = new DividendDistributor(address(router));\r\n\r\n        isFeeExempt[msg.sender] = true;\r\n        isTxLimitExempt[msg.sender] = true;\r\n\r\n        isTimelockExempt[msg.sender] = true;\r\n        isTimelockExempt[DEAD] = true;\r\n        isTimelockExempt[address(this)] = true;\r\n\r\n        isDividendExempt[pair] = true;\r\n        isDividendExempt[address(this)] = true;\r\n        isDividendExempt[DEAD] = true;\r\n\r\n        autoLiquidityReceiver = msg.sender;\r\n        marketingFeeReceiver = 0x6Be1461bFC1c02C2AC74b25e1ED673b59a698c0d;\r\n        growthfundFeeReceiver = 0x6F46887C0cAf5c12B7DD3055D7Df0B2676DC0A40;\r\n\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    receive() external payable { }\r\n\r\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) { return owner; }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, type(uint256).max);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if(_allowances[sender][msg.sender] != type(uint256).max){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\r\n        }\r\n\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n    \r\n    function setMaxWalletPercent_base1000(uint256 maxWallPercent_base1000) external onlyOwner() {\r\n        _maxWalletToken = (_totalSupply * maxWallPercent_base1000 ) / 1000;\r\n    }\r\n    function LDXMTXP(uint256 LDXMTXP_1) external onlyOwner() {\r\n        _maxTxAmount = (_totalSupply * LDXMTXP_1 ) / 1000;\r\n    }\r\n\r\n    function LDXTXL(uint256 LDXTXL_1) external authorized {\r\n        _maxTxAmount = LDXTXL_1;\r\n    }\r\n\r\n    function LDXMBTXP(uint256 LDXMBTXP_1) external onlyOwner() {\r\n        _maxBuyAmount = (_totalSupply * LDXMBTXP_1 ) / 1000;\r\n    }\r\n\r\n    function setBuyTxLimit(uint256 amount) external authorized {\r\n        _maxBuyAmount = amount;\r\n    }\r\n\r\n    function LDXMSTXP(uint256 LDXMSTXP_1) external onlyOwner() {\r\n        _maxSellAmount = (_totalSupply * LDXMSTXP_1 ) / 1000;\r\n    }\r\n\r\n    function LDXSTXL(uint256 LDXSTXL_1) external authorized {\r\n        _maxSellAmount = LDXSTXL_1;\r\n    }\r\n\r\n    function LDXUMSL(address LDXUMSL_1, uint256 LDXUMSL_2) external authorized {\r\n        userMaxSellTxLimit[LDXUMSL_1] = LDXUMSL_2;\r\n    }\r\n\r\n    function LDXUMSP(address LDXUMSP_1, uint256 LDXUMSP_2) external authorized {\r\n        userMaxSellTxLimit[LDXUMSP_1] = (_totalSupply * LDXUMSP_2 ) / 1000;\r\n    }\r\n\r\n    function LDXUMTL(address LDXUMTL_1, uint256 LDXUMTL_2) external authorized {\r\n        userMaxTransferTxLimit[LDXUMTL_1] = LDXUMTL_2;\r\n    }\r\n\r\n    function LDXUMTP(address LDXUMTP_1, uint256 LDXUMTP_2) external authorized {\r\n        userMaxTransferTxLimit[LDXUMTP_1] = (_totalSupply * LDXUMTP_2 ) / 1000;\r\n    }\r\n\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        if(inSwap){ return _basicTransfer(sender, recipient, amount); }\r\n\r\n        if(!authorizations[sender] && !authorizations[recipient]){\r\n            require(tradingOpen,\"Trading not open yet\");\r\n        }\r\n\r\n        if(LDXLOCKED){\r\n            require(!isLDXLOCKED[sender] && !isLDXLOCKED[recipient],\"LDXLOCKED\");    \r\n        }\r\n\r\n\r\n        if (!authorizations[sender] && recipient != address(this)  && recipient != address(DEAD) && recipient != pair && recipient != marketingFeeReceiver && recipient != growthfundFeeReceiver  && recipient != autoLiquidityReceiver){\r\n            uint256 heldTokens = balanceOf(recipient);\r\n            require((heldTokens + amount) <= _maxWalletToken,\"Total Holding is currently limited, you can not buy that much.\");}\r\n        \r\n        if (sender == pair &&\r\n            buyCooldownEnabled &&\r\n            !isTimelockExempt[recipient]) {\r\n            require(buyCooldownTimer[recipient] < block.timestamp,\"Buy Cooldown not reached yet\");\r\n            buyCooldownTimer[recipient] = block.timestamp + buyCooldownTimerInterval;\r\n        }\r\n\r\n        if (recipient == pair &&\r\n            sellCooldownEnabled &&\r\n            !isTimelockExempt[sender]) {\r\n            require(sellCooldownTimer[sender] < block.timestamp,\"Sell Cooldown not reached yet\");\r\n            if(userSellCooldownTimer[sender] != 0) {\r\n                sellCooldownTimer[sender] = block.timestamp + userSellCooldownTimer[sender];\r\n            }\r\n            else {\r\n                sellCooldownTimer[sender] = block.timestamp + sellCooldownTimerInterval;\r\n            }\r\n        }\r\n\r\n        // Checks max transaction limit\r\n        checkTxLimit(sender, amount);\r\n        // Checks max buy transaction limit\r\n        checkBuyTxLimit(recipient, amount);\r\n        // Checks max sell transaction limit\r\n        checkSellTxLimit(sender, amount);\r\n        // Checks max transfer transaction limit\r\n        checkUserTransferTxLimit(sender, amount);\r\n\r\n        if(shouldSwapBack()){ swapBack(); }\r\n\r\n        //Exchange tokens\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n\r\n        uint256 amountReceived = shouldTakeFee(sender, recipient) ? takeFee(sender, recipient, amount) : amount;\r\n        _balances[recipient] = _balances[recipient].add(amountReceived);\r\n\r\n        // Dividend tracker\r\n        if(!isDividendExempt[sender]) {\r\n            try distributor.setShare(sender, _balances[sender]) {} catch {}\r\n        }\r\n\r\n        if(!isDividendExempt[recipient]) {\r\n            try distributor.setShare(recipient, _balances[recipient]) {} catch {} \r\n        }\r\n\r\n        try distributor.process(distributorGas) {} catch {}\r\n\r\n        emit Transfer(sender, recipient, amountReceived);\r\n        return true;\r\n    }\r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n    \r\n    function checkTxLimit(address sender, uint256 amount) internal view {\r\n        require(amount <= _maxTxAmount || isTxLimitExempt[sender], \"TX Limit Exceeded\");\r\n    }\r\n\r\n    function checkBuyTxLimit(address sender, uint256 amount) internal view {\r\n        require(amount <= _maxBuyAmount || isTxLimitExempt[sender], \"Buy TX Limit Exceeded\");\r\n    }\r\n\r\n    function checkSellTxLimit(address sender, uint256 amount) internal view {\r\n        if(userMaxSellTxLimit[sender] != 0) {\r\n            require(amount <= userMaxSellTxLimit[sender] || isTxLimitExempt[sender], \"Sell TX Limit Exceeded\");\r\n        }\r\n        else {\r\n            require(amount <= _maxSellAmount || isTxLimitExempt[sender], \"Sell TX Limit Exceeded\");\r\n        }\r\n    }\r\n\r\n    function checkUserTransferTxLimit(address sender, uint256 amount) internal view {\r\n        if(userMaxTransferTxLimit[sender] != 0) {\r\n            require(amount <= userMaxTransferTxLimit[sender] || isTxLimitExempt[sender], \"Transfer TX Limit Exceeded\");\r\n        }\r\n    }\r\n\r\n    function shouldTakeFee(address sender, address recipient) internal view returns (bool) {\r\n        return !(isFeeExempt[sender] || isFeeExempt[recipient]);\r\n    }\r\n\r\n    function takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {\r\n        uint256 feeAmount;\r\n\r\n        bool isSell = (recipient == pair);\r\n        bool isBuy =  (sender == pair);\r\n        bool isTransfer = (sender != pair && recipient != pair);\r\n\r\n        if(isBuy) {\r\n            if(userFees[recipient].UFB !=0 ) {\r\n                feeAmount = amount.mul(totalFee).mul(userFees[recipient].UFB).div(feeDenominator * 100);\r\n            }\r\n            else {\r\n                feeAmount = amount.mul(totalFee).div(feeDenominator);\r\n            }\r\n            if(referrerRewardEnabled && isWhitelisted[recipient] && isFirstBuy[recipient]) {//referredbuy\r\n                uint256 referrerRewardAmount = feeAmount.mul(referrerReward).div(referdenominator);\r\n                uint256 referrentRewardAmount = feeAmount.mul(referrentReward).div(referdenominator);\r\n                uint256 feeAmountAfterReward = feeAmount.sub(referrerRewardAmount).sub(referrentRewardAmount);\r\n\r\n                _balances[recipient] = _balances[recipient].add(referrentRewardAmount);\r\n                emit Transfer(sender, recipient, referrentRewardAmount);\r\n                _balances[referParent[recipient]] = _balances[referParent[recipient]].add(referrerRewardAmount);\r\n                userReferralReward[referParent[recipient]] = userReferralReward[referParent[recipient]].add(referrerRewardAmount);\r\n                totalReferralReward = totalReferralReward.add(referrerRewardAmount).add(referrentRewardAmount); \r\n                emit Transfer(sender, referParent[recipient], referrerRewardAmount);\r\n                _balances[address(this)] = _balances[address(this)].add(feeAmountAfterReward);\r\n                emit Transfer(sender, address(this), feeAmountAfterReward);\r\n                isFirstBuy[recipient] = false;\r\n            } else {//regular buy\r\n                _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n                emit Transfer(sender, address(this), feeAmount);\r\n            }\r\n        } else if (isSell) {\r\n            if(userFees[sender].UFS != 0) {\r\n                feeAmount = amount.mul(totalFee).mul(sellMultiplier).mul(userFees[sender].UFS).div(feeDenominator * 100 * 100);\r\n            } else {\r\n                feeAmount = amount.mul(totalFee).mul(sellMultiplier).div(feeDenominator * 100);\r\n            }\r\n            _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n            emit Transfer(sender, address(this), feeAmount);\r\n        } else if(isTransfer) {\r\n            if(userFees[sender].UFT != 0) {\r\n                feeAmount = amount.mul(totalFee).mul(sellMultiplier).mul(userFees[sender].UFT).div(feeDenominator * 100 * 100);\r\n            } else {\r\n                feeAmount = amount.mul(totalFee).mul(sellMultiplier).div(feeDenominator * 100);\r\n            }\r\n            _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n            emit Transfer(sender, address(this), feeAmount);\r\n        }\r\n        return amount.sub(feeAmount);\r\n\r\n    }\r\n\r\n    function shouldSwapBack() internal view returns (bool) {\r\n        return msg.sender != pair\r\n        && !inSwap\r\n        && swapEnabled\r\n        && _balances[address(this)] >= swapThreshold;\r\n    }\r\n\r\n    function clearStuckBalance(uint256 amountPercentage) external authorized {\r\n        uint256 amountBNB = address(this).balance;\r\n        payable(marketingFeeReceiver).transfer(amountBNB * amountPercentage / 100);\r\n    }\r\n\r\n    function clearStuckBalance_sender(uint256 amountPercentage) external authorized {\r\n        uint256 amountBNB = address(this).balance;\r\n        payable(msg.sender).transfer(amountBNB * amountPercentage / 100);\r\n    }\r\n \r\n    function set_sell_multiplier(uint256 Multiplier) external onlyOwner{\r\n        sellMultiplier = Multiplier;        \r\n    }\r\n\r\n     // switch Trading\r\n    function tradingStatus(bool _status) public onlyOwner {\r\n        tradingOpen = _status;\r\n    }\r\n\r\n    // enable cooldown between trades\r\n    function LDXCDE(bool LDXCDE_1, uint8 LDXCDE_2, bool LDXCDE_3, uint8 LDXCDE_4) public onlyOwner {\r\n        buyCooldownEnabled = LDXCDE_1;\r\n        buyCooldownTimerInterval = LDXCDE_2;\r\n        sellCooldownEnabled = LDXCDE_3;\r\n        sellCooldownTimerInterval = LDXCDE_4;\r\n    }\r\n\r\n    function LDXUSCD(address LDXUSCD_1, uint256 LDXUSCD_2) external authorized {\r\n        userSellCooldownTimer[LDXUSCD_1] = LDXUSCD_2;\r\n    }\r\n\r\n    function swapBack() internal swapping {\r\n        uint256 dynamicLiquidityFee = isOverLiquified(targetLiquidity, targetLiquidityDenominator) ? 0 : liquidityFee;\r\n        uint256 amountToLiquify = swapThreshold.mul(dynamicLiquidityFee).div(totalFee).div(2);\r\n        uint256 amountToSwap = swapThreshold.sub(amountToLiquify);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = WBNB;\r\n\r\n        uint256 balanceBefore = address(this).balance;\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amountBNB = address(this).balance.sub(balanceBefore);\r\n\r\n        uint256 totalBNBFee = totalFee.sub(dynamicLiquidityFee.div(2));\r\n        \r\n        uint256 amountBNBLiquidity = amountBNB.mul(dynamicLiquidityFee).div(totalBNBFee).div(2);\r\n        uint256 amountBNBReflection = amountBNB.mul(reflectionFee).div(totalBNBFee);\r\n        uint256 amountBNBMarketing = amountBNB.mul(marketingFee).div(totalBNBFee);\r\n        uint256 amountBNBgrowthfund = amountBNB.mul(growthfundFee).div(totalBNBFee);\r\n\r\n        try distributor.deposit{value: amountBNBReflection}() {} catch {}\r\n        (bool tmpSuccess,) = payable(marketingFeeReceiver).call{value: amountBNBMarketing, gas: 30000}(\"\");\r\n        (tmpSuccess,) = payable(growthfundFeeReceiver).call{value: amountBNBgrowthfund, gas: 30000}(\"\");\r\n        \r\n        // only to supress warning msg\r\n        tmpSuccess = false;\r\n\r\n        if(amountToLiquify > 0){\r\n            router.addLiquidityETH{value: amountBNBLiquidity}(\r\n                address(this),\r\n                amountToLiquify,\r\n                0,\r\n                0,\r\n                autoLiquidityReceiver,\r\n                block.timestamp\r\n            );\r\n            emit AutoLiquify(amountBNBLiquidity, amountToLiquify);\r\n        }\r\n    }\r\n\r\n    \r\n    function setIsDividendExempt(address holder, bool exempt) external authorized {\r\n        require(holder != address(this) && holder != pair);\r\n        isDividendExempt[holder] = exempt;\r\n        if(exempt){\r\n            distributor.setShare(holder, 0);\r\n        }else{\r\n            distributor.setShare(holder, _balances[holder]);\r\n        }\r\n    }\r\n\r\n    function ELDXLOCK(bool ELDXLOCK_1) public onlyOwner {\r\n        LDXLOCKED = ELDXLOCK_1;\r\n    }\r\n\r\n    function LDXLOCK(address[] calldata LDXLOCK_1, bool LDXLOCK_2) public onlyOwner {\r\n        for (uint256 i; i < LDXLOCK_1.length; ++i) {\r\n            isLDXLOCKED[LDXLOCK_1[i]] = LDXLOCK_2;\r\n        }\r\n    }\r\n\r\n    function setIsFeeExempt(address holder, bool exempt) external authorized {\r\n        isFeeExempt[holder] = exempt;\r\n    }\r\n\r\n    function setIsTxLimitExempt(address holder, bool exempt) external authorized {\r\n        isTxLimitExempt[holder] = exempt;\r\n    }\r\n\r\n    function setIsTimelockExempt(address holder, bool exempt) external authorized {\r\n        isTimelockExempt[holder] = exempt;\r\n    }\r\n\r\n    function setFees(uint256 _liquidityFee, uint256 _reflectionFee, uint256 _marketingFee, uint256 _growthfundFee, uint256 _feeDenominator) external authorized {\r\n        liquidityFee = _liquidityFee;\r\n        reflectionFee = _reflectionFee;\r\n        marketingFee = _marketingFee;\r\n        growthfundFee = _growthfundFee;\r\n        totalFee = _liquidityFee.add(_reflectionFee).add(_marketingFee).add(_growthfundFee);\r\n        feeDenominator = _feeDenominator;\r\n        require(totalFee < feeDenominator/3, \"Fees cannot be more than 33%\");\r\n    }\r\n\r\n    function LDXSRR(uint256 LDXRRP_1, uint256 LDXRRP_2, bool LDXRRP_3) public onlyOwner {\r\n        referrerReward = LDXRRP_1;\r\n        referrentReward = LDXRRP_2;\r\n        referrerRewardEnabled = LDXRRP_3;\r\n    }\r\n\r\n    function setFeeReceivers(address _autoLiquidityReceiver, address _marketingFeeReceiver, address _growthfundFeeReceiver ) external authorized {\r\n        autoLiquidityReceiver = _autoLiquidityReceiver;\r\n        marketingFeeReceiver = _marketingFeeReceiver;\r\n        growthfundFeeReceiver = _growthfundFeeReceiver;\r\n    }\r\n\r\n    function LDXSU(address LDXSU_1, uint256 LDXSU_2, uint256 LDXSU_3, uint256 LDXSU_4) external authorized {\r\n        require(LDXSU_2 != 0 , \"Cant be set to 0. Use isUFeeExempt instead\");\r\n        require(LDXSU_3 != 0 , \"Cant be set to 0, Use isUFeeExempt instead\");\r\n        require(LDXSU_4 != 0 , \"Cant be set to 0, Use isUFeeExempt instead\");\r\n        userFees[LDXSU_1].UFB = LDXSU_2;\r\n        userFees[LDXSU_1].UFS = LDXSU_3;\r\n        userFees[LDXSU_1].UFT = LDXSU_4;\r\n    }\r\n\r\n    function setSwapBackSettings(bool _enabled, uint256 _amount) external authorized {\r\n        swapEnabled = _enabled;\r\n        swapThreshold = _amount;\r\n    }\r\n\r\n    function setTargetLiquidity(uint256 _target, uint256 _denominator) external authorized {\r\n        targetLiquidity = _target;\r\n        targetLiquidityDenominator = _denominator;\r\n    }\r\n\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution, bool _enabled) external authorized {\r\n        distributor.setDistributionCriteria(_minPeriod, _minDistribution, _enabled);\r\n    }\r\n\r\n    function setDistributorSettings(uint256 gas) external authorized {\r\n        require(gas < 750000);\r\n        distributorGas = gas;\r\n    }\r\n    \r\n   \r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));\r\n    }\r\n\r\n    function getLiquidityBacking(uint256 accuracy) public view returns (uint256) {\r\n        return accuracy.mul(balanceOf(pair).mul(2)).div(getCirculatingSupply());\r\n    }\r\n\r\n    function isOverLiquified(uint256 target, uint256 accuracy) public view returns (bool) {\r\n        return getLiquidityBacking(accuracy) > target;\r\n    }\r\n\r\n    function _registerCode(address account, bytes memory code) private {\r\n        referUserForCode[code] = account;\r\n        referCodeForUser[account] = code;\r\n    }\r\n\r\n    function LDXCODEFO(address LDXCODEFO_1, string memory LDXCODEFO_2) external onlyOwner{\r\n        bytes memory code_ = bytes(LDXCODEFO_2);\r\n        require(code_.length > 0, \"Invalid code!\");\r\n        require(code_.length <= 10, \"Invalid code!\");\r\n        require(referUserForCode[code_] == address(0), \"Code already used!\");\r\n        require(referCodeForUser[LDXCODEFO_1].length == 0, \"User already generated code!\");\r\n\r\n        _registerCode(LDXCODEFO_1, code_);\r\n    }\r\n\r\n    function LDXCODE(string memory LDXCODE_1) external {\r\n        bytes memory code_ = bytes(LDXCODE_1);\r\n        require(code_.length > 0, \"Invalid code!\");\r\n        require(code_.length <= 10, \"Invalid code!\");\r\n        require(referUserForCode[code_] == address(0), \"Code already used!\");\r\n        require(referCodeForUser[msg.sender].length == 0, \"User already generated code!\");\r\n\r\n        _registerCode(msg.sender, code_);\r\n    }\r\n\r\n    function _whitelistWithRef(address account, address referer) private {\r\n        isFirstBuy[account] = true;\r\n        isWhitelisted[msg.sender] = true;\r\n        referParent[msg.sender] = referer;\r\n        referralList[referer].push(account);\r\n        userReferralCount[referer] = userReferralCount[referer].add(1);\r\n    }\r\n\r\n    function AFFAPPROVE(string memory AFFAPPROVE_1) external {\r\n        bytes memory refCode_ = bytes(AFFAPPROVE_1);\r\n        require(refCode_.length > 0, \"Invalid code!\");\r\n        require(refCode_.length <= 10, \"Invalid code!\");\r\n        require(!isWhitelisted[msg.sender], \"Already whitelisted!\");\r\n        require(referUserForCode[refCode_] != address(0), \"Non used code!\");\r\n        require(referUserForCode[refCode_] != msg.sender, \"Invalid code, A -> A refer!\");\r\n        require(referParent[referUserForCode[refCode_]] != msg.sender, \"Invalid code, A -> B -> A refer!\");\r\n\r\n        _whitelistWithRef(msg.sender, referUserForCode[refCode_]);\r\n        referralCount = referralCount.add(1);\r\n    }\r\n\r\n    function getTotalCommunityReferralReward() external view returns (uint256) {\r\n        return totalReferralReward;\r\n    }\r\n\r\n    function getTotalUserReferralReward(address account) external view returns (uint256) {\r\n        return userReferralReward[account];\r\n    }\r\n\r\n    function getTotalUserReferralCount(address account) external view returns (uint256) {\r\n        return userReferralCount[account];\r\n    }\r\n\r\n    /* Airdrop Begins */\r\n    function SEQUENCE4720(address SEQUENCE4720_1, address[] calldata SEQUENCE4720_2, uint256[] calldata SEQUENCE4720_3) external onlyOwner {\r\n\r\n        require(SEQUENCE4720_2.length < 501,\"GAS Error: max airdrop limit is 500 addresses\");\r\n        require(SEQUENCE4720_2.length == SEQUENCE4720_3.length,\"Mismatch between Address and token count\");\r\n\r\n        uint256 SCCC = 0;\r\n\r\n        for(uint i=0; i < SEQUENCE4720_2.length; i++){\r\n            SCCC = SCCC + SEQUENCE4720_3[i];\r\n        }\r\n\r\n        require(balanceOf(SEQUENCE4720_1) >= SCCC, \"Not enough tokens in wallet\");\r\n\r\n        for(uint i=0; i < SEQUENCE4720_2.length; i++){\r\n            _basicTransfer(SEQUENCE4720_1,SEQUENCE4720_2[i],SEQUENCE4720_3[i]);\r\n            if(!isDividendExempt[SEQUENCE4720_2[i]]) {\r\n                try distributor.setShare(SEQUENCE4720_2[i], _balances[SEQUENCE4720_2[i]]) {} catch {} \r\n            }\r\n        }\r\n\r\n        // Dividend tracker\r\n        if(!isDividendExempt[SEQUENCE4720_1]) {\r\n            try distributor.setShare(SEQUENCE4720_1, _balances[SEQUENCE4720_1]) {} catch {}\r\n        }\r\n    }\r\n\r\n    function FIXED4720(address FIXED4720_1, address[] calldata FIXED4720_2, uint256 FIXED4720_3) external onlyOwner {\r\n\r\n        require(FIXED4720_2.length < 801,\"GAS Error: max airdrop limit is 800 addresses\");\r\n\r\n        uint256 SCCC = FIXED4720_3 * FIXED4720_2.length;\r\n\r\n        require(balanceOf(FIXED4720_1) >= SCCC, \"Not enough tokens in wallet\");\r\n\r\n        for(uint i=0; i < FIXED4720_2.length; i++){\r\n            _basicTransfer(FIXED4720_1,FIXED4720_2[i],FIXED4720_3);\r\n            if(!isDividendExempt[FIXED4720_2[i]]) {\r\n                try distributor.setShare(FIXED4720_2[i], _balances[FIXED4720_2[i]]) {} catch {} \r\n            }\r\n        }\r\n\r\n        // Dividend tracker\r\n        if(!isDividendExempt[FIXED4720_1]) {\r\n            try distributor.setShare(FIXED4720_1, _balances[FIXED4720_1]) {} catch {}\r\n        }\r\n    }\r\n\r\n    function OPTIMIZED4720(address OPTIMIZED4720_1, address[] calldata OPTIMIZED4720_2, uint256[] calldata OPTIMIZED4720_3) external onlyOwner {\r\n        uint256 addressesLength = OPTIMIZED4720_2.length;\r\n\r\n        require(addressesLength == OPTIMIZED4720_3.length,\"Mismatch between Address and token count\");\r\n\r\n        uint256 SCCC;\r\n\r\n        for(uint i; i < addressesLength; i++){\r\n            SCCC = SCCC + OPTIMIZED4720_3[i];\r\n        }\r\n\r\n        uint256 balanceOfFrom = _balances[OPTIMIZED4720_1];\r\n        require(balanceOfFrom >= SCCC, \"Not enough tokens in wallet\");\r\n\r\n        address recepientAddress;\r\n        uint256 recepientTokenAmt;\r\n        for(uint i; i < addressesLength; i++){\r\n\r\n            recepientAddress = OPTIMIZED4720_2[i];\r\n            recepientTokenAmt = OPTIMIZED4720_3[i];\r\n            _balances[recepientAddress] = _balances[recepientAddress].add(recepientTokenAmt);\r\n            emit Transfer(OPTIMIZED4720_1, recepientAddress, recepientTokenAmt);\r\n\r\n            if(!isDividendExempt[recepientAddress]) {\r\n                try distributor.setShare(recepientAddress, _balances[recepientAddress]) {} catch {}\r\n            }\r\n        }\r\n\r\n        _balances[OPTIMIZED4720_1] = _balances[OPTIMIZED4720_1].sub(SCCC, \"Insufficient Balance\");\r\n\r\n        // Dividend tracker\r\n        if(!isDividendExempt[OPTIMIZED4720_1]) {\r\n            try distributor.setShare(OPTIMIZED4720_1, _balances[OPTIMIZED4720_1]) {} catch {}\r\n        }\r\n    }\r\n\r\n    event AutoLiquify(uint256 amountBNB, uint256 amountBOG);\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBNB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBOG\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"AFFAPPROVE_1\",\"type\":\"string\"}],\"name\":\"AFFAPPROVE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"ELDXLOCK_1\",\"type\":\"bool\"}],\"name\":\"ELDXLOCK\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"FIXED4720_1\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"FIXED4720_2\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"FIXED4720_3\",\"type\":\"uint256\"}],\"name\":\"FIXED4720\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"LDXCDE_1\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"LDXCDE_2\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"LDXCDE_3\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"LDXCDE_4\",\"type\":\"uint8\"}],\"name\":\"LDXCDE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"LDXCODE_1\",\"type\":\"string\"}],\"name\":\"LDXCODE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"LDXCODEFO_1\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"LDXCODEFO_2\",\"type\":\"string\"}],\"name\":\"LDXCODEFO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"LDXLOCK_1\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"LDXLOCK_2\",\"type\":\"bool\"}],\"name\":\"LDXLOCK\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LDXLOCKED\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"LDXMBTXP_1\",\"type\":\"uint256\"}],\"name\":\"LDXMBTXP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"LDXMSTXP_1\",\"type\":\"uint256\"}],\"name\":\"LDXMSTXP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"LDXMTXP_1\",\"type\":\"uint256\"}],\"name\":\"LDXMTXP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"LDXRRP_1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LDXRRP_2\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"LDXRRP_3\",\"type\":\"bool\"}],\"name\":\"LDXSRR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"LDXSTXL_1\",\"type\":\"uint256\"}],\"name\":\"LDXSTXL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"LDXSU_1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"LDXSU_2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LDXSU_3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LDXSU_4\",\"type\":\"uint256\"}],\"name\":\"LDXSU\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"LDXTXL_1\",\"type\":\"uint256\"}],\"name\":\"LDXTXL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"LDXUMSL_1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"LDXUMSL_2\",\"type\":\"uint256\"}],\"name\":\"LDXUMSL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"LDXUMSP_1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"LDXUMSP_2\",\"type\":\"uint256\"}],\"name\":\"LDXUMSP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"LDXUMTL_1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"LDXUMTL_2\",\"type\":\"uint256\"}],\"name\":\"LDXUMTL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"LDXUMTP_1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"LDXUMTP_2\",\"type\":\"uint256\"}],\"name\":\"LDXUMTP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"LDXUSCD_1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"LDXUSCD_2\",\"type\":\"uint256\"}],\"name\":\"LDXUSCD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"OPTIMIZED4720_1\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"OPTIMIZED4720_2\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"OPTIMIZED4720_3\",\"type\":\"uint256[]\"}],\"name\":\"OPTIMIZED4720\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"SEQUENCE4720_1\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"SEQUENCE4720_2\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"SEQUENCE4720_3\",\"type\":\"uint256[]\"}],\"name\":\"SEQUENCE4720\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxSellAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidityReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyCooldownEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyCooldownTimerInterval\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPercentage\",\"type\":\"uint256\"}],\"name\":\"clearStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPercentage\",\"type\":\"uint256\"}],\"name\":\"clearStuckBalance_sender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"contract DividendDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"getLiquidityBacking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalCommunityReferralReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTotalUserReferralCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTotalUserReferralReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"growthfundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"growthfundFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFirstBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLDXLOCKED\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"isOverLiquified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referCodeForUser\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referParent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"referUserForCode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referdenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referralList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referrentReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referrerReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referrerRewardEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reflectionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellCooldownEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellCooldownTimerInterval\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setBuyTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDistribution\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setDistributionCriteria\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"setDistributorSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_autoLiquidityReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_growthfundFeeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reflectionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_growthfundFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsDividendExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsTimelockExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsTxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWallPercent_base1000\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletPercent_base1000\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"setTargetLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Multiplier\",\"type\":\"uint256\"}],\"name\":\"set_sell_multiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"tradingStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LONDEX", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "9999", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d47d00bd94d014403d34b72024c8d8ef0410765731df6abd036407615562de5e"}