{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.10;\r\n\r\n\r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\ninterface IERC721 is IERC165 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n    function safeTransferFrom(address from,address to,uint256 tokenId) external;\r\n    function transferFrom(address from,address to,uint256 tokenId) external;\r\n    function approve(address to, uint256 tokenId) external;\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n    function safeTransferFrom(address from,address to,uint256 tokenId,bytes calldata data) external;\r\n}\r\n\r\ninterface IERC721Receiver {\r\n    function onERC721Received(address operator,address from,uint256 tokenId,bytes calldata data) view external returns (bytes4);\r\n}\r\n\r\ninterface IERC721Metadata is IERC721 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {size := extcodesize(account)}\r\n        return size > 0;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n}\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary Counters {\r\n    struct Counter {\r\n        uint256 _value;\r\n    }\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n    function increment(Counter storage counter) internal {\r\n        unchecked {counter._value += 1;}\r\n    }\r\n}\r\n\r\ninterface IERC721Enumerable is IERC721 {\r\n    function totalSupply() external view returns (uint256);\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n    uint256 private _guardCounter;\r\n    constructor () {\r\n        _guardCounter = 1;\r\n    }\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\r\n    }\r\n}\r\n\r\nabstract contract ERC165 is IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\nabstract contract ERC721 is Context,ERC165, IERC721, IERC721Metadata,IERC721Receiver,Ownable {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    mapping(uint256 => address) private _owners;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"FBXNFT: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\"ERC721: approve caller is not owner nor approved for all\");\r\n        _approve(to, tokenId);\r\n    }\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n    function transferFrom(address from,address to,uint256 tokenId) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _transfer(from, to, tokenId);\r\n    }\r\n    function safeTransferFrom(address from,address to,uint256 tokenId) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n    function safeTransferFrom(address from,address to,uint256 tokenId,bytes memory _data) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n    function _safeTransfer(address from,address to,uint256 tokenId,bytes memory _data) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n    function _safeMint(address to,uint256 tokenId,bytes memory _data) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(_checkOnERC721Received(address(0), to, tokenId, _data),\"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n        _approve(address(0), tokenId);\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n    function _transfer(address from,address to,uint256 tokenId) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n        _approve(address(0), tokenId);\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    function _checkOnERC721Received(address from,address to,uint256 tokenId,bytes memory _data) private view returns (bool) {\r\n        if (to.isContract()){\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval){\r\n              return retval == IERC721Receiver.onERC721Received.selector;\r\n            }\r\n            catch (bytes memory reason){\r\n                if (reason.length == 0){\r\n                  revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                }\r\n                else{\r\n                  assembly {revert(add(32, reason), mload(reason))}\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n    function _beforeTokenTransfer(address from,address to,uint256 tokenId) internal virtual {}\r\n}\r\n\r\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\r\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\r\n    mapping(uint256 => uint256) private _ownedTokensIndex;\r\n    uint256[] private _allTokens;\r\n    mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\r\n        return _ownedTokens[owner][index];\r\n    }\r\n    function tokenOfOwner(address owner) public view returns (uint256[] memory) {\r\n        uint256 num = ERC721.balanceOf(owner);\r\n        uint256[] memory Token_list = new uint256[](uint256(num));\r\n        for(uint256 i=0; i<num; ++i) {\r\n            Token_list[i] =_ownedTokens[owner][i];\r\n        }\r\n        return Token_list;\r\n    }\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _allTokens.length;\r\n    }\r\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\r\n        return _allTokens[index];\r\n    }\r\n    function _beforeTokenTransfer(address from,address to,uint256 tokenId) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n        if (from == address(0)) {\r\n            _addTokenToAllTokensEnumeration(tokenId);\r\n        } else if (from != to) {\r\n            _removeTokenFromOwnerEnumeration(from, tokenId);\r\n        }\r\n        if (to == address(0)) {\r\n            _removeTokenFromAllTokensEnumeration(tokenId);\r\n        } else if (to != from) {\r\n            _addTokenToOwnerEnumeration(to, tokenId);\r\n        }\r\n    }\r\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n        uint256 length = ERC721.balanceOf(to);\r\n        _ownedTokens[to][length] = tokenId;\r\n        _ownedTokensIndex[tokenId] = length;\r\n    }\r\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n        _allTokensIndex[tokenId] = _allTokens.length;\r\n        _allTokens.push(tokenId);\r\n    }\r\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\r\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\r\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n        }\r\n        delete _ownedTokensIndex[tokenId];\r\n        delete _ownedTokens[from][lastTokenIndex];\r\n    }\r\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\n        uint256 lastTokenIndex = _allTokens.length - 1;\r\n        uint256 tokenIndex = _allTokensIndex[tokenId];\r\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\r\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n\r\n        delete _allTokensIndex[tokenId];\r\n        _allTokens.pop();\r\n    }\r\n    function onERC721Received(address,address,uint256,bytes memory) public view virtual override returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\r\n         return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n}\r\ninterface IFBX_NFT_Token {\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n    function getValueByTokenId(uint256 tokenId_) external view returns(uint256);\r\n}\r\n\r\ninterface IStakingRewards {\r\n    function ownerTokenId(uint256 tokenId) external view returns (address);\r\n}\r\n\r\ncontract FBXTowerNFT is ERC721Enumerable,ReentrancyGuard  {\r\n    using Strings for uint256;\r\n    using Counters for Counters.Counter;\r\n\r\n    Counters.Counter private _tokenIds;\r\n    string private _baseURIextended=\"https://www.forthbox.io/\";\r\n    string[6] private _imageAdress = [\"https://static.forthbox.io/image/nft/ham-fantasy/Machine-gun.png\",\"https://static.forthbox.io/image/nft/ham-fantasy/Frozen.png\",\"https://static.forthbox.io/image/nft/ham-fantasy/Fire.png\",\"https://static.forthbox.io/image/nft/ham-fantasy/Laser.png\",\"https://static.forthbox.io/image/nft/ham-fantasy/Railgun.png\",\"https://static.forthbox.io/image/nft/ham-fantasy/Missile.png\"];\r\n    string[6] private _degreeName = [\"Machine-gun\",\"Frozen\",\"Fire\",\"Laser\",\"Railgun\",\"Missile\"];\r\n    uint256[6] private _minHamIdDegree = [6,21,45,67,80,94];\r\n    uint256 public maxTotalSupply = 100000;\r\n    IStakingRewards public DeFi_NFT_FBXToken;\r\n    IFBX_NFT_Token public Ham_NFT_Token;\r\n    struct sNftPropertys {\r\n        uint256 value;\r\n    }\r\n    mapping(uint256 => sNftPropertys) private _NftPropertys;\r\n\r\n    uint256 public minHamID = 53121;\r\n    mapping(uint256 => uint256) private _MintNum;\r\n\r\n    constructor () ERC721(\"ForthBox Tower NFT\", \"FTN\") {\r\n    }\r\n\r\n    //---view---//\r\n    function _baseURI() internal view virtual override returns (string memory) {\r\n        return _baseURIextended;\r\n    }\r\n    function bExistsID(uint256 tokenId) public view returns (bool) {\r\n        return _exists(tokenId);\r\n    }\r\n    function getDegreeByTokenId(uint256 tokenId) external view returns(uint256){\r\n        require(_exists(tokenId), \"ERC721: Existent ID\");\r\n        return _NftPropertys[tokenId].value;\r\n    }\r\n    function getDegreeNameByTokenId(uint256 tokenId) external view returns(string memory){\r\n        require(_exists(tokenId), \"ERC721: Existent ID\");\r\n        return _degreeName[_NftPropertys[tokenId].value-1];\r\n    }\r\n    function getPropertiesByTokenIds(uint256[] calldata tokenIdArr) external view returns(uint256[] memory){\r\n        for(uint256 i=0; i<tokenIdArr.length; ++i) {\r\n            require(_exists(tokenIdArr[i]), \"ERC721: Existent ID\");\r\n        }\r\n        uint256[] memory tPropertyArr = new uint256[](uint256(2*tokenIdArr.length));\r\n        uint256 ith=0;\r\n        for(uint256 i=0; i<tokenIdArr.length; ++i) {\r\n            tPropertyArr[ith] = tokenIdArr[i]; ith++;\r\n            tPropertyArr[ith] =_NftPropertys[tokenIdArr[i]].value; ith++;\r\n        }\r\n        return tPropertyArr;\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId) public view virtual override(ERC721) returns (string memory){\r\n        require(_exists(tokenId), \"FBXTowerNFT: URI query for nonexistent token\");\r\n        string memory base = _baseURI();\r\n        string memory imageAdress = _imageAdress[_NftPropertys[tokenId].value-1];\r\n        string memory degreeName = _degreeName[_NftPropertys[tokenId].value-1];\r\n        string memory json = string(abi.encodePacked(\r\n                '{\"name\":\"ForthBox Tower NFT\",',\r\n                '\"description\":\"FTN\",',\r\n                '\"image\":\"',imageAdress, '\",',\r\n                '\"base\":\"',base, '\",',\r\n                '\"id\":',Strings.toString(tokenId), ',',\r\n                '\"degree\":',Strings.toString(_NftPropertys[tokenId].value), ','\r\n                '\"degreeName\":\"',degreeName, '\"}'\r\n                ));          \r\n        return json;\r\n    }\r\n    function mintFromHamNum(uint256 tokenId) public view returns(uint256){\r\n        require(tokenId>=minHamID, \"FBXTowerNFT: NFT Id too small!\");\r\n        uint256 num=0;\r\n        uint256 degree = Ham_NFT_Token.getValueByTokenId(tokenId);\r\n        for(uint256 i=0; i<6; i++){\r\n            if(degree>=_minHamIdDegree[i]){\r\n                if(_MintNum[tokenId]<i+1){\r\n                    num+=1;\r\n                }\r\n            }           \r\n            else{\r\n                break;\r\n            }\r\n        }\r\n        return num;\r\n    }\r\n    function mintFromHamLevelArr(uint256 tokenId) public view returns(uint256[] memory){\r\n        require(tokenId>=minHamID, \"FBXTowerNFT: NFT Id too small!\");\r\n        uint256 num=mintFromHamNum(tokenId);\r\n        uint256 degree = Ham_NFT_Token.getValueByTokenId(tokenId);\r\n\r\n        uint256[] memory tLevelArr = new uint256[](num);\r\n        uint256 ith=0;\r\n        for(uint256 i=0; i<6; i++){\r\n            if(degree>=_minHamIdDegree[i]){\r\n                if(_MintNum[tokenId]<i+1){\r\n                    tLevelArr[ith]=i+1;\r\n                    ith +=1 ;\r\n                }\r\n            }           \r\n            else{\r\n                break;\r\n            }\r\n        } \r\n        return tLevelArr;\r\n    }\r\n    //---write---//\r\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n    }\r\n    function _burn(uint256 tokenId) internal override(ERC721) {\r\n        super._burn(tokenId);\r\n        delete _NftPropertys[tokenId];\r\n        return;\r\n    }\r\n    function burnNFT(uint256 tokenId) public returns (uint256) {\r\n        require(_msgSender() == ownerOf(tokenId),\"FBXTowerNFT: Only the owner of this Token could Burn It!\");\r\n        _burn(tokenId);\r\n        return tokenId;\r\n    }\r\n\r\n    function transNFT(address _to,uint256 tokenId) public returns (uint256) {\r\n        require(_msgSender() == ownerOf(tokenId),\"FBXTowerNFT: Only the owner of this Token could transfer It!\");\r\n        _safeTransfer(_msgSender(),_to,tokenId,\"\");\r\n        return tokenId;\r\n    }\r\n    function TransferNFTs(address[] calldata _tos, uint256[] calldata tokenIds) external returns (bool){\r\n        require(_tos.length > 0);\r\n        for(uint256 i=0; i < _tos.length ; i++){\r\n            transNFT(_tos[i], tokenIds[i]);\r\n        }\r\n        return true;\r\n    }\r\n    function mintFromHam(uint256 tokenId) public {\r\n        require(tokenId>=minHamID, \"FBXTowerNFT: NFT Id too small!\");\r\n        if(_msgSender() != Ham_NFT_Token.ownerOf(tokenId)){\r\n            require(_msgSender() == DeFi_NFT_FBXToken.ownerTokenId(tokenId), \"FBXTowerNFT: 1 Only the owner of this Token could mint it\");\r\n        }\r\n        bool bMint = false;\r\n        uint256 degree = Ham_NFT_Token.getValueByTokenId(tokenId);\r\n        for(uint256 i=0; i<6; i++){\r\n            if(degree>=_minHamIdDegree[i]){\r\n                if(_MintNum[tokenId]<i+1){\r\n                    _mintNFT(i+1,_msgSender());\r\n                    _MintNum[tokenId] += 1;\r\n                    bMint = true;\r\n                }\r\n            }           \r\n            else{\r\n                break;\r\n            }\r\n        } \r\n        require(bMint, \"FBXTowerNFT: not mint!\");\r\n        return;\r\n    }\r\n    function mintOneFromHam(uint256 tokenId) public {\r\n        require(tokenId>=minHamID, \"FBXTowerNFT: NFT Id too small!\");\r\n        if(_msgSender() != Ham_NFT_Token.ownerOf(tokenId)){\r\n            require(_msgSender() == DeFi_NFT_FBXToken.ownerTokenId(tokenId), \"FBXTowerNFT: 1 Only the owner of this Token could mint it\");\r\n        }\r\n        bool bMint = false;\r\n        uint256 degree = Ham_NFT_Token.getValueByTokenId(tokenId);\r\n        for(uint256 i=0; i<6; i++){\r\n            if(degree>=_minHamIdDegree[i]){\r\n                if(_MintNum[tokenId]<i+1){\r\n                    _mintNFT(i+1,_msgSender());\r\n                    _MintNum[tokenId] += 1;\r\n                    bMint = true;\r\n                    break;\r\n                }\r\n            }           \r\n            else{\r\n                break;\r\n            }\r\n        } \r\n        require(bMint, \"FBXTowerNFT: not mint!\");\r\n        return;\r\n    }\r\n    function mintFromHamArr(uint256[] calldata tokenIdArr) external {\r\n        require(tokenIdArr.length > 0, \"FBXTowerNFT: num zero!\");\r\n        require(tokenIdArr.length <= 1000, \"FBXTowerNFT: num exceed 1000!\");\r\n        for(uint256 i=0; i < tokenIdArr.length ; i++) {\r\n            mintFromHam(tokenIdArr[i]);\r\n        }\r\n        return;\r\n    }\r\n    //---write onlyOwner---//\r\n    function setTokens(address Ham_NFT,address DeFi_NFT,uint256 tMaxTotalSupply) external onlyOwner {\r\n        DeFi_NFT_FBXToken = IStakingRewards(DeFi_NFT);\r\n        Ham_NFT_Token = IFBX_NFT_Token(Ham_NFT);\r\n        maxTotalSupply = tMaxTotalSupply;\r\n    }\r\n    function mintNFTsTo(uint256 num,uint256 degree,address to) public onlyOwner {\r\n        require(num>0, \"FBXTowerNFT: num zero!\");\r\n        require(num<=1000, \"FBXTowerNFT: num exceed 1000!\");\r\n        require(degree<=6, \"FBXTowerNFT: degree exceed 6!\");\r\n        require(degree>=1, \"FBXTowerNFT: degree less than 1!\");\r\n\r\n        for(uint256 i=0; i<num; ++i) {\r\n            _mintNFT(degree,to);\r\n        }\r\n        return;\r\n    }\r\n    function mintNFTsToAddrs(address[] calldata _tos,uint256 degree) public onlyOwner {\r\n        require(_tos.length > 0, \"FBXTowerNFT: num zero!\");\r\n        require(_tos.length <= 1000, \"FBXTowerNFT: num exceed 1000!\");\r\n        require(degree<=6, \"FBXTowerNFT: degree exceed 6!\");\r\n        require(degree>=1, \"FBXTowerNFT: degree less than 1!\");\r\n\r\n        for(uint256 i=0; i < _tos.length ; i++) {\r\n            _mintNFT(degree,_tos[i]);\r\n        }\r\n        return;\r\n    }\r\n    function _mintNFT(uint256 degree,address to) internal returns (uint256) {\r\n        _tokenIds.increment();\r\n        uint256 newItemId = _tokenIds.current();\r\n        require(newItemId < maxTotalSupply, \"FBXTowerNFT: tokenNun exceed maxTotalSupply!\");\r\n        _mint(to, newItemId);\r\n        _NftPropertys[newItemId].value=degree;\r\n        return newItemId;\r\n    }\r\n    function setImageAdress(string[] memory imageAdresses) external onlyOwner {\r\n        require(imageAdresses.length == _imageAdress.length, \"ERC721: length not equal\");\r\n        for(uint256 i=0; i<imageAdresses.length; ++i) {\r\n            _imageAdress[i] = imageAdresses[i];\r\n        }\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DeFi_NFT_FBXToken\",\"outputs\":[{\"internalType\":\"contract IStakingRewards\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Ham_NFT_Token\",\"outputs\":[{\"internalType\":\"contract IFBX_NFT_Token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"TransferNFTs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"bExistsID\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burnNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getDegreeByTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getDegreeNameByTokenId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIdArr\",\"type\":\"uint256[]\"}],\"name\":\"getPropertiesByTokenIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minHamID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mintFromHam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIdArr\",\"type\":\"uint256[]\"}],\"name\":\"mintFromHamArr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mintFromHamLevelArr\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mintFromHamNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"degree\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mintNFTsTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"degree\",\"type\":\"uint256\"}],\"name\":\"mintNFTsToAddrs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mintOneFromHam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"imageAdresses\",\"type\":\"string[]\"}],\"name\":\"setImageAdress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Ham_NFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"DeFi_NFT\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tMaxTotalSupply\",\"type\":\"uint256\"}],\"name\":\"setTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"tokenOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FBXTowerNFT", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8dc33cc10f3b742b92d022f1d66f7a954f6ff73ad1bfcc158d62e353956614d7"}