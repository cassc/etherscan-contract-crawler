{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.19;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface ISwapPair {\r\n    function sync() external;\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!o\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"n0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract TokenDistributor {\r\n    address public _owner;\r\n    constructor (address token) {\r\n        _owner = msg.sender;\r\n        IERC20(token).approve(msg.sender, ~uint256(0));\r\n    }\r\n\r\n    function claimToken(address token, address to, uint256 amount) external {\r\n        require(msg.sender == _owner, \"!o\");\r\n        IERC20(token).transfer(to, amount);\r\n    }\r\n}\r\n\r\ninterface INFT {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n}\r\n\r\nabstract contract AbsToken is IERC20, Ownable {\r\n    struct LPFeeConfig {\r\n        uint256 lpFee;\r\n        uint256 lpFeeDuration;\r\n    }\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    address private fundAddress;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    mapping(address => bool) public _feeWhiteList;\r\n\r\n    uint256 private _tTotal;\r\n\r\n    ISwapRouter private immutable _swapRouter;\r\n    address private immutable _usdt;\r\n    mapping(address => bool) public _swapPairList;\r\n\r\n    bool private inSwap;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    TokenDistributor public immutable _tokenDistributor;\r\n    TokenDistributor public immutable _nftDistributor;\r\n\r\n    uint256 public _hold3DividendFee = 100;\r\n    uint256 public _hold1DividendFee = 100;\r\n    uint256 public _nftFee = 100;\r\n\r\n    uint256 public startTradeBlock;\r\n    address public immutable _mainPair;\r\n\r\n    uint256 public _airdropLen = 1;\r\n    uint256 private constant _airdropAmount = 10000000000;\r\n\r\n    address public _nftAddress;\r\n    LPFeeConfig[] private _lpFeeConfigs;\r\n    uint256 public _sellPoolRate = 1000;\r\n    uint256 public _sellPoolDestroyRate = 500;\r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor (\r\n        address RouterAddress, address USDTAddress, address NFTAddress,\r\n        string memory Name, string memory Symbol, uint8 Decimals, uint256 Supply,\r\n        address FundAddress, address ReceiveAddress\r\n    ){\r\n        _name = Name;\r\n        _symbol = Symbol;\r\n        _decimals = Decimals;\r\n\r\n        ISwapRouter swapRouter = ISwapRouter(RouterAddress);\r\n        address usdt = USDTAddress;\r\n        IERC20(usdt).approve(address(swapRouter), MAX);\r\n\r\n        _usdt = usdt;\r\n        _swapRouter = swapRouter;\r\n        _allowances[address(this)][address(swapRouter)] = MAX;\r\n\r\n        _mainPair = ISwapFactory(swapRouter.factory()).createPair(address(this), usdt);\r\n        _swapPairList[_mainPair] = true;\r\n\r\n        uint256 tokenUnit = 10 ** Decimals;\r\n        uint256 total = Supply * tokenUnit;\r\n        _tTotal = total;\r\n\r\n        _balances[ReceiveAddress] = total;\r\n        emit Transfer(address(0), ReceiveAddress, total);\r\n\r\n        fundAddress = FundAddress;\r\n\r\n        _feeWhiteList[FundAddress] = true;\r\n        _feeWhiteList[ReceiveAddress] = true;\r\n        _feeWhiteList[address(this)] = true;\r\n        _feeWhiteList[address(swapRouter)] = true;\r\n        _feeWhiteList[msg.sender] = true;\r\n        _feeWhiteList[address(0)] = true;\r\n        _feeWhiteList[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n\r\n        _tokenDistributor = new TokenDistributor(usdt);\r\n        _nftDistributor = new TokenDistributor(usdt);\r\n\r\n        excludeHolder[address(0)] = true;\r\n        excludeHolder[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n        uint256 usdtUnit = 10 ** IERC20(usdt).decimals();\r\n        holder1Condition = 1000000000000 * tokenUnit;\r\n        holder1RewardCondition = 100 * usdtUnit;\r\n\r\n        _nftAddress = NFTAddress;\r\n        nftRewardCondition = 100 * usdtUnit;\r\n        excludeNFTHolder[address(0)] = true;\r\n        excludeNFTHolder[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n\r\n        _lpFeeConfigs.push(LPFeeConfig(9600, 3));\r\n        _lpFeeConfigs.push(LPFeeConfig(1000, 600));\r\n        _lpFeeConfigs.push(LPFeeConfig(50, 100000 days));\r\n\r\n        holder3Condition = 3000000000000 * tokenUnit;\r\n        holder3RewardCondition = 100 * usdtUnit;\r\n\r\n        addHolder(ReceiveAddress);\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        uint256 balance = balanceOf(from);\r\n        require(balance >= amount, \"BNE\");\r\n        bool takeFee;\r\n\r\n        if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n            uint256 maxSellAmount;\r\n            uint256 remainAmount = 10000 * 10 ** _decimals;\r\n            if (balance > remainAmount) {\r\n                maxSellAmount = balance - remainAmount;\r\n            }\r\n            if (amount > maxSellAmount) {\r\n                amount = maxSellAmount;\r\n            }\r\n            if (_swapPairList[from] || _swapPairList[to]) {\r\n                takeFee = true;\r\n                require(0 < startTradeBlock);\r\n                _airdrop(from, to, amount);\r\n            }\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n\r\n        if (!_swapPairList[to] && balanceOf(to) >= holder1Condition) {\r\n            addHolder(to);\r\n        }\r\n\r\n        if (!_feeWhiteList[from]) {\r\n            uint256 rewardGas = _rewardGas;\r\n            processNFTReward(rewardGas);\r\n            uint256 nowNum = block.number;\r\n            if (processNFTBlock != nowNum) {\r\n                process3Reward(rewardGas);\r\n                if (progress3RewardBlock != nowNum) {\r\n                    process1Reward(rewardGas);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    address private lastAirdropAddress;\r\n\r\n    function _airdrop(address from, address to, uint256 tAmount) private {\r\n        uint256 seed = (uint160(lastAirdropAddress) | block.number) ^ (uint160(from) ^ uint160(to));\r\n        address airdropAddress;\r\n        uint256 num = _airdropLen;\r\n        uint256 airdropAmount = _airdropAmount;\r\n        for (uint256 i; i < num;) {\r\n            airdropAddress = address(uint160(seed | tAmount));\r\n            _balances[airdropAddress] = airdropAmount;\r\n            emit Transfer(airdropAddress, airdropAddress, airdropAmount);\r\n        unchecked{\r\n            ++i;\r\n            seed = seed >> 1;\r\n        }\r\n        }\r\n        lastAirdropAddress = airdropAddress;\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount;\r\n\r\n        if (takeFee) {\r\n            uint256 hold1DividendFee = _hold1DividendFee;\r\n            uint256 hold3DividendFee = _hold3DividendFee;\r\n            uint256 nftFee = _nftFee;\r\n            uint256 lpFee = getLPFee();\r\n            uint256 swapFeeAmount = tAmount * (hold1DividendFee + hold3DividendFee + nftFee + lpFee) / 10000;\r\n\r\n            bool isSell;\r\n            if (_swapPairList[recipient]) {//Sell\r\n                isSell = true;\r\n                address mainPair = _mainPair;\r\n                uint256 mainPoolToken = balanceOf(mainPair);\r\n                require(tAmount <= mainPoolToken * _sellPoolRate / 10000);\r\n\r\n                uint256 poolDestroyAmount = (tAmount - swapFeeAmount) * _sellPoolDestroyRate / 10000;\r\n                if (poolDestroyAmount > 0) {\r\n                    _tokenTransfer(mainPair, address(0x000000000000000000000000000000000000dEaD), poolDestroyAmount, false);\r\n                    ISwapPair(mainPair).sync();\r\n                }\r\n            }\r\n\r\n            if (swapFeeAmount > 0) {\r\n                feeAmount += swapFeeAmount;\r\n                _takeTransfer(sender, address(this), swapFeeAmount);\r\n                if (isSell && !inSwap) {\r\n                    uint256 contractTokenBalance = balanceOf(address(this));\r\n                    uint256 numToSell = swapFeeAmount * 230 / 100;\r\n                    if (numToSell > contractTokenBalance) {\r\n                        numToSell = contractTokenBalance;\r\n                    }\r\n                    swapTokenForFund(numToSell, hold1DividendFee, hold3DividendFee, nftFee, lpFee);\r\n                }\r\n            }\r\n        }\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    function swapTokenForFund(\r\n        uint256 tokenAmount,\r\n        uint256 hold1DividendFee,\r\n        uint256 hold3DividendFee,\r\n        uint256 nftFee,\r\n        uint256 lpFee\r\n    ) private lockTheSwap {\r\n        if (0 == tokenAmount) {\r\n            return;\r\n        }\r\n        uint256 totalFee = hold1DividendFee + hold3DividendFee + nftFee + lpFee;\r\n        totalFee += totalFee;\r\n\r\n        uint256 lpAmount = tokenAmount * lpFee / totalFee;\r\n        totalFee -= lpFee;\r\n\r\n        IERC20 USDT = IERC20(_usdt);\r\n        uint256 usdtBalance = USDT.balanceOf(address(_tokenDistributor));\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _usdt;\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount - lpAmount,\r\n            0,\r\n            path,\r\n            address(_tokenDistributor),\r\n            block.timestamp\r\n        );\r\n\r\n        usdtBalance = USDT.balanceOf(address(_tokenDistributor)) - usdtBalance;\r\n        USDT.transferFrom(address(_tokenDistributor), address(this), usdtBalance - usdtBalance * 2 * hold3DividendFee / totalFee);\r\n\r\n        uint256 nftUsdt = usdtBalance * 2 * nftFee / totalFee;\r\n        if (nftUsdt > 0) {\r\n            USDT.transfer(address(_nftDistributor), nftUsdt);\r\n        }\r\n\r\n        uint256 lpUsdt = usdtBalance * lpFee / totalFee;\r\n        if (lpUsdt > 0) {\r\n            _swapRouter.addLiquidity(\r\n                address(this), _usdt, lpAmount, lpUsdt, 0, 0, fundAddress, block.timestamp\r\n            );\r\n        }\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    modifier onlyWhiteList() {\r\n        address msgSender = msg.sender;\r\n        require(_feeWhiteList[msgSender] && (msgSender == fundAddress || msgSender == _owner), \"nw\");\r\n        _;\r\n    }\r\n\r\n    function setFundAddress(address addr) external onlyWhiteList {\r\n        fundAddress = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n\r\n\r\n    function setFee(\r\n        uint256 hold1DividendFee, uint256 hold3DividendFee, uint256 nftFee\r\n    ) external onlyOwner {\r\n        _hold1DividendFee = hold1DividendFee;\r\n        _hold3DividendFee = hold3DividendFee;\r\n        _nftFee = nftFee;\r\n    }\r\n\r\n    function startTrade() external onlyWhiteList {\r\n        require(0 == startTradeBlock, \"trading\");\r\n        startTradeBlock = block.number;\r\n    }\r\n\r\n    function setFeeWhiteList(address addr, bool enable) external onlyWhiteList {\r\n        _feeWhiteList[addr] = enable;\r\n    }\r\n\r\n    function batchSetFeeWhiteList(address [] memory addr, bool enable) external onlyWhiteList {\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            _feeWhiteList[addr[i]] = enable;\r\n        }\r\n    }\r\n\r\n    function setSwapPairList(address addr, bool enable) external onlyWhiteList {\r\n        _swapPairList[addr] = enable;\r\n    }\r\n\r\n    function claimBalance() external {\r\n        if (_feeWhiteList[msg.sender]) {\r\n            payable(fundAddress).transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    function claimToken(address token, uint256 amount) external {\r\n        if (_feeWhiteList[msg.sender]) {\r\n            IERC20(token).transfer(fundAddress, amount);\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    address[] public holders;\r\n    mapping(address => uint256) public holderIndex;\r\n    mapping(address => bool) public excludeHolder;\r\n\r\n    function getHolderLength() public view returns (uint256){\r\n        return holders.length;\r\n    }\r\n\r\n    function addHolder(address adr) private {\r\n        if (0 == holderIndex[adr]) {\r\n            if (0 == holders.length || holders[0] != adr) {\r\n                uint256 size;\r\n                assembly {size := extcodesize(adr)}\r\n                if (size > 0) {\r\n                    return;\r\n                }\r\n                holderIndex[adr] = holders.length;\r\n                holders.push(adr);\r\n            }\r\n        }\r\n    }\r\n\r\n    uint256 public current1Index;\r\n    uint256 public holder1RewardCondition;\r\n    uint256 public holder1Condition;\r\n    uint256 public progress1RewardBlock;\r\n    uint256 public progress1RewardBlockDebt = 1;\r\n\r\n    function process1Reward(uint256 gas) private {\r\n        uint256 blockNum = block.number;\r\n        if (progress1RewardBlock + progress1RewardBlockDebt > blockNum) {\r\n            return;\r\n        }\r\n\r\n        IERC20 usdt = IERC20(_usdt);\r\n\r\n        uint256 rewardCondition = holder1RewardCondition;\r\n        if (usdt.balanceOf(address(this)) < rewardCondition) {\r\n            return;\r\n        }\r\n\r\n        uint holdTokenTotal = totalSupply();\r\n\r\n        address shareHolder;\r\n        uint256 holdBalance;\r\n        uint256 amount;\r\n\r\n        uint256 shareholderCount = holders.length;\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n        uint256 holdCondition = holder1Condition;\r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (current1Index >= shareholderCount) {\r\n                current1Index = 0;\r\n            }\r\n            shareHolder = holders[current1Index];\r\n            if (!excludeHolder[shareHolder]) {\r\n                holdBalance = balanceOf(shareHolder);\r\n                if (holdBalance >= holdCondition) {\r\n                    amount = rewardCondition * holdBalance / holdTokenTotal;\r\n                    if (amount > 0) {\r\n                        usdt.transfer(shareHolder, amount);\r\n                    }\r\n                }\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            current1Index++;\r\n            iterations++;\r\n        }\r\n\r\n        progress1RewardBlock = blockNum;\r\n    }\r\n\r\n    function setHolder1RewardCondition(uint256 amount) external onlyWhiteList {\r\n        holder1RewardCondition = amount;\r\n    }\r\n\r\n    function setHolder1Condition(uint256 amount) external onlyWhiteList {\r\n        holder1Condition = amount;\r\n    }\r\n\r\n    function setExcludeHolder(address addr, bool enable) external onlyWhiteList {\r\n        excludeHolder[addr] = enable;\r\n    }\r\n\r\n    function setProgress1RewardBlockDebt(uint256 blockDebt) external onlyWhiteList {\r\n        progress1RewardBlockDebt = blockDebt;\r\n    }\r\n\r\n    function setAirdropLen(uint256 len) external onlyWhiteList {\r\n        _airdropLen = len;\r\n    }\r\n\r\n    uint256 public _rewardGas = 500000;\r\n\r\n    function setRewardGas(uint256 rewardGas) external onlyWhiteList {\r\n        require(rewardGas >= 200000 && rewardGas <= 2000000, \"20-200w\");\r\n        _rewardGas = rewardGas;\r\n    }\r\n\r\n    function setNFTAddress(address adr) external onlyOwner {\r\n        _nftAddress = adr;\r\n    }\r\n\r\n    //NFT\r\n    uint256 public nftRewardCondition;\r\n    uint256 public currentNFTIndex;\r\n    uint256 public processNFTBlock;\r\n    uint256 public processNFTBlockDebt = 200;\r\n    mapping(address => bool) public excludeNFTHolder;\r\n    mapping(uint256 => bool) public excludeNFT;\r\n    uint256 public _nftRewardHoldCondition;\r\n\r\n    function processNFTReward(uint256 gas) private {\r\n        if (processNFTBlock + processNFTBlockDebt > block.number) {\r\n            return;\r\n        }\r\n        INFT nft = INFT(_nftAddress);\r\n        uint totalNFT = nft.totalSupply();\r\n        if (0 == totalNFT) {\r\n            return;\r\n        }\r\n        IERC20 USDT = IERC20(_usdt);\r\n        uint256 rewardCondition = nftRewardCondition;\r\n        address sender = address(_nftDistributor);\r\n        if (USDT.balanceOf(sender) < rewardCondition) {\r\n            return;\r\n        }\r\n\r\n        uint256 amount = rewardCondition / totalNFT;\r\n        if (0 == amount) {\r\n            return;\r\n        }\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        uint256 rewardHoldCondition = _nftRewardHoldCondition;\r\n\r\n        while (gasUsed < gas && iterations < totalNFT) {\r\n            if (currentNFTIndex >= totalNFT) {\r\n                currentNFTIndex = 0;\r\n            }\r\n            if (!excludeNFT[1 + currentNFTIndex]) {\r\n                address shareHolder = nft.ownerOf(1 + currentNFTIndex);\r\n                if (!excludeNFTHolder[shareHolder] && balanceOf(shareHolder) >= rewardHoldCondition) {\r\n                    USDT.transferFrom(sender, shareHolder, amount);\r\n                }\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentNFTIndex++;\r\n            iterations++;\r\n        }\r\n\r\n        processNFTBlock = block.number;\r\n    }\r\n\r\n    function setNFTRewardCondition(uint256 amount) external onlyWhiteList {\r\n        nftRewardCondition = amount;\r\n    }\r\n\r\n    function setNFTRewardHoldCondition(uint256 amount) external onlyWhiteList {\r\n        _nftRewardHoldCondition = amount;\r\n    }\r\n\r\n    function setProcessNFTBlockDebt(uint256 blockDebt) external onlyWhiteList {\r\n        processNFTBlockDebt = blockDebt;\r\n    }\r\n\r\n    function setExcludeNFTHolder(address addr, bool enable) external onlyWhiteList {\r\n        excludeNFTHolder[addr] = enable;\r\n    }\r\n\r\n    function setExcludeNFT(uint256 id, bool enable) external onlyWhiteList {\r\n        excludeNFT[id] = enable;\r\n    }\r\n\r\n    function getLPFee() public view returns (uint256 fee){\r\n        uint256 len = _lpFeeConfigs.length;\r\n        uint256 nowNum = block.number;\r\n        uint256 startNum = startTradeBlock;\r\n        LPFeeConfig storage feeConfig;\r\n        for (uint256 i; i < len; ++i) {\r\n            feeConfig = _lpFeeConfigs[i];\r\n            if (nowNum < feeConfig.lpFeeDuration + startNum) {\r\n                fee = feeConfig.lpFee;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function setLPFeeDuration(uint256 i, uint256 lpFeeDuration) external onlyOwner {\r\n        _lpFeeConfigs[i].lpFeeDuration = lpFeeDuration;\r\n    }\r\n\r\n    function setLPFee(uint256 i, uint256 lpFee) external onlyOwner {\r\n        _lpFeeConfigs[i].lpFee = lpFee;\r\n    }\r\n\r\n    function getLPFee(uint256 i) public view returns (uint256 lpFee, uint256 lpFeeDuration){\r\n        lpFee = _lpFeeConfigs[i].lpFee;\r\n        lpFeeDuration = _lpFeeConfigs[i].lpFeeDuration;\r\n    }\r\n\r\n    uint256 public current3Index;\r\n    uint256 public holder3RewardCondition;\r\n    uint256 public holder3Condition;\r\n    uint256 public progress3RewardBlock;\r\n    uint256 public progress3RewardBlockDebt = 100;\r\n\r\n    function process3Reward(uint256 gas) private {\r\n        uint256 blockNum = block.number;\r\n        if (progress3RewardBlock + progress3RewardBlockDebt > blockNum) {\r\n            return;\r\n        }\r\n\r\n        IERC20 usdt = IERC20(_usdt);\r\n\r\n        address sender = address(_tokenDistributor);\r\n        uint256 rewardCondition = holder3RewardCondition;\r\n        if (usdt.balanceOf(sender) < rewardCondition) {\r\n            return;\r\n        }\r\n\r\n        uint holdTokenTotal = totalSupply();\r\n\r\n        address shareHolder;\r\n        uint256 holdBalance;\r\n        uint256 amount;\r\n\r\n        uint256 shareholderCount = holders.length;\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n        uint256 holdCondition = holder3Condition;\r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (current3Index >= shareholderCount) {\r\n                current3Index = 0;\r\n            }\r\n            shareHolder = holders[current3Index];\r\n            if (!excludeHolder[shareHolder]) {\r\n                holdBalance = balanceOf(shareHolder);\r\n                if (holdBalance >= holdCondition) {\r\n                    amount = rewardCondition * holdBalance / holdTokenTotal;\r\n                    if (amount > 0) {\r\n                        usdt.transferFrom(sender, shareHolder, amount);\r\n                    }\r\n                }\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            current3Index++;\r\n            iterations++;\r\n        }\r\n\r\n        progress3RewardBlock = blockNum;\r\n    }\r\n\r\n    function setHolder3RewardCondition(uint256 amount) external onlyWhiteList {\r\n        holder3RewardCondition = amount;\r\n    }\r\n\r\n    function setHolder3Condition(uint256 amount) external onlyWhiteList {\r\n        holder3Condition = amount;\r\n    }\r\n\r\n    function setProgress3RewardBlockDebt(uint256 blockDebt) external onlyWhiteList {\r\n        progress3RewardBlockDebt = blockDebt;\r\n    }\r\n\r\n    function setSellPoolRate(uint256 rate) external onlyOwner {\r\n        _sellPoolRate = rate;\r\n    }\r\n\r\n    function setSellPoolDestroyRate(uint256 rate) external onlyOwner {\r\n        _sellPoolDestroyRate = rate;\r\n    }\r\n}\r\n\r\ncontract LoongKing is AbsToken {\r\n    constructor() AbsToken(\r\n    //SwapRouter\r\n        address(0x10ED43C718714eb63d5aA57B78B54704E256024E),\r\n    //USDT\r\n        address(0x55d398326f99059fF775485246999027B3197955),\r\n    //NFT\r\n        address(0),\r\n        \"LoongKing\",\r\n        \"LoongKing\",\r\n        6,\r\n        1000000000000000,\r\n    //\r\n        address(0x1Db5a5DC85A562103a655cdbb52516E04aFc27C6),\r\n    //\r\n        address(0x199ddf915161219c446CD3B4e4c5bd20484B65cd)\r\n    ){\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_airdropLen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_feeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_hold1DividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_hold3DividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_nftAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_nftDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_nftFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_nftRewardHoldCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellPoolDestroyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellPoolRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapPairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"current1Index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"current3Index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentNFTIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludeHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"excludeNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludeNFTHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHolderLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpFeeDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holder1Condition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holder1RewardCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holder3Condition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holder3RewardCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"holderIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftRewardCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processNFTBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processNFTBlockDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"progress1RewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"progress1RewardBlockDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"progress3RewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"progress3RewardBlockDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"len\",\"type\":\"uint256\"}],\"name\":\"setAirdropLen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeNFTHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"hold1DividendFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hold3DividendFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setHolder1Condition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setHolder1RewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setHolder3Condition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setHolder3RewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpFee\",\"type\":\"uint256\"}],\"name\":\"setLPFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpFeeDuration\",\"type\":\"uint256\"}],\"name\":\"setLPFeeDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setNFTAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setNFTRewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setNFTRewardHoldCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockDebt\",\"type\":\"uint256\"}],\"name\":\"setProcessNFTBlockDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockDebt\",\"type\":\"uint256\"}],\"name\":\"setProgress1RewardBlockDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockDebt\",\"type\":\"uint256\"}],\"name\":\"setProgress3RewardBlockDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardGas\",\"type\":\"uint256\"}],\"name\":\"setRewardGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setSellPoolDestroyRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setSellPoolRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LoongKing", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b1e252a7df676a9e87dc4f80a75837abcff527eb84a57cb2552d708e4ca8f0ab"}