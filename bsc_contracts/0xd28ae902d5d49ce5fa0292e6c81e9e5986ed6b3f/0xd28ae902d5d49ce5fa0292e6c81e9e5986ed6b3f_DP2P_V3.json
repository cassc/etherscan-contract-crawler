{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\n/**\\r\\n * @title Counters\\r\\n * @author Matt Condon (@shrugs)\\r\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\r\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\r\\n *\\r\\n * Include with `using Counters for Counters.Counter;`\\r\\n */\\r\\nlibrary Counters {\\r\\n    struct Counter {\\r\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\r\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\r\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\r\\n        uint256 _value; // default: 0\\r\\n    }\\r\\n\\r\\n    function current(Counter storage counter) internal view returns (uint256) {\\r\\n        return counter._value;\\r\\n    }\\r\\n\\r\\n    function increment(Counter storage counter) internal {\\r\\n        unchecked {\\r\\n            counter._value += 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function decrement(Counter storage counter) internal {\\r\\n        uint256 value = counter._value;\\r\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\r\\n        unchecked {\\r\\n            counter._value = value - 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function reset(Counter storage counter) internal {\\r\\n        counter._value = 0;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/DP2P_V3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"./Counters.sol\\\";\\r\\nimport \\\"./ReentrancyGuard.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ncontract DP2P_V3 is ReentrancyGuard {\\r\\n    using Counters for Counters.Counter;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    address public admin;\\r\\n    uint256 public minAmount = 0.001 ether;\\r\\n    uint256 public maxAmount = 200 ether;\\r\\n    uint256 public commissionRate = 2;\\r\\n    uint256 public totalCommissions = 0;\\r\\n\\r\\n    enum AdStatus {\\r\\n        Open,\\r\\n        Cancelled,\\r\\n        Completed\\r\\n    }\\r\\n\\r\\n    struct AdsInfo {\\r\\n        address seller;\\r\\n        address token;\\r\\n        uint256 amount;\\r\\n        AdStatus status;\\r\\n        uint256 remainAmount;\\r\\n        uint256 commissionAmount;\\r\\n    }\\r\\n\\r\\n    struct AssignedAmount {\\r\\n        uint256 adId;\\r\\n        uint256 amount;\\r\\n    }\\r\\n\\r\\n    mapping(string => address) public tokenAddresses;\\r\\n    mapping(uint256 => AdsInfo) public ads;\\r\\n    mapping(uint256 => address) private canceledAds;\\r\\n    mapping(address => mapping(uint256 => bool)) private canceledBySeller;\\r\\n    mapping(address => mapping(address => AssignedAmount))\\r\\n        public assignedAmounts;\\r\\n\\r\\n    Counters.Counter private adCount;\\r\\n\\r\\n    event AdPosted(\\r\\n        address indexed seller,\\r\\n        uint256 indexed adId,\\r\\n        uint256 amount\\r\\n    );\\r\\n    event AdCanceled(address indexed seller, uint256 indexed adId);\\r\\n    event AdUpdated(\\r\\n        uint256 indexed _adId,\\r\\n        uint256 indexed oldAmount,\\r\\n        uint256 indexed _newAmount\\r\\n    );\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(msg.sender == admin, \\\"Not authorized\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier validInputs(\\r\\n        uint256 _amount,\\r\\n        uint256 _adId,\\r\\n        address _recipient\\r\\n    ) {\\r\\n        require(_recipient != address(0), \\\"Invalid Recipient Address\\\");\\r\\n        require(ads[_adId].seller != address(0), \\\"Invalid Ad ID\\\");\\r\\n        require(_amount > 0, \\\"Invalid Amount\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() {\\r\\n        admin = msg.sender;\\r\\n    }\\r\\n\\r\\n    // Utility function to check if the given address is a token contract\\r\\n    function isTokenContract(address _address) internal view returns (bool) {\\r\\n        uint256 codeSize;\\r\\n        assembly {\\r\\n            codeSize := extcodesize(_address)\\r\\n        }\\r\\n        if (codeSize > 0) {\\r\\n            try IERC20(_address).totalSupply() returns (uint256) {\\r\\n                return true;\\r\\n            } catch {}\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function setTokenAddress(\\r\\n        string memory tokenName,\\r\\n        address _token\\r\\n    ) external onlyAdmin {\\r\\n        require(isTokenContract(_token), \\\"Not a valid token address\\\");\\r\\n        tokenAddresses[tokenName] = _token;\\r\\n    }\\r\\n\\r\\n    function calculateCommission(\\r\\n        uint256 amount\\r\\n    ) public view returns (uint256[2] memory) {\\r\\n        uint256 commissionAmount = amount.mul(commissionRate).div(1000);\\r\\n        uint256 totalAmount = amount.add(commissionAmount);\\r\\n        return [totalAmount, commissionAmount];\\r\\n    }\\r\\n\\r\\n    function postAd(uint256 amount, string memory tokenName) external payable {\\r\\n        require(msg.sender != admin, \\\"Admin cannot create an Ad\\\");\\r\\n        require(amount > 0, \\\"Amount must be greater than zero\\\");\\r\\n        require(\\r\\n            amount >= minAmount && amount <= maxAmount,\\r\\n            \\\"Amount not in range\\\"\\r\\n        );\\r\\n\\r\\n        // uint256 commissionAmount = amount.mul(commissionRate).div(1000);\\r\\n\\r\\n        // totalCommissions = totalCommissions.add(commissionAmount);\\r\\n\\r\\n        address _token = tokenAddresses[tokenName];\\r\\n\\r\\n        uint256 adId = adCount.current();\\r\\n        adCount.increment();\\r\\n        ads[adId].seller = msg.sender;\\r\\n        ads[adId].amount = amount;\\r\\n        ads[adId].status = AdStatus.Open;\\r\\n        ads[adId].remainAmount = amount;\\r\\n\\r\\n        if (_token != address(0) && isTokenContract(_token)) {\\r\\n            IERC20 token = IERC20(_token);\\r\\n            require(\\r\\n                token.balanceOf(msg.sender) >= amount,\\r\\n                \\\"Insufficient Token Balance\\\"\\r\\n            );\\r\\n            require(\\r\\n                token.allowance(msg.sender, address(this)) >= amount,\\r\\n                \\\"Insufficient Allowance\\\"\\r\\n            );\\r\\n            require(\\r\\n                token.transferFrom(msg.sender, address(this), amount),\\r\\n                \\\"Token transfer failed\\\"\\r\\n            );\\r\\n            uint256 commission = msg.value;\\r\\n            ads[adId].token = _token;\\r\\n            ads[adId].commissionAmount = commission;\\r\\n            totalCommissions = totalCommissions.add(commission);\\r\\n            // require(\\r\\n            //     msg.value == commissionAmount,\\r\\n            //     \\\"Insufficient Ether Balance\\\"\\r\\n            // );\\r\\n        } else {\\r\\n            uint256[2] memory totalAmount = calculateCommission(amount);\\r\\n            require(msg.value == totalAmount[0], \\\"Insufficient Ether Balance\\\");\\r\\n            ads[adId].commissionAmount = totalAmount[1];\\r\\n            totalCommissions = totalCommissions.add(totalAmount[1]);\\r\\n        }\\r\\n\\r\\n        emit AdPosted(msg.sender, adId, amount);\\r\\n    }\\r\\n\\r\\n    function updatePostAd(\\r\\n        uint256 adId,\\r\\n        uint256 newAmount,\\r\\n        string memory tokenName\\r\\n    ) external payable {\\r\\n        address _token = tokenAddresses[tokenName];\\r\\n        AdsInfo storage ad = ads[adId];\\r\\n        require(ad.seller == msg.sender, \\\"Not the seller of this ad\\\");\\r\\n        require(\\r\\n            newAmount >= minAmount && newAmount <= maxAmount,\\r\\n            \\\"Amount not in range\\\"\\r\\n        );\\r\\n\\r\\n        // uint256 commissionAmount = newAmount.mul(commissionRate).div(1000);\\r\\n        // uint256 totalAmount = newAmount.add(commissionAmount);\\r\\n        // totalCommissions = totalCommissions.add(commissionAmount);\\r\\n\\r\\n        if (isTokenContract(_token)) {\\r\\n            IERC20 token = IERC20(_token);\\r\\n            require(\\r\\n                token.balanceOf(msg.sender) >= newAmount,\\r\\n                \\\"Insufficient Token Balance\\\"\\r\\n            );\\r\\n            token.transferFrom(msg.sender, address(this), newAmount);\\r\\n            // require(\\r\\n            //     msg.value == commissionAmount,\\r\\n            //     \\\"Insufficient Ether Balance\\\"\\r\\n            // );\\r\\n            uint256 commission = msg.value;\\r\\n            totalCommissions = totalCommissions.add(commission);\\r\\n            ads[adId].commissionAmount = ads[adId].commissionAmount.add(commission);\\r\\n        } else {\\r\\n            uint256[2] memory totalAmount = calculateCommission(newAmount);\\r\\n            require(msg.value == totalAmount[0], \\\"Insufficient Ether Balance\\\");\\r\\n            ad.commissionAmount = ad.commissionAmount.add(totalAmount[1]);\\r\\n            totalCommissions = totalCommissions.add(totalAmount[1]);\\r\\n        }\\r\\n\\r\\n        uint256 oldAmount = ad.amount;\\r\\n        uint256 newTotal = oldAmount.add(newAmount);\\r\\n        // uint256 oldCommission = ad.commissionAmount;\\r\\n        // uint256 newTotalCommission = oldCommission.add(commissionAmount);\\r\\n        ad.amount = newTotal;\\r\\n        ad.remainAmount = newTotal;\\r\\n        // ad.commissionAmount = newTotalCommission;\\r\\n\\r\\n        emit AdUpdated(adId, oldAmount, newAmount);\\r\\n    }\\r\\n\\r\\n    function transferFunds(\\r\\n        uint256 amount,\\r\\n        uint256 adId,\\r\\n        address recipient\\r\\n    ) external payable nonReentrant validInputs(amount, adId, recipient) {\\r\\n        require(ads[adId].seller == msg.sender, \\\"Not the seller of this ad\\\");\\r\\n        require(\\r\\n            ads[adId].amount >= amount,\\r\\n            \\\"Insufficient balance for transfer\\\"\\r\\n        );\\r\\n\\r\\n        address _token = ads[adId].token;\\r\\n\\r\\n        if (_token != address(0) && isTokenContract(_token)) {\\r\\n            IERC20 token = IERC20(_token);\\r\\n            token.transfer(recipient, amount);\\r\\n        } else {\\r\\n            (bool sent, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n            require(sent, \\\"Failed to send Ether\\\");\\r\\n        }\\r\\n\\r\\n        ads[adId].remainAmount = ads[adId].remainAmount.sub(amount);\\r\\n\\r\\n        if (ads[adId].remainAmount == 0) {\\r\\n            ads[adId].status = AdStatus.Completed;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function cancelAd(uint256 adId) external payable {\\r\\n        AdsInfo storage ad = ads[adId];\\r\\n        require(adId >= 0 && adId <= adCount.current(), \\\"Invalid Ad ID\\\");\\r\\n        require(\\r\\n            !canceledBySeller[msg.sender][adId],\\r\\n            \\\"Ad already canceled by this seller\\\"\\r\\n        );\\r\\n        require(msg.sender == ad.seller, \\\"Not the ad seller\\\");\\r\\n        require(ad.status == AdStatus.Open, \\\"Ad already canceled\\\");\\r\\n\\r\\n        ad.status = AdStatus.Cancelled;\\r\\n\\r\\n        address payable seller = payable(ad.seller);\\r\\n\\r\\n        address _token = ad.token;\\r\\n        if (ad.remainAmount == ad.amount) {\\r\\n            if (_token != address(0)) {\\r\\n                IERC20 token = IERC20(_token);\\r\\n                token.transfer(seller, ad.amount);\\r\\n                seller.transfer(ad.commissionAmount);\\r\\n                ad.commissionAmount = 0;\\r\\n            } else {\\r\\n                seller.transfer(ad.amount.add(ad.commissionAmount));\\r\\n                ad.commissionAmount = 0;\\r\\n            }\\r\\n            totalCommissions = totalCommissions.sub(ad.commissionAmount);\\r\\n        } else {\\r\\n            if (_token != address(0)) {\\r\\n                IERC20 token = IERC20(_token);\\r\\n                token.transfer(seller, ad.remainAmount);\\r\\n            } else {\\r\\n                seller.transfer(ad.remainAmount);\\r\\n            }\\r\\n        }\\r\\n        ad.amount = 0;\\r\\n        ad.remainAmount = 0;\\r\\n        canceledAds[adId] = msg.sender;\\r\\n        canceledBySeller[msg.sender][adId] = true;\\r\\n\\r\\n        emit AdCanceled(ad.seller, adId);\\r\\n    }\\r\\n\\r\\n    function resolveDispute(\\r\\n        uint256 amount,\\r\\n        uint256 adId,\\r\\n        address recipient\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        nonReentrant\\r\\n        onlyAdmin\\r\\n        validInputs(amount, adId, recipient)\\r\\n    {\\r\\n        require(\\r\\n            assignedAmounts[recipient][admin].amount >= amount,\\r\\n            \\\"Insufficient balance for transfer\\\"\\r\\n        );\\r\\n        require(\\r\\n            assignedAmounts[recipient][admin].adId == adId,\\r\\n            \\\"Invalid Ad ID\\\"\\r\\n        );\\r\\n        address _token = ads[adId].token;\\r\\n\\r\\n        if (_token != address(0) && isTokenContract(_token)) {\\r\\n            IERC20 token = IERC20(_token);\\r\\n            require(token.transfer(recipient, amount), \\\"Token transfer failed\\\");\\r\\n        } else {\\r\\n            (bool sent, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n            require(sent, \\\"Failed to send Ether\\\");\\r\\n        }\\r\\n\\r\\n        assignedAmounts[recipient][admin] = AssignedAmount(0, 0);\\r\\n        ads[adId].remainAmount = ads[adId].remainAmount.sub(amount);\\r\\n\\r\\n        if (ads[adId].remainAmount == 0) {\\r\\n            ads[adId].status = AdStatus.Completed;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function cancelDispute(\\r\\n        address recipient,\\r\\n        uint256 amount,\\r\\n        uint256 adId\\r\\n    ) external onlyAdmin {\\r\\n        require(\\r\\n            assignedAmounts[recipient][admin].amount >= amount,\\r\\n            \\\"Insufficient balance for transfer\\\"\\r\\n        );\\r\\n        require(\\r\\n            assignedAmounts[recipient][admin].adId == adId,\\r\\n            \\\"Invalid Ad ID\\\"\\r\\n        );\\r\\n        assignedAmounts[recipient][admin] = AssignedAmount(0, 0);\\r\\n    }\\r\\n\\r\\n    function setAssignedAmountToAdmin(\\r\\n        uint256 adId,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external {\\r\\n        require(ads[adId].seller == msg.sender, \\\"Not the seller of this ad\\\");\\r\\n        require(\\r\\n            adId >= 0 &&\\r\\n                adId <= adCount.current() &&\\r\\n                amount > 0 &&\\r\\n                recipient != address(0),\\r\\n            \\\"Invalid Inputs\\\"\\r\\n        );\\r\\n        assignedAmounts[recipient][admin] = AssignedAmount(adId, amount);\\r\\n    }\\r\\n\\r\\n    function calculateWithdrawFunds() external view returns (uint256) {\\r\\n        uint256 totalCommission = 0;\\r\\n\\r\\n        for (uint256 adId = 0; adId < adCount.current(); adId++) {\\r\\n            if (\\r\\n                ads[adId].status == AdStatus.Completed ||\\r\\n                ads[adId].status == AdStatus.Cancelled\\r\\n            ) {\\r\\n                uint256 commissionAmount = ads[adId].commissionAmount;\\r\\n\\r\\n                totalCommission += commissionAmount;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return totalCommission;\\r\\n    }\\r\\n\\r\\n    function withdrawFunds() external onlyAdmin {\\r\\n        uint256 totalCommission = 0;\\r\\n\\r\\n        for (uint256 adId = 0; adId < adCount.current(); adId++) {\\r\\n            if (\\r\\n                ads[adId].status == AdStatus.Completed ||\\r\\n                ads[adId].status == AdStatus.Cancelled\\r\\n            ) {\\r\\n                uint256 commissionAmount = ads[adId].commissionAmount;\\r\\n                ads[adId].commissionAmount = 0;\\r\\n\\r\\n                totalCommission += commissionAmount;\\r\\n            }\\r\\n        }\\r\\n        payable(admin).transfer(totalCommission);\\r\\n    }\\r\\n\\r\\n    function updateMinAmount(uint256 _minAmount) external onlyAdmin {\\r\\n        minAmount = _minAmount;\\r\\n    }\\r\\n\\r\\n    function updateMaxAmount(uint256 _maxAmount) external onlyAdmin {\\r\\n        maxAmount = _maxAmount;\\r\\n    }\\r\\n\\r\\n    function getAssignedAmount(\\r\\n        address recipient\\r\\n    ) external view returns (uint256) {\\r\\n        return assignedAmounts[recipient][admin].amount;\\r\\n    }\\r\\n\\r\\n    function getAssignedAdID(\\r\\n        address recipient\\r\\n    ) external view returns (uint256) {\\r\\n        return assignedAmounts[recipient][admin].adId;\\r\\n    }\\r\\n\\r\\n    function getAdCount() external view returns (uint256) {\\r\\n        return adCount.current();\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\n/**\\r\\n * @dev Contract module that helps prevent reentrant calls to a function.\\r\\n *\\r\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\r\\n * available, which can be applied to functions to make sure there are no nested\\r\\n * (reentrant) calls to them.\\r\\n *\\r\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\r\\n * `nonReentrant` may not call one another. This can be worked around by making\\r\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\r\\n * points to them.\\r\\n *\\r\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\r\\n * to protect against it, check out our blog post\\r\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\r\\n */\\r\\nabstract contract ReentrancyGuard {\\r\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\r\\n    // word because each write operation emits an extra SLOAD to first read the\\r\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\r\\n    // back. This is the compiler's defense against contract upgrades and\\r\\n    // pointer aliasing, and it cannot be disabled.\\r\\n\\r\\n    // The values being non-zero value makes deployment a bit more expensive,\\r\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\r\\n    // amount. Since refunds are capped to a percentage of the total\\r\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\r\\n    // increase the likelihood of the full refund coming into effect.\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    constructor() {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and making it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        _nonReentrantBefore();\\r\\n        _;\\r\\n        _nonReentrantAfter();\\r\\n    }\\r\\n\\r\\n    function _nonReentrantBefore() private {\\r\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _status = _ENTERED;\\r\\n    }\\r\\n\\r\\n    function _nonReentrantAfter() private {\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\r\\n     * `nonReentrant` function in the call stack.\\r\\n     */\\r\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\r\\n        return _status == _ENTERED;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\n// CAUTION\\r\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\r\\n// because it relies on the compiler's built in overflow checks.\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations.\\r\\n *\\r\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\r\\n * now has built in overflow checking.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"adId\",\"type\":\"uint256\"}],\"name\":\"AdCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"adId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AdPosted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_adId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_newAmount\",\"type\":\"uint256\"}],\"name\":\"AdUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ads\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum DP2P_V3.AdStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"remainAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commissionAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assignedAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"adId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateCommission\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateWithdrawFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adId\",\"type\":\"uint256\"}],\"name\":\"cancelAd\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"adId\",\"type\":\"uint256\"}],\"name\":\"cancelDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commissionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"getAssignedAdID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"getAssignedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"}],\"name\":\"postAd\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"adId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"resolveDispute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setAssignedAmountToAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"tokenAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCommissions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"adId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"transferFunds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxAmount\",\"type\":\"uint256\"}],\"name\":\"updateMaxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"}],\"name\":\"updateMinAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"}],\"name\":\"updatePostAd\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DP2P_V3", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}