{"SourceCode": "/*\r\n\ud83c\udf31 Grokito  \ud83d\ude80 TG https://t.me/Grokito\r\n\r\nca\r\n0x7749688EECFFc172Aa71052Be2482BAE5D69A7E1\r\nswap\r\nhttps://pancakeswap.finance/swap?outputCurrency=0x7749688EECFFc172Aa71052Be2482BAE5D69A7E1\r\nhttps://poocoin.app/tokens/0x7749688eecffc172aa71052be2482bae5d69a7e1\r\nchart\r\nhttps://www.dextools.io/app/en/bnb/pair-explorer/0x7749688EECFFc172Aa71052Be2482BAE5D69A7E1\r\n\r\nJoin the eco-revolution with our BEP-20 token designed to promote sustainability and environmental awareness.\r\n\r\n\ud83c\udf0d Make a positive impact on the planet by investing in Grokito \u2013 the token that cares about our Earth. \ud83c\udf43\r\n\r\n\ud83d\udcb9 Watch your investment grow while contributing to a greener future. Grokito is not just a token; it's a commitment to a sustainable world! \ud83c\udf3f\r\n\r\n\ud83d\udd04 With Grokito, you're not just trading tokens; you're trading for a cause! Join the movement towards a cleaner, healthier planet. \ud83c\udf0e\r\n\r\n\ud83c\udf08 Go green with Grokito! Our BEP-20 token is your ticket to a sustainable and eco-friendly future. \ud83c\udf3f\ud83d\udc9a\r\n\r\n\ud83d\ude80 Invest in Grokito today and be part of the change you want to see in the world! \ud83c\udf33\r\n\r\n\ud83d\udca1 Grokito isn't just a token; it's a symbol of hope for a brighter, cleaner tomorrow. Join us on the journey to a sustainable future. \ud83c\udf31\r\n\r\n\ud83d\udcc8 Watch your investments flourish while contributing to environmental causes. Grokito \u2013 where profits meet purpose! \ud83c\udf3f\ud83d\udcb0\r\n\r\n\ud83c\udf1f Be a conscious investor with Grokito, where every transaction makes a positive impact on the environment. \ud83c\udf43\ud83d\udcb9\r\n\r\n\ud83c\udf10 Grokito: Investing in a sustainable future has never been this rewarding! Join us, and let's make the world a better place together. \ud83c\udf3f\ud83c\udf0d\r\n\r\nTELEGRAM : https://t.me/Grokito\r\n\r\n*/ \r\n// SPDX-License-Identifier: GPL 3.0\r\npragma solidity ^0.8.23;\r\n\r\ninterface IBEP20232024 {\r\n  // @dev Returns the amount of tokens in existence.\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  // @dev Returns the token decimals.\r\n  function decimals() external view returns (uint8);\r\n\r\n  // @dev Returns the token symbol.\r\n  function symbol() external view returns (string memory);\r\n\r\n  //@dev Returns the token name.\r\n  function name() external view returns (string memory);\r\n\r\n  //@dev Returns the bep token owner.\r\n  function getOwner() external view returns (address);\r\n\r\n  //@dev Returns the amount of tokens owned by `account`.\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n  //@dev Emitted when `value` tokens are moved from one account (`from`) to  another (`to`). Note that `value` may be zero.\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  //@dev Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract Grokitocoin is IBEP20232024 {\r\n  \r\n    // common addresses\r\n    address private owner;\r\n    address private developmentPot;\r\n    address private foundersPot;\r\n    \r\n    // token liquidity metadata\r\n    uint public override totalSupply;\r\n    uint8 public override decimals = 9;\r\n    \r\n    mapping(address => uint) public balances;\r\n    \r\n    mapping(address => mapping(address => uint)) public allowances;\r\n    \r\n    // token title metadata\r\n    string public override name = \"Grokito\";\r\n    string public override symbol = \"Grokito\";\r\n    string public Grokitotelegramz = \"https://t.me/Grokitocoin\";\r\n            function getGrokitotelegramz() public view returns (string memory) {\r\n        return Grokitotelegramz;\r\n    }\r\n    // EVENTS\r\n    // (now in interface) event Transfer(address indexed from, address indexed to, uint value);\r\n    // (now in interface) event Approval(address indexed owner, address indexed spender, uint value);\r\n    \r\n    // On init of contract we're going to set the admin and give them all tokens.\r\n    constructor(uint totalSupplyValue, address developmentAddress, address foundersAddress) {\r\n        // set total supply\r\n        totalSupply = totalSupplyValue;\r\n        \r\n        // designate addresses\r\n        owner = msg.sender;\r\n        developmentPot = developmentAddress;\r\n        foundersPot = foundersAddress;\r\n        \r\n        // split the tokens according to agreed upon percentages\r\n        balances[developmentPot] =  totalSupply * 1 / 100;\r\n        balances[foundersPot] = totalSupply * 1 / 100;\r\n        \r\n        balances[owner] = totalSupply * 98 / 100;\r\n    }\r\n    \r\n    // Get the address of the token's owner\r\n    function getOwner() public view override returns(address) {\r\n        return owner;\r\n    }\r\n    \r\n    // Get the address of the token's development pot\r\n    function getDeveloper() public view returns(address) {\r\n        return developmentPot;\r\n    }\r\n    \r\n    // Get the address of the token's founder pot\r\n    function getFounder() public view returns(address) {\r\n        return foundersPot;\r\n    }\r\n    \r\n    // Get the balance of an account\r\n    function balanceOf(address account) public view override returns(uint) {\r\n        return balances[account];\r\n    }\r\n    \r\n    // Transfer balance from one user to another\r\n    function transfer(address to, uint value) public override returns(bool) {\r\n        require(value > 0, \"Transfer value has to be higher than 0.\");\r\n        require(balanceOf(msg.sender) >= value, \"Balance is too low to make transfer.\");\r\n        \r\n        //withdraw the taxed and burned percentages from the total value\r\n        uint taxTBD = value * 0 / 100;\r\n        uint burnTBD = value * 0 / 100;\r\n        uint valueAfterTaxAndBurn = value - taxTBD - burnTBD;\r\n        \r\n        // perform the transfer operation\r\n        balances[to] += valueAfterTaxAndBurn;\r\n        balances[msg.sender] -= value;\r\n        \r\n        emit Transfer(msg.sender, to, value);\r\n        \r\n        // finally, we burn and tax the extras percentage\r\n        balances[owner] += taxTBD + burnTBD;\r\n        _burn(owner, burnTBD);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    // approve a specific address as a spender for your account, with a specific spending limit\r\n    function approve(address spender, uint value) public override returns(bool) {\r\n        allowances[msg.sender][spender] = value; \r\n        \r\n        emit Approval(msg.sender, spender, value);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    // allowance\r\n    function allowance(address _owner, address spender) public view override returns(uint) {\r\n        return allowances[_owner][spender];\r\n    }\r\n    \r\n    // an approved spender can transfer currency from one account to another up to their spending limit\r\n    function transferFrom(address from, address to, uint value) public override returns(bool) {\r\n        require(allowances[from][msg.sender] > 0, \"No Allowance for this address.\");\r\n        require(allowances[from][msg.sender] >= value, \"Allowance too low for transfer.\");\r\n        require(balances[from] >= value, \"Balance is too low to make transfer.\");\r\n        \r\n        balances[to] += value;\r\n        balances[from] -= value;\r\n        \r\n        emit Transfer(from, to, value);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    // function to allow users to burn currency from their account\r\n    function burn(uint256 amount) public returns(bool) {\r\n        _burn(msg.sender, amount);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    // intenal functions\r\n    \r\n    // burn amount of currency from specific account\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"You can't burn from zero address.\");\r\n        require(balances[account] >= amount, \"Burn amount exceeds balance at address.\");\r\n    \r\n        balances[account] -= amount;\r\n        totalSupply -= amount;\r\n        \r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n    \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupplyValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"developmentAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"foundersAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Grokitotelegramz\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeveloper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFounder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGrokitotelegramz\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Grokitocoin", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000008ac7230489e80000000000000000000000000000e213a73b8bd76edd9d65a1d89465e8624860dd1b0000000000000000000000007ae8a6c550fd437b76c4252af20d07f4b025f6d2", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://eb41b8bab7e0a9dd2154bccaac0d905569994b403002b0185750d0e616dda3c8"}