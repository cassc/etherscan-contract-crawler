{"SourceCode": "// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/math/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: GLAStaking.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\ncontract GLAStaking is Ownable {\r\n    using SafeMath for uint256;\r\n    struct Deposit {\r\n        uint256 index;\r\n        uint8 plan;\r\n        uint256 amount;\r\n        uint256 start;\r\n    }\r\n\r\n    struct User {\r\n        mapping(uint256 => Deposit) deposits;\r\n        uint256[] depositIdx;\r\n        uint256 numberOfDeposits;\r\n    }\r\n\r\n    struct Plan {\r\n        uint256 time;\r\n        uint256 percent; //APY\r\n        uint256 maxStake;\r\n        uint256 currentStake;\r\n    }\r\n\r\n    struct DepositInfo {\r\n        uint256 depositIndex;\r\n        uint256 amountDeposit;\r\n        uint8 plan;\r\n        uint256 percent;\r\n        uint256 amountGain;\r\n        uint256 start;\r\n        uint256 finish;\r\n    }\r\n    \r\n    uint256 depositID = 0;\r\n    uint256 constant TIME_STEP = 1 days;\r\n    uint256 public constant MIN_STAKE_AMOUNT = 10**4 * 10**18;\r\n    address public glaMinter;\r\n    address public gameManager;\r\n    uint256 public totalStaked;\r\n    mapping(uint256 => Plan) internal plans;\r\n    mapping(address => User) internal users;\r\n\r\n    event NewDeposit(address indexed user, uint256 idx, uint8 plan, uint256 amount);\r\n    event UnstakeBeforeMaturity( address indexed user, uint256 idx, uint256 withdrawalAmount, uint256 time);\r\n    event UnstakeAfterMaturity(address indexed user, uint256 idx, uint256 withdrawalAmount, uint256 time);\r\n\r\n    constructor(address _gameManager, address _minter) {\r\n        plans[0] = Plan(30, 180, 50 * 10**6 * 10**18, 0);\r\n        plans[1] = Plan(60, 240, 105 * 10**6 * 10**18, 0);\r\n        plans[2] = Plan(90, 300, 155 * 10**6 * 10**18, 0);\r\n        glaMinter = _minter;\r\n        gameManager = _gameManager;\r\n    }\r\n\r\n    function stakeGLA(uint256 _amount, uint8 plan) public {\r\n        require(msg.sender == tx.origin, \"Hello, bot!\");\r\n        require(plan < 3, \"Invalid plan\");\r\n        require(\r\n            _amount >= MIN_STAKE_AMOUNT,\r\n            \"Stake amount must be greater than MIN_STAKE_AMOUNT\"\r\n        );\r\n        require(\r\n            plans[plan].currentStake + _amount < plans[plan].maxStake,\r\n            \"This pool is full\"\r\n        );\r\n        address glaTokenAddress = IGameManager(gameManager).getContract(\r\n            \"GLAToken\"\r\n        );\r\n        \r\n        User storage user = users[msg.sender];\r\n        IGLAToken(glaTokenAddress).transferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            _amount\r\n        );\r\n        \r\n        IGLAMintOperator(glaMinter).mint(\r\n            address(this),\r\n            _amount.mul(plans[plan].percent).mul(plans[plan].time).div(100).div(365)\r\n        );\r\n        \r\n        uint256 idx = depositID ;\r\n        user.deposits[idx] = Deposit(\r\n            idx,\r\n            plan,\r\n            _amount,\r\n            block.timestamp\r\n        );\r\n        \r\n        totalStaked = totalStaked.add(_amount);\r\n        plans[plan].currentStake += _amount;\r\n        user.numberOfDeposits += 1;\r\n        user.depositIdx.push(idx);\r\n        depositID += 1;\r\n        emit NewDeposit(msg.sender, idx, plan, _amount);\r\n    }\r\n    \r\n    function unstakeGLA(uint256 idx) public {\r\n        bool mature = _afterMaturity(idx);\r\n        \r\n        if (mature){\r\n            _unstakeAfterMaturity(idx);\r\n        }\r\n        else{\r\n            _unstakeBeforeMaturity(idx);\r\n        }\r\n    }\r\n\r\n    function _unstakeAfterMaturity(uint256 idx) internal {\r\n\r\n        User storage user = users[msg.sender];\r\n        Plan memory plan = plans[user.deposits[idx].plan];\r\n        \r\n        uint256 principal = user.deposits[idx].amount;\r\n        uint256 reward = principal.mul(plan.percent)\r\n                                    .mul(plan.time)\r\n                                    .div(100)\r\n                                    .div(365);\r\n\r\n        uint256 withdrawalAmount = principal.add(reward); \r\n\r\n        totalStaked -= principal;\r\n        plans[user.deposits[idx].plan].currentStake -= principal;\r\n        delete users[msg.sender].deposits[idx];\r\n        user.depositIdx = remove(idx, user.depositIdx);\r\n        user.numberOfDeposits -= 1;\r\n\r\n        require(withdrawalAmount > 0, \"Nothing to unstake\");\r\n\r\n        address glaTokenAddress = IGameManager(gameManager).getContract(\"GLAToken\");\r\n        IGLAToken(glaTokenAddress).transfer(\r\n            msg.sender,\r\n            withdrawalAmount\r\n        );\r\n\r\n        emit UnstakeAfterMaturity(msg.sender, idx, withdrawalAmount, block.timestamp);\r\n    }\r\n\r\n    function _unstakeBeforeMaturity(uint256 idx) internal {\r\n        User storage user = users[msg.sender];\r\n        address glaTokenAddress = IGameManager(gameManager).getContract(\"GLAToken\");\r\n        Plan memory plan = plans[user.deposits[idx].plan];\r\n        \r\n        uint256 principal = user.deposits[idx].amount;\r\n        uint256 intended_reward = principal.mul(plan.percent)\r\n                                            .mul(plan.time)\r\n                                            .div(100)\r\n                                            .div(365);\r\n\r\n        totalStaked -= principal;\r\n        plans[user.deposits[idx].plan].currentStake -= principal;\r\n        delete users[msg.sender].deposits[idx];\r\n        user.depositIdx = remove(idx, user.depositIdx);\r\n        \r\n        require(principal > 0, \"Nothing to unstake\");\r\n        IGLAToken(glaTokenAddress).burn(intended_reward);\r\n        \r\n        user.numberOfDeposits -= 1;\r\n\r\n        IGLAToken(glaTokenAddress).transfer(\r\n            msg.sender,\r\n            principal\r\n        );\r\n\r\n        emit UnstakeBeforeMaturity(msg.sender, idx, principal, block.timestamp);\r\n    }\r\n\r\n    function _afterMaturity(uint256 idx) public view returns(bool) {\r\n        User storage user = users[msg.sender];\r\n        Plan memory plan = plans[user.deposits[idx].plan];\r\n\r\n        return block.timestamp >= user.deposits[idx].start + plan.time.mul(TIME_STEP);\r\n    }\r\n\r\n    function adminEmergencyWithdraw() public onlyOwner {\r\n        address glaTokenAddress = IGameManager(gameManager).getContract(\r\n            \"GLAToken\"\r\n        );\r\n        IGLAToken(glaTokenAddress).transfer(\r\n            msg.sender,\r\n            IGLAToken(glaTokenAddress).balanceOf(address(this))\r\n        );\r\n    }\r\n\r\n    function getPlanInfo(uint8 plan)\r\n        public\r\n        view\r\n        returns (uint256 time, uint256 percent)\r\n    {\r\n        time = plans[plan].time;\r\n        percent = plans[plan].percent;\r\n    }\r\n\r\n    function getUserNumberOfDeposits(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return users[userAddress].numberOfDeposits;\r\n    }\r\n\r\n    function getUserTotalDeposits(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256 amount)\r\n    {\r\n        for (uint256 i = 0; i < users[userAddress].numberOfDeposits; i++) {\r\n            uint256 idx = users[userAddress].depositIdx[i];\r\n            amount = amount.add(users[userAddress].deposits[idx].amount);\r\n        }\r\n    }\r\n\r\n    function getUserDepositInfo(address userAddress)\r\n        public\r\n        view\r\n        returns (DepositInfo[] memory)\r\n    {\r\n        DepositInfo[] memory result = new DepositInfo[](\r\n            users[userAddress].depositIdx.length\r\n        );\r\n        \r\n        User storage user = users[userAddress];\r\n\r\n        for (uint256 i; i < user.depositIdx.length; i++) {\r\n            uint256 idx = user.depositIdx[i];\r\n            result[i].depositIndex = user.deposits[idx].index;\r\n            result[i].amountDeposit = user.deposits[idx].amount;\r\n            result[i].plan = user.deposits[idx].plan;\r\n            result[i].percent = plans[result[i].plan].percent;\r\n            result[i].start = user.deposits[idx].start;\r\n            result[i].finish = user.deposits[idx].start.add(\r\n                plans[user.deposits[idx].plan].time.mul(TIME_STEP)\r\n            );\r\n\r\n            uint256 interestRate = block.timestamp < result[i].finish\r\n                ? block.timestamp.sub(result[i].start).div(TIME_STEP)\r\n                : plans[user.deposits[idx].plan].time;\r\n\r\n            result[i].amountGain = user\r\n                .deposits[idx]\r\n                .amount\r\n                .mul(result[i].percent)\r\n                .mul(interestRate)\r\n                .div(100)\r\n                .div(365);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function remove(uint256 _valueToFindAndRemove, uint256[] memory _array) internal pure returns(uint256[] memory) {\r\n        uint256[] memory auxArray = new uint256[](_array.length - 1);\r\n        \r\n        uint256 i = 0;\r\n        uint256 j = 0;\r\n        \r\n        while(i<_array.length){\r\n            if(_array[i] != _valueToFindAndRemove){\r\n                auxArray[j] = _array[i];\r\n                j += 1;\r\n                i += 1;\r\n            }\r\n            else{\r\n                i+=1;\r\n            }\r\n        }\r\n        \r\n        return auxArray;\r\n    }\r\n    \r\n    \r\n    function setGLAMinter(address _glaMinter) public onlyOwner {\r\n        glaMinter = _glaMinter;\r\n    }\r\n\r\n    function setGameManager(address _gameManager) public onlyOwner {\r\n        gameManager = _gameManager;\r\n    }\r\n}\r\n\r\ninterface IGLAToken is IERC20 {\r\n    function burn(uint256 amount) external;\r\n}\r\n\r\ninterface IGLAMintOperator {\r\n    function mint(address to, uint256 amount) external;\r\n}\r\n\r\ninterface IGameManager {\r\n    function getContract(string memory contract_)\r\n        external\r\n        view\r\n        returns (address);\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gameManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"UnstakeAfterMaturity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"UnstakeBeforeMaturity\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIN_STAKE_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"_afterMaturity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminEmergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"}],\"name\":\"getPlanInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDepositInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"depositIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountGain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finish\",\"type\":\"uint256\"}],\"internalType\":\"struct GLAStaking.DepositInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserNumberOfDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"glaMinter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_glaMinter\",\"type\":\"address\"}],\"name\":\"setGLAMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gameManager\",\"type\":\"address\"}],\"name\":\"setGameManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"}],\"name\":\"stakeGLA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"unstakeGLA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GLAStaking", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000c03236d962627f4c6078975199dfb74f68d01ad0000000000000000000000000e44a86ef87df9f7494196973096d0de4ce376ed2", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9adc930ca850532d7da4caa3a3862a0c73c2acbd0240107b54ef4692fe43ccae"}