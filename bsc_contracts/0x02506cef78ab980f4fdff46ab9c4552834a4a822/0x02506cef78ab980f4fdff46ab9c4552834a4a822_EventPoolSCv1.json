{"SourceCode": "// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The initial owner is set to the address provided by the deployer. This can\r\n * later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        if (initialOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\ncontract EventPoolSCv1 is ReentrancyGuard, Ownable {\r\n    struct Pool {\r\n        address owner;\r\n        address token;\r\n        uint256 rewardPerMessage;\r\n        uint256 totalRewardPool;\r\n        uint256 startDate;\r\n        string name;\r\n    }\r\n\r\n    Pool[] public pools;\r\n    mapping(address => mapping(address => uint256)) public claimable;\r\n    mapping(address => uint256) public totalDeposited;\r\n    mapping(address => uint256) public totalClaimed;\r\n\r\n    event PoolCreated(uint256 indexed poolId, address indexed owner, address token, uint256 rewardPerMessage, uint256 totalRewardPool, uint256 startDate, string name);\r\n    event PoolBalanceAdded(address indexed participant, address indexed token, uint256 amount);\r\n    event PoolBalanceClaimed(address indexed token, address indexed claimer, uint256 netReward);\r\n    event PoolCancelled(uint256 indexed poolId, uint256 refundAmount);\r\n    event PoolStartDateModified(uint256 indexed poolId, uint256 newStartDate);\r\n    event PoolNameModified(uint256 indexed poolId, string newName);\r\n\r\n\r\n    mapping(address => bool) public whitelistedTokens;\r\n    address[] public whitelistedTokenAddresses;\r\n\r\n    event TokenWhitelisted(address indexed tokenAddress);\r\n    event TokenRemovedFromWhitelist(address indexed tokenAddress);\r\n\r\n\r\n    address public taxWallet;\r\n    uint256 public taxPercentage;\r\n\r\n    event TaxChanged(uint256 newTaxPercentage);\r\n    event TaxWalletChanged(address newTaxWallet);\r\n\r\n    constructor(address authorizedWallet) Ownable(msg.sender) {\r\n        addTokenToWhitelist(0x55d398326f99059fF775485246999027B3197955);\r\n        addTokenToWhitelist(0x0000000000000000000000000000000000000000);\r\n        setAuthorised(authorizedWallet, true);\r\n        taxWallet = msg.sender;\r\n        taxPercentage = 10;\r\n    }\r\n\r\n    // pool\r\n    function createPoolAndDeposit(address token, uint256 rewardPerMessage, uint256 totalRewardPool, uint256 startDate, string memory name) external payable returns (uint256 poolId) {\r\n        require(whitelistedTokens[token], \"Token not whitelisted\");\r\n        require(startDate > block.timestamp + 1 days, \"Start date must be at least 24 hours from now\");\r\n\r\n        Pool memory newPool;\r\n        newPool.owner = msg.sender;\r\n        newPool.token = token;\r\n        newPool.rewardPerMessage = rewardPerMessage;\r\n        newPool.totalRewardPool = totalRewardPool;\r\n        newPool.startDate = startDate;\r\n        newPool.name = name;\r\n        pools.push(newPool);\r\n        poolId = pools.length - 1;\r\n\r\n        if (token == address(0)) {\r\n            require(msg.value == totalRewardPool, \"Incorrect amount of BNB\");\r\n        } else {\r\n            require(IERC20(token).transferFrom(msg.sender, address(this), totalRewardPool), \"Transfer failed\");\r\n        }\r\n\r\n        totalDeposited[token] += totalRewardPool;\r\n\r\n        emit PoolCreated(poolId, msg.sender, token, rewardPerMessage, totalRewardPool, startDate, name);\r\n    }\r\n\r\n    function modifyPoolName(uint256 poolId, string memory newName) external {\r\n        require(poolId < pools.length, \"Invalid pool ID\");\r\n        Pool storage poolToModify = pools[poolId];\r\n        \r\n        require(poolToModify.owner == msg.sender, \"Not the pool owner\");\r\n        require(block.timestamp < poolToModify.startDate - 1 days, \"Cannot modify pool name within 24 hours of start\");\r\n        \r\n        poolToModify.name = newName;\r\n        emit PoolNameModified(poolId, newName); \r\n    }\r\n\r\n    function modifyStartDate(uint256 poolId, uint256 newStartDate) external {\r\n        require(poolId < pools.length, \"Invalid pool ID\");\r\n        Pool storage poolToModify = pools[poolId];\r\n        \r\n        require(poolToModify.owner == msg.sender, \"Not the pool owner\");\r\n        require(newStartDate > block.timestamp + 1 days, \"Cannot modify start date within 24 hours of start\");\r\n        \r\n        poolToModify.startDate = newStartDate;\r\n        emit PoolStartDateModified(poolId, newStartDate);\r\n    }\r\n\r\n    function addBalance(address participant, address token, uint256 amount) external {\r\n        require(authorised[msg.sender], \"Agent not authorised\");\r\n        \r\n        uint256 potentialTotalClaimed = totalClaimed[token] + claimable[participant][token] + amount;\r\n        require(potentialTotalClaimed <= totalDeposited[token], \"Amount exceeds total deposited for the token\");\r\n\r\n        claimable[participant][token] += amount;\r\n\r\n        emit PoolBalanceAdded(participant, token, amount);\r\n    }\r\n\r\n    function claim(address token) external nonReentrant {\r\n      uint256 totalReward = claimable[msg.sender][token];\r\n      require(totalReward > 0, \"No claimable amount found\");\r\n\r\n      uint256 taxAmount = (totalReward * taxPercentage) / 100;\r\n      uint256 amountAfterTax = totalReward - taxAmount;\r\n\r\n      totalClaimed[token] += totalReward;\r\n\r\n      claimable[msg.sender][token] = 0;\r\n\r\n      if (token == address(0)) {\r\n          payable(taxWallet).transfer(taxAmount);\r\n          payable(msg.sender).transfer(amountAfterTax);\r\n      } else {\r\n          require(IERC20(token).transfer(taxWallet, taxAmount), \"Tax transfer failed\");\r\n          require(IERC20(token).transfer(msg.sender, amountAfterTax), \"Transfer failed\");\r\n      }\r\n\r\n      emit PoolBalanceClaimed(token, msg.sender, amountAfterTax);\r\n  }\r\n\r\n    function cancelAndRefundPool(uint256 poolId) external onlyOwner {\r\n        require(poolId < pools.length, \"Invalid pool ID\");\r\n        Pool storage poolToCancel = pools[poolId];\r\n        \r\n        require(poolToCancel.owner != address(0), \"Already cancelled\");\r\n        \r\n        uint256 refundAmount = poolToCancel.totalRewardPool;\r\n\r\n        address owner = poolToCancel.owner;\r\n        poolToCancel.owner = address(0);\r\n        \r\n        if (refundAmount > 0) {\r\n            if (poolToCancel.token == address(0)) {\r\n                payable(owner).transfer(refundAmount);\r\n            } else {\r\n                require(IERC20(poolToCancel.token).transfer(owner, refundAmount), \"Transfer failed\");\r\n            }\r\n        }\r\n      \r\n        emit PoolCancelled(poolId, refundAmount);\r\n    }\r\n\r\n    function getClaimable(address user, address[] memory tokens) public view returns (uint256[] memory) {\r\n        uint256[] memory claimableAmounts = new uint256[](tokens.length);\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            claimableAmounts[i] = claimable[user][tokens[i]];\r\n        }\r\n        return claimableAmounts;\r\n    }\r\n\r\n    function setTaxPercentage(uint256 _taxPercentage) external onlyOwner {\r\n        require(_taxPercentage >= 5 && _taxPercentage <= 50, \"Tax percentage should be between 5 and 50\");\r\n        taxPercentage = _taxPercentage;\r\n        emit TaxChanged(_taxPercentage);\r\n    }\r\n\r\n    function setTaxWallet(address _taxWallet) external onlyOwner {\r\n        require(_taxWallet != address(0), \"Invalid tax wallet address\");\r\n        taxWallet = _taxWallet;\r\n        emit TaxWalletChanged(_taxWallet);\r\n    }\r\n\r\n    function getWhitelistedTokens() public view returns (address[] memory) {\r\n        return whitelistedTokenAddresses;\r\n    }\r\n\r\n    function addTokenToWhitelist(address tokenAddress) public onlyOwner {\r\n        require(!whitelistedTokens[tokenAddress], \"Already whitelisted, can't add\");\r\n        whitelistedTokens[tokenAddress] = true;\r\n        whitelistedTokenAddresses.push(tokenAddress);\r\n        emit TokenWhitelisted(tokenAddress);\r\n    }    \r\n\r\n    function removeTokenFromWhitelist(address tokenAddress) external onlyOwner {\r\n        require(whitelistedTokens[tokenAddress], \"Not whitelisted, can't remove\");\r\n        whitelistedTokens[tokenAddress] = false;\r\n        for (uint256 i = 0; i < whitelistedTokenAddresses.length; i++) {\r\n            if (whitelistedTokenAddresses[i] == tokenAddress) {\r\n                whitelistedTokenAddresses[i] = whitelistedTokenAddresses[whitelistedTokenAddresses.length - 1];\r\n                whitelistedTokenAddresses.pop();\r\n                break;\r\n            }\r\n        }\r\n        emit TokenRemovedFromWhitelist(tokenAddress);\r\n    }\r\n\r\n    mapping(address => bool) private authorised;\r\n\r\n    event Authorised(address indexed user, bool indexed isAuthorised);\r\n    function setAuthorised(address _user, bool _isUserAuthorised) public onlyOwner {\r\n      require(authorised[_user] != _isUserAuthorised, authorised[_user] ? \"User is already a manager\" : \"User doesn't have manager rights\");\r\n      authorised[_user] = _isUserAuthorised;\r\n      emit Authorised(_user, _isUserAuthorised);\r\n    }\r\n\r\n    function isAuthorised(address _user) public view returns (bool) {\r\n      return authorised[_user];\r\n    }\r\n\r\n    \r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authorizedWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isAuthorised\",\"type\":\"bool\"}],\"name\":\"Authorised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PoolBalanceAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"netReward\",\"type\":\"uint256\"}],\"name\":\"PoolBalanceClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundAmount\",\"type\":\"uint256\"}],\"name\":\"PoolCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerMessage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalRewardPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"PoolNameModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStartDate\",\"type\":\"uint256\"}],\"name\":\"PoolStartDateModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTaxPercentage\",\"type\":\"uint256\"}],\"name\":\"TaxChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTaxWallet\",\"type\":\"address\"}],\"name\":\"TaxWalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"TokenRemovedFromWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"TokenWhitelisted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"addTokenToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"cancelAndRefundPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerMessage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewardPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"createPoolAndDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getClaimable\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhitelistedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isAuthorised\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"modifyPoolName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newStartDate\",\"type\":\"uint256\"}],\"name\":\"modifyStartDate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerMessage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewardPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"removeTokenFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isUserAuthorised\",\"type\":\"bool\"}],\"name\":\"setAuthorised\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taxPercentage\",\"type\":\"uint256\"}],\"name\":\"setTaxPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_taxWallet\",\"type\":\"address\"}],\"name\":\"setTaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whitelistedTokenAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "EventPoolSCv1", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000694fbd84e78fd9d05d12969cf333a1e52f3539f2", "EVMVersion": "paris", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c14e090d86bcf7b09004b5771c5cb17be51d4c8a1bb1796da3c8efbad5027822"}