{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/Permit2/IAllowanceTransfer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IEIP712 } from \\\"./IEIP712.sol\\\";\\n\\n/// @title AllowanceTransfer\\n/// @notice Handles ERC20 token permissions through signature based allowance setting and ERC20 token transfers by checking allowed amounts\\n/// @dev Requires user's token approval on the Permit2 contract\\ninterface IAllowanceTransfer is IEIP712 {\\n    /// @notice Thrown when an allowance on a token has expired.\\n    /// @param deadline The timestamp at which the allowed amount is no longer valid\\n    error AllowanceExpired(uint256 deadline);\\n\\n    /// @notice Thrown when an allowance on a token has been depleted.\\n    /// @param amount The maximum amount allowed\\n    error InsufficientAllowance(uint256 amount);\\n\\n    /// @notice Thrown when too many nonces are invalidated.\\n    error ExcessiveInvalidation();\\n\\n    /// @notice Emits an event when the owner successfully invalidates an ordered nonce.\\n    event NonceInvalidation(address indexed owner, address indexed token, address indexed spender, uint48 newNonce, uint48 oldNonce);\\n\\n    /// @notice Emits an event when the owner successfully sets permissions on a token for the spender.\\n    event Approval(address indexed owner, address indexed token, address indexed spender, uint160 amount, uint48 expiration);\\n\\n    /// @notice Emits an event when the owner successfully sets permissions using a permit signature on a token for the spender.\\n    event Permit(address indexed owner, address indexed token, address indexed spender, uint160 amount, uint48 expiration, uint48 nonce);\\n\\n    /// @notice Emits an event when the owner sets the allowance back to 0 with the lockdown function.\\n    event Lockdown(address indexed owner, address token, address spender);\\n\\n    /// @notice The permit data for a token\\n    struct PermitDetails {\\n        // ERC20 token address\\n        address token;\\n        // the maximum amount allowed to spend\\n        uint160 amount;\\n        // timestamp at which a spender's token allowances become invalid\\n        uint48 expiration;\\n        // an incrementing value indexed per owner,token,and spender for each signature\\n        uint48 nonce;\\n    }\\n\\n    /// @notice The permit message signed for a single token allowance\\n    struct PermitSingle {\\n        // the permit data for a single token alownce\\n        PermitDetails details;\\n        // address permissioned on the allowed tokens\\n        address spender;\\n        // deadline on the permit signature\\n        uint256 sigDeadline;\\n    }\\n\\n    /// @notice The permit message signed for multiple token allowances\\n    struct PermitBatch {\\n        // the permit data for multiple token allowances\\n        PermitDetails[] details;\\n        // address permissioned on the allowed tokens\\n        address spender;\\n        // deadline on the permit signature\\n        uint256 sigDeadline;\\n    }\\n\\n    /// @notice The saved permissions\\n    /// @dev This info is saved per owner, per token, per spender and all signed over in the permit message\\n    /// @dev Setting amount to type(uint160).max sets an unlimited approval\\n    struct PackedAllowance {\\n        // amount allowed\\n        uint160 amount;\\n        // permission expiry\\n        uint48 expiration;\\n        // an incrementing value indexed per owner,token,and spender for each signature\\n        uint48 nonce;\\n    }\\n\\n    /// @notice A token spender pair.\\n    struct TokenSpenderPair {\\n        // the token the spender is approved\\n        address token;\\n        // the spender address\\n        address spender;\\n    }\\n\\n    /// @notice Details for a token transfer.\\n    struct AllowanceTransferDetails {\\n        // the owner of the token\\n        address from;\\n        // the recipient of the token\\n        address to;\\n        // the amount of the token\\n        uint160 amount;\\n        // the token to be transferred\\n        address token;\\n    }\\n\\n    /// @notice A mapping from owner address to token address to spender address to PackedAllowance struct, which contains details and conditions of the approval.\\n    /// @notice The mapping is indexed in the above order see: allowance[ownerAddress][tokenAddress][spenderAddress]\\n    /// @dev The packed slot holds the allowed amount, expiration at which the allowed amount is no longer valid, and current nonce thats updated on any signature based approvals.\\n    function allowance(address user, address token, address spender) external view returns (uint160 amount, uint48 expiration, uint48 nonce);\\n\\n    /// @notice Approves the spender to use up to amount of the specified token up until the expiration\\n    /// @param token The token to approve\\n    /// @param spender The spender address to approve\\n    /// @param amount The approved amount of the token\\n    /// @param expiration The timestamp at which the approval is no longer valid\\n    /// @dev The packed allowance also holds a nonce, which will stay unchanged in approve\\n    /// @dev Setting amount to type(uint160).max sets an unlimited approval\\n    function approve(address token, address spender, uint160 amount, uint48 expiration) external;\\n\\n    /// @notice Permit a spender to a given amount of the owners token via the owner's EIP-712 signature\\n    /// @dev May fail if the owner's nonce was invalidated in-flight by invalidateNonce\\n    /// @param owner The owner of the tokens being approved\\n    /// @param permitSingle Data signed over by the owner specifying the terms of approval\\n    /// @param signature The owner's signature over the permit data\\n    function permit(address owner, PermitSingle memory permitSingle, bytes calldata signature) external;\\n\\n    /// @notice Permit a spender to the signed amounts of the owners tokens via the owner's EIP-712 signature\\n    /// @dev May fail if the owner's nonce was invalidated in-flight by invalidateNonce\\n    /// @param owner The owner of the tokens being approved\\n    /// @param permitBatch Data signed over by the owner specifying the terms of approval\\n    /// @param signature The owner's signature over the permit data\\n    function permit(address owner, PermitBatch memory permitBatch, bytes calldata signature) external;\\n\\n    /// @notice Transfer approved tokens from one address to another\\n    /// @param from The address to transfer from\\n    /// @param to The address of the recipient\\n    /// @param amount The amount of the token to transfer\\n    /// @param token The token address to transfer\\n    /// @dev Requires the from address to have approved at least the desired amount\\n    /// of tokens to msg.sender.\\n    function transferFrom(address from, address to, uint160 amount, address token) external;\\n\\n    /// @notice Transfer approved tokens in a batch\\n    /// @param transferDetails Array of owners, recipients, amounts, and tokens for the transfers\\n    /// @dev Requires the from addresses to have approved at least the desired amount\\n    /// of tokens to msg.sender.\\n    function transferFrom(AllowanceTransferDetails[] calldata transferDetails) external;\\n\\n    /// @notice Enables performing a \\\"lockdown\\\" of the sender's Permit2 identity\\n    /// by batch revoking approvals\\n    /// @param approvals Array of approvals to revoke.\\n    function lockdown(TokenSpenderPair[] calldata approvals) external;\\n\\n    /// @notice Invalidate nonces for a given (token, spender) pair\\n    /// @param token The token to invalidate nonces for\\n    /// @param spender The spender to invalidate nonces for\\n    /// @param newNonce The new nonce to set. Invalidates all nonces less than it.\\n    /// @dev Can't invalidate more than 2**16 nonces per transaction.\\n    function invalidateNonces(address token, address spender, uint48 newNonce) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/Permit2/IEIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IEIP712 {\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/Permit2/IPermit2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { ISignatureTransfer } from \\\"./ISignatureTransfer.sol\\\";\\nimport { IAllowanceTransfer } from \\\"./IAllowanceTransfer.sol\\\";\\n\\n/// @notice Permit2 handles signature-based transfers in SignatureTransfer and allowance-based transfers in AllowanceTransfer.\\n/// @dev Users must approve Permit2 before calling any of the transfer functions.\\ninterface IPermit2 is ISignatureTransfer, IAllowanceTransfer {\\n    // IPermit2 unifies the two interfaces so users have maximal flexibility with their approval.\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/Permit2/ISignatureTransfer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IEIP712 } from \\\"./IEIP712.sol\\\";\\n\\n/// @title SignatureTransfer\\n/// @notice Handles ERC20 token transfers through signature based actions\\n/// @dev Requires user's token approval on the Permit2 contract\\ninterface ISignatureTransfer is IEIP712 {\\n    /// @notice Thrown when the requested amount for a transfer is larger than the permissioned amount\\n    /// @param maxAmount The maximum amount a spender can request to transfer\\n    error InvalidAmount(uint256 maxAmount);\\n\\n    /// @notice Thrown when the number of tokens permissioned to a spender does not match the number of tokens being transferred\\n    /// @dev If the spender does not need to transfer the number of tokens permitted, the spender can request amount 0 to be transferred\\n    error LengthMismatch();\\n\\n    /// @notice Emits an event when the owner successfully invalidates an unordered nonce.\\n    event UnorderedNonceInvalidation(address indexed owner, uint256 word, uint256 mask);\\n\\n    /// @notice The token and amount details for a transfer signed in the permit transfer signature\\n    struct TokenPermissions {\\n        // ERC20 token address\\n        address token;\\n        // the maximum amount that can be spent\\n        uint256 amount;\\n    }\\n\\n    /// @notice The signed permit message for a single token transfer\\n    struct PermitTransferFrom {\\n        TokenPermissions permitted;\\n        // a unique value for every token owner's signature to prevent signature replays\\n        uint256 nonce;\\n        // deadline on the permit signature\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Specifies the recipient address and amount for batched transfers.\\n    /// @dev Recipients and amounts correspond to the index of the signed token permissions array.\\n    /// @dev Reverts if the requested amount is greater than the permitted signed amount.\\n    struct SignatureTransferDetails {\\n        // recipient address\\n        address to;\\n        // spender requested amount\\n        uint256 requestedAmount;\\n    }\\n\\n    /// @notice Used to reconstruct the signed permit message for multiple token transfers\\n    /// @dev Do not need to pass in spender address as it is required that it is msg.sender\\n    /// @dev Note that a user still signs over a spender address\\n    struct PermitBatchTransferFrom {\\n        // the tokens and corresponding amounts permitted for a transfer\\n        TokenPermissions[] permitted;\\n        // a unique value for every token owner's signature to prevent signature replays\\n        uint256 nonce;\\n        // deadline on the permit signature\\n        uint256 deadline;\\n    }\\n\\n    /// @notice A map from token owner address and a caller specified word index to a bitmap. Used to set bits in the bitmap to prevent against signature replay protection\\n    /// @dev Uses unordered nonces so that permit messages do not need to be spent in a certain order\\n    /// @dev The mapping is indexed first by the token owner, then by an index specified in the nonce\\n    /// @dev It returns a uint256 bitmap\\n    /// @dev The index, or wordPosition is capped at type(uint248).max\\n    function nonceBitmap(address, uint256) external view returns (uint256);\\n\\n    /// @notice Transfers a token using a signed permit message\\n    /// @dev Reverts if the requested amount is greater than the permitted signed amount\\n    /// @param permit The permit data signed over by the owner\\n    /// @param owner The owner of the tokens to transfer\\n    /// @param transferDetails The spender's requested transfer details for the permitted token\\n    /// @param signature The signature to verify\\n    function permitTransferFrom(\\n        PermitTransferFrom memory permit,\\n        SignatureTransferDetails calldata transferDetails,\\n        address owner,\\n        bytes calldata signature\\n    ) external;\\n\\n    /// @notice Transfers a token using a signed permit message\\n    /// @notice Includes extra data provided by the caller to verify signature over\\n    /// @dev The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definition\\n    /// @dev Reverts if the requested amount is greater than the permitted signed amount\\n    /// @param permit The permit data signed over by the owner\\n    /// @param owner The owner of the tokens to transfer\\n    /// @param transferDetails The spender's requested transfer details for the permitted token\\n    /// @param witness Extra data to include when checking the user signature\\n    /// @param witnessTypeString The EIP-712 type definition for remaining string stub of the typehash\\n    /// @param signature The signature to verify\\n    function permitWitnessTransferFrom(\\n        PermitTransferFrom memory permit,\\n        SignatureTransferDetails calldata transferDetails,\\n        address owner,\\n        bytes32 witness,\\n        string calldata witnessTypeString,\\n        bytes calldata signature\\n    ) external;\\n\\n    /// @notice Transfers multiple tokens using a signed permit message\\n    /// @param permit The permit data signed over by the owner\\n    /// @param owner The owner of the tokens to transfer\\n    /// @param transferDetails Specifies the recipient and requested amount for the token transfer\\n    /// @param signature The signature to verify\\n    function permitTransferFrom(\\n        PermitBatchTransferFrom memory permit,\\n        SignatureTransferDetails[] calldata transferDetails,\\n        address owner,\\n        bytes calldata signature\\n    ) external;\\n\\n    /// @notice Transfers multiple tokens using a signed permit message\\n    /// @dev The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definition\\n    /// @notice Includes extra data provided by the caller to verify signature over\\n    /// @param permit The permit data signed over by the owner\\n    /// @param owner The owner of the tokens to transfer\\n    /// @param transferDetails Specifies the recipient and requested amount for the token transfer\\n    /// @param witness Extra data to include when checking the user signature\\n    /// @param witnessTypeString The EIP-712 type definition for remaining string stub of the typehash\\n    /// @param signature The signature to verify\\n    function permitWitnessTransferFrom(\\n        PermitBatchTransferFrom memory permit,\\n        SignatureTransferDetails[] calldata transferDetails,\\n        address owner,\\n        bytes32 witness,\\n        string calldata witnessTypeString,\\n        bytes calldata signature\\n    ) external;\\n\\n    /// @notice Invalidates the bits specified in mask for the bitmap at the word position\\n    /// @dev The wordPos is maxed at type(uint248).max\\n    /// @param wordPos A number to index the nonceBitmap at\\n    /// @param mask A bitmap masked against msg.sender's current bitmap at the word position\\n    function invalidateUnorderedNonces(uint256 wordPos, uint256 mask) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/Stargate/IStargateReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\ninterface IStargateReceiver {\\r\\n    function sgReceive(uint16 _chainId, bytes memory _srcAddress, uint256 _nonce, address _token, uint256 amountLD, bytes memory payload) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/Stargate/IStargateRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\ninterface IStargateRouter {\\r\\n    struct lzTxObj {\\r\\n        uint256 dstGasForCall;\\r\\n        uint256 dstNativeAmount;\\r\\n        bytes dstNativeAddr;\\r\\n    }\\r\\n\\r\\n    function addLiquidity(uint256 _poolId, uint256 _amountLD, address _to) external;\\r\\n\\r\\n    function swap(\\r\\n        uint16 _dstChainId,\\r\\n        uint256 _srcPoolId,\\r\\n        uint256 _dstPoolId,\\r\\n        address payable _refundAddress,\\r\\n        uint256 _amountLD,\\r\\n        uint256 _minAmountLD,\\r\\n        lzTxObj memory _lzTxParams,\\r\\n        bytes calldata _to,\\r\\n        bytes calldata _payload\\r\\n    ) external payable;\\r\\n\\r\\n    function redeemRemote(\\r\\n        uint16 _dstChainId,\\r\\n        uint256 _srcPoolId,\\r\\n        uint256 _dstPoolId,\\r\\n        address payable _refundAddress,\\r\\n        uint256 _amountLP,\\r\\n        uint256 _minAmountLD,\\r\\n        bytes calldata _to,\\r\\n        lzTxObj memory _lzTxParams\\r\\n    ) external payable;\\r\\n\\r\\n    function instantRedeemLocal(uint16 _srcPoolId, uint256 _amountLP, address _to) external returns (uint256);\\r\\n\\r\\n    function redeemLocal(\\r\\n        uint16 _dstChainId,\\r\\n        uint256 _srcPoolId,\\r\\n        uint256 _dstPoolId,\\r\\n        address payable _refundAddress,\\r\\n        uint256 _amountLP,\\r\\n        bytes calldata _to,\\r\\n        lzTxObj memory _lzTxParams\\r\\n    ) external payable;\\r\\n\\r\\n    function sendCredits(uint16 _dstChainId, uint256 _srcPoolId, uint256 _dstPoolId, address payable _refundAddress) external payable;\\r\\n\\r\\n    function quoteLayerZeroFee(\\r\\n        uint16 _dstChainId,\\r\\n        uint8 _functionType,\\r\\n        bytes calldata _toAddress,\\r\\n        bytes calldata _transferAndCallPayload,\\r\\n        lzTxObj memory _lzTxParams\\r\\n    ) external view returns (uint256, uint256);\\r\\n\\r\\n    function bridge() external view returns (address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/Uniswap/IMulticall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.19;\\n\\n/// @title Multicall interface\\n/// @notice Enables calling multiple methods in a single call to the contract\\ninterface IMulticall {\\n    /// @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\\n    /// @dev The `msg.value` should not be trusted for any method callable from multicall.\\n    /// @param data The encoded function data for each of the calls to make to this contract\\n    /// @return results The results from each of the calls passed in via data\\n    function multicall(bytes[] calldata data) external payable returns (bytes[] memory results);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/Uniswap/IMulticallExtended.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.19;\\n\\nimport \\\"./IMulticall.sol\\\";\\n\\n/// @title MulticallExtended interface\\n/// @notice Enables calling multiple methods in a single call to the contract with optional validation\\ninterface IMulticallExtended is IMulticall {\\n    /// @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\\n    /// @dev The `msg.value` should not be trusted for any method callable from multicall.\\n    /// @param deadline The time by which this function must be called before failing\\n    /// @param data The encoded function data for each of the calls to make to this contract\\n    /// @return results The results from each of the calls passed in via data\\n    function multicall(uint256 deadline, bytes[] calldata data) external payable returns (bytes[] memory results);\\n\\n    /// @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\\n    /// @dev The `msg.value` should not be trusted for any method callable from multicall.\\n    /// @param previousBlockhash The expected parent blockHash\\n    /// @param data The encoded function data for each of the calls to make to this contract\\n    /// @return results The results from each of the calls passed in via data\\n    function multicall(bytes32 previousBlockhash, bytes[] calldata data) external payable returns (bytes[] memory results);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/Uniswap/ISwapRouter02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.19;\\n\\nimport \\\"./IV2SwapRouter.sol\\\";\\nimport \\\"./IV3SwapRouter.sol\\\";\\nimport \\\"./IMulticallExtended.sol\\\";\\n\\n/// @title Router token swapping functionality\\ninterface ISwapRouter02 is IV2SwapRouter, IV3SwapRouter, IMulticallExtended {\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/Uniswap/IUniswapV3SwapCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.19;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/Uniswap/IV2SwapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.19;\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V2\\ninterface IV2SwapRouter {\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\n    /// @param amountIn The amount of token to swap\\n    /// @param amountOutMin The minimum amount of output that must be received\\n    /// @param path The ordered list of tokens to swap through\\n    /// @param to The recipient address\\n    /// @return amountOut The amount of the received token\\n    function swapExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to) external payable returns (uint256 amountOut);\\n\\n    /// @notice Swaps as little as possible of one token for an exact amount of another token\\n    /// @param amountOut The amount of token to swap for\\n    /// @param amountInMax The maximum amount of input that the caller will pay\\n    /// @param path The ordered list of tokens to swap through\\n    /// @param to The recipient address\\n    /// @return amountIn The amount of token to pay\\n    function swapTokensForExactTokens(uint256 amountOut, uint256 amountInMax, address[] calldata path, address to) external payable returns (uint256 amountIn);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/Uniswap/IV3SwapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.19;\\n\\nimport \\\"./IUniswapV3SwapCallback.sol\\\";\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface IV3SwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// that may remain in the router after the swap.\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// that may remain in the router after the swap.\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/Uniswap/IWETH9.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Interface for WETH9\\ninterface IWETH9 is IERC20 {\\n    /// @notice Deposit ether to get wrapped ether\\n    function deposit() external payable;\\n\\n    /// @notice Withdraw wrapped ether to get ether\\n    function withdraw(uint256) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(address token, address from, address to, uint256 value) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"STF\\\");\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(address token, address to, uint256 value) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"ST\\\");\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(address token, address to, uint256 value) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"SA\\\");\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{ value: value }(new bytes(0));\\n        require(success, \\\"STE\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/NativeWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Zaap.exchange Contracts (NativeWrapper.sol)\\npragma solidity ^0.8.19;\\n\\nimport { IWETH9 } from \\\"./interfaces/Uniswap/IWETH9.sol\\\";\\n\\nabstract contract NativeWrapper {\\n    address public immutable NATIVE_TOKEN_ADDRESS = address(0x0000000000000000000000000000000000455448);\\n\\n    IWETH9 public immutable wETH9;\\n\\n    constructor(IWETH9 wETH9_) {\\n        wETH9 = wETH9_;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Swapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Zaap.exchange Contracts (Swapper.sol)\\npragma solidity ^0.8.19;\\n\\nimport { IWETH9 } from \\\"./interfaces/Uniswap/IWETH9.sol\\\";\\nimport { ISwapRouter02 } from \\\"./interfaces/Uniswap/ISwapRouter02.sol\\\";\\nimport { IV3SwapRouter } from \\\"./interfaces/Uniswap/IV3SwapRouter.sol\\\";\\n\\nimport { TransferHelper } from \\\"./libraries/TransferHelper.sol\\\";\\n\\nabstract contract Swapper {\\n    ISwapRouter02 public immutable swapRouter02;\\n\\n    enum RouterVersion {\\n        v2,\\n        v3\\n    }\\n\\n    struct PathPart {\\n        address tokenAddress;\\n        uint24 poolFee;\\n    }\\n\\n    struct SwapParams {\\n        RouterVersion routerVersion;\\n        uint256 amountIn;\\n        PathPart[] pathParts;\\n        uint256 amountOutMin;\\n    }\\n\\n    constructor(address swapRouter02Address_) {\\n        swapRouter02 = ISwapRouter02(swapRouter02Address_);\\n    }\\n\\n    function _swapExact(\\n        uint256 totalAmountIn,\\n        SwapParams[] memory swapsParams,\\n        address fromTokenAddress,\\n        address toTokenAddress,\\n        bool revertOnError\\n    ) internal returns (uint256 totalAmountOut, bool errored) {\\n        totalAmountOut = 0;\\n        errored = false;\\n\\n        TransferHelper.safeApprove(fromTokenAddress, address(swapRouter02), totalAmountIn);\\n\\n        // Ensuring proportional distribution\\n        uint256 expectedTotalAmountIn = 0;\\n        for (uint8 swapParamIndex = 0; swapParamIndex < swapsParams.length; ) {\\n            SwapParams memory swapParams = swapsParams[swapParamIndex];\\n            expectedTotalAmountIn += swapParams.amountIn;\\n\\n            unchecked {\\n                swapParamIndex++;\\n            }\\n        }\\n        uint256 proportionFactor = (totalAmountIn * 1e18) / expectedTotalAmountIn;\\n\\n        for (uint8 swapParamIndex = 0; swapParamIndex < swapsParams.length; ) {\\n            SwapParams memory swapParams = swapsParams[swapParamIndex];\\n            PathPart[] memory pathParts = swapParams.pathParts;\\n\\n            PathPart memory firstPathPart = pathParts[0];\\n            if (firstPathPart.tokenAddress != fromTokenAddress) {\\n                if (revertOnError) {\\n                    revert(\\\"Swapper: `firstPathPart.tokenAddress` != `fromTokenAddress`\\\");\\n                } else {\\n                    errored = true;\\n                    break;\\n                }\\n            }\\n\\n            PathPart memory lastPathPart = pathParts[pathParts.length - 1];\\n            if (lastPathPart.tokenAddress != toTokenAddress) {\\n                if (revertOnError) {\\n                    revert(\\\"Swapper: `lastPathPart.tokenAddress` != `toTokenAddress`\\\");\\n                } else {\\n                    errored = true;\\n                    break;\\n                }\\n            }\\n\\n            uint256 amountIn = (swapParams.amountIn * proportionFactor) / 1e18;\\n            uint256 amountOutMin = (swapParams.amountOutMin * proportionFactor) / 1e18;\\n\\n            if (swapParams.routerVersion == RouterVersion.v3) {\\n                bytes memory pathParam;\\n                for (uint8 pathPartIndex = 0; pathPartIndex < swapParams.pathParts.length; ) {\\n                    PathPart memory pathPart = swapParams.pathParts[pathPartIndex];\\n                    if (pathPart.poolFee == uint24(0)) {\\n                        pathParam = abi.encodePacked(pathParam, pathPart.tokenAddress);\\n                    } else {\\n                        pathParam = abi.encodePacked(pathParam, pathPart.poolFee, pathPart.tokenAddress);\\n                    }\\n\\n                    unchecked {\\n                        pathPartIndex++;\\n                    }\\n                }\\n\\n                IV3SwapRouter.ExactInputParams memory inputParams = IV3SwapRouter.ExactInputParams({\\n                    path: pathParam,\\n                    recipient: address(this),\\n                    amountIn: amountIn,\\n                    amountOutMinimum: amountOutMin\\n                });\\n\\n                try swapRouter02.exactInput(inputParams) returns (uint256 amountOut) {\\n                    totalAmountOut += amountOut;\\n                } catch Error(string memory reason) {\\n                    if (revertOnError) {\\n                        revert(reason);\\n                    } else {\\n                        errored = true;\\n                        break;\\n                    }\\n                }\\n            } else if (swapParams.routerVersion == RouterVersion.v2) {\\n                address[] memory pathParam = new address[](swapParams.pathParts.length);\\n                for (uint8 pathPartIndex = 0; pathPartIndex < swapParams.pathParts.length; ) {\\n                    PathPart memory pathPart = swapParams.pathParts[pathPartIndex];\\n                    pathParam[pathPartIndex] = pathPart.tokenAddress;\\n\\n                    unchecked {\\n                        pathPartIndex++;\\n                    }\\n                }\\n\\n                try swapRouter02.swapExactTokensForTokens(amountIn, amountOutMin, pathParam, address(this)) returns (uint256 amountOut) {\\n                    totalAmountOut += amountOut;\\n                } catch Error(string memory reason) {\\n                    if (revertOnError) {\\n                        revert(reason);\\n                    } else {\\n                        errored = true;\\n                        break;\\n                    }\\n                }\\n            } else {\\n                revert(\\\"Swapper: `swapParams.routerVersion` must be either 0 or 1\\\");\\n            }\\n\\n            unchecked {\\n                swapParamIndex++;\\n            }\\n        }\\n        if (revertOnError) require(totalAmountOut > 0, \\\"Swapper: `totalAmountOut` must be > 0\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Zaap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Zaap.exchange Contracts (Zaap.sol)\\npragma solidity ^0.8.19;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Pausable } from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\nimport { NativeWrapper } from \\\"./NativeWrapper.sol\\\";\\nimport { Swapper } from \\\"./Swapper.sol\\\";\\nimport { ZaapIn } from \\\"./ZaapIn.sol\\\";\\nimport { ZaapOut } from \\\"./ZaapOut.sol\\\";\\n\\nimport { IWETH9 } from \\\"./interfaces/Uniswap/IWETH9.sol\\\";\\nimport { IStargateRouter } from \\\"./interfaces/Stargate/IStargateRouter.sol\\\";\\nimport { IPermit2 } from \\\"./interfaces/Permit2/IPermit2.sol\\\";\\nimport { IAllowanceTransfer } from \\\"./interfaces/Permit2/IAllowanceTransfer.sol\\\";\\n\\ncontract Zaap is NativeWrapper, Swapper, ZaapIn, ZaapOut {\\n    constructor(\\n        IWETH9 wETH9_,\\n        address swapRouter02Address_,\\n        IStargateRouter stargateRouter_,\\n        IPermit2 permit2_\\n    ) NativeWrapper(wETH9_) Swapper(swapRouter02Address_) ZaapIn(stargateRouter_, permit2_) ZaapOut(address(stargateRouter_)) {}\\n}\\n\"\r\n    },\r\n    \"contracts/ZaapIn.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\n// Zaap.exchange Contracts (ZaapIn.sol)\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport { Pausable } from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\n\\r\\nimport { NativeWrapper } from \\\"./NativeWrapper.sol\\\";\\r\\nimport { Swapper } from \\\"./Swapper.sol\\\";\\r\\n\\r\\nimport { IWETH9 } from \\\"./interfaces/Uniswap/IWETH9.sol\\\";\\r\\nimport { IStargateRouter } from \\\"./interfaces/Stargate/IStargateRouter.sol\\\";\\r\\nimport { IPermit2 } from \\\"./interfaces/Permit2/IPermit2.sol\\\";\\r\\nimport { IAllowanceTransfer } from \\\"./interfaces/Permit2/IAllowanceTransfer.sol\\\";\\r\\n\\r\\nimport { TransferHelper } from \\\"./libraries/TransferHelper.sol\\\";\\r\\n\\r\\nabstract contract ZaapIn is Ownable, Pausable, NativeWrapper, Swapper {\\r\\n    IStargateRouter public immutable stargateRouter;\\r\\n    IPermit2 public immutable permit2;\\r\\n\\r\\n    address public treasuryAddress;\\r\\n    uint8 public feeBps;\\r\\n\\r\\n    struct PartnerConfig {\\r\\n        address partnerAddress;\\r\\n        uint8 percentShare;\\r\\n    }\\r\\n    mapping(string => PartnerConfig) private partnerIdToPartnerConfig;\\r\\n\\r\\n    event ZaapedIn(\\r\\n        address srcSenderAddress,\\r\\n        address indexed srcTokenAddress,\\r\\n        uint srcTokenAmountIn,\\r\\n        uint16 srcPoolId,\\r\\n        address indexed bridgeTokenAddress,\\r\\n        uint256 bridgeAmount,\\r\\n        uint16 dstChainId,\\r\\n        uint16 dstPoolId,\\r\\n        address dstZaapAddress,\\r\\n        address indexed dstTokenAddress,\\r\\n        address dstRecipientAddress,\\r\\n        string partnerId\\r\\n    );\\r\\n\\r\\n    constructor(IStargateRouter stargateRouter_, IPermit2 permit2_) {\\r\\n        stargateRouter = stargateRouter_;\\r\\n        permit2 = permit2_;\\r\\n    }\\r\\n\\r\\n    function swap(\\r\\n        address srcTokenAddress,\\r\\n        uint160 srcTokenAmountIn,\\r\\n        SwapParams[] calldata srcSwapsParams,\\r\\n        uint16 srcPoolId,\\r\\n        address bridgeTokenAddress,\\r\\n        uint256 bridgeAmountOutMin,\\r\\n        uint16 dstChainId,\\r\\n        uint16 dstPoolId,\\r\\n        address dstZaapAddress,\\r\\n        address dstTokenAddress,\\r\\n        SwapParams[] calldata dstSwapsParams,\\r\\n        address dstRecipientAddress,\\r\\n        IAllowanceTransfer.PermitSingle calldata permitSingle,\\r\\n        bytes calldata signature,\\r\\n        IStargateRouter.lzTxObj calldata lzTxObj,\\r\\n        uint256 deadline,\\r\\n        string calldata partnerId\\r\\n    ) external payable whenNotPaused {\\r\\n        require(srcTokenAmountIn > 0, \\\"ZaapIn: `srcTokenAmountIn` must be > 0\\\");\\r\\n        if (deadline > 0) {\\r\\n            require(deadline >= block.timestamp, \\\"ZaapIn: `deadline` must be >= block.timestamp\\\");\\r\\n        }\\r\\n\\r\\n        bool srcTokenIsNative = srcTokenAddress == NATIVE_TOKEN_ADDRESS;\\r\\n\\r\\n        if (!srcTokenIsNative && permitSingle.spender == address(this)) {\\r\\n            permit2.permit(msg.sender, permitSingle, signature);\\r\\n        }\\r\\n        if (!srcTokenIsNative) {\\r\\n            permit2.transferFrom(msg.sender, address(this), srcTokenAmountIn, srcTokenAddress);\\r\\n        }\\r\\n\\r\\n        uint256 bridgeAmount = 0;\\r\\n        if (srcTokenAddress != bridgeTokenAddress) {\\r\\n            require(srcSwapsParams.length > 0, \\\"ZaapIn: `srcSwapsParams` must not be empty if `srcTokenAddress` != `bridgeTokenAddress`\\\");\\r\\n\\r\\n            // Wrapping if needed\\r\\n            if (srcTokenIsNative) {\\r\\n                require(msg.value >= srcTokenAmountIn, \\\"ZaapIn: `msg.value` must be >= `srcTokenAmountIn`\\\");\\r\\n                wETH9.deposit{ value: srcTokenAmountIn }();\\r\\n            }\\r\\n\\r\\n            (uint256 totalAmountOut, bool errored) = _swapExact(\\r\\n                srcTokenAmountIn,\\r\\n                srcSwapsParams,\\r\\n                srcTokenIsNative ? address(wETH9) : srcTokenAddress,\\r\\n                bridgeTokenAddress,\\r\\n                true\\r\\n            );\\r\\n            bridgeAmount = totalAmountOut;\\r\\n        } else {\\r\\n            bridgeAmount = srcTokenAmountIn;\\r\\n        }\\r\\n\\r\\n        if (feeBps > 0 && treasuryAddress != address(0)) {\\r\\n            uint256 feeAmount = (bridgeAmount / 10000) * feeBps;\\r\\n            bridgeAmount -= feeAmount;\\r\\n\\r\\n            if (bytes(partnerId).length > 0) {\\r\\n                PartnerConfig memory partnerConfig = partnerIdToPartnerConfig[partnerId];\\r\\n                if (partnerConfig.partnerAddress != address(0) && partnerConfig.percentShare > 0 && partnerConfig.percentShare <= 100) {\\r\\n                    uint256 partnerFeeAmount = (feeAmount / 100) * partnerConfig.percentShare;\\r\\n                    feeAmount -= partnerFeeAmount;\\r\\n                    TransferHelper.safeTransfer(bridgeTokenAddress, partnerConfig.partnerAddress, partnerFeeAmount);\\r\\n                }\\r\\n            }\\r\\n            if (feeAmount > 0) {\\r\\n                TransferHelper.safeTransfer(bridgeTokenAddress, treasuryAddress, feeAmount);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        TransferHelper.safeApprove(bridgeTokenAddress, address(stargateRouter), bridgeAmount);\\r\\n\\r\\n        stargateRouter.swap{ value: srcTokenIsNative ? msg.value - srcTokenAmountIn : msg.value }(\\r\\n            dstChainId,\\r\\n            srcPoolId,\\r\\n            dstPoolId,\\r\\n            payable(msg.sender),\\r\\n            bridgeAmount,\\r\\n            bridgeAmountOutMin,\\r\\n            lzTxObj,\\r\\n            abi.encodePacked(dstZaapAddress),\\r\\n            abi.encode(dstSwapsParams, dstTokenAddress, dstRecipientAddress)\\r\\n        );\\r\\n\\r\\n        emit ZaapedIn(\\r\\n            msg.sender,\\r\\n            srcTokenAddress,\\r\\n            srcTokenAmountIn,\\r\\n            srcPoolId,\\r\\n            bridgeTokenAddress,\\r\\n            bridgeAmount,\\r\\n            dstChainId,\\r\\n            dstPoolId,\\r\\n            dstZaapAddress,\\r\\n            dstTokenAddress,\\r\\n            dstRecipientAddress,\\r\\n            partnerId\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function setTreasuryAddress(address treasuryAddress_) external onlyOwner {\\r\\n        treasuryAddress = treasuryAddress_;\\r\\n    }\\r\\n\\r\\n    function setFeeBps(uint8 feeBps_) external onlyOwner {\\r\\n        require(feeBps_ <= 50, \\\"ZaapIn: `feeBps_` must be <= 50\\\");\\r\\n        feeBps = feeBps_;\\r\\n    }\\r\\n\\r\\n    function setPartnerConfigBatch(string[] calldata partnerIds, address[] calldata partnerAddresses, uint8[] calldata percentShares) external onlyOwner {\\r\\n        require(\\r\\n            partnerIds.length == partnerAddresses.length && partnerAddresses.length == percentShares.length,\\r\\n            \\\"ZaapIn: `partnerIds`, `partnerAddresses` and `percentShares` must have the same length\\\"\\r\\n        );\\r\\n        for (uint256 i = 0; i < partnerIds.length; i++) {\\r\\n            setPartnerConfig(partnerIds[i], partnerAddresses[i], percentShares[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setPartnerConfig(string calldata partnerId, address partnerAddress, uint8 percentShare) public onlyOwner {\\r\\n        require(bytes(partnerId).length > 0, \\\"ZaapIn: `partnerId` must not be empty\\\");\\r\\n        require(partnerAddress != address(0), \\\"ZaapIn: `partnerAddress` must not be address(0)\\\");\\r\\n        require(percentShare <= 100, \\\"ZaapIn: `percentShare` must be <= 100\\\");\\r\\n        partnerIdToPartnerConfig[partnerId] = PartnerConfig(partnerAddress, percentShare);\\r\\n    }\\r\\n\\r\\n    function deletePartnerConfig(string calldata partnerId) external onlyOwner {\\r\\n        require(bytes(partnerId).length > 0, \\\"ZaapIn: `partnerId` must not be empty\\\");\\r\\n        delete partnerIdToPartnerConfig[partnerId];\\r\\n    }\\r\\n\\r\\n    function pauseIn() external virtual onlyOwner {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    function unpauseIn() external virtual onlyOwner {\\r\\n        _unpause();\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/ZaapOut.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\n// Zaap.exchange Contracts (ZaapOut.sol)\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport { Pausable } from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\n\\r\\nimport { NativeWrapper } from \\\"./NativeWrapper.sol\\\";\\r\\nimport { Swapper } from \\\"./Swapper.sol\\\";\\r\\n\\r\\nimport { IStargateReceiver } from \\\"./interfaces/Stargate/IStargateReceiver.sol\\\";\\r\\nimport { IWETH9 } from \\\"./interfaces/Uniswap/IWETH9.sol\\\";\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport { TransferHelper } from \\\"./libraries/TransferHelper.sol\\\";\\r\\n\\r\\nabstract contract ZaapOut is Ownable, Pausable, NativeWrapper, Swapper, IStargateReceiver {\\r\\n    address public immutable stargateRouterAddress;\\r\\n\\r\\n    event ZaapErrored(string reason);\\r\\n    event ZaapedOut(\\r\\n        uint16 srcChainId,\\r\\n        bytes srcAddress,\\r\\n        uint nonce,\\r\\n        address bridgeTokenAddress,\\r\\n        uint bridgeAmountIn,\\r\\n        address dstTokenAddress,\\r\\n        uint256 dstTokenAmountOut,\\r\\n        address dstRecipientAddress\\r\\n    );\\r\\n\\r\\n    constructor(address stargateRouterAddress_) {\\r\\n        stargateRouterAddress = stargateRouterAddress_;\\r\\n    }\\r\\n\\r\\n    function sgReceive(\\r\\n        uint16 srcChainId,\\r\\n        bytes memory srcAddress,\\r\\n        uint nonce,\\r\\n        address bridgeTokenAddress,\\r\\n        uint bridgeAmountIn,\\r\\n        bytes memory payload\\r\\n    ) external whenNotPaused {\\r\\n        require(msg.sender == address(stargateRouterAddress), \\\"ZaapOut: `msg.sender` must be `stargateRouterAddress`\\\");\\r\\n        require(bridgeAmountIn > 0, \\\"ZaapOut: `bridgeAmountIn` must be > 0\\\");\\r\\n\\r\\n        (SwapParams[] memory dstSwapsParams, address dstTokenAddress, address dstRecipientAddress) = abi.decode(payload, (SwapParams[], address, address));\\r\\n\\r\\n        if (bridgeTokenAddress != dstTokenAddress) {\\r\\n            bool dstTokenIsNative = dstTokenAddress == NATIVE_TOKEN_ADDRESS;\\r\\n\\r\\n            if (dstSwapsParams.length > 0) {\\r\\n                (uint256 totalAmountOut, bool errored) = _swapExact(\\r\\n                    bridgeAmountIn,\\r\\n                    dstSwapsParams,\\r\\n                    bridgeTokenAddress,\\r\\n                    dstTokenIsNative ? address(wETH9) : dstTokenAddress,\\r\\n                    false\\r\\n                );\\r\\n                if (errored == false) {\\r\\n                    // Unwrapping if needed\\r\\n                    if (dstTokenIsNative) {\\r\\n                        wETH9.withdraw(totalAmountOut);\\r\\n                        TransferHelper.safeTransferETH(dstRecipientAddress, totalAmountOut);\\r\\n                    } else {\\r\\n                        TransferHelper.safeTransfer(dstTokenAddress, dstRecipientAddress, totalAmountOut);\\r\\n                    }\\r\\n                    emit ZaapedOut(srcChainId, srcAddress, nonce, bridgeTokenAddress, bridgeAmountIn, dstTokenAddress, totalAmountOut, dstRecipientAddress);\\r\\n                } else {\\r\\n                    if (totalAmountOut > 0) {\\r\\n                        // Unwrapping if needed\\r\\n                        if (dstTokenIsNative) {\\r\\n                            wETH9.withdraw(totalAmountOut);\\r\\n                            TransferHelper.safeTransferETH(dstRecipientAddress, totalAmountOut);\\r\\n                        } else {\\r\\n                            TransferHelper.safeTransfer(dstTokenAddress, dstRecipientAddress, totalAmountOut);\\r\\n                        }\\r\\n                    }\\r\\n                    uint256 bridgeAmountInLeft = IERC20(bridgeTokenAddress).balanceOf(address(this));\\r\\n                    if (bridgeAmountInLeft > 0) {\\r\\n                        TransferHelper.safeTransfer(bridgeTokenAddress, dstRecipientAddress, bridgeAmountInLeft);\\r\\n                    }\\r\\n                    emit ZaapErrored(\\\"ZaapOut: `_swap` errored\\\");\\r\\n                }\\r\\n            } else {\\r\\n                TransferHelper.safeTransfer(bridgeTokenAddress, dstRecipientAddress, bridgeAmountIn);\\r\\n                emit ZaapErrored(\\\"ZaapOut: `dstSwapsParams` must not be empty if `bridgeTokenAddress` != `dstTokenAddress`\\\");\\r\\n            }\\r\\n        } else {\\r\\n            TransferHelper.safeTransfer(bridgeTokenAddress, dstRecipientAddress, bridgeAmountIn);\\r\\n            emit ZaapedOut(srcChainId, srcAddress, nonce, bridgeTokenAddress, bridgeAmountIn, dstTokenAddress, bridgeAmountIn, dstRecipientAddress);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function pauseOut() external virtual onlyOwner {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    function unpauseOut() external virtual onlyOwner {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": true,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IWETH9\",\"name\":\"wETH9_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapRouter02Address_\",\"type\":\"address\"},{\"internalType\":\"contract IStargateRouter\",\"name\":\"stargateRouter_\",\"type\":\"address\"},{\"internalType\":\"contract IPermit2\",\"name\":\"permit2_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"ZaapErrored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"srcSenderAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"srcTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcTokenAmountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"srcPoolId\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bridgeTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bridgeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"dstChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"dstPoolId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dstZaapAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dstTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dstRecipientAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"partnerId\",\"type\":\"string\"}],\"name\":\"ZaapedIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridgeTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bridgeAmountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dstTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dstTokenAmountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dstRecipientAddress\",\"type\":\"address\"}],\"name\":\"ZaapedOut\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NATIVE_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"partnerId\",\"type\":\"string\"}],\"name\":\"deletePartnerConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeBps\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"permit2\",\"outputs\":[{\"internalType\":\"contract IPermit2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"feeBps_\",\"type\":\"uint8\"}],\"name\":\"setFeeBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"partnerId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"partnerAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"percentShare\",\"type\":\"uint8\"}],\"name\":\"setPartnerConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"partnerIds\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"partnerAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"percentShares\",\"type\":\"uint8[]\"}],\"name\":\"setPartnerConfigBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasuryAddress_\",\"type\":\"address\"}],\"name\":\"setTreasuryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bridgeTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bridgeAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"sgReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stargateRouter\",\"outputs\":[{\"internalType\":\"contract IStargateRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stargateRouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"srcTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"srcTokenAmountIn\",\"type\":\"uint160\"},{\"components\":[{\"internalType\":\"enum Swapper.RouterVersion\",\"name\":\"routerVersion\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"poolFee\",\"type\":\"uint24\"}],\"internalType\":\"struct Swapper.PathPart[]\",\"name\":\"pathParts\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"internalType\":\"struct Swapper.SwapParams[]\",\"name\":\"srcSwapsParams\",\"type\":\"tuple[]\"},{\"internalType\":\"uint16\",\"name\":\"srcPoolId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"bridgeTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bridgeAmountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"dstPoolId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"dstZaapAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstTokenAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum Swapper.RouterVersion\",\"name\":\"routerVersion\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"poolFee\",\"type\":\"uint24\"}],\"internalType\":\"struct Swapper.PathPart[]\",\"name\":\"pathParts\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"internalType\":\"struct Swapper.SwapParams[]\",\"name\":\"dstSwapsParams\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"dstRecipientAddress\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"nonce\",\"type\":\"uint48\"}],\"internalType\":\"struct IAllowanceTransfer.PermitDetails\",\"name\":\"details\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sigDeadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IAllowanceTransfer.PermitSingle\",\"name\":\"permitSingle\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dstGasForCall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstNativeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dstNativeAddr\",\"type\":\"bytes\"}],\"internalType\":\"struct IStargateRouter.lzTxObj\",\"name\":\"lzTxObj\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"partnerId\",\"type\":\"string\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter02\",\"outputs\":[{\"internalType\":\"contract ISwapRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wETH9\",\"outputs\":[{\"internalType\":\"contract IWETH9\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Zaap", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c000000000000000000000000b971ef87ede563556b2ed4b1c0b0019111dd85d2000000000000000000000000ecc19e177d24551aa7ed6bc6fe566eca726cc8a9000000000000000000000000000000000022d473030f116ddee9f6b43ac78ba3", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}