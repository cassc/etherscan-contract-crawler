{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.4;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface InterfaceLP {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n            address indexed sender,\r\n            uint amount0In,\r\n            uint amount1In,\r\n            uint amount0Out,\r\n            uint amount1Out,\r\n            address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IDEXRouter{\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n            address tokenA,\r\n            address tokenB,\r\n            uint amountADesired,\r\n            uint amountBDesired,\r\n            uint amountAMin,\r\n            uint amountBMin,\r\n            address to,\r\n            uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n            address token,\r\n            uint amountTokenDesired,\r\n            uint amountTokenMin,\r\n            uint amountETHMin,\r\n            address to,\r\n            uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n            address tokenA,\r\n            address tokenB,\r\n            uint liquidity,\r\n            uint amountAMin,\r\n            uint amountBMin,\r\n            address to,\r\n            uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n            address token,\r\n            uint liquidity,\r\n            uint amountTokenMin,\r\n            uint amountETHMin,\r\n            address to,\r\n            uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n            address tokenA,\r\n            address tokenB,\r\n            uint liquidity,\r\n            uint amountAMin,\r\n            uint amountBMin,\r\n            address to,\r\n            uint deadline,\r\n            bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n            address token,\r\n            uint liquidity,\r\n            uint amountTokenMin,\r\n            uint amountETHMin,\r\n            address to,\r\n            uint deadline,\r\n            bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n            uint amountIn,\r\n            uint amountOutMin,\r\n            address[] calldata path,\r\n            address to,\r\n            uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n            uint amountOut,\r\n            uint amountInMax,\r\n            address[] calldata path,\r\n            address to,\r\n            uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n            external\r\n            payable\r\n            returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n            external\r\n            returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n            external\r\n            returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n            external\r\n            payable\r\n            returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IDEXFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _transferOwnership(msg.sender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nabstract contract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint8 decimals_\r\n    ) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\ncontract Tytan is ERC20Detailed, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 private constant DECIMALS = 5;\r\n    uint8   private constant RATE_DECIMALS = 7;\r\n\r\n    address private constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address private constant ZERO = 0x0000000000000000000000000000000000000000;\r\n\r\n    uint256 public constant MAXSELLFEE = 100;\r\n    uint256 public constant MAXREBASERATE = 10000;\r\n    uint256 public constant MINREBASERATE = 20;\r\n\r\n    uint256 private constant MAX_UINT256 = ~uint256(0);\r\n    uint256 private constant MAX_SUPPLY = ~uint128(0);\r\n    uint256 private constant INITIAL_FRAGMENTS_SUPPLY = 40 * 10**6 * 10**DECIMALS;\r\n    uint256 private constant TOTAL_GONS = MAX_UINT256 - (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);\r\n\r\n    uint256 public constant feeDenominator = 1000;\r\n    uint256 public constant liquidityFee = 40;\r\n    uint256 public constant treasuryFee = 45;\r\n    uint256 public constant tytanInsuranceFundFee = 25;\r\n    uint256 public constant afterburnerFee = 30;\r\n    uint256 public constant sellAfterburnerFee = 5;\r\n    uint256 public sellFee = 15;\r\n    uint256 public totalFee =\r\n        liquidityFee.add(treasuryFee).add(tytanInsuranceFundFee).add(\r\n            afterburnerFee\r\n        );\r\n\r\n    uint256 public rebaseRate = 4072; //We will have TYTAN Boost days\r\n\r\n    address public autoLiquidityReceiver = 0x5DEb44bB19510B32A894dB676f5eD1E64F22D6dB;\r\n    address public treasuryReceiver = 0xD898A08817F664A3404A3e21f4990937a33b755D; \r\n    address public tytanInsuranceFundReceiver = 0xFBFb683D3e5FCeC7EaE5780cFd555C4DF36e0207;\r\n    address public afterburner = 0x15E4A5d2Ee7d3836176D9Fb72e12020C068Ca5EF;\r\n    \r\n    IDEXRouter public router;\r\n    address public pair;\r\n\r\n    bool public swapEnabled = true;\r\n    bool public _autoRebase = true;\r\n    bool public _autoAddLiquidity = true;\r\n\r\n    uint256 public INDEX;\r\n    uint256 public _lastRebasedTime;\r\n    uint256 public _lastAddLiquidityTime;\r\n    uint256 public _totalSupply;\r\n    uint256 private _gonsPerFragment;\r\n\r\n    uint256 private _autoLiquidityAmount;\r\n    bool inSwap = false;\r\n    modifier swapping() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n    \r\n    modifier validRecipient(address to) {\r\n        require(to != address(0x0), \"invalid address\");\r\n        _;\r\n    }\r\n\r\n    mapping(address => bool) _isFeeExempt;\r\n    mapping(address => bool) public blacklist;\r\n    mapping(address => uint256) private _gonBalances;\r\n    mapping(address => mapping(address => uint256)) private _allowedFragments;\r\n\r\n    //events\r\n    event LogRebase(uint256 indexed epoch, uint256 totalSupply);\r\n    event SwapBack(uint256 contractTokenBalance, uint256 amountETHToTreasuryAndTIF);\r\n    event SetRebaseRate(uint256 indexed rebaseRate);\r\n    event UpdateSellFee(uint256 sellFee);\r\n    event UpdateAutoRebaseStatus(bool status);\r\n    event UpdateAutoAddLiquidityStatus(bool status);\r\n    event UpdateFeeReceivers(address liquidityReceiver, address treasuryReceiver, address insuranceFundReceiver, address afterburner);\r\n    event WithdrawnAllToTreasury(uint256 amount);\r\n\r\n    event UpdateBotBlackList(address botAddress, bool flag);\r\n    event UpdateWhiteList(address addr, bool flag);\r\n    event GenericErrorEvent(string reason);\r\n\r\n    constructor(uint256 _startTime) ERC20Detailed(\"Tytan\", \"TYTAN\", uint8(DECIMALS)) Ownable() {\r\n        router = IDEXRouter(0x6B45064F128cA5ADdbf79825186F4e3e3c9E7EB5); \r\n        pair = IDEXFactory(router.factory()).createPair(router.WETH(), address(this));\r\n     \r\n        _allowedFragments[address(this)][address(router)] = uint256(-1);\r\n        _allowedFragments[address(this)][pair] = uint256(-1);\r\n\r\n        _totalSupply = INITIAL_FRAGMENTS_SUPPLY;        \r\n        _gonBalances[treasuryReceiver] = TOTAL_GONS;\r\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\r\n\r\n        _lastRebasedTime = _startTime > block.timestamp ? _startTime : block.timestamp;\r\n\r\n        _isFeeExempt[treasuryReceiver] = true;\r\n        _isFeeExempt[address(this)] = true;\r\n\r\n        INDEX = gonsForBalance(10**DECIMALS);\r\n\r\n        emit Transfer(address(0x0), treasuryReceiver, _totalSupply);\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n   \r\n    function balanceOf(address who) external view override returns (uint256) {\r\n        return _gonBalances[who].div(_gonsPerFragment);\r\n    }\r\n\r\n    function checkFeeExempt(address _addr) external view returns (bool) {\r\n        return _isFeeExempt[_addr];\r\n    }\r\n    \r\n    function shouldTakeFee(address from, address to)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return \r\n            (pair == from || pair == to) &&\r\n            !_isFeeExempt[from];\r\n    }\r\n\r\n    function shouldRebase() internal view returns (bool) {\r\n        return\r\n            _autoRebase &&\r\n            (_totalSupply < MAX_SUPPLY) &&\r\n            msg.sender != pair  &&\r\n            !inSwap &&\r\n            block.timestamp >= (_lastRebasedTime + 30 minutes);\r\n    }\r\n\r\n    function shouldAddLiquidity() internal view returns (bool) {\r\n        return\r\n            _autoAddLiquidity && \r\n            !inSwap && \r\n            msg.sender != pair &&\r\n            block.timestamp >= (_lastAddLiquidityTime + 12 hours);\r\n    }\r\n\r\n    function shouldSwapBack() internal view returns (bool) {\r\n        return \r\n            !inSwap && \r\n            msg.sender != pair  ; \r\n    }\r\n\r\n    function allowance(address owner_, address spender)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowedFragments[owner_][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 value)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        require(spender != address(0), \"Tytan: spender is the zero address\");\r\n        _allowedFragments[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        external\r\n        returns (bool)\r\n    {\r\n        uint256 oldValue = _allowedFragments[msg.sender][spender];\r\n        if (subtractedValue >= oldValue) {\r\n            _allowedFragments[msg.sender][spender] = 0;\r\n        } else {\r\n            _allowedFragments[msg.sender][spender] = oldValue.sub(\r\n                subtractedValue\r\n            );\r\n        }\r\n        emit Approval(\r\n            msg.sender,\r\n            spender,\r\n            _allowedFragments[msg.sender][spender]\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        external\r\n        returns (bool)\r\n    {\r\n        _allowedFragments[msg.sender][spender] = _allowedFragments[msg.sender][\r\n            spender\r\n        ].add(addedValue);\r\n        emit Approval(\r\n            msg.sender,\r\n            spender,\r\n            _allowedFragments[msg.sender][spender]\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint256 value)\r\n        external\r\n        override\r\n        validRecipient(to)\r\n        returns (bool)\r\n    {\r\n        _transferFrom(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external override validRecipient(to) returns (bool) {\r\n        \r\n        if (_allowedFragments[from][msg.sender] != uint256(-1)) {\r\n            _allowedFragments[from][msg.sender] = _allowedFragments[from][\r\n                msg.sender\r\n            ].sub(value, \"Insufficient Allowance\");\r\n        }\r\n        _transferFrom(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function _transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n\r\n        require(!blacklist[sender] && !blacklist[recipient], \"in_blacklist\");\r\n\r\n        if (inSwap) {\r\n            return _basicTransfer(sender, recipient, amount);\r\n        }\r\n\r\n        if (shouldRebase()) {\r\n           rebase();\r\n        }\r\n\r\n        if (shouldAddLiquidity()) {\r\n            addLiquidity();\r\n        } else if (shouldSwapBack()) {\r\n            swapBack();\r\n        }\r\n\r\n        uint256 gonAmount = amount.mul(_gonsPerFragment);\r\n        _gonBalances[sender] = _gonBalances[sender].sub(gonAmount);\r\n\r\n        uint256 gonAmountReceived = shouldTakeFee(sender, recipient)\r\n            ? takeFee(sender, recipient, gonAmount)\r\n            : gonAmount;\r\n        _gonBalances[recipient] = _gonBalances[recipient].add(\r\n            gonAmountReceived\r\n        );\r\n\r\n        emit Transfer(\r\n            sender,\r\n            recipient,\r\n            gonAmountReceived.div(_gonsPerFragment)\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    function _basicTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        uint256 gonAmount = amount.mul(_gonsPerFragment);\r\n        _gonBalances[from] = _gonBalances[from].sub(gonAmount);\r\n        _gonBalances[to] = _gonBalances[to].add(gonAmount);\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function takeFee(\r\n        address sender,\r\n        address recipient,\r\n        uint256 gonAmount\r\n    ) internal  returns (uint256) {\r\n        uint256 _totalFee = totalFee;\r\n        uint256 _afterburnerFee = afterburnerFee;\r\n\r\n\r\n        if (recipient == pair) {\r\n            _totalFee = totalFee.add(sellFee).add(sellAfterburnerFee);\r\n            _afterburnerFee = afterburnerFee.add(sellAfterburnerFee);\r\n        }\r\n\r\n        uint256 feeAmount = gonAmount.mul(_totalFee).div(feeDenominator);\r\n        uint256 afterburnerFeeAmount = gonAmount.mul(_afterburnerFee).div(feeDenominator);\r\n       \r\n        _gonBalances[afterburner] = _gonBalances[afterburner].add(afterburnerFeeAmount);\r\n        _gonBalances[address(this)] = _gonBalances[address(this)].add(\r\n            feeAmount.sub(afterburnerFeeAmount)\r\n        );\r\n        \r\n        _autoLiquidityAmount = _autoLiquidityAmount.add(\r\n            gonAmount.mul(liquidityFee).div(feeDenominator)\r\n        );\r\n        \r\n        emit Transfer(sender, address(this), feeAmount.div(_gonsPerFragment));\r\n\r\n        return gonAmount.sub(feeAmount);\r\n    }\r\n\r\n    function rebase() internal {        \r\n        if ( inSwap ) return;\r\n        \r\n        uint256 deltaTime = block.timestamp - _lastRebasedTime;\r\n        uint256 times = deltaTime.div(30 minutes);\r\n        uint256 epoch = times.mul(30);\r\n\r\n        for (uint256 i = 0; i < times; i++) {\r\n            _totalSupply = _totalSupply\r\n                .mul((10**RATE_DECIMALS).add(rebaseRate))\r\n                .div(10**RATE_DECIMALS);\r\n        }\r\n\r\n        if (_totalSupply > MAX_SUPPLY) {\r\n            _totalSupply = MAX_SUPPLY;\r\n        }\r\n\r\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\r\n        _lastRebasedTime = _lastRebasedTime.add(times.mul(30 minutes));\r\n\r\n        InterfaceLP(pair).sync();\r\n\r\n        emit LogRebase(epoch, _totalSupply);\r\n    }\r\n    \r\n    function addLiquidity() internal swapping {\r\n        if(_autoLiquidityAmount > _gonBalances[address(this)]) {\r\n            _autoLiquidityAmount = _gonBalances[address(this)];\r\n        } \r\n               \r\n        uint256 autoLiquidityAmount = _autoLiquidityAmount.div(_gonsPerFragment);\r\n\r\n        _autoLiquidityAmount = 0;\r\n        uint256 amountToLiquify = autoLiquidityAmount.div(2);\r\n        uint256 amountToSwap = autoLiquidityAmount.sub(amountToLiquify);\r\n\r\n        if( amountToSwap == 0 ) {\r\n            return;\r\n        }\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        uint256 balanceBefore = address(this).balance;\r\n\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amountETHLiquidity = address(this).balance.sub(balanceBefore);\r\n\r\n        if (amountToLiquify > 0 && amountETHLiquidity > 0) {\r\n            router.addLiquidityETH{value: amountETHLiquidity}(\r\n                address(this),\r\n                amountToLiquify,\r\n                0,\r\n                0,\r\n                autoLiquidityReceiver,\r\n                block.timestamp\r\n            );\r\n        }\r\n        _lastAddLiquidityTime = block.timestamp;\r\n    }\r\n\r\n    function swapBack() internal swapping {\r\n        if(_autoLiquidityAmount > _gonBalances[address(this)]) {\r\n            _autoLiquidityAmount = _gonBalances[address(this)];\r\n        }\r\n\r\n        uint256 amountToSwap = (_gonBalances[address(this)].sub(_autoLiquidityAmount)).div(_gonsPerFragment);\r\n\r\n        if( amountToSwap == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 balanceBefore = address(this).balance;\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amountETHToTreasuryAndTIF = address(this).balance.sub(\r\n            balanceBefore\r\n        );\r\n\r\n        uint256 _sellFee = treasuryFee.add(tytanInsuranceFundFee).add(sellFee);\r\n        uint256 _buyFee = treasuryFee.add(tytanInsuranceFundFee);\r\n\r\n        uint256 _tifFee = amountETHToTreasuryAndTIF.mul(tytanInsuranceFundFee.mul(2).add(sellFee)).div(_sellFee.add(_buyFee));\r\n        (bool success, ) = payable(tytanInsuranceFundReceiver).call{\r\n            value: _tifFee,\r\n            gas: 30000\r\n        }(\"\");\r\n        \r\n        (success, ) = payable(treasuryReceiver).call{\r\n            value: amountETHToTreasuryAndTIF.sub(_tifFee),\r\n            gas: 30000\r\n        }(\"\");\r\n\r\n        emit SwapBack(amountToSwap, amountETHToTreasuryAndTIF);\r\n    }\r\n\r\n    function isContract(address addr) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n\r\n    function index() public view returns (uint256) {\r\n        return balanceForGons(INDEX);\r\n    }\r\n    function gonsForBalance(uint256 amount) public view returns (uint256) {\r\n        return amount.mul(_gonsPerFragment);\r\n    }    \r\n    function balanceForGons(uint256 gons) public view returns (uint256) {\r\n        return gons.div(_gonsPerFragment);\r\n    }    \r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return\r\n            (TOTAL_GONS.sub(_gonBalances[DEAD]).sub(_gonBalances[ZERO])).div(\r\n                _gonsPerFragment\r\n            );\r\n    }\r\n\r\n    function getLiquidityBacking(uint256 accuracy)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 liquidityBalance = _gonBalances[pair].div(_gonsPerFragment);\r\n        return\r\n            accuracy.mul(liquidityBalance.mul(2)).div(getCirculatingSupply());\r\n    }\r\n\r\n    function isNotInSwap() external view returns (bool) {\r\n        return !inSwap;\r\n    }\r\n\r\n\r\n    function manualSync() external {\r\n        try InterfaceLP(pair).sync() {\r\n\r\n        }catch Error (string memory reason) {\r\n            emit GenericErrorEvent(\"manualSync(): pair.sync() Failed\");\r\n            emit GenericErrorEvent(reason);\r\n        }\r\n    }\r\n\r\n    function setAutoRebase(bool _flag) external onlyOwner {\r\n        require(_autoRebase != _flag, \"Not changed\");\r\n\r\n        if (_flag) {\r\n            _lastRebasedTime = block.timestamp;\r\n        }\r\n        _autoRebase = _flag;\r\n\r\n        emit UpdateAutoRebaseStatus(_flag);\r\n    }\r\n\r\n    function setAutoAddLiquidity(bool _flag) external onlyOwner {\r\n        require(_autoAddLiquidity != _flag, \"Not changed\");\r\n        if(_flag) {\r\n            _lastAddLiquidityTime = block.timestamp;\r\n        }\r\n        _autoAddLiquidity = _flag;\r\n\r\n        emit UpdateAutoAddLiquidityStatus(_flag);\r\n    }\r\n\r\n    function setRebaseRate(uint256 _rebaseRate) external onlyOwner {\r\n        require(rebaseRate != _rebaseRate, \"not changed\");\r\n        require(_rebaseRate < MAXREBASERATE && _rebaseRate > MINREBASERATE, \"can not be exceeded min and max rebase rate\");\r\n        rebaseRate = _rebaseRate;\r\n\r\n        emit SetRebaseRate(_rebaseRate);\r\n    }\r\n\r\n    function setSellFee(uint256 _sellFee) external onlyOwner {\r\n        require(sellFee != _sellFee, \"not changed\");\r\n        require(_sellFee < MAXSELLFEE, \"can not be exceeded max sell fee\");\r\n        sellFee = _sellFee;\r\n\r\n        emit UpdateSellFee(_sellFee);\r\n    }\r\n\r\n    function setFeeReceivers(\r\n        address _autoLiquidityReceiver,\r\n        address _treasuryReceiver,\r\n        address _tytanInsuranceFundReceiver,\r\n        address _afterburner\r\n    ) external onlyOwner {\r\n        require(_autoLiquidityReceiver != address(0x0), \"Invalid _autoLiquidityReceiver\");\r\n        require(_treasuryReceiver != address(0x0), \"Invalid _treasuryReceiver\");\r\n        require(_tytanInsuranceFundReceiver != address(0x0), \"Invalid _tytanInsuranceFundReceiver\");\r\n        require(_afterburner != address(0x0), \"Invalid _afterburner\");\r\n\r\n        autoLiquidityReceiver = _autoLiquidityReceiver;\r\n        treasuryReceiver = _treasuryReceiver;\r\n        tytanInsuranceFundReceiver = _tytanInsuranceFundReceiver;\r\n        afterburner = _afterburner;\r\n\r\n        emit UpdateFeeReceivers(_autoLiquidityReceiver, _treasuryReceiver, _tytanInsuranceFundReceiver, _afterburner);\r\n    }\r\n\r\n    function setWhitelist(address _addr, bool _flag) external onlyOwner {\r\n        _isFeeExempt[_addr] = _flag;\r\n        emit UpdateWhiteList(_addr, _flag);\r\n    }\r\n\r\n    function setBotBlacklist(address _botAddress, bool _flag) external onlyOwner {\r\n        require(isContract(_botAddress), \"only contract address, not allowed exteranlly owned account\");\r\n        blacklist[_botAddress] = _flag;\r\n\r\n        emit UpdateBotBlackList(_botAddress, _flag);\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"GenericErrorEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"LogRebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rebaseRate\",\"type\":\"uint256\"}],\"name\":\"SetRebaseRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractTokenBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountETHToTreasuryAndTIF\",\"type\":\"uint256\"}],\"name\":\"SwapBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"UpdateAutoAddLiquidityStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"UpdateAutoRebaseStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"botAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"UpdateBotBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidityReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasuryReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"insuranceFundReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"afterburner\",\"type\":\"address\"}],\"name\":\"UpdateFeeReceivers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellFee\",\"type\":\"uint256\"}],\"name\":\"UpdateSellFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"UpdateWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawnAllToTreasury\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INDEX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXREBASERATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXSELLFEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINREBASERATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_autoAddLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_autoRebase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastAddLiquidityTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastRebasedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"afterburner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"afterburnerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidityReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gons\",\"type\":\"uint256\"}],\"name\":\"balanceForGons\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"checkFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"getLiquidityBacking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"gonsForBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isNotInSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellAfterburnerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setAutoAddLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setAutoRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_botAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setBotBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_autoLiquidityReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tytanInsuranceFundReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_afterburner\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rebaseRate\",\"type\":\"uint256\"}],\"name\":\"setRebaseRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sellFee\",\"type\":\"uint256\"}],\"name\":\"setSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tytanInsuranceFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tytanInsuranceFundReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Tytan", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000006297b730", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f7097d0fa560d5660aa07f2fa66b9fe19016aefb1d50d85c16cb11c2556147cc"}