{"SourceCode": "from vyper.interfaces import ERC20\r\n\r\ncontract bERC20:\r\n    def totalSupply() -> uint256: constant\r\n    def allowance(_owner: address, _spender: address) -> uint256: constant\r\n    def transfer(_to: address, _value: uint256) -> bool: modifying\r\n    def transferFrom(_from: address, _to: address, _value: uint256) -> bool: modifying\r\n    def approve(_spender: address, _value: uint256) -> bool: modifying\r\n    def name() -> string[64]: constant\r\n    def symbol() -> string[32]: constant\r\n    def decimals() -> uint256: constant\r\n    def balanceOf(arg0: address) -> uint256: constant\r\n    def deposit(depositAmount: uint256): modifying\r\n    def withdraw(withdrawTokens: uint256): modifying\r\n    def getPricePerFullShare() -> uint256: constant\r\n\r\ncontract BeltLP:\r\n    def add_liquidity(amounts: uint256[N_COINS], min_mint_amount: uint256): modifying\r\n    def remove_liquidity(_amount: uint256, min_amounts: uint256[N_COINS]): modifying\r\n    def remove_liquidity_imbalance(amounts: uint256[N_COINS], max_burn_amount: uint256): modifying\r\n    def balances(i: int128) -> uint256: constant\r\n    def A() -> uint256: constant\r\n    def fee() -> uint256: constant\r\n    def owner() -> address: constant\r\n\r\n\r\nN_COINS: constant(int128) = 4\r\nZERO256: constant(uint256) = 0\r\nZEROS: constant(uint256[N_COINS]) = [ZERO256, ZERO256, ZERO256, ZERO256]\r\nLENDING_PRECISION: constant(uint256) = 10 ** 18\r\nPRECISION: constant(uint256) = 10 ** 18\r\nPRECISION_MUL: constant(uint256[N_COINS]) = [convert(1, uint256), convert(1, uint256), convert(1, uint256), convert(1, uint256)]\r\nFEE_DENOMINATOR: constant(uint256) = 10 ** 10\r\nFEE_IMPRECISION: constant(uint256) = 25 * 10 ** 8\r\n\r\ncoins: public(address[N_COINS])\r\nunderlying_coins: public(address[N_COINS])\r\nbeltLP: public(address)\r\ntoken: public(address)\r\n\r\n\r\n@public\r\ndef __init__(_coins: address[N_COINS], _underlying_coins: address[N_COINS],\r\n             _beltLP: address, _token: address):\r\n    self.coins = _coins\r\n    self.underlying_coins = _underlying_coins\r\n    self.beltLP = _beltLP\r\n    self.token = _token\r\n\r\n\r\n@public\r\n@nonreentrant('lock')\r\ndef add_liquidity(uamounts: uint256[N_COINS], min_mint_amount: uint256):\r\n    amounts: uint256[N_COINS] = ZEROS\r\n\r\n    for i in range(N_COINS):\r\n        uamount: uint256 = uamounts[i]\r\n\r\n        if uamount > 0:\r\n            assert_modifiable(ERC20(self.underlying_coins[i])\\\r\n                .transferFrom(msg.sender, self, uamount))\r\n\r\n            ERC20(self.underlying_coins[i]).approve(self.coins[i], uamount)\r\n            bERC20(self.coins[i]).deposit(uamount)\r\n            amounts[i] = bERC20(self.coins[i]).balanceOf(self)\r\n            ERC20(self.coins[i]).approve(self.beltLP, amounts[i])\r\n\r\n    BeltLP(self.beltLP).add_liquidity(amounts, min_mint_amount)\r\n\r\n    tokens: uint256 = ERC20(self.token).balanceOf(self)\r\n    assert_modifiable(ERC20(self.token).transfer(msg.sender, tokens))\r\n\r\n\r\n@private\r\ndef _send_all(_addr: address, min_uamounts: uint256[N_COINS], one: int128):\r\n\r\n    for i in range(N_COINS):\r\n        if (one < 0) or (i == one):\r\n            _coin: address = self.coins[i]\r\n            _balance: uint256 = bERC20(_coin).balanceOf(self)\r\n            if _balance == 0:\r\n                continue\r\n            bERC20(_coin).withdraw(_balance)\r\n\r\n            _ucoin: address = self.underlying_coins[i]\r\n            _uamount: uint256 = ERC20(_ucoin).balanceOf(self)\r\n            assert _uamount >= min_uamounts[i], \"Not enough coins withdrawn\"\r\n            assert_modifiable(ERC20(_ucoin).transfer(_addr, _uamount))\r\n\r\n\r\n@public\r\n@nonreentrant('lock')\r\ndef remove_liquidity(_amount: uint256, min_uamounts: uint256[N_COINS]):\r\n    zeros: uint256[N_COINS] = ZEROS\r\n\r\n    assert_modifiable(ERC20(self.token).transferFrom(msg.sender, self, _amount))\r\n    BeltLP(self.beltLP).remove_liquidity(_amount, zeros)\r\n\r\n    self._send_all(msg.sender, min_uamounts, -1)\r\n\r\n\r\n@public\r\n@nonreentrant('lock')\r\ndef remove_liquidity_imbalance(uamounts: uint256[N_COINS], max_burn_amount: uint256):\r\n    _token: address = self.token\r\n\r\n    amounts: uint256[N_COINS] = uamounts\r\n    for i in range(N_COINS):\r\n        if amounts[i] > 0:\r\n            rate: uint256 = bERC20(self.coins[i]).getPricePerFullShare()\r\n            amounts[i] = amounts[i] * LENDING_PRECISION / rate\r\n\r\n    _tokens: uint256 = ERC20(_token).balanceOf(msg.sender)\r\n    if _tokens > max_burn_amount:\r\n        _tokens = max_burn_amount\r\n    assert_modifiable(ERC20(_token).transferFrom(msg.sender, self, _tokens))\r\n\r\n    BeltLP(self.beltLP).remove_liquidity_imbalance(amounts, max_burn_amount)\r\n\r\n    _tokens = ERC20(_token).balanceOf(self)\r\n    assert_modifiable(ERC20(_token).transfer(msg.sender, _tokens))\r\n\r\n    self._send_all(msg.sender, ZEROS, -1)\r\n\r\n\r\n@private\r\n@constant\r\ndef _xp_mem(rates: uint256[N_COINS], _balances: uint256[N_COINS]) -> uint256[N_COINS]:\r\n    result: uint256[N_COINS] = rates\r\n    for i in range(N_COINS):\r\n        result[i] = result[i] * _balances[i] / PRECISION\r\n    return result\r\n\r\n\r\n@private\r\n@constant\r\ndef get_D(A: uint256, xp: uint256[N_COINS]) -> uint256:\r\n    S: uint256 = 0\r\n    for _x in xp:\r\n        S += _x\r\n    if S == 0:\r\n        return 0\r\n\r\n    Dprev: uint256 = 0\r\n    D: uint256 = S\r\n    Ann: uint256 = A * N_COINS\r\n    for _i in range(255):\r\n        D_P: uint256 = D\r\n        for _x in xp:\r\n            D_P = D_P * D / (_x * N_COINS + 1) \r\n        Dprev = D\r\n        D = (Ann * S + D_P * N_COINS) * D / ((Ann - 1) * D + (N_COINS + 1) * D_P)\r\n        \r\n        if D > Dprev:\r\n            if D - Dprev <= 1:\r\n                break\r\n        else:\r\n            if Dprev - D <= 1:\r\n                break\r\n    return D\r\n\r\n\r\n@private\r\n@constant\r\ndef get_y(A: uint256, i: int128, _xp: uint256[N_COINS], D: uint256) -> uint256:\r\n    assert (i >= 0) and (i < N_COINS)\r\n\r\n    c: uint256 = D\r\n    S_: uint256 = 0\r\n    Ann: uint256 = A * N_COINS\r\n\r\n    _x: uint256 = 0\r\n    for _i in range(N_COINS):\r\n        if _i != i:\r\n            _x = _xp[_i]\r\n        else:\r\n            continue\r\n        S_ += _x\r\n        c = c * D / (_x * N_COINS)\r\n    c = c * D / (Ann * N_COINS)\r\n    b: uint256 = S_ + D / Ann\r\n    y_prev: uint256 = 0\r\n    y: uint256 = D\r\n    for _i in range(255):\r\n        y_prev = y\r\n        y = (y*y + c) / (2 * y + b - D)\r\n        \r\n        if y > y_prev:\r\n            if y - y_prev <= 1:\r\n                break\r\n        else:\r\n            if y_prev - y <= 1:\r\n                break\r\n    return y\r\n\r\n\r\n@private\r\n@constant\r\ndef _calc_withdraw_one_coin(_token_amount: uint256, i: int128, rates: uint256[N_COINS]) -> uint256:\r\n    blp: address = self.beltLP\r\n    A: uint256 = BeltLP(blp).A()\r\n    fee: uint256 = BeltLP(blp).fee() * N_COINS / (4 * (N_COINS - 1))\r\n    fee += fee * FEE_IMPRECISION / FEE_DENOMINATOR  \r\n    precisions: uint256[N_COINS] = PRECISION_MUL\r\n    total_supply: uint256 = ERC20(self.token).totalSupply()\r\n\r\n    xp: uint256[N_COINS] = PRECISION_MUL\r\n    S: uint256 = 0\r\n    for j in range(N_COINS):\r\n        xp[j] *= BeltLP(blp).balances(j)\r\n        xp[j] = xp[j] * rates[j] / LENDING_PRECISION\r\n        S += xp[j]\r\n\r\n    D0: uint256 = self.get_D(A, xp)\r\n    D1: uint256 = D0 - _token_amount * D0 / total_supply\r\n    xp_reduced: uint256[N_COINS] = xp\r\n\r\n    \r\n    for j in range(N_COINS):\r\n        dx_expected: uint256 = 0\r\n        b_ideal: uint256 = xp[j] * D1 / D0\r\n        b_expected: uint256 = xp[j]\r\n        if j == i:\r\n            b_expected -= S * (D0 - D1) / D0\r\n        if b_ideal >= b_expected:\r\n            dx_expected += (b_ideal - b_expected)\r\n        else:\r\n            dx_expected += (b_expected - b_ideal)\r\n        xp_reduced[j] -= fee * dx_expected / FEE_DENOMINATOR\r\n\r\n    dy: uint256 = xp_reduced[i] - self.get_y(A, i, xp_reduced, D1)\r\n    dy = dy / precisions[i]\r\n\r\n    return dy\r\n\r\n\r\n@public\r\n@constant\r\ndef calc_withdraw_one_coin(_token_amount: uint256, i: int128) -> uint256:\r\n    rates: uint256[N_COINS] = ZEROS\r\n\r\n    for j in range(N_COINS):\r\n        rates[j] = bERC20(self.coins[j]).getPricePerFullShare()\r\n\r\n    return self._calc_withdraw_one_coin(_token_amount, i, rates)\r\n\r\n\r\n@public\r\n@nonreentrant('lock')\r\ndef remove_liquidity_one_coin(_token_amount: uint256, i: int128, min_uamount: uint256, donate_dust: bool = False):\r\n    rates: uint256[N_COINS] = ZEROS\r\n    _token: address = self.token\r\n\r\n    for j in range(N_COINS):\r\n        rates[j] = bERC20(self.coins[j]).getPricePerFullShare()\r\n\r\n    dy: uint256 = self._calc_withdraw_one_coin(_token_amount, i, rates)\r\n    assert dy >= min_uamount, \"Not enough coins removed\"\r\n\r\n    assert_modifiable(\r\n        ERC20(self.token).transferFrom(msg.sender, self, _token_amount))\r\n\r\n    amounts: uint256[N_COINS] = ZEROS\r\n    amounts[i] = dy * LENDING_PRECISION / rates[i]\r\n    token_amount_before: uint256 = ERC20(_token).balanceOf(self)\r\n    BeltLP(self.beltLP).remove_liquidity_imbalance(amounts, _token_amount)\r\n\r\n    \r\n    self._send_all(msg.sender, ZEROS, i)\r\n\r\n    if not donate_dust:\r\n        \r\n        token_amount_after: uint256 = ERC20(_token).balanceOf(self)\r\n        if token_amount_after > token_amount_before:\r\n            assert_modifiable(ERC20(_token).transfer(\r\n                msg.sender, token_amount_after - token_amount_before)\r\n            )\r\n\r\n\r\n@public\r\n@nonreentrant('lock')\r\ndef withdraw_donated_dust():\r\n    owner: address = BeltLP(self.beltLP).owner()\r\n    assert msg.sender == owner\r\n\r\n    _token: address = self.token\r\n    assert_modifiable(\r\n        ERC20(_token).transfer(owner, ERC20(_token).balanceOf(self)))", "ABI": "[{\"outputs\":[],\"inputs\":[{\"type\":\"address[4]\",\"name\":\"_coins\"},{\"type\":\"address[4]\",\"name\":\"_underlying_coins\"},{\"type\":\"address\",\"name\":\"_beltLP\"},{\"type\":\"address\",\"name\":\"_token\"}],\"constant\":false,\"payable\":false,\"type\":\"constructor\"},{\"name\":\"add_liquidity\",\"outputs\":[],\"inputs\":[{\"type\":\"uint256[4]\",\"name\":\"uamounts\"},{\"type\":\"uint256\",\"name\":\"min_mint_amount\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":164085},{\"name\":\"remove_liquidity\",\"outputs\":[],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_amount\"},{\"type\":\"uint256[4]\",\"name\":\"min_uamounts\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":99011},{\"name\":\"remove_liquidity_imbalance\",\"outputs\":[],\"inputs\":[{\"type\":\"uint256[4]\",\"name\":\"uamounts\"},{\"type\":\"uint256\",\"name\":\"max_burn_amount\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":119526},{\"name\":\"calc_withdraw_one_coin\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_token_amount\"},{\"type\":\"int128\",\"name\":\"i\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":3881601},{\"name\":\"remove_liquidity_one_coin\",\"outputs\":[],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_token_amount\"},{\"type\":\"int128\",\"name\":\"i\"},{\"type\":\"uint256\",\"name\":\"min_uamount\"}],\"constant\":false,\"payable\":false,\"type\":\"function\"},{\"name\":\"remove_liquidity_one_coin\",\"outputs\":[],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_token_amount\"},{\"type\":\"int128\",\"name\":\"i\"},{\"type\":\"uint256\",\"name\":\"min_uamount\"},{\"type\":\"bool\",\"name\":\"donate_dust\"}],\"constant\":false,\"payable\":false,\"type\":\"function\"},{\"name\":\"withdraw_donated_dust\",\"outputs\":[],\"inputs\":[],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":63973},{\"name\":\"coins\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[{\"type\":\"int128\",\"name\":\"arg0\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1680},{\"name\":\"underlying_coins\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[{\"type\":\"int128\",\"name\":\"arg0\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1710},{\"name\":\"beltLP\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1541},{\"name\":\"token\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1571}]", "ContractName": "Vyper_contract", "CompilerVersion": "vyper:0.1.0b17", "OptimizationUsed": "0", "Runs": "0", "ConstructorArguments": "000000000000000000000000fdb22e3bf935c1c94254f050bbe093563f53353400000000000000000000000008bed6851cadc4efc91147e3ca63c39406b31a2d00000000000000000000000056a9452024ae2dedb01e1179acb1c152d50c01450000000000000000000000007c8dd1e39cd8142414f24f0ba80638b2e2fa52340000000000000000000000001af3f329e8be154074d8769d1ffa4ee058b1dbc30000000000000000000000008ac76a51cc950d9822d68b83fe1ad97b32cd580d00000000000000000000000055d398326f99059ff775485246999027b3197955000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d56000000000000000000000000f16d312d119c13dd27fd0dc814b0bcdcaaa62dfd00000000000000000000000086afa7ff694ab8c985b79733745662760e454169", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}