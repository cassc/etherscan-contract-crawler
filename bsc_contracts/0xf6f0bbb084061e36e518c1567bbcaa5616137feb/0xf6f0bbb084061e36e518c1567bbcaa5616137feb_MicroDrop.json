{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/drop/MicroDrop.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"../MicroUtility.sol\\\";\\n\\npragma solidity ^0.8.4;\\n\\ninterface InitializableInterface {\\n    /**\\n     * @notice Used internally to initialize the contract instead of through a constructor\\n     * @dev This function is called by the deployer/factory when creating a contract\\n     * @param initPayload abi encoded payload to use for contract initilaization\\n     */\\n    function init(bytes memory initPayload) external returns (bool);\\n}\\n\\n/**\\n * @dev In the beginning there was a smart contract...\\n */\\ncontract MicroDrop is ReentrancyGuard, MicroUtility {\\n    event NewCollectionDeployed(\\n        address indexed sender,\\n        address indexed contractAddress\\n    );\\n\\n    bool private initialized;\\n\\n    uint256 public numberOfContracts;\\n\\n    mapping(uint256 => address) public dropInfos;\\n\\n    constructor() {}\\n\\n    function init(bytes memory initPayload) external returns (bool) {\\n        require(!initialized, \\\"Already initialized\\\");\\n        (address _owner, address _manager) = abi.decode(\\n            initPayload,\\n            (address, address)\\n        );\\n        _setManager(_manager);\\n        transferOwnership(_owner);\\n        initialized = true;\\n        return true;\\n    }\\n\\n    function deployWithPayload(\\n        bytes12 saltHash,\\n        bytes memory sourceCode,\\n        bytes memory initCode\\n    ) external nonReentrant payable {\\n        bytes32 salt = bytes32(\\n            keccak256(abi.encodePacked(msg.sender, saltHash))\\n        );\\n\\n        address contractAddress = address(\\n            uint160(\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            bytes1(0xff),\\n                            address(this),\\n                            salt,\\n                            keccak256(sourceCode)\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n\\n        require(!_isContract(contractAddress), \\\"Micro: already deployed\\\");\\n\\n        assembly {\\n            contractAddress := create2(\\n                0,\\n                add(sourceCode, 0x20),\\n                mload(sourceCode),\\n                salt\\n            )\\n        }\\n\\n        require(_isContract(contractAddress), \\\"Micro: deployment failed\\\");\\n        \\n        require(\\n            InitializableInterface(contractAddress).init(initCode),\\n            \\\"Micro: initialization failed\\\"\\n        );\\n\\n        _payoutMicroFee(uint256(1));\\n\\n        dropInfos[numberOfContracts] = contractAddress;\\n\\n        numberOfContracts += 1;\\n\\n        emit NewCollectionDeployed(msg.sender, contractAddress);\\n    }\\n\\n    function _isContract(address contractAddress) internal view returns (bool) {\\n        bytes32 codehash;\\n        assembly {\\n            codehash := extcodehash(contractAddress)\\n        }\\n        return (codehash != 0x0 &&\\n            codehash !=\\n            0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMicroManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity >=0.5.0;\\n\\ninterface IMicroManager {\\n    function microBridge(address _address) external view returns (bool);\\n\\n    function treasuryAddress() external view returns (address);\\n\\n    function microProtocolFee() external view returns (uint256);\\n\\n    function oracleAddress() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPriceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface IPriceOracle {\\n    function convertUsdToWei(uint256 usdAmount) external view returns (uint256 weiAmount);\\n}\"\r\n    },\r\n    \"contracts/MicroUtility.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IPriceOracle} from \\\"./interfaces/IPriceOracle.sol\\\";\\nimport {IMicroManager} from \\\"./interfaces/IMicroManager.sol\\\";\\n\\ncontract MicroUtility is Ownable {\\n    IMicroManager public microManager;\\n    uint256 private constant STATIC_GAS_LIMIT = 210_000;\\n\\n    event FeePayout(\\n        uint256 MicroMintFeeWei,\\n        address MicroFeeRecipient,\\n        bool success\\n    );\\n\\n    constructor(){}\\n\\n    /**\\n     * PUBLIC FUNCTIONS\\n     * state changing\\n     */\\n    function getMicroFeeUsd(uint256 quantity)\\n        public\\n        view\\n        returns (uint256 fee)\\n    {\\n        fee = microManager.microProtocolFee() * quantity;\\n    }\\n\\n    function getMicroFeeWei(uint256 quantity) public view returns (uint256) {\\n        return _usdToWei(microManager.microProtocolFee() * quantity);\\n    }\\n\\n    function _payoutMicroFee(uint256 quantity) internal {\\n        // Transfer protocol mint fee to recipient address\\n        uint256 microProtocolFee = getMicroFeeWei(quantity);\\n        address payable treasury = payable(microManager.treasuryAddress());\\n        (bool success, ) = treasury.call{\\n            value: microProtocolFee,\\n            gas: gasleft() > STATIC_GAS_LIMIT ? STATIC_GAS_LIMIT : gasleft()\\n        }(\\\"\\\");\\n        require(success, \\\"MicroUtility: Fee Payment Failed\\\");\\n        emit FeePayout(microProtocolFee, treasury, success);\\n    }\\n\\n    function _usdToWei(uint256 amount)\\n        internal\\n        view\\n        returns (uint256 weiAmount)\\n    {\\n        if (amount == 0) {\\n            return 0;\\n        }\\n        weiAmount = IPriceOracle(microManager.oracleAddress()).convertUsdToWei(amount);\\n    }\\n\\n    function _setManager(address _manager) internal {\\n        microManager = IMicroManager(_manager);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"MicroMintFeeWei\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"MicroFeeRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"FeePayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"NewCollectionDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes12\",\"name\":\"saltHash\",\"type\":\"bytes12\"},{\"internalType\":\"bytes\",\"name\":\"sourceCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"}],\"name\":\"deployWithPayload\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dropInfos\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"getMicroFeeUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"getMicroFeeWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"initPayload\",\"type\":\"bytes\"}],\"name\":\"init\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"microManager\",\"outputs\":[{\"internalType\":\"contract IMicroManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfContracts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MicroDrop", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}