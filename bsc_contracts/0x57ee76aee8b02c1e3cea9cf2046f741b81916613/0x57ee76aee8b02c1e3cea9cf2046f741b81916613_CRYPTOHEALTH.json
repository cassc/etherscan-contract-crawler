{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\npragma solidity ^0.8.10;\r\n\r\n/*\r\n\r\nCryptoHealth BSC Token is a pioneer for medical reimbursement, cryptodonations\r\nand utilities centered around the medical field. Check us out:\r\n\r\nTelegram: t.me/cryptohealth_official\r\nWebsite: www.cryptohealth.life\r\nFacebook: facebook.com/cryptohealthbsc\r\nTwitter: twitter.com/CryptoHealthBSC\r\nNFT Account: opensea.io/DR_MIST\r\nE-mail: admin@cryptohealth.life\r\n\r\nTeam is doxxed, and available for video chat. This is a long term and ambitious project \r\nthat aims to to develop into a company providing crypto-based services in the near future.\r\n\r\n*/\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    \r\n    function isContract(address account) internal view returns (bool) {\r\n       \r\n        return account.code.length > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n                if (returndata.length > 0) {\r\n    \r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    \r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ncontract CRYPTOHEALTH is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    \r\n    mapping(address => bool) public _isDonationRecipient;\r\n    mapping(address => bool) private _isEmploymentWallet;\r\n    mapping(address => bool) private _isSniper;\r\n\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => bool) private _isLimitExempt;\r\n    mapping(address => bool) private _isExcluded;\r\n    address[] private _excluded;\r\n\r\n    mapping (address => uint256) private transferTimeFrom;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal = 1* 10**9 * 10**9;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n\r\n    string private _name = \"CRYPTOHEALTH\";\r\n    string private _symbol = \"CHT\";\r\n    uint8 private _decimals = 9;\r\n\r\n    struct BuyFee {\r\n        uint16 developmentFee;\r\n        uint16 treasuryFee;\r\n        uint16 taxFee;\r\n    }\r\n\r\n    struct SellFee {\r\n        uint16 developmentFee;\r\n        uint16 treasuryFee;\r\n        uint16 taxFee;\r\n    }\r\n\r\n    struct TransferFee {\r\n        uint16 developmentFee;\r\n        uint16 treasuryFee;\r\n        uint16 taxFee;\r\n\r\n    }\r\n\r\n    BuyFee public buyFee;\r\n    SellFee public sellFee;\r\n    TransferFee public transferFee;\r\n\r\n    uint16 private _taxFee;\r\n    uint16 private _developmentFee;\r\n    uint16 private _treasuryFee;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n    address private Wallet_Burn = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    address public Wallet_Development = payable(address(0xeC0270AC30614dfcAdC07a0AE76566EC8ee45aE7));\r\n    address public Wallet_Treasury = payable(address(0x45d508e3cBfd74ED2bdDC4Fd168389242Da76930));\r\n    address public Wallet_Prize = 0x9F500010fB9D41EB489825C0a70a163B6888ac9A;\r\n    address public Wallet_Employment1 = 0x3A6f95C81ab4290F152C44f1d071A40C1879aEB2;\r\n    address public Wallet_Employment2 = 0x068f73C1FB75C627f41BFbCeee847abfa97F9080;\r\n\r\n    uint256 public _maxTxAmount = 10 * 10**6 * 10**9;\r\n    uint256 private _maxWalletHold = 50 * 10**6 * 10**9;\r\n    uint256 private _maxDonationRecipientHold = 10 * 10**6 * 10**9;\r\n    uint256 private _maxPrizeHold = 10 * 10**6 * 10**9;\r\n    uint256 private _maxEmploymentHold = 75 * 10**6 * 10**9;\r\n\r\n    uint256 public _minHoldToClaim = 1 * 10**5 * 10**9;\r\n    uint256 public _employmentSellLimit = 5 * 10*5 * 10**9;\r\n\r\n    uint256 private donationSell = 999 * 10**2 * 10**9;\r\n    uint256 private donationTransferMax = 25 * 10**4 * 10**9;\r\n    uint256 private burnTransferAmt = 1 * 10**5 * 10**9;\r\n    uint256 private _donationLimit1 = 5 * 10**2 * 10**9;\r\n    uint256 private _donationLimit2 = 25 * 10**2 * 10**9;\r\n    uint256 private _donationLimit3 = 1 * 10**4 * 10**9;\r\n    uint256 private _donationLimit4 = 1 * 10**5 * 10**9;\r\n\r\n    uint256 public _sniperSellLimit = 5 * 10*4 * 10**9;\r\n\r\n    event isEnrolledAsDonationReceiver(address account);\r\n    event isRemovedAsDonationReceiver (address account);\r\n    event isEnrolledAsSniperAccount (address account);\r\n    event isRemovedAsSniperAccount (address account);\r\n    event addressExcludedFromFee (address account);\r\n    event updatedDonationSell (uint256 dsell);\r\n    event updatedBuyTaxes (uint256 develop, uint256 treasury, uint256 tax);\r\n    event updatedSellTaxes (uint256 develop, uint256 treasury, uint256 tax);\r\n    event updatedTransferTaxes (uint256 develop, uint256 treasury, uint256 tax);\r\n\r\n    constructor() payable {\r\n\r\n        _rOwned[_msgSender()] = _rTotal;\r\n\r\n        buyFee.developmentFee = 3;\r\n        buyFee.treasuryFee = 4;\r\n        buyFee.taxFee = 2;\r\n\r\n        sellFee.developmentFee = 3;\r\n        sellFee.treasuryFee = 5;\r\n        sellFee.taxFee = 2;\r\n\r\n        //Transfer tax protects Treasury\r\n        transferFee.developmentFee = 3;\r\n        transferFee.treasuryFee = 12;\r\n        transferFee.taxFee = 5;\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\r\n            0x10ED43C718714eb63d5aA57B78B54704E256024E // Pancakeswap\r\n         \r\n        );\r\n        // Create a uniswap pair for this new token\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        // set the rest of the contract variables\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        //exclude owner and this contract from fee\r\n        _isExcludedFromFee[owner()] = true; \r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[Wallet_Burn] = true;\r\n        _isExcludedFromFee[Wallet_Treasury] = true;\r\n        _isExcludedFromFee[Wallet_Development] = true;\r\n        _isExcludedFromFee[Wallet_Prize] = true;\r\n\r\n        // Wallet that are excluded from regular holding limits\r\n        _isLimitExempt[owner()] = true;\r\n        _isLimitExempt[address(this)] = true;\r\n        _isLimitExempt[Wallet_Treasury] = true;\r\n        _isLimitExempt[Wallet_Burn] = true;\r\n        _isLimitExempt[uniswapV2Pair] = true;\r\n\r\n        // Employment wallet mapped for separate holding limit\r\n        _isEmploymentWallet[Wallet_Employment1] = true;\r\n        _isEmploymentWallet[Wallet_Employment2] = true;\r\n\r\n        // Exclude from Rewards\r\n        _isExcluded[uniswapV2Pair] = true;\r\n        _isExcluded[address(this)] = true;\r\n        _isExcluded[Wallet_Development] = true;\r\n        _isExcluded[Wallet_Treasury] = true;\r\n        _isExcluded[Wallet_Prize] = true;\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function isExcludedFromReward(address account) public view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    function isExcludedFromFees(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function isSniperAccount(address account) public view returns (bool) {\r\n        return _isSniper[account];\r\n    }\r\n\r\n    function deliver(uint256 tAmount) public {\r\n        address sender = _msgSender();\r\n        require(\r\n            !_isExcluded[sender],\r\n            \"Excluded addresses cannot call this function\"\r\n        );\r\n        (uint256 rAmount, , , , ) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rTotal = _rTotal.sub(rAmount);\r\n        _tFeeTotal = _tFeeTotal.add(tAmount);\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n        if (!deductTransferFee) {\r\n            (uint256 rAmount, , , , ) = _getValues(tAmount);\r\n            return rAmount;\r\n        } else {\r\n            (, uint256 rTransferAmount, , , ) = _getValues(tAmount);\r\n            return rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            rAmount <= _rTotal,\r\n            \"Amount must be less than total reflections\"\r\n        );\r\n        uint256 currentRate = _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function excludeFromReward(address account) public onlyOwner {\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n        if (_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    function includeInReward(address account) external onlyOwner {\r\n        require(_isExcluded[account], \"Account is already excluded\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function excludeFromFee(address account) external onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n\r\n        emit addressExcludedFromFee (account);\r\n    }\r\n\r\n    function includeForDonation(address account) external onlyOwner {\r\n        _isDonationRecipient[account] = true;\r\n\r\n        emit isEnrolledAsDonationReceiver (account);\r\n    }\r\n\r\n    function excludeForDonation(address account) external onlyOwner {\r\n        _isDonationRecipient[account] = false;\r\n\r\n        emit isRemovedAsDonationReceiver (account);\r\n        \r\n    }\r\n\r\n    function antiSniper(address account) external onlyOwner {\r\n        _isSniper[account] = true;\r\n\r\n        emit isEnrolledAsSniperAccount(account);\r\n    }\r\n\r\n    //Conditional removal from Sniper mapping, contact us\r\n    function removeAntiSniper(address account) external onlyOwner {\r\n        _isSniper[account] = false;\r\n\r\n        emit isRemovedAsSniperAccount(account);\r\n    }\r\n\r\n    function checkLastTransfer (address account) public view returns (\r\n        uint256 lastTransfer,\r\n        uint256 donate500,\r\n        uint256 donate2500,\r\n        uint256 donate10K,\r\n        uint256 donate100K) {\r\n\r\n        lastTransfer = transferTimeFrom[account];\r\n        donate500 = transferTimeFrom[account] + 60 minutes;\r\n        donate2500 = transferTimeFrom[account] + 8 hours;\r\n        donate10K = transferTimeFrom[account] + 36 hours;\r\n        donate100K = transferTimeFrom[account] + 20 days;\r\n    \r\n        return (lastTransfer, donate500, donate2500, donate10K, donate100K);\r\n    }\r\n\r\n    // Change donation sell limits for partners\r\n    function setDonationSell(uint256 dsell) external onlyOwner {\r\n        require(dsell == 999 * 10**2 * 10**9 || dsell == 999 * 10**1 * 10**9,\r\n                \"Can only set to either 99,900 or 9,990\"\r\n                );\r\n\r\n        donationSell = dsell;\r\n\r\n        emit updatedDonationSell (dsell);\r\n    }\r\n\r\n    // Maximum buy fee canot not be set over 10%\r\n    function setBuyFee(uint16 develop, uint16 treasury, uint16 tax) external onlyOwner {\r\n        require(develop + treasury + tax <= 10, \"Fees are capped at 10%\"); \r\n        \r\n        buyFee.developmentFee = develop;\r\n        buyFee.treasuryFee = treasury;\r\n        buyFee.taxFee = tax;\r\n\r\n        emit updatedBuyTaxes (develop, treasury, tax);\r\n    }\r\n\r\n    // Maximum sell fee canot not be set over 10%\r\n    function setSellFee(uint16 develop, uint16 treasury, uint16 tax) external onlyOwner {\r\n        require(develop + treasury + tax <= 10, \"Fees are capped at 10%\"); \r\n\r\n        sellFee.developmentFee = develop;\r\n        sellFee.treasuryFee = treasury;\r\n        sellFee.taxFee = tax;\r\n\r\n        emit updatedSellTaxes (develop, treasury, tax);\r\n    }\r\n\r\n    // Transfers are highly discouraged!\r\n    function setTransferFee(uint16 develop, uint16 treasury, uint16 tax) external onlyOwner {\r\n        require(develop + treasury + tax <= 20, \"Fees are capped at 20%\"); \r\n\r\n        transferFee.developmentFee = develop;\r\n        transferFee.treasuryFee = treasury;\r\n        transferFee.taxFee = tax;\r\n\r\n        emit updatedTransferTaxes (develop, treasury, tax);\r\n    }\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n    }\r\n\r\n    function _getValues(uint256 tAmount)\r\n        private\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        (\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tTreasury,\r\n            uint256 tDevelopment\r\n        ) = _getTValues(tAmount);\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(\r\n            tAmount,\r\n            tFee,\r\n            tTreasury,\r\n            tDevelopment,\r\n            _getRate()\r\n        );\r\n        return (\r\n            rAmount,\r\n            rTransferAmount,\r\n            rFee,\r\n            tTransferAmount,\r\n            tFee\r\n        );\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount)\r\n        private\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 tFee = calculateTaxFee(tAmount);\r\n        uint256 tTreasury = calculateTreasuryFee(tAmount);\r\n        uint256 tDevelopment = calculateDevelopmentFee(tAmount);\r\n        uint256 tTransferAmount = tAmount.sub(tFee);\r\n        tTransferAmount = tTransferAmount.sub(tTreasury).sub(tDevelopment);\r\n        return (tTransferAmount, tFee, tTreasury, tDevelopment);\r\n    }\r\n\r\n    function _getRValues(\r\n        uint256 tAmount,\r\n        uint256 tFee,\r\n        uint256 tTreasury,\r\n        uint256 tDevelopment,\r\n        uint256 currentRate\r\n    )\r\n        private\r\n        pure\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n        uint256 rTreasury = tTreasury.mul(currentRate);\r\n        uint256 rDevelopment = tDevelopment.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount\r\n            .sub(rFee)\r\n            .sub(rTreasury)\r\n            .sub(rDevelopment);\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (\r\n                _rOwned[_excluded[i]] > rSupply ||\r\n                _tOwned[_excluded[i]] > tSupply\r\n            ) return (_rTotal, _tTotal);\r\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\r\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\r\n        }\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function _takeTreasuryAndDevelopment(uint256 tTreasury, uint256 tDevelopment)\r\n        private\r\n    {\r\n        uint256 currentRate = _getRate();\r\n        uint256 rTreasury = tTreasury.mul(currentRate);\r\n        uint256 rDevelopment = tDevelopment.mul(currentRate);\r\n\r\n        _rOwned[Wallet_Treasury] = _rOwned[Wallet_Treasury].add(rTreasury);\r\n        _rOwned[Wallet_Development] = _rOwned[Wallet_Development].add(rDevelopment);\r\n\r\n        _tOwned[Wallet_Treasury] = _tOwned[Wallet_Treasury].add(tTreasury);\r\n        _tOwned[Wallet_Development] = _tOwned[Wallet_Development].add(tDevelopment);\r\n\r\n    }\r\n\r\n    function calculateTaxFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_taxFee).div(10**2);\r\n    }\r\n\r\n    function calculateTreasuryFee(uint256 _amount)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _amount.mul(_treasuryFee).div(10**2);\r\n    }\r\n\r\n    function calculateDevelopmentFee(uint256 _amount)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _amount.mul(_developmentFee).div(10**2);\r\n    }\r\n\r\n    function removeAllFee() private {\r\n        _taxFee = 0;\r\n        _treasuryFee = 0;\r\n        _developmentFee = 0;\r\n    }\r\n\r\n    function setBuy() private {\r\n        _taxFee = buyFee.taxFee;\r\n        _treasuryFee = buyFee.treasuryFee;\r\n        _developmentFee = buyFee.developmentFee;\r\n    }\r\n\r\n    function setSell() private {\r\n        _taxFee = sellFee.taxFee;\r\n        _treasuryFee = sellFee.treasuryFee;\r\n        _developmentFee = sellFee.developmentFee;\r\n    }\r\n\r\n    function setTransfer() private {\r\n        _taxFee = transferFee.taxFee;\r\n        _treasuryFee = transferFee.treasuryFee;\r\n        _developmentFee = transferFee.developmentFee;\r\n    }\r\n\r\n    function claimStuckTokens(address _token) external onlyOwner {\r\n        require(_token != address(this), \"No rug pulls :)\");\r\n\r\n        if (_token == address(0x0)) {\r\n            payable(owner()).transfer(address(this).balance);\r\n            return;\r\n        }\r\n\r\n        IERC20 erc20token = IERC20(_token);\r\n        uint256 balance = erc20token.balanceOf(address(this));\r\n        erc20token.transfer(owner(), balance);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n\r\n    ) private {\r\n        require(from != address(0), \"BEP20: transfer from the zero address\");\r\n        require(to != address(0), \"BEP20: transfer to the zero address\");\r\n        require(amount > 0, \"BEP20: Transfer amount must be greater than zero\");\r\n\r\n        // Please do not bot unless you want to get burned\r\n        if (_isSniper[from])\r\n            {\r\n            if (block.timestamp <= 1844251200) { // Will be allowed transfer until June 10, 2028 12:00:00 GMT\r\n            require ((to == uniswapV2Pair\r\n                    && amount <= _sniperSellLimit) // Can sell 50,000 tokens at a time\r\n                    || ((to == Wallet_Treasury || to == Wallet_Development)\r\n                    && amount <= donationTransferMax) // Transfer 250,000 buy back at half price\r\n                    || ((to != Wallet_Treasury || to != Wallet_Development\r\n                        || to != owner() || !_isDonationRecipient[to])\r\n                    && amount <= _maxTxAmount) // Transfer to another wallet, pay transfer tax\r\n                    && (block.timestamp >= transferTimeFrom[from] + 14 days), // Can only transfer twice a month\r\n                    \"CHT: Account tagged as Sniper, with limited capacity to send.\"\r\n            );\r\n\r\n            transferTimeFrom[from] = block.timestamp;\r\n\r\n            }\r\n                else { // Snipers can only have tokens burned\r\n                require (to == Wallet_Burn && amount <= _maxTxAmount,\r\n                        \"CHT: No option but to burn, buyback for 1/5th of current price.\"); // Treasury will manually buy back\r\n            }\r\n            \r\n        }\r\n\r\n        // Prize Wallet Receiving Limits\r\n        if (to == Wallet_Prize)\r\n            {\r\n            uint256 heldTokens = balanceOf(to);\r\n            require ((from == Wallet_Treasury) // Can only receive tokens from Treasury.\"\r\n                    && (heldTokens + amount) <= _maxPrizeHold,\r\n                    \"CHT: Prize Wallet can only receive from Treasury Wallet.\"\r\n             );        \r\n        }\r\n        \r\n        // Employment Wallet Receiving Limits\r\n        if (_isEmploymentWallet[to])\r\n            {\r\n            uint256 heldTokens = balanceOf(to);\r\n            require (from == Wallet_Treasury // Can only receive from Treasury\"\r\n                    && (heldTokens + amount) <= _maxEmploymentHold, // Can only hold at most 7.5% of the supply\"\r\n                    \"CHT: Employment Wallet can only receive from Treasury Wallet.\"\r\n             );        \r\n        }\r\n\r\n        // Donation Wallet receiving limits\r\n        if (_isDonationRecipient[to])\r\n            {\r\n            uint256 heldTokens = balanceOf(to);\r\n            require (from != owner() && ((heldTokens + amount) <= _maxDonationRecipientHold) \r\n                    && \r\n                    ((amount == _donationLimit1 // Can only donate 500 tokens at a time\r\n                    && block.timestamp > transferTimeFrom[from] + 60 minutes) // 1-hour donation cooldown\r\n                    ||\r\n                    (amount == _donationLimit2 // Can only donate 2,500 tokens at a time\r\n                    && block.timestamp > transferTimeFrom[from] + 8 hours) // 8-hour donation cooldown\r\n                    ||\r\n                    (amount == _donationLimit3 // Can only donate 10,000 tokens at a time\r\n                    && block.timestamp > transferTimeFrom[from] + 36 hours) // 36-hour donation cooldown\r\n                    ||\r\n                    (amount == _donationLimit4 // Can only donate 100,000 tokens at a time\r\n                    && block.timestamp > transferTimeFrom[from] + 20 days)), // 20-day donation cooldown\r\n                    \"CHT: Donation cooldown times as follows: Donate 100K (20d), 10K (36h), 2500 (8h), 500 (1h).\"\r\n            );\r\n            transferTimeFrom[from] = block.timestamp;\r\n            \r\n        }\r\n\r\n        // Donation Wallet transfer and sell limits, buyer protection for misuse of lack of fees\r\n        if (_isDonationRecipient[from]) \r\n            {\r\n            require ((amount == donationTransferMax && _isEmploymentWallet[to]) // Send 250,000 tokens to Employment Wallet\r\n                    || ((amount == donationSell && to == uniswapV2Pair)\r\n                       && (block.timestamp > transferTimeFrom[from] + 3 days)) // Sell 99,900 tokens every 3 days\r\n                    || (amount <= burnTransferAmt && to == Wallet_Burn), // Burn at most 100,000 tokens at a time\r\n                    \"CHT: Donation Recipient Wallets have transfer limitations.\"\r\n            );\r\n            transferTimeFrom[from] = block.timestamp;\r\n\r\n        }\r\n\r\n        // Regular Wallet Limit\r\n        if (!_isLimitExempt[to] && !_isEmploymentWallet[to] && !_isDonationRecipient[to] && from != owner())\r\n            {\r\n            uint256 heldTokens = balanceOf(to);\r\n            require((heldTokens + amount) <= _maxWalletHold, \r\n                \"CHT: Regular wallets can only hold up to 5% of the total supply.\"\r\n            );\r\n        }\r\n\r\n        if (from != owner() && to != owner()) {\r\n            require(\r\n                amount <= _maxTxAmount,\r\n                \"CHT: Transfer amount is limited to 1% of the total supply.\"\r\n            );\r\n            transferTimeFrom[from] = block.timestamp;\r\n}\r\n\r\n        //indicates if fee should be deducted from transfer\r\n        bool takeFee = true;\r\n\r\n        //if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to] \r\n            || _isDonationRecipient[from] || _isDonationRecipient[to]) {\r\n\r\n            takeFee = false;\r\n        }\r\n\r\n        //transfer amount, it will take tax, treasury, prize fee\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n    }\r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bool takeFee\r\n    ) private {\r\n        if(!takeFee)\r\n        removeAllFee();\r\n\r\n        if (takeFee) {\r\n            if (sender == uniswapV2Pair) {\r\n                setBuy();\r\n            }\r\n                else if (recipient == uniswapV2Pair) {\r\n                setSell();\r\n\r\n            }  \r\n                else {\r\n                setTransfer();\r\n            } \r\n\r\n        }\r\n         \r\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferFromExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferToExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferStandard(sender, recipient, amount);\r\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferBothExcluded(sender, recipient, amount);\r\n        } else {\r\n            _transferStandard(sender, recipient, amount);\r\n        }\r\n    }\r\n\r\n    function _transferStandard(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee\r\n\r\n        ) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeTreasuryAndDevelopment(\r\n            calculateTreasuryFee(tAmount),\r\n            calculateDevelopmentFee(tAmount)\r\n\r\n        );\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferToExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee\r\n\r\n        ) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeTreasuryAndDevelopment(\r\n            calculateTreasuryFee(tAmount),\r\n            calculateDevelopmentFee(tAmount)\r\n\r\n        );\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferFromExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee\r\n\r\n        ) = _getValues(tAmount);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeTreasuryAndDevelopment(\r\n            calculateTreasuryFee(tAmount),\r\n            calculateDevelopmentFee(tAmount)\r\n\r\n        );\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferBothExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n\r\n    ) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee\r\n\r\n        ) = _getValues(tAmount);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeTreasuryAndDevelopment(\r\n            calculateTreasuryFee(tAmount),\r\n            calculateDevelopmentFee(tAmount)\r\n\r\n        );\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n    \r\n    //to recieve ETH from uniswapV2Router when swaping\r\n    receive() external payable {}\r\n\r\n}\r\n\r\n// Stay SAFU, say no to rugs, and always DYOR", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addressExcludedFromFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isEnrolledAsDonationReceiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isEnrolledAsSniperAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isRemovedAsDonationReceiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isRemovedAsSniperAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"develop\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"treasury\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"}],\"name\":\"updatedBuyTaxes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dsell\",\"type\":\"uint256\"}],\"name\":\"updatedDonationSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"develop\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"treasury\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"}],\"name\":\"updatedSellTaxes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"develop\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"treasury\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"}],\"name\":\"updatedTransferTaxes\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Wallet_Development\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Wallet_Employment1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Wallet_Employment2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Wallet_Prize\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Wallet_Treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_employmentSellLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isDonationRecipient\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minHoldToClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sniperSellLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"antiSniper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"developmentFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"treasuryFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"taxFee\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"checkLastTransfer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastTransfer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"donate500\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"donate2500\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"donate10K\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"donate100K\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimStuckTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeForDonation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeForDonation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isSniperAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAntiSniper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"developmentFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"treasuryFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"taxFee\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"develop\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"treasury\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"tax\",\"type\":\"uint16\"}],\"name\":\"setBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dsell\",\"type\":\"uint256\"}],\"name\":\"setDonationSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"develop\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"treasury\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"tax\",\"type\":\"uint16\"}],\"name\":\"setSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"develop\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"treasury\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"tax\",\"type\":\"uint16\"}],\"name\":\"setTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"developmentFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"treasuryFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"taxFee\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CRYPTOHEALTH", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6cee762424f446ba4d693b73598f699f183744b790fcc87d79898156f89079db"}