{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-04-11\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-03-24\r\n */\r\n\r\npragma solidity 0.5.17;\r\n\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor() internal {}\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"DMH SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"DMH SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"DMH SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"DMH SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"DMH SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary stack {\r\n    struct Stack {\r\n        uint256[] data;\r\n        uint256 capacity;\r\n        uint256 top;\r\n    }\r\n\r\n    function push(Stack storage self, uint256 val) internal returns (bool) {\r\n        if (self.top >= self.capacity) {\r\n            self.data.push(val);\r\n            self.capacity = self.data.length;\r\n        } else {\r\n            self.data[self.top] = val;\r\n        }\r\n        self.top++;\r\n        assert(self.top > 0);\r\n        assert(self.capacity > 0);\r\n        assert(self.data.length > 0);\r\n        return true;\r\n    }\r\n\r\n    function pop(Stack storage self) internal returns (uint256 val) {\r\n        assert(self.top > 0);\r\n        val = self.data[self.top - 1];\r\n        self.top--;\r\n    }\r\n\r\n    function getTop(Stack storage self) internal view returns (uint256) {\r\n        assert(!(self.top == 0));\r\n        return self.data[self.top - 1];\r\n    }\r\n}\r\n\r\nlibrary IterableMapping {\r\n    struct itmap {\r\n        mapping(uint256 => IndexValue) data;\r\n        KeyFlag[] keys;\r\n        uint256 size;\r\n        stack.Stack holes; //for save deleted keyIndex. note the offset, save the zero based index, the real array pos start at 0.\r\n        uint256 tail; //save tail pos, can't use size anymore, otherwise may overwrite some later part of the array.\r\n    }\r\n    struct IndexValue {\r\n        uint256 keyIndex;\r\n        address value;\r\n    }\r\n    struct KeyFlag {\r\n        uint256 key;\r\n        bool deleted;\r\n    }\r\n\r\n    function getKeyHint(itmap storage self) internal view returns (uint256) {\r\n        if (self.holes.top > 0) {\r\n            return stack.getTop(self.holes);\r\n        }\r\n        return self.tail;\r\n    }\r\n\r\n    function insert(\r\n        itmap storage self,\r\n        uint256 key,\r\n        address value\r\n    ) internal returns (bool replaced) {\r\n        uint256 keyIndex = self.data[key].keyIndex; //means the begin with 0 position in array, but we will save a +1 number\r\n        //in data map for judeing if the element exists.\r\n        self.data[key].value = value;\r\n        if (keyIndex > 0) return true;\r\n        else {\r\n            if (self.holes.top == 0) {\r\n                //old logic.\r\n                keyIndex = self.keys.length++;\r\n                self.data[key].keyIndex = keyIndex + 1;\r\n                self.keys[keyIndex].key = key;\r\n            } else {\r\n                //reuse space.\r\n                keyIndex = getKeyHint(self);\r\n                self.data[key].keyIndex = keyIndex + 1; // save +1 to judge if valid, 0 is not valid.\r\n                self.keys[keyIndex].key = key;\r\n                self.keys[keyIndex].deleted = false;\r\n                stack.pop(self.holes);\r\n            }\r\n            self.size++;\r\n            if (self.size - 1 > self.tail) {\r\n                self.tail = self.size - 1;\r\n            }\r\n\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function remove(itmap storage self, uint256 key)\r\n        internal\r\n        returns (bool success)\r\n    {\r\n        uint256 keyIndex = self.data[key].keyIndex;\r\n        if (keyIndex == 0) return false;\r\n        delete self.data[key];\r\n        stack.push(self.holes, keyIndex - 1); //save the real offset, begin with 0, so need -1.\r\n        self.keys[keyIndex - 1].deleted = true;\r\n        self.size--;\r\n        return true;\r\n    }\r\n\r\n    function contains(itmap storage self, uint256 key)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return self.data[key].keyIndex > 0;\r\n    }\r\n\r\n    function iterate_start(itmap storage self)\r\n        internal\r\n        view\r\n        returns (uint256 keyIndex)\r\n    {\r\n        return iterate_next(self, uint256(-1));\r\n    }\r\n\r\n    function iterate_valid(itmap storage self, uint256 keyIndex)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return keyIndex < self.keys.length;\r\n    }\r\n\r\n    function iterate_next(itmap storage self, uint256 keyIndex)\r\n        internal\r\n        view\r\n        returns (uint256 r_keyIndex)\r\n    {\r\n        keyIndex++;\r\n        while (keyIndex < self.keys.length && self.keys[keyIndex].deleted)\r\n            keyIndex++;\r\n        return keyIndex;\r\n    }\r\n\r\n    function iterate_get(itmap storage self, uint256 keyIndex)\r\n        internal\r\n        view\r\n        returns (address value)\r\n    {\r\n        value = self.data[self.keys[keyIndex].key].value;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n}\r\n\r\ninterface IFactory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address PancakePair);\r\n}\r\n\r\ninterface IPancakePair {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n}\r\n\r\ncontract PancakeTool {\r\n    address public PancakePair;\r\n    IRouter internal PancakeV2Router;\r\n    address public USDT = 0x55d398326f99059fF775485246999027B3197955;\r\n\r\n    function initIRouter(address _router) internal {\r\n        PancakeV2Router = IRouter(_router);\r\n        PancakePair = IFactory(PancakeV2Router.factory()).createPair(\r\n            address(this),\r\n            USDT\r\n        );\r\n    }\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountA,\r\n        uint256 amountB\r\n    ) internal {\r\n        PancakeV2Router.addLiquidity(\r\n            tokenA,\r\n            tokenB,\r\n            amountA,\r\n            amountB,\r\n            0,\r\n            0,\r\n            address(0x0),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapTokensForTokens(uint256 amountA, address to) internal {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = USDT;\r\n        PancakeV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            amountA,\r\n            0,\r\n            path,\r\n            to,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function getPoolInfo()\r\n        public\r\n        view\r\n        returns (uint112 WETHAmount, uint112 TOKENAmount)\r\n    {\r\n        (uint112 _reserve0, uint112 _reserve1, ) = IPancakePair(PancakePair)\r\n            .getReserves();\r\n        WETHAmount = _reserve1;\r\n        TOKENAmount = _reserve0;\r\n        if (IPancakePair(PancakePair).token0() == PancakeV2Router.WETH()) {\r\n            WETHAmount = _reserve0;\r\n            TOKENAmount = _reserve1;\r\n        }\r\n    }\r\n\r\n    function getLPTotal(address user) external view returns (uint256) {\r\n        return IBEP20(PancakePair).balanceOf(user);\r\n    }\r\n\r\n    function getTotalSupply() external view returns (uint256) {\r\n        return IBEP20(PancakePair).totalSupply();\r\n    }\r\n}\r\n\r\ncontract DHAND is Context, IBEP20, Ownable, PancakeTool {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n    uint8 public _decimals;\r\n    string public _symbol;\r\n    string public _name;\r\n\r\n    address private cakeRouter = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    address private initPoolHolder;\r\n\r\n    uint256 public balanceTop;\r\n\r\n    uint8 private _Percent = 3;\r\n\r\n    uint256 private divBase = 100;\r\n    uint256 private tokenSize = 1000000000000000000;\r\n\r\n    uint256 private rewardTime = now;\r\n\r\n    IterableMapping.itmap shareHolders;\r\n    uint256 private shareSize = 0;\r\n\r\n    uint256 private _liquiditySupply;\r\n    mapping(address => uint256) private _liquidityBalances;\r\n\r\n    struct Client {\r\n        bool isJoin;\r\n        uint256 joinKey;\r\n        uint256 joinTime;\r\n    }\r\n\r\n    mapping(address => Client) private ClientMap;\r\n    mapping(address => uint256) private dividendMap;\r\n    mapping(address => uint256) private logCountMap;\r\n    bool private isSwaping;\r\n\r\n    event Withdraw(address indexed account, uint256 value);\r\n    event PledgeLP(address indexed account, uint256 value);\r\n    event RemovePledge(address indexed account, uint256 value);\r\n\r\n    constructor() public {\r\n        _name = \"DHAND Token\";\r\n        _symbol = \"DHAND\";\r\n        _decimals = 18;\r\n\r\n        _totalSupply = 6666 * tokenSize;\r\n        _balances[msg.sender] = 6666 * tokenSize;\r\n        initPoolHolder = msg.sender;\r\n        initIRouter(cakeRouter);\r\n\r\n        _approve(address(this), cakeRouter, ~uint256(0));\r\n        _approve(owner(), cakeRouter, ~uint256(0));\r\n        IBEP20(USDT).approve(cakeRouter, ~uint256(0));\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address) {\r\n        return owner();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-totalSupply}.\r\n     */\r\n    function totalSupply() external view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {BEP20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"BEP20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {BEP20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {BEP20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"BEP20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Burn `amount` tokens and decreasing the total supply.\r\n     */\r\n    function burn(uint256 amount) public returns (bool) {\r\n        _burn(_msgSender(), amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal {\r\n        require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n        require(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n\r\n        _beforeTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            \"BEP20: transfer amount exceeds balance\"\r\n        );\r\n\r\n        if (\r\n            sender != owner() &&\r\n            sender != address(this) &&\r\n            sender != initPoolHolder &&\r\n            recipient != owner() &&\r\n            recipient != address(this) &&\r\n            recipient != initPoolHolder\r\n        ) {\r\n            uint256 Fee = (amount / divBase) * _Percent;\r\n            _balances[address(this)] = _balances[address(this)].add(Fee);\r\n            amount = amount.sub(Fee);\r\n            emit Transfer(sender, address(this), Fee);\r\n        }\r\n\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        if(!isSwaping){\r\n            calculateDividend();\r\n        }\r\n    }\r\n\r\n    function _beforeTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal view {\r\n        if (sender == address(this) || sender == initPoolHolder) {\r\n            return;\r\n        }\r\n\r\n        if (recipient == tx.origin && recipient != initPoolHolder) {\r\n            require(amount <= 5 * tokenSize);\r\n            require(_balances[recipient].add(amount) <= 20 * tokenSize);\r\n            return;\r\n        }\r\n\r\n        if (sender == tx.origin && sender != initPoolHolder) {\r\n            require(amount <= 5 * tokenSize);\r\n            require(amount <= (_balances[sender] / divBase) * 99);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"BEP20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(\r\n            amount,\r\n            \"BEP20: burn amount exceeds balance\"\r\n        );\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(\r\n            account,\r\n            _msgSender(),\r\n            _allowances[account][_msgSender()].sub(\r\n                amount,\r\n                \"BEP20: burn amount exceeds allowance\"\r\n            )\r\n        );\r\n    }\r\n\r\n    function batchTransfer(uint256 amount, address[] memory to) public {\r\n        for (uint256 i = 0; i < to.length; i++) {\r\n            _transfer(_msgSender(), to[i], amount);\r\n        }\r\n    }\r\n\r\n    function liquiditySupply() external view returns (uint256) {\r\n        return _liquiditySupply;\r\n    }\r\n\r\n    function liquidityBalance(address account)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _liquidityBalances[account];\r\n    }\r\n\r\n    function addPledge(uint256 amount) public returns (bool) {\r\n        IPancakePair(PancakePair).transferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            amount\r\n        );\r\n        _liquidityBalances[msg.sender] = _liquidityBalances[msg.sender].add(\r\n            amount\r\n        );\r\n        _liquiditySupply = _liquiditySupply.add(amount);\r\n        Client memory client = ClientMap[msg.sender];\r\n        if (!client.isJoin) {\r\n            ClientMap[msg.sender] = Client(true, shareSize, now);\r\n            insertHolder(shareSize, msg.sender);\r\n            shareSize = shareSize.add(1);\r\n        }\r\n\r\n        emit PledgeLP(msg.sender, amount);\r\n        return true;\r\n    }\r\n\r\n    function removePledge(uint256 amount) public payable returns (bool) {\r\n        Client memory client = ClientMap[msg.sender];\r\n        require(_liquidityBalances[msg.sender] >= amount);\r\n        require(         \r\n            msg.value >= 2000000000000000,\r\n            \"You need to pay 0.002 BNB to cover the bonus calculation fee.\"\r\n        );\r\n        _liquidityBalances[msg.sender] = _liquidityBalances[msg.sender].sub(\r\n            amount\r\n        );\r\n        address(this).transfer(msg.value);\r\n        _liquiditySupply = _liquiditySupply.sub(amount);\r\n        IPancakePair(PancakePair).transfer(msg.sender, amount);\r\n        if (_liquidityBalances[msg.sender] <= 0) {\r\n            removeHolder(client.joinKey);\r\n            delete ClientMap[msg.sender];\r\n        }\r\n        emit RemovePledge(msg.sender, amount);\r\n        return true;\r\n    }\r\n\r\n    function shareAll() public view returns (address[] memory) {\r\n        uint256 index = 0;\r\n        address[] memory shareList = new address[](shareHolders.size);\r\n        for (\r\n            uint256 i = IterableMapping.iterate_start(shareHolders);\r\n            IterableMapping.iterate_valid(shareHolders, i);\r\n            i = IterableMapping.iterate_next(shareHolders, i)\r\n        ) {\r\n            address account = IterableMapping.iterate_get(shareHolders, i);\r\n            shareList[index] = account;\r\n            index += 1;\r\n        }\r\n        return shareList;\r\n    }\r\n\r\n    function shareAllSize() public view returns (uint256) {\r\n        return shareHolders.size;\r\n    }\r\n\r\n    function calculateDividend() public  returns (bool) {\r\n        if (now - rewardTime >= 86400) {\r\n            //\u5f53\u524d\u4f59\u989d - \u4e0a\u6b21\u5206\u7ea2\u65f6\u7684\u4f59\u989d = \u672c\u671f\u53ef\u8fdb\u884c\u5206\u7ea2\u7684\u6570\u91cf\r\n            uint256 lastBalance = _balances[address(this)] - balanceTop;\r\n            //\u5982\u679c\u4f59\u989d\u6ee1\u8db3\r\n            if (lastBalance >= 0) {\r\n                rewardTime = now;\r\n                balanceTop = _balances[address(this)];\r\n                for (\r\n                    uint256 i = IterableMapping.iterate_start(shareHolders);\r\n                    IterableMapping.iterate_valid(shareHolders, i);\r\n                    i = IterableMapping.iterate_next(shareHolders, i)\r\n                ) {\r\n                    address account = IterableMapping.iterate_get(\r\n                        shareHolders,\r\n                        i\r\n                    );\r\n                    uint256 r = calculateReward(\r\n                        _liquiditySupply,\r\n                        lastBalance,\r\n                        _liquidityBalances[account]\r\n                    );\r\n                    dividendMap[account] = dividendMap[account].add(r);\r\n                }\r\n            } \r\n\r\n            //If the number of LP pledgers reaches 100, the Gas fee return mechanism starts\r\n            if (shareHolders.size > 100) {\r\n                uint256 gas = (tx.gasprice * block.gaslimit) - gasleft();\r\n                uint256 bnb = address(this).balance;\r\n                if(bnb > 0){\r\n                    if (bnb >= gas) { \r\n                        tx.origin.transfer(gas);\r\n                    }   \r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function withdrawDividend() public payable returns (bool) {\r\n        uint256 amount = dividendMap[msg.sender];\r\n        require(amount > 0, \"No dividend for now\");\r\n        require(         \r\n            msg.value >= 2000000000000000,\r\n            \"You need to pay 0.002 BNB to cover the bonus calculation fee.\"\r\n        );\r\n        dividendMap[msg.sender] = dividendMap[msg.sender].sub(\r\n            amount,\r\n            \"amount exceeds balance\"\r\n        );\r\n        address(this).transfer(msg.value);\r\n        balanceTop = balanceTop.sub(amount);\r\n        uint256 liquidity = (amount / divBase) * 3;\r\n        backflowPool(liquidity);\r\n        amount = amount.sub(liquidity);\r\n        _transfer(address(this), msg.sender, amount);\r\n        logCountMap[msg.sender] = logCountMap[msg.sender].add(amount);\r\n        emit Withdraw(msg.sender, amount);\r\n        return true;\r\n    }\r\n\r\n    function backflowPool(uint256 amount) internal {\r\n        isSwaping = true;\r\n\r\n        uint256 half = amount.div(2);\r\n        uint256 otherHalf = amount.sub(half);\r\n        uint256 oldBalance = IBEP20(USDT).balanceOf(address(this));\r\n\r\n        swapTokensForTokens(half, initPoolHolder);\r\n\r\n        IBEP20(USDT).transferFrom(\r\n            initPoolHolder,\r\n            address(this),\r\n            IBEP20(USDT).balanceOf(initPoolHolder)\r\n        );\r\n        \r\n        uint256 newBalance = IBEP20(USDT).balanceOf(address(this)) - oldBalance;\r\n        addLiquidity(address(this), USDT, otherHalf, newBalance);\r\n\r\n        isSwaping = false;\r\n    }\r\n\r\n    function joinTime(address account) public view returns (uint256) {\r\n        return ClientMap[account].joinTime;\r\n    }\r\n\r\n    function dividend(address account) public view returns (uint256) {\r\n        return dividendMap[account];\r\n    }\r\n\r\n    function logsCount(address account) public view returns (uint256) {\r\n        return logCountMap[account];\r\n    }\r\n\r\n    function calculateReward(\r\n        uint256 total,\r\n        uint256 reward,\r\n        uint256 holders\r\n    ) internal view returns (uint256) {\r\n        return (reward * ((holders * tokenSize) / total)) / tokenSize;\r\n    }\r\n\r\n    // Increase shareholder\r\n    function insertHolder(uint256 k, address v)\r\n        internal\r\n        returns (uint256 size)\r\n    {\r\n        // Actually calls itmap_impl.insert, auto-supplying the first parameter for us.\r\n        IterableMapping.insert(shareHolders, k, v);\r\n        // We can still access members of the struct - but we should take care not to mess with them.\r\n        return shareHolders.size;\r\n    }\r\n\r\n    //remove shareholder\r\n    function removeHolder(uint256 k) internal returns (uint256 size) {\r\n        // Actually calls itmap_impl.insert, auto-supplying the first parameter for us.\r\n        IterableMapping.remove(shareHolders, k);\r\n        // We can still access members of the struct - but we should take care not to mess with them.\r\n        return shareHolders.size;\r\n    }\r\n\r\n    function() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PledgeLP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RemovePledge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"PancakePair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addPledge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceTop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"}],\"name\":\"batchTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"calculateDividend\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"dividend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getLPTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPoolInfo\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"WETHAmount\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"TOKENAmount\",\"type\":\"uint112\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"joinTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"liquidityBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liquiditySupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"logsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removePledge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"shareAll\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"shareAllSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawDividend\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "DHAND", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://74e89fc9535257a29bfac9a21e65b9a3fa99e74bda569449d988c3a14a438782"}