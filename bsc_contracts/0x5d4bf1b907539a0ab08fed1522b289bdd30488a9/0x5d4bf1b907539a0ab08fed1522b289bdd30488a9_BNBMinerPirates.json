{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-04-15\r\n */\r\n\r\npragma solidity ^0.4.26; // solhint-disable-line\r\n\r\ncontract BNBMinerPirates {\r\n    //uint256 EGGS_PER_MINERS_PER_SECOND=1;\r\n    uint256 public EGGS_TO_HATCH_1MINERS = 2592000; \r\n    uint256 PSN = 10000;\r\n    uint256 PSNH = 5000;\r\n    bool public initialized = false;\r\n    address public ceoAddress;\r\n    address public marketingAddress;\r\n    address public devAddress;\r\n    address public insuranceWallet;\r\n    address public communityWallet;\r\n    mapping(address => uint256) public hatcheryMiners;\r\n    mapping(address => uint256) public claimedEggs;\r\n    mapping(address => uint256) public lastHatch;\r\n    mapping(address => address) public referrals;\r\n    mapping(address => uint256) public refIncomes;\r\n    mapping(address => uint256) public investments;\r\n    mapping(address => uint256) public withdrawals;\r\n    uint256 public marketEggs;\r\n    uint256 public totalUsers;\r\n    uint256 public totalInvestment;\r\n    uint256[] public refPercents = [5, 3, 2, 2];\r\n\r\n    event buyEvent(address indexed user, uint256 amount, address referrer);\r\n    event sellEvent(address indexed user, uint256 amount);\r\n    event hatchEvent(address indexed user, uint256 eggs, uint256 miners);\r\n\r\n    constructor(\r\n        address _ceoAddress,\r\n        address _marketingAddress,\r\n        address _insuranceWallet,\r\n        address _communityAddress\r\n    ) public {\r\n        ceoAddress = _ceoAddress;\r\n        marketingAddress = _marketingAddress;\r\n        devAddress = msg.sender;\r\n        insuranceWallet = _insuranceWallet;\r\n        communityWallet = _communityAddress;\r\n\r\n        //a root user is required\r\n        hatcheryMiners[msg.sender] = 1;\r\n    }\r\n\r\n    function hatchEggs() public {\r\n        require(initialized);\r\n        \r\n        uint256 eggsUsed = getMyEggs(msg.sender);\r\n        uint256 newMiners = SafeMath.div(eggsUsed, EGGS_TO_HATCH_1MINERS);\r\n        hatcheryMiners[msg.sender] = SafeMath.add(\r\n            hatcheryMiners[msg.sender],\r\n            newMiners\r\n        );\r\n        claimedEggs[msg.sender] = 0;\r\n        lastHatch[msg.sender] = now;\r\n\r\n        //send referral eggs\r\n        if (referrals[msg.sender] != address(0)) {\r\n            address upline = referrals[msg.sender];\r\n            for (uint256 i = 0; i < 4; i++) {\r\n                if (upline != address(0)) {\r\n                    claimedEggs[upline] = SafeMath.add(\r\n                        claimedEggs[upline],\r\n                        SafeMath.div(\r\n                            SafeMath.mul(eggsUsed, refPercents[i]),\r\n                            100\r\n                        )\r\n                    );\r\n                    refIncomes[upline] = SafeMath.add(refIncomes[upline],SafeMath.div(\r\n                            SafeMath.mul(eggsUsed, refPercents[i]),\r\n                            100\r\n                        ));\r\n                    upline = referrals[upline];\r\n                } else break;\r\n            }\r\n        }\r\n\r\n        //boost market to nerf miners hoarding\r\n        marketEggs = SafeMath.add(marketEggs, SafeMath.div(eggsUsed, 5));\r\n        emit hatchEvent(msg.sender, eggsUsed, newMiners);\r\n    }\r\n\r\n    function sellEggs() public {\r\n        require(initialized);\r\n        uint256 hasEggs = getMyEggs(msg.sender);\r\n        uint256 eggValue = calculateEggSell(hasEggs);\r\n        uint256 fee = devFee(eggValue);\r\n        claimedEggs[msg.sender] = 0;\r\n        lastHatch[msg.sender] = now;\r\n        marketEggs = SafeMath.add(marketEggs, hasEggs);\r\n        ceoAddress.transfer(fee);\r\n        marketingAddress.transfer(fee);\r\n        devAddress.transfer(fee);\r\n        communityWallet.transfer(fee);\r\n        insuranceWallet.transfer(fee);\r\n        msg.sender.transfer(SafeMath.sub(eggValue, fee));\r\n        withdrawals[msg.sender] = SafeMath.add(withdrawals[msg.sender], SafeMath.sub(eggValue, fee));\r\n        emit sellEvent(msg.sender, eggValue);\r\n    }\r\n\r\n    function buyEggs(address ref) public payable {\r\n        require(initialized);\r\n        require(msg.value>=10**17);\r\n        require(ref != msg.sender && ref != address(0) && hatcheryMiners[ref] > 0);\r\n        \r\n        if (referrals[msg.sender] == address(0)) {\r\n            referrals[msg.sender] = ref;\r\n            totalUsers += 1;\r\n        }\r\n        uint256 eggsBought = calculateEggBuy(\r\n            msg.value,\r\n            SafeMath.sub(address(this).balance, msg.value)\r\n        );\r\n        eggsBought = SafeMath.sub(eggsBought, devFee(eggsBought));\r\n        uint256 fee = devFee(msg.value);\r\n        ceoAddress.transfer(fee);\r\n        marketingAddress.transfer(fee);\r\n        devAddress.transfer(fee);\r\n        insuranceWallet.transfer(fee);\r\n        communityWallet.transfer(fee);\r\n        claimedEggs[msg.sender] = SafeMath.add(\r\n            claimedEggs[msg.sender],\r\n            eggsBought\r\n        );\r\n        hatchEggs();\r\n        totalInvestment = SafeMath.add(totalInvestment, msg.value);\r\n        investments[msg.sender] = SafeMath.add(investments[msg.sender], msg.value);\r\n        emit buyEvent(msg.sender, msg.value, ref);\r\n    }\r\n\r\n    //magic trade balancing algorithm\r\n    function calculateTrade(\r\n        uint256 rt,\r\n        uint256 rs,\r\n        uint256 bs\r\n    ) public view returns (uint256) {\r\n        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\r\n        if(rt==0) return 0;\r\n        return\r\n            SafeMath.div(\r\n                SafeMath.mul(PSN, bs),\r\n                SafeMath.add(\r\n                    PSNH,\r\n                    SafeMath.div(\r\n                        SafeMath.add(\r\n                            SafeMath.mul(PSN, rs),\r\n                            SafeMath.mul(PSNH, rt)\r\n                        ),\r\n                        rt\r\n                    )\r\n                )\r\n            );\r\n    }\r\n\r\n    function calculateEggSell(uint256 eggs) public view returns (uint256) {\r\n        return calculateTrade(eggs, marketEggs, address(this).balance);\r\n    }\r\n\r\n    function calculateEggBuy(uint256 eth, uint256 contractBalance)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return calculateTrade(eth, contractBalance, marketEggs);\r\n    }\r\n\r\n    function calculateEggBuySimple(uint256 eth) public view returns (uint256) {\r\n        return calculateEggBuy(eth, address(this).balance);\r\n    }\r\n\r\n    function devFee(uint256 amount) public pure returns (uint256) {\r\n        return SafeMath.div(SafeMath.mul(amount, 25), 1000);\r\n    }\r\n\r\n    function seedMarket() public payable {\r\n        require(msg.sender == devAddress, \"invalid call\");\r\n        require(marketEggs == 0);\r\n        initialized = true;\r\n        marketEggs = 259200000000;\r\n    }\r\n\r\n    function changeCeo(address _adr) public payable {\r\n        require(msg.sender == devAddress, \"invalid call\");\r\n        ceoAddress = _adr;\r\n    }\r\n\r\n    function changeMarketing(address _adr) public payable {\r\n        require(msg.sender == devAddress, \"invalid call\");\r\n        marketingAddress = _adr;\r\n    }\r\n\r\n    function changeInsurance(address _adr) public payable {\r\n        require(msg.sender == devAddress, \"invalid call\");\r\n        insuranceWallet = _adr;\r\n    }\r\n\r\n    function changeCommunity(address _adr) public payable {\r\n        require(msg.sender == devAddress, \"invalid call\");\r\n        communityWallet = _adr;\r\n    }\r\n\r\n    function getBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getMyMiners(address adr) public view returns (uint256) {\r\n        return hatcheryMiners[adr];\r\n    }\r\n\r\n    function getMyEggs(address adr) public view returns (uint256) {\r\n        return SafeMath.add(claimedEggs[adr], getEggsSinceLastHatch(adr));\r\n    }\r\n\r\n    function getEggsSinceLastHatch(address adr) public view returns (uint256) {\r\n        uint256 secondsPassed = min(\r\n            EGGS_TO_HATCH_1MINERS,\r\n            SafeMath.sub(now, lastHatch[adr])\r\n        );\r\n        return SafeMath.mul(secondsPassed, hatcheryMiners[adr]);\r\n    }\r\n\r\n    function getContractData(address adr)\r\n        public\r\n        view\r\n        returns (\r\n            uint256[] memory\r\n        )\r\n    {\r\n        uint[] memory d = new uint[](13);\r\n        d[0] = getMyMiners(adr);\r\n        d[1] = getMyEggs(adr);\r\n        d[2] = calculateEggSell(getMyEggs(adr));\r\n        d[3] = getEggsSinceLastHatch(adr);\r\n        d[4] = refIncomes[adr];\r\n        d[5] = investments[adr];\r\n        d[6] = withdrawals[adr];\r\n        d[7] = lastHatch[adr];\r\n        d[8] = getBalance();\r\n        d[9] = marketEggs;\r\n        d[10] = totalUsers;\r\n        d[11] = totalInvestment;\r\n        d[12] = calculateEggSell(2592000) * 105 * getMyMiners(adr) / 100;\r\n        return d;\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two numbers, truncating the quotient.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two numbers, throws on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInvestment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"hatchEggs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"rt\",\"type\":\"uint256\"},{\"name\":\"rs\",\"type\":\"uint256\"},{\"name\":\"bs\",\"type\":\"uint256\"}],\"name\":\"calculateTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getContractData\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateEggBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketEggs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getMyEggs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellEggs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"devFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"seedMarket\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastHatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getMyMiners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"insuranceWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedEggs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"refPercents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hatcheryMiners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EGGS_TO_HATCH_1MINERS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateEggBuySimple\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"changeInsurance\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"changeMarketing\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eggs\",\"type\":\"uint256\"}],\"name\":\"calculateEggSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"changeCommunity\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"communityWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"changeCeo\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"refIncomes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getEggsSinceLastHatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"buyEggs\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ceoAddress\",\"type\":\"address\"},{\"name\":\"_marketingAddress\",\"type\":\"address\"},{\"name\":\"_insuranceWallet\",\"type\":\"address\"},{\"name\":\"_communityAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"buyEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sellEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eggs\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"miners\",\"type\":\"uint256\"}],\"name\":\"hatchEvent\",\"type\":\"event\"}]", "ContractName": "BNBMinerPirates", "CompilerVersion": "v0.4.26+commit.4563c3fc", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000008ef857e9b92e3bd503c9495d5ecc16f09f71df19000000000000000000000000d79a0810810a203a7ce90b116a2e6cb411e50761000000000000000000000000d0fe8275a0f9255a33f53a8ccc2f1bb5ef113d30000000000000000000000000d2b31e62fe910594bc034cfd5d805fba8c655727", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://2b3ec772bf9db660ffff672a189d2af5e71dd44952bc30697091d72ce063bcc5"}