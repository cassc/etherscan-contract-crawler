{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\ninterface IBEP20 {\r\n   \r\n    function transfer(\r\n  address recipient,\r\n  uint256 amount\r\n) external returns(bool);\r\n\r\n/**\r\n * @dev Returns the remaining number of tokens that `spender` will be\r\n * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n * zero by default.\r\n *\r\n * This value changes when {approve} or {transferFrom} are called.\r\n */\r\nfunction allowance(\r\n  address _owner,\r\n  address spender\r\n) external view returns(uint256);\r\n\r\n/**\r\n * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n *\r\n * Returns a boolean value indicating whether the operation succeeded.\r\n *\r\n * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n * that someone may use both the old and the new allowance by unfortunate\r\n * transaction ordering. One possible solution to mitigate this race\r\n * condition is to first reduce the spender's allowance to 0 and set the\r\n * desired value afterwards:\r\n * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n *\r\n * Emits an {Approval} event.\r\n */\r\nfunction approve(address spender, uint256 amount) external returns(bool);\r\n\r\n/**\r\n * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n * allowance mechanism. `amount` is then deducted from the caller's\r\n * allowance.\r\n *\r\n * Returns a boolean value indicating whether the operation succeeded.\r\n *\r\n * Emits a {Transfer} event.\r\n */\r\nfunction transferFrom(\r\n  address sender,\r\n  address recipient,\r\n  uint256 amount\r\n) external returns(bool);\r\n\r\n\r\n/**\r\n * @dev Returns the token symbol.\r\n */\r\nfunction symbol() external view returns(string memory);\r\n\r\n\r\n/**\r\n * @dev Returns the amount of tokens owned by `account`.\r\n */\r\nfunction balanceOf(address account) external view returns(uint256);\r\n\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n  address indexed owner,\r\n  address indexed spender,\r\n  uint256 value\r\n);\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n  // Empty internal constructor, to prevent people from mistakenly deploying\r\n  // an instance of this contract, which should be used via inheritance.\r\n  constructor() { }\r\n\r\n  function _msgSender() internal view returns(address) {\r\n    return msg.sender;\r\n  }\r\n\r\n\r\n  function _msgData() internal view returns(bytes memory) {\r\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n    return msg.data;\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n   * @dev Returns the addition of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `+` operator.\r\n   *\r\n   * Requirements:\r\n   * - Addition cannot overflow.\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n    return sub(a, b, \"SafeMath: subtraction overflow\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns(uint256) {\r\n    require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the multiplication of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `*` operator.\r\n   *\r\n   * Requirements:\r\n   * - Multiplication cannot overflow.\r\n   */\r\n  function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n        uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n    return div(a, b, \"SafeMath: division by zero\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns(uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(uint256 a, uint256 b) internal pure returns(uint256) {\r\n    return mod(a, b, \"SafeMath: modulo by zero\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts with custom message when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns(uint256) {\r\n    require(b != 0, errorMessage);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n\r\ninterface IRouter {\r\n    function getPrice(address token) external view returns(uint256);\r\n}\r\n\r\n\r\n\r\ninterface AggregatorV3Interface {\r\n  function decimals() external view returns(uint8);\r\n\r\nfunction description() external view returns(string memory);\r\n\r\nfunction version() external view returns(uint256);\r\n\r\nfunction getRoundData(uint80 _roundId)\r\nexternal\r\nview\r\nreturns(\r\n  uint80 roundId,\r\n  int256 answer,\r\n  uint256 startedAt,\r\n  uint256 updatedAt,\r\n  uint80 answeredInRound\r\n);\r\n\r\nfunction latestRoundData()\r\nexternal\r\nview\r\nreturns(\r\n  uint80 roundId,\r\n  int256 answer,\r\n  uint256 startedAt,\r\n  uint256 updatedAt,\r\n  uint80 answeredInRound\r\n);\r\n}\r\n\r\ncontract MysteryBox is  Context {\r\n    using SafeMath for uint256;\r\n\r\n\r\n    event TransferAnyBSC20Token(\r\n      address indexed sender,\r\n      address indexed recipient,\r\n      uint256 tokens\r\n    );\r\n     event WithdrawAmount(\r\n      address indexed sender,\r\n      address indexed recipient,\r\n      uint256 amount\r\n    );\r\n    event UpdateMysteryBoxDetails(\r\n      uint boxType,\r\n      uint256 price\r\n    );\r\n    event PurchaseMysteryBoxByToken(\r\n      address indexed buyer,\r\n      address indexed tokenAddress,\r\n      uint boxType,\r\n      uint qty,\r\n      uint256 amount\r\n    );\r\n        \r\nIRouter _router = IRouter(0x1b4F71B5e6fDAc9946F340C75387268aE6808C53);\r\n  mapping(uint256 => uint256) public MysteryBoxDetails;\r\n    \r\n    address public MNT = 0x3e81Aa8d6813Ec9D7E6ddB4e523fb1601a0e86F3; // Payment token address\r\n    address public USDT = 0x55d398326f99059fF775485246999027B3197955; // Payment token address\r\n    address public BUSD = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56; // Payment token address\r\n    uint public discountOnMnt = 2; // 2% discount with MNT purchase\r\n\r\n    AggregatorV3Interface bnbToUsdPrice = AggregatorV3Interface(0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE); // testnet\r\n\r\n\r\n    //multi-signature-wallet\r\n    address public multiSignWallet;\r\n    modifier onlyMultiSigWallet() {\r\n    require(msg.sender == multiSignWallet, \"Unauthorized Access\");\r\n    _;\r\n  }\r\n\r\n  constructor(address _multisignWallet) {\r\n    //assign multi sig wallet\r\n    multiSignWallet = _multisignWallet;\r\n    MysteryBoxDetails[1] = 100 ether;   //amount in USDT\r\n    MysteryBoxDetails[2] = 200 ether;   //amount in USDT\r\n    MysteryBoxDetails[3] = 400 ether;   //amount in USDT\r\n    MysteryBoxDetails[4] = 500 ether;   //amount in USDT\r\n\r\n\r\n  }\r\n\r\n  function getBNBprice() view public returns(uint256){\r\n    (, int256 answer,,,) = bnbToUsdPrice.latestRoundData();\r\n    return uint256(answer);\r\n  }\r\n\r\n\r\n  function getPriceInUSD(address token) public view returns(uint256 price) {\r\n    if (MNT == token) {\r\n      price = IRouter(_router).getPrice(token); // MNT in USD\r\n    } else if (USDT == token || BUSD == token) {\r\n      price = 1 ether;\r\n    } else if (token == address(0)) {\r\n      (, int256 answer,,,) = bnbToUsdPrice.latestRoundData();\r\n      price = uint256(answer);\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  function purchaseMysteryBoxByToken(\r\n    uint boxType,\r\n    uint qty,\r\n    address tokenAddress\r\n  ) external {\r\n\r\n    require(boxType > 0 && boxType < 5, \"Invalid boxType\");\r\n    require(qty > 0, \"Invalid qty\");\r\n    require((tokenAddress == MNT || tokenAddress == USDT || tokenAddress == BUSD), \"Invalid PaymentToken\");\r\n\r\n        uint256 price = getPriceInUSD(tokenAddress);\r\n\r\n     \r\n        uint256 amount = MysteryBoxDetails[boxType] / price * qty;\r\n    if (tokenAddress == MNT && discountOnMnt > 0) {\r\n      amount -= (amount * discountOnMnt) / 100; // Discount with MNT\r\n    }\r\n    amount = amount * 10 ** 18;\r\n    require(IBEP20(tokenAddress).balanceOf(msg.sender) >= amount, \"Insufficient balance\");\r\n    require(IBEP20(tokenAddress).allowance(msg.sender, address(this)) >= amount, \"Insufficient allowance\");\r\n    IBEP20(tokenAddress).transferFrom(msg.sender, address(this), amount);\r\n        emit PurchaseMysteryBoxByToken(msg.sender, tokenAddress, boxType, qty, amount);\r\n\r\n  }\r\n\r\n\r\n  function getpurchaseMysteryBoxByToken(\r\n    uint boxType,\r\n    uint qty,\r\n    address tokenAddress\r\n  ) public view returns(uint256) {\r\n\r\n    require(boxType > 0 && boxType < 5, \"Invalid boxType\");\r\n    require(qty > 0, \"Invalid qty\");\r\n    require((tokenAddress == MNT || tokenAddress == USDT || tokenAddress == BUSD), \"Invalid PaymentToken\");\r\n\r\n     uint256 price = getPriceInUSD(tokenAddress);\r\n\r\n     uint256 amount = MysteryBoxDetails[boxType] / price * qty;\r\n    if (tokenAddress == MNT && discountOnMnt > 0) {\r\n      amount -= (amount * discountOnMnt) / 100; // Discount with MNT\r\n    }\r\n    amount = amount * 10 ** 18;\r\n\r\n    return (amount);\r\n  }\r\n\r\n  function purchaseMysteryBoxByNativeToken(\r\n    uint boxType,\r\n    uint qty\r\n  ) external payable {\r\n    require(boxType > 0 && boxType < 5, \"Invalid boxType\");\r\n    require(qty > 0, \"Invalid qty\");\r\n     uint256 price = getPriceInUSD(address(0));\r\n     uint256 amount = MysteryBoxDetails[boxType] / price * qty;\r\n    amount = amount * 10 ** 8;\r\n    require(msg.value >= amount, \"Insufficient amount to purchase\");\r\n     emit PurchaseMysteryBoxByToken(msg.sender, address(0), boxType, qty, amount);\r\n  }\r\n\r\n  function getpurchaseMysteryBoxByNativeToken(\r\n    uint boxType,\r\n    uint qty\r\n  ) public view returns(uint256) {\r\n    require(boxType > 0 && boxType < 5, \"Invalid boxType\");\r\n    require(qty > 0, \"Invalid qty\");\r\n     uint256 price = getPriceInUSD(address(0));\r\n     uint256 amount = MysteryBoxDetails[boxType] / price * qty;\r\n    amount = amount * 10 ** 8;\r\n    return (amount);\r\n  }\r\n\r\n\r\n\r\n  function setDiscountOnMnt(uint256 _percent) onlyMultiSigWallet public {\r\n    discountOnMnt = _percent;\r\n  }\r\n\r\n  function updateMysteryBoxDetails(\r\n    uint boxType,\r\n    uint256 price // price in USDT \r\n  ) external onlyMultiSigWallet {\r\n    require(boxType > 0 && boxType < 5, \"Invalid boxType\");\r\n    require(price > 0, \"Invalid Price\");\r\n    MysteryBoxDetails[boxType] = price; \r\n  emit  UpdateMysteryBoxDetails(boxType, price);\r\n  }\r\n\r\n\r\n\r\n  /*\r\n       @dev function to withdraw BNB\r\n       @param recipient address\r\n       @param amount uint256\r\n      */\r\n  function withdraw(\r\n    address recipient,\r\n    uint256 amount\r\n  ) external onlyMultiSigWallet {\r\n    sendValue(recipient, amount);\r\n        emit WithdrawAmount(address(this), recipient, amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n   * `recipient`, forwarding all available gas and reverting on errors.\r\n   *\r\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n   * imposed by `transfer`, making them unable to receive funds via\r\n   * `transfer`. {sendValue} removes this limitation.\r\n   *\r\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n   *\r\n   * IMPORTANT: because control is transferred to `recipient`, care must be\r\n   * taken to not create reentrancy vulnerabilities. Consider using\r\n   * {ReentrancyGuard} or the\r\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n   */\r\n  function sendValue(address recipient, uint256 amount) internal {\r\n    require(\r\n      address(this).balance >= amount,\r\n      \"Address: insufficient balance\"\r\n    );\r\n\r\n    (bool success, ) = payable(recipient).call{ value: amount } (\"\");\r\n    require(\r\n      success,\r\n      \"Address: unable to send value, recipient may have reverted\"\r\n    );\r\n  }\r\n  /* \r\n   @dev function to transfer any BEP20 token\r\n   @param tokenAddress token contract address\r\n   @param tokens amount of tokens\r\n   @return success boolean status\r\n  */\r\n  function transferAnyBSC20Token(\r\n    address tokenAddress,\r\n    address wallet,\r\n    uint256 tokens\r\n  ) public onlyMultiSigWallet returns(bool success) {\r\n    success = IBEP20(tokenAddress).transfer(wallet, tokens);\r\n    require(success, \"BEP20 transfer failed\");\r\n        emit TransferAnyBSC20Token(address(this), wallet, tokens);\r\n  }\r\n\r\n\r\n  function getSignatureForWithdraw(\r\n    address recipient,\r\n    uint256 amount\r\n  ) public pure returns(bytes memory) {\r\n    return\r\n    abi.encodeWithSignature(\r\n      \"withdraw(address,uint256)\",\r\n      recipient,\r\n      amount\r\n    );\r\n  }\r\n\r\n  function getSignatureForTransferAnyBSC20Token(\r\n    address tokenAddress,\r\n    address wallet,\r\n    uint256 tokens\r\n  ) public pure returns(bytes memory) {\r\n    return\r\n    abi.encodeWithSignature(\r\n      \"transferAnyBSC20Token(address,address,uint256)\",\r\n      tokenAddress,\r\n      wallet,\r\n      tokens\r\n    );\r\n  }\r\n\r\n\r\n  function getSignatureForSetDiscountOnMnt(\r\n    uint256 _percent\r\n  ) public pure returns(bytes memory) {\r\n    return\r\n    abi.encodeWithSignature(\r\n      \"setDiscountOnMnt(uint256)\",\r\n      _percent\r\n    );\r\n  }\r\n\r\n  function getSignatureForUpdateMysteryBoxDetails(\r\n    uint256 boxType,\r\n    uint256 price\r\n  ) public pure returns(bytes memory) {\r\n    return\r\n    abi.encodeWithSignature(\r\n      \"updateMysteryBoxDetails(uint256,uint256)\",\r\n      boxType,\r\n      price\r\n    );\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_multisignWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"boxType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qty\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PurchaseMysteryBoxByToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"TransferAnyBSC20Token\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"boxType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"UpdateMysteryBoxDetails\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawAmount\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BUSD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MNT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"MysteryBoxDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discountOnMnt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBNBprice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"getSignatureForSetDiscountOnMnt\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"getSignatureForTransferAnyBSC20Token\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"boxType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"getSignatureForUpdateMysteryBoxDetails\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getSignatureForWithdraw\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"boxType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qty\",\"type\":\"uint256\"}],\"name\":\"getpurchaseMysteryBoxByNativeToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"boxType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qty\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getpurchaseMysteryBoxByToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiSignWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"boxType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qty\",\"type\":\"uint256\"}],\"name\":\"purchaseMysteryBoxByNativeToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"boxType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qty\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"purchaseMysteryBoxByToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setDiscountOnMnt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyBSC20Token\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"boxType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"updateMysteryBoxDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MysteryBox", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000070488948648d8d1f8cd3b91d76897ddd27384a82", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c729b721b6bc6132dced4347fca1af43ef247909319927f6ab479a8e41736ff1"}