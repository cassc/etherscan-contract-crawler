{"SourceCode": "// File: openzeppelin-solidity/contracts/math/Math.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n *\r\n * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\r\n * metering changes introduced in the Istanbul hardfork.\r\n */\r\ncontract ReentrancyGuard {\r\n    bool private _notEntered;\r\n\r\n    constructor () internal {\r\n        // Storing an initial non-zero value makes deployment a bit more\r\n        // expensive, but in exchange the refund on every call to nonReentrant\r\n        // will be lower in amount. Since refunds are capped to a percetange of\r\n        // the total transaction's gas, it is best to keep them low in cases\r\n        // like this one, to increase the likelihood of the full refund coming\r\n        // into effect.\r\n        _notEntered = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _notEntered = false;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _notEntered = true;\r\n    }\r\n}\r\n\r\n// File: Owned.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\n// https://docs.synthetix.io/contracts/source/contracts/owned\r\ncontract Owned {\r\n    address public owner;\r\n    address public nominatedOwner;\r\n\r\n    constructor(address _owner) public {\r\n        require(_owner != address(0), \"Owner address cannot be 0\");\r\n        owner = _owner;\r\n        emit OwnerChanged(address(0), _owner);\r\n    }\r\n\r\n    function nominateNewOwner(address _owner) external onlyOwner {\r\n        nominatedOwner = _owner;\r\n        emit OwnerNominated(_owner);\r\n    }\r\n\r\n    function acceptOwnership() external {\r\n        require(msg.sender == nominatedOwner, \"You must be nominated before you can accept ownership\");\r\n        emit OwnerChanged(owner, nominatedOwner);\r\n        owner = nominatedOwner;\r\n        nominatedOwner = address(0);\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        _onlyOwner();\r\n        _;\r\n    }\r\n\r\n    function _onlyOwner() private view {\r\n        require(msg.sender == owner, \"Only the contract owner may perform this action\");\r\n    }\r\n\r\n    event OwnerNominated(address newOwner);\r\n    event OwnerChanged(address oldOwner, address newOwner);\r\n}\r\n\r\n// File: Pausable.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\n// Inheritance\r\n\r\n\r\n\r\n// https://docs.synthetix.io/contracts/source/contracts/pausable\r\ncontract Pausable is Owned {\r\n    uint public lastPauseTime;\r\n    bool public paused;\r\n\r\n    constructor() internal {\r\n        // This contract is abstract, and thus cannot be instantiated directly\r\n        require(owner != address(0), \"Owner must be set\");\r\n        // Paused will be false, and lastPauseTime will be 0 upon initialisation\r\n    }\r\n\r\n    /**\r\n     * @notice Change the paused state of the contract\r\n     * @dev Only the contract owner may call this.\r\n     */\r\n    function setPaused(bool _paused) external onlyOwner {\r\n        // Ensure we're actually changing the state before we do anything\r\n        if (_paused == paused) {\r\n            return;\r\n        }\r\n\r\n        // Set our paused state.\r\n        paused = _paused;\r\n\r\n        // If applicable, set the last pause time.\r\n        if (paused) {\r\n            lastPauseTime = now;\r\n        }\r\n\r\n        // Let everyone know that our pause state has changed.\r\n        emit PauseChanged(paused);\r\n    }\r\n\r\n    event PauseChanged(bool isPaused);\r\n\r\n    modifier notPaused {\r\n        require(!paused, \"This action cannot be performed while the contract is paused\");\r\n        _;\r\n    }\r\n}\r\n\r\n// File: newStaking.sol\r\n\r\npragma solidity ^0.5.16;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract PhbStaking is ReentrancyGuard, Pausable {\r\n\r\n    /// @notice Emitted when setLevel\r\n    event SetLevel(string name,uint256 min , uint256 max, uint256 weight);\r\n\r\n    /// @notice Emitted when staking\r\n    event Staked(address indexed user, uint256 amount);\r\n\r\n    /// @notice Emitted when claiming\r\n    event Claimed(address indexed user, uint256 amount);\r\n\r\n    /// @notice Emitted when withdrawing\r\n    event Withdrawn(address indexed user, uint256 amount);\r\n\r\n    /// @notice Emitted when set lockdown duration\r\n    event LockDownDurationUpdated(uint256 newLockDownDuration);\r\n\r\n    /// @notice Emitted when set inflation speed\r\n    event InflationSpeedUpdated(uint256 newSpeed);\r\n\r\n    /// @notice Emitted when apply withdraw\r\n    event ApplyWithdraw(address indexed user,uint256 amount, uint256 time);\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 public rewardsToken;\r\n    IERC20 public stakingToken;\r\n\r\n    uint256 public lockDownDuration = 5 seconds;\r\n    uint256 public totalStakes ;\r\n    \r\n    uint256 public virtualTotalStakes;\r\n\r\n    uint constant doubleScale = 1e36;\r\n\r\n    // uint256 RateScale = 10000;\r\n    uint256 phbDecimals = 1e18;\r\n    uint256 WeightScale = 100;\r\n    address public rewardProvider =0x26356Cb66F8fd62c03F569EC3691B6F00173EB02;\r\n\r\n    //withdraw rate 5 for 0.05% \r\n    uint256 public withdrawRate = 0;\r\n    uint256 public feeScale = 10000;\r\n\r\n    //NOTE:modify me before mainnet\r\n    address public feeCollector =0x26356Cb66F8fd62c03F569EC3691B6F00173EB02;\r\n\r\n    /// @notice The initial global index\r\n    uint256 public constant globalInitialIndex = 1e36;\r\n\r\n    uint256 public inflationSpeed = 0;\r\n\r\n    struct Double {\r\n        uint mantissa;\r\n    }\r\n    \r\n    string [] levels = [\"Carbon\",\"Genesis\",\"Platinum\",\"Zirconium\",\"Diamond\"];\r\n\r\n\r\n    struct RateLevel {\r\n        uint256 min;\r\n        uint256 max;\r\n        uint256 weight;\r\n    }\r\n\r\n    mapping(string => RateLevel) _ratesLevel;\r\n    mapping(string => uint256) levelAmount;\r\n\r\n    mapping(address=>uint256) virtualUserbalance;\r\n\r\n    struct withdrawApplication {\r\n        uint256 amount;\r\n        uint256 applyTime;\r\n    }\r\n\r\n    mapping(address => uint256) _userRewards;\r\n\r\n    //this record the user withdraw application\r\n    //according to the requirement, when user want to withdraw his staking phb, he needs to \r\n    //1. call applyWithdraw , this will add a lock period (7 days by default, can be changed by admin) \r\n    //2. call withdraw to withdraw the \"withdrawable amounts\"\r\n    struct TimedWithdraw {\r\n        uint256 totalApplied;                      //total user applied for withdraw\r\n        mapping(uint256 => uint256) applications;  //apply detail time=>amount\r\n        uint256[] applyTimes;                      //apply timestamp, used for the key of applications mapping\r\n    }\r\n\r\n    mapping(address => TimedWithdraw) timeApplyInfo;   //user => TimedWithdraw mapping\r\n    mapping(address => uint256) _balances;\r\n\r\n    struct Index {\r\n        uint256 index;\r\n        uint256 lastTime;\r\n    }\r\n\r\n    Index globalIndex;\r\n    mapping(address => Index) userIndex;\r\n\r\n    /* ========== CONSTRUCTOR ========== */\r\n    constructor(\r\n                address _owner,\r\n                address _rewardsToken,\r\n                address _stakingToken\r\n    ) public Owned(_owner){\r\n        rewardsToken = IERC20(_rewardsToken);\r\n        stakingToken = IERC20(_stakingToken);\r\n        initLevel();\r\n        globalIndex.index = globalInitialIndex;\r\n        globalIndex.lastTime = now;\r\n    }\r\n\r\n\r\n    /* ========== internals ======== */\r\n    function initLevel() internal {\r\n        _ratesLevel[levels[0]] = RateLevel({min:0,max:1000,weight:100});\r\n        _ratesLevel[levels[1]] = RateLevel({min:1000,max:10000,weight:125});\r\n        _ratesLevel[levels[2]] = RateLevel({min:10000,max:50000,weight:150});\r\n        _ratesLevel[levels[3]] = RateLevel({min:50000,max:100000,weight:175});\r\n        _ratesLevel[levels[4]] = RateLevel({min:100000,max:999999999,weight:200});\r\n    }\r\n\r\n\r\n    /* =========== views ==========*/\r\n\r\n    function balanceOf(address account) external view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    //to calculate the rewards by the gap of userindex and globalindx\r\n    function getUserRewards(address account) public view returns(uint256){\r\n        // updateGlobalIndex();\r\n        uint256 rewardSpeed = inflationSpeed;\r\n        uint256 deltaTime = now.sub(globalIndex.lastTime);\r\n\r\n        uint256 rewardAccued = deltaTime.mul(rewardSpeed);\r\n        // Double memory ratio = totalStakes > 0 ? fraction(rewardAccued,totalStakes):Double({mantissa:0});\r\n        Double memory ratio = virtualTotalStakes > 0 ? fraction(rewardAccued,virtualTotalStakes):Double({mantissa:0});\r\n\r\n        Double memory gIndex = add_(Double({mantissa: globalIndex.index}), ratio);\r\n\r\n        Double memory uIndex = Double({mantissa:userIndex[account].index});\r\n\r\n        if (uIndex.mantissa == 0 && gIndex.mantissa > 0) {\r\n            uIndex.mantissa = globalInitialIndex;\r\n        }\r\n\r\n        Double memory deltaIndex = sub_(gIndex,uIndex);\r\n      \r\n        uint256 supplierDelta = mul_(virtualUserbalance[account],deltaIndex);\r\n\r\n        return supplierDelta.add(_userRewards[account] );\r\n    }\r\n\r\n    //calculate the total amount which apply time already passed [7 days]\r\n    function withdrawableAmount(address account)public view returns(uint256){\r\n        uint256 amount = 0;\r\n        TimedWithdraw storage withdrawApplies = timeApplyInfo[account];\r\n        \r\n        for (uint8 index = 0; index < withdrawApplies.applyTimes.length; index++) {\r\n            uint256 key = withdrawApplies.applyTimes[index];\r\n            if (now.sub(key) > lockDownDuration){\r\n                amount = amount.add(withdrawApplies.applications[key]);\r\n            }\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    //for front end display, the following two method should be used together\r\n    //\r\n    //we return total applied, applied times and applied amounts here\r\n    function getUserApplication(address account) external view returns(uint256, uint256[] memory, uint256[] memory){\r\n        uint256[] memory applyTimes = timeApplyInfo[account].applyTimes;\r\n        uint256[] memory applyAmounts = new uint256[](applyTimes.length);\r\n        for (uint8 index = 0 ;index < applyTimes.length; index++){\r\n            applyAmounts[index] = timeApplyInfo[account].applications[applyTimes[index]];\r\n        }\r\n        \r\n        return (timeApplyInfo[account].totalApplied, applyTimes, applyAmounts);\r\n    }\r\n\r\n    //return levels config in contract\r\n    function getLevelInfos() external view returns(string[] memory){\r\n        return levels;\r\n    }\r\n\r\n    //return level detail,key is result of previous function\r\n    function getLevelDetail(string calldata lv) external view returns(RateLevel memory){\r\n        return _ratesLevel[lv];\r\n    }\r\n\r\n    //return the total staked amount for the given level\r\n    function getLevelStakes(string calldata lv) external view returns(uint256){\r\n        return levelAmount[lv];\r\n    }\r\n\r\n\r\n    /* ========== MUTATIVE FUNCTIONS ========== */\r\n    function setLevel( string calldata lv,uint256 min,uint256 max,uint256 weight) external onlyOwner{\r\n        _ratesLevel[lv] = RateLevel({min:min,max:max,weight:weight});\r\n        emit SetLevel(lv,min,max,weight);\r\n    }\r\n\r\n    function stake(uint256 amount) external nonReentrant notPaused returns (bool){\r\n        require(amount > 0, \"Cannot stake 0\");\r\n\r\n        updateGlobalIndex();\r\n        distributeReward(msg.sender);\r\n\r\n        //we calculate the \"vamount\" first here\r\n        updateVAmounts(msg.sender,amount,true);\r\n\r\n\r\n        totalStakes = totalStakes.add(amount);\r\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\r\n\r\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\r\n\r\n        uint256 rewards = _userRewards[msg.sender];\r\n        if (rewards > 0){\r\n            require(rewardsToken.transferFrom(rewardProvider, msg.sender, rewards),\"claim rewards failed\");\r\n            delete(_userRewards[msg.sender]);\r\n            emit Claimed(msg.sender,rewards);\r\n        }\r\n\r\n        emit Staked(msg.sender,amount);\r\n    }\r\n\r\n    //add user withdraw application\r\n    function applyWithdraw(uint256 amount) external nonReentrant{\r\n        require(amount > 0, \"Cannot withdraw 0\");\r\n\r\n        TimedWithdraw storage withdrawApplies = timeApplyInfo[msg.sender];\r\n        //should have enough un-applied balance\r\n        require(amount <= _balances[msg.sender], \"exceeded user balance!\");\r\n\r\n        withdrawApplies.totalApplied = withdrawApplies.totalApplied.add(amount);\r\n        withdrawApplies.applications[now] = amount;\r\n        withdrawApplies.applyTimes.push(now);\r\n\r\n        timeApplyInfo[msg.sender] = withdrawApplies;\r\n\r\n        updateGlobalIndex();\r\n        distributeReward(msg.sender);\r\n\r\n        updateVAmounts(msg.sender,amount,false);\r\n\r\n        totalStakes = totalStakes.sub(amount);\r\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\r\n\r\n        uint256 rewards = _userRewards[msg.sender];\r\n        if (rewards > 0){\r\n            require(rewardsToken.transferFrom(rewardProvider, msg.sender, rewards),\"claim rewards failed\");\r\n            delete(_userRewards[msg.sender]);\r\n            emit Claimed(msg.sender,rewards);\r\n        }\r\n\r\n        emit ApplyWithdraw(msg.sender,amount,now);\r\n    }\r\n\r\n    //withdraw staked amount if possible\r\n    function withdraw(uint256 amount) public nonReentrant {\r\n        require(amount > 0, \"Cannot withdraw 0\");\r\n        require(withdrawableAmount(msg.sender) >= amount,\"not enough withdrawable balance\");\r\n        dealwithLockdown(amount,msg.sender);\r\n        uint256 fee = amount.mul(withdrawRate).div(feeScale);\r\n        stakingToken.safeTransfer(msg.sender, amount.sub(fee));\r\n        if (fee > 0 ){\r\n            stakingToken.safeTransfer(feeCollector, fee);\r\n        }\r\n\r\n        emit Withdrawn(msg.sender, amount.sub(fee));\r\n    }\r\n\r\n    function setLockDownDuration(uint256 _lockdownDuration) external onlyOwner {\r\n        lockDownDuration = _lockdownDuration;\r\n        emit LockDownDurationUpdated(_lockdownDuration);\r\n    }\r\n\r\n    function setWithdrawRate(uint256 _rate) external onlyOwner {\r\n        require(_rate < 10000,\"withdraw rate is too high\");\r\n        withdrawRate = _rate;\r\n    }\r\n\r\n    function setFeeCollector(address _feeCollector) external onlyOwner{\r\n        feeCollector = _feeCollector;\r\n    }\r\n\r\n    function setRewardProvider(address _rewardProvider) external onlyOwner{\r\n        rewardProvider = _rewardProvider;\r\n    }\r\n\r\n    function claimReward() external nonReentrant notPaused returns (bool) {\r\n        updateGlobalIndex();\r\n        distributeReward(msg.sender);\r\n        uint256 rewards = _userRewards[msg.sender];\r\n        require( rewards > 0,\"no rewards for this account\");\r\n        require(rewardsToken.transferFrom(rewardProvider, msg.sender, rewards),\"claim rewards failed\");\r\n        delete(_userRewards[msg.sender]);\r\n        \r\n        emit Claimed(msg.sender,rewards);\r\n    }\r\n\r\n    //calculate tokens per seconds\r\n\r\n    function setInflationSpeed(uint256 speed) public onlyOwner {\r\n        updateGlobalIndex();\r\n        inflationSpeed = speed;\r\n        emit InflationSpeedUpdated(speed);\r\n    }\r\n\r\n    /* ========== INTERNAL FUNCTIONS ========== */\r\n    function updateGlobalIndex() internal {\r\n        uint256 rewardSpeed = inflationSpeed;\r\n        uint256 deltaTime = now.sub(globalIndex.lastTime);\r\n\r\n        if (deltaTime > 0 && rewardSpeed > 0) {\r\n            uint256 rewardAccued = deltaTime.mul(rewardSpeed);\r\n            // Double memory ratio = totalStakes > 0 ? fraction(rewardAccued,totalStakes):Double({mantissa:0});\r\n            Double memory ratio = virtualTotalStakes > 0 ? fraction(rewardAccued,virtualTotalStakes):Double({mantissa:0});\r\n\r\n            Double memory newIndex = add_(Double({mantissa: globalIndex.index}), ratio);\r\n            globalIndex.index = newIndex.mantissa;\r\n            globalIndex.lastTime = now;\r\n        }else if(deltaTime > 0) {\r\n            globalIndex.lastTime = now;\r\n        }\r\n    }\r\n\r\n    function distributeReward(address account) internal {\r\n        Double memory gIndex = Double({mantissa:globalIndex.index});\r\n        Double memory uIndex = Double({mantissa:userIndex[account].index});\r\n\r\n        userIndex[account].index = globalIndex.index;\r\n\r\n        if (uIndex.mantissa == 0 && gIndex.mantissa > 0) {\r\n            uIndex.mantissa = globalInitialIndex;\r\n        }\r\n\r\n        Double memory deltaIndex = sub_(gIndex,uIndex);\r\n        // uint256 supplierDelta = mul_(_balances[account],deltaIndex);\r\n        uint256 supplierDelta = mul_(virtualUserbalance[account],deltaIndex);\r\n\r\n        // string memory lv = getBalanceLevel(_balances[account]);\r\n        // uint weight = bytes(lv).length==0 ?0:_ratesLevel[lv].weight;\r\n        // supplierDelta =  supplierDelta.mul(weight).div(WeightScale);\r\n        _userRewards[account] = supplierDelta.add(_userRewards[account] );\r\n    }\r\n\r\n\r\n    function remove(uint256[] storage array, uint index) internal returns(uint256[] storage) {\r\n        if (index >= array.length) return array;\r\n\r\n        if(array.length == 1){\r\n            delete(array[index]);\r\n            return array;\r\n        }        \r\n        for (uint i = index; i<array.length-1; i++){\r\n            array[i] = array[i+1];\r\n        }\r\n        array.length--;\r\n        return array;\r\n    }\r\n\r\n    function dealwithLockdown(uint256 amount, address account) internal {\r\n        uint256 _total = amount;\r\n        TimedWithdraw storage withdrawApplies = timeApplyInfo[account];\r\n        //applyTimesLen cannot be change\r\n        uint256 applyTimesLen = withdrawApplies.applyTimes.length;\r\n         for (uint8 index = 0; index < applyTimesLen; index++) {\r\n           if (_total > 0){\r\n              uint256 key = withdrawApplies.applyTimes[0];\r\n              if (now.sub(key) > lockDownDuration){\r\n                  if(_total >= withdrawApplies.applications[key]){\r\n                      _total = _total.sub(withdrawApplies.applications[key]);\r\n                      delete( withdrawApplies.applications[key]);\r\n                      remove(withdrawApplies.applyTimes, 0);\r\n                    //   delete( withdrawApplies.applyTimes[index]);\r\n                  }else{\r\n                      withdrawApplies.applications[key] = withdrawApplies.applications[key].sub(_total);\r\n                      _total = 0;\r\n                      break;\r\n                  }\r\n              }\r\n           }\r\n        }\r\n\r\n        withdrawApplies.totalApplied  = withdrawApplies.totalApplied.sub(amount);\r\n    }\r\n\r\n    function getBalanceLevel(uint256 balance) view internal returns(string memory){\r\n        for (uint8 index = 0 ;index < levels.length; index++){\r\n            RateLevel memory tmp = _ratesLevel[levels[index]];\r\n            if (balance >= tmp.min.mul(phbDecimals) && balance < tmp.max.mul(phbDecimals)){\r\n                return levels[index];\r\n            }\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    //optimise the stake weight based reward calculation\r\n    //\"virtualbalance\" is record user real balance * level weight\r\n    //if user total staked 100k, virtualbalance is 100k * 100% = 100k\r\n    //if user total staked 1M virtualbalance si 1M * 250% = 2.5M\r\n    //the staking reward is calculated based on this virtualbalance\r\n    function updateVAmounts(address userAcct,uint256 amount,bool increase) internal {\r\n        uint256 balanceBefore = _balances[userAcct];\r\n        string memory lvBefore = getBalanceLevel(balanceBefore);\r\n        uint weightBefore = bytes(lvBefore).length==0 ? 0 : _ratesLevel[lvBefore].weight;\r\n        uint256 balanceAfter = increase ? balanceBefore.add(amount) : balanceBefore.sub(amount);\r\n\r\n        string memory lvAfter = getBalanceLevel(balanceAfter);\r\n        uint weightAfter = bytes(lvAfter).length==0 ?0:_ratesLevel[lvAfter].weight;\r\n\r\n        //update vbalance\r\n        uint256 vbalanceBefore =  virtualUserbalance[userAcct] ;\r\n        virtualUserbalance[userAcct] = balanceAfter.mul(weightAfter).div(WeightScale);\r\n\r\n        //update vtotalstake\r\n        virtualTotalStakes = virtualTotalStakes.sub(vbalanceBefore).add( virtualUserbalance[userAcct]);\r\n\r\n        if (weightBefore == weightAfter){\r\n            //update amount to lv\r\n            levelAmount[lvBefore] = levelAmount[lvBefore].sub(balanceBefore).add(balanceAfter);\r\n        }else{\r\n            levelAmount[lvBefore] = levelAmount[lvBefore].sub(balanceBefore);\r\n            levelAmount[lvAfter] = levelAmount[lvAfter].add(balanceAfter);\r\n        }\r\n\r\n    }\r\n\r\n    /*========Double============*/\r\n    function fraction(uint a, uint b) pure internal returns (Double memory) {\r\n        return Double({mantissa: div_(mul_(a, doubleScale), b)});\r\n    }\r\n\r\n    function add_(Double memory a, Double memory b) pure internal returns (Double memory) {\r\n        return Double({mantissa: add_(a.mantissa, b.mantissa)});\r\n    }\r\n\r\n    function add_(uint a, uint b) pure internal returns (uint) {\r\n        return add_(a, b, \"addition overflow\");\r\n    }\r\n\r\n    function add_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, errorMessage);\r\n        return c;\r\n    }\r\n\r\n    function sub_(Double memory a, Double memory b) pure internal returns (Double memory) {\r\n        return Double({mantissa: sub_(a.mantissa, b.mantissa)});\r\n    }\r\n\r\n    function sub_(uint a, uint b) pure internal returns (uint) {\r\n        return sub_(a, b, \"subtraction underflow\");\r\n    }\r\n\r\n    function sub_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n\r\n    function mul_(Double memory a, Double memory b) pure internal returns (Double memory) {\r\n        return Double({mantissa: mul_(a.mantissa, b.mantissa) / doubleScale});\r\n    }\r\n   function mul_(Double memory a, uint b) pure internal returns (Double memory) {\r\n        return Double({mantissa: mul_(a.mantissa, b)});\r\n    }\r\n\r\n    function mul_(uint a, Double memory b) pure internal returns (uint) {\r\n        return mul_(a, b.mantissa) / doubleScale;\r\n    }\r\n\r\n    function mul_(uint a, uint b) pure internal returns (uint) {\r\n        return mul_(a, b, \"multiplication overflow\");\r\n    }\r\n\r\n    function mul_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\r\n        if (a == 0 || b == 0) {\r\n            return 0;\r\n        }\r\n        uint c = a * b;\r\n        require(c / a == b, errorMessage);\r\n        return c;\r\n    }\r\n    function div_(Double memory a, Double memory b) pure internal returns (Double memory) {\r\n        return Double({mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa)});\r\n    }\r\n    function div_(Double memory a, uint b) pure internal returns (Double memory) {\r\n        return Double({mantissa: div_(a.mantissa, b)});\r\n    }\r\n\r\n    function div_(uint a, Double memory b) pure internal returns (uint) {\r\n        return div_(mul_(a, doubleScale), b.mantissa);\r\n    }\r\n\r\n    function div_(uint a, uint b) pure internal returns (uint) {\r\n        return div_(a, b, \"divide by zero\");\r\n    }\r\n\r\n    function div_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ApplyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSpeed\",\"type\":\"uint256\"}],\"name\":\"InflationSpeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLockDownDuration\",\"type\":\"uint256\"}],\"name\":\"LockDownDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"PauseChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"SetLevel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"applyWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeScale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"lv\",\"type\":\"string\"}],\"name\":\"getLevelDetail\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"internalType\":\"struct PhbStaking.RateLevel\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLevelInfos\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"lv\",\"type\":\"string\"}],\"name\":\"getLevelStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserApplication\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"globalInitialIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"inflationSpeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPauseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockDownDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"setFeeCollector\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"speed\",\"type\":\"uint256\"}],\"name\":\"setInflationSpeed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"lv\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"setLevel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockdownDuration\",\"type\":\"uint256\"}],\"name\":\"setLockDownDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardProvider\",\"type\":\"address\"}],\"name\":\"setRewardProvider\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setWithdrawRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"virtualTotalStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PhbStaking", "CompilerVersion": "v0.5.16+commit.9c3226ce", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000006a6677a979a0fd7f3edd8c87aa5d6884f7f6b5fb0000000000000000000000000409633a72d846fc5bbe2f98d88564d35987904d0000000000000000000000000409633a72d846fc5bbe2f98d88564d35987904d", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://27627cfa2d8ceb6aa79008231fb829cfacbc009a0cfa3ec1dd5392da66a3279b"}