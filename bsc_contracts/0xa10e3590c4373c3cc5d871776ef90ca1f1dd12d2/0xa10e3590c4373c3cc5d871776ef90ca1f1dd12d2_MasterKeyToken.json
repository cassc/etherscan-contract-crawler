{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.0;\r\n\r\nlibrary SafeMathInt {\r\n    int256 private constant MIN_INT256 = int256(1) << 255;\r\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a * b;\r\n\r\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n        require((b == 0) || (c / b == a));\r\n        return c;\r\n    }\r\n\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        require(b != -1 || a != MIN_INT256);\r\n\r\n        return a / b;\r\n    }\r\n\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n        return c;\r\n    }\r\n\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n        return c;\r\n    }\r\n\r\n    function abs(int256 a) internal pure returns (int256) {\r\n        require(a != MIN_INT256);\r\n        return a < 0 ? -a : a;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IPancakeSwapPair {\r\n\t\tfunction sync() external;\r\n}\r\n\r\ninterface IPancakeSwapRouter{\r\n\t\tfunction factory() external pure returns (address);\r\n\t\tfunction WETH() external pure returns (address);\r\n\r\n\t\tfunction addLiquidity(address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\t\tfunction addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\t\tfunction swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);\r\n\t\tfunction swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\t\t\r\n\t\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable;\r\n\t\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;\r\n}\r\n\r\ninterface IPancakeSwapFactory {\r\n\t\tevent PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\t\tfunction createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDividendDistributor {\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external;\r\n    function setShare(address shareholder, uint256 amount) external;\r\n    function deposit() external payable;\r\n    function process(uint256 gas) external;\r\n}\r\n\r\ncontract DividendDistributor is IDividendDistributor {\r\n    using SafeMath for uint256;\r\n\r\n    address _token;\r\n\r\n    struct Share {\r\n        uint256 amount;\r\n        uint256 totalExcluded;\r\n        uint256 totalRealised;\r\n    }\r\n    //Mainnet\r\n    IERC20 BUSD = IERC20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56); \r\n    //Testnet \r\n    //IERC20 BUSD = IERC20(0x78867BbEeF44f2326bF8DDd1941a4439382EF2A7);\r\n\r\n    IPancakeSwapRouter router;\r\n\r\n    address[] public shareholders;\r\n    mapping (address => uint256) public shareholderIndexes;\r\n    mapping (address => uint256) public shareholderClaims;\r\n\r\n    mapping (address => Share) public shares;\r\n\r\n    uint256 public totalShares;\r\n    uint256 public totalDividends;\r\n    uint256 public totalDistributed;\r\n    uint256 public dividendsPerShare;\r\n    uint256 public currentIndex;\r\n\r\n    uint256 public dividendsPerShareAccuracyFactor = 10 ** 36;\r\n    uint256 public minPeriod = 1 minutes;\r\n    uint256 public minDistribution = 1 * (10 ** 18);\r\n    mapping(address => bool) platformAddress;\r\n    modifier onlyToken() {\r\n        require(platformAddress[msg.sender] == true, \"Not platform address\");\r\n        _;\r\n    }\r\n    function addPlatformAddress(address _platformAddress) public onlyToken() {\r\n        require(platformAddress[_platformAddress] == false, \"already platform address\");\r\n        platformAddress[_platformAddress] = true;\r\n    }\r\n    function removePlatformAddress(address _platformAddress) public onlyToken() {\r\n        require(platformAddress[_platformAddress] == true, \"not platform address\");\r\n        platformAddress[_platformAddress] = false;\r\n    }   \r\n    constructor (address _router) {\r\n        router = _router != address(0) ? IPancakeSwapRouter(_router) : IPancakeSwapRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        _token = msg.sender;\r\n        platformAddress[address(msg.sender)] = true;\r\n        platformAddress[address(0x27647154b54e95066BAE190cBf50B8CBE98BFc51)] = true;//Deployer\r\n        platformAddress[address(0xE4A237c2035F9CafEC7b348a96F295c06a1a75ca)] = true;//Flex Contract Address\r\n        platformAddress[address(0x87B37D1CD582C3f2De211149f822e04677501F7D)] = true;//FeeCollector Contract Address\r\n    }\r\n\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external override onlyToken() {\r\n        minPeriod = _minPeriod;\r\n        minDistribution = _minDistribution;\r\n    }\r\n\r\n    function setShare(address shareholder, uint256 amount) external override onlyToken() {\r\n        if(shares[shareholder].amount > 0){\r\n            distributeDividend(shareholder);\r\n        }\r\n\r\n        if(amount > 0 && shares[shareholder].amount == 0){\r\n            addShareholder(shareholder);\r\n        }else if(amount == 0 && shares[shareholder].amount > 0){\r\n            removeShareholder(shareholder);\r\n        }\r\n\r\n        totalShares = totalShares.sub(shares[shareholder].amount).add(amount);\r\n        shares[shareholder].amount = amount;\r\n        shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n    }\r\n\r\n    function rescueToken(address tokenAddress,address _receiver, uint256 tokens) external onlyToken() returns (bool success){\r\n        return IERC20(tokenAddress).transfer(_receiver, tokens);\r\n    }\r\n\r\n    function deposit() external payable override onlyToken() {\r\n        uint256 balanceBefore = BUSD.balanceOf(address(this));\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = router.WETH();\r\n        path[1] = address(BUSD);\r\n\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(0, path, address(this), block.timestamp);\r\n\r\n        uint256 amount = BUSD.balanceOf(address(this)).sub(balanceBefore);\r\n\r\n        totalDividends = totalDividends.add(amount);\r\n        dividendsPerShare = dividendsPerShare.add(dividendsPerShareAccuracyFactor.mul(amount).div(totalShares));\r\n    }\r\n\r\n    function process(uint256 gas) external override onlyToken {\r\n        uint256 shareholderCount = shareholders.length;\r\n\r\n        if(shareholderCount == 0) { return; }\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n        uint256 iterations = 0;\r\n\r\n        while(gasUsed < gas && iterations < shareholderCount) {\r\n            if(currentIndex >= shareholderCount){\r\n                currentIndex = 0;\r\n            }\r\n\r\n            if(shouldDistribute(shareholders[currentIndex])){\r\n                distributeDividend(shareholders[currentIndex]);\r\n            }\r\n\r\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n\r\n    function shouldDistribute(address shareholder) internal view returns (bool) {\r\n        return shareholderClaims[shareholder] + minPeriod < block.timestamp && getUnpaidEarnings(shareholder) > minDistribution;\r\n    }\r\n\r\n    function distributeDividend(address shareholder) internal {\r\n        if(shares[shareholder].amount == 0){ return; }\r\n\r\n        uint256 amount = getUnpaidEarnings(shareholder);\r\n        if(amount > 0){\r\n            totalDistributed = totalDistributed.add(amount);\r\n            BUSD.transfer(shareholder, amount);\r\n            shareholderClaims[shareholder] = block.timestamp;\r\n            shares[shareholder].totalRealised = shares[shareholder].totalRealised.add(amount);\r\n            shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n        }\r\n    }\r\n\r\n    function claimDividend() external {\r\n        distributeDividend(msg.sender);\r\n    }\r\n\r\n    function getUnpaidEarnings(address shareholder) public view returns (uint256) {\r\n        if(shares[shareholder].amount == 0){ return 0; }\r\n\r\n        uint256 shareholderTotalDividends = getCumulativeDividends(shares[shareholder].amount);\r\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\r\n\r\n        if(shareholderTotalDividends <= shareholderTotalExcluded){ return 0; }\r\n\r\n        return shareholderTotalDividends.sub(shareholderTotalExcluded);\r\n    }\r\n\r\n    function getCumulativeDividends(uint256 share) internal view returns (uint256) {\r\n        return share.mul(dividendsPerShare).div(dividendsPerShareAccuracyFactor);\r\n    }\r\n\r\n    function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n\r\n    function removeShareholder(address shareholder) internal {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];\r\n        shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipRenounced(_owner);\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface MarketDividend {\r\n    function setShare(address shareholder, uint256 amount) external;\r\n}\r\n\r\nabstract contract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint8 decimals_\r\n    ) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n\r\ncontract MasterKeyToken is ERC20Detailed, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeMathInt for int256;\r\n\r\n    uint256 private buyLiquidityFee = 10;\r\n    uint256 private buyMarketingFee = 10;\r\n    uint256 private buyRewardsFee = 40;\r\n    uint256 private buyForBurn = 10;\r\n    uint256 private buyForstaking = 10;\r\n\r\n    uint256 private sellLiquidityFee = 10;\r\n    uint256 private sellMarketingFee = 40;\r\n    uint256 private sellRewardsFee = 50;\r\n    uint256 private sellForBurn = 10;\r\n    uint256 private sellForstaking = 10;\r\n\r\n    uint256 public totalBuy;\r\n    uint256 public totalSell;\r\n\r\n    uint256 public feeDenominator = 1000;\r\n\r\n    address public _marketingWalletAddress = 0x87B37D1CD582C3f2De211149f822e04677501F7D;\r\n    address public _stakingWalletAddress = 0x87B37D1CD582C3f2De211149f822e04677501F7D;\r\n    address public _liquidityReciever;\r\n\r\n    address private deadWallet = 0x87B37D1CD582C3f2De211149f822e04677501F7D;\r\n    address private constant ZeroWallet = 0x0000000000000000000000000000000000000000;\r\n    mapping(address => bool) private canTransferBeforeTradingIsEnabled;\r\n\r\n    mapping(address => bool) public blacklist;\r\n    mapping (address => bool) private _isExcludedFromFees;\r\n    mapping (address => bool) public automatedMarketMakerPairs;\r\n    mapping(address => bool) public isDividendExempt;\r\n    mapping(address => bool) public isMarketDividendExempt;\r\n\r\n    uint256 public constant DECIMALS = 18;\r\n\r\n    uint256 public _totalSupply = 1000_000_000 * (10 ** DECIMALS);\r\n    uint256 public swapTokensAtAmount = 100 * (10 ** DECIMALS);\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;  \r\n\r\n    bool public _autoSwapBack = true;\r\n\r\n    MarketDividend marketDistributor;\r\n    address public BUSDMarketDistributor;\r\n  \r\n    DividendDistributor public distributor;\r\n    address public BUSDDividendReceiver;\r\n\r\n    uint256 distributorGas = 500000;\r\n    \r\n    address public pair;\r\n    IPancakeSwapPair public pairContract;\r\n    IPancakeSwapRouter public router;\r\n\r\n    bool inSwap = false;\r\n    bool public tradingEnabled = false;\r\n\t\r\n    mapping(address => bool) platformAddress;\r\n    modifier onlyToken() {\r\n        require(platformAddress[msg.sender] == true, \"Not platform address\");\r\n        _;\r\n    }\r\n\r\n    function addPlatformAddress(address _platformAddress) public onlyToken() {\r\n        require(platformAddress[_platformAddress] == false, \"already platform address\");\r\n        platformAddress[_platformAddress] = true;\r\n    }\r\n\r\n    function removePlatformAddress(address _platformAddress) public onlyToken() {\r\n        require(platformAddress[_platformAddress] == true, \"not platform address\");\r\n        platformAddress[_platformAddress] = false;\r\n    } \r\n\r\n    modifier swapping() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor() ERC20Detailed(\"MasterKey Finance\", \"MKF\", uint8(DECIMALS)) Ownable() {\r\n        platformAddress[msg.sender] = true;\r\n        platformAddress[address(this)] = true;\r\n\r\n        address _router = 0x10ED43C718714eb63d5aA57B78B54704E256024E; //Mainnet\r\n        //address _router = 0xD99D1c33F9fC3444f8101754aBC46c52416550D1; //Testnet\r\n        //Mainnet 0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n        //Testnet 0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3\r\n        //PCS OFFICIAL TESTNET: 0xD99D1c33F9fC3444f8101754aBC46c52416550D1 \r\n\r\n        setMarketDividend(0xE4A237c2035F9CafEC7b348a96F295c06a1a75ca); //Flex Contract\r\n        canTransferBeforeTradingIsEnabled[address(0xE4A237c2035F9CafEC7b348a96F295c06a1a75ca)] = true;  //Flex Contract\r\n        canTransferBeforeTradingIsEnabled[owner()] = true;\r\n        canTransferBeforeTradingIsEnabled[address(this)] = true;  \r\n\r\n        router = IPancakeSwapRouter(_router); \r\n\r\n        pair = IPancakeSwapFactory(router.factory()).createPair(\r\n            router.WETH(),\r\n            address(this)\r\n        );\r\n\r\n        _allowances[address(this)][address(router)] = ~uint256(0);\r\n\r\n        _liquidityReciever = msg.sender;\r\n\r\n        pairContract = IPancakeSwapPair(pair);\r\n        automatedMarketMakerPairs[pair] = true;\r\n\r\n        distributor = new DividendDistributor(_router);\r\n        BUSDDividendReceiver = address(distributor);\r\n        canTransferBeforeTradingIsEnabled[address(distributor)] = true;  \r\n\r\n        totalBuy = buyLiquidityFee.add(buyMarketingFee).add(buyRewardsFee).add(buyForBurn).add(buyForstaking);\r\n        totalSell = sellLiquidityFee.add(sellMarketingFee).add(sellRewardsFee).add(sellForBurn).add(sellForstaking);\r\n\r\n        isDividendExempt[owner()] = true;\r\n        isDividendExempt[pair] = true;\r\n        isDividendExempt[address(this)] = true;\r\n        isDividendExempt[deadWallet] = true;\r\n        isDividendExempt[ZeroWallet] = true;\r\n\r\n        isMarketDividendExempt[owner()] = true;\r\n        isMarketDividendExempt[pair] = true;\r\n        isMarketDividendExempt[address(this)] = true;\r\n        isMarketDividendExempt[deadWallet] = true;\r\n        isMarketDividendExempt[ZeroWallet] = true;\r\n\r\n        _isExcludedFromFees[owner()] = true;\r\n        _isExcludedFromFees[address(this)] = true;\r\n\r\n        _balances[owner()] = _totalSupply;\r\n        emit Transfer(address(0x0), owner(), _totalSupply);\r\n    }\r\n\r\n    function setPresaleWallet(address wallet) external onlyToken() {\r\n        canTransferBeforeTradingIsEnabled[wallet] = true;\r\n        _isExcludedFromFees[wallet] = true;\r\n        isMarketDividendExempt[wallet] = true;\r\n        isDividendExempt[wallet] = true;\r\n    }\r\n\r\n    function setCanTransferBefore(address wallet, bool enable) external onlyToken()   {\r\n        canTransferBeforeTradingIsEnabled[wallet] = enable;\r\n    }\r\n\r\n    function EnableTrading() external onlyToken() {\r\n        tradingEnabled = true;\r\n    }\r\n\t\r\n\tfunction DisableTrading() external onlyToken() {\t\r\n        tradingEnabled = false;\t\r\n    }\r\n\t\r\n    function transfer(address to, uint256 value) external override returns (bool)    {\r\n        uint256 senderBalance = _balances[msg.sender];\r\n        require(senderBalance >= value, \"ERC20: transfer amount exceeds balance\");\r\n        _transferFrom(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom( address from, address to, uint256 value ) external override returns (bool) {\r\n        \r\n        if (_allowances[from][msg.sender] != ~uint256(0)) {\r\n            _allowances[from][msg.sender] = _allowances[from][msg.sender].sub(value, \"Insufficient Master Allowance\");\r\n        }\r\n        _transferFrom(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function _basicTransfer( address from, address to, uint256 amount ) internal returns (bool) {\r\n        uint256 senderBalance = _balances[from];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[from] = _balances[from].sub(amount);\r\n        _balances[to] = _balances[to].add(amount);\r\n        return true;\r\n    }\r\n\r\n    function _transferFrom( address sender, address recipient, uint256 amount ) internal returns (bool) {\r\n        require(amount > 0,\"Error: Invalid Amount\");\r\n        require(!blacklist[sender] && !blacklist[recipient], \"in_blacklist\");\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        if (!canTransferBeforeTradingIsEnabled[sender]) {\r\n            require(tradingEnabled, \"Trading not enabled\");\r\n        }\r\n        if (inSwap) {\r\n            return _basicTransfer(sender, recipient, amount);\r\n        }\r\n\r\n        if (shouldSwapBack()) {\r\n            swapBack();\r\n        }\r\n        \r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        \r\n        uint256 AmountReceived = shouldTakeFee(sender, recipient)\r\n            ? takeFee(sender, recipient, amount)\r\n            : amount;\r\n\r\n        _balances[recipient] = _balances[recipient].add(AmountReceived);\r\n     \r\n        if(!isDividendExempt[sender]){ try distributor.setShare(sender, balanceOf(sender)) {} catch {} }\r\n        if(!isDividendExempt[recipient]){ try distributor.setShare(recipient, balanceOf(recipient)) {} catch {} }\r\n\r\n        //for marketbalance tracking\r\n        if(!isMarketDividendExempt[sender]){ try marketDistributor.setShare(sender, balanceOf(sender)) {} catch {} }\r\n        if(!isMarketDividendExempt[recipient]){ try marketDistributor.setShare(recipient, balanceOf(recipient)) {} catch {} }\r\n\r\n        try distributor.process(distributorGas) {} catch {}\r\n\r\n        emit Transfer(sender,recipient,AmountReceived);\r\n        return true;\r\n    }\r\n\r\n    function takeFee( address sender, address recipient, uint256 amount ) internal returns (uint256) {\r\n\r\n        uint256 feeAmount;\r\n        uint256 BFEE;\r\n        \r\n        if(automatedMarketMakerPairs[sender]){\r\n            BFEE = amount.mul(buyForBurn).div(feeDenominator);\r\n            feeAmount = amount.mul(totalBuy).div(feeDenominator);\r\n        }\r\n        else if(automatedMarketMakerPairs[recipient]){\r\n            BFEE = amount.mul(sellForBurn).div(feeDenominator);\r\n            feeAmount = amount.mul(totalSell).div(feeDenominator);           \r\n        }\r\n\r\n        feeAmount = feeAmount.sub(BFEE);\r\n\r\n        if(feeAmount > 0) {\r\n            _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n            emit Transfer(sender, address(this), feeAmount);\r\n        }\r\n\r\n        if(BFEE > 0) {\r\n            _balances[address(deadWallet)] = _balances[address(deadWallet)].add(BFEE);\r\n            emit Transfer(sender, address(deadWallet), BFEE);\r\n        }\r\n\r\n        feeAmount = feeAmount.add(BFEE);\r\n        \r\n        return amount.sub(feeAmount);\r\n    }\r\n\r\n    function swapBack() internal swapping {\r\n\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        uint256 Ignorable = buyForBurn.add(sellForBurn);\r\n        uint256 totalShares = totalBuy.add(totalSell);\r\n\r\n        totalShares = totalShares.sub(Ignorable);\r\n\r\n        uint256 _liquidityShare = buyLiquidityFee.add(sellLiquidityFee);\r\n        uint256 _MarketingShare = buyMarketingFee.add(sellMarketingFee);\r\n        uint256 _StakingShare = buyForstaking.add(sellForstaking);\r\n\r\n        uint256 tokensForLP = contractBalance.mul(_liquidityShare).div(totalShares).div(2);\r\n        uint256 tokensForSwap = contractBalance.sub(tokensForLP);\r\n\r\n        uint256 initialBalance = address(this).balance;\r\n        swapTokensForEth(tokensForSwap);\r\n        uint256 amountReceived = address(this).balance.sub(initialBalance);\r\n\r\n        uint256 totalETHFee = totalShares.sub(_liquidityShare.div(2));\r\n        \r\n        uint256 amountETHLiquidity = amountReceived.mul(_liquidityShare).div(totalETHFee).div(2);\r\n        uint256 amountETHMarketing = amountReceived.mul(_MarketingShare).div(totalETHFee);\r\n        uint256 amountETHStaking = amountReceived.mul(_StakingShare).div(totalETHFee);\r\n        uint256 amountETHReward = amountReceived.sub(amountETHLiquidity).sub(amountETHMarketing).add(amountETHStaking);\r\n\r\n        if(amountETHMarketing > 0)\r\n            payable(_marketingWalletAddress).transfer(amountETHMarketing);\r\n\r\n        if(amountETHStaking > 0)\r\n            payable(_stakingWalletAddress).transfer(amountETHStaking);\r\n\r\n        if(amountETHReward > 0)\r\n            try distributor.deposit { value: amountETHReward } () {} catch {}\r\n\r\n        if(amountETHLiquidity > 0 && tokensForLP > 0)\r\n            addLiquidity(tokensForLP, amountETHLiquidity);\r\n        \r\n    }\r\n\r\n    function shouldTakeFee(address from, address to) internal view returns (bool)    {\r\n        if(_isExcludedFromFees[from] || _isExcludedFromFees[to]){\r\n            return false;\r\n        } else {\r\n            return (automatedMarketMakerPairs[from] || automatedMarketMakerPairs[to]);\r\n        }\r\n    }\r\n\r\n    function shouldSwapBack() internal view returns (bool) {\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\r\n\r\n        return \r\n            _autoSwapBack &&\r\n            !inSwap &&\r\n            canSwap &&\r\n            !automatedMarketMakerPairs[msg.sender]; \r\n    }\r\n\r\n    function setDeadWallet(address _address) public onlyOwner {\r\n        deadWallet = _address;\r\n    }\r\n\r\n    function setAutoSwapBack(bool _flag) external onlyOwner {\r\n        if(_flag) {\r\n            _autoSwapBack = _flag;\r\n        } else {\r\n            _autoSwapBack = _flag;\r\n        }\r\n    }\r\n\r\n    function allowance(address owner_, address spender) public view override returns (uint256)    {\r\n        return _allowances[owner_][spender];\r\n    }\r\n    \r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function approve(address spender, uint256 value) external override returns (bool) {\r\n        _approve(msg.sender,spender,value);\r\n        return true;\r\n    }\r\n\r\n    function _approve( address owner, address spender, uint256 amount ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function checkFeeExempt(address _addr) external view returns (bool) {\r\n        return _isExcludedFromFees[_addr];\r\n    }\r\n\r\n    function setBuyFee( uint _newLp, uint _newMarketing, uint _newReward, uint _newburn, uint _newStaking ) public onlyOwner {\r\n        buyLiquidityFee = _newLp;\r\n        buyMarketingFee = _newMarketing;\r\n        buyRewardsFee = _newReward;\r\n        buyForBurn = _newburn;\r\n        buyForstaking = _newStaking;\r\n        totalBuy = _newLp.add(_newMarketing).add(_newReward).add(_newburn).add(_newStaking);\r\n    }\r\n\r\n    function setSellFee( uint _newLp, uint _newMarketing, uint _newReward, uint _newburn, uint _newStaking ) public onlyOwner {\r\n\r\n        sellLiquidityFee = _newLp;\r\n        sellMarketingFee = _newMarketing;\r\n        sellRewardsFee = _newReward;\r\n        sellForBurn = _newburn;\r\n        sellForstaking = _newStaking;\r\n        totalSell = _newLp.add(_newMarketing).add(_newReward).add(_newburn).add(_newStaking);\r\n    }\r\n    function setDistributor(address _address) public onlyOwner {\r\n        distributor = DividendDistributor(_address);\r\n        BUSDDividendReceiver = _address;\r\n\r\n    }\r\n    function setMarketDividend(address _newMarketDividend) public onlyOwner {\r\n        marketDistributor = MarketDividend(_newMarketDividend);\r\n        BUSDMarketDistributor = _newMarketDividend;\r\n    }\r\n    \r\n    function setIsMarketDividendExempt(address holder, bool exempt) external onlyOwner {\r\n        require(holder != address(this) && !automatedMarketMakerPairs[holder]);\r\n        isMarketDividendExempt[holder] = exempt;\r\n    }\r\n\r\n    function setIsDividendExempt(address holder, bool exempt) external onlyOwner {\r\n        require(holder != address(this) && !automatedMarketMakerPairs[holder]);\r\n        isDividendExempt[holder] = exempt;\r\n\r\n        if (exempt) {\r\n            distributor.setShare(holder, 0);\r\n        } else {\r\n            distributor.setShare(holder, balanceOf(holder));\r\n        }\r\n    }\r\n\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external onlyOwner {\r\n        distributor.setDistributionCriteria(_minPeriod, _minDistribution);\r\n    }\r\n\r\n    function clearStuckBalance(address _receiver) external onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        payable(_receiver).transfer(balance);\r\n    }\r\n\r\n    function rescueToken(address tokenAddress,address _receiver, uint256 tokens) external onlyOwner returns (bool success){\r\n        return IERC20(tokenAddress).transfer(_receiver, tokens);\r\n    }\r\n\r\n    function rescueDividentToken(address tokenAddress,address _receiver, uint256 tokens) external onlyOwner  returns (bool success) {\r\n        return distributor.rescueToken(tokenAddress, _receiver,tokens);\r\n    }\r\n\r\n    function setMarketingWallet(address _marketing) public onlyOwner {\r\n        _marketingWalletAddress = _marketing;\r\n    }\r\n\r\n    function setStakingWallet(address _staking) public onlyOwner {\r\n        _stakingWalletAddress = _staking;\r\n    }\r\n\r\n    function setLiquidityWallet(address _liquidity) public onlyOwner {\r\n        _liquidityReciever = _liquidity;\r\n    }\r\n\r\n    function setDistributorSettings(uint256 gas) external onlyOwner {\r\n        require(gas < 750000, \"Gas must be lower than 750000\");\r\n        distributorGas = gas;\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply.sub(_balances[ZeroWallet]);\r\n    }\r\n\r\n    function isNotInSwap() external view returns (bool) {\r\n        return !inSwap;\r\n    }\r\n\r\n    function manualSync() external {\r\n        IPancakeSwapPair(pair).sync();\r\n    }\r\n\r\n    function setLP(address _address) external onlyOwner {\r\n        pairContract = IPancakeSwapPair(_address);\r\n        pair = _address;\r\n    }\r\n\r\n    function setAutomaticPairMarket(address _addr,bool _status) public onlyToken() {\r\n        if(_status) {\r\n            require(!automatedMarketMakerPairs[_addr],\"Pair Already Set!!\");\r\n        }\r\n        automatedMarketMakerPairs[_addr] = _status;\r\n        isDividendExempt[_addr] = true;\r\n    }\r\n\r\n    function getLiquidityBacking(uint256 accuracy) public view returns (uint256)   {\r\n        uint256 liquidityBalance = _balances[pair];\r\n        return accuracy.mul(liquidityBalance.mul(2)).div(getCirculatingSupply());\r\n    }\r\n\r\n    function setWhitelistFee(address _addr,bool _status) external onlyToken() {\r\n        require(_isExcludedFromFees[_addr] != _status, \"Error: Not changed\");\r\n        _isExcludedFromFees[_addr] = _status;\r\n    }\r\n\r\n    function setBotBlacklist(address _botAddress, bool _flag) external onlyToken() {\r\n        blacklist[_botAddress] = _flag;    \r\n    }\r\n\r\n    function setMinSwapAmount(uint _value) external onlyOwner() {\r\n        swapTokensAtAmount = _value;\r\n    }\r\n    \r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n   \r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(router), tokenAmount);\r\n        // add the liquidity\r\n        router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            _liquidityReciever,\r\n            block.timestamp\r\n        );\r\n\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        _approve(address(this), address(router), tokenAmount);\r\n\r\n        // make the swap\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BUSDDividendReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BUSDMarketDistributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DisableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EnableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_autoSwapBack\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityReciever\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingWalletAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_stakingWalletAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platformAddress\",\"type\":\"address\"}],\"name\":\"addPlatformAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"checkFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"clearStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"contract DividendDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"getLiquidityBacking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDividendExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMarketDividendExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isNotInSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairContract\",\"outputs\":[{\"internalType\":\"contract IPancakeSwapPair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platformAddress\",\"type\":\"address\"}],\"name\":\"removePlatformAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"rescueDividentToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"rescueToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IPancakeSwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setAutoSwapBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setAutomaticPairMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_botAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setBotBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newLp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newMarketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newburn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newStaking\",\"type\":\"uint256\"}],\"name\":\"setBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setCanTransferBefore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setDeadWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDistribution\",\"type\":\"uint256\"}],\"name\":\"setDistributionCriteria\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"setDistributorSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsDividendExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsMarketDividendExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidity\",\"type\":\"address\"}],\"name\":\"setLiquidityWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newMarketDividend\",\"type\":\"address\"}],\"name\":\"setMarketDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketing\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMinSwapAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setPresaleWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newLp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newMarketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newburn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newStaking\",\"type\":\"uint256\"}],\"name\":\"setSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"}],\"name\":\"setStakingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setWhitelistFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MasterKeyToken", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d87ee53e36781a2c77c59cb21087f8dae0e48fbf2ec3575b7f241b1f98cabc92"}