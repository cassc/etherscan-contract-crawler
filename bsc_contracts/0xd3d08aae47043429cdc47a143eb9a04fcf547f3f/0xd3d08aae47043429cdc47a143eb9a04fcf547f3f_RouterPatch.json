{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@rari-capital/solmate/src/mixins/ERC4626.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\nimport {SafeTransferLib} from \\\"../utils/SafeTransferLib.sol\\\";\\nimport {FixedPointMathLib} from \\\"../utils/FixedPointMathLib.sol\\\";\\n\\n/// @notice Minimal ERC4626 tokenized Vault implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/mixins/ERC4626.sol)\\nabstract contract ERC4626 is ERC20 {\\n    using SafeTransferLib for ERC20;\\n    using FixedPointMathLib for uint256;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               IMMUTABLES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    ERC20 public immutable asset;\\n\\n    constructor(\\n        ERC20 _asset,\\n        string memory _name,\\n        string memory _symbol\\n    ) ERC20(_name, _symbol, _asset.decimals()) {\\n        asset = _asset;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        DEPOSIT/WITHDRAWAL LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256 shares) {\\n        // Check for rounding error since we round down in previewDeposit.\\n        require((shares = previewDeposit(assets)) != 0, \\\"ZERO_SHARES\\\");\\n\\n        // Need to transfer before minting or ERC777s could reenter.\\n        asset.safeTransferFrom(msg.sender, address(this), assets);\\n\\n        _mint(receiver, shares);\\n\\n        emit Deposit(msg.sender, receiver, assets, shares);\\n\\n        afterDeposit(assets, shares);\\n    }\\n\\n    function mint(uint256 shares, address receiver) public virtual returns (uint256 assets) {\\n        assets = previewMint(shares); // No need to check for rounding error, previewMint rounds up.\\n\\n        // Need to transfer before minting or ERC777s could reenter.\\n        asset.safeTransferFrom(msg.sender, address(this), assets);\\n\\n        _mint(receiver, shares);\\n\\n        emit Deposit(msg.sender, receiver, assets, shares);\\n\\n        afterDeposit(assets, shares);\\n    }\\n\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) public virtual returns (uint256 shares) {\\n        shares = previewWithdraw(assets); // No need to check for rounding error, previewWithdraw rounds up.\\n\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance[owner][msg.sender]; // Saves gas for limited approvals.\\n\\n            if (allowed != type(uint256).max) allowance[owner][msg.sender] = allowed - shares;\\n        }\\n\\n        beforeWithdraw(assets, shares);\\n\\n        _burn(owner, shares);\\n\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n        asset.safeTransfer(receiver, assets);\\n    }\\n\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) public virtual returns (uint256 assets) {\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance[owner][msg.sender]; // Saves gas for limited approvals.\\n\\n            if (allowed != type(uint256).max) allowance[owner][msg.sender] = allowed - shares;\\n        }\\n\\n        // Check for rounding error since we round down in previewRedeem.\\n        require((assets = previewRedeem(shares)) != 0, \\\"ZERO_ASSETS\\\");\\n\\n        beforeWithdraw(assets, shares);\\n\\n        _burn(owner, shares);\\n\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n        asset.safeTransfer(receiver, assets);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ACCOUNTING LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function totalAssets() public view virtual returns (uint256);\\n\\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? assets : assets.mulDivDown(supply, totalAssets());\\n    }\\n\\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? shares : shares.mulDivDown(totalAssets(), supply);\\n    }\\n\\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\\n        return convertToShares(assets);\\n    }\\n\\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? shares : shares.mulDivUp(totalAssets(), supply);\\n    }\\n\\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? assets : assets.mulDivUp(supply, totalAssets());\\n    }\\n\\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\\n        return convertToAssets(shares);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                     DEPOSIT/WITHDRAWAL LIMIT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function maxDeposit(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    function maxMint(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\\n        return convertToAssets(balanceOf[owner]);\\n    }\\n\\n    function maxRedeem(address owner) public view virtual returns (uint256) {\\n        return balanceOf[owner];\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                          INTERNAL HOOKS LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function beforeWithdraw(uint256 assets, uint256 shares) internal virtual {}\\n\\n    function afterDeposit(uint256 assets, uint256 shares) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@rari-capital/solmate/src/tokens/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@rari-capital/solmate/src/utils/FixedPointMathLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // First, divide z - 1 by the denominator and add 1.\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        assembly {\\n            // Start off with z at 1.\\n            z := 1\\n\\n            // Used below to help find a nearby power of 2.\\n            let y := x\\n\\n            // Find the lowest power of 2 that is at least sqrt(x).\\n            if iszero(lt(y, 0x100000000000000000000000000000000)) {\\n                y := shr(128, y) // Like dividing by 2 ** 128.\\n                z := shl(64, z) // Like multiplying by 2 ** 64.\\n            }\\n            if iszero(lt(y, 0x10000000000000000)) {\\n                y := shr(64, y) // Like dividing by 2 ** 64.\\n                z := shl(32, z) // Like multiplying by 2 ** 32.\\n            }\\n            if iszero(lt(y, 0x100000000)) {\\n                y := shr(32, y) // Like dividing by 2 ** 32.\\n                z := shl(16, z) // Like multiplying by 2 ** 16.\\n            }\\n            if iszero(lt(y, 0x10000)) {\\n                y := shr(16, y) // Like dividing by 2 ** 16.\\n                z := shl(8, z) // Like multiplying by 2 ** 8.\\n            }\\n            if iszero(lt(y, 0x100)) {\\n                y := shr(8, y) // Like dividing by 2 ** 8.\\n                z := shl(4, z) // Like multiplying by 2 ** 4.\\n            }\\n            if iszero(lt(y, 0x10)) {\\n                y := shr(4, y) // Like dividing by 2 ** 4.\\n                z := shl(2, z) // Like multiplying by 2 ** 2.\\n            }\\n            if iszero(lt(y, 0x8)) {\\n                // Equivalent to 2 ** z.\\n                z := shl(1, z)\\n            }\\n\\n            // Shifting right by 1 is like dividing by 2.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // Compute a rounded down version of z.\\n            let zRoundDown := div(x, z)\\n\\n            // If zRoundDown is smaller, use it.\\n            if lt(zRoundDown, z) {\\n                z := zRoundDown\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@rari-capital/solmate/src/utils/SafeTransferLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    event Debug(bool one, bool two, uint256 retsize);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), from) // Append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IDestination.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.14;\\n\\nimport {LiqRequest} from \\\"../types/socketTypes.sol\\\";\\n\\ninterface IDestination {\\n    function directDeposit(\\n        address srcSender,\\n        LiqRequest memory liqData,\\n        uint256[] memory vaultIds,\\n        uint256[] memory amounts\\n    ) external payable returns (uint256[] memory dstAmounts);\\n\\n    function directWithdraw(\\n        address srcSender,\\n        uint256[] memory vaultIds,\\n        uint256[] memory amounts,\\n        LiqRequest memory _liqData\\n    ) external payable;\\n\\n    function stateSync(bytes memory _payload) external payable;\\n\\n    function safeGasParam() external view returns (bytes memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IERC4626.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.14;\\n\\nimport {ERC20} from \\\"@rari-capital/solmate/src/tokens/ERC20.sol\\\";\\n\\n/// @title ERC4626 interface\\n/// See: https://eips.ethereum.org/EIPS/eip-4626\\nabstract contract IERC4626 is ERC20 {\\n    /*////////////////////////////////////////////////////////\\n                      Events\\n    ////////////////////////////////////////////////////////*/\\n\\n    /// @notice `sender` has exchanged `assets` for `positions`,\\n    /// and transferred those `positions` to `receiver`.\\n    event Deposit(\\n        address indexed sender,\\n        address indexed receiver,\\n        uint256 assets,\\n        uint256 positions\\n    );\\n\\n    /// @notice `sender` has exchanged `positions` for `assets`,\\n    /// and transferred those `assets` to `receiver`.\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        uint256 assets,\\n        uint256 positions\\n    );\\n\\n    /*////////////////////////////////////////////////////////\\n                      Vault properties\\n    ////////////////////////////////////////////////////////*/\\n\\n    /// @notice The address of the underlying ERC20 token used for\\n    /// the Vault for accounting, depositing, and withdrawing.\\n    function asset() external view virtual returns (address asset);\\n\\n    /// @notice Total amount of the underlying asset that\\n    /// is \\\"managed\\\" by Vault.\\n    function totalAssets() external view virtual returns (uint256 totalAssets);\\n\\n    /*////////////////////////////////////////////////////////\\n                      Deposit/Withdrawal Logic\\n    ////////////////////////////////////////////////////////*/\\n\\n    /// @notice Mints `positions` Vault positions to `receiver` by\\n    /// depositing exactly `assets` of underlying tokens.\\n    function deposit(uint256 assets, address receiver)\\n        external\\n        virtual\\n        returns (uint256 positions);\\n\\n    /// @notice Mints exactly `positions` Vault positions to `receiver`\\n    /// by depositing `assets` of underlying tokens.\\n    function mint(uint256 positions, address receiver)\\n        external\\n        virtual\\n        returns (uint256 assets);\\n\\n    /// @notice Redeems `positions` from `owner` and sends `assets`\\n    /// of underlying tokens to `receiver`.\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) external virtual returns (uint256 positions);\\n\\n    /// @notice Redeems `positions` from `owner` and sends `assets`\\n    /// of underlying tokens to `receiver`.\\n    function redeem(\\n        uint256 positions,\\n        address receiver,\\n        address owner\\n    ) external virtual returns (uint256 assets);\\n\\n    /*////////////////////////////////////////////////////////\\n                      Vault Accounting Logic\\n    ////////////////////////////////////////////////////////*/\\n\\n    /// @notice The amount of positions that the vault would\\n    /// exchange for the amount of assets provided, in an\\n    /// ideal scenario where all the conditions are met.\\n    function convertToShares(uint256 assets)\\n        external\\n        view\\n        virtual\\n        returns (uint256 positions);\\n\\n    /// @notice The amount of assets that the vault would\\n    /// exchange for the amount of positions provided, in an\\n    /// ideal scenario where all the conditions are met.\\n    function convertToAssets(uint256 positions)\\n        external\\n        view\\n        virtual\\n        returns (uint256 assets);\\n\\n    /// @notice Total number of underlying assets that can\\n    /// be deposited by `owner` into the Vault, where `owner`\\n    /// corresponds to the input parameter `receiver` of a\\n    /// `deposit` call.\\n    function maxDeposit(address owner)\\n        external\\n        view\\n        virtual\\n        returns (uint256 maxAssets);\\n\\n    /// @notice Allows an on-chain or off-chain user to simulate\\n    /// the effects of their deposit at the current block, given\\n    /// current on-chain conditions.\\n    function previewDeposit(uint256 assets)\\n        external\\n        view\\n        virtual\\n        returns (uint256 positions);\\n\\n    /// @notice Total number of underlying positions that can be minted\\n    /// for `owner`, where `owner` corresponds to the input\\n    /// parameter `receiver` of a `mint` call.\\n    function maxMint(address owner)\\n        external\\n        view\\n        virtual\\n        returns (uint256 maxPositions);\\n\\n    /// @notice Allows an on-chain or off-chain user to simulate\\n    /// the effects of their mint at the current block, given\\n    /// current on-chain conditions.\\n    function previewMint(uint256 positions)\\n        external\\n        view\\n        virtual\\n        returns (uint256 assets);\\n\\n    /// @notice Total number of underlying assets that can be\\n    /// withdrawn from the Vault by `owner`, where `owner`\\n    /// corresponds to the input parameter of a `withdraw` call.\\n    function maxWithdraw(address owner)\\n        external\\n        view\\n        virtual\\n        returns (uint256 maxAssets);\\n\\n    /// @notice Allows an on-chain or off-chain user to simulate\\n    /// the effects of their withdrawal at the current block,\\n    /// given current on-chain conditions.\\n    function previewWithdraw(uint256 assets)\\n        external\\n        view\\n        virtual\\n        returns (uint256 positions);\\n\\n    /// @notice Total number of underlying positions that can be\\n    /// redeemed from the Vault by `owner`, where `owner` corresponds\\n    /// to the input parameter of a `redeem` call.\\n    function maxRedeem(address owner)\\n        external\\n        view\\n        virtual\\n        returns (uint256 maxPositions);\\n\\n    /// @notice Allows an on-chain or off-chain user to simulate\\n    /// the effects of their redeemption at the current block,\\n    /// given current on-chain conditions.\\n    function previewRedeem(uint256 positions)\\n        external\\n        view\\n        virtual\\n        returns (uint256 assets);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/ILayerZeroEndpoint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.14;\\n\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\n\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\n    // @param _payload - a custom bytes payload to send to the destination contract\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\n    function send(\\n        uint16 _dstChainId,\\n        bytes calldata _destination,\\n        bytes calldata _payload,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    // @notice used by the messaging library to publish verified payload\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\n    // @param _dstAddress - the address on destination chain\\n    // @param _nonce - the unbound message ordering nonce\\n    // @param _gasLimit - the gas limit for external contract execution\\n    // @param _payload - verified payload to send to the destination contract\\n    function receivePayload(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        address _dstAddress,\\n        uint64 _nonce,\\n        uint256 _gasLimit,\\n        bytes calldata _payload\\n    ) external;\\n\\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress)\\n        external\\n        view\\n        returns (uint64);\\n\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\n    // @param _srcAddress - the source chain contract address\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress)\\n        external\\n        view\\n        returns (uint64);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _userApplication - the user app address on this EVM chain\\n    // @param _payload - the custom message to send over LayerZero\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\n    function estimateFees(\\n        uint16 _dstChainId,\\n        address _userApplication,\\n        bytes calldata _payload,\\n        bool _payInZRO,\\n        bytes calldata _adapterParam\\n    ) external view returns (uint256 nativeFee, uint256 zroFee);\\n\\n    // @notice get this Endpoint's immutable source identifier\\n    function getChainId() external view returns (uint16);\\n\\n    // @notice the interface to retry failed message on this Endpoint destination\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    // @param _payload - the payload to be retried\\n    function retryPayload(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        bytes calldata _payload\\n    ) external;\\n\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getSendLibraryAddress(address _userApplication)\\n        external\\n        view\\n        returns (address);\\n\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getReceiveLibraryAddress(address _userApplication)\\n        external\\n        view\\n        returns (address);\\n\\n    // @notice query if the non-reentrancy guard for send() is on\\n    // @return true if the guard is on. false otherwise\\n    function isSendingPayload() external view returns (bool);\\n\\n    // @notice query if the non-reentrancy guard for receive() is on\\n    // @return true if the guard is on. false otherwise\\n    function isReceivingPayload() external view returns (bool);\\n\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _userApplication - the contract address of the user application\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    function getConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        address _userApplication,\\n        uint256 _configType\\n    ) external view returns (bytes memory);\\n\\n    // @notice get the send() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getSendVersion(address _userApplication)\\n        external\\n        view\\n        returns (uint16);\\n\\n    // @notice get the lzReceive() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getReceiveVersion(address _userApplication)\\n        external\\n        view\\n        returns (uint16);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/ILayerZeroReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.14;\\n\\ninterface ILayerZeroReceiver {\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\n    // @param _srcChainId - the source endpoint identifier\\n    // @param _srcAddress - the source sending contract address from the source chain\\n    // @param _nonce - the ordered message nonce\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\n    function lzReceive(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _payload\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/ILayerZeroUserApplicationConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.14;\\n\\ninterface ILayerZeroUserApplicationConfig {\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\n    function setConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        uint256 _configType,\\n        bytes calldata _config\\n    ) external;\\n\\n    // @notice set the send() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setSendVersion(uint16 _version) external;\\n\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setReceiveVersion(uint16 _version) external;\\n\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\n    // @param _srcChainId - the chainId of the source chain\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress)\\n        external;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/ISource.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.14;\\n\\ninterface IController {\\n    function chainId() external returns (uint16);\\n\\n    function totalTransactions() external returns (uint256);\\n\\n    function stateSync(bytes memory _payload) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/layerzero/IStateHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.14;\\n\\ninterface IStateHandler {\\n    function dispatchState(\\n        uint16 dstChainId,\\n        bytes memory data,\\n        bytes memory adapterParam\\n    ) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/socket/ILiquidityHandler.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.14;\\n\\ninterface ILiquidityHandler {\\n    function dispatchTokens(\\n        address _to,\\n        bytes memory _txData,\\n        address _token,\\n        address _allowanceTarget,\\n        uint256 _amount\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/layerzero/stateHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.14;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"../lzApp/NonblockingLzApp.sol\\\";\\n\\nimport {IController} from \\\"../interface/ISource.sol\\\";\\nimport {StateData, CallbackType, PayloadState, TransactionType, InitData, ReturnData} from \\\"../types/lzTypes.sol\\\";\\n\\n/**\\n * @title State Handler\\n * @author Zeropoint Labs.\\n *\\n * Contract to handle state transfer between chains using layerzero.\\n */\\ncontract StateHandler is NonblockingLzApp, AccessControl {\\n    /* ================ Constants =================== */\\n    bytes32 public constant CORE_CONTRACTS_ROLE =\\n        keccak256(\\\"CORE_CONTRACTS_ROLE\\\");\\n    bytes32 public constant PROCESSOR_CONTRACTS_ROLE =\\n        keccak256(\\\"PROCESSOR_CONTRACTS_ROLE\\\");\\n\\n    /* ================ State Variables =================== */\\n    IController public sourceContract;\\n    IController public destinationContract;\\n    uint256 public totalPayloads;\\n\\n    /// @dev maps state received to source_chain, destination_chain and txId\\n    mapping(uint256 => bytes) public payload;\\n\\n    /// @dev maps payload to unique id\\n    mapping(uint256 => PayloadState) public payloadProcessed;\\n\\n    /// @dev prevents layerzero relayer from replaying payload\\n    mapping(uint16 => mapping(uint64 => bool)) public isValid;\\n\\n    /* ================ Events =================== */\\n    event StateReceived(\\n        uint16 srcChainId,\\n        uint16 dstChainId,\\n        uint256 txId,\\n        uint256 payloadId\\n    );\\n    event StateUpdated(uint256 payloadId);\\n    event StateProcessed(uint256 payloadId);\\n\\n    /* ================ Constructor =================== */\\n    /**\\n     * @param endpoint_ is the layer zero endpoint for respective chain.\\n     */\\n    constructor(address endpoint_) NonblockingLzApp(endpoint_) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n    }\\n\\n    /* ================ External Functions =================== */\\n    /**\\n     * @notice receive enables processing native token transfers into the smart contract.\\n     * @dev socket.tech fails without a native receive function.\\n     */\\n    receive() external payable {}\\n\\n    /**\\n     * PREVILAGED ADMIN ONLY FUNCTION\\n     *\\n     * @dev would update the router and destination contracts to the state handler\\n     * @param source_           represents the address of super router on respective chain.\\n     * @param destination_      represents the super destination on respective chain.\\n     * @dev set source or destination contract as controller\\n     * @dev StateHandler doesn't care about sameChainId communication (uses directDep/With for that)\\n     * @dev SuperRouter needs its StateHandler and SuperDestination needs its StateHandler\\n     * @dev Source's StateHandler IController is SuperRouter, Destination's StateHandler IController is SuperDestination\\n     */\\n    function setHandlerController(IController source_, IController destination_)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        sourceContract = source_;\\n        destinationContract = destination_;\\n    }\\n\\n    /**\\n     * PREVILAGED PROCESSOR ONLY FUNCTION\\n     * @dev updates the state_data value to the exact amounts post bridge and swap slippage.\\n     */\\n    function updateState(uint256 payloadId, uint256[] calldata finalAmounts)\\n        external\\n        onlyRole(PROCESSOR_CONTRACTS_ROLE)\\n    {\\n        require(\\n            payloadId <= totalPayloads &&\\n                payloadProcessed[payloadId] == PayloadState.STORED,\\n            \\\"State Handler: Invalid Payload ID or Status\\\"\\n        );\\n        StateData memory stateData = abi.decode(\\n            payload[payloadId],\\n            (StateData)\\n        );\\n        require(\\n            stateData.flag == CallbackType.INIT,\\n            \\\"State Handler: Invalid Payload Flag\\\"\\n        );\\n\\n        InitData memory data = abi.decode(stateData.params, (InitData));\\n\\n        uint256 l1 = data.amounts.length;\\n        uint256 l2 = finalAmounts.length;\\n        require(l1 == l2, \\\"State Handler: Invalid Lengths\\\");\\n\\n        for (uint256 i = 0; i < l1; i++) {\\n            uint256 newAmount = finalAmounts[i];\\n            uint256 maxAmount = data.amounts[i];\\n            require(newAmount <= maxAmount, \\\"State Handler: Negative Slippage\\\");\\n\\n            uint256 minAmount = (maxAmount * (10000 - data.maxSlippage[i])) /\\n                10000;\\n            require(\\n                newAmount >= minAmount,\\n                \\\"State Handler: Slippage Out Of Bounds\\\"\\n            );\\n        }\\n\\n        data.amounts = finalAmounts;\\n        stateData.params = abi.encode(data);\\n\\n        payload[payloadId] = abi.encode(stateData);\\n        payloadProcessed[payloadId] = PayloadState.UPDATED;\\n\\n        emit StateUpdated(payloadId);\\n    }\\n\\n    /**\\n     * ANYONE CAN INITATE PROCESSING\\n     *\\n     * note: update this logic to support no-state-update for withdrawals\\n     * @dev would execute the received state_messages from super router on source chain.\\n     * @param payloadId   represents the payload id.\\n     */\\n    function processPayload(uint256 payloadId, bytes memory safeGasParam)\\n        external\\n        payable\\n    {\\n        require(\\n            payloadId <= totalPayloads,\\n            \\\"State Handler: Invalid Payload ID\\\"\\n        );\\n        bytes memory _payload = payload[payloadId];\\n        StateData memory data = abi.decode(_payload, (StateData));\\n\\n        if (data.txType == TransactionType.WITHDRAW) {\\n            if (data.flag == CallbackType.INIT) {\\n                require(\\n                    payloadProcessed[payloadId] == PayloadState.STORED,\\n                    \\\"State Handler: Invalid Payload State\\\"\\n                );\\n                try\\n                    destinationContract.stateSync{value: msg.value}(_payload)\\n                {} catch {\\n                    InitData memory initData = abi.decode(\\n                        data.params,\\n                        (InitData)\\n                    );\\n                    dispatchState(\\n                        initData.srcChainId,\\n                        abi.encode(\\n                            StateData(\\n                                TransactionType.WITHDRAW,\\n                                CallbackType.RETURN,\\n                                abi.encode(\\n                                    ReturnData(\\n                                        false,\\n                                        initData.srcChainId,\\n                                        initData.dstChainId,\\n                                        initData.txId,\\n                                        initData.amounts\\n                                    )\\n                                )\\n                            )\\n                        ),\\n                        safeGasParam\\n                    );\\n                }\\n            } else {\\n                require(\\n                    payloadProcessed[payloadId] == PayloadState.STORED,\\n                    \\\"State Handler: Invalid Payload State\\\"\\n                );\\n                sourceContract.stateSync{value: msg.value}(_payload);\\n            }\\n        } else {\\n            if (data.flag == CallbackType.INIT) {\\n                require(\\n                    payloadProcessed[payloadId] == PayloadState.UPDATED,\\n                    \\\"State Handler: Invalid Payload State\\\"\\n                );\\n                destinationContract.stateSync{value: msg.value}(_payload);\\n            } else {\\n                require(\\n                    payloadProcessed[payloadId] == PayloadState.STORED,\\n                    \\\"State Handler: Invalid Payload State\\\"\\n                );\\n                sourceContract.stateSync{value: msg.value}(_payload);\\n            }\\n        }\\n\\n        payloadProcessed[payloadId] = PayloadState.PROCESSED;\\n        emit StateProcessed(payloadId);\\n    }\\n\\n    /// @dev allows users to send state to a destination chain contract.\\n    /// @param dstChainId represents chain id of the destination chain.\\n    /// @param data represents the state info to be sent.\\n    /// Note: Add gas calculation to front-end\\n    /// Note the length of srcAmounts & vaultIds should always be equal.\\n    function dispatchState(\\n        uint16 dstChainId,\\n        bytes memory data,\\n        bytes memory adapterParam\\n    ) public payable onlyRole(CORE_CONTRACTS_ROLE) {\\n        _lzSend(\\n            dstChainId,\\n            data,\\n            payable(_msgSender()),\\n            address(0x0),\\n            adapterParam\\n        );\\n    }\\n\\n    /* ================ Internal Functions =================== */\\n    function _nonblockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) internal override {\\n        StateData memory data = abi.decode(_payload, (StateData));\\n\\n        if (data.flag == CallbackType.INIT) {\\n            InitData memory initData = abi.decode(data.params, (InitData));\\n            require(\\n                !isValid[_srcChainId][_nonce],\\n                \\\"State Handler: Duplicate Payload\\\"\\n            );\\n\\n            totalPayloads++;\\n            payload[totalPayloads] = _payload;\\n            isValid[_srcChainId][_nonce] = true;\\n\\n            emit StateReceived(\\n                initData.srcChainId,\\n                initData.dstChainId,\\n                initData.txId,\\n                totalPayloads\\n            );\\n        } else {\\n            ReturnData memory returnData = abi.decode(\\n                data.params,\\n                (ReturnData)\\n            );\\n            require(\\n                !isValid[_srcChainId][_nonce],\\n                \\\"State Handler: Duplicate Payload\\\"\\n            );\\n\\n            totalPayloads++;\\n            payload[totalPayloads] = _payload;\\n            isValid[_srcChainId][_nonce] = true;\\n\\n            emit StateReceived(_srcChainId, 0, returnData.txId, totalPayloads);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lzApp/LzApp.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interface/ILayerZeroReceiver.sol\\\";\\nimport \\\"../interface/ILayerZeroUserApplicationConfig.sol\\\";\\nimport \\\"../interface/ILayerZeroEndpoint.sol\\\";\\n\\n/*\\n * a generic LzReceiver implementation\\n */\\nabstract contract LzApp is\\n    Ownable,\\n    ILayerZeroReceiver,\\n    ILayerZeroUserApplicationConfig\\n{\\n    ILayerZeroEndpoint public immutable lzEndpoint;\\n\\n    mapping(uint16 => bytes) public trustedRemoteLookup;\\n\\n    event SetTrustedRemote(uint16 _srcChainId, bytes _srcAddress);\\n\\n    constructor(address _endpoint) {\\n        lzEndpoint = ILayerZeroEndpoint(_endpoint);\\n    }\\n\\n    function lzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) public virtual override {\\n        // lzReceive must be called by the endpoint for security\\n        require(\\n            _msgSender() == address(lzEndpoint),\\n            \\\"LzApp: invalid endpoint caller\\\"\\n        );\\n\\n        bytes memory trustedRemote = trustedRemoteLookup[_srcChainId];\\n        // if will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\\n        require(\\n            _srcAddress.length == trustedRemote.length &&\\n                keccak256(_srcAddress) == keccak256(trustedRemote),\\n            \\\"LzApp: invalid source sending contract\\\"\\n        );\\n\\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    // abstract function - the default behaviour of LayerZero is blocking. See: NonblockingLzApp if you dont need to enforce ordered messaging\\n    function _blockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) internal virtual;\\n\\n    function _lzSend(\\n        uint16 _dstChainId,\\n        bytes memory _payload,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes memory _adapterParams\\n    ) internal virtual {\\n        bytes memory trustedRemote = trustedRemoteLookup[_dstChainId];\\n        require(\\n            trustedRemote.length != 0,\\n            \\\"LzApp: destination chain is not a trusted source\\\"\\n        );\\n        lzEndpoint.send{value: msg.value}(\\n            _dstChainId,\\n            trustedRemote,\\n            _payload,\\n            _refundAddress,\\n            _zroPaymentAddress,\\n            _adapterParams\\n        );\\n    }\\n\\n    //---------------------------UserApplication config----------------------------------------\\n    function getConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        address,\\n        uint256 _configType\\n    ) external view returns (bytes memory) {\\n        return\\n            lzEndpoint.getConfig(\\n                _version,\\n                _chainId,\\n                address(this),\\n                _configType\\n            );\\n    }\\n\\n    // generic config for LayerZero user Application\\n    function setConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        uint256 _configType,\\n        bytes calldata _config\\n    ) external override onlyOwner {\\n        lzEndpoint.setConfig(_version, _chainId, _configType, _config);\\n    }\\n\\n    function setSendVersion(uint16 _version) external override onlyOwner {\\n        lzEndpoint.setSendVersion(_version);\\n    }\\n\\n    function setReceiveVersion(uint16 _version) external override onlyOwner {\\n        lzEndpoint.setReceiveVersion(_version);\\n    }\\n\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\\n    }\\n\\n    // allow owner to set it multiple times.\\n    function setTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress)\\n        external\\n        onlyOwner\\n    {\\n        trustedRemoteLookup[_srcChainId] = _srcAddress;\\n        emit SetTrustedRemote(_srcChainId, _srcAddress);\\n    }\\n\\n    //--------------------------- VIEW FUNCTION ----------------------------------------\\n\\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\\n        return keccak256(trustedSource) == keccak256(_srcAddress);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lzApp/NonblockingLzApp.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport \\\"./LzApp.sol\\\";\\n\\n/*\\n * the default LayerZero messaging behaviour is blocking, i.e. any failed message will block the channel\\n * this abstract class try-catch all fail messages and store locally for future retry. hence, non-blocking\\n * NOTE: if the srcAddress is not configured properly, it will still block the message pathway from (srcChainId, srcAddress)\\n */\\nabstract contract NonblockingLzApp is LzApp {\\n    constructor(address _endpoint) LzApp(_endpoint) {}\\n\\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32)))\\n        public failedMessages;\\n\\n    event MessageFailed(\\n        uint16 _srcChainId,\\n        bytes _srcAddress,\\n        uint64 _nonce,\\n        bytes _payload\\n    );\\n\\n    // overriding the virtual function in LzReceiver\\n    function _blockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) internal virtual override {\\n        // try-catch all errors/exceptions\\n        try\\n            this.nonblockingLzReceive(\\n                _srcChainId,\\n                _srcAddress,\\n                _nonce,\\n                _payload\\n            )\\n        {\\n            // do nothing\\n        } catch {\\n            // error / exception\\n            failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(\\n                _payload\\n            );\\n            emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload);\\n        }\\n    }\\n\\n    function nonblockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) public virtual {\\n        // only internal transaction\\n        require(\\n            _msgSender() == address(this),\\n            \\\"NonblockingLzApp: caller must be LzApp\\\"\\n        );\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    //@notice override this function\\n    function _nonblockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) internal virtual;\\n\\n    function retryMessage(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) public payable virtual {\\n        // assert there is message to retry\\n        bytes32 payloadHash = failedMessages[_srcChainId][_srcAddress][_nonce];\\n        require(\\n            payloadHash != bytes32(0),\\n            \\\"NonblockingLzApp: no stored message\\\"\\n        );\\n        require(\\n            keccak256(_payload) == payloadHash,\\n            \\\"NonblockingLzApp: invalid payload\\\"\\n        );\\n        // clear the stored message\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = bytes32(0);\\n        // execute the message. revert if it fails again\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mocks/ERC20Mock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n// mock class using ERC20\\ncontract ERC20Mock is ERC20 {\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        address initialAccount,\\n        uint256 initialBalance\\n    ) payable ERC20(name, symbol) {\\n        _mint(initialAccount, initialBalance);\\n    }\\n\\n    function mint(address account, uint256 amount) public {\\n        _mint(account, amount);\\n    }\\n\\n    function burn(address account, uint256 amount) public {\\n        _burn(account, amount);\\n    }\\n\\n    function transferInternal(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) public {\\n        _transfer(from, to, value);\\n    }\\n\\n    function approveInternal(\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) public {\\n        _approve(owner, spender, value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mocks/LzEndpointMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.14;\\npragma abicoder v2;\\n\\nimport \\\"../interface/ILayerZeroReceiver.sol\\\";\\nimport \\\"../interface/ILayerZeroEndpoint.sol\\\";\\n\\n/*\\nmocking multi endpoint connection.\\n- send() will short circuit to lzReceive() directly\\n- no reentrancy guard. the real LayerZero endpoint on main net has a send and receive guard, respectively.\\nif we run a ping-pong-like application, the recursive call might use all gas limit in the block.\\n- not using any messaging library, hence all messaging library func, e.g. estimateFees, version, will not work\\n*/\\ncontract LZEndpointMock is ILayerZeroEndpoint {\\n    mapping(address => address) public lzEndpointLookup;\\n\\n    uint16 public mockChainId;\\n    address payable public mockOracle;\\n    address payable public mockRelayer;\\n    uint256 public mockBlockConfirmations;\\n    uint16 public mockLibraryVersion;\\n    uint256 public mockStaticNativeFee;\\n    uint16 public mockLayerZeroVersion;\\n    uint256 public nativeFee;\\n    uint256 public zroFee;\\n    bool nextMsgBLocked;\\n\\n    struct StoredPayload {\\n        uint64 payloadLength;\\n        address dstAddress;\\n        bytes32 payloadHash;\\n    }\\n\\n    struct QueuedPayload {\\n        address dstAddress;\\n        uint64 nonce;\\n        bytes payload;\\n    }\\n\\n    // inboundNonce = [srcChainId][srcAddress].\\n    mapping(uint16 => mapping(bytes => uint64)) public inboundNonce;\\n    // outboundNonce = [dstChainId][srcAddress].\\n    mapping(uint16 => mapping(address => uint64)) public outboundNonce;\\n    // storedPayload = [srcChainId][srcAddress]\\n    mapping(uint16 => mapping(bytes => StoredPayload)) public storedPayload;\\n    // msgToDeliver = [srcChainId][srcAddress]\\n    mapping(uint16 => mapping(bytes => QueuedPayload[])) public msgsToDeliver;\\n\\n    event UaForceResumeReceive(uint16 chainId, bytes srcAddress);\\n    event PayloadCleared(\\n        uint16 srcChainId,\\n        bytes srcAddress,\\n        uint64 nonce,\\n        address dstAddress\\n    );\\n    event PayloadStored(\\n        uint16 srcChainId,\\n        bytes srcAddress,\\n        address dstAddress,\\n        uint64 nonce,\\n        bytes payload,\\n        bytes reason\\n    );\\n\\n    constructor(uint16 _chainId) {\\n        mockStaticNativeFee = 42;\\n        mockLayerZeroVersion = 1;\\n        mockChainId = _chainId;\\n    }\\n\\n    // mock helper to set the value returned by `estimateNativeFees`\\n    function setEstimatedFees(uint256 _nativeFee, uint256 _zroFee) public {\\n        nativeFee = _nativeFee;\\n        zroFee = _zroFee;\\n    }\\n\\n    function getChainId() external view override returns (uint16) {\\n        return mockChainId;\\n    }\\n\\n    function setDestLzEndpoint(address destAddr, address lzEndpointAddr)\\n        external\\n    {\\n        lzEndpointLookup[destAddr] = lzEndpointAddr;\\n    }\\n\\n    function send(\\n        uint16 _chainId,\\n        bytes calldata _destination,\\n        bytes calldata _payload,\\n        address payable, // _refundAddress\\n        address, // _zroPaymentAddress\\n        bytes memory _adapterParams\\n    ) external payable override {\\n        address destAddr = packedBytesToAddr(_destination);\\n        address lzEndpoint = lzEndpointLookup[destAddr];\\n\\n        require(\\n            lzEndpoint != address(0),\\n            \\\"LayerZeroMock: destination LayerZero Endpoint not found\\\"\\n        );\\n\\n        require(\\n            msg.value >= nativeFee * _payload.length,\\n            \\\"LayerZeroMock: not enough native for fees\\\"\\n        );\\n\\n        uint64 nonce;\\n        {\\n            nonce = ++outboundNonce[_chainId][msg.sender];\\n        }\\n\\n        // Mock the relayer paying the dstNativeAddr the amount of extra native token\\n        {\\n            uint256 extraGas;\\n            uint256 dstNative;\\n            address dstNativeAddr;\\n            assembly {\\n                extraGas := mload(add(_adapterParams, 34))\\n                dstNative := mload(add(_adapterParams, 66))\\n                dstNativeAddr := mload(add(_adapterParams, 86))\\n            }\\n\\n            // to simulate actually sending the ether, add a transfer call and ensure the LZEndpointMock contract has an ether balance\\n        }\\n\\n        bytes memory bytesSourceUserApplicationAddr = addrToPackedBytes(\\n            address(msg.sender)\\n        ); // cast this address to bytes\\n\\n        // not using the extra gas parameter because this is a single tx call, not split between different chains\\n        // LZEndpointMock(lzEndpoint).receivePayload(mockChainId, bytesSourceUserApplicationAddr, destAddr, nonce, extraGas, _payload);\\n        LZEndpointMock(lzEndpoint).receivePayload(\\n            mockChainId,\\n            bytesSourceUserApplicationAddr,\\n            destAddr,\\n            nonce,\\n            0,\\n            _payload\\n        );\\n    }\\n\\n    function receivePayload(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        address _dstAddress,\\n        uint64 _nonce,\\n        uint256, /*_gasLimit*/\\n        bytes calldata _payload\\n    ) external override {\\n        StoredPayload storage sp = storedPayload[_srcChainId][_srcAddress];\\n\\n        // assert and increment the nonce. no message shuffling\\n        require(\\n            _nonce == ++inboundNonce[_srcChainId][_srcAddress],\\n            \\\"LayerZero: wrong nonce\\\"\\n        );\\n\\n        // queue the following msgs inside of a stack to simulate a successful send on src, but not fully delivered on dst\\n        if (sp.payloadHash != bytes32(0)) {\\n            QueuedPayload[] storage msgs = msgsToDeliver[_srcChainId][\\n                _srcAddress\\n            ];\\n            QueuedPayload memory newMsg = QueuedPayload(\\n                _dstAddress,\\n                _nonce,\\n                _payload\\n            );\\n\\n            // warning, might run into gas issues trying to forward through a bunch of queued msgs\\n            // shift all the msgs over so we can treat this like a fifo via array.pop()\\n            if (msgs.length > 0) {\\n                // extend the array\\n                msgs.push(newMsg);\\n\\n                // shift all the indexes up for pop()\\n                for (uint256 i = 0; i < msgs.length - 1; i++) {\\n                    msgs[i + 1] = msgs[i];\\n                }\\n\\n                // put the newMsg at the bottom of the stack\\n                msgs[0] = newMsg;\\n            } else {\\n                msgs.push(newMsg);\\n            }\\n        } else if (nextMsgBLocked) {\\n            storedPayload[_srcChainId][_srcAddress] = StoredPayload(\\n                uint64(_payload.length),\\n                _dstAddress,\\n                keccak256(_payload)\\n            );\\n            emit PayloadStored(\\n                _srcChainId,\\n                _srcAddress,\\n                _dstAddress,\\n                _nonce,\\n                _payload,\\n                bytes(\\\"\\\")\\n            );\\n            // ensure the next msgs that go through are no longer blocked\\n            nextMsgBLocked = false;\\n        } else {\\n            // we ignore the gas limit because this call is made in one tx due to being \\\"same chain\\\"\\n            // ILayerZeroReceiver(_dstAddress).lzReceive{gas: _gasLimit}(_srcChainId, _srcAddress, _nonce, _payload); // invoke lzReceive\\n            ILayerZeroReceiver(_dstAddress).lzReceive(\\n                _srcChainId,\\n                _srcAddress,\\n                _nonce,\\n                _payload\\n            ); // invoke lzReceive\\n        }\\n    }\\n\\n    // used to simulate messages received get stored as a payload\\n    function blockNextMsg() external {\\n        nextMsgBLocked = true;\\n    }\\n\\n    function getLengthOfQueue(uint16 _srcChainId, bytes calldata _srcAddress)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return msgsToDeliver[_srcChainId][_srcAddress].length;\\n    }\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _userApplication - the user app address on this EVM chain\\n    // @param _payload - the custom message to send over LayerZero\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\n    function estimateFees(\\n        uint16,\\n        address,\\n        bytes memory _payload,\\n        bool,\\n        bytes memory\\n    ) external view override returns (uint256 _nativeFee, uint256 _zroFee) {\\n        _nativeFee = nativeFee * _payload.length;\\n        _zroFee = zroFee;\\n    }\\n\\n    // give 20 bytes, return the decoded address\\n    function packedBytesToAddr(bytes calldata _b)\\n        public\\n        pure\\n        returns (address)\\n    {\\n        address addr;\\n        assembly {\\n            let ptr := mload(0x40)\\n            calldatacopy(ptr, sub(_b.offset, 2), add(_b.length, 2))\\n            addr := mload(sub(ptr, 10))\\n        }\\n        return addr;\\n    }\\n\\n    // given an address, return the 20 bytes\\n    function addrToPackedBytes(address _a) public pure returns (bytes memory) {\\n        bytes memory data = abi.encodePacked(_a);\\n        return data;\\n    }\\n\\n    function setConfig(\\n        uint16, /*_version*/\\n        uint16, /*_chainId*/\\n        uint256, /*_configType*/\\n        bytes memory /*_config*/\\n    ) external override {}\\n\\n    function getConfig(\\n        uint16, /*_version*/\\n        uint16, /*_chainId*/\\n        address, /*_ua*/\\n        uint256 /*_configType*/\\n    ) external pure override returns (bytes memory) {\\n        return \\\"\\\";\\n    }\\n\\n    function setSendVersion(\\n        uint16 /*version*/\\n    ) external override {}\\n\\n    function setReceiveVersion(\\n        uint16 /*version*/\\n    ) external override {}\\n\\n    function getSendVersion(\\n        address /*_userApplication*/\\n    ) external pure override returns (uint16) {\\n        return 1;\\n    }\\n\\n    function getReceiveVersion(\\n        address /*_userApplication*/\\n    ) external pure override returns (uint16) {\\n        return 1;\\n    }\\n\\n    function getInboundNonce(uint16 _chainID, bytes calldata _srcAddress)\\n        external\\n        view\\n        override\\n        returns (uint64)\\n    {\\n        return inboundNonce[_chainID][_srcAddress];\\n    }\\n\\n    function getOutboundNonce(uint16 _chainID, address _srcAddress)\\n        external\\n        view\\n        override\\n        returns (uint64)\\n    {\\n        return outboundNonce[_chainID][_srcAddress];\\n    }\\n\\n    // simulates the relayer pushing through the rest of the msgs that got delayed due to the stored payload\\n    function _clearMsgQue(uint16 _srcChainId, bytes calldata _srcAddress)\\n        internal\\n    {\\n        QueuedPayload[] storage msgs = msgsToDeliver[_srcChainId][_srcAddress];\\n\\n        // warning, might run into gas issues trying to forward through a bunch of queued msgs\\n        while (msgs.length > 0) {\\n            QueuedPayload memory payload = msgs[msgs.length - 1];\\n            ILayerZeroReceiver(payload.dstAddress).lzReceive(\\n                _srcChainId,\\n                _srcAddress,\\n                payload.nonce,\\n                payload.payload\\n            );\\n            msgs.pop();\\n        }\\n    }\\n\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress)\\n        external\\n        override\\n    {\\n        StoredPayload storage sp = storedPayload[_srcChainId][_srcAddress];\\n        // revert if no messages are cached. safeguard malicious UA behaviour\\n        require(sp.payloadHash != bytes32(0), \\\"LayerZero: no stored payload\\\");\\n        require(sp.dstAddress == msg.sender, \\\"LayerZero: invalid caller\\\");\\n\\n        // empty the storedPayload\\n        sp.payloadLength = 0;\\n        sp.dstAddress = address(0);\\n        sp.payloadHash = bytes32(0);\\n\\n        emit UaForceResumeReceive(_srcChainId, _srcAddress);\\n\\n        // resume the receiving of msgs after we force clear the \\\"stuck\\\" msg\\n        _clearMsgQue(_srcChainId, _srcAddress);\\n    }\\n\\n    function retryPayload(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        bytes calldata _payload\\n    ) external override {\\n        StoredPayload storage sp = storedPayload[_srcChainId][_srcAddress];\\n        require(sp.payloadHash != bytes32(0), \\\"LayerZero: no stored payload\\\");\\n        require(\\n            _payload.length == sp.payloadLength &&\\n                keccak256(_payload) == sp.payloadHash,\\n            \\\"LayerZero: invalid payload\\\"\\n        );\\n\\n        address dstAddress = sp.dstAddress;\\n        // empty the storedPayload\\n        sp.payloadLength = 0;\\n        sp.dstAddress = address(0);\\n        sp.payloadHash = bytes32(0);\\n\\n        uint64 nonce = inboundNonce[_srcChainId][_srcAddress];\\n\\n        ILayerZeroReceiver(dstAddress).lzReceive(\\n            _srcChainId,\\n            _srcAddress,\\n            nonce,\\n            _payload\\n        );\\n        emit PayloadCleared(_srcChainId, _srcAddress, nonce, dstAddress);\\n    }\\n\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        StoredPayload storage sp = storedPayload[_srcChainId][_srcAddress];\\n        return sp.payloadHash != bytes32(0);\\n    }\\n\\n    function isSendingPayload() external pure override returns (bool) {\\n        return false;\\n    }\\n\\n    function isReceivingPayload() external pure override returns (bool) {\\n        return false;\\n    }\\n\\n    function getSendLibraryAddress(address)\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        return address(this);\\n    }\\n\\n    function getReceiveLibraryAddress(address)\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        return address(this);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mocks/SocketRouterMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.14;\\n\\n/// NPM Imports\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// Types Imports\\nimport {UserRequest} from \\\"../types/socketTypes.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\n/// @title Socket Router Mock\\ncontract SocketRouterMock {\\n    function mockSocketTransfer(\\n        address from,\\n        address to,\\n        address token,\\n        uint256 amount\\n    ) external returns (bool) {\\n        IERC20(token).transferFrom(from, address(this), amount);\\n        IERC20(token).transfer(to, amount);\\n\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mocks/UnderlyingMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.14;\\n\\nimport {ERC20} from \\\"@rari-capital/solmate/src/tokens/ERC20.sol\\\";\\n\\ncontract UnderlyingMock is ERC20(\\\"MockToken\\\", \\\"MOCK\\\", 18) {\\n    function mint(uint256 amount) public {\\n        _mint(msg.sender, amount);\\n    }\\n\\n    function burn(uint256 amount) public {\\n        _burn(msg.sender, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mocks/VaultMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.14;\\n\\nimport {ERC4626} from \\\"@rari-capital/solmate/src/mixins/ERC4626.sol\\\";\\nimport {ERC20} from \\\"@rari-capital/solmate/src/tokens/ERC20.sol\\\";\\nimport {SafeTransferLib} from \\\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\\\";\\nimport {FixedPointMathLib} from \\\"@rari-capital/solmate/src/utils/FixedPointMathLib.sol\\\";\\n\\ncontract VaultMock is ERC4626 {\\n    using SafeTransferLib for ERC20;\\n    using FixedPointMathLib for uint256;\\n\\n    constructor(\\n        ERC20 asset,\\n        string memory name,\\n        string memory symbol\\n    ) ERC4626(asset, name, symbol) {}\\n\\n    function totalAssets() public view override returns (uint256) {\\n        /// @dev placeholder, we just use it for mock\\n        return asset.balanceOf(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/MultiTxProcessor.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: Apache-2.0\\n */\\npragma solidity ^0.8.14;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title MultiTxProcessor\\n * @author Zeropoint Labs.\\n *\\n * Intermediary contract to perform ChainB swaps while moving funds from ChainA to ChainB.\\n * @notice access controlled with previlages functions. Entirely to be processed by Zeropoint Labs Keepers.\\n */\\ncontract MultiTxProcessor is AccessControl {\\n    /* ================ Constants =================== */\\n    bytes32 public constant SWAPPER_ROLE = keccak256(\\\"SWAPPER_ROLE\\\");\\n\\n    /**\\n     * @notice bridge id is mapped to its execution address.\\n     * @dev maps all the bridges to their address.\\n     */\\n    mapping(uint8 => address) public bridgeAddress;\\n\\n    /* ================ Events =================== */\\n    event SetBridgeAddress(uint256 bridgeId, address bridgeAddress);\\n\\n    /* ================ Constructor =================== */\\n    /**\\n     * @dev caller would be assigned as the admin of the contract.\\n     */\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n    }\\n\\n    /* ================ External Functions =================== */\\n    /**\\n     * @notice receive enables processing native token transfers into the smart contract.\\n     * @dev socket.tech fails without a native receive function.\\n     */\\n    receive() external payable {}\\n\\n    /**\\n     * PREVILAGED admin ONLY FUNCTION.\\n     * @dev allows admin to set the bridge address for an bridge id.\\n     * @param _bridgeId         represents the bridge unqiue identifier.\\n     * @param _bridgeAddress    represents the bridge address.\\n     *\\n     * note: should be moved to registry post beta.\\n     */\\n    function setBridgeAddress(\\n        uint8[] memory _bridgeId,\\n        address[] memory _bridgeAddress\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        for (uint256 i = 0; i < _bridgeId.length; i++) {\\n            address x = _bridgeAddress[i];\\n            uint8 y = _bridgeId[i];\\n            require(x != address(0), \\\"Router: Zero Bridge Address\\\");\\n\\n            bridgeAddress[y] = x;\\n            emit SetBridgeAddress(y, x);\\n        }\\n    }\\n\\n    /**\\n     * PREVILAGED SWAPPER ONLY FUNCTION\\n     *\\n     * @dev would interact with socket contract to process multi-tx transactions and move the funds into destination contract.\\n     * @param bridgeId          represents the unique propreitory id of the bridge used.\\n     * @param txData            represents the transaction data generated by socket API.\\n     * @param approvalToken     represents the tokens to be swapped.\\n     * @param allowanceTarget   represents the socket registry contract.\\n     * @param amount            represents the amounts to be swapped.\\n     */\\n    function processTx(\\n        uint8 bridgeId,\\n        bytes memory txData,\\n        address approvalToken,\\n        address allowanceTarget,\\n        uint256 amount\\n    ) external onlyRole(SWAPPER_ROLE) {\\n        address to = bridgeAddress[bridgeId];\\n        if (allowanceTarget != address(0)) {\\n            IERC20(approvalToken).approve(allowanceTarget, amount);\\n            (bool success, ) = payable(to).call(txData);\\n            require(success, \\\"Socket Error: Invalid Tx data (1)\\\");\\n        } else {\\n            (bool success, ) = payable(to).call{value: amount}(txData);\\n            require(success, \\\"Socket Error: Invalid Tx Data (2)\\\");\\n        }\\n    }\\n\\n    /* ================ Development Only Functions =================== */\\n\\n    /**\\n     * PREVILAGED admin ONLY FUNCTION.\\n     * @notice should be removed after end-to-end testing.\\n     * @dev allows admin to withdraw lost tokens in the smart contract.\\n     */\\n    function withdrawToken(address _tokenContract, uint256 _amount)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        IERC20 tokenContract = IERC20(_tokenContract);\\n\\n        // transfer the token from address of this contract\\n        // to address of the user (executing the withdrawToken() function)\\n        tokenContract.transfer(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * PREVILAGED admin ONLY FUNCTION.\\n     * @dev allows admin to withdraw lost native tokens in the smart contract.\\n     */\\n    function withdrawNativeToken(uint256 _amount)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        payable(msg.sender).transfer(_amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/RouterPatch.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: Apache-2.0\\n */\\npragma solidity ^0.8.14;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\n\\nimport {IStateHandler} from \\\"./interface/layerzero/IStateHandler.sol\\\";\\nimport {IController} from \\\"./interface/ISource.sol\\\";\\nimport {IDestination} from \\\"./interface/IDestination.sol\\\";\\n\\nimport {StateReq, InitData, StateData, TransactionType, CallbackType} from \\\"./types/lzTypes.sol\\\";\\nimport {LiqRequest} from \\\"./types/socketTypes.sol\\\";\\n\\ncontract RouterPatch is ERC1155Holder {\\n    address public constant ROUTER_ADDRESS =\\n        0xfF3aFb7d847AeD8f2540f7b5042F693242e01ebD;\\n    address public constant STATE_ADDRESS =\\n        0x908da814cc9725616D410b2978E88fF2fb9482eE;\\n    address public constant DESTINATION_ADDRESS =\\n        0xc8884edE1ae44bDfF60da4B9c542C34A69648A87;\\n\\n    uint256 public totalTransactions;\\n    uint16 public chainId;\\n\\n    /* ================ Mapping =================== */\\n    mapping(uint256 => StateData) public txHistory;\\n\\n    /* ================ Events =================== */\\n    event Initiated(uint256 txId, address fromToken, uint256 fromAmount);\\n    event Completed(uint256 txId);\\n\\n    constructor(uint16 chainId_) {\\n        chainId = chainId_;\\n        totalTransactions = IController(ROUTER_ADDRESS).totalTransactions();\\n    }\\n\\n    receive() external payable {}\\n\\n    function withdraw(\\n        StateReq[] calldata _stateReq,\\n        LiqRequest[] calldata _liqReq\\n    ) external payable {\\n        address sender = msg.sender;\\n        uint256 l1 = _stateReq.length;\\n        uint256 l2 = _liqReq.length;\\n\\n        require(l1 == l2, \\\"Router: Invalid Input Length\\\");\\n        if (l1 > 1) {\\n            for (uint256 i = 0; i < l1; ++i) {\\n                singleWithdrawal(_stateReq[i], sender);\\n            }\\n        } else {\\n            singleWithdrawal(_stateReq[0], sender);\\n        }\\n\\n        // refunding any unused gas fees.\\n        payable(sender).transfer(address(this).balance);\\n    }\\n\\n    function singleWithdrawal(StateReq calldata _stateData, address sender)\\n        internal\\n    {\\n        uint16 dstChainId = _stateData.dstChainId;\\n        require(dstChainId != 0, \\\"Router: Invalid Destination Chain\\\");\\n\\n        /// burn is not exposed externally; TBD: whether to move them here and burn.\\n        IERC1155(ROUTER_ADDRESS).safeBatchTransferFrom(\\n            sender,\\n            address(this),\\n            _stateData.vaultIds,\\n            _stateData.amounts,\\n            \\\"0x\\\"\\n        );\\n\\n        totalTransactions++;\\n\\n        /// generating a dummy request - that will override user's inbound req\\n        LiqRequest memory data = LiqRequest(\\n            0,\\n            \\\"\\\",\\n            address(0),\\n            address(0),\\n            0,\\n            0\\n        );\\n\\n        InitData memory initData = InitData(\\n            chainId,\\n            _stateData.dstChainId,\\n            sender,\\n            _stateData.vaultIds,\\n            _stateData.amounts,\\n            _stateData.maxSlippage,\\n            totalTransactions,\\n            abi.encode(data)\\n        );\\n\\n        StateData memory info = StateData(\\n            TransactionType.WITHDRAW,\\n            CallbackType.INIT,\\n            abi.encode(initData)\\n        );\\n\\n        txHistory[totalTransactions] = info;\\n\\n        if (chainId == dstChainId) {\\n            /// @dev srcSuperDestination can only transfer tokens back to this SuperRouter\\n            /// @dev to allow bridging somewhere else requires arch change\\n            IDestination(DESTINATION_ADDRESS).directWithdraw(\\n                sender,\\n                _stateData.vaultIds,\\n                _stateData.amounts,\\n                data\\n            );\\n\\n            emit Completed(totalTransactions);\\n        } else {\\n            /// @dev _liqReq should have path encoded for withdraw to SuperRouter on chain different than chainId\\n            /// @dev construct txData in this fashion: from FTM SOURCE send message to BSC DESTINATION\\n            /// @dev so that BSC DISPATCHTOKENS sends tokens to AVAX receiver (EOA/contract/user-specified)\\n            /// @dev sync could be a problem, how long Socket path stays vaild vs. how fast we bridge/receive on Dst\\n            IStateHandler(STATE_ADDRESS).dispatchState{\\n                value: _stateData.msgValue\\n            }(dstChainId, abi.encode(info), _stateData.adapterParam);\\n        }\\n\\n        emit Initiated(totalTransactions, address(0), 0);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/socket/liquidityHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\npragma solidity ^0.8.14;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Liquidity Handler.\\n * @author Zeropoint Labs.\\n * @dev bridges tokens from Chain A -> Chain B\\n */\\nabstract contract LiquidityHandler {\\n    /* ================ Write Functions =================== */\\n\\n    /**\\n     * @dev dispatches tokens via the socket bridge.\\n     *\\n     * @param _txData           represents the api response data from socket api.\\n     * @param _to               represents the socket registry implementation address.\\n     * @param _allowanceTarget  represents the allowance target (zero address for native tokens)\\n     * @param _token            represents the ERC20 token to be transferred (zero address for native tokens)\\n     * @param _amount           represents the amount of tokens to be bridged.\\n     *\\n     * Note: refer https://docs.socket.tech/socket-api/v2/guides/socket-smart-contract-integration\\n     * Note: All the inputs are in array for processing multiple transactions.\\n     */\\n    function dispatchTokens(\\n        address _to,\\n        bytes memory _txData,\\n        address _token,\\n        address _allowanceTarget,\\n        uint256 _amount,\\n        address _owner,\\n        uint256 _nativeAmount\\n    ) internal virtual {\\n        /// @dev if allowance target is zero address represents non-native tokens.\\n        if (_allowanceTarget != address(0)) {\\n            if (_owner != address(this)) {\\n                require(\\n                    IERC20(_token).allowance(_owner, address(this)) >= _amount,\\n                    \\\"Bridge Error: Insufficient approvals\\\"\\n                );\\n                IERC20(_token).transferFrom(_owner, address(this), _amount);\\n            }\\n            IERC20(_token).approve(_allowanceTarget, _amount);\\n            unchecked {\\n                (bool success, ) = payable(_to).call{value: _nativeAmount}(\\n                    _txData\\n                );\\n                require(success, \\\"Bridge Error: Failed To Execute Tx Data (1)\\\");\\n            }\\n        } else {\\n            require(msg.value >= _amount, \\\"Liq Handler: Insufficient Amount\\\");\\n            unchecked {\\n                (bool success, ) = payable(_to).call{\\n                    value: _amount + _nativeAmount\\n                }(_txData);\\n                require(success, \\\"Bridge Error: Failed To Execute Tx Data (2)\\\");\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/splitter/IPositionsSplitter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.14;\\n\\ninterface IPositionsSplitter {\\n    function wrapFor(address user, uint256 amount) external;\\n\\n    function registerWrapper(\\n        uint256 vaultId,\\n        string memory name,\\n        string memory symbol\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/splitter/PositionsSplitter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.14;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\nimport {sERC20} from \\\"./sERC20.sol\\\";\\n\\n/// @title Positions Splitter | WIP / EXPERIMENTAL\\n/// @dev allows users to split all or individual vaultIds of SuperFormERC1155 into ERC20\\ncontract PositionsSplitter is AccessControl, IERC1155Receiver {\\n    IERC1155 public sERC1155;\\n    uint256 public syntheticTokenID;\\n\\n    event Wrapped(address user, uint256 id, uint256 amount);\\n    event WrappedBatch(address user, uint256[] ids, uint256[] amounts);\\n    event Unwrapped(address user, uint256 id, uint256 amount);\\n    event UnwrappedBatch(address user, uint256[] ids, uint256[] amounts);\\n\\n    /// @dev SuperRouter synthethic underlying ERC1155 vaultId => wrapped ERC20\\n    /// @dev vaultId => wrappedERC1155idERC20 xDDD\\n    mapping(uint256 => sERC20) public synthethicTokenId;\\n\\n    /// @dev Access Control should be re-thinked\\n    constructor(IERC1155 superFormLp) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        sERC1155 = superFormLp;\\n    }\\n\\n    /// @notice vaultId given here needs to be the same as vaultId on Source!\\n    /// @dev Make sure its set for existing vaultIds only\\n    /// @dev Ideally, this should be only called by SuperRouter\\n    /// @dev WARNING: vaultId cant be used for mapping, overwrite\\n    function registerWrapper(\\n        uint256 vaultId,\\n        string memory name,\\n        string memory symbol\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) returns (sERC20) {\\n        synthethicTokenId[vaultId] = new sERC20(name, symbol);\\n        /// @dev convienience for testing, prob no reason to return interface here\\n        return synthethicTokenId[vaultId];\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            MULTIPLE ID OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Use ERC1155 BatchTransfer to wrap multiple ERC1155 ids into separate ERC20\\n    /// Easier to wrap than to wrapBack because of ERC1155 beauty!\\n    function wrapBatch(uint256[] memory vaultIds, uint256[] memory amounts)\\n        external\\n    {\\n        require(\\n            sERC1155.isApprovedForAll(_msgSender(), address(this)),\\n            \\\"Error: Insufficient Approval\\\"\\n        );\\n\\n        /// @dev Use ERC1155 BatchTransfer to lower costs\\n        sERC1155.safeBatchTransferFrom(\\n            _msgSender(),\\n            address(this),\\n            vaultIds,\\n            amounts,\\n            \\\"\\\"\\n        );\\n\\n        // Note: Hook to SuperRouter, optional if we want to do something there\\n        // sERC1155.unwrap(_msgSender(), vaultIds, amounts);\\n\\n        for (uint256 i = 0; i < vaultIds.length; i++) {\\n            synthethicTokenId[vaultIds[i]].mint(_msgSender(), amounts[i]);\\n        }\\n\\n        emit WrappedBatch(_msgSender(), vaultIds, amounts);\\n    }\\n\\n    function wrapBatchFor(\\n        address user,\\n        uint256[] memory vaultIds,\\n        uint256[] memory amounts\\n    ) external {\\n        require(\\n            sERC1155.isApprovedForAll(user, address(this)),\\n            \\\"Error: Insufficient Approval\\\"\\n        );\\n\\n        /// @dev Use ERC1155 BatchTransfer to lower costs\\n        sERC1155.safeBatchTransferFrom(\\n            user,\\n            address(this),\\n            vaultIds,\\n            amounts,\\n            \\\"\\\"\\n        );\\n\\n        // Note: Hook to SuperRouter, optional if we want to do something there\\n        // sERC1155.unwrap(_msgSender(), vaultIds, amounts);\\n\\n        address owner = user;\\n        for (uint256 i = 0; i < vaultIds.length; i++) {\\n            synthethicTokenId[vaultIds[i]].mint(owner, amounts[i]);\\n        }\\n\\n        emit WrappedBatch(owner, vaultIds, amounts);\\n    }\\n\\n    /// @notice Why we are not supporting wrapBack to ERC1155 with multiple ERC20 at once?\\n    /// Note: Its actually problematic to do so, as ERC20 do not support batch ops (in contrary to ERC1155)\\n    /// First, it needs for loop, and within this for loop each check (allowance) needs to pass\\n    /// otherwise, we risk failing in the middle of transaction. Maybe just allow to wrapBack one-by-one?\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            SINGLE ID OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function wrap(uint256 vaultId, uint256 amount) external {\\n        require(\\n            sERC1155.isApprovedForAll(_msgSender(), address(this)),\\n            \\\"Error: Insufficient Approval\\\"\\n        );\\n\\n        /// @dev The only problem to solve is restrict burn on Source,\\n        /// but should be covered because now SharesSplitter owns tokenId1155\\n        /// Note: User needs to approve SharesSplitter first\\n        sERC1155.safeTransferFrom(\\n            _msgSender(),\\n            address(this),\\n            vaultId,\\n            amount,\\n            \\\"\\\"\\n        );\\n\\n        // Note: Hook to SuperRouter, optional if we want to do something there\\n        // sERC1155.unwrap(_msgSender(), vaultId, amount);\\n\\n        synthethicTokenId[vaultId].mint(_msgSender(), amount);\\n        emit Wrapped(_msgSender(), vaultId, amount);\\n    }\\n\\n    function wrapFor(\\n        uint256 vaultId,\\n        address user,\\n        uint256 amount\\n    ) external {\\n        require(\\n            sERC1155.isApprovedForAll(_msgSender(), address(this)),\\n            \\\"Error: Insufficient Approval\\\"\\n        );\\n        sERC1155.safeTransferFrom(\\n            user,\\n            address(this),\\n            syntheticTokenID,\\n            amount,\\n            \\\"\\\"\\n        );\\n\\n        synthethicTokenId[vaultId].mint(user, amount);\\n        emit Wrapped(user, vaultId, amount);\\n    }\\n\\n    /// @dev Callback to SuperRouter from here to re-mint ERC1155 on SuperRouter\\n    function unwrap(uint256 vaultId, uint256 amount) external {\\n        sERC20 token = synthethicTokenId[vaultId];\\n        require(\\n            token.allowance(_msgSender(), address(this)) >= amount,\\n            \\\"Error: Insufficient Approval\\\"\\n        );\\n\\n        /// @dev No need to transfer to contract, we can burn for msg.sender\\n        token.burn(_msgSender(), amount);\\n\\n        /// @dev Hack to help with contract size limit on Source\\n        uint256[] memory vaultIds = new uint256[](1);\\n        uint256[] memory amounts = new uint256[](1);\\n        vaultIds[0] = vaultId;\\n        amounts[0] = amount;\\n\\n        sERC1155.safeBatchTransferFrom(\\n            address(this),\\n            _msgSender(),\\n            vaultIds,\\n            amounts,\\n            bytes(\\\"\\\")\\n        );\\n\\n        emit Unwrapped(_msgSender(), vaultId, amount);\\n    }\\n\\n    function unwrapFor(\\n        uint256 vaultId,\\n        address user,\\n        uint256 amount\\n    ) external {\\n        sERC20 token = synthethicTokenId[vaultId];\\n        require(\\n            token.allowance(user, address(this)) >= amount,\\n            \\\"Error: Insufficient Approval\\\"\\n        );\\n\\n        /// @dev No need to transfer to contract, we can burn for msg.sender\\n        token.burn(user, amount);\\n\\n        /// @dev Hack to help with contract size limit on Source\\n        uint256[] memory vaultIds = new uint256[](1);\\n        uint256[] memory amounts = new uint256[](1);\\n        vaultIds[0] = vaultId;\\n        amounts[0] = amount;\\n\\n        /// @dev WIP. wrapBack accepts only arrays, we need to create one\\n        sERC1155.safeBatchTransferFrom(\\n            address(this),\\n            user,\\n            vaultIds,\\n            amounts,\\n            bytes(\\\"\\\")\\n        );\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            ERC1155 HOOKS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external pure override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external pure override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/splitter/RegisterVaultId.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.14;\\n\\nimport {IPositionsSplitter} from \\\"./IPositionsSplitter.sol\\\";\\n\\n/// @title Positions Splitter\\n/// @dev Implementation of managment logic inside of SuperRouter, causes it to go over contract size limit.\\n/// @dev Ops like registering external modules should be modularized themselves.\\nabstract contract RegisterVautlId {\\n    IPositionsSplitter public positionsSplitter;\\n\\n    function setSpliter(address impl) external {\\n        positionsSplitter = IPositionsSplitter(impl);\\n    }\\n\\n    function addWrapper(\\n        uint256 vaultId,\\n        string memory name,\\n        string memory symbol\\n    ) external {\\n        /// @dev We should release more control here. Read name and symbol directly from the Vault.\\n        positionsSplitter.registerWrapper(vaultId, name, symbol);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/splitter/sERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.14;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract sERC20 is ERC20, AccessControl {\\n    bytes32 public constant POSITIONS_SPLITTER_ROLE =\\n        keccak256(\\\"POSITIONS_SPLITTER_ROLE\\\");\\n\\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\\n        _setupRole(POSITIONS_SPLITTER_ROLE, msg.sender);\\n    }\\n\\n    /// @dev Functions could be open (at least burn) and just pass call to SuperRouter\\n    function mint(address owner, uint256 amount)\\n        external\\n        onlyRole(POSITIONS_SPLITTER_ROLE)\\n    {\\n        _mint(owner, amount);\\n    }\\n\\n    function burn(address owner, uint256 amount)\\n        external\\n        onlyRole(POSITIONS_SPLITTER_ROLE)\\n    {\\n        _burn(owner, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/SuperDestination.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: Apache-2.0\\n */\\npragma solidity ^0.8.14;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC4626} from \\\"./interface/IERC4626.sol\\\";\\n\\nimport {StateHandler} from \\\"./layerzero/stateHandler.sol\\\";\\nimport {LiquidityHandler} from \\\"./socket/liquidityHandler.sol\\\";\\n\\nimport {StateData, TransactionType, CallbackType, InitData, ReturnData} from \\\"./types/lzTypes.sol\\\";\\nimport {LiqRequest} from \\\"./types/socketTypes.sol\\\";\\nimport {IStateHandler} from \\\"./interface/layerzero/IStateHandler.sol\\\";\\n\\n/**\\n * @title Super Destination\\n * @author Zeropoint Labs.\\n *\\n * Deposits/Withdraw users funds from an input valid vault.\\n * extends Socket's Liquidity Handler.\\n * @notice access controlled is expected to be removed due to contract sizing.\\n */\\ncontract SuperDestination is AccessControl, LiquidityHandler {\\n    using SafeERC20 for IERC20;\\n\\n    /* ================ Constants =================== */\\n    bytes32 public constant ROUTER_ROLE = keccak256(\\\"ROUTER_ROLE\\\");\\n\\n    /* ================ State Variables =================== */\\n\\n    /**\\n     * @notice state variable are all declared public to avoid creating functions to expose.\\n     *\\n     * @dev stateHandler points to the state handler interface deployed in the respective chain.\\n     * @dev safeGasParam is used while sending layerzero message from destination to router.\\n     * @dev chainId represents the layerzero chain id of the specific chain.\\n     */\\n    IStateHandler public stateHandler;\\n    bytes public safeGasParam;\\n    uint16 public chainId;\\n\\n    /**\\n     * @dev bridge id is mapped to a bridge address (to prevent interaction with unauthorized bridges)\\n     * @dev maps state data to its unique id for record keeping.\\n     * @dev maps a vault id to its address.\\n     */\\n    mapping(uint8 => address) public bridgeAddress;\\n    mapping(uint256 => StateData) public dstState;\\n    mapping(uint256 => IERC4626) public vault;\\n    mapping(uint16 => address) public shareHandler;\\n\\n    /* ================ Events =================== */\\n\\n    event VaultAdded(uint256 id, IERC4626 vault);\\n    event TokenDistributorAdded(address routerAddress, uint16 chainId);\\n    event Processed(\\n        uint16 srcChainID,\\n        uint16 dstChainId,\\n        uint256 txId,\\n        uint256 amounts,\\n        uint256 vaultId\\n    );\\n    event SafeGasParamUpdated(bytes oldParam, bytes newParam);\\n    event SetBridgeAddress(uint256 bridgeId, address bridgeAddress);\\n\\n    /* ================ Constructor =================== */\\n    /**\\n     * @notice deploy stateHandler before SuperDestination\\n     *\\n     * @param chainId_              Layerzero chain id\\n     * @param stateHandler_         State handler address deployed\\n     *\\n     * @dev sets caller as the admin of the contract.\\n     */\\n    constructor(uint16 chainId_, IStateHandler stateHandler_) {\\n        chainId = chainId_;\\n        stateHandler = stateHandler_;\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n    }\\n\\n    /* ================ Write Functions =================== */\\n    receive() external payable {}\\n\\n    /**\\n     * @dev handles the state when received from the source chain.\\n     *\\n     * @param _payload     represents the payload id associated with the transaction.\\n     *\\n     * Note: called by external keepers when state is ready.\\n     */\\n    function stateSync(bytes memory _payload) external payable {\\n        require(\\n            msg.sender == address(stateHandler),\\n            \\\"Destination: request denied\\\"\\n        );\\n        StateData memory stateData = abi.decode(_payload, (StateData));\\n        InitData memory data = abi.decode(stateData.params, (InitData));\\n\\n        for (uint256 i = 0; i < data.vaultIds.length; i++) {\\n            if (stateData.txType == TransactionType.DEPOSIT) {\\n                if (\\n                    IERC20(vault[data.vaultIds[i]].asset()).balanceOf(\\n                        address(this)\\n                    ) >= data.amounts[i]\\n                ) {\\n                    processDeposit(data);\\n                } else {\\n                    revert(\\\"Destination: Bridge Tokens Pending\\\");\\n                }\\n            } else {\\n                processWithdrawal(data);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * PREVILAGED admin ONLY FUNCTION.\\n     * @dev Soon to be moved to a factory contract. (Post Wormhole Implementation)\\n     *\\n     * @param _vaultAddress     address of ERC4626 interface compilant Vault\\n     * @param _vaultId          represents the unique vault id added to a vault.\\n     *\\n     * Note The whitelisting of vault prevents depositing funds to malicious vaults.\\n     */\\n    function addVault(\\n        IERC4626[] memory _vaultAddress,\\n        uint256[] memory _vaultId\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(\\n            _vaultAddress.length == _vaultId.length,\\n            \\\"Destination: Invalid Length\\\"\\n        );\\n        for (uint256 i = 0; i < _vaultAddress.length; i++) {\\n            require(\\n                _vaultAddress[i] != IERC4626(address(0)),\\n                \\\"Destination: Zero Vault Address\\\"\\n            );\\n\\n            uint256 id = _vaultId[i];\\n            vault[id] = _vaultAddress[i];\\n\\n            uint256 currentAllowance = IERC20(_vaultAddress[i].asset())\\n                .allowance(address(this), address(_vaultAddress[i]));\\n            if (currentAllowance == 0) {\\n                ///@dev pre-approve, only one type of asset is needed anyway\\n                IERC20(_vaultAddress[i].asset()).safeApprove(\\n                    address(_vaultAddress[i]),\\n                    type(uint256).max\\n                );\\n            }\\n\\n            emit VaultAdded(id, _vaultAddress[i]);\\n        }\\n    }\\n\\n    /**\\n     * PREVILAGED admin ONLY FUNCTION.\\n     *\\n     * @dev whitelists the router contract of different chains.\\n     * @param _positionsHandler    represents the address of router contract.\\n     * @param _srcChainId       represents the chainId of the source contract.\\n     */\\n    function setSrcTokenDistributor(\\n        address _positionsHandler,\\n        uint16 _srcChainId\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(_positionsHandler != address(0), \\\"Destination: Zero Address\\\");\\n        require(_srcChainId != 0, \\\"Destination: Invalid Chain Id\\\");\\n\\n        shareHandler[_srcChainId] = _positionsHandler;\\n\\n        /// @dev because directDeposit/Withdraw is only happening from the sameChain, we can use this param\\n        _setupRole(ROUTER_ROLE, _positionsHandler);\\n        emit TokenDistributorAdded(_positionsHandler, _srcChainId);\\n    }\\n\\n    /**\\n     * PREVILAGED admin ONLY FUNCTION.\\n     *\\n     * @dev adds the gas overrides for layerzero.\\n     * @param _param    represents adapterParams V2.0 of layerzero\\n     */\\n    function updateSafeGasParam(bytes memory _param)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(_param.length != 0, \\\"Destination: Invalid Gas Override\\\");\\n        bytes memory oldParam = safeGasParam;\\n        safeGasParam = _param;\\n\\n        emit SafeGasParamUpdated(oldParam, _param);\\n    }\\n\\n    /**\\n     * PREVILAGED admin ONLY FUNCTION.\\n     * @dev allows admin to set the bridge address for an bridge id.\\n     * @param _bridgeId         represents the bridge unqiue identifier.\\n     * @param _bridgeAddress    represents the bridge address.\\n     */\\n    function setBridgeAddress(\\n        uint8[] memory _bridgeId,\\n        address[] memory _bridgeAddress\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        for (uint256 i = 0; i < _bridgeId.length; i++) {\\n            address x = _bridgeAddress[i];\\n            uint8 y = _bridgeId[i];\\n            require(x != address(0), \\\"Router: Zero Bridge Address\\\");\\n\\n            bridgeAddress[y] = x;\\n            emit SetBridgeAddress(y, x);\\n        }\\n    }\\n\\n    /**\\n     * PREVILAGED router ONLY FUNCTION.\\n     *\\n     * @dev process same chain id deposits\\n     * @param srcSender  represents address of the depositing user.\\n     * @param _vaultIds  array of vaultIds on the chain to make a deposit\\n     * @param _amounts   array of amounts to be deposited in each corresponding _vaultIds\\n     */\\n    function directDeposit(\\n        address srcSender,\\n        LiqRequest calldata liqData,\\n        uint256[] memory _vaultIds,\\n        uint256[] memory _amounts\\n    )\\n        external\\n        payable\\n        onlyRole(ROUTER_ROLE)\\n        returns (uint256[] memory dstAmounts)\\n    {\\n        uint256 loopLength = _vaultIds.length;\\n        uint256 expAmount = addValues(_amounts);\\n\\n        /// note: checking balance\\n        address collateral = IERC4626(vault[_vaultIds[0]]).asset();\\n        uint256 balanceBefore = IERC20(collateral).balanceOf(address(this));\\n\\n        /// note: handle the collateral token transfers.\\n        if (liqData.txData.length == 0) {\\n            require(\\n                IERC20(liqData.token).allowance(srcSender, address(this)) >=\\n                    liqData.amount,\\n                \\\"Destination: Insufficient Allowance\\\"\\n            );\\n            IERC20(liqData.token).safeTransferFrom(\\n                srcSender,\\n                address(this),\\n                liqData.amount\\n            );\\n        } else {\\n            dispatchTokens(\\n                bridgeAddress[liqData.bridgeId],\\n                liqData.txData,\\n                liqData.token,\\n                liqData.allowanceTarget,\\n                liqData.amount,\\n                srcSender,\\n                liqData.nativeAmount\\n            );\\n        }\\n\\n        uint256 balanceAfter = IERC20(collateral).balanceOf(address(this));\\n        require(\\n            balanceAfter - balanceBefore >= expAmount,\\n            \\\"Destination: Invalid State & Liq Data\\\"\\n        );\\n\\n        dstAmounts = new uint256[](loopLength);\\n\\n        for (uint256 i = 0; i < loopLength; i++) {\\n            IERC4626 v = vault[_vaultIds[i]];\\n            require(\\n                v.asset() == address(collateral),\\n                \\\"Destination: Invalid Collateral\\\"\\n            );\\n            dstAmounts[i] = v.deposit(_amounts[i], address(this));\\n        }\\n    }\\n\\n    /**\\n     * PREVILAGED router ONLY FUNCTION.\\n     *\\n     * @dev process withdrawal of collateral from a vault\\n     * @param _user     represents address of the depositing user.\\n     * @param _vaultIds  array of vaultIds on the chain to make a deposit\\n     * @param _amounts  array of amounts to be deposited in each corresponding _vaultIds\\n     */\\n    function directWithdraw(\\n        address _user,\\n        uint256[] memory _vaultIds,\\n        uint256[] memory _amounts,\\n        LiqRequest memory _liqData\\n    )\\n        external\\n        payable\\n        onlyRole(ROUTER_ROLE)\\n        returns (uint256[] memory dstAmounts)\\n    {\\n        uint256 len1 = _liqData.txData.length;\\n        address receiver = len1 == 0 ? address(_user) : address(this);\\n        dstAmounts = new uint256[](_vaultIds.length);\\n\\n        address collateral = IERC4626(vault[_vaultIds[0]]).asset();\\n\\n        for (uint256 i = 0; i < _vaultIds.length; i++) {\\n            IERC4626 v = vault[_vaultIds[i]];\\n            require(\\n                v.asset() == address(collateral),\\n                \\\"Destination: Invalid Collateral\\\"\\n            );\\n            dstAmounts[i] = v.redeem(_amounts[i], receiver, address(this));\\n        }\\n\\n        if (len1 != 0) {\\n            require(\\n                _liqData.amount <= addValues(dstAmounts),\\n                \\\"Destination: Invalid Liq Request\\\"\\n            );\\n\\n            dispatchTokens(\\n                bridgeAddress[_liqData.bridgeId],\\n                _liqData.txData,\\n                _liqData.token,\\n                _liqData.allowanceTarget,\\n                _liqData.amount,\\n                address(this),\\n                _liqData.nativeAmount\\n            );\\n        }\\n    }\\n\\n    /* ================ Development Only Functions =================== */\\n\\n    /**\\n     * PREVILAGED admin ONLY FUNCTION.\\n     * @notice should be removed after end-to-end testing.\\n     * @dev allows admin to withdraw lost tokens in the smart contract.\\n     */\\n    function withdrawToken(address _tokenContract, uint256 _amount)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        IERC20 tokenContract = IERC20(_tokenContract);\\n\\n        // transfer the token from address of this contract\\n        // to address of the user (executing the withdrawToken() function)\\n        tokenContract.safeTransfer(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * PREVILAGED admin ONLY FUNCTION.\\n     * @dev allows admin to withdraw lost native tokens in the smart contract.\\n     */\\n    function withdrawNativeToken(uint256 _amount)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        payable(msg.sender).transfer(_amount);\\n    }\\n\\n    /* ================ ERC4626 View Functions =================== */\\n\\n    /**\\n     * @dev SuperDestination may need to know state of funds deployed to 3rd party Vaults\\n     * @dev API may need to know state of funds deployed\\n     */\\n    function previewDepositTo(uint256 vaultId, uint256 assets)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return vault[vaultId].convertToShares(assets);\\n    }\\n\\n    /**\\n     * @notice positionBalance() -> .vaultIds&destAmounts\\n     * @return how much of an asset + interest (accrued) is to withdraw from the Vault\\n     */\\n    function previewWithdrawFrom(uint256 vaultId, uint256 assets)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return vault[vaultId].previewWithdraw(assets);\\n    }\\n\\n    /**\\n     * @notice Returns data for single deposit into this vault from SuperRouter (maps user to its balance accross vaults)\\n     */\\n    function positionBalance(uint256 positionId)\\n        public\\n        view\\n        returns (uint256[] memory vaultIds, uint256[] memory destAmounts)\\n    {\\n        InitData memory initData = abi.decode(\\n            dstState[positionId].params,\\n            (InitData)\\n        );\\n\\n        return (\\n            initData.vaultIds,\\n            initData.amounts /// @dev amount of tokens bridged from source (input to vault.deposit())\\n        );\\n    }\\n\\n    /* ================ Internal Functions =================== */\\n\\n    /**\\n     * @dev process valid deposit data and deposit collateral.\\n     * @dev What if vault.asset() isn't the same as bridged token?\\n     * @param data     represents state data from router of another chain\\n     */\\n    function processDeposit(InitData memory data) internal {\\n        /// @dev Ordering dependency vaultIds need to match dstAmounts (shadow matched to user)\\n        uint256[] memory dstAmounts = new uint256[](data.vaultIds.length);\\n        for (uint256 i = 0; i < data.vaultIds.length; i++) {\\n            IERC4626 v = vault[data.vaultIds[i]];\\n\\n            dstAmounts[i] = v.deposit(data.amounts[i], address(this));\\n            /// @notice dstAmounts is equal to POSITIONS returned by v(ault)'s deposit while data.amounts is equal to ASSETS (tokens) bridged\\n            emit Processed(\\n                data.srcChainId,\\n                data.dstChainId,\\n                data.txId,\\n                data.amounts[i],\\n                data.vaultIds[i]\\n            );\\n        }\\n        /// Note Step-4: Send Data to Source to issue superform positions.\\n        stateHandler.dispatchState{value: msg.value}(\\n            data.srcChainId,\\n            abi.encode(\\n                StateData(\\n                    TransactionType.DEPOSIT,\\n                    CallbackType.RETURN,\\n                    abi.encode(\\n                        ReturnData(\\n                            true,\\n                            data.srcChainId,\\n                            chainId,\\n                            data.txId,\\n                            dstAmounts\\n                        )\\n                    )\\n                )\\n            ),\\n            safeGasParam\\n        );\\n    }\\n\\n    /**\\n     * @dev process valid withdrawal data and remove collateral.\\n     * @param data     represents state data from router of another chain\\n     */\\n    function processWithdrawal(InitData memory data) internal {\\n        uint256[] memory dstAmounts = new uint256[](data.vaultIds.length);\\n        LiqRequest memory _liqData = abi.decode(data.liqData, (LiqRequest));\\n\\n        for (uint256 i = 0; i < data.vaultIds.length; i++) {\\n            if (_liqData.txData.length != 0) {\\n                IERC4626 v = vault[data.vaultIds[i]];\\n                /// Note Redeem Vault positions (we operate only on positions, not assets)\\n                dstAmounts[i] = v.redeem(\\n                    data.amounts[i],\\n                    address(this),\\n                    address(this)\\n                );\\n\\n                uint256 balanceBefore = IERC20(v.asset()).balanceOf(\\n                    address(this)\\n                );\\n                /// Note Send Tokens to Source Chain\\n                /// FEAT Note: We could also allow to pass additional chainId arg here\\n                /// FEAT Note: Requires multiple ILayerZeroEndpoints to be mapped\\n                dispatchTokens(\\n                    bridgeAddress[_liqData.bridgeId],\\n                    _liqData.txData,\\n                    _liqData.token,\\n                    _liqData.allowanceTarget,\\n                    dstAmounts[i],\\n                    address(this),\\n                    _liqData.nativeAmount\\n                );\\n                uint256 balanceAfter = IERC20(v.asset()).balanceOf(\\n                    address(this)\\n                );\\n\\n                /// note: balance validation to prevent draining contract.\\n                require(\\n                    balanceAfter >= balanceBefore - dstAmounts[i],\\n                    \\\"Destination: Invalid Liq Request\\\"\\n                );\\n            } else {\\n                IERC4626 v = vault[data.vaultIds[i]];\\n                /// Note Redeem Vault positions (we operate only on positions, not assets)\\n                dstAmounts[i] = v.redeem(\\n                    data.amounts[i],\\n                    address(data.user),\\n                    address(this)\\n                );\\n            }\\n\\n            emit Processed(\\n                data.srcChainId,\\n                data.dstChainId,\\n                data.txId,\\n                dstAmounts[i],\\n                data.vaultIds[i]\\n            );\\n        }\\n    }\\n\\n    function addValues(uint256[] memory amounts)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 total;\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            total += amounts[i];\\n        }\\n        return total;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/SuperRouter.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: Apache-2.0\\n */\\npragma solidity ^0.8.14;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport {LiqRequest} from \\\"./types/socketTypes.sol\\\";\\nimport {StateReq, StateData, TransactionType, ReturnData, CallbackType, InitData} from \\\"./types/lzTypes.sol\\\";\\n\\nimport {IStateHandler} from \\\"./interface/layerzero/IStateHandler.sol\\\";\\nimport {IDestination} from \\\"./interface/IDestination.sol\\\";\\n\\nimport \\\"./socket/liquidityHandler.sol\\\";\\n\\n/**\\n * @title Super Router\\n * @author Zeropoint Labs.\\n *\\n * Routes users funds and deposit information to a remote execution chain.\\n * extends ERC1155 and Socket's Liquidity Handler.\\n * @notice access controlled was removed due to contract sizing issues.\\n */\\ncontract SuperRouter is ERC1155, LiquidityHandler, Ownable {\\n    using SafeERC20 for IERC20;\\n    using Strings for string;\\n\\n    /* ================ State Variables =================== */\\n    string public name = \\\"SuperPositions\\\";\\n    string public symbol = \\\"SP\\\";\\n    string public dynamicURI = \\\"https://api.superform.xyz/superposition/\\\";\\n\\n    /**\\n     * @notice state = information about destination chain & vault id.\\n     * @notice  stateHandler accepts requests from whitelisted addresses.\\n     * @dev stateHandler integrates with interblockchain messaging protocols.\\n     */\\n    IStateHandler public stateHandler;\\n\\n    /**\\n     * @notice chainId represents layerzero's unique chain id for each chains.\\n     * @notice admin handles critical state updates.\\n     * @dev totalTransactions keeps track of overall routed transactions.\\n     */\\n    uint16 public chainId;\\n    uint256 public totalTransactions;\\n\\n    /**\\n     * @notice same chain deposits are processed in one atomic transaction flow.\\n     * @dev allows to store same chain destination contract addresses.\\n     */\\n    IDestination public immutable srcSuperDestination;\\n\\n    /**\\n     * @notice history of state sent across chains are used for debugging.\\n     * @dev maps all transaction data routed through the smart contract.\\n     */\\n    mapping(uint256 => StateData) public txHistory;\\n\\n    /**\\n     * @notice bridge id is mapped to its execution address.\\n     * @dev maps all the bridges to their address.\\n     */\\n    mapping(uint8 => address) public bridgeAddress;\\n\\n    /* ================ Events =================== */\\n\\n    event Initiated(uint256 txId, address fromToken, uint256 fromAmount);\\n    event Completed(uint256 txId);\\n\\n    event SetBridgeAddress(uint256 bridgeId, address bridgeAddress);\\n\\n    /* ================ Constructor =================== */\\n\\n    /**\\n     * @notice deploy stateHandler and SuperDestination before SuperRouter\\n     *\\n     * @param chainId_              Layerzero chain id\\n     * @param baseUri_              URL for external metadata of ERC1155 SuperPositions\\n     * @param stateHandler_         State handler address deployed\\n     * @param srcSuperDestination_  Destination address deployed on same chain\\n     */\\n    constructor(\\n        uint16 chainId_,\\n        string memory baseUri_,\\n        IStateHandler stateHandler_,\\n        IDestination srcSuperDestination_\\n    ) ERC1155(baseUri_) {\\n        srcSuperDestination = srcSuperDestination_;\\n        stateHandler = stateHandler_;\\n        chainId = chainId_;\\n    }\\n\\n    /* ================ External Functions =================== */\\n    /**\\n     * @notice receive enables processing native token transfers into the smart contract.\\n     * @dev socket.tech fails without a native receive function.\\n     */\\n    receive() external payable {}\\n\\n    /* ================ Write Functions =================== */\\n\\n    /**\\n     * @dev allows users to mint vault tokens and receive vault positions in return.\\n     *\\n     * @param _liqData      represents the data required to move tokens from user wallet to destination contract.\\n     * @param _stateData    represents the state information including destination vault ids and amounts to be deposited to such vaults.\\n     *\\n     * ENG NOTE: Just use single type not arr and delegate to SuperFormRouter?\\n     */\\n    function deposit(\\n        LiqRequest[] calldata _liqData,\\n        StateReq[] calldata _stateData\\n    ) external payable {\\n        address srcSender = _msgSender();\\n        uint256 l1 = _liqData.length;\\n        uint256 l2 = _stateData.length;\\n        require(l1 == l2, \\\"Router: Input Data Length Mismatch\\\"); ///@dev ENG NOTE: but we may want to split single token deposit to multiple vaults on dst! this block it\\n        if (l1 > 1) {\\n            for (uint256 i = 0; i < l1; ++i) {\\n                singleDeposit(_liqData[i], _stateData[i], srcSender);\\n            }\\n        } else {\\n            singleDeposit(_liqData[0], _stateData[0], srcSender);\\n        }\\n    }\\n\\n    /**\\n     * @dev burns users superpositions and dispatch a withdrawal request to the destination chain.\\n      \\n     * @param _stateReq       represents the state data required for withdrawal of funds from the vaults.\\n     * @param _liqReq         represents the bridge data for underlying to be moved from destination chain.\\n\\n     * @dev API NOTE: This function can be called by anybody\\n     * @dev ENG NOTE: Amounts is abstracted. 1:1 of positions on DESTINATION, but user can't query ie. previewWithdraw() cross-chain\\n     */\\n    function withdraw(\\n        StateReq[] calldata _stateReq,\\n        LiqRequest[] calldata _liqReq /// @dev Allow [] because user can request multiple tokens (as long as bridge has them - Needs check!)\\n    ) external payable {\\n        address sender = _msgSender();\\n        uint256 l1 = _stateReq.length;\\n        uint256 l2 = _liqReq.length;\\n\\n        require(l1 == l2, \\\"Router: Invalid Input Length\\\");\\n        if (l1 > 1) {\\n            for (uint256 i = 0; i < l1; ++i) {\\n                singleWithdrawal(_liqReq[i], _stateReq[i], sender);\\n            }\\n        } else {\\n            singleWithdrawal(_liqReq[0], _stateReq[0], sender);\\n        }\\n    }\\n\\n    /**\\n     * PREVILAGED admin ONLY FUNCTION.\\n     * @dev allows admin to set the bridge address for an bridge id.\\n     * @param _bridgeId         represents the bridge unqiue identifier.\\n     * @param _bridgeAddress    represents the bridge address.\\n     */\\n    function setBridgeAddress(\\n        uint8[] memory _bridgeId,\\n        address[] memory _bridgeAddress\\n    ) external onlyOwner {\\n        for (uint256 i = 0; i < _bridgeId.length; i++) {\\n            address x = _bridgeAddress[i];\\n            uint8 y = _bridgeId[i];\\n            require(x != address(0), \\\"Router: Zero Bridge Address\\\");\\n\\n            bridgeAddress[y] = x;\\n            emit SetBridgeAddress(y, x);\\n        }\\n    }\\n\\n    /* ================ Development Only Functions =================== */\\n\\n    /**\\n     * PREVILAGED admin ONLY FUNCTION.\\n     * @notice should be removed after end-to-end testing.\\n     * @dev allows admin to withdraw lost tokens in the smart contract.\\n     */\\n    function withdrawToken(address _tokenContract, uint256 _amount)\\n        external\\n        onlyOwner\\n    {\\n        IERC20 tokenContract = IERC20(_tokenContract);\\n\\n        // transfer the token from address of this contract\\n        // to address of the user (executing the withdrawToken() function)\\n        tokenContract.safeTransfer(owner(), _amount);\\n    }\\n\\n    /**\\n     * PREVILAGED admin ONLY FUNCTION.\\n     * @dev allows admin to withdraw lost native tokens in the smart contract.\\n     */\\n    function withdrawNativeToken(uint256 _amount) external onlyOwner {\\n        payable(owner()).transfer(_amount);\\n    }\\n\\n    /**\\n     * ANYONE CAN CALL THE FUNCTION.\\n     *\\n     * @dev processes state channel messages from destination chain post successful deposit to a vault.\\n     * @param _payload  represents internal transactionId associated with every deposit/withdrawal transaction.\\n     */\\n    function stateSync(bytes memory _payload) external payable {\\n        require(msg.sender == address(stateHandler), \\\"Router: Request Denied\\\");\\n\\n        StateData memory data = abi.decode(_payload, (StateData));\\n        require(data.flag == CallbackType.RETURN, \\\"Router: Invalid Payload\\\");\\n\\n        ReturnData memory returnData = abi.decode(data.params, (ReturnData));\\n\\n        StateData memory stored = txHistory[returnData.txId];\\n        InitData memory initData = abi.decode(stored.params, (InitData));\\n\\n        require(\\n            returnData.srcChainId == initData.srcChainId,\\n            \\\"Router: Source Chain Ids Mismatch\\\"\\n        );\\n        require(\\n            returnData.dstChainId == initData.dstChainId,\\n            \\\"Router: Dst Chain Ids Mismatch\\\"\\n        );\\n\\n        if (data.txType == TransactionType.DEPOSIT) {\\n            require(returnData.status, \\\"Router: Invalid Payload Status\\\");\\n            _mintBatch(\\n                initData.user,\\n                initData.vaultIds,\\n                returnData.amounts,\\n                \\\"\\\"\\n            );\\n        } else {\\n            require(!returnData.status, \\\"Router: Invalid Payload Status\\\");\\n            _mintBatch(\\n                initData.user,\\n                initData.vaultIds,\\n                returnData.amounts,\\n                \\\"\\\"\\n            );\\n        }\\n\\n        emit Completed(returnData.txId);\\n    }\\n\\n    /**\\n     * Function to support Metadata hosting in Opensea.\\n     */\\n    function tokenURI(uint256 id) public view returns (string memory) {\\n        return\\n            string(abi.encodePacked(dynamicURI, Strings.toString(id), \\\".json\\\"));\\n    }\\n\\n    /* ================ Internal Functions =================== */\\n\\n    /**\\n     * @notice validates input and call state handler & liquidity handler to move\\n     * tokens and state messages to the destination chain.\\n     */\\n    function singleDeposit(\\n        LiqRequest calldata _liqData,\\n        StateReq calldata _stateData,\\n        address srcSender\\n    ) internal {\\n        totalTransactions++;\\n        uint16 dstChainId = _stateData.dstChainId;\\n\\n        require(\\n            validateSlippage(_stateData.maxSlippage),\\n            \\\"Super Router: Invalid Slippage\\\"\\n        );\\n\\n        InitData memory initData = InitData(\\n            chainId,\\n            dstChainId,\\n            srcSender,\\n            _stateData.vaultIds,\\n            _stateData.amounts,\\n            _stateData.maxSlippage,\\n            totalTransactions,\\n            bytes(\\\"\\\")\\n        );\\n\\n        StateData memory info = StateData(\\n            TransactionType.DEPOSIT,\\n            CallbackType.INIT,\\n            abi.encode(initData)\\n        );\\n\\n        txHistory[totalTransactions] = info;\\n\\n        if (chainId == dstChainId) {\\n            dstDeposit(_liqData, _stateData, srcSender, totalTransactions);\\n        } else {\\n            dispatchTokens(\\n                bridgeAddress[_liqData.bridgeId],\\n                _liqData.txData,\\n                _liqData.token,\\n                _liqData.allowanceTarget,\\n                _liqData.amount,\\n                srcSender,\\n                _liqData.nativeAmount\\n            );\\n\\n            /// @dev LayerZero endpoint\\n            stateHandler.dispatchState{value: _stateData.msgValue}(\\n                dstChainId,\\n                abi.encode(info),\\n                _stateData.adapterParam\\n            );\\n        }\\n\\n        emit Initiated(totalTransactions, _liqData.token, _liqData.amount);\\n    }\\n\\n    /**\\n     * @notice validates input and initiates withdrawal process\\n     */\\n    function singleWithdrawal(\\n        LiqRequest calldata _liqData,\\n        StateReq calldata _stateData,\\n        address sender\\n    ) internal {\\n        uint16 dstChainId = _stateData.dstChainId;\\n\\n        require(dstChainId != 0, \\\"Router: Invalid Destination Chain\\\");\\n        _burnBatch(sender, _stateData.vaultIds, _stateData.amounts);\\n\\n        totalTransactions++;\\n\\n        InitData memory initData = InitData(\\n            chainId,\\n            _stateData.dstChainId,\\n            sender,\\n            _stateData.vaultIds,\\n            _stateData.amounts,\\n            _stateData.maxSlippage,\\n            totalTransactions,\\n            abi.encode(_liqData)\\n        );\\n\\n        StateData memory info = StateData(\\n            TransactionType.WITHDRAW,\\n            CallbackType.INIT,\\n            abi.encode(initData)\\n        );\\n\\n        txHistory[totalTransactions] = info;\\n\\n        LiqRequest memory data = _liqData;\\n\\n        if (chainId == dstChainId) {\\n            /// @dev srcSuperDestination can only transfer tokens back to this SuperRouter\\n            /// @dev to allow bridging somewhere else requires arch change\\n            srcSuperDestination.directWithdraw{value: msg.value}(\\n                sender,\\n                _stateData.vaultIds,\\n                _stateData.amounts,\\n                data\\n            );\\n\\n            emit Completed(totalTransactions);\\n        } else {\\n            /// @dev _liqReq should have path encoded for withdraw to SuperRouter on chain different than chainId\\n            /// @dev construct txData in this fashion: from FTM SOURCE send message to BSC DESTINATION\\n            /// @dev so that BSC DISPATCHTOKENS sends tokens to AVAX receiver (EOA/contract/user-specified)\\n            /// @dev sync could be a problem, how long Socket path stays vaild vs. how fast we bridge/receive on Dst\\n            stateHandler.dispatchState{value: _stateData.msgValue}(\\n                dstChainId,\\n                abi.encode(info),\\n                _stateData.adapterParam\\n            );\\n        }\\n\\n        emit Initiated(totalTransactions, _liqData.token, _liqData.amount);\\n    }\\n\\n    /**\\n     * @notice deposit() to vaults existing on the same chain as SuperRouter\\n     * @dev Optimistic transfer & call\\n     */\\n    function dstDeposit(\\n        LiqRequest calldata _liqData,\\n        StateReq calldata _stateData,\\n        address srcSender,\\n        uint256 txId\\n    ) internal {\\n        /// @dev deposits collateral to a given vault and mint vault positions.\\n        uint256[] memory dstAmounts = srcSuperDestination.directDeposit{\\n            value: msg.value\\n        }(srcSender, _liqData, _stateData.vaultIds, _stateData.amounts);\\n\\n        /// @dev TEST-CASE: _msgSender() to whom we mint. use passed `admin` arg?\\n        _mintBatch(srcSender, _stateData.vaultIds, dstAmounts, \\\"\\\");\\n        emit Completed(txId);\\n    }\\n\\n    /**\\n     * @dev validates slippage parameter;\\n     * slippages should always be within 0 - 100\\n     * decimal is handles in the form of 10s\\n     * for eg. 0.05 = 5\\n     *         100 = 10000\\n     */\\n    function validateSlippage(uint256[] calldata slippages)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        for (uint256 i = 0; i < slippages.length; i++) {\\n            if (slippages[i] < 0 || slippages[i] > 10000) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function addValues(uint256[] calldata amounts)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 total;\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            total += amounts[i];\\n        }\\n        return total;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/types/lzTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.14;\\n\\n/// @notice We should optimize those types more\\nenum TransactionType {\\n    DEPOSIT,\\n    WITHDRAW\\n}\\n\\nenum CallbackType {\\n    INIT,\\n    RETURN\\n}\\n\\nenum PayloadState {\\n    STORED,\\n    UPDATED,\\n    PROCESSED\\n}\\n\\nstruct StateReq {\\n    uint16 dstChainId;\\n    uint256[] amounts;\\n    uint256[] vaultIds;\\n    uint256[] maxSlippage;\\n    bytes adapterParam;\\n    uint256 msgValue;\\n}\\n\\n// [[\\\"106\\\", [\\\"8720\\\"], [\\\"4311413\\\"], [\\\"1000\\\"], \\\"0x000100000000000000000000000000000000000000000000000000000000004c4b40\\\", \\\"1548277010953360\\\"]]\\n// [[\\\"0\\\", \\\"0x\\\", \\\"0x0000000000000000000000000000000000000000\\\", \\\"0x0000000000000000000000000000000000000000\\\", \\\"0\\\", \\\"0\\\"]]\\n\\n// [\\\"0xbb906bc787fbc9207e254ff87be398f4e86ea39f\\\"][\\\"0xA36c9FEB786A79E60E5583622D1Fb42294003411\\\"] = true\\n// [{operator: \\\"0xA36c9FEB786A79E60E5583622D1Fb42294003411\\\"}]\\n\\n/// Created during deposit by contract from Liq+StateReqs\\n/// @dev using this for communication between src & dst transfers\\nstruct StateData {\\n    TransactionType txType;\\n    CallbackType flag;\\n    bytes params;\\n}\\n\\nstruct InitData {\\n    uint16 srcChainId;\\n    uint16 dstChainId;\\n    address user;\\n    uint256[] vaultIds;\\n    uint256[] amounts;\\n    uint256[] maxSlippage;\\n    uint256 txId;\\n    bytes liqData;\\n}\\n\\nstruct ReturnData {\\n    bool status;\\n    uint16 srcChainId;\\n    uint16 dstChainId;\\n    uint256 txId;\\n    uint256[] amounts;\\n}\\n\"\r\n    },\r\n    \"contracts/types/socketTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.14;\\n\\nstruct LiqRequest {\\n    uint8 bridgeId;\\n    bytes txData;\\n    address token;\\n    address allowanceTarget; /// @dev should check with socket.\\n    uint256 amount;\\n    uint256 nativeAmount;\\n}\\n\\nstruct BridgeRequest {\\n    uint256 id;\\n    uint256 optionalNativeAmount;\\n    address inputToken;\\n    bytes data;\\n}\\n\\nstruct MiddlewareRequest {\\n    uint256 id;\\n    uint256 optionalNativeAmount;\\n    address inputToken;\\n    bytes data;\\n}\\n\\nstruct UserRequest {\\n    address receiverAddress;\\n    uint256 toChainId;\\n    uint256 amount;\\n    MiddlewareRequest middlewareRequest;\\n    BridgeRequest bridgeRequest;\\n}\\n\\nstruct LiqStruct {\\n    address inputToken;\\n    address bridge;\\n    UserRequest socketInfo;\\n}\\n\"\r\n    },\r\n    \"contracts/vaults/AaveV2StrategyWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.14;\\n\\nimport {ERC20} from \\\"@rari-capital/solmate/src/tokens/ERC20.sol\\\";\\nimport {ERC4626} from \\\"@rari-capital/solmate/src/mixins/ERC4626.sol\\\";\\nimport {SafeTransferLib} from \\\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\\\";\\n\\nimport {IMultiFeeDistribution} from \\\"./utils/aave/IMultiFeeDistribution.sol\\\";\\nimport {ILendingPool} from \\\"./utils/aave/ILendingPool.sol\\\";\\nimport {DexSwap} from \\\"./utils/swapUtils.sol\\\";\\n\\n/// @title AaveV2StrategyWrapper - Custom implementation of yield-daddy wrappers with flexible reinvesting logic\\n/// Rationale: Forked protocols often implement custom functions and modules on top of forked code.\\n/// Example: Aave-forked protocol doesn't use AaveMining for rewards distribution but Curve's MultiFeeDistribution\\n/// Example Two: Staking systems. Very common in DeFi. Re-investing/Re-Staking rewards on the Vault level can be included in permissionless way.\\ncontract AaveV2StrategyWrapper is ERC4626 {\\n    address public immutable manager;\\n    address public immutable rewardToken;\\n    /// -----------------------------------------------------------------------\\n    /// Libraries usage\\n    /// -----------------------------------------------------------------------\\n\\n    using SafeTransferLib for ERC20;\\n\\n    /// -----------------------------------------------------------------------\\n    /// Constants\\n    /// -----------------------------------------------------------------------\\n\\n    uint256 internal constant ACTIVE_MASK =\\n        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFF;\\n    uint256 internal constant FROZEN_MASK =\\n        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFF;\\n\\n    /// -----------------------------------------------------------------------\\n    /// Immutable params\\n    /// -----------------------------------------------------------------------\\n\\n    /// @notice The Aave aToken contract (rebasing)\\n    ERC20 public immutable aToken;\\n\\n    /// @notice The Aave-fork liquidity mining contract (implementations can differ)\\n    IMultiFeeDistribution public immutable rewards;\\n\\n    /// @notice The Aave LendingPool contract\\n    ILendingPool public immutable lendingPool;\\n\\n    /// @notice Pointer to swapInfo\\n    swapInfo public SwapInfo;\\n\\n    /// Compact struct to make two swaps (on Uniswap v2)\\n    /// A => B (using pair1) then B => asset (of Wrapper) (using pair2)\\n    /// will work fine as long we only get 1 type of reward token\\n    struct swapInfo {\\n        address token;\\n        address pair1;\\n        address pair2;\\n    }\\n\\n    /// -----------------------------------------------------------------------\\n    /// Constructor\\n    /// -----------------------------------------------------------------------\\n\\n    constructor(\\n        ERC20 asset_,\\n        ERC20 aToken_,\\n        IMultiFeeDistribution rewards_, /// @dev Aave-forked protocols often offer alternative reward systems\\n        ILendingPool lendingPool_,\\n        address rewardToken_,\\n        address manager_\\n    ) ERC4626(asset_, _vaultName(asset_), _vaultSymbol(asset_)) {\\n        aToken = aToken_;\\n        rewards = rewards_;\\n        lendingPool = lendingPool_;\\n        rewardToken = rewardToken_;\\n        manager = manager_;\\n    }\\n\\n    /// -----------------------------------------------------------------------\\n    /// AAVE-Fork Rewards Module\\n    /// -----------------------------------------------------------------------\\n\\n    function setRoute(\\n        address token,\\n        address pair1,\\n        address pair2\\n    ) external {\\n        require(msg.sender == manager, \\\"onlyOwner\\\");\\n        SwapInfo = swapInfo(token, pair1, pair2);\\n        ERC20(rewardToken).approve(SwapInfo.pair1, type(uint256).max); /// max approves address\\n        ERC20(SwapInfo.token).approve(SwapInfo.pair2, type(uint256).max); /// max approves address\\n    }\\n\\n    /// @notice Claims liquidity providing rewards from AAVE-Fork and performs low-lvl swap with instant reinvesting\\n    /// MultiFeeDistribution on AAVE-Fork accrues AAVE-Fork token as reward for supplying liq\\n    /// Calling harvest() sells AAVE-Fork token through direct Pair swap for best control and lowest cost\\n    /// harvest() can be called by anybody. ideally this function should be adjusted per needs (e.g add fee for harvesting)\\n    function harvest() external {\\n        /// Example of different than AaveMining rewards implementation of top of Aave-fork\\n        /// https://github.com/curvefi/multi-rewards\\n        rewards.getReward();\\n        rewards.exit();\\n\\n        uint256 earned = ERC20(rewardToken).balanceOf(address(this));\\n\\n        /// If one swap needed (high liquidity pair) - set swapInfo.token0/token/pair2 to 0x\\n        if (SwapInfo.token == address(asset)) {\\n            DexSwap.swap(\\n                earned, /// REWARDS amount to swap\\n                rewardToken, // from REWARD-TOKEN\\n                address(asset), /// to target underlying of this Vault\\n                SwapInfo.pair1 /// pairToken (pool)\\n            );\\n            /// If two swaps needed\\n        } else {\\n            uint256 swapTokenAmount = DexSwap.swap(\\n                earned,\\n                rewardToken, // from AAVE-Fork\\n                SwapInfo.token, /// to intermediary token with high liquidity (no direct pools)\\n                SwapInfo.pair1 /// pairToken (pool)\\n            );\\n\\n            swapTokenAmount = DexSwap.swap(\\n                swapTokenAmount,\\n                SwapInfo.token, // from received token\\n                address(asset), /// to target underlying of this Vault\\n                SwapInfo.pair2 /// pairToken (pool)\\n            );\\n        }\\n\\n        /// reinvest() without minting (no asset.totalSupply() increase == profit)\\n        /// afterDeposit just makes totalAssets() aToken's balance growth (to be distributed back to share owners)\\n        afterDeposit(asset.balanceOf(address(this)), 0);\\n    }\\n\\n    /// -----------------------------------------------------------------------\\n    /// ERC4626 overrides\\n    /// We can't inherit directly from Yield-daddy because of rewardClaim lock\\n    /// -----------------------------------------------------------------------\\n\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) public virtual override returns (uint256 positions) {\\n        positions = previewWithdraw(assets); // No need to check for rounding error, previewWithdraw rounds up.\\n\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance[owner][msg.sender]; // Saves gas for limited approvals.\\n\\n            if (allowed != type(uint256).max)\\n                allowance[owner][msg.sender] = allowed - positions;\\n        }\\n\\n        beforeWithdraw(assets, positions);\\n\\n        _burn(owner, positions);\\n\\n        emit Withdraw(msg.sender, receiver, owner, assets, positions);\\n\\n        // withdraw assets directly from Aave\\n        lendingPool.withdraw(address(asset), assets, receiver);\\n    }\\n\\n    function redeem(\\n        uint256 positions,\\n        address receiver,\\n        address owner\\n    ) public virtual override returns (uint256 assets) {\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance[owner][msg.sender]; // Saves gas for limited approvals.\\n\\n            if (allowed != type(uint256).max)\\n                allowance[owner][msg.sender] = allowed - positions;\\n        }\\n\\n        // Check for rounding error since we round down in previewRedeem.\\n        require((assets = previewRedeem(positions)) != 0, \\\"ZERO_ASSETS\\\");\\n\\n        beforeWithdraw(assets, positions);\\n\\n        _burn(owner, positions);\\n\\n        emit Withdraw(msg.sender, receiver, owner, assets, positions);\\n\\n        // withdraw assets directly from Aave\\n        lendingPool.withdraw(address(asset), assets, receiver);\\n    }\\n\\n    function totalAssets() public view virtual override returns (uint256) {\\n        // aTokens use rebasing to accrue interest, so the total assets is just the aToken balance\\n        // it's called before every share/asset calculation so it should reflect real value\\n        return aToken.balanceOf(address(this));\\n    }\\n\\n    function afterDeposit(\\n        uint256 assets,\\n        uint256 /*positions*/\\n    ) internal virtual override {\\n        /// -----------------------------------------------------------------------\\n        /// Deposit assets into Aave\\n        /// -----------------------------------------------------------------------\\n\\n        // approve to lendingPool\\n        asset.safeApprove(address(lendingPool), assets);\\n\\n        // deposit into lendingPool\\n        lendingPool.deposit(address(asset), assets, address(this), 0);\\n    }\\n\\n    function maxDeposit(address)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        // check if pool is paused\\n        if (lendingPool.paused()) {\\n            return 0;\\n        }\\n\\n        // check if asset is paused\\n        uint256 configData = lendingPool\\n            .getReserveData(address(asset))\\n            .configuration\\n            .data;\\n        if (!(_getActive(configData) && !_getFrozen(configData))) {\\n            return 0;\\n        }\\n\\n        return type(uint256).max;\\n    }\\n\\n    function maxMint(address) public view virtual override returns (uint256) {\\n        // check if pool is paused\\n        if (lendingPool.paused()) {\\n            return 0;\\n        }\\n\\n        // check if asset is paused\\n        uint256 configData = lendingPool\\n            .getReserveData(address(asset))\\n            .configuration\\n            .data;\\n        if (!(_getActive(configData) && !_getFrozen(configData))) {\\n            return 0;\\n        }\\n\\n        return type(uint256).max;\\n    }\\n\\n    function maxWithdraw(address owner)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        // check if pool is paused\\n        if (lendingPool.paused()) {\\n            return 0;\\n        }\\n\\n        // check if asset is paused\\n        uint256 configData = lendingPool\\n            .getReserveData(address(asset))\\n            .configuration\\n            .data;\\n        if (!_getActive(configData)) {\\n            return 0;\\n        }\\n\\n        uint256 cash = asset.balanceOf(address(aToken));\\n        uint256 assetsBalance = convertToAssets(balanceOf[owner]);\\n        return cash < assetsBalance ? cash : assetsBalance;\\n    }\\n\\n    function maxRedeem(address owner)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        // check if pool is paused\\n        if (lendingPool.paused()) {\\n            return 0;\\n        }\\n\\n        // check if asset is paused\\n        uint256 configData = lendingPool\\n            .getReserveData(address(asset))\\n            .configuration\\n            .data;\\n        if (!_getActive(configData)) {\\n            return 0;\\n        }\\n\\n        uint256 cash = asset.balanceOf(address(aToken));\\n        uint256 cashInShares = convertToShares(cash);\\n        uint256 shareBalance = balanceOf[owner];\\n        return cashInShares < shareBalance ? cashInShares : shareBalance;\\n    }\\n\\n    /// -----------------------------------------------------------------------\\n    /// ERC20 metadata generation\\n    /// -----------------------------------------------------------------------\\n\\n    function _vaultName(ERC20 asset_)\\n        internal\\n        view\\n        virtual\\n        returns (string memory vaultName)\\n    {\\n        vaultName = string.concat(\\\"AaveStratERC4626 \\\", asset_.symbol());\\n    }\\n\\n    function _vaultSymbol(ERC20 asset_)\\n        internal\\n        view\\n        virtual\\n        returns (string memory vaultSymbol)\\n    {\\n        vaultSymbol = string.concat(\\\"aS-\\\", asset_.symbol());\\n    }\\n\\n    /// -----------------------------------------------------------------------\\n    /// Internal functions\\n    /// -----------------------------------------------------------------------\\n\\n    function _getActive(uint256 configData) internal pure returns (bool) {\\n        return configData & ~ACTIVE_MASK != 0;\\n    }\\n\\n    function _getFrozen(uint256 configData) internal pure returns (bool) {\\n        return configData & ~FROZEN_MASK != 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/vaults/CompoundV2StrategyWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.14;\\n\\nimport {ERC20} from \\\"@rari-capital/solmate/src/tokens/ERC20.sol\\\";\\nimport {ERC4626} from \\\"@rari-capital/solmate/src/mixins/ERC4626.sol\\\";\\nimport {SafeTransferLib} from \\\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\\\";\\nimport {FixedPointMathLib} from \\\"@rari-capital/solmate/src/utils/FixedPointMathLib.sol\\\";\\n\\nimport {ICERC20} from \\\"./utils/compound/ICERC20.sol\\\";\\n// import {LibCompound} from \\\"./utils/compound/LibCompound.sol\\\";\\nimport {IComptroller} from \\\"./utils/compound/IComptroller.sol\\\";\\n\\nimport {DexSwap} from \\\"./utils/swapUtils.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\n/// @title CompoundV2StrategyWrapper - Custom implementation of yield-daddy wrappers with flexible reinvesting logic\\n/// Rationale: Forked protocols often implement custom functions and modules on top of forked code.\\n/// Example: Staking systems. Very common in DeFi. Re-investing/Re-Staking rewards on the Vault level can be included in permissionless way.\\ncontract CompoundV2StrategyWrapper is ERC4626 {\\n    /// -----------------------------------------------------------------------\\n    /// Libraries usage\\n    /// -----------------------------------------------------------------------\\n\\n    // using LibCompound for ICERC20;\\n    using SafeTransferLib for ERC20;\\n    using FixedPointMathLib for uint256;\\n\\n    /// -----------------------------------------------------------------------\\n    /// Errors\\n    /// -----------------------------------------------------------------------\\n\\n    /// @notice Thrown when a call to Compound returned an error.\\n    /// @param errorCode The error code returned by Compound\\n    error CompoundERC4626__CompoundError(uint256 errorCode);\\n\\n    /// -----------------------------------------------------------------------\\n    /// Constants\\n    /// -----------------------------------------------------------------------\\n\\n    uint256 internal constant NO_ERROR = 0;\\n\\n    /// -----------------------------------------------------------------------\\n    /// Immutable params\\n    /// -----------------------------------------------------------------------\\n\\n    /// @notice Access Control for harvest() route\\n    address public immutable manager;\\n\\n    /// @notice The COMP-like token contract\\n    ERC20 public immutable reward;\\n\\n    /// @notice The Compound cToken contract\\n    ICERC20 public immutable cToken;\\n\\n    /// @notice The Compound comptroller contract\\n    IComptroller public immutable comptroller;\\n\\n    /// @notice Pointer to swapInfo\\n    swapInfo public SwapInfo;\\n\\n    /// Compact struct to make two swaps (PancakeSwap on BSC)\\n    /// A => B (using pair1) then B => asset (of Wrapper) (using pair2)\\n    struct swapInfo {\\n        address token;\\n        address pair1;\\n        address pair2;\\n    }\\n\\n    /// -----------------------------------------------------------------------\\n    /// Constructor\\n    /// -----------------------------------------------------------------------\\n\\n    constructor(\\n        ERC20 asset_, // underlying\\n        ERC20 reward_, // comp token or other\\n        ICERC20 cToken_, // compound concept of a share\\n        IComptroller comptroller_,\\n        address manager_\\n    ) ERC4626(asset_, _vaultName(asset_), _vaultSymbol(asset_)) {\\n        reward = reward_;\\n        cToken = cToken_;\\n        comptroller = comptroller_;\\n        manager = manager_;\\n    }\\n\\n    /// -----------------------------------------------------------------------\\n    /// Compound liquidity mining\\n    /// -----------------------------------------------------------------------\\n\\n    function setRoute(\\n        address token,\\n        address pair1,\\n        address pair2\\n    ) external {\\n        require(msg.sender == manager, \\\"onlyOwner\\\");\\n        SwapInfo = swapInfo(token, pair1, pair2);\\n        ERC20(reward).approve(SwapInfo.pair1, type(uint256).max); /// max approve\\n        ERC20(SwapInfo.token).approve(SwapInfo.pair2, type(uint256).max); /// max approve\\n    }\\n\\n    /// @notice Claims liquidity mining rewards from Compound and performs low-lvl swap with instant reinvesting\\n    /// Calling harvest() claims COMP-Fork token through direct Pair swap for best control and lowest cost\\n    /// harvest() can be called by anybody. ideally this function should be adjusted per needs (e.g add fee for harvesting)\\n    function harvest() external {\\n        ICERC20[] memory cTokens = new ICERC20[](1);\\n        cTokens[0] = cToken;\\n        comptroller.claimComp(address(this), cTokens);\\n        reward.safeTransfer(address(this), reward.balanceOf(address(this)));\\n\\n        uint256 earned = ERC20(reward).balanceOf(address(this));\\n        address rewardToken = address(reward);\\n\\n        /// If only one swap needed (high liquidity pair) - set swapInfo.token0/token/pair2 to 0x\\n        if (SwapInfo.token == address(asset)) {\\n            DexSwap.swap(\\n                earned, /// REWARDS amount to swap\\n                rewardToken, // from REWARD (because of liquidity)\\n                address(asset), /// to target underlying of this Vault ie USDC\\n                SwapInfo.pair1 /// pairToken (pool)\\n            );\\n            /// If two swaps needed\\n        } else {\\n            uint256 swapTokenAmount = DexSwap.swap(\\n                earned, /// REWARDS amount to swap\\n                rewardToken, /// fromToken REWARD\\n                SwapInfo.token, /// to intermediary token with high liquidity (no direct pools)\\n                SwapInfo.pair1 /// pairToken (pool)\\n            );\\n\\n            DexSwap.swap(\\n                swapTokenAmount,\\n                SwapInfo.token, // from received BUSD (because of liquidity)\\n                address(asset), /// to target underlying of this Vault ie USDC\\n                SwapInfo.pair2 /// pairToken (pool)\\n            );\\n        }\\n\\n        afterDeposit(asset.balanceOf(address(this)), 0);\\n    }\\n\\n    /// -----------------------------------------------------------------------\\n    /// ERC4626 overrides\\n    /// We can't inherit directly from Yield-daddy because of rewardClaim lock\\n    /// -----------------------------------------------------------------------\\n\\n    function totalAssets() public view virtual override returns (uint256) {\\n        return\\n            cToken.balanceOf(address(this)).mulWadDown(\\n                cToken.exchangeRateStored()\\n            );\\n    }\\n\\n    function beforeWithdraw(\\n        uint256 assets,\\n        uint256 /*positions*/\\n    ) internal virtual override {\\n        /// -----------------------------------------------------------------------\\n        /// Withdraw assets from Compound\\n        /// -----------------------------------------------------------------------\\n\\n        uint256 errorCode = cToken.redeemUnderlying(assets);\\n        if (errorCode != NO_ERROR) {\\n            revert CompoundERC4626__CompoundError(errorCode);\\n        }\\n    }\\n\\n    function afterDeposit(\\n        uint256 assets,\\n        uint256 /*shares*/\\n    ) internal virtual override {\\n        /// -----------------------------------------------------------------------\\n        /// Deposit assets into Compound\\n        /// -----------------------------------------------------------------------\\n\\n        // approve to cToken\\n        asset.safeApprove(address(cToken), assets);\\n\\n        // deposit into cToken\\n        uint256 errorCode = cToken.mint(assets);\\n        if (errorCode != NO_ERROR) {\\n            revert CompoundERC4626__CompoundError(errorCode);\\n        }\\n    }\\n\\n    function maxDeposit(address) public view override returns (uint256) {\\n        if (comptroller.mintGuardianPaused(cToken)) return 0;\\n        return type(uint256).max;\\n    }\\n\\n    function maxMint(address) public view override returns (uint256) {\\n        if (comptroller.mintGuardianPaused(cToken)) return 0;\\n        return type(uint256).max;\\n    }\\n\\n    function maxWithdraw(address owner) public view override returns (uint256) {\\n        uint256 cash = cToken.getCash();\\n        uint256 assetsBalance = convertToAssets(balanceOf[owner]);\\n        return cash < assetsBalance ? cash : assetsBalance;\\n    }\\n\\n    function maxRedeem(address owner) public view override returns (uint256) {\\n        uint256 cash = cToken.getCash();\\n        uint256 cashInShares = convertToShares(cash);\\n        uint256 shareBalance = balanceOf[owner];\\n        return cashInShares < shareBalance ? cashInShares : shareBalance;\\n    }\\n\\n    /// -----------------------------------------------------------------------\\n    /// ERC20 metadata generation\\n    /// -----------------------------------------------------------------------\\n\\n    function _vaultName(ERC20 asset_)\\n        internal\\n        view\\n        virtual\\n        returns (string memory vaultName)\\n    {\\n        vaultName = string.concat(\\\"CompStratERC4626- \\\", asset_.symbol());\\n    }\\n\\n    function _vaultSymbol(ERC20 asset_)\\n        internal\\n        view\\n        virtual\\n        returns (string memory vaultSymbol)\\n    {\\n        vaultSymbol = string.concat(\\\"cS-\\\", asset_.symbol());\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/vaults/utils/aave/IAaveMining.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.14;\\n\\ninterface IAaveMining {\\n    function claimRewards(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/vaults/utils/aave/ILendingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.14;\\n\\n// Aave lending pool interface\\n// Documentation: https://docs.aave.com/developers/the-core-protocol/lendingpool/ilendingpool\\n// refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\ninterface ILendingPool {\\n    struct ReserveConfigurationMap {\\n        //bit 0-15: LTV\\n        //bit 16-31: Liq. threshold\\n        //bit 32-47: Liq. bonus\\n        //bit 48-55: Decimals\\n        //bit 56: Reserve is active\\n        //bit 57: reserve is frozen\\n        //bit 58: borrowing is enabled\\n        //bit 59: stable rate borrowing enabled\\n        //bit 60-63: reserved\\n        //bit 64-79: reserve factor\\n        uint256 data;\\n    }\\n\\n    struct ReserveData {\\n        ReserveConfigurationMap configuration;\\n        //the liquidity index. Expressed in ray\\n        uint128 liquidityIndex;\\n        //variable borrow index. Expressed in ray\\n        uint128 variableBorrowIndex;\\n        //the current supply rate. Expressed in ray\\n        uint128 currentLiquidityRate;\\n        //the current variable borrow rate. Expressed in ray\\n        uint128 currentVariableBorrowRate;\\n        //the current stable borrow rate. Expressed in ray\\n        uint128 currentStableBorrowRate;\\n        uint40 lastUpdateTimestamp;\\n        //tokens addresses\\n        address aTokenAddress;\\n        address stableDebtTokenAddress;\\n        address variableDebtTokenAddress;\\n        //address of the interest rate strategy\\n        address interestRateStrategyAddress;\\n        //the id of the reserve. Represents the position in the list of the active reserves\\n        uint8 id;\\n    }\\n\\n    /**\\n     * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n     * @param asset The address of the underlying asset to deposit\\n     * @param amount The amount to be deposited\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     *\\n     */\\n    function deposit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n     * @param asset The address of the underlying asset to withdraw\\n     * @param amount The underlying amount to be withdrawn\\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n     * @param to Address that will receive the underlying, same as msg.sender if the user\\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n     *   different wallet\\n     * @return The final amount withdrawn\\n     *\\n     */\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Returns the state and configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The state of the reserve\\n     *\\n     */\\n    function getReserveData(address asset)\\n        external\\n        view\\n        returns (ReserveData memory);\\n\\n    function paused() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/vaults/utils/aave/IMultiFeeDistribution.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.14;\\n\\nimport \\\"./IAaveMining.sol\\\";\\n\\n/// @notice IMultiFeeDistribution - protocol dependent reward claiming systems interface\\n/// @dev Extend as you see fit. Keeps the functionality of original AAVE v2 protocol.\\ninterface IMultiFeeDistribution is IAaveMining {\\n    function getReward() external;\\n\\n    function exit() external;\\n}\\n\"\r\n    },\r\n    \"contracts/vaults/utils/compound/ICERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.14;\\n\\nimport {ERC20} from \\\"@rari-capital/solmate/src/tokens/ERC20.sol\\\";\\n\\nimport {IInterestRateModel} from \\\"./IInterestRateModel.sol\\\";\\n\\nabstract contract ICERC20 is ERC20 {\\n    function mint(uint256 underlyingAmount) external virtual returns (uint256);\\n\\n    function underlying() external view virtual returns (ERC20);\\n\\n    function getCash() external view virtual returns (uint256);\\n\\n    function totalBorrows() external view virtual returns (uint256);\\n\\n    function totalReserves() external view virtual returns (uint256);\\n\\n    function exchangeRateStored() external view virtual returns (uint256);\\n\\n    function accrualBlockNumber() external view virtual returns (uint256);\\n\\n    function redeemUnderlying(uint256 underlyingAmount)\\n        external\\n        virtual\\n        returns (uint256);\\n\\n    function balanceOfUnderlying(address) external virtual returns (uint256);\\n\\n    function reserveFactorMantissa() external view virtual returns (uint256);\\n\\n    function interestRateModel()\\n        external\\n        view\\n        virtual\\n        returns (IInterestRateModel);\\n\\n    function initialExchangeRateMantissa()\\n        external\\n        view\\n        virtual\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/vaults/utils/compound/IComptroller.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.14;\\n\\nimport {ICERC20} from \\\"./ICERC20.sol\\\";\\n\\ninterface IComptroller {\\n    function getCompAddress() external view returns (address);\\n\\n    function getAllMarkets() external view returns (ICERC20[] memory);\\n\\n    function allMarkets(uint256 index) external view returns (ICERC20);\\n\\n    function claimComp(address holder, ICERC20[] memory cTokens) external;\\n\\n    function mintGuardianPaused(ICERC20 cToken) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/vaults/utils/compound/IInterestRateModel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.14;\\n\\ninterface IInterestRateModel {\\n    function getBorrowRate(\\n        uint256,\\n        uint256,\\n        uint256\\n    ) external view returns (uint256);\\n\\n    function getSupplyRate(\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256\\n    ) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/vaults/utils/compound/LibCompound.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.14;\\n\\nimport {FixedPointMathLib} from \\\"@rari-capital/solmate/src/utils/FixedPointMathLib.sol\\\";\\n\\nimport {ICERC20} from \\\"./ICERC20.sol\\\";\\n\\n/// @notice Get up to date cToken data without mutating state.\\n/// @author Transmissions11 (https://github.com/transmissions11/libcompound)\\nlibrary LibCompound {\\n    using FixedPointMathLib for uint256;\\n\\n    function viewUnderlyingBalanceOf(ICERC20 cToken, address user)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return cToken.balanceOf(user).mulWadDown(viewExchangeRate(cToken));\\n    }\\n\\n    function viewExchangeRate(ICERC20 cToken) internal view returns (uint256) {\\n        uint256 accrualBlockNumberPrior = cToken.accrualBlockNumber();\\n\\n        if (accrualBlockNumberPrior == block.number) {\\n            return cToken.exchangeRateStored();\\n        }\\n\\n        uint256 totalCash = cToken.underlying().balanceOf(address(cToken));\\n        uint256 borrowsPrior = cToken.totalBorrows();\\n        uint256 reservesPrior = cToken.totalReserves();\\n\\n        uint256 borrowRateMantissa = cToken.interestRateModel().getBorrowRate(\\n            totalCash,\\n            borrowsPrior,\\n            reservesPrior\\n        );\\n\\n        require(borrowRateMantissa <= 0.0005e16, \\\"RATE_TOO_HIGH\\\"); // Same as borrowRateMaxMantissa in CTokenInterfaces.sol\\n\\n        uint256 interestAccumulated = borrowRateMantissa *\\n            block.number -\\n            accrualBlockNumberPrior.mulWadDown(borrowsPrior);\\n\\n        uint256 totalReserves = cToken.reserveFactorMantissa().mulWadDown(\\n            interestAccumulated\\n        ) + reservesPrior;\\n        uint256 totalBorrows = interestAccumulated + borrowsPrior;\\n        uint256 totalSupply = cToken.totalSupply();\\n\\n        return\\n            totalSupply == 0\\n                ? cToken.initialExchangeRateMantissa()\\n                : totalCash +\\n                    totalBorrows -\\n                    totalReserves.divWadDown(totalSupply);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/vaults/utils/swapUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.14;\\n\\nimport {SafeTransferLib} from \\\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\\\";\\nimport {ERC20} from \\\"@rari-capital/solmate/src/tokens/ERC20.sol\\\";\\n\\ninterface IPair {\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n}\\n\\nlibrary DexSwap {\\n    using SafeTransferLib for ERC20;\\n\\n    /**\\n     * @notice Swap directly through a Pair\\n     * @param amountIn input amount\\n     * @param fromToken address\\n     * @param toToken address\\n     * @param pairToken Pair used for swap\\n     * @return output amount\\n     */\\n    function swap(\\n        uint256 amountIn,\\n        address fromToken,\\n        address toToken,\\n        address pairToken\\n    ) internal returns (uint256) {\\n        IPair pair = IPair(pairToken);\\n        (address token0, ) = sortTokens(fromToken, toToken);\\n        (uint112 reserve0, uint112 reserve1, ) = pair.getReserves();\\n        if (token0 != fromToken) (reserve0, reserve1) = (reserve1, reserve0);\\n        uint256 amountOut1 = 0;\\n        uint256 amountOut2 = getAmountOut(amountIn, reserve0, reserve1);\\n        if (token0 != fromToken)\\n            (amountOut1, amountOut2) = (amountOut2, amountOut1);\\n        ERC20(fromToken).safeTransfer(address(pair), amountIn);\\n        pair.swap(amountOut1, amountOut2, address(this), new bytes(0));\\n        return amountOut2 > amountOut1 ? amountOut2 : amountOut1;\\n    }\\n\\n    /**\\n     * @notice Given an input amount of an asset and pair reserves, returns maximum output amount of the other asset\\n     * @dev Assumes swap fee is 0.30%\\n     * @param amountIn input asset\\n     * @param reserveIn size of input asset reserve\\n     * @param reserveOut size of output asset reserve\\n     * @return maximum output amount\\n     */\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256) {\\n        uint256 amountInWithFee = amountIn * 997;\\n        uint256 numerator = amountInWithFee * (reserveOut);\\n        uint256 denominator = (reserveIn * 1000) + (amountInWithFee);\\n        return numerator / (denominator);\\n    }\\n\\n    /**\\n     * @notice Given two tokens, it'll return the tokens in the right order for the tokens pair\\n     * @dev TokenA must be different from TokenB, and both shouldn't be address(0), no validations\\n     * @param tokenA address\\n     * @param tokenB address\\n     * @return sorted tokens\\n     */\\n    function sortTokens(address tokenA, address tokenB)\\n        internal\\n        pure\\n        returns (address, address)\\n    {\\n        return tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n    }\\n}\\n\"\r\n    },\r\n    \"hardhat/console.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"chainId_\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"txId\",\"type\":\"uint256\"}],\"name\":\"Completed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"txId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"}],\"name\":\"Initiated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DESTINATION_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROUTER_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STATE_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTransactions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"txHistory\",\"outputs\":[{\"internalType\":\"enum TransactionType\",\"name\":\"txType\",\"type\":\"uint8\"},{\"internalType\":\"enum CallbackType\",\"name\":\"flag\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"vaultIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maxSlippage\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"adapterParam\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"msgValue\",\"type\":\"uint256\"}],\"internalType\":\"struct StateReq[]\",\"name\":\"_stateReq\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"bridgeId\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"txData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowanceTarget\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nativeAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct LiqRequest[]\",\"name\":\"_liqReq\",\"type\":\"tuple[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "RouterPatch", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000066", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}