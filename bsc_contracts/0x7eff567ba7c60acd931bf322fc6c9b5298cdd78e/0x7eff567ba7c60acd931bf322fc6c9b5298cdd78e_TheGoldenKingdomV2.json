{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract TheGoldenKingdomV2 {\r\n    struct Tower {\r\n        uint256 crystals;\r\n        uint256 money;\r\n        uint256 money2;\r\n        uint256 yield;\r\n        uint256 timestamp;\r\n        uint256 hrs;\r\n        address ref;\r\n        uint256 refs;\r\n        uint256 refDeps;\r\n        uint8   treasury;\r\n        uint8[5] chefs;\r\n    }\r\n\r\n    mapping(address => Tower) public towers;\r\n\r\n    uint256 public totalChefs;\r\n    uint256 public totalTowers;\r\n    uint256 public totalInvested;\r\n    address public manager1;\r\n    address public manager2;\r\n    address public manager3;\r\n    address public manager4;\r\n\r\n    uint256 immutable public denominator = 10;\r\n    bool public init;\r\n\r\n    modifier initialized {\r\n      require(init, 'Not initialized');\r\n      _;\r\n    }\r\n\r\n    constructor(address manager1addr, address manager2addr, address manager3addr, address manager4addr) {\r\n       manager1 = manager1addr;\r\n       manager2 = manager2addr;\r\n       manager3 = manager3addr;\r\n       manager4 = manager4addr;\r\n    }\r\n\r\n    function initialize() external {\r\n      require(manager1 == msg.sender);\r\n      require(!init);\r\n      init = true;\r\n    }\r\n\r\n    function addCrystals(address ref) initialized external payable {\r\n        uint256 crystals = msg.value / 5e14; \r\n        require(crystals > 0, \"Zero crystals\");\r\n        address user = msg.sender;\r\n        totalInvested += msg.value;\r\n        if (towers[user].timestamp == 0) {\r\n            totalTowers++;\r\n            ref = towers[ref].timestamp == 0 ? address(0) : ref;\r\n            towers[ref].refs++;\r\n            towers[user].ref = ref;\r\n            towers[user].timestamp = block.timestamp;\r\n            towers[user].treasury = 0;\r\n        }\r\n        ref = towers[user].ref;\r\n    \r\n    if(ref != address(0) && ref != address(0x000000000000000000000000000000000000dEaD)){\r\n      towers[ref].crystals += (crystals * 8) / 100;\r\n      towers[ref].money += (crystals * 100 * 4) / 100;\r\n      towers[ref].refDeps += crystals;\r\n    }\r\n    \r\n        towers[user].crystals += crystals;\r\n        payable(manager1).transfer(((msg.value * 3) / 100));\r\n        payable(manager2).transfer(((msg.value * 2) / 100));\r\n        payable(manager3).transfer(((msg.value * 2) / 100));\r\n        payable(manager4).transfer(((msg.value * 3) / 100));\r\n    }\r\n\r\n    function withdrawMoney(uint256 gold) initialized external {\r\n        address user = msg.sender;\r\n        require(gold <= towers[user].money && gold > 0);\r\n        towers[user].money -= gold;\r\n        uint256 amount = gold * 5e12;\r\n        payable(user).transfer(address(this).balance < amount ? address(this).balance : amount);\r\n    }\r\n\r\n    function collectMoney() public {\r\n        address user = msg.sender;\r\n        syncTower(user);\r\n        towers[user].hrs = 0;\r\n        towers[user].money += towers[user].money2;\r\n        towers[user].money2 = 0;\r\n    }\r\n\r\n    function upgradeTower(uint256 towerId) external {\r\n        require(towerId < 5, \"Max 5 towers\");\r\n        address user = msg.sender;\r\n        syncTower(user);\r\n        towers[user].chefs[towerId]++;\r\n        totalChefs++;\r\n        uint256 chefs = towers[user].chefs[towerId];\r\n        towers[user].crystals -= getUpgradePrice(towerId, chefs) / denominator;\r\n        towers[user].yield += getYield(towerId, chefs);\r\n    }\r\n\r\n    function upgradeTreasury() external {\r\n      address user = msg.sender;\r\n      uint8 treasuryId = towers[user].treasury + 1;\r\n      syncTower(user);\r\n      require(treasuryId < 5, \"Max 5 treasury\");\r\n      (uint256 price,) = getTreasure(treasuryId);\r\n      towers[user].crystals -= price / denominator; \r\n      towers[user].treasury = treasuryId;\r\n    }\r\n\r\n     function sellTower() external {\r\n        collectMoney();\r\n        address user = msg.sender;\r\n        uint8[5] memory chefs = towers[user].chefs;\r\n        totalChefs -= chefs[0] + chefs[1] + chefs[2] + chefs[3] + chefs[4];\r\n        towers[user].money += towers[user].yield * 24 * 5;\r\n        towers[user].chefs = [0, 0, 0, 0, 0];\r\n        towers[user].yield = 0;\r\n        towers[user].treasury = 0;\r\n    }\r\n\r\nfunction getChefs(address addr) external view returns (uint8[5] memory) {\r\n        return towers[addr].chefs;\r\n    }\r\n\r\n    function syncTower(address user) internal {\r\n        require(towers[user].timestamp > 0, \"User is not registered\");\r\n        if (towers[user].yield > 0) {\r\n            (, uint256 treasury) = getTreasure(towers[user].treasury);\r\n            uint256 hrs = block.timestamp / 3600 - towers[user].timestamp / 3600;\r\n            if (hrs + towers[user].hrs > treasury) {\r\n                hrs = treasury - towers[user].hrs;\r\n            }\r\n            towers[user].money2 += hrs * towers[user].yield;\r\n            towers[user].hrs += hrs;\r\n        }\r\n        towers[user].timestamp = block.timestamp;\r\n    }\r\n\r\n    function getUpgradePrice(uint256 towerId, uint256 chefId) internal pure returns (uint256) {\r\n        if (chefId == 1) return [400, 4000, 12000, 24000, 40000][towerId];\r\n        if (chefId == 2) return [600, 6000, 18000, 36000, 60000][towerId];\r\n        if (chefId == 3) return [900, 9000, 27000, 54000, 90000][towerId];\r\n        if (chefId == 4) return [1360, 13500, 40500, 81000, 135000][towerId];\r\n        if (chefId == 5) return [2040, 20260, 60760, 121500, 202500][towerId];\r\n        if (chefId == 6) return [3060, 30400, 91140, 182260, 303760][towerId];\r\n        revert(\"Incorrect chefId\");\r\n    }\r\n\r\n    function getYield(uint256 towerId, uint256 chefId) internal pure returns (uint256) {\r\n        if (chefId == 1) return [5, 56, 179, 382, 678][towerId];\r\n        if (chefId == 2) return [8, 85, 272, 581, 1030][towerId];\r\n        if (chefId == 3) return [12, 128, 413, 882, 1564][towerId];\r\n        if (chefId == 4) return [18, 195, 628, 1340, 2379][towerId];\r\n        if (chefId == 5) return [28, 297, 954, 2035, 3620][towerId];\r\n        if (chefId == 6) return [42, 450, 1439, 3076, 5506][towerId];\r\n        revert(\"Incorrect chefId\");\r\n    }\r\n\r\n    function getTreasure(uint256 treasureId) internal pure returns (uint256, uint256) {\r\n      if(treasureId == 0) return (0, 24); // price | value\r\n      if(treasureId == 1) return (2000, 30);\r\n      if(treasureId == 2) return (2500, 36);\r\n      if(treasureId == 3) return (3000, 42);\r\n      if(treasureId == 4) return (4000, 48);\r\n      revert(\"Incorrect treasureId\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager1addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"manager2addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"manager3addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"manager4addr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"addCrystals\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectMoney\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"denominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getChefs\",\"outputs\":[{\"internalType\":\"uint8[5]\",\"name\":\"\",\"type\":\"uint8[5]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager4\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalChefs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTowers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"towers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"crystals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"money\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"money2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hrs\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"refs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refDeps\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"treasury\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"towerId\",\"type\":\"uint256\"}],\"name\":\"upgradeTower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gold\",\"type\":\"uint256\"}],\"name\":\"withdrawMoney\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TheGoldenKingdomV2", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000007ec5c8753ed76a517a5c48de14f489f334b33ed20000000000000000000000005beb545bdf3674f9dadd8e0e6938638b38a07b10000000000000000000000000af8d60c8680559cf215d5969abd430c11d749212000000000000000000000000f43b0c4253e79b4d39a8bec987f4f0d224036bb1", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4932548880f47faaa6289c1789de965b2a92923bc0386cf744b19554341d3a09"}