{"SourceCode": "pragma solidity 0.5.8;\r\n\r\n/**\r\n *\r\n * https://moonshots.farm\r\n * \r\n * Want to own the next 1000x SHIB/DOGE/HEX token? Farm a new/trending moonshot every other day, automagically!\r\n *\r\n */\r\n\r\n contract NutsVesting {\r\n    using SafeMath for uint256;\r\n\r\n    ERC20 constant nuts = ERC20(0x8893D5fA71389673C5c4b9b3cb4EE1ba71207556);\r\n    MoonshotGovernance constant governance = MoonshotGovernance(0x7cE91cEa92e6934ec2AAA577C94a13E27c8a4F21);\r\n    ERC20 bones;\r\n    \r\n    uint256 constant public VESTING_TIME = 60 days;\r\n\r\n    mapping(address => uint256) vestClaimTime;\r\n    mapping(address => uint256) vestEndTime;\r\n    mapping(address => uint256) public vestAmount;\r\n\r\n    address[] public pendingVests;\r\n    bool public whitelistMode = false;\r\n    address blobby = msg.sender;\r\n\r\n    function receiveApproval(address player, uint256 amount, address, bytes calldata) external {\r\n        require(msg.sender == address(nuts));\r\n        require(vestAmount[player] == 0 && amount > 0);\r\n        nuts.transferFrom(player, address(this), amount);\r\n        nuts.burn(amount);\r\n\r\n        vestAmount[player] = (amount * 90) / 100; // 10% upfront 90% vesting\r\n\r\n        if (whitelistMode) { // If NUTS gov changes (to new dev etc.) vesting old token will have to be whitelisted for existing holders only\r\n            pendingVests.push(player);\r\n        } else {\r\n            beginVestInternal(player);\r\n        }\r\n    }\r\n\r\n    function beginVest(address player) external {\r\n        require(msg.sender == blobby);\r\n        require(vestEndTime[player] == 0);\r\n        beginVestInternal(player);\r\n    }\r\n\r\n    function beginVestInternal(address player) internal {\r\n        bones.transfer(player, vestAmount[player] * 100 / 891); // 10% upfront (covering burn)\r\n\r\n        vestClaimTime[player] = now;\r\n        vestEndTime[player] = now + VESTING_TIME;           \r\n    }\r\n\r\n    function claimYield() public {\r\n        uint256 divs = (dividendsOf(msg.sender) * 101) / 100; // Migration covers 1% burn\r\n        if (divs > 0) {\r\n            bones.transfer(msg.sender, divs);\r\n            vestClaimTime[msg.sender] = now;\r\n        }\r\n    }\r\n    \r\n    function initiate(address bonesToken) external {\r\n        require(msg.sender == blobby);\r\n        require(address(bones) == address(0));\r\n        bones = ERC20(bonesToken);\r\n    }\r\n\r\n    function setWhitelistMode(bool isWhitelistMode) external {\r\n        require(msg.sender == blobby);\r\n        whitelistMode = isWhitelistMode; // If NUTS gov changes (to new dev etc.) vesting old token will have to be whitelisted for existing holders only\r\n    }\r\n\r\n    function burnExcessBones(uint256 amount) external {\r\n\t\trequire(msg.sender == blobby);\r\n        bones.burn(amount); // Any excess BONES \r\n    }\r\n\r\n    function pullBones() external {\r\n\t\trequire(msg.sender == blobby);\r\n\t\tgovernance.pullWeeklyRewards();\r\n\t}\r\n\r\n    function dividendsOf(address player) view public returns (uint256) {\r\n        uint256 unclaimed = now;\r\n        if (unclaimed > vestEndTime[player]) {\r\n            unclaimed = vestEndTime[player];\r\n        }\r\n        if (vestClaimTime[player] >= unclaimed) {\r\n            return 0;\r\n        }\r\n        uint256 elapsedTime = unclaimed - vestClaimTime[player];\r\n        return (vestAmount[player] * elapsedTime) / VESTING_TIME;\r\n    }\r\n }\r\n\r\n interface ERC20 {\r\n\tfunction totalSupply() external view returns (uint256);\r\n\tfunction balanceOf(address who) external view returns (uint256);\r\n\tfunction allowance(address owner, address spender) external view returns (uint256);\r\n\tfunction transfer(address to, uint256 value) external returns (bool);\r\n\tfunction approve(address spender, uint256 value) external returns (bool);\r\n\tfunction approveAndCall(address spender, uint tokens, bytes calldata data) external returns (bool success);\r\n\tfunction transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\tfunction burn(uint256 amount) external;\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface MoonshotGovernance {\r\n\tfunction pullWeeklyRewards() external;\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n\t/**\r\n\t* @dev Multiplies two numbers, throws on overflow.\r\n\t*/\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tuint256 c = a * b;\r\n\t\tassert(c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Integer division of two numbers, truncating the quotient.\r\n\t*/\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n\t*/\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Adds two numbers, throws on overflow.\r\n\t*/\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VESTING_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"vestAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingVests\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimYield\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"isWhitelistMode\",\"type\":\"bool\"}],\"name\":\"setWhitelistMode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnExcessBones\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistMode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bonesToken\",\"type\":\"address\"}],\"name\":\"initiate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pullBones\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"beginVest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NutsVesting", "CompilerVersion": "v0.5.8+commit.23d335f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://85ec63c0652e43b7d892eccd3820defa041e8102da9f46ede1c7c567db83019d"}