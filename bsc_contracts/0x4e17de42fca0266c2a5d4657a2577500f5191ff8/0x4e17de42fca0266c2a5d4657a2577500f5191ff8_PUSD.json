{"SourceCode": "/**\r\n     #YouOnlyLiveOnce\r\n     #YOLO V2\r\n\r\n     2% Tax on TxN:\r\n\r\n     0.5% resh,\r\n     0.5% liquidity incentives\r\n     1% auditory fee\r\n\r\n     Website: http://www.youonlyliveonce.finance\r\n     Telegram: https://t.me/BSC_Community\r\n\r\n   */\r\n\r\n  pragma solidity ^0.8.1;\r\n  // SPDX-License-Identifier: Unlicensed\r\n  interface IERC20 {\r\n\r\n      function totalSupply() external view returns (uint256);\r\n\r\n      /**\r\n       * @dev Returns the amount of tokens owned by `account`.\r\n       */\r\n      function balanceOf(address account) external view returns (uint256);\r\n\r\n      /**\r\n       * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n       *\r\n       * Returns a boolean value indicating whether the operation succeeded.\r\n       *\r\n       * Emits a {Transfer} event.\r\n       */\r\n      function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n      /**\r\n       * @dev Returns the remaining number of tokens that `spender` will be\r\n       * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n       * zero by default.\r\n       *\r\n       * This value changes when {approve} or {transferFrom} are called.\r\n       */\r\n      function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n      /**\r\n       * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n       *\r\n       * Returns a boolean value indicating whether the operation succeeded.\r\n       *\r\n       * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n       * that someone may use both the old and the new allowance by unfortunate\r\n       * transaction ordering. One possible solution to mitigate this race\r\n       * condition is to first reduce the spender's allowance to 0 and set the\r\n       * desired value afterwards:\r\n       * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n       *\r\n       * Emits an {Approval} event.\r\n       */\r\n      function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n      /**\r\n       * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n       * allowance mechanism. `amount` is then deducted from the caller's\r\n       * allowance.\r\n       *\r\n       * Returns a boolean value indicating whether the operation succeeded.\r\n       *\r\n       * Emits a {Transfer} event.\r\n       */\r\n      function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n      /**\r\n       * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n       * another (`to`).\r\n       *\r\n       * Note that `value` may be zero.\r\n       */\r\n      event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n      /**\r\n       * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n       * a call to {approve}. `value` is the new allowance.\r\n       */\r\n      event Approval(address indexed owner, address indexed spender, uint256 value);\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n   * checks.\r\n   *\r\n   * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n   * in bugs, because programmers usually assume that an overflow raises an\r\n   * error, which is the standard behavior in high level programming languages.\r\n   * `SafeMath` restores this intuition by reverting the transaction when an\r\n   * operation overflows.\r\n   *\r\n   * Using this library instead of the unchecked operations eliminates an entire\r\n   * class of bugs, so it's recommended to use it always.\r\n   */\r\n\r\n  library SafeMath {\r\n      /**\r\n       * @dev Returns the addition of two unsigned integers, reverting on\r\n       * overflow.\r\n       *\r\n       * Counterpart to Solidity's `+` operator.\r\n       *\r\n       * Requirements:\r\n       *\r\n       * - Addition cannot overflow.\r\n       */\r\n      function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n          uint256 c = a + b;\r\n          require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n          return c;\r\n      }\r\n\r\n      /**\r\n       * @dev Returns the subtraction of two unsigned integers, reverting on\r\n       * overflow (when the result is negative).\r\n       *\r\n       * Counterpart to Solidity's `-` operator.\r\n       *\r\n       * Requirements:\r\n       *\r\n       * - Subtraction cannot overflow.\r\n       */\r\n      function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n          return sub(a, b, \"SafeMath: subtraction overflow\");\r\n      }\r\n\r\n      /**\r\n       * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n       * overflow (when the result is negative).\r\n       *\r\n       * Counterpart to Solidity's `-` operator.\r\n       *\r\n       * Requirements:\r\n       *\r\n       * - Subtraction cannot overflow.\r\n       */\r\n      function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n          require(b <= a, errorMessage);\r\n          uint256 c = a - b;\r\n\r\n          return c;\r\n      }\r\n\r\n      /**\r\n       * @dev Returns the multiplication of two unsigned integers, reverting on\r\n       * overflow.\r\n       *\r\n       * Counterpart to Solidity's `*` operator.\r\n       *\r\n       * Requirements:\r\n       *\r\n       * - Multiplication cannot overflow.\r\n       */\r\n      function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n          // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n          // benefit is lost if 'b' is also tested.\r\n          // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n          if (a == 0) {\r\n              return 0;\r\n          }\r\n\r\n          uint256 c = a * b;\r\n          require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n          return c;\r\n      }\r\n\r\n      /**\r\n       * @dev Returns the integer division of two unsigned integers. Reverts on\r\n       * division by zero. The result is rounded towards zero.\r\n       *\r\n       * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n       * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n       * uses an invalid opcode to revert (consuming all remaining gas).\r\n       *\r\n       * Requirements:\r\n       *\r\n       * - The divisor cannot be zero.\r\n       */\r\n      function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n          return div(a, b, \"SafeMath: division by zero\");\r\n      }\r\n\r\n      /**\r\n       * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n       * division by zero. The result is rounded towards zero.\r\n       *\r\n       * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n       * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n       * uses an invalid opcode to revert (consuming all remaining gas).\r\n       *\r\n       * Requirements:\r\n       *\r\n       * - The divisor cannot be zero.\r\n       */\r\n      function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n          require(b > 0, errorMessage);\r\n          uint256 c = a / b;\r\n          // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n          return c;\r\n      }\r\n\r\n      /**\r\n       * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n       * Reverts when dividing by zero.\r\n       *\r\n       * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n       * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n       * invalid opcode to revert (consuming all remaining gas).\r\n       *\r\n       * Requirements:\r\n       *\r\n       * - The divisor cannot be zero.\r\n       */\r\n      function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n          return mod(a, b, \"SafeMath: modulo by zero\");\r\n      }\r\n\r\n      /**\r\n       * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n       * Reverts with custom message when dividing by zero.\r\n       *\r\n       * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n       * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n       * invalid opcode to revert (consuming all remaining gas).\r\n       *\r\n       * Requirements:\r\n       *\r\n       * - The divisor cannot be zero.\r\n       */\r\n      function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n          require(b != 0, errorMessage);\r\n          return a % b;\r\n      }\r\n  }\r\n\r\n  abstract contract Context {\r\n      function _msgSender() internal view virtual returns (address payable) {\r\n          return payable(msg.sender);\r\n      }\r\n\r\n      function _msgData() internal view virtual returns (bytes memory) {\r\n          this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n          return msg.data;\r\n      }\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Collection of functions related to the address type\r\n   */\r\n  library Address {\r\n      /**\r\n       * @dev Returns true if `account` is a contract.\r\n       *\r\n       * [IMPORTANT]\r\n       * ====\r\n       * It is unsafe to assume that an address for which this function returns\r\n       * false is an externally-owned account (EOA) and not a contract.\r\n       *\r\n       * Among others, `isContract` will return false for the following\r\n       * types of addresses:\r\n       *\r\n       *  - an externally-owned account\r\n       *  - a contract in construction\r\n       *  - an address where a contract will be created\r\n       *  - an address where a contract lived, but was destroyed\r\n       * ====\r\n       */\r\n      function isContract(address account) internal view returns (bool) {\r\n          // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n          // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n          // for accounts without code, i.e. `keccak256('')`\r\n          bytes32 codehash;\r\n          bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n          // solhint-disable-next-line no-inline-assembly\r\n          assembly { codehash := extcodehash(account) }\r\n          return (codehash != accountHash && codehash != 0x0);\r\n      }\r\n\r\n      /**\r\n       * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n       * `recipient`, forwarding all available gas and reverting on errors.\r\n       *\r\n       * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n       * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n       * imposed by `transfer`, making them unable to receive funds via\r\n       * `transfer`. {sendValue} removes this limitation.\r\n       *\r\n       * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n       *\r\n       * IMPORTANT: because control is transferred to `recipient`, care must be\r\n       * taken to not create reentrancy vulnerabilities. Consider using\r\n       * {ReentrancyGuard} or the\r\n       * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n       */\r\n      function sendValue(address payable recipient, uint256 amount) internal {\r\n\r\n          address payable self = payable(address(this));\r\n          require(self.balance >= amount, \"Address: insufficient balance\");\r\n\r\n          // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n          (bool success, ) = recipient.call{ value: amount }(\"\");\r\n          require(success, \"Address: unable to send value, recipient may have reverted\");\r\n      }\r\n\r\n      /**\r\n       * @dev Performs a Solidity function call using a low level `call`. A\r\n       * plain`call` is an unsafe replacement for a function call: use this\r\n       * function instead.\r\n       *\r\n       * If `target` reverts with a revert reason, it is bubbled up by this\r\n       * function (like regular Solidity function calls).\r\n       *\r\n       * Returns the raw returned data. To convert to the expected return value,\r\n       * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n       *\r\n       * Requirements:\r\n       *\r\n       * - `target` must be a contract.\r\n       * - calling `target` with `data` must not revert.\r\n       *\r\n       * _Available since v3.1._\r\n       */\r\n      function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n      }\r\n\r\n      /**\r\n       * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n       * `errorMessage` as a fallback revert reason when `target` reverts.\r\n       *\r\n       * _Available since v3.1._\r\n       */\r\n      function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n          return _functionCallWithValue(target, data, 0, errorMessage);\r\n      }\r\n\r\n      /**\r\n       * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n       * but also transferring `value` wei to `target`.\r\n       *\r\n       * Requirements:\r\n       *\r\n       * - the calling contract must have an ETH balance of at least `value`.\r\n       * - the called Solidity function must be `payable`.\r\n       *\r\n       * _Available since v3.1._\r\n       */\r\n      function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n          return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n      }\r\n\r\n      /**\r\n       * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n       * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n       *\r\n       * _Available since v3.1._\r\n       */\r\n      function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n          address payable self = payable(address(this));\r\n          require(self.balance >= value, \"Address: insufficient balance for call\");\r\n          return _functionCallWithValue(target, data, value, errorMessage);\r\n      }\r\n\r\n      function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n          require(isContract(target), \"Address: call to non-contract\");\r\n\r\n          // solhint-disable-next-line avoid-low-level-calls\r\n          (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n          if (success) {\r\n              return returndata;\r\n          } else {\r\n              // Look for revert reason and bubble it up if present\r\n              if (returndata.length > 0) {\r\n                  // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                  // solhint-disable-next-line no-inline-assembly\r\n                  assembly {\r\n                      let returndata_size := mload(returndata)\r\n                      revert(add(32, returndata), returndata_size)\r\n                  }\r\n              } else {\r\n                  revert(errorMessage);\r\n              }\r\n          }\r\n      }\r\n  }\r\n\r\n  /**\r\n   * @dev Contract module which provides a basic access control mechanism, where\r\n   * there is an account (an owner) that can be granted exclusive access to\r\n   * specific functions.\r\n   *\r\n   * By default, the owner account will be the one that deploys the contract. This\r\n   * can later be changed with {transferOwnership}.\r\n   *\r\n   * This module is used through inheritance. It will make available the modifier\r\n   * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n   * the owner.\r\n   */\r\n  abstract contract Ownable is Context {\r\n      address private _owner;\r\n      address private _previousOwner;\r\n      uint256 private _lockTime;\r\n\r\n      event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n      /**\r\n       * @dev Initializes the contract setting the deployer as the initial owner.\r\n       */\r\n      constructor() {\r\n          address msgSender = _msgSender();\r\n          _owner = msgSender;\r\n          emit OwnershipTransferred(address(0), msgSender);\r\n      }\r\n\r\n      /**\r\n       * @dev Returns the address of the current owner.\r\n       */\r\n      function owner() public view returns (address) {\r\n          return _owner;\r\n      }\r\n\r\n      /**\r\n       * @dev Throws if called by any account other than the owner.\r\n       */\r\n      modifier onlyOwner() {\r\n          require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n          _;\r\n      }\r\n\r\n       /**\r\n       * @dev Leaves the contract without owner. It will not be possible to call\r\n       * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n       *\r\n       * NOTE: Renouncing ownership will leave the contract without an owner,\r\n       * thereby removing any functionality that is only available to the owner.\r\n       */\r\n      function renounceOwnership() public virtual onlyOwner {\r\n          emit OwnershipTransferred(_owner, address(0));\r\n          _owner = address(0);\r\n      }\r\n\r\n      /**\r\n       * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n       * Can only be called by the current owner.\r\n       */\r\n      function transferOwnership(address newOwner) public virtual onlyOwner {\r\n          require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n          emit OwnershipTransferred(_owner, newOwner);\r\n          _owner = newOwner;\r\n      }\r\n\r\n      function geUnlockTime() public view returns (uint256) {\r\n          return _lockTime;\r\n      }\r\n\r\n      //Locks the contract for owner for the amount of time provided\r\n      function lock(uint256 time) public virtual onlyOwner {\r\n          _previousOwner = _owner;\r\n          _owner = address(0);\r\n          _lockTime = block.timestamp + time;\r\n          emit OwnershipTransferred(_owner, address(0));\r\n      }\r\n\r\n      //Unlocks the contract for owner when _lockTime is exceeds\r\n      function unlock() public virtual {\r\n          require(_previousOwner == msg.sender, \"You don't have permission to unlock\");\r\n          require(block.timestamp > _lockTime , \"Contract is locked until 7 days\");\r\n          emit OwnershipTransferred(_owner, _previousOwner);\r\n          _owner = _previousOwner;\r\n      }\r\n  }\r\n\r\n  // pragma solidity >=0.5.0;\r\n\r\n  interface IUniswapV2Factory {\r\n      event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n      function feeTo() external view returns (address);\r\n      function feeToSetter() external view returns (address);\r\n\r\n      function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n      function allPairs(uint) external view returns (address pair);\r\n      function allPairsLength() external view returns (uint);\r\n\r\n      function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n      function setFeeTo(address) external;\r\n      function setFeeToSetter(address) external;\r\n  }\r\n\r\n\r\n  // pragma solidity >=0.5.0;\r\n\r\n  interface IUniswapV2Pair {\r\n      event Approval(address indexed owner, address indexed spender, uint value);\r\n      event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n      function name() external pure returns (string memory);\r\n      function symbol() external pure returns (string memory);\r\n      function decimals() external pure returns (uint8);\r\n      function totalSupply() external view returns (uint);\r\n      function balanceOf(address owner) external view returns (uint);\r\n      function allowance(address owner, address spender) external view returns (uint);\r\n\r\n      function approve(address spender, uint value) external returns (bool);\r\n      function transfer(address to, uint value) external returns (bool);\r\n      function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n      function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n      function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n      function nonces(address owner) external view returns (uint);\r\n\r\n      function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n      event Mint(address indexed sender, uint amount0, uint amount1);\r\n      event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n      event Swap(\r\n          address indexed sender,\r\n          uint amount0In,\r\n          uint amount1In,\r\n          uint amount0Out,\r\n          uint amount1Out,\r\n          address indexed to\r\n      );\r\n      event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n      function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n      function factory() external view returns (address);\r\n      function token0() external view returns (address);\r\n      function token1() external view returns (address);\r\n      function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n      function price0CumulativeLast() external view returns (uint);\r\n      function price1CumulativeLast() external view returns (uint);\r\n      function kLast() external view returns (uint);\r\n\r\n      function mint(address to) external returns (uint liquidity);\r\n      function burn(address to) external returns (uint amount0, uint amount1);\r\n      function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n      function skim(address to) external;\r\n      function sync() external;\r\n\r\n      function initialize(address, address) external;\r\n  }\r\n\r\n  // pragma solidity >=0.6.2;\r\n\r\n  interface IUniswapV2Router01 {\r\n      function factory() external pure returns (address);\r\n      function WETH() external pure returns (address);\r\n\r\n      function addLiquidity(\r\n          address tokenA,\r\n          address tokenB,\r\n          uint amountADesired,\r\n          uint amountBDesired,\r\n          uint amountAMin,\r\n          uint amountBMin,\r\n          address to,\r\n          uint deadline\r\n      ) external returns (uint amountA, uint amountB, uint liquidity);\r\n      function addLiquidityETH(\r\n          address token,\r\n          uint amountTokenDesired,\r\n          uint amountTokenMin,\r\n          uint amountETHMin,\r\n          address to,\r\n          uint deadline\r\n      ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n      function removeLiquidity(\r\n          address tokenA,\r\n          address tokenB,\r\n          uint liquidity,\r\n          uint amountAMin,\r\n          uint amountBMin,\r\n          address to,\r\n          uint deadline\r\n      ) external returns (uint amountA, uint amountB);\r\n      function removeLiquidityETH(\r\n          address token,\r\n          uint liquidity,\r\n          uint amountTokenMin,\r\n          uint amountETHMin,\r\n          address to,\r\n          uint deadline\r\n      ) external returns (uint amountToken, uint amountETH);\r\n      function removeLiquidityWithPermit(\r\n          address tokenA,\r\n          address tokenB,\r\n          uint liquidity,\r\n          uint amountAMin,\r\n          uint amountBMin,\r\n          address to,\r\n          uint deadline,\r\n          bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n      ) external returns (uint amountA, uint amountB);\r\n      function removeLiquidityETHWithPermit(\r\n          address token,\r\n          uint liquidity,\r\n          uint amountTokenMin,\r\n          uint amountETHMin,\r\n          address to,\r\n          uint deadline,\r\n          bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n      ) external returns (uint amountToken, uint amountETH);\r\n      function swapExactTokensForTokens(\r\n          uint amountIn,\r\n          uint amountOutMin,\r\n          address[] calldata path,\r\n          address to,\r\n          uint deadline\r\n      ) external returns (uint[] memory amounts);\r\n      function swapTokensForExactTokens(\r\n          uint amountOut,\r\n          uint amountInMax,\r\n          address[] calldata path,\r\n          address to,\r\n          uint deadline\r\n      ) external returns (uint[] memory amounts);\r\n      function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          external\r\n          payable\r\n          returns (uint[] memory amounts);\r\n      function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n          external\r\n          returns (uint[] memory amounts);\r\n      function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          external\r\n          returns (uint[] memory amounts);\r\n      function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n          external\r\n          payable\r\n          returns (uint[] memory amounts);\r\n\r\n      function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n      function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n      function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n      function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n      function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n  }\r\n\r\n\r\n  // pragma solidity >=0.6.2;\r\n\r\n  interface IUniswapV2Router02 is IUniswapV2Router01 {\r\n      function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n          address token,\r\n          uint liquidity,\r\n          uint amountTokenMin,\r\n          uint amountETHMin,\r\n          address to,\r\n          uint deadline\r\n      ) external returns (uint amountETH);\r\n      function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n          address token,\r\n          uint liquidity,\r\n          uint amountTokenMin,\r\n          uint amountETHMin,\r\n          address to,\r\n          uint deadline,\r\n          bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n      ) external returns (uint amountETH);\r\n\r\n      function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n          uint amountIn,\r\n          uint amountOutMin,\r\n          address[] calldata path,\r\n          address to,\r\n          uint deadline\r\n      ) external;\r\n      function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n          uint amountOutMin,\r\n          address[] calldata path,\r\n          address to,\r\n          uint deadline\r\n      ) external payable;\r\n      function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n          uint amountIn,\r\n          uint amountOutMin,\r\n          address[] calldata path,\r\n          address to,\r\n          uint deadline\r\n      ) external;\r\n  }\r\n\r\n\r\n  contract PUSD is Context, IERC20, Ownable {\r\n      using SafeMath for uint256;\r\n      using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => uint8) public permittedToken;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    mapping (address => bool) public isFeeExempt;\r\n\r\n    uint256 private _totalSupply;\r\n    uint8 public _decimals;\r\n    string public _symbol;\r\n    string public _name;\r\n\r\n    uint256 public _swapFee;//2%\r\n    uint256 public _feeDenominator;\r\n\r\n    address payable swapAddress;\r\n    address payable self;\r\n\r\n    address public stakingAddress;\r\n    address public BUSD_address;\r\n    address public USDC_address;\r\n\r\n    IERC20 private BUSD;\r\n    IERC20 private USDC;\r\n    event CollectedUSD(uint BUSDBal, uint MinCollateral);\r\n    event PUSDMinted(uint amount);\r\n    event PUSDBurnt(uint amount);\r\n\r\n    IUniswapV2Router02 uniswapV2Router;\r\n\r\n    constructor(address _uniswapV2Router, address _swapAddress) {\r\n      _name = \"pFund USD\";\r\n      _symbol = \"pUSD\";\r\n      _decimals = 18;\r\n      _totalSupply = 0;\r\n\r\n      swapAddress = payable(_swapAddress);\r\n      uniswapV2Router = IUniswapV2Router02(_uniswapV2Router);\r\n\r\n      _feeDenominator = 100;\r\n      _swapFee = 2;\r\n\r\n      BUSD_address = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\r\n      USDC_address = 0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d;\r\n      isFeeExempt[msg.sender] = true;\r\n      permittedToken[BUSD_address] = 2;\r\n      permittedToken[USDC_address] = 2;\r\n\r\n      BUSD = IERC20(BUSD_address);\r\n      USDC = IERC20(USDC_address);\r\n      self = payable(address(this));\r\n    }\r\n\r\n\r\n    /**\r\n     *             MIGRATIVE\r\n     *              FUNCTIONS\r\n     **/\r\n\r\n    function getPUSD(address fromToken, uint amount) external {\r\n      require(permittedToken[fromToken] >= 1, \"token not permitted\");\r\n      IERC20 tokenA = IERC20(fromToken);\r\n      tokenA.transferFrom(msg.sender, address(this), amount);\r\n      if(permittedToken[fromToken] == 2) {\r\n          _mint(msg.sender, amount);\r\n          emit PUSDMinted(amount);\r\n      } else {\r\n          uint pUSDToMint = handleSwap(fromToken, BUSD_address, amount.div(2));\r\n          pUSDToMint = pUSDToMint.add(handleSwap(fromToken, USDC_address, amount.sub(amount.div(2))));\r\n          uint fees = calculateFees(pUSDToMint, _swapFee, _feeDenominator);\r\n          _balances[swapAddress] = _balances[swapAddress].add(fees);\r\n          _mint(msg.sender, pUSDToMint.sub(fees));\r\n          emit PUSDMinted(pUSDToMint.sub(fees));\r\n      }\r\n    }\r\n\r\n    function getPUSDForBNB() external payable {\r\n      uint pUSDToMint = handleBNBSwap(BUSD_address, msg.value.div(2));\r\n      pUSDToMint = pUSDToMint.add(handleBNBSwap(USDC_address, msg.value.sub(msg.value.div(2))));\r\n      uint fees = calculateFees(pUSDToMint, _swapFee, _feeDenominator);\r\n      _balances[swapAddress] = _balances[swapAddress].add(fees);\r\n      _mint(msg.sender, pUSDToMint.sub(fees));\r\n      emit PUSDMinted(pUSDToMint.sub(fees));\r\n    }\r\n\r\n    function cashoutPUSD(uint amount, bool isUSDC) external {\r\n        require(_balances[msg.sender] >= amount, \"You cannot withdraw more than you have\");\r\n        _burn(msg.sender, amount);\r\n        if(isUSDC) {\r\n            require(USDC.balanceOf(address(this)) >= amount, \"Contract does not have enough USDC\");\r\n            USDC.transfer(msg.sender,amount);\r\n        } else{\r\n            require(BUSD.balanceOf(address(this)) >= amount, \"Contract does not have enough BUSD\");\r\n            BUSD.transfer(msg.sender, amount);\r\n        }\r\n        emit PUSDBurnt(amount);\r\n    }\r\n\r\n    function withdrawBUSD(uint amount) external onlyOwner {\r\n        (uint BUSDBal, uint USDCBal, uint minCollateral) = getCollectionValues();\r\n        require(BUSDBal.sub(amount) > minCollateral, 'not enough BUSD collateral');\r\n\r\n        BUSD.approve(msg.sender, amount);\r\n        BUSD.transfer(msg.sender, amount);\r\n\r\n        emit CollectedUSD(BUSDBal, minCollateral);\r\n    }\r\n\r\n    function withdrawUSDC(uint amount) external onlyOwner {\r\n      (uint BUSDBal, uint USDCBal, uint minCollateral) = getCollectionValues();\r\n      require(USDCBal.sub(amount) > minCollateral, 'not enough USDC collateral');\r\n      USDC.approve(msg.sender, amount);\r\n      USDC.transfer(msg.sender, amount);\r\n      emit CollectedUSD(USDCBal, minCollateral);\r\n    }\r\n\r\n    function getCollectionValues() public view returns (uint,uint,uint) {\r\n        uint BUSDBal = BUSD.balanceOf(address(this));\r\n        uint USDCBal = USDC.balanceOf(address(this));\r\n        uint pUSDStaked = _balances[stakingAddress];\r\n        uint minCollateral = _totalSupply.sub(pUSDStaked);\r\n        return (BUSDBal, USDCBal, minCollateral);\r\n    }\r\n\r\n    /**\r\n     *            RESTRICTIVE\r\n     *             FUNCTIONS\r\n     **/\r\n\r\n    function changeRouterAddress(address newRouter) external onlyOwner {\r\n      uniswapV2Router = IUniswapV2Router02(newRouter);\r\n    }\r\n\r\n    function setFees(uint256 amount, uint256 denominator) external onlyOwner {\r\n        _swapFee = amount;\r\n        _feeDenominator = denominator;\r\n    }\r\n\r\n    function setPermitted(address token, uint8 permissionLevel) external onlyOwner{\r\n        permittedToken[token] = permissionLevel;\r\n    }\r\n\r\n    function setStakingAddress(address stake) external onlyOwner {\r\n        stakingAddress = stake;\r\n    }\r\n\r\n    /**\r\n     *            IERC20\r\n     *             FUNCTIONS\r\n     **/\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address) {\r\n      return owner();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8) {\r\n      return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory) {\r\n      return _symbol;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the token name.\r\n    */\r\n    function name() external view returns (string memory) {\r\n      return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-totalSupply}.\r\n     */\r\n    function totalSupply() external override view returns (uint256) {\r\n      return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) external override view returns (uint256) {\r\n      return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n      _transfer(_msgSender(), recipient, amount);\r\n      return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) external override view returns (uint256) {\r\n      return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n      _approve(_msgSender(), spender, amount);\r\n      return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {BEP20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n      _transfer(sender, recipient, amount);\r\n      _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\"));\r\n      return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {BEP20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n      _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n      return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {BEP20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n      _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\"));\r\n      return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Burn `amount` tokens and decreasing the total supply.\r\n     */\r\n    function burn(uint256 amount) public returns (bool) {\r\n      _burn(_msgSender(), amount);\r\n      return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n      require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n      require(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n\r\n      _balances[sender] = _balances[sender].sub(amount, \"BEP20: transfer amount exceeds balance\");\r\n      _balances[recipient] = _balances[recipient].add(amount);\r\n\r\n\r\n      emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n\r\n    /**\r\n     *            UTILITY\r\n     *             FUNCTIONS\r\n     **/\r\n\r\n    receive() external payable {}//For Uniswap trades\r\n\r\n   function calculateFees(uint amount, uint _fee, uint denominator) internal pure returns (uint256) {\r\n      uint fee = amount.mul(_fee).div(denominator);\r\n      return fee;\r\n    }\r\n\r\n    function expectedSwapReturn(address fromToken, address toToken, uint amount) public returns (uint256) {\r\n      address[] memory path = new address[](2);\r\n      path[0] = fromToken;\r\n      path[1] = toToken;\r\n      uniswapV2Router.getAmountsOut(amount,path);\r\n    }\r\n\r\n    function handleSwap(address fromToken, address toToken, uint amount) private returns (uint256) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = fromToken;\r\n        path[1] = toToken;\r\n        IERC20 tokenA = IERC20(fromToken);\r\n        IERC20 tokenB = IERC20(toToken);\r\n\r\n        tokenA.approve(address(uniswapV2Router), amount);\r\n        uint256 initialBalance = tokenB.balanceOf(address(this));\r\n        uint swapValue = expectedSwapReturn(fromToken, toToken, amount);\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            amount,\r\n            swapValue.sub(calculateFees(swapValue, 1, 100)),//1% slippage\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        uint256 balanceAfter = tokenB.balanceOf(address(this));\r\n        return balanceAfter.sub(initialBalance);\r\n    }\r\n\r\n    function handleBNBSwap(address toToken, uint amount) private returns (uint256) {\r\n        address[] memory path = new address[](2);\r\n          path[0] = uniswapV2Router.WETH();\r\n          path[1] = toToken;\r\n          IERC20 tokenB = IERC20(toToken);\r\n\r\n          uint swapValue = expectedSwapReturn(path[0], path[1], amount);\r\n          uint256 initialBalance = tokenB.balanceOf(address(this));\r\n          // make the swap\r\n          uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(\r\n              swapValue.sub(calculateFees(swapValue, 1, 100)),//1% slippage\r\n              path,\r\n              address(this),\r\n              block.timestamp\r\n          );\r\n          uint256 balanceAfter = tokenB.balanceOf(address(this));\r\n          return balanceAfter.sub(initialBalance);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n      require(account != address(0), \"BEP20: burn from the zero address\");\r\n\r\n      _balances[account] = _balances[account].sub(amount, \"BEP20: burn amount exceeds balance\");\r\n      _totalSupply = _totalSupply.sub(amount);\r\n      emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n      require(owner != address(0), \"BEP20: approve from the zero address\");\r\n      require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n      _allowances[owner][spender] = amount;\r\n      emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n      _burn(account, amount);\r\n      _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"BEP20: burn amount exceeds allowance\"));\r\n    }\r\n\r\n    function _mint(address account, uint amount) internal {\r\n       require(account != address(0), \"BEP20: mint to the zero address\");\r\n\r\n      _balances[account] = _balances[account].add(amount);\r\n      _totalSupply = _totalSupply.add(amount);\r\n      emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function inCaseTokenGetStuck(address _token, uint amount) external onlyOwner {\r\n      require(_token != USDC_address && _token != BUSD_address);\r\n      IERC20 token = IERC20(_token);\r\n      token.approve(msg.sender, amount);\r\n      token.transferFrom(address(this), msg.sender, amount);\r\n    }\r\n\r\n  }", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapV2Router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"BUSDBal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"MinCollateral\",\"type\":\"uint256\"}],\"name\":\"CollectedUSD\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PUSDBurnt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PUSDMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BUSD_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isUSDC\",\"type\":\"bool\"}],\"name\":\"cashoutPUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"changeRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"expectedSwapReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"geUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollectionValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getPUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPUSDForBNB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"inCaseTokenGetStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"permittedToken\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"permissionLevel\",\"type\":\"uint8\"}],\"name\":\"setPermitted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stake\",\"type\":\"address\"}],\"name\":\"setStakingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawUSDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PUSD", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e000000000000000000000000495ab8233aa77c1489dd952f3a886c7ddc09b245", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://00c7257e3ed838036c6fd6545cc1601b3108bad699c54628d3e04597adc07dc0"}