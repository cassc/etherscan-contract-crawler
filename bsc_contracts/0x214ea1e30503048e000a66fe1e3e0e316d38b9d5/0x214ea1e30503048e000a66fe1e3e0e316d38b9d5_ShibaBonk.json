{"SourceCode": "/*\r\n\r\nShibaBonk, the new bonker in town!\r\n\r\n4% Reflections\r\n3% Liquidity\r\n3% Marketing\r\n\r\n\r\nTelegram:\r\nhttps://t.me/Shibabonk_community\r\n\r\nWebsite:\r\nhttps://shibabonk.finance/\r\n\r\nTwitter:\r\nhttps://twitter.com/ShibaBonkToken\r\n\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMy++++++++oMMMMMMN++++++oMMs++++++mMMMM+++++++++dMd++++dMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMyy:        .yyyyyyo      `yy.      +yyys         +y+    +yhMMMMMMMMMMMMMMMMMMMMMMMMMmhdMMMMmhhyyNMMMNyyyhdMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMM`  `````````      `......`    ````     ```` ````    `.`   :MMMMMMMMMMMMMMMMMMMMMMMMMs-/ddMMs--..mMMMm...-+ddmdNMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMM`  :::::::::-`  .-::///::::.  -:::-`  `::::`::::  `-:/:.  :MMMMMMMMMMMMMMMMMMMMMNNNNs--::dNs----mMMMN-:---::::dNNMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMM`  :://.`-///. -://:-..-://:- -//:/:. `///:`///:`.:/::-`  :MMMMMMMMMMMMMMMMMMMMm///::----//:----mMMMN--------::/sMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMM`  :///..:/:-``::::`    `:///`-//::::-.///:`/::::://:.  odmMMMMMMMMMMMMMMMMMMMMNdm:-------:---.`--sMMdd:.------:sMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMM`  :///:::/:-`.::/-      -///.-//::::::///:`/:::::::.   :+yMMMMMMMMMMMMMMMMMMMMMMMhy+-:yy-```````.:oo++syyyyyyyydMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMM`  :///` .//::`://:.`  `.://:`-//:..:/:://:`/:::-::::-`   :MMMMMMMMMMMMMMMMMMMMMMMMMs.-yy. ``-+yhdy+-``oydMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMM`  :///--:/::- `:::/:::://::` -//:. `-:///:`/::: `-::::.  :MMMMMMMMMMMMMMMMMMMMMMMmm+   `-+ydmhsoosdmh/` /mmMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMM`  :::::::::.`   .-::::::-.   -:::`   `-::.`:::-   .-::`  :MMMMMMMMMMMMMMMMMMNNNNN. `.:shdyo/::-----/hNh.` `MMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMM`                                                         /MMMMMMMMMMMMMMMMMMo..---+ydho/-:://+//::---oMd  `MMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMM`                           sh+                         ohdMMMMMMMMMMMMMd::::-.:sdds+:-:://+++++//:---:NN  `MMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMM`                           /o:                         :oyMMMMMMMMMoooo/` .+hmho:-:://+++++//::-----:hMo  `MMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMM`  -------`--` .-..-. .----`    `.----.`--` .-.`-.   .-`  :MMMMMMNyy`  `:smmy+:-://++++++//:--------+dNo -/+MMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMM`  ..:/:...//``:/-:/-`::-..`   .:/-..--`:/- -/:.:/:.:::`  :MMmmmmy  .+yNds/:://++++++//::---------+dMy-..oMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMM`    -/:  `//:::/-:/- -:::-`   -/: -:::.:/- -/: `-//:-    :MM` ``:odmho/://+++++++/::----------/smNs-  dMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMNN+  -/:  `//.`:/-:/-.-..::-   .::-.-/:.:/-`:/:   :/-      .`./ymmyo///+++++++//::---------:+ymmh+. .NNMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMM+  .:-  `:-` --.--.`----.`    `------``-----`   --.   ``-+hmmho++++++++++/:::--------:+ydmds/.` /hhMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMM+                         +o:                     ` `:odmdyo+++++++++//::--------:+sdmds/.`.oooohMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMy:::::::::::::::::::::::::mMh:::::::::::::-      ./sdmdso++++++++//:::-------:+sdmdy/-.:/::+MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMmmmmo  `.+hmmhs+++++++++//::-------:+sdmdy+----..mMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNm````.-+hmmhs++++++++//:::-----::+sdddy+-.```oNNNNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMy--``-odmdyo+++++++osso+/:---::+shddy+-`  -ddddNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN:://-.:sdmdyo++++++++yds+//+shyoshdmy+-` `    `::::::+MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMdoo```:sdNds+++++++///:yd-      `/smm+//-      `.://:`  `ooNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMhhhh+ `:smNhs+++++++//::--/N-         `-omNm/   `:shhsooym+    mMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNd  ``/ymNhs+++++++//::----:+M.           .:yNo `+dh+::///:+N/   mMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMo  ./yNNhs++++++//::----:/shmNds           `--+msms/:////////hd   mMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMm..--.:sNNhs++++++//:----:/shNmyoooshs`     .-::////oN+://////////yN   mMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMy/:` -omNds+++++//::---:/sdNmy++shs/-::oh: `-://///////oN+//////////sN`  mMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMys:`.+dNdy+++++//:---:+sdNmy+::odh+-::::/:/yy/////////////yd//////////yN   mMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMmhhhh. :yNmyo+++//::--:+sdNdy+::/+smd/:::/::::::/omo////////////ms/////////hd   mMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMmm+```.+dNds+++//::-:+sdmdy+-:d+++sdmo:::://////////+ms///////////oN/////////ms   mMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMM-``-/omMdo+//:::/+ydmdy+.``.``mh+omh/:::::///////////+ms///////////hh///////+M:   mMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMd..`:hmhhhmNy::/oydmhs/.o+-``.--`+Nymy::/:::::::::///////+mo//////////+N+//////+my`  mMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMd  `NN/:--:dMhddhs/.``  oh-::///-`dNs://:.````-//:////////om+//////////yd////////dy` :/hMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMd  .Nm:-::/hMy:.`/+++/  `mo/////..my////:--..-://://///////yd///////////mo////////dy`  oMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMm--`+mmyyydNy`.--mMMMm   /d////- ym//////+dho//::://////////dy//////////yd////////+ms  +ddMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMM:.-/oss+-..:MMMMMMm..` yy//:`:No://///mNdNy+//://////////+mo//////////mo::::::::oN/   .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMNN+``````oNNMMMMMMMNN- `ho/- hd//////+NNsNo//:::--.....--:sm//////////yd//:::::--sm`  .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMmddddddmMMMMMMMMMMM-  .do`-M+///////ohds::.`````...`    `hy//////////N+..`     .M:  .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMhs/ .h sm://///////:-`   .dmhymN+     .m+/////////yh        .N/  .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMs  ` yh..-::///:-`   .. :ymMd/``hy`  od//////////N-      .+M.  .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMy-.  om`   `.-.`     sM+.:dMNo+hMd   `ms/////////yh    `.:ms   .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN  .No              /yyyo-+yyy/`    :m//////////N- `.-:my`   .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN   :Ns.                             hy/////////hy---omo   oMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN    -hd/.`                          :N/////////+N/ody-  ydmMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNss.  `/hh+-.``                       hy/////////dms- .ssNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMo/-  `:shy+:-..````        ``````../N/////////oN://oMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMh-- `/::oyhyso+/::---------::///+oNs/////////mNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNm  .yo-.--:+ossyyyyyyyyyyyyyso+/om/////////sMNNNNNNNNNNNNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN   `+h+/:.so`  ``````````      `m+/////////N/...........mMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMhh-  -syody.                    yy/////////ds-+sssss+:. -:::/MMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMys/  :Ny`                     /m////////:sNd+:-.--/shs:`  .MMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMdy+ `hh`                      :m////////:-hd:----.` `/hh: `yyNMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM:   oN.                       .+/////////:-dd/////:-` `/mo`  dMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM:  .Ns`                       .///////////::Ns//////:.  -ms  hNMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM:  sN/`                       .////////////-sN////////.  -N/ ..oMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN:::::::::` `Ny/-                      `:////////////:-Nh+yo////:`  yd   +MMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMdo+        `  :M+/:`      ...`          .:////////////-..yNdy//////`  +N   +MMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMs   +dhhhhyo:`sm///-    omysyhdho-   .:osso+//////////-..+M+//////:`  yd   +MMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMs  :M/`  `./sdmh////-` -M+`   `.+hdshyso+++o+/////////:--/M+/////:.  -N/ ..oMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMs  /M:.      .sNo////:-:M+-      `:dy:://///////////////:oN/////:.  :mo  hNMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMs  .Ns-.       +N+//////mh-.       .ds//////////////////-dd//:-.``-yd/   dMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMs   +N/-.      .dd//////oNo-.`     .+d//////////////////oNo:-..-+yh+` .hhNMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMdo+  sm/-`    `:oh///////sNo--`   `:/+////////////////+sNs:/+oyhs:` -osMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMhhhhhhy  `om+.   `:///////////omy:--``:///////////////++oohmdyyso/-`  -:yMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMm           :dy-`-://///////////+ddo:://++++///+++++oooosymy-```       hmNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMm  `.-:://+++smmhyyyyyyyyyyyyyyyyymNdhhhhhhhhhhhhhhhddhdmNhoo++///:-.` ``oMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMm  ```....--------::::::::::---------------:::::::::::::--------....``   oMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyymMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\n\r\n*/\r\n\r\n\r\npragma solidity ^0.8.10;\r\n// SPDX-License-Identifier: MIT\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\nabstract contract Authorized{\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    mapping (address => bool) _authorized;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        _authorized[_owner] = true;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    \r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyAuthorized {\r\n        require(_authorized[msg.sender], \"Authorization: caller is not the authorized\");\r\n        _;\r\n    }\r\n    \r\n    function manageAuthorization(address account, bool authorize) public onlyOwner {\r\n        _authorized[account] = authorize;\r\n    }\r\n    \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    \r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\ncontract ShibaBonk is IERC20, Authorized {\r\n    \r\n    mapping (address => uint256) private _rOwned;\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n\r\n    mapping (address => bool) private _isExcluded;\r\n    address[] private _excluded;\r\n    mapping (address => bool) public isPair;\r\n   \r\n    string private _name = \"ShibaBonk\";\r\n    string private _symbol = \"SHIBO\";\r\n    uint8 private _decimals = 18 ;\r\n    uint256 private DECIMALS = 10 ** _decimals;\r\n    \r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal = 1e9 * DECIMALS;   // 1 Billion tokens, total supply\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n    \r\n    uint256 public _taxFee = 4;\r\n    uint256 private _previousTaxFee = _taxFee;   \r\n    \r\n    uint256 public _liquidityFee = 3;\r\n    uint256 public _marketingFee = 3;    \r\n    uint256 private _totalLPFee = 6;\r\n    uint256 private _previousTotalLPFee = _totalLPFee; \r\n    \r\n    IUniswapV2Router02 public uniswapV2Router;    \r\n    address public uniswapV2Pair;\r\n    address public deadAddress = address(0x000000000000000000000000000000000000dEaD); \r\n    address public marketingAddress; \r\n    address public autoLiquidityReceiver;\r\n    \r\n    uint256 public swapTokensAtAmount = 10 * _tTotal / 1000; // 1.0% of total supply, 10e6 tokens   \r\n    uint256 public maxTx = 10 * _tTotal / 1000;              // 1.0% of total supply, 10e6 tokens  \r\n    uint256 public maxWallet = 20 * _tTotal / 1000;          // 2.0% of total supply, 20e6 tokens\r\n    \r\n    uint256 private nAntiBotBlocks;\r\n    uint256 private launchBlock;\r\n    bool public hasLaunched = false;\r\n    bool private antiBotActive = false;\r\n    bool private swapping = false;\r\n    bool private inBonk = false;\r\n    bool public accumulatingForBonk = false;\r\n    uint256 bonkAmount = 0;\r\n    \r\n    bool bonkTime = false;\r\n    uint256 bonkTimeDuration = 0;\r\n    uint256 bonkTimeStart = 0;\r\n    \r\n    event Launch(uint256 indexed nAntiBotBlocks);    \r\n    event SetTradeRestrictions(uint256 indexed maxTx, uint256 indexed maxWallet);\r\n    event SetSwapTokensAtAmount(uint256 indexed swapTokensAtAmount);\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived\r\n    );  \r\n    \r\n    constructor () {\r\n        _rOwned[msg.sender] = _rTotal;\r\n        marketingAddress = msg.sender;\r\n        autoLiquidityReceiver = msg.sender;\r\n        \r\n        // Pancakeswap DEX. Mainnet \r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);                        \r\n\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n        isPair[uniswapV2Pair] = true;\r\n        uniswapV2Router = _uniswapV2Router;\r\n        \r\n        \r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[deadAddress] = true;\r\n        excludeFromReward(deadAddress);\r\n        \r\n        emit Transfer(address(0), msg.sender, _tTotal);\r\n    }\r\n    \r\n    modifier inSwap{\r\n        swapping = true;\r\n        _; \r\n        swapping = false;\r\n        \r\n    }\r\n    \r\n    modifier inbonk{\r\n        inBonk = true;\r\n        _; \r\n        inBonk = false;\r\n        \r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        require(_allowances[sender][msg.sender] >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        require(_allowances[msg.sender][spender] >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] - subtractedValue);\r\n        return true;\r\n    }\r\n\r\n    function isExcludedFromReward(address account) public view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    function totalFees() public view returns (uint256) {    \r\n        return _tFeeTotal;\r\n    }\r\n\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate =  _getRate();\r\n        return rAmount / currentRate;\r\n    }\r\n\r\n    function excludeFromReward(address account) public onlyOwner() {\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n        if(_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    function includeInReward(address account) external onlyOwner() {\r\n        require(_isExcluded[account], \"Account is already excluded\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n     function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n    \r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n    \r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal - rFee;\r\n        _tFeeTotal = _tFeeTotal + tFee;\r\n    }\r\n\r\n    function _getValues(uint256 tAmount, address from) private returns (uint256, uint256, uint256, uint256, uint256, uint256) {\r\n        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTValues(tAmount, from);\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, _getRate());\r\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLiquidity);\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount, address from) private returns (uint256, uint256, uint256) {\r\n        uint256 tFee = calculateTaxFee(tAmount, from);\r\n        uint256 tLiquidity = calculateLiquidityFee(tAmount, from);\r\n        uint256 tTransferAmount = tAmount - tFee - tLiquidity;\r\n        return (tTransferAmount, tFee, tLiquidity);\r\n    }\r\n\r\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\n        uint256 rAmount = tAmount * currentRate;\r\n        uint256 rFee = tFee * currentRate;\r\n        uint256 rLiquidity = tLiquidity * currentRate;\r\n        uint256 rTransferAmount = rAmount - rFee - rLiquidity;\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n    function _getRate() private view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply / tSupply;\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;      \r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\n            rSupply = rSupply - _rOwned[_excluded[i]];\r\n            tSupply = tSupply - _tOwned[_excluded[i]];\r\n        }\r\n        if (rSupply < _rTotal / _tTotal) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n    \r\n    function _takeLiquidity(uint256 tLiquidity) private {\r\n        uint256 currentRate =  _getRate();\r\n        uint256 rLiquidity = tLiquidity * currentRate;\r\n        _rOwned[address(this)] = _rOwned[address(this)] + rLiquidity;\r\n        if(_isExcluded[address(this)])\r\n            _tOwned[address(this)] = _tOwned[address(this)] + tLiquidity;\r\n    }\r\n    \r\n    function bonkMode(uint256 _minutes) external onlyAuthorized {\r\n        require(_minutes <= 2 * 60, \"BonkTime may not last over two hours.\");\r\n        bonkTime = true;\r\n        bonkTimeDuration = _minutes * 1 minutes;\r\n        bonkTimeStart = block.timestamp;\r\n    }\r\n    \r\n    function calculateTaxFee(uint256 _amount, address from) private returns (uint256) {\r\n        if (_taxFee == 0 && _totalLPFee == 0){\r\n            return 0;\r\n        }\r\n        uint256 fee = 0;\r\n        \r\n        if(bonkTime){\r\n            uint256 halfTime = bonkTimeStart  + bonkTimeDuration / 2;\r\n            uint256 fullTime = bonkTimeStart  + bonkTimeDuration;\r\n            \r\n            if(block.timestamp < halfTime){\r\n                fee = isPair[from] ? 0 : 10; \r\n            }\r\n            else if(block.timestamp < fullTime){\r\n                fee = isPair[from] ? 2 : 8; \r\n            }\r\n            else{\r\n                fee = _taxFee;\r\n                bonkTime = false;\r\n            }\r\n        }\r\n        else{\r\n            fee = _taxFee;\r\n        }\r\n        \r\n        return _amount * fee / 100;\r\n    }\r\n    \r\n    function calculateLiquidityFee(uint256 _amount, address from) private returns (uint256) {\r\n        if (_taxFee == 0 && _totalLPFee == 0){\r\n            return 0;\r\n        }\r\n        uint256 fee = 0;\r\n        \r\n        if(bonkTime){\r\n            uint256 halfTime = bonkTimeStart  + bonkTimeDuration / 2;\r\n            uint256 fullTime = bonkTimeStart  + bonkTimeDuration;\r\n            \r\n            if(block.timestamp < halfTime){\r\n                fee = isPair[from] ? 0 : 10; \r\n            }\r\n            else if(block.timestamp < fullTime){\r\n                fee = isPair[from] ? 3 : 7;\r\n            }\r\n            else{\r\n                fee = _totalLPFee;\r\n                bonkTime = false;\r\n            }\r\n        }\r\n        else{\r\n            fee = _totalLPFee;\r\n        }\r\n        \r\n        return _amount * fee / 100;\r\n    }\r\n    \r\n    function removeAllFee() private {\r\n        if(_taxFee == 0 && _liquidityFee == 0) return;\r\n        \r\n        _previousTaxFee = _taxFee;\r\n        _previousTotalLPFee = _totalLPFee;\r\n        \r\n        _taxFee = 0;\r\n        _totalLPFee = 0;\r\n    }\r\n     \r\n    function restoreAllFee() private {\r\n        _taxFee = _previousTaxFee;\r\n        _totalLPFee = _previousTotalLPFee;\r\n    }\r\n    \r\n    function isExcludedFromFee(address account) public view returns(bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    \r\n    function setAutomatedMarketMakerPair(address pair, bool value) public onlyOwner {\r\n        require(pair != uniswapV2Pair, \"ShibaBonk: The PancakeSwap pair cannot be removed from automatedMarketMakerPairs\");\r\n        \r\n        isPair[pair] = value;\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n     \r\n     function launch(uint256 _nAntiBotBlocks) public onlyOwner{\r\n        require(!hasLaunched, \"Project already launched.\");\r\n        require(_nAntiBotBlocks < 5, \"Chill.\");\r\n        nAntiBotBlocks = _nAntiBotBlocks;\r\n        launchBlock = block.number;\r\n        hasLaunched = true;\r\n        antiBotActive = true;\r\n        \r\n        emit Launch(nAntiBotBlocks);   \r\n    }\r\n    \r\n    function setTradeRestrictions(uint256 _maxTx, uint256 _maxWallet) public onlyOwner{\r\n        require(_maxTx * DECIMALS >= (10 * _tTotal / 1000), \"Requested max transaction amount too low.\");\r\n        require(_maxWallet * DECIMALS >= (20 * _tTotal / 1000), \"Requested max allowable wallet amount too low.\");\r\n        \r\n        maxTx = _maxTx * DECIMALS;\r\n        maxWallet = _maxWallet * DECIMALS;\r\n        \r\n        emit SetTradeRestrictions(maxTx, maxWallet);\r\n    }\r\n    function setSwapTokensAtAmount(uint256 _swapTokensAtAmount) public onlyOwner{\r\n        require(_tTotal / 1000 <= _swapTokensAtAmount * DECIMALS && _swapTokensAtAmount * DECIMALS <= 2 * _tTotal / 100,\r\n        \"Requested contract swap amount out of acceptable range.\");\r\n        \r\n        swapTokensAtAmount = _swapTokensAtAmount * DECIMALS;\r\n         \r\n         emit SetSwapTokensAtAmount(swapTokensAtAmount);  \r\n    }  \r\n        \r\n    function checkValidTrade(address from, address to, uint256 amount) private view{\r\n        if (from != owner() && to != owner() && to != deadAddress) {\r\n            require(hasLaunched, \"Project has yet to launch.\");\r\n            require(amount <= maxTx, \"Transfer amount exceeds the max allowable.\"); \r\n            if (isPair[from]){\r\n                require(balanceOf(address(to)) + amount <= maxWallet, \r\n                \"Token purchase implies violation of max allowable wallet amount restriction.\");\r\n            }\r\n        } \r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        if(amount == 0) {\r\n            return;\r\n        }\r\n    \r\n        checkValidTrade(from, to, amount);\r\n        bool takeFee = hasLaunched && !swapping;\r\n        \r\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\r\n            takeFee = false;\r\n        }\r\n        \r\n        if(takeFee && antiBotActive) {\r\n            uint256 fees;\r\n            if(block.number < launchBlock + nAntiBotBlocks){ \r\n                fees = amount * 99 / 100;\r\n                amount = amount - fees;\r\n                takeFee = false;\r\n                _tokenTransfer(from, address(this), fees, takeFee);\r\n            }\r\n            else{\r\n                antiBotActive = false; \r\n            }\r\n        }\r\n        \r\n        if(accumulatingForBonk){\r\n            if(shouldBonk()){\r\n                bonk(bonkAmount);\r\n            }    \r\n        }\r\n        else if(shouldSwap(to)) { \r\n            swapTokens(swapTokensAtAmount);\r\n        }\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n    }\r\n\r\n    function planBonk(uint256 _bonkNumerator, uint256 _bonkDenominator) public onlyAuthorized {\r\n        bonkAmount = _tTotal * _bonkNumerator / _bonkDenominator;\r\n        accumulatingForBonk = true;\r\n    }\r\n    \r\n    function shouldBonk() private view returns (bool){\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        bool canBonk = contractTokenBalance >= bonkAmount;\r\n        return hasLaunched && canBonk &&\r\n        !inBonk && !antiBotActive;\r\n    }\r\n    \r\n    function bonk(uint256 _bonkAmount) private inbonk {\r\n        uint256 currentRate =  _getRate();\r\n        uint256 rBonk = _bonkAmount * currentRate;\r\n        _rOwned[address(this)] = _rOwned[address(this)] - rBonk;\r\n        _rOwned[deadAddress] = _rOwned[deadAddress] + rBonk;\r\n        _tOwned[deadAddress] = _tOwned[deadAddress] + _bonkAmount;\r\n       \r\n        emit Transfer(address(this), deadAddress, _bonkAmount);\r\n        accumulatingForBonk = false;\r\n    }   \r\n    \r\n    function shouldSwap(address to) private view returns (bool){\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\r\n        \r\n        return hasLaunched && canSwap && !swapping &&\r\n        isPair[to] && !antiBotActive;\r\n    }\r\n\r\n    function swapTokens(uint256 tokens) inSwap private {\r\n        \r\n        uint256 LPtokens = tokens * _liquidityFee / _totalLPFee;\r\n        uint256 halfLPTokens = LPtokens / 2;\r\n        uint256 marketingtokens = tokens - LPtokens;\r\n        uint256 tokensToSwap = halfLPTokens + marketingtokens;\r\n        \r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        swapTokensForEth(tokensToSwap); \r\n         \r\n        uint256 newBalance = address(this).balance - initialBalance;\r\n            \r\n        uint256 bnbForLP = newBalance * halfLPTokens / tokensToSwap;\r\n                \r\n        uint256 bnbForMarketing = newBalance - bnbForLP;\r\n        \r\n        (bool temp,) = payable(marketingAddress).call{value: bnbForMarketing, gas: 30000}(\"\"); temp; //warning-suppresion \r\n        \r\n        if (halfLPTokens > 0){\r\n        addLiquidity(halfLPTokens, bnbForLP);\r\n        }\r\n        emit SwapAndLiquify(halfLPTokens, bnbForLP);   \r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            autoLiquidityReceiver,\r\n            block.timestamp\r\n        );\r\n    }\r\n     \r\n    function buybackStuckBNB(uint256 percent) public onlyAuthorized {\r\n        uint256 amountToBuyBack = address(this).balance * percent / 100;\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = uniswapV2Router.WETH();\r\n        path[1] = address(this);\r\n\r\n        uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amountToBuyBack}(\r\n            0, // accept any amount of Tokens\r\n            path,\r\n            deadAddress, \r\n            block.timestamp\r\n        );\r\n    } \r\n    \r\n    function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {\r\n        if(!takeFee)\r\n            removeAllFee();\r\n        \r\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferFromExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferToExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferStandard(sender, recipient, amount);\r\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferBothExcluded(sender, recipient, amount);\r\n        } else {\r\n            _transferStandard(sender, recipient, amount);\r\n        }\r\n        \r\n        if(!takeFee)\r\n            restoreAllFee(); \r\n    }\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount, sender);\r\n        _rOwned[sender] = _rOwned[sender] - rAmount;\r\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount, sender);\r\n        _rOwned[sender] = _rOwned[sender] - rAmount;\r\n        _tOwned[recipient] = _tOwned[recipient] + tTransferAmount;\r\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;           \r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount, sender);\r\n        _tOwned[sender] = _tOwned[sender] - tAmount;\r\n        _rOwned[sender] = _rOwned[sender] - rAmount;\r\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;   \r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n    \r\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount, sender);\r\n        _tOwned[sender] = _tOwned[sender] - tAmount;\r\n        _rOwned[sender] = _rOwned[sender] - rAmount;\r\n        _tOwned[recipient] = _tOwned[recipient] + tTransferAmount;\r\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;        \r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n    \r\n    function airdrop(address sender, address[] calldata recipients, uint256[] calldata values) external onlyOwner {\r\n        require(recipients.length == values.length, \"Mismatch between Address and token count\");\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            _transfer(sender, recipients[i], values[i] * DECIMALS);\r\n        }\r\n    }\r\n    \r\n    receive() external payable {}\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nAntiBotBlocks\",\"type\":\"uint256\"}],\"name\":\"Launch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"swapTokensAtAmount\",\"type\":\"uint256\"}],\"name\":\"SetSwapTokensAtAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maxTx\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maxWallet\",\"type\":\"uint256\"}],\"name\":\"SetTradeRestrictions\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accumulatingForBonk\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidityReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minutes\",\"type\":\"uint256\"}],\"name\":\"bonkMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"buybackStuckBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nAntiBotBlocks\",\"type\":\"uint256\"}],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"authorize\",\"type\":\"bool\"}],\"name\":\"manageAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bonkNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonkDenominator\",\"type\":\"uint256\"}],\"name\":\"planBonk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapTokensAtAmount\",\"type\":\"uint256\"}],\"name\":\"setSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxWallet\",\"type\":\"uint256\"}],\"name\":\"setTradeRestrictions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ShibaBonk", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9301f5750ebf0cbd4e21211de43ca38fd9edf1461e2a1b265dbc021d0c157b24"}