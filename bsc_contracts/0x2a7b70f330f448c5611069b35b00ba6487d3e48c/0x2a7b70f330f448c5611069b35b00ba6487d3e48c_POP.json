{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2023-10-03\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2023-09-09\r\n*/\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2023-09-01\r\n*/\r\n\r\npragma solidity 0.8.7;\r\n\r\ninterface ITRC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Ownable {\r\n    address public _owner;\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {//admin_user\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function changeOwner(address newOwner) public onlyOwner {\r\n        _owner = newOwner;\r\n       // guanli[newOwner] = 1;\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\ncontract  POP is  Ownable  {\r\n    mapping (address => address) public inviter;\r\n    uint256 public start_time = 1696089600;\r\n    uint256 public free_profit = 100;\r\n    uint256 public free_day = 100;\r\n    uint256 public free_price = 1000;\r\n    uint256 public free_award = 100;\r\n    uint256 public pledge_profit = 200;//100days  profit   *2\r\n    uint256 public pledge_day = 100;\r\n    uint256 public time_day = 86400;\r\n\r\n    uint256 public jiage = 10000000000000000000;//10000000;\r\n    uint256 public jiage_gei = 9000000000000000000;//9000000;\r\n    uint256 public jiage_tui = 1000000000000000000;//1000000;\r\n    \r\n    ITRC20 public  usdt ;\r\n    ITRC20 public  token ;\r\n    \r\n    uint public listCount = 0;\r\n    struct List {\r\n        uint256 types;\r\n        //string zz;\r\n        uint256 amount;\r\n        uint256 status;\r\n        uint256 creatTime;\r\n    }\r\n    mapping  (uint=>List) public lists;\r\n    mapping (uint => address) public listToOwner;\r\n    mapping (uint => address) public listToFrom;\r\n    mapping (uint => uint) public listtype;//1.userfree;2.userpledge;3.takefree;4.takepledge;5.award;\r\n    mapping (address => uint256) public ownerListCount;\r\n\r\n    function _savelist(uint256 _types,uint256 _amount,address _user,uint _listtype) internal {\r\n        List  memory list = List(_types,_amount,1,uint32(block.timestamp));\r\n        listCount=listCount+1;\r\n        lists[listCount]=list;\r\n        ownerListCount[_user] = ownerListCount[_user]+1;\r\n        listToOwner[listCount] = _user;\r\n        \r\n        listtype[listCount] = _listtype;\r\n    }\r\n    \r\n    function admin_setfreetime(uint256 _id,uint256 _tt)  external onlyOwner  {\r\n        Listfrees[_id].endTime = _tt;\r\n    }\r\n    \r\n    function admin_setplegtime(uint256 _id,uint256 _tt)  external onlyOwner  {\r\n        Listpledges[_id].endTime = _tt;\r\n    }\r\n    \r\n    uint public freeCount = 0;\r\n    struct Listfree {\r\n        uint256 day;\r\n        uint256 amount;\r\n        uint256 status;\r\n        uint256 creatTime;\r\n        uint256 endTime;\r\n    }\r\n    mapping  (uint=>Listfree) public Listfrees;\r\n    mapping (uint => address) public listfreeToOwner;\r\n    mapping (address => uint256) public ownerListfreeCount;\r\n    function _savefree(uint256 _day ,address _user,uint256 _amount ) internal returns (uint256 backid){\r\n        Listfree  memory listfree = Listfree(_day,_amount/100,1,uint32(block.timestamp),(uint32(block.timestamp)+_day*time_day));\r\n        freeCount=freeCount+1;\r\n        Listfrees[freeCount]=listfree;\r\n        ownerListfreeCount[_user] = ownerListfreeCount[_user]+1;\r\n        listfreeToOwner[freeCount] = _user;\r\n        backid = freeCount;\r\n    }\r\n    \r\n    function checkfree(uint256 _amount) external view returns(uint256 num,uint256 ok){\r\n        num = usdt.balanceOf(msg.sender);\r\n        if(_amount<num){\r\n            ok = 1;\r\n        }\r\n        if(_amount<free_day){\r\n            ok = 0;\r\n        }\r\n        if(_amount>=num){\r\n            ok = 0;\r\n        }\r\n    }\r\n        //_mintTotal = 1000000 * 10**_decimals;  usdt_decimals token_decimals\r\n    function userfree(address _baba,uint256 _day) public  { //jiage jiage_gei jiage_tui\r\n        require(_baba!=msg.sender,\"Can't do it yourself\");\r\n        require(_day>=free_day,\"need more then 100 days\");\r\n        require(usdt.balanceOf(msg.sender)>=jiage,\"const Not enough token\");\r\n        uint256 dayss = (uint32(block.timestamp)-start_time)/time_day;\r\n        if (inviter[msg.sender] == address(0)) {\r\n            inviter[msg.sender] = _baba;\r\n        }\r\n        usdt.transferFrom(msg.sender,address(this), jiage_gei);//_decimals:18-3\r\n        uint256 backid = _savefree((_day+dayss),msg.sender,(_day*100/free_day)*free_profit);\r\n        _savelist(1 , free_profit/100,msg.sender,backid);\r\n        usdt.transferFrom(msg.sender,inviter[msg.sender], jiage_tui);//_decimals:18-5   eth:2,bsc:13\r\n        _savelist(5 , free_price*free_award/100000,msg.sender,backid);\r\n    }\r\n    \r\n    \r\n\r\n\r\n      \r\n       \r\n    function takefree(uint256 _id) public  {\r\n        require(listfreeToOwner[_id]==msg.sender,\"not yours\");\r\n        require(Listfrees[_id].endTime<uint32(block.timestamp),\"Not yet in time\");\r\n        uint256 dayss = (uint32(block.timestamp)-start_time)/time_day;\r\n        if(dayss>7){\r\n            dayss = 7;\r\n        }\r\n        uint256 money = free_profit*(1-(dayss/7));\r\n        Listfrees[_id].status = 0;\r\n        ownerListfreeCount[msg.sender] = ownerListfreeCount[msg.sender]-1;\r\n        token.transfer(msg.sender, money*10**18);//ok\r\n        _savelist(3 ,money,msg.sender,0);\r\n    }\r\n    \r\n    function oneoffree(uint256 _id) external view returns(uint256 day,uint256 starttime,uint256 endtime,uint256 ok){\r\n        day = Listfrees[_id].day;\r\n        starttime = Listfrees[_id].creatTime;\r\n        endtime = Listfrees[_id].endTime;\r\n        if(uint32(block.timestamp)>endtime){\r\n            ok = 1;\r\n        }else{\r\n            ok = 0;\r\n        }\r\n    }\r\n    \r\n    uint256 public pledgeCount = 0;\r\n    uint256 public pledgesum = 0;\r\n    struct Listpledge {\r\n        uint256 day;\r\n        uint256 amount;\r\n        uint256 amount_end;\r\n        uint256 status;\r\n        uint256 creatTime;\r\n        uint256 endTime;\r\n    }\r\n    mapping  (uint=>Listpledge) public Listpledges;\r\n    mapping (uint => address) public listpledgeToOwner;\r\n    mapping (address => uint256) public ownerListpledgeCount;\r\n    mapping (address => uint256) public ownerpledgesum;\r\n    function _savepledge(uint256 _day ,uint256 _num ,uint256 _num_end ,address _user) internal  returns (uint256 backid){\r\n        Listpledge  memory listpledge = Listpledge(_day,_num,_num_end,1,uint32(block.timestamp),(uint32(block.timestamp)+_day*time_day));\r\n        pledgeCount=pledgeCount+1;\r\n        pledgesum = pledgesum+_num_end;\r\n        Listpledges[pledgeCount]=listpledge;\r\n        ownerListpledgeCount[_user] = ownerListpledgeCount[_user]+1;\r\n        listpledgeToOwner[pledgeCount] = _user;\r\n        ownerpledgesum[_user] = ownerpledgesum[_user]+_num;\r\n        backid = pledgeCount;\r\n    }\r\n\r\n    function userpledge(address _baba,uint256 _day,uint256 _num) public  {\r\n        require(_baba!=msg.sender,\"Can't do it yourself\");\r\n        require(token.balanceOf(msg.sender)>=_num,\"Not enough token\");\r\n        if (inviter[msg.sender] == address(0)) {\r\n            inviter[msg.sender] = _baba;\r\n        }\r\n        uint256 dayss = (uint32(block.timestamp)-start_time)/time_day;\r\n        uint256 _num_end = (pledge_profit*100/(pledge_day+dayss))*_day*_num;\r\n        //require(token.balanceOf(address(this))>(pledgesum+_num_end/100)*10**18,\"const Not enough token\");\r\n        token.transferFrom(msg.sender,address(this), _num*10**18);\r\n        uint256 backid = _savepledge(_day,_num,_num_end/10000,msg.sender);\r\n        _savelist(2,_num,msg.sender,backid);\r\n    }\r\n        \r\n    function takepledge(uint256 _id) public  {\r\n        require(listpledgeToOwner[_id]==msg.sender,\"not yours\");\r\n        require(Listpledges[_id].endTime<uint32(block.timestamp),\"Not yet in time\");\r\n        token.transfer(msg.sender, Listpledges[_id].amount_end*10**18);\r\n        Listpledges[_id].status = 0;\r\n        ownerListpledgeCount[msg.sender] = ownerListpledgeCount[msg.sender]-1;\r\n        ownerpledgesum[msg.sender] = ownerpledgesum[msg.sender]-Listpledges[_id].amount;\r\n        _savelist(4,Listpledges[_id].amount_end,msg.sender,_id);\r\n    }\r\n    \r\n    function expect_pledge(uint256 _day,uint256 _num) external view returns(uint256 amount){\r\n        uint256 dayss = (uint32(block.timestamp)-start_time)/time_day;\r\n        amount = (pledge_profit/(pledge_day+dayss))*_day*_num;\r\n    }\r\n    \r\n    function oneofpledge(uint256 _id) external view returns(uint256 day,uint256 amount,uint256 amount_end,uint256 starttime,uint256 endtime,uint256 ok){\r\n        day = Listpledges[_id].day;\r\n        amount = Listpledges[_id].amount;\r\n        amount_end = Listpledges[_id].amount_end;\r\n        starttime = Listpledges[_id].creatTime;\r\n        endtime = Listpledges[_id].endTime;\r\n        if(uint32(block.timestamp)>endtime){\r\n            ok = 1;\r\n        }else{\r\n            ok = 0;\r\n        }\r\n    }\r\n\r\n    \r\n    function usdtandtoken() external view returns(ITRC20 _usdt,ITRC20 _token){\r\n        _usdt = usdt;\r\n        _token = token;\r\n    }\r\n\r\n    \r\n    function user_balance(address _user) external view returns(uint256 num_free,uint256 num_pledge,uint256 sum_pledge){\r\n        num_free = ownerListfreeCount[_user];\r\n        num_pledge = ownerListpledgeCount[_user];\r\n        sum_pledge = ownerpledgesum[_user];\r\n    }\r\n    \r\n    function adminsetusdtaddress(ITRC20 addressusdt,ITRC20 addresstoken)  external onlyOwner  {\r\n        usdt = addressusdt;\r\n        token = addresstoken;\r\n    }\r\n\r\n    function adminsetjiage(uint256 _jiage,uint256 _jiage_gei,uint256 _jiage_tui)  external onlyOwner  {\r\n        jiage = _jiage;\r\n        jiage_gei = _jiage_gei;\r\n        jiage_tui = _jiage_tui;\r\n    }\r\n//freeCount pledgeCount pledgesum\r\n    \r\n    function  admin_setcount( uint256 _freeCount,uint256 _pledgeCount,uint256 _pledgesum)  external onlyOwner {\r\n        freeCount = _freeCount;\r\n        pledgeCount = _pledgeCount;\r\n        pledgesum = _pledgesum;\r\n    }    \r\n\r\n    function  admin_tixian(address toaddress)  external onlyOwner {\r\n        uint256 qian = usdt.balanceOf(address(this));\r\n        usdt.transfer(toaddress, qian);\r\n    }    \r\n    \r\n\r\n    function  admin_set_free(uint256 _free_profit,uint256 _free_day,uint256 _free_price,uint256 _free_award)  external onlyOwner {\r\n        free_profit = _free_profit;\r\n        free_day = _free_day;\r\n        free_price = _free_price;\r\n        free_award = _free_award;\r\n    }    \r\n    \r\n    function  admin_set_starttime(uint256 _start_time )  external onlyOwner {\r\n        start_time = _start_time;\r\n    }\r\n\r\n    function  admin_set_pledge(uint256 _pledge_profit,uint256 _pledge_day)  external onlyOwner {\r\n        pledge_profit = _pledge_profit;\r\n        pledge_day = _pledge_day;\r\n    }  \r\n    \r\n    function  admin_set_time_day(uint256 _time_day)  external onlyOwner {\r\n        time_day = _time_day;\r\n    }  \r\n    \r\n    \r\n\r\n\r\n    constructor( ) {\r\n        _owner = msg.sender;\r\n        //guanli[_owner] = 1;\r\n        start_time = uint32(block.timestamp);\r\n    }\r\n\r\n\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Listfrees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"creatTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Listpledges\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"creatTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_free_profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_free_day\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_free_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_free_award\",\"type\":\"uint256\"}],\"name\":\"admin_set_free\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pledge_profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pledge_day\",\"type\":\"uint256\"}],\"name\":\"admin_set_pledge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_start_time\",\"type\":\"uint256\"}],\"name\":\"admin_set_starttime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time_day\",\"type\":\"uint256\"}],\"name\":\"admin_set_time_day\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_freeCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pledgeCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pledgesum\",\"type\":\"uint256\"}],\"name\":\"admin_setcount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tt\",\"type\":\"uint256\"}],\"name\":\"admin_setfreetime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tt\",\"type\":\"uint256\"}],\"name\":\"admin_setplegtime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toaddress\",\"type\":\"address\"}],\"name\":\"admin_tixian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_jiage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_jiage_gei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_jiage_tui\",\"type\":\"uint256\"}],\"name\":\"adminsetjiage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITRC20\",\"name\":\"addressusdt\",\"type\":\"address\"},{\"internalType\":\"contract ITRC20\",\"name\":\"addresstoken\",\"type\":\"address\"}],\"name\":\"adminsetusdtaddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"checkfree\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ok\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_day\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"expect_pledge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"free_award\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"free_day\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"free_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"free_profit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jiage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jiage_gei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jiage_tui\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listToFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listToOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listfreeToOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listpledgeToOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lists\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"types\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"creatTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listtype\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"oneoffree\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"starttime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endtime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ok\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"oneofpledge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"starttime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endtime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ok\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerListCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerListfreeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerListpledgeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerpledgesum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pledgeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pledge_day\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pledge_profit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pledgesum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start_time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"takefree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"takepledge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"time_day\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ITRC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract ITRC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtandtoken\",\"outputs\":[{\"internalType\":\"contract ITRC20\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"contract ITRC20\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"user_balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"num_free\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"num_pledge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sum_pledge\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baba\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"userfree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baba\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_day\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"userpledge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "POP", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0cdbf749ea6c268add0227b53dd30e1d8e3b24bf2f29a2820fd01875e33301b6"}