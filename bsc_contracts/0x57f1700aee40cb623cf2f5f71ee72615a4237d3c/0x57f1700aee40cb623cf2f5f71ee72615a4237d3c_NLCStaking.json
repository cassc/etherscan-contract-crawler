{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint);\r\n\r\n    function transfer(address reNLCient, uint amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address reNLCient, uint amount) external returns (bool);\r\n}\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() private view {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() external onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    function _reentrancyGuardEntered() private view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract NLCStaking is Ownable, ReentrancyGuard {\r\n    struct PoolInfo {\r\n        uint256 lockupDuration;\r\n        uint256 returnPer;\r\n    }\r\n    struct OrderInfo {\r\n        address beneficiary;\r\n        uint256 amount;\r\n        uint256 lockupDuration;\r\n        uint256 returnPer;\r\n        uint256 starttime;\r\n        uint256 endtime;\r\n        uint256 claimedReward;\r\n        bool claimed;\r\n    }\r\n    uint256 private constant _days90 = 90 days;\r\n    uint256 private constant _days190 = 190 days;\r\n    uint256 private constant _days280 = 280 days;\r\n    uint256 private constant _days360 = 360 days;\r\n    uint256 private constant _days420 = 420 days;\r\n    uint256 private constant _days680 = 680 days;\r\n\r\n    uint256 private constant _days365 = 365 days;\r\n    IERC20 public token;\r\n    bool public started = true;\r\n    uint256 public emergencyWithdrawFeesPercentage = 20;\r\n\r\n    uint256 private _90daysPercentage = 29;\r\n    uint256 private _190daysPercentage = 49;\r\n    uint256 private _280daysPercentage = 69;\r\n    uint256 private _360daysPercentage = 99;\r\n    uint256 private _420daysPercentage = 119;\r\n    uint256 private _680daysPercentage = 149;\r\n    uint256  public  minimumAmount = 30000 * 10 **9;\r\n    uint256 private latestOrderId = 0;\r\n    uint public totalStakers ; // use \r\n    uint public totalStaked ; // use \r\n    uint256 public totalStake = 0;\r\n    uint256 public totalWithdrawal = 0;\r\n    uint256 public totalRewardPending = 0;\r\n    uint256 public totalRewardsDistribution = 0;\r\n\r\n    mapping(uint256 => PoolInfo) public pooldata;\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => uint256) public totalRewardEarn;\r\n    mapping(uint256 => OrderInfo) public orders;\r\n    mapping(address => uint256[]) private orderIds;\r\n\r\n    mapping(address => mapping(uint => bool)) public hasStaked;\r\n    mapping(uint => uint) public stakeOnPool;\r\n    mapping(uint => uint) public rewardOnPool;\r\n    mapping(uint => uint) public stakersPlan;\r\n\r\n    event Deposit(\r\n        address indexed user,\r\n        uint256 indexed lockupDuration,\r\n        uint256 amount,\r\n        uint256 returnPer\r\n    );\r\n    event Withdraw(\r\n        address indexed user,\r\n        uint256 amount,\r\n        uint256 reward,\r\n        uint256 total\r\n    );\r\n    event WithdrawAll(address indexed user, uint256 amount);\r\n    event RewardClaimed(address indexed user, uint256 reward);\r\n    event RefRewardClaimed(address indexed user, uint256 reward);\r\n\r\n    constructor(address _token, bool _started) {\r\n        token = IERC20(_token);\r\n        started = _started;\r\n\r\n        pooldata[90].lockupDuration = _days90; // 90 days\r\n        pooldata[90].returnPer = _90daysPercentage;\r\n\r\n        pooldata[190].lockupDuration = _days190; // 190 days\r\n        pooldata[190].returnPer = _190daysPercentage;\r\n\r\n         pooldata[280].lockupDuration = _days280; // 280 days\r\n        pooldata[280].returnPer = _280daysPercentage;\r\n\r\n         pooldata[360].lockupDuration = _days360; // 360 days\r\n        pooldata[360].returnPer = _360daysPercentage;\r\n\r\n         pooldata[420].lockupDuration = _days420; // 420 days\r\n        pooldata[420].returnPer = _420daysPercentage;\r\n\r\n         pooldata[680].lockupDuration = _days680; // 680 days\r\n        pooldata[680].returnPer = _680daysPercentage;\r\n\r\n\r\n    }\r\n\r\n    function deposit(\r\n        uint256 _amount,\r\n        uint256 _lockupDuration\r\n    ) external {\r\n      \r\n        require(_amount >= minimumAmount , \" Minimum Stake amount is 30000\" );\r\n        PoolInfo storage pool = pooldata[_lockupDuration];\r\n        require(\r\n            pool.lockupDuration > 0,\r\n            \"TokenStakingNLC: asked pool does not exist\"\r\n        );\r\n        require(started, \"TokenStakingNLC: staking not yet started\");\r\n        require(_amount > 0, \"TokenStakingNLC: stake amount must be non zero\");\r\n\r\n        uint256 APY = (_amount * pool.returnPer) / 100;\r\n        uint256 userReward = (APY * pool.lockupDuration) / _days365;\r\n        require(\r\n            token.transferFrom(_msgSender(), address(this), _amount),\r\n            \"TokenStakingNLC: token transferFrom via deposit not succeeded\"\r\n        );\r\n\r\n        orders[++latestOrderId] = OrderInfo(\r\n            _msgSender(),\r\n            _amount,\r\n            pool.lockupDuration,\r\n            pool.returnPer,\r\n            block.timestamp,\r\n            block.timestamp + pool.lockupDuration,\r\n            0,\r\n            false\r\n        );\r\n\r\n          if (!hasStaked[msg.sender][_lockupDuration]) {\r\n             stakersPlan[_lockupDuration] = stakersPlan[_lockupDuration] + 1;\r\n             totalStakers = totalStakers + 1 ;\r\n        }\r\n\r\n        hasStaked[msg.sender][_lockupDuration] = true;\r\n        stakeOnPool[_lockupDuration] = stakeOnPool[_lockupDuration] + _amount ;\r\n        totalStaked = totalStaked + _amount ;\r\n        totalStake += _amount;\r\n        totalRewardPending += userReward;\r\n        balanceOf[_msgSender()] += _amount;\r\n        orderIds[_msgSender()].push(latestOrderId);\r\n        emit Deposit(\r\n            _msgSender(),\r\n            pool.lockupDuration,\r\n            _amount,\r\n            pool.returnPer\r\n        );\r\n    }\r\n\r\n\r\n    function withdraw(uint256 orderId) external nonReentrant {\r\n        require(\r\n            orderId <= latestOrderId,\r\n            \"TokenStakingNLC: INVALID orderId, orderId greater than latestOrderId\"\r\n        );\r\n\r\n        OrderInfo storage orderInfo = orders[orderId];\r\n        require(\r\n            _msgSender() == orderInfo.beneficiary,\r\n            \"TokenStakingNLC: caller is not the beneficiary\"\r\n        );\r\n        require(!orderInfo.claimed, \"TokenStakingNLC: order already unstaked\");\r\n\r\n          require(\r\n            block.timestamp >= orderInfo.endtime,\r\n            \"TokenStakingNLC: stake locked until lock duration completion\"\r\n        );\r\n    \r\n        uint256 claimAvailable = pendingRewards(orderId);\r\n        uint256 total = orderInfo.amount + claimAvailable;\r\n\r\n        totalRewardEarn[_msgSender()] += claimAvailable;\r\n        totalRewardsDistribution += claimAvailable;\r\n        orderInfo.claimedReward += claimAvailable;\r\n        totalRewardPending -= claimAvailable;\r\n\r\n        balanceOf[_msgSender()] -= orderInfo.amount;\r\n        totalWithdrawal += orderInfo.amount;\r\n        orderInfo.claimed = true;\r\n\r\n        require(\r\n            token.transfer(address(_msgSender()), total),\r\n            \"TokenStakingNLC: token transfer via withdraw not succeeded\"\r\n        );\r\n        rewardOnPool[orderInfo.lockupDuration] = rewardOnPool[orderInfo.lockupDuration] + claimAvailable ;\r\n        emit Withdraw(_msgSender(), orderInfo.amount, claimAvailable, total);\r\n    }\r\n\r\n\r\n    function claimRewards(uint256 orderId) external nonReentrant {\r\n        require(\r\n            orderId <= latestOrderId,\r\n            \"TokenStakingNLC: INVALID orderId, orderId greater than latestOrderId\"\r\n        );\r\n\r\n        OrderInfo storage orderInfo = orders[orderId];\r\n        require(\r\n            _msgSender() == orderInfo.beneficiary,\r\n            \"TokenStakingNLC: caller is not the beneficiary\"\r\n        );\r\n        require(!orderInfo.claimed, \"TokenStakingNLC: order already unstaked\");\r\n\r\n        uint256 claimAvailable = pendingRewards(orderId);\r\n        totalRewardEarn[_msgSender()] += claimAvailable;\r\n        totalRewardsDistribution += claimAvailable;\r\n        totalRewardPending -= claimAvailable;\r\n        orderInfo.claimedReward += claimAvailable;\r\n\r\n        require(\r\n            token.transfer(address(_msgSender()), claimAvailable),\r\n            \"TokenStakingNLC: token transfer via claim rewards not succeeded\"\r\n        );\r\n        rewardOnPool[orderInfo.lockupDuration] = rewardOnPool[orderInfo.lockupDuration] + claimAvailable ;\r\n        emit RewardClaimed(address(_msgSender()), claimAvailable);\r\n    }\r\n\r\n    function pendingRewards(uint256 orderId) public view returns (uint256) {\r\n        require(\r\n            orderId <= latestOrderId,\r\n            \"TokenStakingNLC: INVALID orderId, orderId greater than latestOrderId\"\r\n        );\r\n\r\n        OrderInfo storage orderInfo = orders[orderId];\r\n        if (!orderInfo.claimed) {\r\n            if (block.timestamp >= orderInfo.endtime) {\r\n                uint256 APY = (orderInfo.amount * orderInfo.returnPer) / 100;\r\n                uint256 reward = (APY * orderInfo.lockupDuration) / _days365;\r\n                uint256 claimAvailable = reward - orderInfo.claimedReward;\r\n                return claimAvailable;\r\n            } else {\r\n                uint256 stakeTime = block.timestamp - orderInfo.starttime;\r\n                uint256 APY = (orderInfo.amount * orderInfo.returnPer) / 100;\r\n                uint256 reward = (APY * stakeTime) / _days365;\r\n                uint256 claimAvailableNow = reward - orderInfo.claimedReward;\r\n                return claimAvailableNow;\r\n            }\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n function emergencyWithdraw(uint256 orderId) external nonReentrant {\r\n        require(\r\n            orderId <= latestOrderId,\r\n            \"TokenStakingNLC: INVALID orderId, orderId greater than latestOrderId\"\r\n        );\r\n\r\n        OrderInfo storage orderInfo = orders[orderId];\r\n        require(\r\n            _msgSender() == orderInfo.beneficiary,\r\n            \"TokenStakingNLC: caller is not the beneficiary\"\r\n        );\r\n        require(!orderInfo.claimed, \"TokenStakingNLC: order already unstaked\");\r\n\r\n        uint256 claimAvailable = pendingRewards(orderId);\r\n        uint256 fees = (orderInfo.amount * emergencyWithdrawFeesPercentage) /\r\n            100;\r\n        orderInfo.amount -= fees;\r\n        uint256 total = orderInfo.amount + claimAvailable;\r\n\r\n        totalRewardEarn[_msgSender()] += claimAvailable;\r\n        totalRewardsDistribution += claimAvailable;\r\n        totalRewardPending -= claimAvailable;\r\n        orderInfo.claimedReward += claimAvailable;\r\n\r\n        uint256 APY = ((orderInfo.amount + fees) * orderInfo.returnPer) / 100;\r\n        uint256 totalReward = (APY * orderInfo.lockupDuration) / _days365;\r\n        totalRewardPending -= (totalReward - orderInfo.claimedReward);\r\n\r\n        balanceOf[_msgSender()] -= (orderInfo.amount + fees);\r\n        totalWithdrawal += (orderInfo.amount + fees);\r\n        orderInfo.claimed = true;\r\n\r\n        require(\r\n            token.transfer(address(_msgSender()), total),\r\n            \"TokenStakingNLC: token transfer via emergency withdraw not succeeded\"\r\n        );\r\n         require(\r\n            token.transfer(0x6B13e81a716eb305994fB48a8a60b44c8A43eDC8, fees),\r\n            \"TokenStakingNLC: token transfer via emergency withdraw to admin is not succeeded\"\r\n        );\r\n        emit WithdrawAll(_msgSender(), total);\r\n    }\r\n\r\n\r\n\r\n    function toggleStaking(bool _start) external onlyOwner returns (bool) {\r\n        started = _start;\r\n        return true;\r\n    }\r\n\r\n    function investorOrderIds(\r\n        address investor\r\n    ) external view returns (uint256[] memory ids) {\r\n        uint256[] memory arr = orderIds[investor];\r\n        return arr;\r\n    }\r\n\r\n    function _totalRewards(address ref) private view returns (uint256) {\r\n        uint256 rewards;\r\n        uint256[] memory arr = orderIds[ref];\r\n        for (uint256 i = 0; i < arr.length; i++) {\r\n            OrderInfo memory order = orders[arr[i]];\r\n            rewards += (order.claimedReward + pendingRewards(arr[i]));\r\n        }\r\n        return rewards;\r\n    }\r\n\r\n\r\n    function transferAnyERC20Token(\r\n        address payaddress,\r\n        address tokenAddress,\r\n        uint256 amount\r\n    ) external onlyOwner {\r\n        IERC20(tokenAddress).transfer(payaddress, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_started\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lockupDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"returnPer\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RefRewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawAll\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockupDuration\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdrawFeesPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hasStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"investorOrderIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"returnPer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"starttime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endtime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedReward\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pooldata\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockupDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"returnPer\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardOnPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeOnPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakersPlan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"started\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_start\",\"type\":\"bool\"}],\"name\":\"toggleStaking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalRewardEarn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardPending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardsDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"payaddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NLCStaking", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000005f320c3b8f82acfe8f2bb1c85d63aa66a7ff524f0000000000000000000000000000000000000000000000000000000000000001", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d025a6541d4057bc0cd700fb9da993396f9d08efb643fc0b18f006723bfbd8d0"}