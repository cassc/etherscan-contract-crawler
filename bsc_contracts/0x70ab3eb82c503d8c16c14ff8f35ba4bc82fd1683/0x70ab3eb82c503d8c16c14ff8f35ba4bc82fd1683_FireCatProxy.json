{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/FireCatProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IPancakeFactory} from \\\"../src/interfaces/IPancakeFactory.sol\\\";\\nimport {IPancakeRouter02} from \\\"../src/interfaces/IPancakeRouter02.sol\\\";\\nimport {IFireCatReserves} from \\\"../src/interfaces/IFireCatReserves.sol\\\";\\nimport {IFireCatTreasury} from \\\"../src/interfaces/IFireCatTreasury.sol\\\";\\nimport {FireCatTransfer} from \\\"../src/utils/FireCatTransfer.sol\\\";\\nimport {IFireCatProxy} from \\\"../src/interfaces/IFireCatProxy.sol\\\";\\nimport {IFireCatNFT} from \\\"../src/interfaces/IFireCatNFT.sol\\\";\\nimport {IWETH} from \\\"src/interfaces/IWETH.sol\\\";\\n\\n/**\\n * @title FireCat's Invest Proxy Contract\\n * @notice Invest logic\\n * @author FireCat Finance\\n */\\ncontract FireCatProxy is IFireCatProxy, Ownable, ReentrancyGuard  {\\n    using SafeMath for uint256;\\n\\n    event Swap(address tokenIn, address tokenOut, uint256 amountIn, uint256 amountOut);\\n    event AddLiquidity(address tokenA, address tokenB, uint256 amountA, uint256 amountB);\\n    event SetLiquidityConfig(address tokenA, address tokenB);\\n    event SetInvestAmount(uint256 amount);\\n    event SetLPSlippage(uint256 numerator, uint256 denominator);\\n    event SetAssetsInFactor(uint256 numerator, uint256 denominator);\\n    event SetFireCatNFT(address fireCatNFT_);\\n    event SetFireCatReserves(address fireCatReserves_);\\n    event SetFireCatTreasury(address fireCatTreasury_);\\n    event SetSwapRouter(address swapRouter_);\\n    event WithdrawRemaining(address user_, address token_, uint256 amount_);\\n    event Invest(address user, uint256 amount, uint256 tokenId);\\n\\n    IWETH wethToken;\\n    address public WETH;\\n    address public fireCatNFT;\\n    address public fireCatReserves;\\n    address public fireCatTreasury;\\n    address public swapRouter;\\n    uint256 public investAmount;\\n\\n    /**\\n    * @dev The minimum amount of token to provide liquidity.  _slippageNumerator / _slippageDenominator = 0.995\\n    */\\n    uint256 private _slippageNumerator = 995;\\n    uint256 private _slippageDenominator = 1000;\\n\\n    /**\\n    * @dev 95% funds transfer to FireCatTreasury.  _assetsInNumerator / _assetsInDenominator = 0.95\\n    */\\n    uint256 private _assetsInNumerator = 95;\\n    uint256 private _assetsInDenominator = 100;\\n\\n    /**\\n    * @dev Add liquidity pool params: LPToken, tokenA, tokenB.\\n    */\\n    address private _liquidityPool;\\n    address private _tokenA;\\n    address private _tokenB;\\n    \\n    receive() external payable{}\\n\\n    fallback() external payable {}\\n\\n    constructor(\\n        address weth_,\\n        address fireCatNFT_, \\n        address fireCatReserves_,\\n        address fireCatTreasury_,\\n        address swapRouter_, \\n        uint256 investAmount_\\n    ) {\\n        WETH = weth_;\\n        wethToken = IWETH(weth_);\\n        fireCatNFT = fireCatNFT_;\\n        fireCatReserves = fireCatReserves_;\\n        fireCatTreasury = fireCatTreasury_;\\n        swapRouter = swapRouter_;\\n        investAmount = investAmount_;\\n    }\\n\\n    /// @inheritdoc IFireCatProxy\\n    function mintAllowed(address user) public view returns (bool) {\\n        return !IFireCatNFT(fireCatNFT).hasMinted(user);\\n    }\\n\\n    /// @inheritdoc IFireCatProxy\\n    function treasuryToken() public view returns (address) {\\n        return IFireCatTreasury(fireCatTreasury).treasuryToken();\\n    }\\n\\n    /// @inheritdoc IFireCatProxy\\n    function reservesToken() public view returns (address) {\\n        return IFireCatReserves(fireCatReserves).reservesToken();\\n    }\\n    \\n    /// @inheritdoc IFireCatProxy\\n    function assetsInFactor() public view returns (uint256, uint256) {\\n        return (_assetsInNumerator, _assetsInDenominator);\\n    }\\n\\n    /// @inheritdoc IFireCatProxy\\n    function liquiditySlippage() public view returns (uint256, uint256) {\\n        return (_slippageNumerator, _slippageDenominator);\\n    }\\n    \\n    /// @inheritdoc IFireCatProxy\\n    function liquidityMinProvide(uint256 amount) public view returns (uint256) {\\n        return amount * _slippageNumerator / _slippageDenominator;\\n    }\\n\\n    /// @inheritdoc IFireCatProxy\\n    function getAssetsIn(uint256 amount) public view returns (uint256) {\\n        return amount * _assetsInNumerator / _assetsInDenominator;\\n    }\\n\\n    /// @inheritdoc IFireCatProxy\\n    function liquidityPool() public view returns (address) {\\n        return _liquidityPool;\\n    }\\n\\n    /// @inheritdoc IFireCatProxy\\n    function tokenA() public view returns (address) {\\n        return _tokenA;\\n    }\\n\\n    /// @inheritdoc IFireCatProxy\\n    function tokenB() public view returns (address) {\\n        return _tokenB;\\n    }\\n\\n    /**\\n    * @notice deposit ETH to the WETH contract.\\n    * @dev Call deposit method from IWETH.\\n    * @param amount uint256.\\n    * @return numOfWETH.\\n    */\\n    function _depositWETH(uint256 amount) internal returns (uint256) {\\n        uint256 prev = wethToken.balanceOf(address(this));\\n        wethToken.deposit{value: amount}();\\n        uint256 curr = wethToken.balanceOf(address(this));\\n        return curr.sub(prev);\\n    }\\n\\n    /**\\n    * @notice transfer token to the reserves contract.\\n    * @dev Call addReserves method from fireCatReserves.\\n    * @param token address.\\n    */\\n    function _clean(address token) internal {\\n        IERC20 _token = IERC20(token);\\n        uint256 prevBalance = _token.balanceOf(address(this));\\n        if (prevBalance > 0) {\\n            _token.approve(fireCatReserves, prevBalance);\\n            _token.transfer(fireCatReserves, prevBalance);\\n            uint256 currBalance = _token.balanceOf(address(this));\\n            require(currBalance == 0, \\\"PXY:E06\\\");\\n        }\\n    }\\n\\n    /**\\n    * @notice Swap the amountIn_ of tokenIn to tokenOut.\\n    * @dev Call swapExactTokensForTokens method from IPancakeRouter02.\\n    * @param tokenIn address.\\n    * @param tokenOut address.\\n    * @param amountIn_ uint256.\\n    * @return actualOut\\n    */\\n    function _swap(address tokenIn, address tokenOut, uint256 amountIn_) internal returns (uint256) {\\n        address[] memory path = new address[](2);\\n        path[0] = tokenIn;\\n        path[1] = tokenOut;\\n\\n        // Calculate the amount of exchange result.  [swapIn, swapOut]\\n        uint256[] memory amounts = IPancakeRouter02(swapRouter).getAmountsOut(amountIn_, path);\\n\\n        IERC20(tokenIn).approve(swapRouter, amountIn_);\\n        uint256[] memory SwapResult = IPancakeRouter02(swapRouter).swapExactTokensForTokens(\\n            amountIn_,  // the amount of input tokens.\\n            amounts[1],  // The minimum amount tokens to receive.\\n            path,  // An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses must exist and have liquidity.\\n            address(this),  // Address of recipient.\\n            block.timestamp  // Unix timestamp deadline by which the transaction must confirm.\\n        );\\n\\n        uint256 actualIn = SwapResult[0];\\n        uint256 actualOut = SwapResult[1];\\n        require(actualIn > 0 && actualOut > 0, \\\"PXY:E02\\\");\\n        emit Swap(tokenIn, tokenOut, actualIn, actualOut);\\n        return actualOut;\\n    }\\n\\n    /**\\n    * @notice Add liquidity to exact pool.\\n    * @dev Call addLiquidity method from IPancakeRouter02.\\n    * @param tokenA_ address\\n    * @param tokenB_ address\\n    * @param amountA_ uint256\\n    * @param amountB_ uint256\\n    * @return actualAddLP\\n    */\\n    function _addLiquidity(address tokenA_, address tokenB_, uint256 amountA_, uint256 amountB_) internal returns (uint256) {\\n        IERC20(tokenA_).approve(swapRouter, amountA_);\\n        IERC20(tokenB_).approve(swapRouter, amountB_);\\n        \\n        uint256 addBefore = IERC20(_liquidityPool).balanceOf(address(this));\\n        IPancakeRouter02(swapRouter).addLiquidity(\\n            tokenA_,  // The contract address of the tokenA to add liquidity.\\n            tokenB_,  // The contract address of the tokenB to add liquidity.\\n            amountA_,  // The amount of tokenA you'd like to provide as liquidity.\\n            amountB_, // The amount of toeknB you'd like to provide as liquidity.\\n            liquidityMinProvide(amountA_),  // The minimum amount of the tokenA to provide (slippage impact).\\n            liquidityMinProvide(amountB_),  // The minimum amount of the tokenB to provide (slippage impact).\\n            address(this),  // Address of LP Token recipient.\\n            block.timestamp\\n        );\\n\\n        uint256 addAfter = IERC20(_liquidityPool).balanceOf(address(this));\\n        uint256 actualAddLP = addAfter.sub(addBefore);\\n        require(actualAddLP > 0, \\\"PXY:E03\\\");\\n        emit AddLiquidity(tokenA_, tokenB_, amountA_, amountB_);\\n        return actualAddLP;\\n    }\\n    \\n    /**\\n    * @notice Deposit LP into the treasury Contract.\\n    * @dev Call addTreasury method from fireCatTreasury.\\n    * @param user address.\\n    * @param actualAddLP uin256. \\n    */\\n    function _transferInTreasury(address user, uint256 actualAddLP) internal {\\n        require(treasuryToken() == _liquidityPool, \\\"PXY:E07\\\");\\n\\n        uint256 tokenId = IFireCatNFT(fireCatNFT).freshTokenId();\\n        IERC20(treasuryToken()).approve(fireCatTreasury, actualAddLP);\\n        uint256 actualAddTreasury = IFireCatTreasury(fireCatTreasury).addTreasury(user, tokenId, actualAddLP);\\n        require(actualAddTreasury > 0, \\\"PXY:E04\\\");\\n    }\\n\\n    /**\\n    * @notice Deposit USDT into the reserves Contract, and transfer all tokens to the reserves contract.\\n    * @dev Call addReserves method from fireCatReserves.\\n    * @param user address.\\n    */\\n    function _transferInReserves(address user) internal {\\n        IERC20 _reservesToken = IERC20(reservesToken());\\n\\n        uint256 prevBalance = _reservesToken.balanceOf(address(this));\\n        _reservesToken.approve(fireCatReserves, prevBalance);\\n        uint256 actualAddReserves = IFireCatReserves(fireCatReserves).addReserves(user, prevBalance);\\n        require(actualAddReserves > 0, \\\"PXY:E05\\\");\\n\\n        _clean(WETH);\\n        _clean(_tokenA);\\n        _clean(_tokenB);\\n    }\\n\\n    /**\\n    * @notice Call contract method from NFT.\\n    * @dev proxyMint is only for proxy contract.\\n    * @param to address.\\n    * @return tokenId uint256.\\n    */\\n    function _mint(address to) internal returns (uint256) {\\n        return IFireCatNFT(fireCatNFT).proxyMint(to);\\n    }\\n\\n    /// @inheritdoc IFireCatProxy\\n    function setLiquidityConfig(address tokenA_, address tokenB_) external onlyOwner {\\n        _liquidityPool = IPancakeFactory(IPancakeRouter02(swapRouter).factory()).getPair(tokenA_, tokenB_);\\n        _tokenA = tokenA_;\\n        _tokenB = tokenB_;\\n        emit SetLiquidityConfig(tokenA_, tokenB_);\\n    }\\n\\n    /// @inheritdoc IFireCatProxy\\n    function setInvestAmount(uint256 amount) external onlyOwner {\\n        investAmount = amount;\\n        emit SetInvestAmount(amount);\\n    }\\n   \\n    /// @inheritdoc IFireCatProxy\\n    function setLPSlippage(uint256 numerator, uint256 denominator) external onlyOwner {\\n        _slippageNumerator = numerator;\\n        _slippageDenominator = denominator;\\n        emit SetLPSlippage(numerator, denominator);\\n    }\\n    \\n    /// @inheritdoc IFireCatProxy\\n    function setAssetsInFactor(uint256 numerator, uint256 denominator) external onlyOwner {\\n        _assetsInNumerator = numerator;\\n        _assetsInDenominator = denominator;\\n        emit SetAssetsInFactor(numerator, denominator);\\n    }\\n\\n    /// @inheritdoc IFireCatProxy\\n    function setFireCatNFT(address fireCatNFT_) external onlyOwner {\\n        fireCatNFT = fireCatNFT_;\\n        emit SetFireCatNFT(fireCatNFT_);\\n    }\\n    \\n    /// @inheritdoc IFireCatProxy\\n    function setFireCatReserves(address fireCatReserves_) external onlyOwner {\\n        fireCatReserves = fireCatReserves_;\\n        emit SetFireCatReserves(fireCatReserves_);\\n    }\\n\\n    /// @inheritdoc IFireCatProxy\\n    function setFireCatTreasury(address fireCatTreasury_) external onlyOwner {\\n        fireCatTreasury = fireCatTreasury_;\\n        emit SetFireCatTreasury(fireCatTreasury_);\\n    }\\n\\n    /// @inheritdoc IFireCatProxy\\n    function setSwapRouter(address swapRouter_) external onlyOwner {\\n        swapRouter = swapRouter_;\\n        emit SetSwapRouter(swapRouter_);\\n    }\\n    \\n    /// @inheritdoc IFireCatProxy\\n    function invest() external payable nonReentrant returns (uint256) {\\n        require(msg.value == investAmount, \\\"PXY:E00\\\");\\n        require(mintAllowed(msg.sender), \\\"PXY:E01\\\");\\n        \\n        // ETH deposit to WETH contract.\\n        uint256 wethAmount = _depositWETH(msg.value);\\n\\n        // swap all WETH for token A\\n        uint256 actualOutA = _swap(WETH, _tokenA, wethAmount);\\n\\n        // Get 95% of token A, Swap half of token A for token B.\\n        uint256 liquidityAmountA = getAssetsIn(actualOutA).div(2);\\n        uint256 liquidityAmountB = _swap(_tokenA, _tokenB, liquidityAmountA);\\n\\n        // add liquidity to liquidity pool.\\n        uint256 actualAddLP = _addLiquidity(_tokenA, _tokenB, liquidityAmountA, liquidityAmountB);\\n\\n        _transferInTreasury(msg.sender, actualAddLP);\\n        _transferInReserves(msg.sender);\\n\\n        uint256 newTokenId =  _mint(msg.sender);\\n        emit Invest(msg.sender, msg.value, newTokenId);\\n        return newTokenId;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IPancakeFactory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IPancakeFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\"\r\n    },\r\n    \"src/interfaces/IPancakeRouter02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IPancakeRouter01.sol';\\n\\ninterface IPancakeRouter02 is IPancakeRouter01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\"\r\n    },\r\n    \"src/interfaces/IFireCatReserves.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\n/**\\n* @notice IFireCatReserves\\n*/\\ninterface IFireCatReserves {\\n    /**\\n    * @notice All reserves of contract.\\n    * @dev Fetch data from _totalReserves.\\n    * @return totalReserves.\\n    */\\n    function totalReserves() external view returns (uint256);\\n\\n    /**\\n    * @notice check reserves by address.\\n    * @dev Fetch reserves from _userReserves.\\n    * @param user address.\\n    * @return reserves.\\n    */\\n    function reservesOf(address user) external view returns (uint256);\\n\\n    /**\\n    * @notice The reserves token of contract.\\n    * @dev Fetch data from _reservesToken.\\n    * @return reservesToken.\\n    */\\n    function reservesToken() external view returns (address);\\n\\n    /**\\n    * @notice The interface of reserves adding.\\n    * @dev transfer WBNB to contract.\\n    * @param user address.\\n    * @param addAmount uint256.\\n    * @return actualAddAmount.\\n    */\\n    function addReserves(address user, uint256 addAmount) external returns (uint256);\\n\\n    /**\\n    * @notice The interface of reserves withdrawn.\\n    * @dev Transfer WBNB to owner.\\n    * @param amount uint256.\\n    * @return actualSubAmount.\\n    */\\n    function withdrawReserves(uint256 amount) external returns (uint);\\n\\n    /**\\n    * @notice The interface of IERC20 withdrawn, not include reserves token.\\n    * @dev Trasfer token to owner.\\n    * @param amount uint256.\\n    * @return actualSubAmount.\\n    */\\n    function withdrawRemaining(address token, uint256 amount) external returns (uint);\\n\\n    /**\\n    * @notice set the fireCat proxy contract.\\n    * @dev set to _fireCatProxy.\\n    * @param fireCatProxy address.\\n    */\\n    function setFireCatProxy(address fireCatProxy) external;\\n}\"\r\n    },\r\n    \"src/interfaces/IFireCatTreasury.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\n/**\\n* @notice IFireCatTreasury\\n*/\\ninterface IFireCatTreasury {\\n\\n    /**\\n    * @notice All treasury of contract.\\n    * @dev Fetch data from _totalTreasury.\\n    * @return totalTreasury.\\n    */\\n    function totalTreasury() external view returns (uint256);\\n\\n    /**\\n    * @notice check treasury by address.\\n    * @dev Fetch treasury from _treasurys.\\n    * @param tokenId uint256.\\n    * @return treasury.\\n    */\\n    function treasuryOf(uint256 tokenId) external view returns (uint256);\\n\\n    /**\\n    * @notice The treasury token of contract.\\n    * @dev Fetch data from _treasuryToken.\\n    * @return treasuryToken.\\n    */\\n    function treasuryToken() external view returns (address);\\n\\n    /**\\n    * @notice The interface of treasury adding.\\n    * @dev add liquidity pool token to contract.\\n    * @param user address.\\n    * @param tokenId uint256.\\n    * @param addAmount uint256.\\n    * @return actualAddAmount.\\n    */\\n    function addTreasury(address user, uint256 tokenId, uint256 addAmount) external returns (uint);\\n    /**\\n    * @notice The interface of treasury exchange.\\n    * @dev Exchange LP token from NFT.\\n    * @param tokenId uint256.\\n    * @return actualSubAmount.\\n    */\\n    function swapTreasury(uint256 tokenId) external returns (uint);\\n\\n    /**\\n    * @notice The interface of treasury withdrawn.\\n    * @dev Trasfer LP Token to owner.\\n    * @param amount uint256.\\n    * @return actualSubAmount.\\n    */\\n    function withdrawTreasury(uint256 amount) external returns (uint);\\n\\n    /**\\n    * @notice The interface of IERC20 withdrawn, not include treausury token.\\n    * @dev Trasfer token to owner.\\n    * @param amount uint256.\\n    * @return actualSubAmount.\\n    */\\n    function withdrawRemaining(address token, uint256 amount) external returns (uint);\\n\\n    /**\\n    * @notice The exchange switch of the treasury.\\n    * @dev set bool to swapOn.\\n    * @param swapOn_ bool.\\n    */\\n    function setSwapOn(bool swapOn_) external;\\n    \\n    /**\\n    * @notice set the fireCat proxy contract.\\n    * @dev set to fireCatProxy.\\n    * @param fireCatProxy_ address.\\n    */\\n    function setFireCatProxy(address fireCatProxy_) external;\\n\\n    /**\\n    * @notice set the fireCat NFT contract.\\n    * @dev set to fireCatNFT.\\n    * @param fireCatNFT_ address.\\n    */\\n    function setFireCatNFT(address fireCatNFT_) external;\\n}\"\r\n    },\r\n    \"src/utils/FireCatTransfer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract FireCatTransfer is Ownable, ReentrancyGuard {\\n\\n    event Withdraw(address sender_, address token_, uint256 amount_);\\n\\n     /**\\n     * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\\n     * @param token_ address.\\n     * @param from_ address.\\n     * @param amount_ uint.\\n     * @return transfer_num.\\n     */\\n    function doTransferIn(address token_, address from_, uint amount_) internal returns (uint) {\\n        uint balanceBefore = IERC20(token_).balanceOf(address(this));\\n        IERC20(token_).transferFrom(from_, address(this), amount_);\\n\\n        bool success;\\n        assembly {\\n            switch returndatasize()\\n                case 0 {                       // This is a non-standard ERC-20\\n                    success := not(0)          // set success to true\\n                }\\n                case 32 {                      // This is a compliant ERC-20\\n                    returndatacopy(0, 0, 32)\\n                    success := mload(0)        // Set `success = returndata` of external call\\n                }\\n                default {                      // This is an excessively non-compliant ERC-20, revert.\\n                    revert(0, 0)\\n                }\\n        }\\n        require(success, \\\"TOKEN_TRANSFER_IN_FAILED\\\");\\n        uint balanceAfter = IERC20(token_).balanceOf(address(this));\\n        require(balanceAfter >= balanceBefore, \\\"TOKEN_TRANSFER_IN_OVERFLOW\\\");\\n        return balanceAfter - balanceBefore;  // underflow already checked above, just subtract\\n    }\\n\\n    /**\\n     * @dev Performs a transfer out, ideally returning an explanatory error code upon failure tather than reverting.\\n     *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\\n     *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\\n     * @param token_ address.\\n     * @param to_ address.\\n     * @param amount_ uint.\\n     * @return transfer_num.\\n     */\\n    function doTransferOut(address token_, address to_, uint256 amount_) internal returns (uint) {\\n        uint balanceBefore = IERC20(token_).balanceOf(address(this));\\n        IERC20(token_).transfer(to_, amount_);\\n\\n        bool success;\\n        assembly {\\n            switch returndatasize()\\n                case 0 {                      // This is a non-standard ERC-20\\n                    success := not(0)          // set success to true\\n                }\\n                case 32 {                     // This is a compliant ERC-20\\n                    returndatacopy(0, 0, 32)\\n                    success := mload(0)        // Set `success = returndata` of external call\\n                }\\n                default {                     // This is an excessively non-compliant ERC-20, revert.\\n                    revert(0, 0)\\n                }\\n        }\\n        require(success, \\\"TOKEN_TRANSFER_IN_FAILED\\\");\\n        uint balanceAfter = IERC20(token_).balanceOf(address(this));\\n        require(balanceAfter <= balanceBefore, \\\"TOKEN_TRANSFER_IN_OVERFLOW\\\");\\n        return balanceBefore - balanceAfter;  // underflow already checked above, just subtract\\n    }\\n\\n    /**\\n    * @notice The interface of IERC20 token withdrawn.\\n    * @dev Call doTransferOut, transfer token to owner.\\n    * @param token address.\\n    * @param amount uint256.\\n    * @return actualSubAmount.\\n    */\\n    function withdraw(address token, uint256 amount) internal returns (uint) {\\n        require(token != address(0), \\\"TOKEN_CANT_BE_ZERO\\\");\\n        require(IERC20(token).balanceOf(address(this)) >= amount, \\\"NOT_ENOUGH_TOKEN\\\");\\n        IERC20(token).approve(msg.sender, amount);\\n        uint256 actualSubAmount = doTransferOut(token, msg.sender, amount);\\n        emit Withdraw(msg.sender, token, actualSubAmount);\\n        return actualSubAmount;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IFireCatProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\n/**\\n* @notice IFireCatProxy\\n*/\\ninterface IFireCatProxy {\\n    \\n    /**\\n    * @notice check user wether is minted.\\n    * @dev fetch data from fireCatNFT.\\n    * @param user address.\\n    * @return mintAllowed.\\n    */\\n    function mintAllowed(address user) external view returns (bool);\\n\\n    /**\\n    * @notice treasuryToken is liquidity token.\\n    * @dev fetch data from fireCatTreasury.\\n    * @return treasuryToken.\\n    */\\n    function treasuryToken() external view returns (address);\\n\\n    /**\\n    * @notice reservesToken should be WBNB Token.\\n    * @dev fetch data from fireCatReserves.\\n    * @return reservesToken.\\n    */\\n    function reservesToken() external view returns (address);\\n\\n    /**\\n    * @notice The percentage of funds which put into fireCatTreasury.\\n    * @dev The final result will be divided.\\n    * @return _assetsInNumerator\\n    * @return _assetsInDenominator\\n    */\\n    function assetsInFactor() external view returns (uint256, uint256);\\n\\n    /**\\n    * @notice The percentage of funds which put into liquidity.\\n    * @dev The final result will be divided.\\n    * @return _slippageNumerator \\n    * @return _slippageDenominator \\n    */\\n    function liquiditySlippage() external view returns (uint256, uint256);\\n\\n    /**\\n    * @notice A minimum value needs to be provided when adding liquidity.\\n    * @dev Fetch Factor from liquiditySlippage.\\n    * @param amount uint256.\\n    * @return liquidityMinProvide.\\n    */\\n    function liquidityMinProvide(uint256 amount) external view returns (uint256);\\n\\n    /**\\n    * @notice Draw a portion of the invested funds into the fireCatTreasury contract.\\n    * @dev Fetch Factor from assetsInFactor.\\n    * @param amount uint256.\\n    * @return getAssetsIn.\\n    */\\n    function getAssetsIn(uint256 amount) external view returns (uint256);\\n\\n    /**\\n    * @notice PancakeSwap Liquidity Pool.\\n    * @dev Fetch from _liquidityPool.\\n    * @return liquidityPool.\\n    */\\n    function liquidityPool() external view returns (address);\\n\\n    /**\\n    * @notice tokenA address of Liquidity Pool.\\n    * @dev data from _tokenA.\\n    * @return liquidityTokenA\\n    */\\n    function tokenA() external view returns (address);\\n\\n    /**\\n    * @notice tokenB address of Liquidity Pool.\\n    * @dev data from _tokenB.\\n    * @return liquidityTokenB\\n    */\\n    function tokenB() external view returns (address);\\n\\n    /**\\n    * @notice Token settings for adding liquidity pools\\n    * @param tokenA address.\\n    * @param tokenB address.\\n    */\\n    function setLiquidityConfig(address tokenA, address tokenB) external;\\n\\n    /**\\n    * @notice The amount of investment limit.\\n    * @param amount uint256.\\n    */\\n    function setInvestAmount(uint256 amount) external;\\n\\n     /**\\n    * @notice set slippage of liquidity adding.\\n    * @param numerator uint256.\\n    * @param denominator uint256.\\n    */\\n    function setLPSlippage(uint256 numerator, uint256 denominator) external;\\n\\n    /**\\n    * @notice set factor of treasury investment.\\n    * @param numerator uint256.\\n    * @param denominator uint256.\\n    */\\n    function setAssetsInFactor(uint256 numerator, uint256 denominator) external;\\n\\n    /**\\n    * @notice set fireCatNFT address.\\n    * @param fireCatNFT_ address.\\n    */\\n    function setFireCatNFT(address fireCatNFT_) external;\\n    \\n    /**\\n    * @notice set fireCatReserves address.\\n    * @param fireCatReserves_ address.\\n    */\\n    function setFireCatReserves(address fireCatReserves_) external;\\n\\n     /**\\n    * @notice set fireCatTreasury address.\\n    * @param fireCatTreasury_ address.\\n    */\\n    function setFireCatTreasury(address fireCatTreasury_) external;\\n\\n    /**\\n    * @notice set swapRouter address.\\n    * @param swapRouter_ address.\\n    */\\n    function setSwapRouter(address swapRouter_) external;\\n\\n    /**\\n    * @notice The interface of investment.\\n    * @return tokenId.\\n    */\\n    function invest() external payable returns(uint256);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IFireCatNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.10;\\n\\nimport \\\"openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\\\";\\n\\n/**\\n* @notice IFireCatNFT\\n*/\\ninterface IFireCatNFT is IERC721 {\\n\\n    /**\\n     * @notice Return total amount of supply, not include destoryed.\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n    * @notice Latest ID not yet minted.\\n    * @dev currentTokenId add 1.\\n    * @return tokenId\\n    */\\n    function freshTokenId() external view returns (uint256);\\n\\n    /**\\n    * @notice check user whether has minted.\\n    * @dev fetch data from _hasMinted.\\n    * @param user user_address.\\n    * @return minted\\n    */\\n    function hasMinted(address user) external view returns (bool);\\n\\n    /**\\n    * @notice the supply limit of NFT, set by owner.\\n    * @return supplyLimit\\n    */\\n    function supplyLimit() external view returns (uint256);\\n\\n    /**\\n    * @notice the highest level of NFT, set by owner.\\n    * @return highestLevel \\n    */\\n    function highestLevel() external view returns (uint256);\\n\\n    /**\\n    * @notice check tokenId by address.\\n    * @dev fetch data from _ownerTokenId.\\n    * @param owner user_address.\\n    * @return tokenId\\n    */\\n    function tokenIdOf(address owner) external view returns (uint256[] memory);\\n\\n    /**\\n    * @notice check token level by Id.\\n    * @dev fetch data from _tokenLevel.\\n    * @param tokenId uint256.\\n    * @return tokenLevel\\n    */\\n    function tokenLevelOf(uint256 tokenId) external view returns (uint256);\\n\\n    /**\\n    * @notice Metadata of NFT. \\n    * @dev Combination of baseURI and tokenLevel\\n    * @param tokenId uint256.\\n    * @return json\\n    */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n    \\n    /**\\n    * @notice Use for airdrop.\\n    * @dev access: onlyOwner.\\n    * @param recipient address.\\n    * @return newTokenId\\n    */\\n    function mintTo(address recipient) external returns (uint256);\\n\\n    /**\\n    * @notice Use for Multi address airdrop.\\n    * @dev access: onlyOwner.\\n    * @param recipients address[].\\n    */\\n    function multiMintTo(address[] memory recipients) external;\\n\\n    /**\\n    * @notice Use for firecat proxy.\\n    * @dev access: onlyProxy.\\n    * @param recipient address.\\n    * @return newTokenId\\n    */\\n    function proxyMint(address recipient) external returns (uint256);\\n    \\n    /**\\n    * @notice Required two contracts to upgrade NFT: upgradeProxy and upgradeStorage.\\n    * @dev Upgrade needs to get permission from upgradeProxy.\\n    * @param tokenId uint256.\\n    */\\n    function upgradeToken(uint256 tokenId) external;\\n\\n    /**\\n    * @notice Increase the supply of NFT as needed.\\n    * @dev set to _supplyLimit.\\n    * @param amount_ uint256.\\n    */\\n    function addSupply(uint256 amount_) external;\\n\\n    /**\\n    * @dev Burn an ERC721 token.\\n    * @param tokenId_ uint256.\\n     */\\n    function burn(uint256 tokenId_) external;\\n\\n    /**\\n    * @notice Set the highest level of NFT.\\n    * @dev set to _highestLevel.\\n    * @param level_ uint256.\\n    */\\n    function setHighestLevel(uint256 level_) external;\\n\\n    /**\\n    * @notice set the upgrade logic contract of NFT.\\n    * @dev set to upgradeProxy.\\n    * @param upgradeProxy_ address.\\n    */\\n    function setUpgradeProxy(address upgradeProxy_) external;\\n\\n    /**\\n    * @notice set the upgrade condtiions contract of NFT.\\n    * @dev set to upgradeStorage.\\n    * @param upgradeStorage_ address.\\n    */\\n    function setUpgradeStorage(address upgradeStorage_) external;\\n\\n    /**\\n    * @notice The proxy contract is responsible for the minting\u3002\\n    * @dev set to fireCatProxy.\\n    * @param fireCatProxy_ address.\\n    */\\n    function setFireCatProxy(address fireCatProxy_) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IWETH.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\nimport \\\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n    function withdraw(uint) external;\\n}\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IPancakeRouter01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IPancakeRouter01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"script/=script/\",\r\n      \"solmate/=lib/solmate/src/\",\r\n      \"src/=src/\",\r\n      \"test/=test/\",\r\n      \"src/=src/\",\r\n      \"test/=test/\",\r\n      \"script/=script/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"weth_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fireCatNFT_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fireCatReserves_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fireCatTreasury_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapRouter_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"investAmount_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Invest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"SetAssetsInFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fireCatNFT_\",\"type\":\"address\"}],\"name\":\"SetFireCatNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fireCatReserves_\",\"type\":\"address\"}],\"name\":\"SetFireCatReserves\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fireCatTreasury_\",\"type\":\"address\"}],\"name\":\"SetFireCatTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SetInvestAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"SetLPSlippage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"SetLiquidityConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"swapRouter_\",\"type\":\"address\"}],\"name\":\"SetSwapRouter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"WithdrawRemaining\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetsInFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fireCatNFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fireCatReserves\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fireCatTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getAssetsIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"liquidityMinProvide\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquiditySlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"mintAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reservesToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"setAssetsInFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fireCatNFT_\",\"type\":\"address\"}],\"name\":\"setFireCatNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fireCatReserves_\",\"type\":\"address\"}],\"name\":\"setFireCatReserves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fireCatTreasury_\",\"type\":\"address\"}],\"name\":\"setFireCatTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setInvestAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"setLPSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB_\",\"type\":\"address\"}],\"name\":\"setLiquidityConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapRouter_\",\"type\":\"address\"}],\"name\":\"setSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FireCatProxy", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c000000000000000000000000d7f2f75408fb94728edee5b6243fe430323cb78c00000000000000000000000073b17f43dc42189d1dca9621133a595c4ba1115c000000000000000000000000c550c24677cec4a97d4347b0dedc9659ff7d05ef00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e0000000000000000000000000000000000000000000000000de0b6b3a7640000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}