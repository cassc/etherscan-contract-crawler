{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\nabstract contract ReentrancyGuard {\r\n    bool internal locked;\r\n\r\n    modifier noReentrant() {\r\n        require(!locked, \"No re-entrancy\");\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address account) external view returns (uint);\r\n\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint);\r\n\r\n    function approve(address spender, uint amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    function safeTransfer(IERC20 token, address to, uint value) internal {\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint value\r\n    ) internal {\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint value) internal {\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(isContract(address(token)), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeERC20: ERC20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n\r\n    function isContract(address addr) internal view returns (bool) {\r\n        uint size;\r\n        assembly {\r\n            size := extcodesize(addr)\r\n        }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\ncontract SmartGarage is ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n    address private TokenAddress = 0x55d398326f99059fF775485246999027B3197955;\r\n    IERC20 public Token;\r\n\r\n    uint256[] public REFERRAL_PERCENTS = [4, 3, 2, 1];\r\n    uint256[] public GARAGE_PROFIT_PERCENTAGE = [210, 220, 230, 240, 250, 260];\r\n    uint256[] public GARAGE_ENTER_LIMIT = [0, 0, 0, 0, 50_000 ether, 100_000 ether];\r\n    uint256 public MIN_BUY_AMOUNT = 5 ether;\r\n    uint256 public REFERRAL_STEP = 10;\r\n    uint256 public ADMIN_FEE = 800;\r\n    uint256 public MARKEING_FEE = 200;\r\n    uint256 public REFERRAL_PROFIT_STEP = 100;\r\n    uint256 public MAX_REFERRAL_PROFIT_STEP = 1000;\r\n    uint256 public MAX_GARAGE_PROFIT = 23000;\r\n    uint8 public MAX_GARAGE_COUNT = 6;\r\n    uint256 public constant MAX_PROFIT_LIMIT = 1 days;\r\n    uint256 public constant PERCENTS_DIVIDER = 10000;\r\n    uint256 public constant TIME_STEP = 1 days;\r\n\r\n    struct Garage {\r\n        uint256 tools;\r\n        uint256 cash;\r\n        uint256 cash2;\r\n        uint256 timestamp;\r\n        address ref;\r\n        uint256 DirectReferral;\r\n        uint256 totalBuy;\r\n        uint256[4] referralProfit;\r\n        uint8[6] cars;\r\n        uint256[6] garageBuyAmount;\r\n        uint256[6] profitEarned;\r\n    }\r\n\r\n    mapping(address => Garage) public garages;\r\n    uint256 public totalCars;\r\n    uint256 public totalGarage;\r\n    uint256 public totalBuy;\r\n    uint256 public totalConvert;\r\n    address public manager;\r\n    address public adminWallet;\r\n    address public marketingWallet;\r\n    uint256 public startDate;\r\n\r\n    constructor() {\r\n        Token = IERC20(TokenAddress);\r\n        manager = 0x12Fbef4CF5134666D74877697D18Ea08C747D272;\r\n        adminWallet = 0xEF7d920B05D3f0b3a0151440a5b1D7a84F2E6f42;\r\n        marketingWallet = 0x12D19080f19aBd7Eeaf6A9371AEe2d1EE47170Be;\r\n        startDate = 1702922400;\r\n    }\r\n\r\n    function buyTools(address ref, uint256 amount) public noReentrant {\r\n        require(block.timestamp >= startDate, \"contract does not launch yet\");\r\n        uint256 tools = amount;\r\n        require(tools >= MIN_BUY_AMOUNT, \"Minimum 5 USDT\");\r\n\r\n        uint256 adminFee = (amount * ADMIN_FEE) / PERCENTS_DIVIDER;\r\n        uint256 marketingFee = (amount * MARKEING_FEE) / PERCENTS_DIVIDER;\r\n\r\n        Token.safeTransferFrom(msg.sender, adminWallet, adminFee);\r\n        Token.safeTransferFrom(msg.sender, marketingWallet, marketingFee);\r\n        Token.safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            amount - (adminFee + marketingFee)\r\n        );\r\n\r\n        address user = msg.sender;\r\n\r\n        if (garages[user].timestamp == 0) {\r\n            totalGarage++;\r\n            ref = garages[ref].timestamp == 0 ? manager : ref;\r\n            garages[ref].DirectReferral++;\r\n            garages[user].ref = ref;\r\n            garages[user].timestamp = block.timestamp;\r\n        }\r\n\r\n        ref = garages[user].ref;\r\n        if (ref != address(0)) {\r\n            address upline = ref;\r\n            for (uint256 i = 0; i < REFERRAL_PERCENTS.length; i++) {\r\n                if (upline != address(0)) {\r\n                    uint256 commission = (tools * REFERRAL_PERCENTS[i]) / 100;\r\n                    garages[upline].tools += (commission / 2);\r\n                    garages[upline].cash += ((commission / 2) * 100);\r\n                    garages[upline].referralProfit[i] += commission;\r\n                    upline = garages[upline].ref;\r\n                } else break;\r\n            }\r\n        }\r\n\r\n        garages[user].tools += tools;\r\n        garages[user].totalBuy += tools;\r\n        totalBuy += amount;\r\n    }\r\n\r\n    function withdrawCash() public noReentrant {\r\n        address user = msg.sender;\r\n        uint256 cash = garages[user].cash;\r\n        garages[user].cash = 0;\r\n        uint256 amount = cash / 100;\r\n        Token.safeTransfer(\r\n            msg.sender,\r\n            getContractBalance() < amount ? getContractBalance() : amount\r\n        );\r\n    }\r\n\r\n    function convertCash(uint256 _cashAmount) public noReentrant {\r\n        address user = msg.sender;\r\n        uint256 cash = garages[user].cash;\r\n        require(cash >= _cashAmount, \"Not enough cash\");\r\n        garages[user].cash -= _cashAmount;\r\n        uint256 amount = _cashAmount / 100;\r\n        garages[user].tools += amount;\r\n        totalConvert += amount;\r\n    }\r\n\r\n    function collectCash() public noReentrant {\r\n        address user = msg.sender;\r\n        syncGarage(user);\r\n        garages[user].cash += garages[user].cash2;\r\n        garages[user].cash2 = 0;\r\n    }\r\n\r\n    function upgradeGarage(uint256 garageId) public noReentrant {\r\n        require(garageId < MAX_GARAGE_COUNT, \"Max 6 garage\");\r\n        require(totalBuy >= GARAGE_ENTER_LIMIT[garageId], \"Not enough total buy amount\");\r\n        address user = msg.sender;\r\n        syncGarage(user);\r\n        garages[user].cars[garageId]++;\r\n        totalCars++;\r\n        uint256 carLevel = garages[user].cars[garageId];\r\n        garages[user].garageBuyAmount[garageId] += getUpgradePrice(\r\n            garageId,\r\n            carLevel\r\n        );\r\n        require(\r\n            garages[user].tools >= getUpgradePrice(garageId, carLevel),\r\n            \"Not enough tools\"\r\n        );\r\n        garages[user].tools -= getUpgradePrice(garageId, carLevel);\r\n    }\r\n\r\n    function getCars(address addr) public view returns (uint8[6] memory) {\r\n        return garages[addr].cars;\r\n    }\r\n\r\n    function getCommission(\r\n        address addr\r\n    ) public view returns (uint256[4] memory) {\r\n        return garages[addr].referralProfit;\r\n    }\r\n\r\n    function getGarageBuyAmount(\r\n        address addr\r\n    ) public view returns (uint256[6] memory) {\r\n        return garages[addr].garageBuyAmount;\r\n    }\r\n\r\n    function syncGarage(address user) internal {\r\n        require(garages[user].timestamp > 0, \"User is not registered\");\r\n        uint256 duration = block.timestamp - garages[user].timestamp;\r\n        if (duration > MAX_PROFIT_LIMIT) {\r\n            duration = MAX_PROFIT_LIMIT;\r\n        }\r\n        uint256 totalProfit;\r\n        for (uint256 i = 0; i < MAX_GARAGE_COUNT; i++) {\r\n            if (garages[user].garageBuyAmount[i] > 0) {\r\n                uint256 profitPercentage = GARAGE_PROFIT_PERCENTAGE[i] +\r\n                    ((GARAGE_PROFIT_PERCENTAGE[i] * getLeadershipBonus(user)) /\r\n                        PERCENTS_DIVIDER);\r\n                uint256 profitAmount = (garages[user].garageBuyAmount[i] *\r\n                    profitPercentage) / PERCENTS_DIVIDER;\r\n                    profitAmount = (profitAmount * duration) / TIME_STEP;\r\n                uint256 maxGarageProfit = garages[user].garageBuyAmount[i] * MAX_GARAGE_PROFIT / PERCENTS_DIVIDER;\r\n                if(garages[user].profitEarned[i] + profitAmount >= maxGarageProfit){\r\n                    profitAmount = maxGarageProfit - garages[user].profitEarned[i];\r\n                    garages[user].cars[i] = 0;\r\n                    garages[user].profitEarned[i] = 0;\r\n                    garages[user].garageBuyAmount[i] = 0;\r\n                }else{\r\n                    garages[user].profitEarned[i] += profitAmount;\r\n                }\r\n                totalProfit += profitAmount;\r\n            }\r\n        }\r\n        garages[user].cash2 += totalProfit * 100;\r\n        garages[user].timestamp = block.timestamp;\r\n    }\r\n\r\n    function getUpgradePrice(\r\n        uint256 garageId,\r\n        uint256 carLevel\r\n    ) internal pure returns (uint256) {\r\n        if (carLevel == 1)\r\n            return\r\n                [\r\n                    5 ether,\r\n                    50 ether,\r\n                    100 ether,\r\n                    500 ether,\r\n                    1000 ether,\r\n                    5000 ether\r\n                ][garageId];\r\n        if (carLevel == 2)\r\n            return\r\n                [\r\n                    10 ether,\r\n                    60 ether,\r\n                    150 ether,\r\n                    600 ether,\r\n                    1500 ether,\r\n                    6000 ether\r\n                ][garageId];\r\n        if (carLevel == 3)\r\n            return\r\n                [\r\n                    15 ether,\r\n                    70 ether,\r\n                    200 ether,\r\n                    700 ether,\r\n                    2000 ether,\r\n                    7000 ether\r\n                ][garageId];\r\n        if (carLevel == 4)\r\n            return\r\n                [\r\n                    20 ether,\r\n                    80 ether,\r\n                    250 ether,\r\n                    800 ether,\r\n                    2500 ether,\r\n                    8000 ether\r\n                ][garageId];\r\n        revert(\"Incorrect car level\");\r\n    }\r\n\r\n    function getDailyProfit(\r\n        address user\r\n    ) public view returns (uint256 totalProfit) {\r\n        if (garages[user].timestamp == 0) {\r\n            return 0;\r\n        }\r\n        uint256 duration = TIME_STEP;\r\n        for (uint256 i = 0; i < MAX_GARAGE_COUNT; i++) {\r\n            if (garages[user].garageBuyAmount[i] > 0) {\r\n                uint256 profitPercentage = GARAGE_PROFIT_PERCENTAGE[i] +\r\n                    ((GARAGE_PROFIT_PERCENTAGE[i] * getLeadershipBonus(user)) /\r\n                        PERCENTS_DIVIDER);\r\n                uint256 profitAmount = (garages[user].garageBuyAmount[i] *\r\n                    profitPercentage) / PERCENTS_DIVIDER;\r\n                uint256 maxGarageProfit = garages[user].garageBuyAmount[i] * MAX_GARAGE_PROFIT / PERCENTS_DIVIDER;\r\n                if(garages[user].profitEarned[i] + profitAmount >= maxGarageProfit){\r\n                    profitAmount = maxGarageProfit - garages[user].profitEarned[i];\r\n                }\r\n                totalProfit += ((profitAmount * duration) / TIME_STEP) * 100;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getGaragesPercentage(\r\n        address user\r\n    ) public view returns (uint256[6] memory percentages) {\r\n        if (garages[user].timestamp == 0) {\r\n            return percentages;\r\n        }\r\n        uint256 duration = block.timestamp - garages[user].timestamp;\r\n        if (duration > MAX_PROFIT_LIMIT) {\r\n            duration = MAX_PROFIT_LIMIT;\r\n        }\r\n        for (uint256 i = 0; i < MAX_GARAGE_COUNT; i++) {\r\n            if (garages[user].garageBuyAmount[i] > 0) {\r\n                uint256 profitPercentage = GARAGE_PROFIT_PERCENTAGE[i] +\r\n                    ((GARAGE_PROFIT_PERCENTAGE[i] * getLeadershipBonus(user)) /\r\n                        PERCENTS_DIVIDER);\r\n                uint256 profitAmount = (garages[user].garageBuyAmount[i] *\r\n                    profitPercentage) / PERCENTS_DIVIDER;\r\n                    profitAmount = ((profitAmount * duration) / TIME_STEP);\r\n                uint256 maxGarageProfit = garages[user].garageBuyAmount[i] * MAX_GARAGE_PROFIT / PERCENTS_DIVIDER;\r\n                if(garages[user].profitEarned[i] + profitAmount >= maxGarageProfit){\r\n                    percentages[i] = 10000;\r\n                }\r\n                else{\r\n                    percentages[i] = ((garages[user].profitEarned[i] + profitAmount) * 10000 / maxGarageProfit) * MAX_GARAGE_PROFIT / PERCENTS_DIVIDER;\r\n                }\r\n            }\r\n        }\r\n        return percentages;\r\n    }\r\n\r\n    function getUpgradeProfit(\r\n        uint256 garageId,\r\n        uint256 carLevel\r\n    ) public view returns (uint256 totalProfit) {\r\n        uint256 upgradePrice = getUpgradePrice(garageId, carLevel);\r\n        uint256 profitAmount = (upgradePrice *\r\n            GARAGE_PROFIT_PERCENTAGE[garageId]) / PERCENTS_DIVIDER;\r\n        totalProfit = ((profitAmount * TIME_STEP) / TIME_STEP) * 100;\r\n    }\r\n\r\n    function getUserAvailableCash(\r\n        address user\r\n    ) public view returns (uint256 totalProfit) {\r\n        if (garages[user].timestamp == 0) {\r\n            return 0;\r\n        }\r\n        uint256 duration = block.timestamp - garages[user].timestamp;\r\n        if (duration > MAX_PROFIT_LIMIT) {\r\n            duration = MAX_PROFIT_LIMIT;\r\n        }\r\n        for (uint256 i = 0; i < MAX_GARAGE_COUNT; i++) {\r\n            if (garages[user].garageBuyAmount[i] > 0) {\r\n                uint256 profitPercentage = GARAGE_PROFIT_PERCENTAGE[i] +\r\n                    ((GARAGE_PROFIT_PERCENTAGE[i] * getLeadershipBonus(user)) /\r\n                        PERCENTS_DIVIDER);\r\n                uint256 profitAmount = (garages[user].garageBuyAmount[i] *\r\n                    profitPercentage) / PERCENTS_DIVIDER;\r\n                    profitAmount = ((profitAmount * duration) / TIME_STEP);\r\n                uint256 maxGarageProfit = garages[user].garageBuyAmount[i] * MAX_GARAGE_PROFIT / PERCENTS_DIVIDER;\r\n                if(garages[user].profitEarned[i] + profitAmount >= maxGarageProfit){\r\n                    profitAmount = maxGarageProfit - garages[user].profitEarned[i];\r\n                }\r\n                totalProfit += profitAmount * 100;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getLeadershipBonus(address user) public view returns (uint256) {\r\n        uint256 referralStep = garages[user].DirectReferral / REFERRAL_STEP;\r\n        uint256 referralProfit = referralStep * REFERRAL_PROFIT_STEP;\r\n        if (referralProfit > MAX_REFERRAL_PROFIT_STEP) {\r\n            referralProfit = MAX_REFERRAL_PROFIT_STEP;\r\n        }\r\n        return referralProfit;\r\n    }\r\n\r\n    function getContractBalance() public view returns (uint256) {\r\n        return Token.balanceOf(address(this));\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ADMIN_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"GARAGE_ENTER_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"GARAGE_PROFIT_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARKEING_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_GARAGE_COUNT\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_GARAGE_PROFIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PROFIT_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_REFERRAL_PROFIT_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_BUY_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"REFERRAL_PERCENTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRAL_PROFIT_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRAL_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyTools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectCash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cashAmount\",\"type\":\"uint256\"}],\"name\":\"convertCash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"garages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tools\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cash2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"DirectReferral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBuy\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getCars\",\"outputs\":[{\"internalType\":\"uint8[6]\",\"name\":\"\",\"type\":\"uint8[6]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getCommission\",\"outputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"\",\"type\":\"uint256[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getDailyProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalProfit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getGarageBuyAmount\",\"outputs\":[{\"internalType\":\"uint256[6]\",\"name\":\"\",\"type\":\"uint256[6]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getGaragesPercentage\",\"outputs\":[{\"internalType\":\"uint256[6]\",\"name\":\"percentages\",\"type\":\"uint256[6]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getLeadershipBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"garageId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"carLevel\",\"type\":\"uint256\"}],\"name\":\"getUpgradeProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalProfit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserAvailableCash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalProfit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCars\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalConvert\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalGarage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"garageId\",\"type\":\"uint256\"}],\"name\":\"upgradeGarage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawCash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SmartGarage", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://92289a12d6211c031485337123144b2d3074f5136542876e250b8e308251239b"}