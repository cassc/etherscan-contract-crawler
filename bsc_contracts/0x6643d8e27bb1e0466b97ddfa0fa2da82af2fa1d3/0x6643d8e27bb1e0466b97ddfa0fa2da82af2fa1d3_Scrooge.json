{"SourceCode": "// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v4.9/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v4.9/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     *\r\n     * Furthermore, `isContract` will also return true if the target contract within\r\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\r\n     * which only has an effect at the end of a transaction.\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v4.9/contracts/token/ERC20/extensions/IERC20Permit.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n *\r\n * ==== Security Considerations\r\n *\r\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\r\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\r\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\r\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\r\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\r\n * generally recommended is:\r\n *\r\n * ```solidity\r\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\r\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\r\n *     doThing(..., value);\r\n * }\r\n *\r\n * function doThing(..., uint256 value) public {\r\n *     token.safeTransferFrom(msg.sender, address(this), value);\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\r\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\r\n * {SafeERC20-safeTransferFrom}).\r\n *\r\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\r\n * contracts should have entry points that don't rely on permit.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     *\r\n     * CAUTION: See Security Considerations above.\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v4.9/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v4.9/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v4.9/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * The default value of {decimals} is 18. To change this, you should override\r\n * this function so it returns a different value.\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the default value returned by this function, unless\r\n     * it's overridden.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v4.9/contracts/token/ERC20/utils/SafeERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\r\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 oldAllowance = token.allowance(address(this), spender);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\r\n     * to be set to zero before setting it to a non-zero value, such as USDT.\r\n     */\r\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\r\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\r\n\r\n        if (!_callOptionalReturnBool(token, approvalCall)) {\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\r\n            _callOptionalReturn(token, approvalCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\r\n     * Revert on invalid signature.\r\n     */\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     *\r\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\r\n     */\r\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\r\n        // and not revert is the subcall reverts.\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        return\r\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\r\n    }\r\n}\r\n\r\n// File: Scrooge.sol\r\n\r\n\r\n\r\n/*\r\n   SSSSSSSSSSSSSSS         CCCCCCCCCCCCCRRRRRRRRRRRRRRRRR        OOOOOOOOO          OOOOOOOOO             GGGGGGGGGGGGGEEEEEEEEEEEEEEEEEEEEEE\r\n SS:::::::::::::::S     CCC::::::::::::CR::::::::::::::::R     OO:::::::::OO      OO:::::::::OO        GGG::::::::::::GE::::::::::::::::::::E\r\nS:::::SSSSSS::::::S   CC:::::::::::::::CR::::::RRRRRR:::::R  OO:::::::::::::OO  OO:::::::::::::OO    GG:::::::::::::::GE::::::::::::::::::::E\r\nS:::::S     SSSSSSS  C:::::CCCCCCCC::::CRR:::::R     R:::::RO:::::::OOO:::::::OO:::::::OOO:::::::O  G:::::GGGGGGGG::::GEE::::::EEEEEEEEE::::E\r\nS:::::S             C:::::C       CCCCCC  R::::R     R:::::RO::::::O   O::::::OO::::::O   O::::::O G:::::G       GGGGGG  E:::::E       EEEEEE\r\nS:::::S            C:::::C                R::::R     R:::::RO:::::O     O:::::OO:::::O     O:::::OG:::::G                E:::::E             \r\n S::::SSSS         C:::::C                R::::RRRRRR:::::R O:::::O     O:::::OO:::::O     O:::::OG:::::G                E::::::EEEEEEEEEE   \r\n  SS::::::SSSSS    C:::::C                R:::::::::::::RR  O:::::O     O:::::OO:::::O     O:::::OG:::::G    GGGGGGGGGG  E:::::::::::::::E   \r\n    SSS::::::::SS  C:::::C                R::::RRRRRR:::::R O:::::O     O:::::OO:::::O     O:::::OG:::::G    G::::::::G  E:::::::::::::::E   \r\n       SSSSSS::::S C:::::C                R::::R     R:::::RO:::::O     O:::::OO:::::O     O:::::OG:::::G    GGGGG::::G  E::::::EEEEEEEEEE   \r\n            S:::::SC:::::C                R::::R     R:::::RO:::::O     O:::::OO:::::O     O:::::OG:::::G        G::::G  E:::::E             \r\n            S:::::S C:::::C       CCCCCC  R::::R     R:::::RO::::::O   O::::::OO::::::O   O::::::O G:::::G       G::::G  E:::::E       EEEEEE\r\nSSSSSSS     S:::::S  C:::::CCCCCCCC::::CRR:::::R     R:::::RO:::::::OOO:::::::OO:::::::OOO:::::::O  G:::::GGGGGGGG::::GEE::::::EEEEEEEE:::::E\r\nS::::::SSSS:::::S   CC:::::::::::::::CR::::::R     R:::::R OO:::::::::::::OO  OO:::::::::::::OO    GG:::::::::::::::GE::::::::::::::::::::E\r\nS:::::::::::::::SS      CCC::::::::::::CR::::::R     R:::::R   OO:::::::::OO      OO:::::::::OO        GGG::::::GGG:::GE::::::::::::::::::::E\r\n SSSSSSSSSSSSSSS           CCCCCCCCCCCCCRRRRRRRR     RRRRRRR     OOOOOOOOO          OOOOOOOOO             GGGGGG   GGGGEEEEEEEEEEEEEEEEEEEEEE\r\n\r\n*/\r\npragma solidity ^0.8.19;\r\n\r\n\r\n\r\n/**\r\n * @title SCROOGE token\r\n  * @dev Dapp contract to earn USDT\r\n  */\r\n\r\ncontract Scrooge {\r\n\r\n  /// @title Deposit structure\r\n  /// @notice A contract to store deposit information\r\n  struct Deposit {\r\n      address owner;  // Address of the deposit owner\r\n      uint256 amountUSDT;  // Amount of USDT deposited\r\n      uint256 amountSCROOGE;  // Amount of SCROOGE earned\r\n      uint256 soldAmountSCROOGE;  // Sold amount of SCROOGE\r\n      uint40 date;  // Date of the deposit\r\n      uint8 multiplier;  // Multiplier for earnings\r\n      uint8 limit;  // Limit for the deposit\r\n      uint256 soldAmount;  // soldAmount of USDT\r\n      bool closed;  // Flag indicating if the deposit is closed after beign sold\r\n  }\r\n\r\n  /// @title User structure\r\n  /// @notice A contract to store user information\r\n  struct User {\r\n      address referrer;  // Address of the user's referrer\r\n      uint256[5] referrals;  // Number of referrals the user has made\r\n      uint256[5] referralBonus;  // Bonus amount earned from referrals\r\n      uint256 balanceUSDT;  // Balance of USDT\r\n      uint256[] deposits;  // Array of deposit IDs made by the user\r\n      uint40 lastWithdraw; // used for withdraw limits\r\n      uint256 lastWithdrawAmount; // used for withdraw limits\r\n  }\r\n\r\n  //Deposit[] private _deposits;  // Array to store deposit information\r\n  mapping(uint256 =>Deposit) _deposits;\r\n  mapping(address => User) private _users;  // Mapping to store user information\r\n  uint256 private _totalDeposits;\r\n  uint256 private _totalUsers;\r\n  uint256 private constant _startPrice = 1 ether;  // Starting price constant\r\n//  uint256 private constant ONE_DAY = 15 minutes; // for test purposes\r\n//  uint256 private constant ONE_DAY = 2 hours; // for test purposes\r\n  uint256 private constant ONE_DAY = 1 days; // for production\r\n  uint256 private _turnover;  // Total turnover\r\n  uint256 private _withdrawn;  // Total withdrawn amount\r\n  mapping(uint256 =>uint256) private _priceHistory;\r\n  mapping(uint256 =>uint256) private _usersHistory;\r\n  uint256 private _priceHistoryLength;\r\n  uint256 private _usersHistoryLength;\r\n  uint256 private _updatePriceDate;\r\n  uint256 private _createdDate;\r\n\r\n  IERC20 private _usdt;  // USDT token contract 0x17e7354759cddbbb1d40e9fc1a4ff198151fa906\r\n  address private _owner;  // Address of the contract owner\r\n  address private _defaultReferrer;  // Default referrer address\r\n\r\n  uint256[5] private _referralLevelBonuses = [\r\n      5, 2, 1, 1, 3\r\n  ];  // Array of referral level bonuses  \r\n\r\n  /**\r\n    * @dev Event emitted when a deposit is made\r\n    * @param sender Address of the sender\r\n    * @param amount Amount of the deposit\r\n    */\r\n  event Charged(address indexed sender, uint256 amount);\r\n\r\n  /**\r\n    * @dev Event emitted when a withdrawal is made\r\n    * @param sender Address of the sender\r\n    * @param amount Amount of the withdrawal\r\n    */\r\n  event Withdrawn(address indexed sender, uint256 amount);\r\n\r\n  /**\r\n    * @dev Event emitted when SCROOGE tokens are bought\r\n    * @param sender Address of the sender\r\n    * @param amountUSDT Amount of USDT used for the purchase\r\n    * @param amountSCROOGE Amount of SCROOGE tokens bought\r\n    */\r\n  event Deposited(address indexed sender, uint256 amountUSDT, uint256 amountSCROOGE);\r\n\r\n  /**\r\n    * @dev Event emitted when SCROOGE tokens are sold\r\n    * @param sender Address of the sender\r\n    * @param amountSCROOGE Amount of SCROOGE tokens sold\r\n    * @param amountUSDT Amount of USDT received from the sale\r\n    */\r\n  event Sold(address indexed sender, uint256 amountSCROOGE, uint256 amountUSDT);\r\n\r\n  /**\r\n    * @dev Event emitted when a referral payment is made\r\n    * @param user Address of the user receiving the referral payment\r\n    * @param referrer Address of the referrer who referred the user\r\n    * @param value Referral payment value\r\n    */\r\n  event ReferralPayment(address indexed user, address indexed referrer, uint256 value);\r\n\r\n  /**\r\n  * @dev Initializes the DepositManager contract\r\n  * @param usdt Address of the USDT token contract\r\n  */\r\n  constructor(address usdt) {\r\n      require(usdt != address(0), \"Incorrect address\");\r\n      _usdt = IERC20(usdt);  // Initiablize USDT token contract\r\n      _owner = msg.sender;  // Set the contract owner\r\n      _defaultReferrer = msg.sender;  // Set the default referrer\r\n      _createdDate=block.timestamp;\r\n      uint256 hoursAndMinutes = block.timestamp - block.timestamp / ONE_DAY * ONE_DAY;\r\n      _updatePriceDate=block.timestamp - hoursAndMinutes;\r\n      _priceHistory[0]=_startPrice;\r\n      _priceHistoryLength=1;\r\n      _usersHistory[0]=1;\r\n      _totalUsers = 1;\r\n     _usersHistoryLength=1;  \r\n}\r\n\r\n\r\n  /**\r\n  * @dev Charge USDT function\r\n  * @param amount Amount of USDT to charge\r\n  * @param referrer Address of the referrer\r\n  */\r\n  function charge(uint256 amount, address referrer) external {\r\n    require(amount > 0, \"Illegal amount\");\r\n    require(_usdt.allowance(msg.sender, address(this)) >= amount, \"Not enough USDT\");\r\n    //require(msg.sender != _defaultReferrer, \"Owner not allowed to buy\");\r\n\r\n    // Increase the user's USDT balance\r\n    _users[msg.sender].balanceUSDT += amount;\r\n\r\n    // Set the referrer if it is not already set\r\n    if (_users[msg.sender].referrer == address(0) && msg.sender!=_defaultReferrer) {\r\n\t      _totalUsers += 1;\r\n        if (referrer == address(0) || referrer == msg.sender) {\r\n            referrer = _defaultReferrer;\r\n        } \r\n        if (_users[msg.sender].referrer != referrer) {\r\n            _users[msg.sender].referrer = referrer;\r\n            for (uint256 i; i < 5;) {\r\n                _users[referrer].referrals[i] += 1;\r\n                referrer = _users[referrer].referrer;\r\n                if (referrer == address(0)) {\r\n                    break;\r\n                }\r\n                unchecked {\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    _updatePriceHistory();\r\n\r\n    // Transfer USDT from the sender to the contract\r\n    SafeERC20.safeTransferFrom(_usdt, msg.sender, address(this), amount);\r\n\r\n    // Take a fee (5% of the charged amount)\r\n    _takeFee(amount / 20);\r\n\r\n    // Emit the Charget event\r\n    emit Charged(msg.sender, amount);\r\n  }\r\n\r\n  /**\r\n  * @dev Buy function\r\n  * @param amount Amount of USDT to be used for the purchase\r\n  */\r\n  function newdeposit(uint256 amount) external {\r\n    require(amount > 0, \"Illegal amount\");\r\n    require(_users[msg.sender].balanceUSDT >= amount, \"Not enough balance\");\r\n\r\n    // Deduct the purchased amount from the user's USDT balance\r\n    unchecked {\r\n        _users[msg.sender].balanceUSDT -= amount;\r\n    }\r\n\r\n    // Create a new deposit instance\r\n    Deposit memory deposit;\r\n    deposit.owner = msg.sender;\r\n    deposit.amountUSDT = amount;\r\n    (uint8 multiplier,uint8 limit) = _getMultiplierAndLimit(amount);\r\n    deposit.multiplier=multiplier;\r\n    deposit.limit=limit;\r\n    deposit.date = uint40( block.timestamp );\r\n    \r\n    _turnover += amount;\r\n\r\n    _updatePriceHistory();\r\n\r\n    // Distribute referral bonuses to referrers\r\n    _distributeBonusesForReferrers(_users[msg.sender].referrer, amount);\r\n\r\n    // Add the deposit to the array of deposits\r\n    _deposits[_totalDeposits]=deposit;\r\n\r\n    // Update turnover and user's deposit list\r\n    _users[msg.sender].deposits.push(_totalDeposits);\r\n\r\n    _totalDeposits+=1;\r\n\r\n    // Take a fee for the exchange (1.5%)\r\n    _takeFee(amount * 15/ 1000);\r\n\r\n    // Emit the Deposited event\r\n    emit Deposited(msg.sender, amount, deposit.amountSCROOGE);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to distribute referral bonuses to referrers\r\n  * @param referrer Address of the referrer\r\n  * @param amount Amount of USDT charged by the user\r\n  */\r\n  function _distributeBonusesForReferrers(address referrer, uint256 amount) internal {\r\n    for (uint256 i; i < 5;) {\r\n        if (referrer == address(0)) {\r\n            break;\r\n        }\r\n        uint256 bonus = amount * _referralLevelBonuses[i] / 100;\r\n\r\n        // Increase referrer's referral bonus and user's USDT balance\r\n        _users[referrer].referralBonus[i] += bonus;\r\n        _users[referrer].balanceUSDT += bonus;\r\n\r\n        // Emit the ReferralPayment event\r\n        emit ReferralPayment(msg.sender, referrer, bonus);\r\n\r\n        unchecked {\r\n            i++;\r\n        }\r\n\r\n        referrer = _users[referrer].referrer;\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev Sell function\r\n  * @param amount Amount of SCROOGE tokens to sell\r\n  */\r\n  function sell(uint256 amount) external {\r\n    require(amount > 0, \"Illegal amount\");\r\n    uint256 totalEarnedSCROOGE;\r\n    uint256 totalEarnedUSDT;\r\n    \r\n    for (uint256 i; i < _users[msg.sender].deposits.length;) {\r\n        uint256 deposit_id = _users[msg.sender].deposits[i];\r\n        Deposit storage deposit=_deposits[deposit_id];\r\n        if (!deposit.closed) {\r\n            uint256 earnedSCROOGE;\r\n            uint256 earnedUSDT;\r\n            \r\n            ( earnedSCROOGE ) = earnedScrooge(msg.sender, i, uint40(block.timestamp));\r\n            \r\n            uint256 limit=deposit.limit * deposit.amountUSDT/10;\r\n            if (amount >= earnedSCROOGE) {\r\n                amount -= earnedSCROOGE;\r\n                totalEarnedSCROOGE+=earnedSCROOGE;\r\n                earnedUSDT=_calculateUSDTFromSCROOGE(earnedSCROOGE);\r\n                \r\n                deposit.soldAmountSCROOGE += earnedSCROOGE;\r\n                \r\n                if (deposit.soldAmount + earnedUSDT >= limit){\r\n                  earnedUSDT = limit - deposit.soldAmount;\r\n                  deposit.closed=true;\r\n                }\r\n\r\n                totalEarnedUSDT+=earnedUSDT;\r\n                deposit.soldAmount += earnedUSDT;\r\n            } else {\r\n                totalEarnedSCROOGE+=amount;\r\n                deposit.soldAmountSCROOGE += amount;\r\n                earnedUSDT=_calculateUSDTFromSCROOGE(amount);\r\n\r\n\r\n                if (deposit.soldAmount + earnedUSDT >= limit){\r\n                  earnedUSDT = limit - deposit.soldAmount;\r\n                  deposit.closed=true;\r\n                }\r\n\r\n                totalEarnedUSDT+=earnedUSDT;\r\n                deposit.soldAmount += earnedUSDT;\r\n                break;\r\n            }\r\n        }\r\n        unchecked {\r\n            i++;\r\n        }\r\n    }\r\n    require(totalEarnedSCROOGE >= amount, \"No earnings\");\r\n    _updatePriceHistory();\r\n\r\n    // Increase the user's USDT balance\r\n    _users[msg.sender].balanceUSDT += totalEarnedUSDT;\r\n\r\n    // Take a fee for the exchange (1.5%)\r\n    _takeFee(totalEarnedUSDT * 15/ 1000);\r\n\r\n    // Emit the Sold event\r\n    emit Sold(msg.sender, totalEarnedSCROOGE, totalEarnedUSDT);\r\n  }\r\n\r\n  /**\r\n  * @dev Get the earned SCROOGE balance of a user at a specific timestamp\r\n  * @param user Address of the user\r\n  * @param timestamp Timestamp to calculate the balances\r\n  * @return earned Earned SCROOGE balance\r\n  */\r\n  function balanceOf(address user, uint40 timestamp) internal view \r\n    returns (\r\n        uint256 earned\r\n      ) {\r\n    for (uint256 i; i < _users[user].deposits.length;) {\r\n        uint256 deposit_id = _users[user].deposits[i];\r\n\r\n        if (!_deposits[deposit_id].closed) {\r\n            (uint256 earnedPart) = earnedScrooge(user, i, timestamp);\r\n                earned+=earnedPart;\r\n        }\r\n        unchecked {\r\n            i++;\r\n        }\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev Withdraw function\r\n  * @param amount Amount of USDT to withdraw\r\n  */\r\n  function withdraw(uint256 amount) external {\r\n    require(amount > 0, \"Illegal amount\");\r\n    require(_users[msg.sender].balanceUSDT >= amount, \"Not enough balance\");\r\n    uint256 passedDays=(block.timestamp  - _users[msg.sender].lastWithdraw) / ONE_DAY;\r\n    _users[msg.sender].lastWithdraw=uint40(block.timestamp);\r\n    if (passedDays == 0){\r\n        _users[msg.sender].lastWithdrawAmount+=amount;\r\n    }else{\r\n        _users[msg.sender].lastWithdrawAmount=amount;\r\n    }\r\n    \r\n    uint256 totalDepositsAmount=0;\r\n    for(uint256 i;i<_users[msg.sender].deposits.length;){\r\n        uint256 depositId=_users[msg.sender].deposits[i];\r\n        if (!_deposits[ depositId ].closed){\r\n            totalDepositsAmount+=_deposits[ depositId ].amountUSDT;\r\n        }\r\n        unchecked{\r\n            i++;\r\n        }\r\n    }\r\n        \r\n    require( _users[msg.sender].lastWithdrawAmount  < totalDepositsAmount * 3/10, \"Daily limit of deposits withdraw reached\" );\r\n    require( _users[msg.sender].lastWithdrawAmount  < _usdt.balanceOf(address(this)) / 100, \"Daily limit of liquidity withdraw reached\" );\r\n\r\n    unchecked {\r\n        _users[msg.sender].balanceUSDT -= amount;\r\n        _withdrawn+=amount;\r\n    }\r\n    \r\n    _updatePriceHistory();\r\n\r\n    // Transfer the withdrawn amount to the user's address\r\n    SafeERC20.safeTransfer(_usdt, msg.sender, amount);\r\n\r\n    // Take a fee (5% of the withdrawn amount)\r\n    _takeFee(amount / 20);\r\n\r\n    // Emit the Withdrawn event\r\n    emit Withdrawn(msg.sender, amount);\r\n  }\r\n\r\n  function getAvailWithdraw(address user, uint256 timestamp) external view returns(uint256){\r\n    uint256 lastWithdrawAmount=_users[user].lastWithdrawAmount;\r\n    if ((timestamp  - _users[user].lastWithdraw)/ (ONE_DAY) > 1){\r\n      lastWithdrawAmount=0;\r\n    }\r\n    \r\n    uint256 totalDepositsAmount=0;\r\n    for(uint256 i;i<_users[user].deposits.length;){\r\n        uint256 depositId=_users[user].deposits[i];\r\n        if (!_deposits[ depositId ].closed){\r\n            totalDepositsAmount+=_deposits[ depositId ].amountUSDT;\r\n        }\r\n        unchecked{\r\n            i++;\r\n        }\r\n    }\r\n    uint256 depLimit=totalDepositsAmount * 3/10;\r\n    uint256 liqLimit=_usdt.balanceOf(address(this)) / 100;\r\n    uint256 withdrawLimit=0;\r\n\r\n    if (depLimit > liqLimit){\r\n      withdrawLimit = liqLimit;\r\n    }else{\r\n      withdrawLimit = depLimit;\r\n    }\r\n\r\n    if (withdrawLimit > lastWithdrawAmount){\r\n      withdrawLimit=withdrawLimit - lastWithdrawAmount;\r\n    }else{\r\n      withdrawLimit= 0;\r\n    }\r\n    return withdrawLimit;\r\n  }\r\n\r\n  /**\r\n  * @dev Calculate the earned SCROOGE tokens for a user's deposit at a specific timestamp\r\n  * @param user Address of the user\r\n  * @param id Index of the deposit in the user's deposit list\r\n  * @param timestamp Timestamp to calculate the earned amount\r\n  * @return amountSCROOGE Earned SCROOGE tokens\r\n  */\r\n  function earnedScrooge(address user, uint256 id, uint40 timestamp) internal view \r\n    returns (uint256 amountSCROOGE ) {\r\n    Deposit memory deposit = _deposits[_users[user].deposits[id]];\r\n    if (deposit.closed) return (0);\r\n    uint256 limit=deposit.limit * deposit.amountUSDT / 10;\r\n    \r\n    if (timestamp <= deposit.date || deposit.date <= _createdDate) return (0);\r\n    uint256 daysPassed=(timestamp - deposit.date) / ONE_DAY;\r\n    uint256 daysOffset=(deposit.date - _createdDate) / ONE_DAY;\r\n    \r\n    for(uint256 i;i<daysPassed;){\r\n      uint256 earnedUSDT = deposit.amountUSDT * deposit.multiplier / 10000;\r\n      uint256 earnedSCROOGE=_calculateSCROOGEFromUSDTOnDate(earnedUSDT, daysOffset + i + 1);\r\n      amountSCROOGE += earnedSCROOGE;\r\n\r\n      if (_calculateUSDTFromSCROOGEOnDate(amountSCROOGE, daysOffset + i + 1) > limit){\r\n        //finished=true;\r\n        break;\r\n      }\r\n      unchecked{\r\n        i++;\r\n      }\r\n    }\r\n\r\n    if (amountSCROOGE >deposit.soldAmountSCROOGE){\r\n          amountSCROOGE -= deposit.soldAmountSCROOGE;\r\n    }else{\r\n      amountSCROOGE=0;\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to calculate the multiplier and limit based on the amount\r\n  * @param amount Amount of USDT being used for the purchase\r\n  * @return multiplier Multiplier value based on the deposit count\r\n  * @return limit Limit value based on the deposit count\r\n  */\r\n  function _getMultiplierAndLimit(uint256 amount) internal view \r\n    returns (\r\n      uint8 multiplier, \r\n      uint8 limit\r\n    ) {\r\n    if (_totalDeposits < 60) {\r\n        multiplier = 200;\r\n        limit = 25;\r\n    } else if (_totalDeposits < 150) {\r\n        multiplier = 150;\r\n        limit = 20;\r\n    } else if (amount < 500 ether) {\r\n        multiplier = 100;\r\n        limit = 20;\r\n    } else {\r\n        multiplier = 125;\r\n        limit = 20;\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to calculate the current price of SCROOGE tokens\r\n  * @return price Current price of SCROOGE tokens\r\n  */\r\n  function calculatePrice() public view returns (uint256 price) {\r\n    price =  _startPrice  + 2 * _turnover/ 100000;\r\n    if (_turnover > 100000 ether) {\r\n        price += 4 * (_turnover - (100000 ether))/ 100000;\r\n    }\r\n    if (_turnover > 200000 ether) {\r\n        price += 3 * (_turnover - (200000 ether))/ 100000;\r\n    }\r\n    if (_turnover > 1000000 ether) {\r\n        price += (_turnover - (1000000 ether))/ 100000;\r\n    }\r\n    price += _withdrawn / 100000;\r\n\r\n  }\r\n\r\n  function getInfo() external view returns(uint256 deposits, uint256 users){\r\n    deposits=_totalDeposits;\r\n    users=_totalUsers;\r\n  }\r\n\r\n  function getUserDeposits(address user, uint40 timestamp) external view returns(Deposit[] memory deposits)\r\n  {\r\n    deposits=new Deposit[](_users[user].deposits.length);\r\n    for(uint256 i;i<_users[user].deposits.length;i++){\r\n      deposits[i] = _deposits[ _users[user].deposits[i] ];\r\n      if (!deposits[i].closed) {\r\n            (uint256 earnedPart) = earnedScrooge(user, i, timestamp);\r\n                deposits[i].amountSCROOGE=earnedPart;\r\n        }\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev Get the user's informa\u0445tion\r\n  * @param user Address of the user\r\n  * @param timestamp Timestamp to calculate the balances\r\n  * @return referrer Address of the referrer\r\n  * @return referrals Number of referrals\r\n  * @return balanceUSDT Total USDT balance\r\n  * @return balanceSCROOGE Total SCROOGE balance\r\n  * @return referralBonus Referral bonus balance\r\n  */\r\n  function getUserInfo(address user, uint40 timestamp) external view \r\n    returns (\r\n      address referrer, \r\n      uint256[5] memory referrals, \r\n      uint256 balanceUSDT, \r\n      uint256 balanceSCROOGE, \r\n      uint256[5] memory referralBonus\r\n    ) {\r\n    referrer = _users[user].referrer;\r\n    referrals = _users[user].referrals;\r\n    balanceUSDT = _users[user].balanceUSDT;\r\n    balanceSCROOGE = balanceOf(user, timestamp);\r\n    referralBonus = _users[user].referralBonus;\r\n  }\r\n\r\n  function getPriceHistory() external view returns(uint256[] memory history, uint256 timestamp){\r\n    history=new uint256[](30);\r\n    timestamp = _updatePriceDate;\r\n    uint256 _index=_priceHistoryLength-1;\r\n    for(uint256 i;i<30;i++){\r\n      history[29 - i] = _priceHistory[ _index ];\r\n      if (_index ==0) {\r\n        break;\r\n      }else{\r\n        _index--;\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  function getUsersHistory() external view returns(uint256[] memory history, uint256 timestamp){\r\n    history=new uint256[](30);\r\n    timestamp = _updatePriceDate;\r\n    if (_usersHistoryLength ==0) return (history, timestamp);\r\n    uint256 _index=_usersHistoryLength-1;\r\n\r\n    for(uint256 i;i<30;i++){\r\n      history[29 - i] = _usersHistory[ _index ];\r\n      if (_index ==0) {\r\n        break;\r\n      }else{\r\n        _index--;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to take a fee from the specified amount\r\n  * @param amount Amount to take as a fee\r\n  */\r\n  function _takeFee(uint256 amount) internal {\r\n    SafeERC20.safeTransfer(_usdt, _owner, amount);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to calculate the amount of SCROOGE tokens based on the specified \r\n  * USDT amount\r\n  * @param usdt Amount of USDT\r\n  * @return amount Amount of SCROOGE tokens\r\n  */\r\n  function _calculateSCROOGEFromUSDTOnDate(uint256 usdt,uint256 day) internal view returns (uint256 amount) {\r\n    if (day >= _priceHistoryLength) day=_priceHistoryLength-1;\r\n    amount = usdt * (1 ether) / _priceHistory[day];\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to calculate the amount of USDT based on the specified SCROOGE amount\r\n  * @param amount Amount of SCROOGE tokens\r\n  * @return usdt Amount of USDT\r\n  */\r\n  function _calculateUSDTFromSCROOGE(uint256 amount) internal view returns (uint256 usdt) {\r\n    usdt = amount * calculatePrice() / (1 ether);\r\n  }\r\n\r\n\r\n  function _calculateUSDTFromSCROOGEOnDate(uint256 amount, uint256 day) internal view returns (uint256 usdt) {\r\n    if (day >= _priceHistoryLength) day=_priceHistoryLength-1;\r\n    usdt = amount * _priceHistory[day] / (1 ether);\r\n  }\r\n\r\n  function _updatePriceHistory() internal{\r\n    if (block.timestamp <= _updatePriceDate) return;\r\n    uint256 _days=(block.timestamp - _updatePriceDate) / ONE_DAY;\r\n    uint256 new_price=calculatePrice();\r\n    if (_days > 0 ){\r\n      uint256 old_price=_priceHistory[_priceHistoryLength - 1];\r\n      uint256 old_users=0;\r\n      if (_usersHistoryLength >0) {\r\n        old_users=_usersHistory[_usersHistoryLength - 1];\r\n      }\r\n      for(uint256 i;i<_days - 1;){\r\n        _priceHistory[_priceHistoryLength]=old_price;\r\n        _priceHistoryLength+=1;\r\n        _usersHistory[_usersHistoryLength]=old_users;\r\n        _usersHistoryLength+=1;\r\n        unchecked{\r\n          i++;\r\n        }\r\n      }\r\n      _priceHistory[_priceHistoryLength]=new_price;\r\n      _priceHistoryLength+=1;\r\n      _usersHistory[_usersHistoryLength]=_totalUsers;\r\n      _usersHistoryLength+=1;\r\n      //_updatePriceDate=block.timestamp;\r\n      uint256 hoursAndMinutes = block.timestamp - block.timestamp / ONE_DAY * ONE_DAY;\r\n      _updatePriceDate=block.timestamp - hoursAndMinutes;\r\n\r\n    }else{\r\n      _priceHistory[_priceHistoryLength -1]=new_price;\r\n      _usersHistory[_usersHistoryLength -1]=_totalUsers;\r\n    }\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usdt\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Charged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountUSDT\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountSCROOGE\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ReferralPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountSCROOGE\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountUSDT\",\"type\":\"uint256\"}],\"name\":\"Sold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"calculatePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"charge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getAvailWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"users\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceHistory\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"history\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"timestamp\",\"type\":\"uint40\"}],\"name\":\"getUserDeposits\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountUSDT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountSCROOGE\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"soldAmountSCROOGE\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"date\",\"type\":\"uint40\"},{\"internalType\":\"uint8\",\"name\":\"multiplier\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"limit\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"soldAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"closed\",\"type\":\"bool\"}],\"internalType\":\"struct Scrooge.Deposit[]\",\"name\":\"deposits\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"timestamp\",\"type\":\"uint40\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256[5]\",\"name\":\"referrals\",\"type\":\"uint256[5]\"},{\"internalType\":\"uint256\",\"name\":\"balanceUSDT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceSCROOGE\",\"type\":\"uint256\"},{\"internalType\":\"uint256[5]\",\"name\":\"referralBonus\",\"type\":\"uint256[5]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsersHistory\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"history\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"newdeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Scrooge", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000055d398326f99059ff775485246999027b3197955", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://843d4c2aad98a7a35a316db6a72f90faef90071656b47e0fcd9301d8ff57c674"}