{"SourceCode": "pragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; \r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\ninterface IERC20 {\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n\r\n    \r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    \r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    \r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    \r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    \r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\nlibrary SafeMath {\r\n    \r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    \r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    \r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        \r\n        \r\n        \r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    \r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    \r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    \r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    \r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    \r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    \r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    \r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    \r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    \r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\ninterface IUniswapRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\ninterface IUniswapRouter02 is IUniswapRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\ninterface IUniswapFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\ninterface IUxRefer {\r\n\r\n    function referee(address account) external view returns (address);\r\n\r\n    function refers(address account) external view returns (address[] memory);\r\n}\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\ncontract UxToken is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    uint256 public constant MAX = ~uint256(0);\r\n    address public constant HOLE =\r\n        address(0x000000000000000000000000000000000000dEaD);\r\n\r\n    \r\n    mapping(address => bool) private _feeWhiteList;\r\n    mapping(address => bool) private _fromBlackList;\r\n    mapping(address => bool) private _fromWhiteList;\r\n    mapping(address => bool) private _toBlackList;\r\n    mapping(address => bool) private _toWhiteList;\r\n\r\n    \r\n    uint256 public constant RATE_PRECISION = 1000;\r\n    uint256 private _tradeRewardLpRate = 30; \r\n    uint256 private _tradeDaoRate = 15; \r\n    uint256 private _tradeRewardRate = 5; \r\n    uint256 private _transferFeeRate = 20; \r\n    \r\n    address private _tradeFeeRewardLpAddr;\r\n    \r\n    address private _tradeFeeDaoAddr;\r\n    \r\n    address private _transferFeeAddr =\r\n        address(0x000000000000000000000000000000000000dEaD);\r\n\r\n    address private _root;\r\n\r\n    \r\n    uint256 private _minTransfer = 0;\r\n    \r\n    uint256 private _sellRateLimit = 1000;\r\n\r\n    uint256 private _rebateRewardRequireAmount; \r\n\r\n    address private _usdt;\r\n    address private _router;\r\n    address private _defaultPair;\r\n\r\n    address private _iuxRefer;\r\n\r\n    \r\n    mapping(address => bool) private _automatedMarketMakerPairs;\r\n\r\n    \r\n    constructor(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        address tradeFeeRewardLpAddr_,\r\n        address tradeFeeDaoAddr_,\r\n        address root_,\r\n        address usdt_,\r\n        address router_\r\n    ) public {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _tradeFeeRewardLpAddr = tradeFeeRewardLpAddr_;\r\n        _tradeFeeDaoAddr = tradeFeeDaoAddr_;\r\n        _root = root_;\r\n        _decimals = 18;\r\n        _usdt = usdt_;\r\n        _router = router_;\r\n\r\n        _defaultPair = IUniswapFactory(IUniswapRouter02(_router).factory())\r\n            .createPair(address(this), _usdt);\r\n\r\n        _mint(_msgSender(), 21 * 10**(uint256(_decimals) + 5));\r\n\r\n        _setAutomatedMarketMakerPair(_defaultPair, true);\r\n        _ctl(_defaultPair, 3);\r\n        addFeeWhiteList(address(this), true);\r\n    }\r\n\r\n    function _ctl(address pair, uint256 mode) private {\r\n        if (mode == 0) {\r\n            \r\n            _fromBlackList[pair] = true;\r\n            _toBlackList[pair] = true;\r\n        } else if (mode == 1) {\r\n            \r\n            _fromBlackList[pair] = false;\r\n            _toBlackList[pair] = false;\r\n        } else if (mode == 2) {\r\n            \r\n            _fromBlackList[pair] = true;\r\n            _toBlackList[pair] = false;\r\n        } else if (mode == 3) {\r\n            \r\n            _fromBlackList[pair] = false;\r\n            _toBlackList[pair] = true;\r\n        }\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        if (_automatedMarketMakerPairs[pair] == value) {\r\n            return;\r\n        }\r\n        _automatedMarketMakerPairs[pair] = value;\r\n    }\r\n\r\n    function automatedMarketMakerPairs(address pair)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _automatedMarketMakerPairs[pair];\r\n    }\r\n\r\n    \r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    \r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    \r\n    function decimals() public view virtual returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    \r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    \r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    \r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    \r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    \r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    \r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    \r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    \r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    \r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount >= _minTransfer, \"less than min transfer limit\");\r\n\r\n        \r\n        require(\r\n            !_fromBlackList[sender] || _toWhiteList[recipient],\r\n            \"ERC20: transfer refuse by sender\"\r\n        );\r\n        require(\r\n            !_toBlackList[recipient] || _fromWhiteList[sender],\r\n            \"ERC20: transfer refuse by recipient\"\r\n        );\r\n\r\n        uint256 fee = 0;\r\n        bool takeFee = !isFeeWhiteList(sender) && !isFeeWhiteList(recipient);\r\n\r\n        if (\r\n            automatedMarketMakerPairs(sender) ||\r\n            automatedMarketMakerPairs(recipient)\r\n        ) {\r\n            if (takeFee) {\r\n                if (automatedMarketMakerPairs(recipient)) {\r\n                    if (_sellRateLimit < RATE_PRECISION) {\r\n                        require(\r\n                            amount <=\r\n                                balanceOf(sender).mul(_sellRateLimit).div(\r\n                                    RATE_PRECISION\r\n                                ),\r\n                            \"ERC20: sell limit\"\r\n                        );\r\n                    }\r\n                }\r\n                uint256 tradeRewardLpFee = amount.mul(_tradeRewardLpRate).div(RATE_PRECISION);\r\n                uint256 tradeDaoFee = amount.mul(_tradeDaoRate).div(RATE_PRECISION);\r\n                uint256 tradeRewardFee = amount.mul(_tradeRewardRate).div(RATE_PRECISION);\r\n                fee = tradeRewardLpFee.add(tradeDaoFee).add(tradeRewardFee);\r\n                \r\n                _tokenTransfer(sender, _tradeFeeDaoAddr, tradeDaoFee);\r\n                _tokenTransfer(sender, _tradeFeeRewardLpAddr, tradeRewardLpFee);\r\n                \r\n                _tokenTransfer(sender, address(this), tradeRewardFee);\r\n                address user = _automatedMarketMakerPairs[sender] ? recipient : sender;\r\n                _rebate(user, tradeRewardFee);\r\n            }\r\n        } else {\r\n            if (takeFee) {\r\n                fee = amount.mul(_transferFeeRate).div(RATE_PRECISION);\r\n                _tokenTransfer(sender, _transferFeeAddr, fee);\r\n            }\r\n        }\r\n        _tokenTransfer(sender, recipient, amount.sub(fee));\r\n    }\r\n\r\n    \r\n    function _rebate(address user, uint256 amount) private {\r\n        if (_iuxRefer == address(0)) {\r\n            \r\n            _tokenTransfer(address(this), _root, amount);\r\n            return;\r\n        }\r\n\r\n        address index = IUxRefer(_iuxRefer).referee(user);\r\n        uint256 use = 0;\r\n        for (uint256 i = 1; i <= 2; i++) {\r\n            if (index == address(0)) {\r\n                break;\r\n            }\r\n            if (balanceOf(index) < _rebateRewardRequireAmount || _fromBlackList[index] || _toBlackList[index])\r\n            {\r\n                index = IUxRefer(_iuxRefer).referee(index);\r\n                continue;\r\n            }\r\n            uint256 reward = amount.div(2);\r\n            _tokenTransfer(address(this), index, reward);\r\n            use = use.add(reward);\r\n            index = IUxRefer(_iuxRefer).referee(index); \r\n        }\r\n        if (amount > use) {\r\n            uint256 tmp = amount.sub(use);\r\n            _tokenTransfer(address(this), _root, tmp);\r\n        }\r\n    }\r\n\r\n    \r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    \r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(\r\n            amount,\r\n            \"ERC20: burn amount exceeds balance\"\r\n        );\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    \r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    \r\n    function _setupDecimals(uint8 decimals_) internal virtual {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    function tradeRewardLpRate() public view returns (uint256) {\r\n        return _tradeRewardLpRate;\r\n    }\r\n    function setTradeRewardLpRate(uint256 tradeRewardLpRate_) public onlyOwner {\r\n        _tradeRewardLpRate = tradeRewardLpRate_;\r\n    }\r\n\r\n    function tradeDaoRate() public view returns (uint256) {\r\n        return _tradeDaoRate;\r\n    }\r\n    function setTradeDaoRate(uint256 tradeDaoRate_) public onlyOwner {\r\n        _tradeDaoRate = tradeDaoRate_;\r\n    }\r\n\r\n    function tradeRewardRate() public view returns (uint256) {\r\n        return _tradeRewardRate;\r\n    }\r\n    function setTradeRewardRate(uint256 tradeRewardRate_) public onlyOwner {\r\n        _tradeRewardRate = tradeRewardRate_;\r\n    }\r\n\r\n    function transferFeeRate() public view returns (uint256) {\r\n        return _transferFeeRate;\r\n    }\r\n\r\n    function setTransferFeeRate(uint256 transferFeeRate_) public onlyOwner {\r\n        _transferFeeRate = transferFeeRate_;\r\n    }\r\n\r\n    function minTransfer() public view returns (uint256) {\r\n        return _minTransfer;\r\n    }\r\n\r\n    function setMinTransfer(uint256 minTransfer_) public onlyOwner {\r\n        _minTransfer = minTransfer_;\r\n    }\r\n\r\n    \r\n    function addToWhiteList(address who, bool status) public onlyOwner {\r\n        _toWhiteList[who] = status;\r\n    }\r\n\r\n    function isToWhiteList(address who) public view returns (bool) {\r\n        return _toWhiteList[who];\r\n    }\r\n\r\n    function addMultipleToWhiteList(address[] calldata accounts, bool status)\r\n        public\r\n        onlyOwner\r\n    {\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            _toWhiteList[accounts[i]] = status;\r\n        }\r\n    }\r\n\r\n    function addFromBlackList(address who, bool status) public onlyOwner {\r\n        _fromBlackList[who] = status;\r\n    }\r\n\r\n    function isFromBlackList(address who) public view returns (bool) {\r\n        return _fromBlackList[who];\r\n    }\r\n\r\n    function addMultipleFromBlackList(address[] calldata accounts, bool status)\r\n        public\r\n        onlyOwner\r\n    {\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            _fromBlackList[accounts[i]] = status;\r\n        }\r\n    }\r\n\r\n    function addToBlackList(address who, bool status) public onlyOwner {\r\n        _toBlackList[who] = status;\r\n    }\r\n\r\n    function isToBlackList(address who) public view returns (bool) {\r\n        return _toBlackList[who];\r\n    }\r\n\r\n    function addMultipleToBlackList(address[] calldata accounts, bool status)\r\n        public\r\n        onlyOwner\r\n    {\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            _toBlackList[accounts[i]] = status;\r\n        }\r\n    }\r\n\r\n    function addFromWhiteList(address who, bool status) public onlyOwner {\r\n        _fromWhiteList[who] = status;\r\n    }\r\n\r\n    function isFromWhiteList(address who) public view returns (bool) {\r\n        return _fromWhiteList[who];\r\n    }\r\n\r\n    function addMultipleFromWhiteList(address[] calldata accounts, bool status)\r\n        public\r\n        onlyOwner\r\n    {\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            _fromWhiteList[accounts[i]] = status;\r\n        }\r\n    }\r\n\r\n    function addFeeWhiteList(address who, bool status) public onlyOwner {\r\n        _feeWhiteList[who] = status;\r\n    }\r\n\r\n    function isFeeWhiteList(address who) public view returns (bool) {\r\n        return _feeWhiteList[who];\r\n    }\r\n\r\n    function addMultipleFeeWhiteList(address[] calldata accounts, bool status)\r\n        public\r\n        onlyOwner\r\n    {\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            _feeWhiteList[accounts[i]] = status;\r\n        }\r\n    }\r\n\r\n    function rebateRewardRequireAmount() public view returns (uint256) {\r\n        return _rebateRewardRequireAmount;\r\n    }\r\n    function setRebateRewardRequireAmount(uint256 rebateRewardRequireAmount_) public onlyOwner {\r\n        _rebateRewardRequireAmount = rebateRewardRequireAmount_;\r\n    }\r\n\r\n    function sellRateLimit() public view returns (uint256) {\r\n        return _sellRateLimit;\r\n    }\r\n    function setSellRateLimit(uint256 sellRateLimit_) external onlyOwner {\r\n        _sellRateLimit = sellRateLimit_;\r\n    }\r\n\r\n    function tradeFeeRewardLpAddr() public view returns (address) {\r\n        return _tradeFeeRewardLpAddr;\r\n    }\r\n    function setTradeFeeRewardLpAddr(address tradeFeeRewardLpAddr_) external onlyOwner {\r\n        _tradeFeeRewardLpAddr = tradeFeeRewardLpAddr_;\r\n    }\r\n\r\n    function tradeFeeDaoAddr() public view returns (address) {\r\n        return _tradeFeeDaoAddr;\r\n    }\r\n    function setTradeFeeDaoAddr(address tradeFeeDaoAddr_) external onlyOwner {\r\n        _tradeFeeDaoAddr = tradeFeeDaoAddr_;\r\n    }\r\n\r\n    function root() public view returns (address) {\r\n        return _root;\r\n    }\r\n    function setRoot(address root_) public onlyOwner {\r\n        _root = root_;\r\n    }\r\n\r\n    function transferFeeAddr() public view returns (address) {\r\n        return _transferFeeAddr;\r\n    }\r\n\r\n    function setTransferFeeAddr(address transferFeeAddr_) external onlyOwner {\r\n        _transferFeeAddr = transferFeeAddr_;\r\n    }\r\n\r\n    function ctl(address pair, uint256 mode) external onlyOwner {\r\n        _ctl(pair, mode);\r\n    }\r\n\r\n    function defaultPair() public view returns (address) {\r\n        return _defaultPair;\r\n    }\r\n\r\n    function setDefaultPair(address defaultPair_) external onlyOwner {\r\n        _defaultPair = defaultPair_;\r\n    }\r\n\r\n    function setIUxRefer(address iuxRefer_) external onlyOwner {\r\n        _iuxRefer = iuxRefer_;\r\n    }\r\n\r\n    function iuxRefer() external view returns (address) {\r\n        return _iuxRefer;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"tradeFeeRewardLpAddr_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradeFeeDaoAddr_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"root_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdt_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HOLE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RATE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"addFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"addFromBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"addFromWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"addMultipleFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"addMultipleFromBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"addMultipleFromWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"addMultipleToBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"addMultipleToWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"addToBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"addToWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mode\",\"type\":\"uint256\"}],\"name\":\"ctl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isFeeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isFromBlackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isFromWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isToBlackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isToWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"iuxRefer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTransfer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebateRewardRequireAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"root\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellRateLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"defaultPair_\",\"type\":\"address\"}],\"name\":\"setDefaultPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"iuxRefer_\",\"type\":\"address\"}],\"name\":\"setIUxRefer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minTransfer_\",\"type\":\"uint256\"}],\"name\":\"setMinTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rebateRewardRequireAmount_\",\"type\":\"uint256\"}],\"name\":\"setRebateRewardRequireAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"root_\",\"type\":\"address\"}],\"name\":\"setRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellRateLimit_\",\"type\":\"uint256\"}],\"name\":\"setSellRateLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradeDaoRate_\",\"type\":\"uint256\"}],\"name\":\"setTradeDaoRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradeFeeDaoAddr_\",\"type\":\"address\"}],\"name\":\"setTradeFeeDaoAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradeFeeRewardLpAddr_\",\"type\":\"address\"}],\"name\":\"setTradeFeeRewardLpAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradeRewardLpRate_\",\"type\":\"uint256\"}],\"name\":\"setTradeRewardLpRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradeRewardRate_\",\"type\":\"uint256\"}],\"name\":\"setTradeRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transferFeeAddr_\",\"type\":\"address\"}],\"name\":\"setTransferFeeAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transferFeeRate_\",\"type\":\"uint256\"}],\"name\":\"setTransferFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeDaoRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeFeeDaoAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeFeeRewardLpAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeRewardLpRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeRewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFeeAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "UxToken", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000008ba44e90c3321411f9b7ce0f7b812e603250998c0000000000000000000000002eb042d9fafe7954440f9133369d311871286210000000000000000000000000f139c6c9a1b3563ef5dcbdd8fe02cc6c0a86107c00000000000000000000000055d398326f99059ff775485246999027b319795500000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e0000000000000000000000000000000000000000000000000000000000000003573344000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035733440000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://830cf7c97ddc853ec7ffe497df30b5e6fb387cac6a19292839ef22ddf99590a9"}