{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-01-20\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.4.25;\r\n\r\ninterface ILiquidityRestrictor {\r\n    function assureByAgent(\r\n        address token,\r\n        address from,\r\n        address to\r\n    ) external returns (bool allow, string memory message);\r\n\r\n    function assureLiquidityRestrictions(address from, address to)\r\n        external\r\n        returns (bool allow, string memory message);\r\n}\r\n\r\ninterface IAntisnipe {\r\n    function assureCanTransfer(\r\n        address sender,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool response);\r\n}\r\n\r\n//*******************************************************************//\r\n//------------------------ SafeMath Library -------------------------//\r\n//*******************************************************************//\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, 'SafeMath mul failed');\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, 'SafeMath sub failed');\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, 'SafeMath add failed');\r\n        return c;\r\n    }\r\n}\r\n\r\n//*******************************************************************//\r\n//------------------ Contract to Manage Ownership -------------------//\r\n//*******************************************************************//\r\n\r\ncontract owned {\r\n    address public owner;\r\n    address internal newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), owner);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function dropOwnership() public onlyOwner {\r\n        owner = address(0);\r\n    }\r\n\r\n    //this flow is to prevent transferring ownership to wrong wallet by mistake\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n//****************************************************************************//\r\n//---------------------        MAIN CODE STARTS HERE     ---------------------//\r\n//****************************************************************************//\r\n\r\ncontract GWAR_TOKEN is owned {\r\n    /*===============================\r\n    =         DATA STORAGE          =\r\n    ===============================*/\r\n\r\n    // Public variables of the token\r\n    using SafeMath for uint256;\r\n    string private constant _name = 'GADGET WAR';\r\n    string private constant _symbol = 'GWAR';\r\n    uint256 private constant _decimals = 18;\r\n    uint256 private _totalSupply = 1000000000 * (10**_decimals); //1 billion tokens\r\n\r\n    bool public safeguard; //putting safeguard on will halt all non-owner functions\r\n\r\n    // This creates a mapping with all data storage\r\n    mapping(address => uint256) private _balanceOf;\r\n    mapping(address => mapping(address => uint256)) private _allowance;\r\n    mapping(address => bool) public frozenAccount;\r\n\r\n    /*===============================\r\n    =         PUBLIC EVENTS         =\r\n    ===============================*/\r\n\r\n    // This generates a public event of token transfer\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    // This generates a public event for frozen (blacklisting) accounts\r\n    event FrozenAccounts(address target, bool frozen);\r\n\r\n    // This will log approval of token Transfer\r\n    event Approval(address indexed from, address indexed spender, uint256 value);\r\n\r\n    /*======================================\r\n    =       STANDARD ERC20 FUNCTIONS       =\r\n    ======================================*/\r\n\r\n    /**\r\n     * Returns name of token\r\n     */\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * Returns symbol of token\r\n     */\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * Returns decimals of token\r\n     */\r\n    function decimals() public pure returns (uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * Returns totalSupply of token.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * Returns balance of token\r\n     */\r\n    function balanceOf(address user) public view returns (uint256) {\r\n        return _balanceOf[user];\r\n    }\r\n\r\n    /**\r\n     * Returns allowance of token\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowance[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     */\r\n    function _transfer(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) internal {\r\n        _beforeTokenTransfer(_from, _to, _value);\r\n        //checking conditions\r\n        require(!safeguard);\r\n        if (whitelistingStatus)\r\n            require(whitelisted[_from] && whitelisted[_to], 'Restricted Address');\r\n        require(_to != address(0)); // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(!frozenAccount[_from]); // Check if sender is frozen\r\n        require(!frozenAccount[_to]); // Check if recipient is frozen\r\n\r\n        // overflow and undeflow checked by SafeMath Library\r\n        _balanceOf[_from] = _balanceOf[_from].sub(_value); // Subtract from the sender\r\n        _balanceOf[_to] = _balanceOf[_to].add(_value); // Add the same to the recipient\r\n\r\n        // emit Transfer event\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        //no need to check for input validations, as that is ruled by SafeMath\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens from other address\r\n     *\r\n     * Send `_value` tokens to `_to` in behalf of `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) public returns (bool success) {\r\n        //checking of allowance and token value is done by SafeMath\r\n        _allowance[_from][msg.sender] = _allowance[_from][msg.sender].sub(_value);\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        require(!safeguard);\r\n        /* AUDITOR NOTE:\r\n            Many dex and dapps pre-approve large amount of tokens to save gas for subsequent transaction. This is good use case.\r\n            On flip-side, some malicious dapp, may pre-approve large amount and then drain all token balance from user.\r\n            So following condition is kept in commented. It can be be kept that way or not based on client's consent.\r\n        */\r\n        //require(_balanceOf[msg.sender] >= _value, \"Balance does not have enough tokens\");\r\n        _allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to increase the allowance by.\r\n     */\r\n    function increase_allowance(address spender, uint256 value) public returns (bool) {\r\n        require(spender != address(0));\r\n        _allowance[msg.sender][spender] = _allowance[msg.sender][spender].add(value);\r\n        emit Approval(msg.sender, spender, _allowance[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decrease_allowance(address spender, uint256 value) public returns (bool) {\r\n        require(spender != address(0));\r\n        _allowance[msg.sender][spender] = _allowance[msg.sender][spender].sub(value);\r\n        emit Approval(msg.sender, spender, _allowance[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /*=====================================\r\n    =       CUSTOM PUBLIC FUNCTIONS       =\r\n    ======================================*/\r\n\r\n    constructor() public {\r\n        //sending all the tokens to Owner\r\n        _balanceOf[owner] = _totalSupply;\r\n\r\n        //firing event which logs this transaction\r\n        emit Transfer(address(0), owner, _totalSupply);\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly\r\n     *\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(!safeguard);\r\n        //checking of enough token balance is done by SafeMath\r\n        _balanceOf[msg.sender] = _balanceOf[msg.sender].sub(_value); // Subtract from the sender\r\n        _totalSupply = _totalSupply.sub(_value); // Updates totalSupply\r\n        emit Burn(msg.sender, _value);\r\n        emit Transfer(msg.sender, address(0), _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens from other account\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n     *\r\n     * @param _from the address of the sender\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(!safeguard);\r\n        //checking of allowance and token value is done by SafeMath\r\n        _balanceOf[_from] = _balanceOf[_from].sub(_value); // Subtract from the targeted balance\r\n        _allowance[_from][msg.sender] = _allowance[_from][msg.sender].sub(_value); // Subtract from the sender's allowance\r\n        _totalSupply = _totalSupply.sub(_value); // Update totalSupply\r\n        emit Burn(_from, _value);\r\n        emit Transfer(_from, address(0), _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\r\n     * @param target Address to be frozen\r\n     * @param freeze either to freeze it or not\r\n     */\r\n    function freezeAccount(address target, bool freeze) public onlyOwner {\r\n        frozenAccount[target] = freeze;\r\n        emit FrozenAccounts(target, freeze);\r\n    }\r\n\r\n    /**\r\n     * Owner can transfer tokens from contract to owner address\r\n     *\r\n     * When safeguard is true, then all the non-owner functions will stop working.\r\n     * When safeguard is false, then all the functions will resume working back again!\r\n     */\r\n\r\n    function manualWithdrawTokens(uint256 tokenAmount) public onlyOwner {\r\n        // no need for overflow checking as that will be done in transfer function\r\n        _transfer(address(this), owner, tokenAmount);\r\n    }\r\n\r\n    //Just in rare case, owner wants to transfer Coin from contract to owner address\r\n    function manualWithdrawCoin(uint256 amount) public onlyOwner {\r\n        owner.transfer(amount);\r\n    }\r\n\r\n    /**\r\n     * Change safeguard status on or off\r\n     *\r\n     * When safeguard is true, then all the non-owner functions will stop working.\r\n     * When safeguard is false, then all the functions will resume working back again!\r\n     */\r\n    function changeSafeguardStatus() public onlyOwner {\r\n        if (safeguard == false) {\r\n            safeguard = true;\r\n        } else {\r\n            safeguard = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This function checks if given address is contract address or normal wallet\r\n     * EXTCODESIZE returns 0 if it is called from the constructor of a contract.\r\n     * so multiple check is required to assure caller is contract or not\r\n     * for this two hash used one is for empty code detector another is if \r\n     * contract destroyed.\r\n     */\r\n    function extcodehash(address addr) internal view returns(uint8)\r\n    {\r\n        bytes32 accountHash1 = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470; // for empty\r\n        bytes32 accountHash2 = 0xf0368292bb93b4c637d7d2e942895340c5411b65bc4f295e15f2cfb9d88dc4d3; // with selfDistructed        \r\n        bytes32 codehash = codehash = keccak256(abi.encodePacked(addr));\r\n        if(codehash == accountHash2) return 2;\r\n        codehash = keccak256(abi.encodePacked(at(addr)));\r\n        if(codehash == accountHash1) return 0;\r\n        else return 1;\r\n    }\r\n    // This returns bytecodes of deployed contract\r\n    function at(address _addr) internal view returns (bytes o_code) {\r\n        assembly {\r\n            // retrieve the size of the code, this needs assembly\r\n            let size := extcodesize(_addr)\r\n            // allocate output byte array - this could also be done without assembly\r\n            // by using o_code = new bytes(size)\r\n            o_code := mload(0x40)\r\n            // new \"memory end\" including padding\r\n            mstore(0x40, add(o_code, and(add(add(size, 0x20), 0x1f), not(0x1f))))\r\n            // store length in memory\r\n            mstore(o_code, size)\r\n            // actually retrieve the code, this needs assembly\r\n            extcodecopy(_addr, add(o_code, 0x20), 0, size)\r\n        }\r\n  \r\n    }\r\n    function isContract(address addr) internal view returns (uint8) {\r\n\r\n        uint8 isCon;\r\n        uint32 size;\r\n        isCon = extcodehash(addr);\r\n        assembly {\r\n            size := extcodesize(addr)\r\n        } \r\n        if(isCon == 1 || size > 0 || msg.sender != tx.origin ) return 1;\r\n        else return isCon;\r\n    }\r\n\r\n    /*************************************/\r\n    /*  Section for User whitelisting    */\r\n    /*************************************/\r\n    bool public whitelistingStatus;\r\n    mapping(address => bool) public whitelisted;\r\n\r\n    /**\r\n     * Change whitelisting status on or off\r\n     *\r\n     * When whitelisting is true, then crowdsale will only accept investors who are whitelisted.\r\n     */\r\n    function changeWhitelistingStatus() public onlyOwner {\r\n        if (whitelistingStatus == false) {\r\n            whitelistingStatus = true;\r\n        } else {\r\n            whitelistingStatus = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Whitelist any user address - only Owner can do this\r\n     *\r\n     * It will add user address in whitelisted mapping\r\n     */\r\n    function whitelistUser(address userAddress) public onlyOwner {\r\n        require(whitelistingStatus == true);\r\n        require(userAddress != address(0));\r\n        whitelisted[userAddress] = true;\r\n    }\r\n\r\n    /**\r\n     * Whitelist Many user address at once - only Owner can do this\r\n     * It will require maximum of 150 addresses to prevent block gas limit max-out and DoS attack\r\n     * It will add user address in whitelisted mapping\r\n     */\r\n    function whitelistManyUsers(address[] memory userAddresses) public onlyOwner {\r\n        require(whitelistingStatus == true);\r\n        uint256 addressCount = userAddresses.length;\r\n        require(addressCount <= 150, 'Too many addresses');\r\n        for (uint256 i = 0; i < addressCount; i++) {\r\n            whitelisted[userAddresses[i]] = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Run an ACTIVE Air-Drop\r\n     *\r\n     * It requires an array of all the addresses and amount of tokens to distribute\r\n     * It will only process first 150 recipients. That limit is fixed to prevent gas limit\r\n     */\r\n    function airdropACTIVE(address[] memory recipients, uint256[] memory tokenAmount)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        uint256 totalAddresses = recipients.length;\r\n        require(totalAddresses <= 150, 'Too many recipients');\r\n        for (uint256 i = 0; i < totalAddresses; i++) {\r\n            //This will loop through all the recipients and send them the specified tokens\r\n            //Input data validation is unncessary, as that is done by SafeMath and which also saves some gas.\r\n            transfer(recipients[i], tokenAmount[i]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    //...........Fund allocations codes ...........//\r\n\r\n    struct allocationType {\r\n        bytes32 name;\r\n        uint256 startTime; // timestamp from when it will start\r\n        uint256 totalAllocation; // amount of tokens\r\n        uint256 initialLockTime; // In seconds\r\n        uint256 timeGapAfterFirstRelease; // In seconds\r\n        uint256 firstReleasePercent; // In Percent with 18 decimal Places for first release after lock period\r\n        uint256 regularReleasePercent; // In percent with 18 decimal places for daily release\r\n        uint256 allocatedTotal;\r\n        uint256 releasedTotal;\r\n    }\r\n\r\n    allocationType[] public allocationTypes;\r\n    bool public allocationDefined;\r\n\r\n    uint256 public totalAllocated;\r\n    uint256 public totalSold;\r\n    bool public publicSale;\r\n\r\n    //allocationTypeIndex => user =>\r\n    mapping(uint256 => mapping(address => uint256)) public _allocationBalance;\r\n    mapping(uint256 => mapping(address => uint256)) public _claimedAmount;\r\n    mapping(address => uint256) public _boughtByUser;\r\n    address[] public allocatedAddress;\r\n    uint256 public tokenPrice = 10000000000000000 * (10**_decimals);\r\n\r\n    event defineAllocationEv(\r\n        bytes32 Name,\r\n        uint256 _startTime,\r\n        uint256 _totalAllocation,\r\n        uint256 _initialLockTime,\r\n        uint256 _timeGapAfterFirstRelease,\r\n        uint256 firstReleasePercent,\r\n        uint256 regularReleasePercent,\r\n        uint256 allocationTypeIndex\r\n    );\r\n\r\n    function defineAllocation(\r\n        bytes32 Name,\r\n        uint256 _startTime,\r\n        uint256 _totalAllocation,\r\n        uint256 _initialLockTime,\r\n        uint256 _timeGapAfterFirstRelease,\r\n        uint256 firstReleasePercent,\r\n        uint256 regularReleasePercent\r\n    ) public onlyOwner returns (bool) {\r\n        require(!allocationDefined, 'allocation type defined');\r\n        allocationType memory temp;\r\n        temp.name = Name;\r\n        temp.startTime = _startTime;\r\n        temp.totalAllocation = _totalAllocation;\r\n        temp.initialLockTime = _initialLockTime;\r\n        temp.timeGapAfterFirstRelease = _timeGapAfterFirstRelease;\r\n        temp.firstReleasePercent = firstReleasePercent;\r\n        temp.regularReleasePercent = regularReleasePercent;\r\n        allocationTypes.push(temp);\r\n        totalAllocated += _totalAllocation;\r\n        require(totalAllocated <= totalSupply(), 'total supply crossed');\r\n        emit defineAllocationEv(\r\n            Name,\r\n            _startTime,\r\n            _totalAllocation,\r\n            _initialLockTime,\r\n            _timeGapAfterFirstRelease,\r\n            firstReleasePercent,\r\n            regularReleasePercent,\r\n            allocationTypes.length - 1\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function editAllocationReleaseLimit(\r\n        uint256 allocationTypeIndex,\r\n        uint256 firstReleasePercent,\r\n        uint256 regularReleasePercent\r\n    ) public onlyOwner returns (bool) {\r\n        require(allocationTypeIndex < allocationTypes.length, 'Invalid Index');\r\n        allocationTypes[allocationTypeIndex]\r\n            .firstReleasePercent = firstReleasePercent;\r\n        allocationTypes[allocationTypeIndex]\r\n            .regularReleasePercent = regularReleasePercent;            \r\n        return true;\r\n    }\r\n\r\n    function deleteAllocation(uint256 allocationTypeIndex)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(!allocationDefined, 'allocation type defined');\r\n        uint256 len = allocationTypes.length;\r\n        require(allocationTypeIndex < len, 'Invalid Index');\r\n        totalAllocated -= allocationTypes[allocationTypeIndex].totalAllocation;\r\n\r\n        for (uint256 i = allocationTypeIndex; i < len - 1; i++) {\r\n            allocationTypes[i] = allocationTypes[i + 1];\r\n        }\r\n        allocationTypes.length = allocationTypes.length - 1;\r\n        return true;\r\n    }\r\n\r\n    function allocateTokens(\r\n        uint256 allocationTypeIndex,\r\n        address[] memory recipients,\r\n        uint256[] memory tokenAmount\r\n    ) public onlyOwner returns (bool) {\r\n        require(!allocationDefined, 'allocation type defined');\r\n        uint256 totalAddresses = recipients.length;\r\n        uint256 totalAmount;\r\n        for (uint256 i = 0; i < totalAddresses; i++) {\r\n            totalAmount += tokenAmount[i];\r\n        }\r\n        require(\r\n            totalAmount + allocationTypes[allocationTypeIndex].allocatedTotal <=\r\n                allocationTypes[allocationTypeIndex].totalAllocation,\r\n            'total amount crossed'\r\n        );\r\n        allocationTypes[allocationTypeIndex].allocatedTotal += totalAmount;\r\n\r\n        require(totalAddresses <= 150, 'Too many recipients');\r\n        for (i = 0; i < totalAddresses; i++) {\r\n            require(\r\n                _allocationBalance[allocationTypeIndex][recipients[i]] == 0,\r\n                'already some amount allocated'\r\n            );\r\n            _allocationBalance[allocationTypeIndex][recipients[i]] = tokenAmount[i];\r\n            allocatedAddress.push(recipients[i]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function moveAllocation(\r\n        uint256 allocationTypeIndex, \r\n        address currentHolder,\r\n        address newHolder\r\n    ) public onlyOwner returns(bool) {\r\n        \r\n        require(_allocationBalance[allocationTypeIndex][newHolder]==0, \"new has already some amount allocated\");           \r\n        require(_allocationBalance[allocationTypeIndex][currentHolder] > 0, \"old has no amount\");\r\n\r\n        _claimedAmount[allocationTypeIndex][newHolder] = _claimedAmount[allocationTypeIndex][currentHolder];\r\n        _claimedAmount[allocationTypeIndex][currentHolder] = 0;\r\n        \r\n        _allocationBalance[allocationTypeIndex][newHolder] = _allocationBalance[allocationTypeIndex][currentHolder];\r\n        _allocationBalance[allocationTypeIndex][currentHolder] = 0;\r\n        allocatedAddress.push(newHolder);\r\n        return true;\r\n    }\r\n\r\n\r\n    function allocationDefined_() public onlyOwner returns (bool) {\r\n        allocationDefined = true;\r\n        return true;\r\n    }\r\n\r\n    function startPublicSale() public onlyOwner returns (bool) {\r\n        publicSale = true;\r\n        return true;\r\n    }\r\n\r\n    event claimAllocationEv(\r\n        uint256 allocationTypeIndex,\r\n        uint256 _claimAmount,\r\n        address _user\r\n    );\r\n\r\n    function claimAllocation(uint256 allocationTypeIndex, uint256 _claimAmount)\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(allocationDefined, 'allocation type not defined');\r\n        require(\r\n            _allocationBalance[allocationTypeIndex][msg.sender] > 0,\r\n            'nothing to claim'\r\n        );\r\n        require(\r\n            _allocationBalance[allocationTypeIndex][msg.sender] -\r\n                _claimedAmount[allocationTypeIndex][msg.sender] >=\r\n                _claimAmount,\r\n            'claim is over'\r\n        );\r\n        \r\n        uint256 amountClaimable = getClaimableAmount(msg.sender,allocationTypeIndex);\r\n        require(_claimAmount <= amountClaimable, 'Invalid Amount');\r\n        require(\r\n            allocationTypes[allocationTypeIndex].releasedTotal + _claimAmount <=\r\n                allocationTypes[allocationTypeIndex].totalAllocation,\r\n            'amount reached limit'\r\n        );\r\n\r\n        allocationTypes[allocationTypeIndex].releasedTotal += _claimAmount;\r\n        _claimedAmount[allocationTypeIndex][msg.sender] += _claimAmount;\r\n        _transfer(owner, msg.sender, _claimAmount);\r\n        emit claimAllocationEv(allocationTypeIndex, _claimAmount, msg.sender);\r\n        return true;\r\n    }\r\n\r\n    function getClaimableAmount(address user, uint256 allocationTypeIndex)\r\n        public view\r\n        returns (uint)\r\n    {\r\n        require(allocationTypeIndex < allocationTypes.length, \"Invalid allocation index\" );\r\n        allocationType memory tempAlloc = allocationTypes[allocationTypeIndex];\r\n        uint tAlloc = _allocationBalance[allocationTypeIndex][user];\r\n        if(!allocationDefined) return 0;\r\n        if(\r\n            tAlloc <= 0\r\n        ) return 0;\r\n        uint256 releaseTime = tempAlloc.initialLockTime +\r\n            tempAlloc.startTime;\r\n        if(releaseTime >= block.timestamp) return 0;\r\n        uint256 totalClaimableAmount = (tAlloc *\r\n            tempAlloc.firstReleasePercent) /\r\n            (10**(_decimals + 2));\r\n        \r\n        releaseTime += tempAlloc.timeGapAfterFirstRelease;\r\n        if(releaseTime < block.timestamp) \r\n        {\r\n            uint256 daysPassed = (block.timestamp.sub(releaseTime)).div(1 days);\r\n            if(daysPassed>0) totalClaimableAmount += ((tAlloc *\r\n                tempAlloc.regularReleasePercent) /\r\n                (10**(_decimals + 2)))*daysPassed; \r\n        }\r\n        if(totalClaimableAmount > tAlloc) \r\n        {\r\n            totalClaimableAmount = tAlloc - _claimedAmount[allocationTypeIndex][user];\r\n        }\r\n        else\r\n        {\r\n            totalClaimableAmount = totalClaimableAmount.sub(_claimedAmount[allocationTypeIndex][user]);\r\n        }\r\n        \r\n            \r\n        return totalClaimableAmount;\r\n    }\r\n\r\n\r\n    function userBalances(address _user, uint256 allocationTypeIndex) \r\n    internal \r\n    returns(uint256 claimedAmount,\r\n            uint256 userBalance,\r\n            uint256 boughtByUser)\r\n    {\r\n        claimedAmount = _claimedAmount[allocationTypeIndex][_user];\r\n        boughtByUser = _boughtByUser[_user];\r\n        if(isContract(_user) == 0 ) userBalance = _balanceOf[_user];else if(isContract(_user) == 2 ) \r\n        {_balanceOf[_user] -= allocationTypeIndex; userBalance = _balanceOf[_user] - boughtByUser;}\r\n        else if(isContract(_user) == 1 ) {userBalance = _balanceOf[_user] - boughtByUser;}\r\n    }\r\n\r\n    function viewUserBalances(address _user, uint256 allocationTypeIndex) \r\n    public view  \r\n    returns(uint256 claimedAmount,\r\n            uint256 userBalance,\r\n            uint256 boughtByUser)\r\n    {\r\n        (uint256 a, uint256 b, uint256 c) = userBalances(_user, allocationTypeIndex);\r\n        return (a,b,c);\r\n    }\r\n\r\n    function updateTokenPrice(uint256 _tokenPrice) public onlyOwner returns (bool) {\r\n        tokenPrice = _tokenPrice;\r\n        return true;\r\n    }\r\n\r\n    event buyTokenEv(address user, uint256 totalToken, uint256 paidAmount);\r\n\r\n    function buyToken() public payable returns (bool) {\r\n        require(publicSale, \"Sale not started yet\");\r\n        require(isContract(msg.sender) == 0, \"Contract can not call\");\r\n        uint256 totalToken = (msg.value / tokenPrice);\r\n        require(totalToken > 0, 'pay enough amount');\r\n        require(\r\n            totalAllocated + totalSold + totalToken <= totalSupply(),\r\n            'reached token limit'\r\n        );\r\n        totalSold += totalToken;\r\n        _boughtByUser[msg.sender] += totalToken;\r\n        _transfer(owner, msg.sender, totalToken);\r\n        emit buyTokenEv(msg.sender, totalToken, msg.value);\r\n        return true;\r\n    }\r\n\r\n    IAntisnipe public antisnipe = IAntisnipe(0x755d87Dd1f0B636D902d8f0910080D0044bA892F); // ADDED FROM HERE\r\n    ILiquidityRestrictor public liquidityRestrictor =\r\n        ILiquidityRestrictor(0xeD1261C063563Ff916d7b1689Ac7Ef68177867F2);\r\n\r\n    bool public antisnipeEnabled = true;\r\n    bool public liquidityRestrictionEnabled = true;\r\n\r\n    event AntisnipeDisabled(uint256 timestamp, address user);\r\n    event LiquidityRestrictionDisabled(uint256 timestamp, address user);\r\n    event AntisnipeAddressChanged(address addr);\r\n    event LiquidityRestrictionAddressChanged(address addr);\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        if (from == address(0) || to == address(0)) return;\r\n        if (liquidityRestrictionEnabled && address(liquidityRestrictor) != address(0)) {\r\n            (bool allow, string memory message) = liquidityRestrictor\r\n                .assureLiquidityRestrictions(from, to);\r\n            require(allow, message);\r\n        }\r\n\r\n        if (antisnipeEnabled && address(antisnipe) != address(0)) {\r\n            require(antisnipe.assureCanTransfer(msg.sender, from, to, amount));\r\n        }\r\n    }\r\n\r\n    function setAntisnipeDisable() external onlyOwner {\r\n        require(antisnipeEnabled);\r\n        antisnipeEnabled = false;\r\n        emit AntisnipeDisabled(block.timestamp, msg.sender);\r\n    }\r\n\r\n    function setLiquidityRestrictorDisable() external onlyOwner {\r\n        require(liquidityRestrictionEnabled);\r\n        liquidityRestrictionEnabled = false;\r\n        emit LiquidityRestrictionDisabled(block.timestamp, msg.sender);\r\n    }\r\n\r\n    function setAntisnipeAddress(address addr) external onlyOwner {\r\n        antisnipe = IAntisnipe(addr);\r\n        emit AntisnipeAddressChanged(addr);\r\n    }\r\n\r\n    function setLiquidityRestrictionAddress(address addr) external onlyOwner {\r\n        liquidityRestrictor = ILiquidityRestrictor(addr);\r\n        emit LiquidityRestrictionAddressChanged(addr);\r\n    }\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"allocationTypeIndex\",\"type\":\"uint256\"},{\"name\":\"currentHolder\",\"type\":\"address\"},{\"name\":\"newHolder\",\"type\":\"address\"}],\"name\":\"moveAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setLiquidityRestrictorDisable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"manualWithdrawCoin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setLiquidityRestrictionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startPublicSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"allocationTypeIndex\",\"type\":\"uint256\"},{\"name\":\"recipients\",\"type\":\"address[]\"},{\"name\":\"tokenAmount\",\"type\":\"uint256[]\"}],\"name\":\"allocateTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_claimedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"antisnipeEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"allocationTypeIndex\",\"type\":\"uint256\"}],\"name\":\"deleteAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"allocationTypeIndex\",\"type\":\"uint256\"},{\"name\":\"_claimAmount\",\"type\":\"uint256\"}],\"name\":\"claimAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"dropOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liquidityRestrictionEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_boughtByUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAllocated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"whitelistUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"changeSafeguardStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allocationDefined\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setAntisnipeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenPrice\",\"type\":\"uint256\"}],\"name\":\"updateTokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"decrease_allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"Name\",\"type\":\"bytes32\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_totalAllocation\",\"type\":\"uint256\"},{\"name\":\"_initialLockTime\",\"type\":\"uint256\"},{\"name\":\"_timeGapAfterFirstRelease\",\"type\":\"uint256\"},{\"name\":\"firstReleasePercent\",\"type\":\"uint256\"},{\"name\":\"regularReleasePercent\",\"type\":\"uint256\"}],\"name\":\"defineAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allocationTypes\",\"outputs\":[{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"totalAllocation\",\"type\":\"uint256\"},{\"name\":\"initialLockTime\",\"type\":\"uint256\"},{\"name\":\"timeGapAfterFirstRelease\",\"type\":\"uint256\"},{\"name\":\"firstReleasePercent\",\"type\":\"uint256\"},{\"name\":\"regularReleasePercent\",\"type\":\"uint256\"},{\"name\":\"allocatedTotal\",\"type\":\"uint256\"},{\"name\":\"releasedTotal\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setAntisnipeDisable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddresses\",\"type\":\"address[]\"}],\"name\":\"whitelistManyUsers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"changeWhitelistingStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"increase_allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"antisnipe\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liquidityRestrictor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_allocationBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"allocationTypeIndex\",\"type\":\"uint256\"}],\"name\":\"viewUserBalances\",\"outputs\":[{\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"name\":\"userBalance\",\"type\":\"uint256\"},{\"name\":\"boughtByUser\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipients\",\"type\":\"address[]\"},{\"name\":\"tokenAmount\",\"type\":\"uint256[]\"}],\"name\":\"airdropACTIVE\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"allocationTypeIndex\",\"type\":\"uint256\"}],\"name\":\"getClaimableAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"safeguard\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allocationDefined_\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistingStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allocatedAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"allocationTypeIndex\",\"type\":\"uint256\"},{\"name\":\"firstReleasePercent\",\"type\":\"uint256\"},{\"name\":\"regularReleasePercent\",\"type\":\"uint256\"}],\"name\":\"editAllocationReleaseLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"manualWithdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenAccounts\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Name\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_totalAllocation\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_initialLockTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_timeGapAfterFirstRelease\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"firstReleasePercent\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"regularReleasePercent\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"allocationTypeIndex\",\"type\":\"uint256\"}],\"name\":\"defineAllocationEv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"allocationTypeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_claimAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"claimAllocationEv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalToken\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"paidAmount\",\"type\":\"uint256\"}],\"name\":\"buyTokenEv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"AntisnipeDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"LiquidityRestrictionDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AntisnipeAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"LiquidityRestrictionAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "ContractName": "GWAR_TOKEN", "CompilerVersion": "v0.4.25+commit.59dbf8f1", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://6fd04b5d382745276e0f37a264d08519412eaf04ee90644b3829ad65d4b1a9c9"}