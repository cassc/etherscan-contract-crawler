{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.0; \r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n        return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b, 'SafeMath mul failed');\r\n    return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a, 'SafeMath sub failed');\r\n    return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, 'SafeMath add failed');\r\n    return c;\r\n    }\r\n}\r\n\r\n \r\ncontract owned {\r\n    address  public owner;\r\n    address  internal newOwner;\r\n\r\nmodifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n   \r\n}\r\n\r\ninterface tokenInterface\r\n {\r\n    function transfer(address _to, uint256 _amount) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _amount) external returns (bool);\r\n    function balanceOf(address _user) external view returns(uint);\r\n }\r\n\r\ncontract Tycoon_coin_exchange is owned {\r\n\r\n    address public tokenAddress;\r\n    address public USDTAddress;\r\n\r\n    mapping(address => uint) public userTokenAmount;\r\n\r\n\r\n    constructor(){\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function topupFund(address _USDTAddress, address _tokenAddress, uint initialUSDT, uint initialToken) public onlyOwner returns(bool)\r\n    {\r\n        require(initialToken > 0 && initialUSDT > 0, \"invalid initial\");\r\n        owner = msg.sender;\r\n        tokenInterface(_tokenAddress).transferFrom(msg.sender,address(this),initialToken);\r\n        tokenInterface(_USDTAddress).transferFrom(msg.sender,address(this),initialUSDT);\r\n        USDTAddress = _USDTAddress;\r\n        tokenAddress = _tokenAddress;\r\n        userTokenAmount[msg.sender] = initialToken;\r\n        return true;\r\n    }\r\n\r\n\r\n    //current rate is with divisor 1000000000000000000 , to adjust fractional values\r\n    function currentRate() public view returns(uint)\r\n    {\r\n        uint usdtBalance = tokenInterface(USDTAddress).balanceOf(address(this)); \r\n        uint tBalance = tokenInterface(tokenAddress).balanceOf(address(this));\r\n        uint curRate =  usdtBalance * (10 ** 18 ) / tBalance;\r\n        return curRate;\r\n    }\r\n\r\n    function TYCO_COIN_Locked_Token(address token, uint256 values) public onlyOwner {     \r\n        tokenInterface(token).transfer(owner, values);       \r\n    }\r\n\r\n    event tokenBoughtEv(address _user, uint usdt, uint token);\r\n    function buyTokens(uint _amountUSDT) public {\r\n       \r\n        tokenInterface(USDTAddress).transferFrom(msg.sender, address(this), _amountUSDT);\r\n        \r\n        uint tokenAmount = _amountUSDT * ( 10 ** 18 ) / currentRate();                 // calculates the tokenAmount\r\n        tokenInterface(tokenAddress).transfer(msg.sender, tokenAmount);\r\n        userTokenAmount[msg.sender]+= tokenAmount;\r\n        emit tokenBoughtEv(msg.sender, _amountUSDT, tokenAmount);\r\n    }\r\n\r\n    event tokenSoldEv(address _soldBy,uint receivedUSDT, uint _soldAmount);\r\n    function sellTokens(uint256 amountToken) public {\r\n        require(userTokenAmount[msg.sender] >= amountToken, \"low balance\");\r\n        tokenInterface(tokenAddress).transferFrom(msg.sender,address(this), amountToken);\r\n\r\n        userTokenAmount[msg.sender] -= amountToken;\r\n\r\n        uint256 usdtAmount = amountToken * currentRate() /(10 ** 18);\r\n        usdtAmount = usdtAmount;\r\n        require(tokenInterface(USDTAddress).balanceOf(address(this)) >= usdtAmount,\"insufficient usdt available\");   // checks if the contract has enough usdt to buy\r\n\r\n        tokenInterface(USDTAddress).transfer(msg.sender,usdtAmount);\r\n        emit tokenSoldEv(msg.sender, usdtAmount, amountToken);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"}],\"name\":\"tokenBoughtEv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_soldBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receivedUSDT\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_soldAmount\",\"type\":\"uint256\"}],\"name\":\"tokenSoldEv\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"values\",\"type\":\"uint256\"}],\"name\":\"TYCO_COIN_Locked_Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDTAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountUSDT\",\"type\":\"uint256\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"}],\"name\":\"sellTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_USDTAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialUSDT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialToken\",\"type\":\"uint256\"}],\"name\":\"topupFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Tycoon_coin_exchange", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d85587244e3fd68e1d4fa62daae3ab3a9d10652b608414096080b28db9e1f341"}