{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nabstract contract Context {\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {codehash := extcodehash(account)}\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success,) = recipient.call{ value : amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{ value : weiValue}(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor(address tokenOwner) {\r\n        _transferOwnership(tokenOwner);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address owner) external view returns (uint);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n}\r\n\r\n\r\ncontract USDStore {\r\n    constructor(address usd) {\r\n        IERC20(usd).approve(msg.sender, type(uint256).max);\r\n    }\r\n}\r\n\r\ncontract LpDividend is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    uint256 private _totalSupply;\r\n\r\n    address payable public marketingReceiver;\r\n    address public Dead = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    address public rewardsAddress;\r\n    address[] public lpHolders;\r\n    mapping(address => bool) private _lpFlag;\r\n    bool public currencyFlag;\r\n\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) public automatedMarketMakerPairs;\r\n    mapping (address => bool) public _isFeeExempt;\r\n    bool public autoSwapBack = true;\r\n    uint256 private _swapThreshold;\r\n    uint256 public _minCirculation;\r\n    uint256 public FeeDeno = 1000;\r\n\r\n    uint256 public currentIndex;\r\n    uint256 public lpProcessThreshold;\r\n    uint256 public minAmountLpHolder;\r\n    uint256 public gasForProcessing;\r\n    uint256 public lpProcessTime;\r\n    uint256 public processLpWaitBlock = 5;\r\n\r\n    uint256 public LiquidityFeeAmounts;\r\n    uint256 public MarketingFeeAmounts;\r\n    uint256 public LpFeeAmounts;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapPair;\r\n\r\n    address public USD;\r\n    USDStore public usdStore;\r\n\r\n    uint256 public airdropNums;\r\n\r\n    uint256 public swapStartTime;\r\n\r\n    mapping(address => bool) public _isBlacklisted;\r\n\r\n    uint256 public inLiquidityFee;\r\n    uint256 public inMarketingFee;\r\n    uint256 public inLpRewardFee;\r\n    uint256 public inBurnFee;\r\n    uint256 public outLiquidityFee;\r\n    uint256 public outMarketingFee;\r\n    uint256 public outLpRewardFee;\r\n    uint256 public outBurnFee;\r\n\r\n    bool public inSwap;\r\n    modifier swapping {\r\n        require (inSwap == false, \"ReentrancyGuard: reentrant call\");\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n    modifier validRecipient(address to) {\r\n        require(to != address(0x0), \"Recipient zero address\");\r\n        _;\r\n    }\r\n\r\n    constructor (\r\n        string memory tokenName,\r\n        string memory tokenSymbol,\r\n        uint256 supply,\r\n        address[] memory addressArray, // 0-owner,1-router,2-service,3-marketing,4-usdAddress,5-rewardsAddress\r\n        uint256 minAmountLp,\r\n        uint256[] memory baseFees    ) payable Ownable(addressArray[0]) {\r\n        _name = tokenName;\r\n        _symbol = tokenSymbol;\r\n        _decimals = 18;\r\n        _totalSupply = supply  * 10 ** _decimals;\r\n\r\n        _minCirculation = 1 * 10**_decimals;\r\n        _swapThreshold = 10 * 10**_decimals; // 0.0001%;\r\n\r\n        marketingReceiver = payable(addressArray[3]);\r\n        if (addressArray[5] == address(0)) {\r\n            currencyFlag = true;\r\n            rewardsAddress = address(this);\r\n            lpProcessThreshold = (10 ** _decimals); // min Lp Rewards Dividend\r\n        } else {\r\n            currencyFlag = false;\r\n            rewardsAddress = addressArray[5];\r\n            lpProcessThreshold = (10 ** IERC20(rewardsAddress).decimals()); // min Lp Rewards Dividend\r\n        }\r\n\r\n        minAmountLpHolder = minAmountLp;\r\n\r\n        // use by default 300,000 gas to process auto-claiming dividends\r\n        gasForProcessing = 300000;\r\n\r\n        _isFeeExempt[marketingReceiver] = true;\r\n        _isFeeExempt[owner()] = true;\r\n        _isFeeExempt[address(this)] = true;\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(addressArray[1]);\r\n        uniswapV2Router = _uniswapV2Router;\r\n        _allowances[address(this)][address(uniswapV2Router)] = type(uint256).max;\r\n\r\n        USD = addressArray[4];\r\n        uniswapPair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), USD);\r\n        usdStore = new USDStore(USD);\r\n        IERC20(USD).approve(address(uniswapV2Router), type(uint256).max);\r\n        automatedMarketMakerPairs[address(uniswapPair)] = true;\r\n\r\n        inLiquidityFee = baseFees[0];\r\n        inMarketingFee = baseFees[1];\r\n        inLpRewardFee = baseFees[2];\r\n        inBurnFee = baseFees[3];\r\n        outLiquidityFee = baseFees[4];\r\n        outMarketingFee = baseFees[5];\r\n        outLpRewardFee = baseFees[6];\r\n        outBurnFee = baseFees[7];\r\n\r\n        _balances[owner()] = _totalSupply;\r\n        payable(addressArray[2]).transfer(msg.value);\r\n        emit Transfer(address(0), owner(), _totalSupply);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function swapThreshold() public view returns (uint256) {\r\n        return _swapThreshold;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override validRecipient(recipient) returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override validRecipient(recipient) returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private returns (bool) {\r\n        require(amount > 0);\r\n        require(!_isBlacklisted[sender] && !_isBlacklisted[recipient], \"In blacklist\");\r\n        if(inSwap){\r\n            return _basicTransfer(sender, recipient, amount);\r\n        }\r\n        if (shouldSwapBack(sender, recipient)) {\r\n            distributeFees();\r\n        }\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient balance\");\r\n        uint256 amountReceived = shouldTakeFee(sender, recipient) ? takeFee(sender, recipient, amount) : amount;\r\n        _balances[recipient] = _balances[recipient].add(amountReceived);\r\n        emit Transfer(sender, recipient, amountReceived);\r\n\r\n        if (sender != address(this) && \r\n        automatedMarketMakerPairs[recipient] &&\r\n        _isAddLiquidity()) {\r\n            setLpHolder(sender);\r\n        }\r\n\r\n        if (!inSwap &&\r\n        sender != address(this) &&\r\n        block.number > lpProcessTime + processLpWaitBlock\r\n        ) {\r\n            _processLp(gasForProcessing);\r\n            lpProcessTime = block.number;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function shouldSwapBack(address sender, address recipient) internal view returns (bool) {\r\n        return\r\n            autoSwapBack &&\r\n            !automatedMarketMakerPairs[sender] &&\r\n            !inSwap &&\r\n            sender != owner() &&\r\n            recipient != owner() &&\r\n            balanceOf(address(this)) >= _swapThreshold &&\r\n            !_isAddLiquidity();\r\n\r\n    }\r\n\r\n    function manualSwap() public onlyOwner {\r\n        require(balanceOf(address(this)) > 0, \"token balance zero\");\r\n        distributeFees();\r\n    }\r\n\r\n    function distributeFees() private swapping {\r\n        if(currencyFlag){\r\n            uint256 liquidityTokens = LiquidityFeeAmounts.div(2);\r\n            uint256 swapTokens = liquidityTokens.add(MarketingFeeAmounts);\r\n            if (swapTokens > 0) {\r\n                swapTokensForUsd(swapTokens);\r\n                uint256 usdReceived = IERC20(USD).balanceOf(address(usdStore));\r\n                uint256 liquidityUsd = usdReceived.mul(liquidityTokens).div(swapTokens);\r\n                uint256 marketingUsd = usdReceived.sub(liquidityUsd);\r\n                transferUsd(address(this), usdReceived);\r\n                if(liquidityUsd > 0 && liquidityTokens > 0) {\r\n                    addLiquidityUsd(liquidityTokens, liquidityUsd);\r\n                    LiquidityFeeAmounts = 0;\r\n                }\r\n                if(marketingUsd > 0) {\r\n                    IERC20(USD).transfer(marketingReceiver, marketingUsd);\r\n                    MarketingFeeAmounts = 0;\r\n                } \r\n            }\r\n            LpFeeAmounts = 0;\r\n        }else if(USD == rewardsAddress){\r\n            uint256 liquidityTokens = LiquidityFeeAmounts.div(2);\r\n            uint256 swapTokens = liquidityTokens.add(MarketingFeeAmounts).add(LpFeeAmounts);\r\n            swapTokensForUsd(swapTokens);\r\n            uint256 usdReceived = IERC20(USD).balanceOf(address(usdStore));\r\n            uint256 liquidityUsd = usdReceived.mul(liquidityTokens).div(swapTokens);\r\n            uint256 marketingUsd = usdReceived.mul(MarketingFeeAmounts).div(swapTokens);\r\n\r\n            transferUsd(address(this), usdReceived);\r\n            if(liquidityUsd > 0 && liquidityTokens > 0) {\r\n                addLiquidityUsd(liquidityTokens, liquidityUsd);\r\n                LiquidityFeeAmounts = 0;\r\n            }\r\n            if(marketingUsd > 0) {\r\n                IERC20(USD).transfer(marketingReceiver, marketingUsd);\r\n                MarketingFeeAmounts = 0;\r\n            } \r\n            if(LpFeeAmounts > 0) {\r\n                LpFeeAmounts = 0;\r\n            }     \r\n        }else {\r\n            uint256 liquidityTokens = LiquidityFeeAmounts.div(2);\r\n            uint256 swapTokens = liquidityTokens.add(MarketingFeeAmounts);\r\n            if (swapTokens > 0) {\r\n                swapTokensForUsd(swapTokens);\r\n                uint256 usdReceived = IERC20(USD).balanceOf(address(usdStore));\r\n                uint256 liquidityUsd = usdReceived.mul(liquidityTokens).div(swapTokens);\r\n                uint256 marketingUsd = usdReceived.sub(liquidityUsd);\r\n\r\n                transferUsd(address(this), usdReceived);\r\n                if(liquidityUsd > 0 && liquidityTokens > 0) {\r\n                    addLiquidityUsd(liquidityTokens, liquidityUsd);\r\n                    LiquidityFeeAmounts = 0;\r\n                }\r\n                if(marketingUsd > 0) {\r\n                    IERC20(USD).transfer(marketingReceiver, marketingUsd);\r\n                    MarketingFeeAmounts = 0;\r\n                } \r\n            }\r\n            if(LpFeeAmounts > 0) {\r\n                // generate the uniswap pair path of token -> weth -> rewards\r\n                address[] memory path = new address[](3);\r\n                path[0] = address(this);\r\n                path[1] = USD;\r\n                path[2] = rewardsAddress;\r\n                // make the swap\r\n                try\r\n                    uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                        LpFeeAmounts,\r\n                        0, // accept any amount of USDT\r\n                        path,\r\n                        address(this),\r\n                        block.timestamp\r\n                    )\r\n                {\r\n                    LpFeeAmounts = 0;\r\n                }catch{}\r\n            }   \r\n        }\r\n    }\r\n\r\n    function swapTokensForUsd(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = USD;\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of USD\r\n            path,\r\n            address(usdStore),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidityUsd(uint256 tokenAmount, uint256 USDTAmount) private {\r\n        uniswapV2Router.addLiquidity(\r\n            address(this),\r\n            USD,\r\n            tokenAmount,\r\n            USDTAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            marketingReceiver,\r\n            block.timestamp\r\n        );\r\n        addLpHolder(marketingReceiver);\r\n    }\r\n\r\n    function transferUsd(address recipient, uint256 amount) private {\r\n        IERC20(USD).transferFrom(address(usdStore), recipient, amount);\r\n    }\r\n\r\n    function shouldTakeFee(address from, address to) internal view returns (bool) {\r\n        if (_isFeeExempt[from] || _isFeeExempt[to]) {\r\n            return false;\r\n        }\r\n        return (automatedMarketMakerPairs[from] || automatedMarketMakerPairs[to]);\r\n    }\r\n\r\n    function setFeeExempt(address account, bool value) public onlyOwner {\r\n        _isFeeExempt[account] = value;\r\n    }\r\n\r\n    function setMinCirculation(uint256 amount) public onlyOwner {\r\n        _minCirculation = amount;\r\n    }\r\n\r\n    function setSwapThreshold(uint256 amount) external onlyOwner {\r\n        _swapThreshold = amount;\r\n    }\r\n\r\n    function setMarketingReceiver(address account) external onlyOwner {\r\n        marketingReceiver = payable(account);\r\n    }\r\n\r\n    function setAutoSwapBack(bool value) external onlyOwner {\r\n        autoSwapBack = value;\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(Dead));\r\n    }\r\n\r\n    function setAutomatedMarketMakerPairs(address pair, bool value) public onlyOwner {\r\n        automatedMarketMakerPairs[pair] = value;\r\n    }\r\n\r\n    function changeRouterVersion(address newRouter) external onlyOwner returns(address newPair) {\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(newRouter);\r\n        uniswapV2Router = _uniswapV2Router;\r\n        _allowances[address(this)][address(uniswapV2Router)] = type(uint256).max;\r\n\r\n        newPair = IUniswapV2Factory(uniswapV2Router.factory()).getPair(address(this), uniswapV2Router.WETH());\r\n        if(newPair == address(0)) {\r\n            newPair = IUniswapV2Factory(uniswapV2Router.factory())\r\n                .createPair(address(this), uniswapV2Router.WETH());\r\n        }\r\n\r\n        IERC20(USD).approve(address(uniswapV2Router), type(uint256).max);\r\n        newPair = IUniswapV2Factory(uniswapV2Router.factory()).getPair(address(this), USD);\r\n        if(newPair == address(0)) {\r\n            newPair = IUniswapV2Factory(uniswapV2Router.factory())\r\n                .createPair(address(this), USD);\r\n        }\r\n\r\n        uniswapPair = newPair; \r\n        automatedMarketMakerPairs[address(uniswapPair)] = true;\r\n    }\r\n\r\n    function removeToken(address tokenAddress, uint256 amount) external onlyOwner {\r\n        if (tokenAddress == address(0))\r\n            payable(msg.sender).transfer(amount);\r\n        else\r\n            IERC20(tokenAddress).transfer(msg.sender, amount);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {\r\n        bool isAdd;  \r\n        bool isRemove;\r\n        uint256 lpRewardAmount;\r\n        uint256 receiveAmount;\r\n\r\n        if (automatedMarketMakerPairs[recipient]) {\r\n            isAdd = _isAddLiquidity();\r\n        } else if (automatedMarketMakerPairs[sender]) {\r\n            isRemove = _isRemoveLiquidity();\r\n        }\r\n\r\n        if(isAdd){\r\n            return amount;\r\n        }else if(isRemove){\r\n            return amount;\r\n        }\r\n        if (block.timestamp < swapStartTime) {\r\n            require(false, \"Swap no start\");\r\n        }\r\n        uint256 liquidityAmount;\r\n        uint256 marketingAmount;\r\n        uint256 burnAmount;\r\n        uint256 feeAmount;\r\n        if(automatedMarketMakerPairs[sender]) {\r\n            liquidityAmount = amount.mul(inLiquidityFee).div(FeeDeno);\r\n            LiquidityFeeAmounts += liquidityAmount;\r\n            \r\n            marketingAmount = amount.mul(inMarketingFee).div(FeeDeno);\r\n            MarketingFeeAmounts += marketingAmount;\r\n\r\n            lpRewardAmount = amount.mul(inLpRewardFee).div(FeeDeno);\r\n            LpFeeAmounts += lpRewardAmount;\r\n\r\n            feeAmount = liquidityAmount.add(lpRewardAmount).add(marketingAmount);\r\n            if(inBurnFee > 0 && getCirculatingSupply() > _minCirculation) {\r\n                burnAmount = amount.mul(inBurnFee).div(FeeDeno);\r\n            }\r\n        }else if(automatedMarketMakerPairs[recipient]) {\r\n            liquidityAmount = amount.mul(outLiquidityFee).div(FeeDeno);\r\n            LiquidityFeeAmounts += liquidityAmount;\r\n            \r\n            marketingAmount = amount.mul(outMarketingFee).div(FeeDeno);\r\n            MarketingFeeAmounts += marketingAmount;\r\n\r\n            lpRewardAmount = amount.mul(outLpRewardFee).div(FeeDeno);\r\n            LpFeeAmounts += lpRewardAmount;\r\n\r\n            feeAmount = liquidityAmount.add(lpRewardAmount).add(marketingAmount);\r\n            if(outBurnFee > 0 && getCirculatingSupply() > _minCirculation) {\r\n                burnAmount = amount.mul(outBurnFee).div(FeeDeno);\r\n            }  \r\n        }\r\n\r\n        receiveAmount = amount.sub(feeAmount.add(burnAmount));\r\n        if(feeAmount > 0) {\r\n            _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n            emit Transfer(sender, address(this), feeAmount);\r\n        }\r\n        if (burnAmount > 0) {\r\n            _balances[Dead] = _balances[Dead].add(burnAmount);\r\n            emit Transfer(sender, Dead, burnAmount);\r\n        }\r\n\r\n        if(airdropNums > 0 && (automatedMarketMakerPairs[sender] || automatedMarketMakerPairs[recipient])){\r\n            _airdrop(sender, airdropNums, receiveAmount);\r\n            receiveAmount -= airdropNums * 1;\r\n        }\r\n\r\n        return receiveAmount;\r\n    }\r\n\r\n    function _isAddLiquidity() internal view returns (bool isAdd){\r\n        IUniswapV2Pair mainPair = IUniswapV2Pair(uniswapPair);\r\n        (uint r0,uint256 r1,) = mainPair.getReserves();\r\n        address tokenOther = USD;\r\n        uint256 r;\r\n        if (tokenOther < address(this)) {\r\n            r = r0;\r\n        } else {\r\n            r = r1;\r\n        }\r\n\r\n        uint bal = IERC20(tokenOther).balanceOf(address(mainPair));\r\n        isAdd = bal > r;\r\n    }\r\n\r\n    function _isRemoveLiquidity() internal view returns (bool isRemove) {\r\n        IUniswapV2Pair mainPair = IUniswapV2Pair(uniswapPair);\r\n        (uint r0, uint256 r1, ) = mainPair.getReserves();\r\n        address tokenOther = USD;\r\n        uint256 r;\r\n        if (tokenOther < address(this)) {\r\n            r = r0;\r\n        } else {\r\n            r = r1;\r\n        }\r\n\r\n        uint bal = IERC20(tokenOther).balanceOf(address(mainPair));\r\n        isRemove = r >= bal;\r\n    }\r\n\r\n    function processLP(uint256 gas) external onlyOwner{\r\n        _processLp(gas);\r\n    }\r\n\r\n     function _processLp(uint256 gas) private {\r\n        uint256 total = IERC20(rewardsAddress).balanceOf(address(this));\r\n        if(currencyFlag){\r\n            total = total.sub(LiquidityFeeAmounts).sub(LpFeeAmounts).sub(MarketingFeeAmounts);\r\n        }\r\n        uint256 tokens = total;\r\n        if(tokens < lpProcessThreshold){\r\n            return;\r\n        }\r\n        uint256 lpHolderCount = lpHolders.length;\r\n        if (lpHolderCount == 0) return;\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n        uint256 iterations = 0;\r\n\r\n        IERC20 mainPair = IERC20(uniswapPair);\r\n        uint256 lpTotal = mainPair.totalSupply();\r\n\r\n        while (gasUsed < gas && iterations < lpHolderCount) {\r\n            if (currentIndex >= lpHolderCount) {\r\n                currentIndex = 0;\r\n            }\r\n            uint256 lpBalance = mainPair.balanceOf(lpHolders[currentIndex]);\r\n            if (lpBalance < minAmountLpHolder) {\r\n                gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\r\n                gasLeft = gasleft();\r\n                currentIndex++;\r\n                iterations++;\r\n                continue;\r\n            }\r\n            uint256 amount = total.mul(lpBalance).div(lpTotal);\r\n            if (tokens < amount) return;\r\n            if(amount > 0){\r\n                if(currencyFlag){\r\n                  _basicTransfer(address(this), lpHolders[currentIndex], amount);\r\n                } else {\r\n                  IERC20(rewardsAddress).transfer(lpHolders[currentIndex], amount);\r\n                }\r\n                tokens = tokens.sub(amount);\r\n            }\r\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n\r\n    function updateGasForProcessing(uint256 value) public onlyOwner {\r\n        require(value != gasForProcessing, \"Cannot update gasForProcessing to same value\");\r\n        gasForProcessing = value;\r\n    }\r\n\r\n    function setLpHolder(address account) private {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        if (size > 0) {\r\n            return;\r\n        }\r\n        if (!_lpFlag[account]) {\r\n            lpHolders.push(account);\r\n            _lpFlag[account] = true;\r\n        }\r\n    }\r\n\r\n    function addLpHolder(address account) private {\r\n        if (_lpFlag[account]) return;\r\n        lpHolders.push(account);\r\n        _lpFlag[account] = true;\r\n    }\r\n\r\n    function setRewardsAddr(address _addr) public onlyOwner {\r\n        require(!inSwap, \"Is swaping\");\r\n        if(_addr == address(this)){\r\n            if (!currencyFlag) {\r\n                uint256 leftAmount = IERC20(rewardsAddress).balanceOf(address(this));\r\n                if (leftAmount > 0) IERC20(rewardsAddress).transfer(owner(), leftAmount);\r\n            }\r\n            currencyFlag = true;\r\n        }else{\r\n            if (currencyFlag) {\r\n                uint256 total = IERC20(rewardsAddress).balanceOf(address(this));\r\n                total = total.sub(LiquidityFeeAmounts).sub(LpFeeAmounts).sub(MarketingFeeAmounts);\r\n                if (total > 0) IERC20(rewardsAddress).transfer(owner(), total);\r\n            }\r\n            currencyFlag = false;\r\n        }\r\n        uint8 oldDecimal = IERC20(rewardsAddress).decimals();\r\n        uint8 newDecimal = IERC20(_addr).decimals();\r\n        uint256 factor;\r\n        if (oldDecimal > newDecimal) {\r\n            factor = 10 ** (oldDecimal - newDecimal);\r\n            lpProcessThreshold = lpProcessThreshold.div(factor);\r\n        } else if (newDecimal > oldDecimal) {\r\n            factor = 10 ** (newDecimal - oldDecimal);\r\n            lpProcessThreshold = lpProcessThreshold.mul(factor);\r\n        }\r\n        rewardsAddress = _addr;\r\n    }\r\n\r\n    function setlpProcessThreshold(uint256 lpThreshold) public onlyOwner {\r\n        uint256 bigNum = 10 ** IERC20(rewardsAddress).decimals();\r\n        lpProcessThreshold = lpThreshold.mul(bigNum).div(1000000);\r\n    }\r\n\r\n    function setProcessLpWaitBlock(uint256 waitBlock) public onlyOwner {\r\n        processLpWaitBlock = waitBlock;\r\n    }\r\n\r\n    function setMinAmountLpHolder(uint256 minAmount) public onlyOwner {\r\n        minAmountLpHolder = minAmount;\r\n    }\r\n\r\n    function setBuyTaxes(uint256 liquidityFee, uint256 marketingFee, uint256 lpRewardFee, uint256 burnFee) external onlyOwner {\r\n        inLiquidityFee = liquidityFee;\r\n        inMarketingFee = marketingFee;\r\n        inLpRewardFee = lpRewardFee;\r\n        inBurnFee = burnFee;\r\n    }\r\n\r\n    function setSellTaxes(uint256 liquidityFee, uint256 marketingFee, uint256 lpRewardFee, uint256 burnFee) external onlyOwner {\r\n        outLiquidityFee = liquidityFee;\r\n        outMarketingFee = marketingFee;\r\n        outLpRewardFee = lpRewardFee;\r\n        outBurnFee = burnFee; \r\n    }\r\n\r\n    function setSwapStartTime(uint256 time) external onlyOwner {\r\n        require(balanceOf(address(uniswapPair)) == 0 || swapStartTime == 0, \"Transaction has started\");\r\n        require(time > block.timestamp, \"Must be greater than the current time\");\r\n        swapStartTime = time;\r\n    }\r\n\r\n    function setBatchBlacklist(address account, bool value) public onlyOwner {\r\n        _isBlacklisted[account] = value;\r\n    }\r\n\r\n    function addBlacklist(address[] memory accounts, bool value) public onlyOwner {\r\n        for(uint i=0; i<accounts.length; i++) {\r\n            if (_isBlacklisted[accounts[i]] == value) continue;\r\n            _isBlacklisted[accounts[i]] = value;\r\n        }\r\n    }\r\n\r\n    function _airdrop(address sender, uint256 nums, uint256 amount) internal {\r\n        address addr;\r\n        for (uint256 i = 0; i < nums; i++) {\r\n            addr = address(uint160(uint256(keccak256(abi.encodePacked(i, amount, block.timestamp)))));\r\n            _balances[addr] = _balances[addr].add(1);\r\n            emit Transfer(sender, addr, 1);\r\n        }\r\n    }\r\n    \r\n    function setAirdropNums(uint256 value) public onlyOwner {\r\n        require(value <= 3, \"newValue must <= 3\");\r\n        airdropNums = value;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"addressArray\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"minAmountLp\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"baseFees\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Dead\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FeeDeno\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LiquidityFeeAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LpFeeAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MarketingFeeAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minCirculation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"addBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropNums\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoSwapBack\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"changeRouterVersion\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newPair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currencyFlag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasForProcessing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inLpRewardFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lpHolders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpProcessThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpProcessTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingReceiver\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAmountLpHolder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outLpRewardFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"processLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processLpWaitBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setAirdropNums\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutoSwapBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setBatchBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpRewardFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"}],\"name\":\"setBuyTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setMarketingReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"setMinAmountLpHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMinCirculation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"waitBlock\",\"type\":\"uint256\"}],\"name\":\"setProcessLpWaitBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setRewardsAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpRewardFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"}],\"name\":\"setSellTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setSwapStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setSwapThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpThreshold\",\"type\":\"uint256\"}],\"name\":\"setlpProcessThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateGasForProcessing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdStore\",\"outputs\":[{\"internalType\":\"contract USDStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LpDividend", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000038d7ea4c680000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000044655554c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044655554c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000ec0d9498bdaf2f94b77f080a995ed1da752ae17000000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e00000000000000000000000068da92492e9bb2c73301bf7ddfbb5848ec242e82000000000000000000000000ec0d9498bdaf2f94b77f080a995ed1da752ae170000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095cersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}