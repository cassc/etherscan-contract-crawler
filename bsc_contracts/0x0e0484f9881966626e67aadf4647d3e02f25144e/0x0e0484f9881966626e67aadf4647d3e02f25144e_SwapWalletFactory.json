{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/BeaconProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from a {UpgradeableBeacon}.\\n *\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\n * conflict with the storage layout of the implementation behind the proxy.\\n *\\n * _Available since v3.4._\\n */\\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the proxy with `beacon`.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\\n     * will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity\\n     * constructor.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract with the interface {IBeacon}.\\n     */\\n    constructor(address beacon, bytes memory data) payable {\\n        assert(_BEACON_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.beacon\\\")) - 1));\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current beacon address.\\n     */\\n    function _beacon() internal view virtual returns (address) {\\n        return _getBeacon();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_getBeacon()).implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract.\\n     * - The implementation returned by `beacon` must be a contract.\\n     */\\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ICErc20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.13;\\n\\ninterface CErc20 {\\n    function mint(uint mintAmount) external returns (uint);\\n    function redeem(uint redeemTokens) external returns (uint);\\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\\n    function borrow(uint borrowAmount) external returns (uint);\\n    function repayBorrow(uint repayAmount) external returns (uint);\\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\\n    function liquidateBorrow(address borrower, uint repayAmount, address collateral) external returns (uint);\\n    function borrowBalanceCurrent(address account) external returns (uint);\\n    function balanceOfUnderlying(address account) external returns (uint);\\n    function balanceOf(address account) external returns (uint);\\n}\\n\\ninterface CErc20Storage {\\n    function underlying() external view returns (address);\\n}\\n\\n\"\r\n    },\r\n    \"contracts/ICLiquidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.13;\\n\\ninterface ICLiquidator {\\n    \\n    function liquidateBorrow(\\n        address vToken,\\n        address borrower,\\n        uint256 repayAmount,\\n        address vTokenCollateral\\n    ) external payable;\\n\\n}\"\r\n    },\r\n    \"contracts/IComptroller.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.13;\\n\\ninterface IComptroller {\\n    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\\n    function exitMarket(address cToken) external returns (uint);\\n    function getAssetsIn(address account) external view returns (address[] memory);\\n    function markets(address cTokenAddress) external view returns (bool, uint);\\n    function getAccountLiquidity(address account) external view returns (uint, uint, uint);\\n    function closeFactorMantissa() external view returns (uint);\\n    function liquidationIncentiveMantissa() external view returns (uint);\\n\\n    function oracle() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/ICurveCrypto.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.13;\\n\\ninterface ICurveCrypto {\\n    function coins(uint256 n) external view returns(address);\\n    function exchange(int128 from, int128 to, uint256 from_amount, uint256 min_to_amount) external;\\n}\\n\\ninterface ICurveCryptoV2 {\\n    function coins(uint256 n) external view returns(address);\\n    function exchange_underlying(int128 from, int128 to, uint256 from_amount, uint256 min_to_amount) external;\\n    \\n}\\n\\ninterface ICurveFactory {\\n    function find_pool_for_coins(address from, address to) external view returns(address);\\n    function get_underlying_coins(address pool) external view returns(address[8] memory);\\n    function get_underlying_decimals(address pool) external view returns(uint256[8] memory);\\n    function get_underlying_balances(address pool) external view returns(uint256[8] memory);\\n}   \\n\\n\"\r\n    },\r\n    \"contracts/IOneInchRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.13;\\n\\ninterface IOneInchRouter {\\n\\n     struct OneInchSwapDescription {\\n        address srcToken;\\n        address dstToken;\\n        address payable srcReceiver;\\n        address payable dstReceiver;\\n        uint256 amount;\\n        uint256 minReturnAmount;\\n        uint256 flags;\\n    }\\n\\n    function swap(\\n        address executor,\\n        OneInchSwapDescription calldata desc,\\n        bytes calldata permit,\\n        bytes calldata data\\n    ) external payable returns (uint256 returnAmount, uint256 spentAmount);\\n\\n}\"\r\n    },\r\n    \"contracts/IOpenOcean.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.13;\\n\\ninterface IOpenOceanCaller {\\n    struct CallDescription {\\n        uint256 target;\\n        uint256 gasLimit;\\n        uint256 value;\\n        bytes data;\\n    }\\n\\n    function makeCall(CallDescription memory desc) external;\\n\\n    function makeCalls(CallDescription[] memory desc) external payable;\\n}\\n\\ninterface IOpenOcean {\\n\\n    struct OpenOceanSwapDescription {\\n        address srcToken;\\n        address dstToken;\\n        address srcReceiver;\\n        address dstReceiver;\\n        uint256 amount;\\n        uint256 minReturnAmount;\\n        uint256 guaranteedAmount;\\n        uint256 flags;\\n        address referrer;\\n        bytes permit;\\n    }\\n\\n    function swap(\\n        IOpenOceanCaller caller,\\n        OpenOceanSwapDescription calldata desc,\\n        IOpenOceanCaller.CallDescription[] calldata calls\\n    ) external payable returns (uint256 returnAmount);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/ISwapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.13;\\n\\ninterface ISwapRouter {\\n   \\n    /** \\n     * @param flag token amount in a stable swap pool. 2 for 2pool, 3 for 3pool    \\n     */\\n    function exactInputStableSwap(\\n        address[] calldata path,\\n        uint256[] calldata flag,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address to\\n    ) external payable returns (uint256 amountOut);\\n\\n    /** \\n     * @param flag token amount in a stable swap pool. 2 for 2pool, 3 for 3pool    \\n     */\\n    function exactOutputStableSwap(\\n        address[] calldata path,\\n        uint256[] calldata flag,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address to\\n    ) external payable returns (uint256 amountIn);\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\n    /// @param amountIn The amount of token to swap\\n    /// @param amountOutMin The minimum amount of output that must be received\\n    /// @param path The ordered list of tokens to swap through\\n    /// @param to The recipient address\\n    /// @return amountOut The amount of the received token\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to\\n    ) external payable returns (uint256 amountOut);\\n\\n    /// @notice Swaps as little as possible of one token for an exact amount of another token\\n    /// @param amountOut The amount of token to swap for\\n    /// @param amountInMax The maximum amount of input that the caller will pay\\n    /// @param path The ordered list of tokens to swap through\\n    /// @param to The recipient address\\n    /// @return amountIn The amount of token to pay\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to\\n    ) external payable returns (uint256 amountIn);\\n\\n    // v3\\n\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// that may remain in the router after the swap.\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// that may remain in the router after the swap.\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n\\n\\n}\"\r\n    },\r\n    \"contracts/IUniRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.13;\\n\\ninterface IUniRouter {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    \\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.13;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n    function balanceOf(address account) external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/SwapWallet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"./SwapWalletFactory.sol\\\";\\nimport \\\"./IWETH.sol\\\";\\nimport \\\"./ICErc20.sol\\\";\\nimport \\\"./IUniRouter.sol\\\";\\nimport \\\"./ICurveCrypto.sol\\\";\\nimport \\\"./IOneInchRouter.sol\\\";\\nimport \\\"./IComptroller.sol\\\";\\nimport \\\"./ICLiquidator.sol\\\";\\nimport \\\"./IOpenOcean.sol\\\";\\nimport \\\"./ISwapRouter.sol\\\";\\n\\n\\ncontract SwapWallet is Initializable, ReentrancyGuardUpgradeable {\\n\\n    address private constant _ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    address private constant _ZERO_ADDRESS = address(0);\\n\\n    address private constant _CLIQUIDATOR = 0x0870793286aaDA55D39CE7f82fb2766e8004cF43;\\n    address private constant _COMPTROLLER = 0xfD36E2c2a6789Db23113685031d7F16329158384;\\n\\n    uint128 constant MAX_FACTORY_COINS = 8;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    \\n    address private _owner;\\n    address private _pendingOwner;\\n\\n    SwapWalletFactory private factory;\\n\\n    IWETH private WETH;\\n    IComptroller private comptroller;\\n    ICLiquidator private cliquidator;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    event OwnershipAccepted(address indexed previousOwner, address indexed newOwner);\\n    event WithdrawHappened(address indexed assetAddress, uint256 amount, address indexed toAddress);\\n\\n    event LiquidateAccount(address indexed borrower, uint256 liquidity, uint256 shortfall);\\n    event LiquidateBorrowAmounts(address indexed repayToken, uint256 repayMax);\\n\\n    event OnchainSettlement(address indexed fromToken, uint256 fromAmount, address indexed toToken, uint256 toAmount);\\n\\n    function initialize(address owner_, SwapWalletFactory factory_) public initializer{ \\n        __SwapWallet_init(owner_, factory_);\\n    }\\n\\n    function __SwapWallet_init(address owner_, SwapWalletFactory factory_) internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n        __SwapWallet_init_unchained(owner_, factory_);\\n    }\\n\\n    function __SwapWallet_init_unchained(address owner_, SwapWalletFactory factory_) internal onlyInitializing {\\n        require(owner_ != address(0), \\\"SwapWallet: owner is the zero address\\\");\\n\\n        _owner = owner_;\\n        factory = factory_;\\n        WETH = IWETH(factory_.WETH());\\n        comptroller = IComptroller(_COMPTROLLER);\\n        cliquidator = ICLiquidator(_CLIQUIDATOR);\\n    }\\n\\n    receive() external payable {\\n            // React to receiving ether\\n    }\\n\\n    function owner() external view returns (address) {\\n        return _owner;\\n    }\\n\\n    function getFactory() external view returns (address) {\\n        return address(factory);\\n    }\\n\\n    function getWETH() external view returns (address) {\\n        return address(WETH);\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"SwapWallet: caller is not the owner\\\");\\n        _;\\n    }\\n\\n     modifier onlyOnchainLP() {\\n        require(factory.onchainlp() == msg.sender, \\\"SwapWallet: caller is not the onchain-LP\\\");\\n        _;\\n    }\\n\\n    function transferOwnership(address newOwner) external onlyOwner {\\n        require(newOwner != address(0), \\\"SwapWallet: new owner is the zero address\\\");\\n        require(newOwner != _owner, \\\"SwapWallet: new owner is the same as the current owner\\\");\\n\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _pendingOwner = newOwner;\\n    }\\n\\n    function acceptOwnership() external {\\n        require(msg.sender == _pendingOwner, \\\"SwapWallet: invalid new owner\\\");\\n        emit OwnershipAccepted(_owner, _pendingOwner);\\n        _owner = _pendingOwner;\\n        _pendingOwner = address(0);\\n    }\\n\\n    function withdraw(address assetAddress_, uint256 amount_, address toAddress_) external nonReentrant {\\n        require(amount_ > 0, \\\"SwapWallet: ZERO_AMOUNT\\\");\\n        require(msg.sender == _owner || msg.sender == factory.owner(), \\\"SwapWallet: only owner or factory owner can withdraw\\\");\\n        bool isWhitelistAddress = factory.whitelistAddressToIndex(toAddress_) > 0 || toAddress_ == address(factory);\\n        require(isWhitelistAddress, \\\"SwapWallet: withdraw to non whitelist address\\\");\\n        if (assetAddress_ == address(0)) {\\n            address self = address(this);\\n            uint256 assetBalance = self.balance;\\n            require(assetBalance >= amount_, \\\"SwapWallet: not enough balance\\\");\\n            _safeTransferETH(toAddress_, amount_);\\n            emit WithdrawHappened(assetAddress_, amount_, toAddress_);\\n        } else {\\n            IERC20Upgradeable token = IERC20Upgradeable(assetAddress_);\\n            uint256 assetBalance = token.balanceOf(address(this));\\n            require(assetBalance >= amount_, \\\"SwapWallet: not enough balance\\\");\\n            token.safeTransfer(toAddress_, amount_);\\n            emit WithdrawHappened(assetAddress_, amount_, toAddress_);\\n        }\\n    }\\n\\n    function verifyExchange(address router, address from, address to) internal view {\\n        (address token0, address token1) = from < to ? (from, to) : (to, from);\\n        require(factory.whitelistPairToIndex(router, token0, token1) > 0, \\\"SwapWallet: cannot swap non-whitelisted pair\\\");\\n    }\\n\\n    function verifySwapPath(address router, address[] calldata path) internal view{\\n        require(path.length > 1, \\\"SwapWallet: path should contain at least two tokens\\\");\\n        uint len = path.length - 1;\\n        for (uint i; i < len;  ++i) {\\n            address tokenA = path[i];\\n            address tokenB = path[i + 1];\\n            (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n            require(factory.whitelistPairToIndex(router, token0, token1) > 0, \\\"SwapWallet: cannot swap non-whitelisted pair\\\");\\n        }\\n    }\\n\\n    function swapExactTokensForTokens(\\n        address router,\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        uint deadline\\n    ) external nonReentrant onlyOwner {\\n        verifySwapPath(router, path);\\n        IERC20Upgradeable fromToken = IERC20Upgradeable(path[0]);\\n        fromToken.safeApprove(address(router), 0);\\n        fromToken.safeIncreaseAllowance(address(router), amountIn);\\n        IUniRouter(router).swapExactTokensForTokens(amountIn, amountOutMin, path, address(this), deadline);\\n    }\\n\\n    function swapTokensForExactTokens(\\n        address router,\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        uint deadline\\n    ) external nonReentrant onlyOwner {\\n        verifySwapPath(router, path);\\n        IERC20Upgradeable fromToken = IERC20Upgradeable(path[0]);\\n        fromToken.safeApprove(address(router), 0);\\n        fromToken.safeIncreaseAllowance(address(router), amountInMax);\\n        IUniRouter(router).swapTokensForExactTokens(amountOut, amountInMax , path, address(this), deadline);\\n    }\\n\\n    function swapTokensForExactETH(\\n        address router,\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        uint deadline\\n    ) external nonReentrant onlyOwner {\\n        verifySwapPath(router, path);\\n        IERC20Upgradeable fromToken = IERC20Upgradeable(path[0]);\\n        fromToken.safeApprove(address(router), 0);\\n        fromToken.safeIncreaseAllowance(address(router), amountInMax);\\n        IUniRouter(router).swapTokensForExactETH(amountOut, amountInMax, path, address(this), deadline);\\n    }\\n\\n    function swapExactTokensForETH(\\n        address router,\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        uint deadline\\n    ) external nonReentrant onlyOwner {\\n        verifySwapPath(router, path);\\n        IERC20Upgradeable fromToken = IERC20Upgradeable(path[0]);\\n        fromToken.safeApprove(address(router), 0);\\n        fromToken.safeIncreaseAllowance(address(router), amountIn);\\n        IUniRouter(router).swapExactTokensForETH(amountIn, amountOutMin, path, address(this), deadline);\\n    }\\n\\n    function swapExactETHForTokens(\\n        address router,\\n        uint amountOutMin, \\n        address[] calldata path, \\n        uint deadline) external payable nonReentrant onlyOwner {\\n        verifySwapPath(router, path);\\n        IUniRouter(router).swapExactETHForTokens{value: msg.value}(amountOutMin, path, address(this), deadline);\\n    }\\n\\n    function swapETHForExactTokens(\\n        address router,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        uint deadline\\n    ) external payable nonReentrant onlyOwner{\\n        verifySwapPath(router, path);\\n        IUniRouter(router).swapETHForExactTokens{value: msg.value}(amountOutMin, path, address(this), deadline);\\n    }\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        address router,\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        uint deadline\\n    ) external nonReentrant onlyOwner {\\n        verifySwapPath(router, path);\\n        IERC20Upgradeable fromToken = IERC20Upgradeable(path[0]);\\n        fromToken.safeApprove(address(router), 0);\\n        fromToken.safeIncreaseAllowance(address(router), amountIn);\\n        IUniRouter(router).swapExactTokensForTokensSupportingFeeOnTransferTokens(amountIn, amountOutMin, path, address(this), deadline);\\n    }\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        address router,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        uint deadline\\n    ) external payable nonReentrant onlyOwner {\\n        verifySwapPath(router, path);\\n        IUniRouter(router).swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(amountOutMin, path, address(this), deadline);\\n    }\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        address router,\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        uint deadline\\n    ) external nonReentrant onlyOwner {\\n        verifySwapPath(router, path);\\n        IERC20Upgradeable fromToken = IERC20Upgradeable(path[0]);\\n        fromToken.safeApprove(address(router), 0);\\n        fromToken.safeIncreaseAllowance(address(router), amountIn);\\n        IUniRouter(router).swapExactTokensForETHSupportingFeeOnTransferTokens(amountIn, amountOutMin, path, address(this), deadline);\\n    }\\n\\n    function swapCurveExchange(\\n        address pool,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        uint256 from,\\n        uint256 to\\n    ) external nonReentrant onlyOwner {\\n        address addr_from = ICurveCrypto(pool).coins(from);\\n        address addr_to = ICurveCrypto(pool).coins(to);\\n        verifyExchange(pool, addr_from, addr_to);\\n        IERC20Upgradeable fromToken = IERC20Upgradeable(addr_from);\\n        fromToken.safeApprove(address(pool), 0);\\n        fromToken.safeIncreaseAllowance(address(pool), amountIn);\\n        int128 from_int = SafeCast.toInt128(SafeCast.toInt256(from));\\n        int128 to_int = SafeCast.toInt128(SafeCast.toInt256(to));\\n        ICurveCrypto(pool).exchange(from_int, to_int, amountIn, amountOutMin);\\n    }\\n\\n    function swapCurveV2Exchange(\\n        address pool,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        uint256 from,\\n        uint256 to\\n    ) external nonReentrant onlyOwner {\\n        address[MAX_FACTORY_COINS] memory addrs = ICurveFactory(factory.curveFactory()).get_underlying_coins(pool);\\n        address addr_from = addrs[from];\\n        address addr_to = addrs[to];\\n        require(addr_from != address(0) && addr_to != address(0), \\\"SwapWallet: FROM or TO zero address\\\");\\n        verifyExchange(pool, addr_from, addr_to);\\n        IERC20Upgradeable(addr_from).safeApprove(address(pool), 0);\\n        IERC20Upgradeable(addr_from).safeIncreaseAllowance(address(pool), amountIn);\\n        int128 from_int = SafeCast.toInt128(SafeCast.toInt256(from));\\n        int128 to_int = SafeCast.toInt128(SafeCast.toInt256(to));\\n        ICurveCryptoV2(pool).exchange_underlying(from_int, to_int, amountIn, amountOutMin);\\n    }\\n\\n    function swapOneInchExchange(\\n        address router,\\n        address executor,\\n        IOneInchRouter.OneInchSwapDescription calldata desc,\\n        bytes calldata permit,\\n        bytes calldata data\\n    ) external payable nonReentrant onlyOwner {\\n        address src = desc.srcToken;\\n        address dst = desc.dstToken;\\n        require(desc.dstReceiver == address(this), \\\"1Inch return address wrong\\\");\\n        verifyExchange(router, src, dst);\\n        uint256 srcBefore = _tokenBalance(src);\\n        uint256 dstBefore = _tokenBalance(dst);\\n        uint256 retAmt;\\n        uint256 sptAmt;\\n        if (_isETH(src)) {\\n            (retAmt, sptAmt) = IOneInchRouter(router).swap{value: msg.value}(executor, desc, permit, data);\\n        } else {\\n            IERC20Upgradeable fromToken = IERC20Upgradeable(src);\\n            fromToken.safeApprove(address(router), 0);\\n            fromToken.safeIncreaseAllowance(address(router), desc.amount);\\n            (retAmt, sptAmt) = IOneInchRouter(router).swap(executor, desc, permit, data);\\n        }\\n        uint256 srcAfter = _tokenBalance(src);\\n        uint256 dstAfter = _tokenBalance(dst);\\n        require(srcBefore - srcAfter == sptAmt, \\\"1Inch wrong spent amount\\\");\\n        require(dstAfter - dstBefore == retAmt, \\\"1Inch wrong return amount\\\");\\n        require(dstAfter - dstBefore >= desc.minReturnAmount, \\\"1Inch wrong return amount\\\");\\n    }\\n\\n    function swapOpenOceanExchange(\\n        address router, \\n        IOpenOceanCaller caller, \\n        IOpenOcean.OpenOceanSwapDescription memory desc, \\n        IOpenOceanCaller.CallDescription[] calldata calls\\n    ) external payable nonReentrant onlyOwner {\\n        address src = desc.srcToken;\\n        address dst = desc.dstToken;\\n        require(desc.dstReceiver == address(this), \\\"OpenOcean return address wrong\\\");\\n        verifyExchange(router, src, dst);\\n        uint256 srcBefore = _tokenBalance(src);\\n        uint256 dstBefore = _tokenBalance(dst);\\n        uint256 retAmt;\\n        if (_isETH(src)) {\\n            retAmt = IOpenOcean(router).swap{value: msg.value}(caller, desc, calls);\\n        } else {\\n            IERC20Upgradeable fromToken = IERC20Upgradeable(src);\\n            fromToken.safeApprove(address(router), 0);\\n            fromToken.safeIncreaseAllowance(address(router), desc.amount);\\n            retAmt = IOpenOcean(router).swap(caller, desc, calls);\\n        }\\n        uint256 srcAfter = _tokenBalance(src);  \\n        uint256 dstAfter = _tokenBalance(dst);\\n        require(srcBefore - srcAfter == desc.amount, \\\"OpenOcean wrong spent amount\\\");\\n        require(dstAfter - dstBefore == retAmt, \\\"OpenOcean wrong return amount\\\");\\n        require(dstAfter - dstBefore >= desc.minReturnAmount, \\\"OpenOcean wrong return amount\\\");\\n    }\\n\\n\\n    function swapExactInput(\\n        address router,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint24[] calldata fees,\\n        uint deadline\\n    ) external payable nonReentrant onlyOwner returns (uint256) {\\n        require(path.length > 1, \\\"path should contain at least two tokens\\\");\\n        require(path.length <= 4, \\\"path should contain at most four tokens\\\");\\n        require(path.length == fees.length + 1, \\\"v3: length, path == fees - 1\\\");\\n        verifySwapPath(router, path);\\n        uint256 amountOut;\\n        if (path.length == 2) {\\n            ISwapRouter.ExactInputSingleParams memory params =\\n            ISwapRouter.ExactInputSingleParams({\\n                tokenIn: path[0],\\n                tokenOut: path[1],\\n                fee: fees[0],\\n                deadline: deadline,\\n                recipient: address(this),\\n                amountIn: amountIn,\\n                amountOutMinimum: amountOutMin,\\n                sqrtPriceLimitX96: 0\\n            });\\n            IERC20Upgradeable from = IERC20Upgradeable(path[0]);\\n            from.safeApprove(address(router), 0);\\n            from.safeIncreaseAllowance(address(router), params.amountIn);\\n            amountOut = ISwapRouter(router).exactInputSingle(params);\\n        } else if (path.length == 3) {\\n            ISwapRouter.ExactInputParams memory params =\\n            ISwapRouter.ExactInputParams({\\n                path: abi.encodePacked(path[0], fees[0], path[1], fees[1], path[2]),\\n                recipient: address(this),\\n                deadline: deadline,\\n                amountIn: amountIn,\\n                amountOutMinimum: amountOutMin\\n            });\\n            IERC20Upgradeable from = IERC20Upgradeable(path[0]);\\n            from.safeApprove(address(router), 0);\\n            from.safeIncreaseAllowance(address(router), params.amountIn);\\n            amountOut = ISwapRouter(router).exactInput(params);\\n        } else if (path.length == 4) {\\n            ISwapRouter.ExactInputParams memory params =\\n            ISwapRouter.ExactInputParams({\\n                path: abi.encodePacked(path[0], fees[0], path[1], fees[1], path[2], fees[2], path[3]),\\n                recipient: address(this),\\n                deadline: deadline,\\n                amountIn: amountIn,\\n                amountOutMinimum: amountOutMin\\n            });\\n            IERC20Upgradeable from = IERC20Upgradeable(path[0]);\\n            from.safeApprove(address(router), 0);\\n            from.safeIncreaseAllowance(address(router), params.amountIn);\\n            amountOut = ISwapRouter(router).exactInput(params);\\n        }\\n        require(deadline >= block.timestamp, \\\"trade expired\\\");\\n        require(amountOut >= amountOutMin, \\\"amountOut < amountOutMin\\\");\\n        return amountOut;\\n    }\\n\\n\\n    function swapExactOutput(\\n        address router,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        uint24[] calldata fees,\\n        uint deadline\\n    ) external payable nonReentrant onlyOwner returns (uint256) {\\n        require(path.length > 1, \\\"path should contain at least two tokens\\\");\\n        require(path.length <= 4, \\\"path should contain at most four tokens\\\");\\n        require(path.length == fees.length + 1, \\\"v3: length, path == fees - 1\\\");\\n        verifySwapPath(router, path);\\n        uint256 amountIn;\\n        if (path.length == 2) {\\n            ISwapRouter.ExactOutputSingleParams memory params =\\n            ISwapRouter.ExactOutputSingleParams({\\n                tokenIn: path[0],\\n                tokenOut: path[1],\\n                fee: fees[0],\\n                recipient: address(this),\\n                deadline: deadline,\\n                amountOut: amountOut,\\n                amountInMaximum: amountInMax,\\n                sqrtPriceLimitX96: 0\\n            });\\n            IERC20Upgradeable from = IERC20Upgradeable(path[0]);\\n            from.safeApprove(address(router), 0);\\n            from.safeIncreaseAllowance(address(router), params.amountInMaximum);\\n            amountOut = ISwapRouter(router).exactOutputSingle(params);\\n        } else if (path.length == 3) {\\n            ISwapRouter.ExactOutputParams memory params =\\n            ISwapRouter.ExactOutputParams({\\n                path: abi.encodePacked(path[0], fees[0], path[1], fees[1], path[2]),\\n                recipient: address(this),\\n                deadline: deadline,\\n                amountOut: amountOut,\\n                amountInMaximum: amountInMax\\n            });\\n            IERC20Upgradeable from = IERC20Upgradeable(path[0]);\\n            from.safeApprove(address(router), 0);\\n            from.safeIncreaseAllowance(address(router), params.amountInMaximum);\\n            amountOut = ISwapRouter(router).exactOutput(params);\\n        } else if (path.length == 4) {\\n            ISwapRouter.ExactOutputParams memory params =\\n            ISwapRouter.ExactOutputParams({\\n                path: abi.encodePacked(path[0], fees[0], path[1], fees[1], path[2], fees[2], path[3]),\\n                recipient: address(this),\\n                deadline: deadline,\\n                amountOut: amountOut,\\n                amountInMaximum: amountInMax\\n            });\\n            IERC20Upgradeable from = IERC20Upgradeable(path[0]);\\n            from.safeApprove(address(router), 0);\\n            from.safeIncreaseAllowance(address(router), params.amountInMaximum);\\n            amountOut = ISwapRouter(router).exactOutput(params);\\n        }\\n        require(deadline >= block.timestamp, \\\"trade expired\\\");\\n        require(amountIn <= amountInMax, \\\"amountIn > amountInMax\\\");\\n        return amountIn;\\n    }\\n\\n\\n    function liquidateBorrower(\\n        address borrower,\\n        address repayCToken,\\n        uint256 repayAmount,\\n        address seizeCToken\\n    ) external payable nonReentrant onlyOwner {\\n        ( , uint liquidity, uint shortfall) = comptroller.getAccountLiquidity(borrower);\\n        emit LiquidateAccount(borrower, liquidity, shortfall);\\n        require(liquidity == 0, \\\"liquidity is not zero\\\");\\n        require(shortfall > 0, \\\"shortfall should above zero\\\");\\n        verifyExchange(borrower, repayCToken, seizeCToken);\\n        address repayToken = CErc20Storage(repayCToken).underlying();\\n        require(repayToken != address(0), \\\"repay token not listed\\\");\\n\\n        // uint(10**18) adjustments ensure that all place values are dedicated\\n        // to repay and seize precision rather than unnecessary closeFact and liqIncent decimals\\n        uint repayMax = CErc20(repayCToken).borrowBalanceCurrent(borrower) * comptroller.closeFactorMantissa() / uint(10**18);\\n\\n        if (repayAmount > 0 && repayMax > repayAmount) {\\n            repayMax = repayAmount;\\n        } \\n        if (repayMax > _tokenBalance(repayToken)) {\\n            repayMax = _tokenBalance(repayToken);\\n        }\\n        \\n        require(repayMax > 0, \\\"no balance to repay\\\");\\n        IERC20Upgradeable(repayToken).safeApprove(address(cliquidator), 0);\\n        IERC20Upgradeable(repayToken).safeApprove(address(cliquidator), repayMax);\\n        cliquidator.liquidateBorrow(repayCToken, borrower, repayMax, seizeCToken);\\n\\n        emit LiquidateBorrowAmounts(repayToken, repayMax);\\n    }\\n\\n    function redeemVToken(\\n        address seizeCToken\\n    ) external payable nonReentrant onlyOwner {\\n        require(CErc20(seizeCToken).redeem(_tokenBalance(seizeCToken)) == 0, \\\"redeem failed.\\\");\\n    }\\n\\n    function onchainSettlement(\\n        address fromToken,\\n        uint256 fromAmount,\\n        address toToken,\\n        uint256 toAmount\\n    ) external payable nonReentrant onlyOnchainLP {\\n        if (_isETH(fromToken)) {\\n            require(msg.value == fromAmount, \\\"msg value is not equal to amount\\\");\\n            _convertToWETH(fromAmount);\\n        } else {\\n            IERC20Upgradeable(fromToken).safeTransferFrom(msg.sender, address(this), fromAmount);\\n        }\\n        if (_isETH(toToken)) {\\n            require(toAmount <= WETH.balanceOf(address(this)), \\\"exceed vault amount\\\");\\n            _convertFromWETH(toAmount);\\n            _safeTransferETH(msg.sender, toAmount);\\n        } else {\\n            require(toAmount <= IERC20Upgradeable(toToken).balanceOf(address(this)), \\\"exceed vault amount\\\");\\n            IERC20Upgradeable(toToken).safeTransfer(msg.sender, toAmount);\\n        }\\n        emit OnchainSettlement(fromToken, fromAmount, toToken, toAmount);\\n    }\\n\\n    function _convertToWETH(uint amountETH) internal {\\n        require(amountETH > 0, \\\"SwapWallet: ZERO_AMOUNT\\\");\\n        address self = address(this);\\n        uint256 assetBalance = self.balance;\\n        require(assetBalance >= amountETH, \\\"SwapWallet: NOT_ENOUGH\\\");\\n        WETH.deposit{value: amountETH}();\\n    }\\n\\n    function convertToWETH(uint amountETH) external onlyOwner {\\n        _convertToWETH(amountETH);\\n    }\\n\\n    function _convertFromWETH(uint amountWETH) internal {\\n        require(amountWETH > 0, \\\"SwapWallet: ZERO_AMOUNT\\\");\\n        uint256 assetBalance = WETH.balanceOf(address(this));\\n        require(assetBalance >= amountWETH, \\\"SwapWallet: NOT_ENOUGH\\\");\\n        WETH.withdraw(amountWETH);\\n    }\\n\\n    function convertFromWETH(uint amountWETH) external onlyOwner {\\n        _convertFromWETH(amountWETH);\\n    }\\n\\n    function findPool(address from, address to) external view returns(address) {\\n        return ICurveFactory(factory.curveFactory()).find_pool_for_coins(from, to);\\n    }\\n\\n    function getUnderlyingCoins(address pool) external view returns(address[MAX_FACTORY_COINS] memory) {\\n        return ICurveFactory(factory.curveFactory()).get_underlying_coins(pool);\\n    }\\n\\n    function getUnderlyingDecimals(address pool) external view returns(uint256[MAX_FACTORY_COINS] memory) {\\n        return ICurveFactory(factory.curveFactory()).get_underlying_decimals(pool);\\n    }\\n\\n    function getUnderlyingBalances(address pool) external view returns(uint256[MAX_FACTORY_COINS] memory) {\\n        return ICurveFactory(factory.curveFactory()).get_underlying_balances(pool);\\n    }\\n\\n    function _isETH(address token) internal pure returns (bool) {\\n        return (token == _ZERO_ADDRESS || token == _ETH_ADDRESS);\\n    }\\n\\n    function _tokenBalance(address token) internal view returns(uint256) {\\n        if (_isETH(token)) {\\n            return address(this).balance;\\n        } else {\\n            return IERC20Upgradeable(token).balanceOf(address(this));\\n        }\\n    }\\n\\n    function _safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{ value: value}(\\\"\\\");\\n        require(success, \\\"SwapWallet: transfer eth failed\\\");\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/SwapWalletBeaconProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\\\";\\n\\ncontract SwapWalletBeaconProxy is BeaconProxy {\\n    constructor(address beacon, bytes memory data) BeaconProxy(beacon, data) payable {\\n\\n    }\\n    receive() override external payable {  // Need this to make convertFromWETH in SwapWallet work\\n            // React to receiving ether\\n    }\\n}\\n\\n\"\r\n    },\r\n    \"contracts/SwapWalletFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport './SwapWallet.sol';\\nimport './SwapWalletBeaconProxy.sol';\\n\\n\\n\\n\\ncontract SwapWalletFactory is Initializable, ReentrancyGuardUpgradeable{\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    address private _owner;\\n    address private _pendingOwner;\\n\\n    address public WETH;\\n\\n    mapping(address => uint256) public whitelistAddressToIndex;\\n    address[] public whitelistAddresses;\\n\\n    mapping(address => uint256) public walletToIndex;\\n    address[] public wallets;\\n    mapping(address => uint256) public walletOwnerToIndex;\\n    address[] public walletOwners;\\n    mapping(address => address) public walletOwnerToWallet;\\n    mapping(address => address) public walletToWalletOwner;\\n\\n    mapping(address => mapping(address => mapping(address => uint256))) public whitelistPairToIndex;\\n    address[3][] public whitelistPairs;\\n\\n    mapping(address => uint256) public applyGasTime;\\n    uint256 public applyGasLimit;\\n    uint256 public applyGasInterval;\\n\\n    address private beaconAddress;\\n\\n    address public curveFactory;\\n\\n    address private _onchainlp;\\n\\n    event SwapWalletCreated(address indexed wallet, address indexed walletOwner);\\n    event SwapWalletAdded(address indexed wallet, address indexed walletOwner);\\n    event SwapWalletDeleted(address indexed wallet, address indexed walletOwner);\\n    event SwapWalletUpdated(address indexed wallet, address indexed oldWalletOwner, address indexed newWalletOwner);\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    event OwnershipAccepted(address indexed previousOwner, address indexed newOwner);\\n    event WithdrawWhiteListAdded(address indexed addedAddress);\\n    event WithdrawWhiteListDeleted(address indexed deletedAddress);\\n    event PairWhiteListAdded(address indexed router, address indexed token0, address indexed token1);\\n    event PairWhiteListDeleted(address indexed router, address indexed token0, address indexed token1);\\n    event WithdrawHappened(address indexed assetAddress, uint256 amount, address indexed toAddress);\\n    event ApplyGasLimitUpdated(uint256 oldLimit, uint256 newLimit);\\n    event ApplyGasIntervalUpdated(uint256 oldInterval, uint256 newInterval);\\n    event BeaconAddressUpdated(address indexed previousImplementation, address indexed newImplementation);\\n    event CurveFactoryUpdated(address indexed previousFactory, address indexed newFactory);\\n    event OnchainLPSet(address indexed onchainlp);\\n\\n    function initialize(address owner_, address WETH_, uint applyGasLimit_, uint applyGasInterval_) public initializer{\\n        __SwapWalletFactory_init(owner_, WETH_, applyGasLimit_, applyGasInterval_);\\n    }\\n\\n    function __SwapWalletFactory_init(address owner_, address WETH_, uint applyGasLimit_, uint applyGasInterval_) internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n        __SwapWalletFactory_init_unchained(owner_, WETH_, applyGasLimit_, applyGasInterval_);\\n    }\\n\\n    function __SwapWalletFactory_init_unchained(address owner_, address WETH_, uint applyGasLimit_, uint applyGasInterval_) internal onlyInitializing {\\n        require(owner_ != address(0), \\\"SwapWalletFactory: owner is the zero address\\\");\\n        require(WETH_ != address(0), \\\"SwapWalletFactory: weth is the zero address\\\");\\n        _owner = owner_;\\n        WETH = WETH_;\\n        applyGasLimit = applyGasLimit_;\\n        applyGasInterval = applyGasInterval_;\\n    }\\n\\n\\n    receive() external payable {\\n            // React to receiving ether\\n    }\\n\\n    function owner() external view returns (address) {\\n        return _owner;\\n    }\\n\\n    function whitelistAddressesLength() external view returns (uint) {\\n        return whitelistAddresses.length;\\n    }\\n\\n    function whitelistPairsLength() external view returns (uint) {\\n        return whitelistPairs.length;\\n    }\\n\\n    function walletsLength() external view returns (uint) {\\n        return wallets.length;\\n    }\\n\\n    function walletOwnersLength() external view returns (uint) {\\n        return walletOwners.length;\\n    }\\n\\n    function onchainlp() external view returns (address) {\\n        return _onchainlp;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"SwapWalletFactory: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function transferOwnership(address newOwner) external onlyOwner {\\n        require(newOwner != address(0), \\\"SwapWalletFactory: new owner is the zero address\\\");\\n        require(newOwner != _owner, \\\"SwapWalletFactory: new owner is the same as the current owner\\\");\\n\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _pendingOwner = newOwner;\\n    }\\n\\n    function acceptOwnership() external {\\n        require(msg.sender == _pendingOwner, \\\"SwapWalletFactory: invalid new owner\\\");\\n        emit OwnershipAccepted(_owner, _pendingOwner);\\n        _owner = _pendingOwner;\\n        _pendingOwner = address(0);\\n    }\\n\\n    function createWallet(address walletOwner) external onlyOwner returns (address) {\\n        require(walletOwner != address(0), \\\"SwapWalletFactory: wallet owner is the zero address\\\");\\n        require(walletOwnerToIndex[walletOwner] == 0, \\\"SwapWalletFactory: wallet owner already exists\\\");\\n        SwapWallet wallet = SwapWallet(payable(new SwapWalletBeaconProxy(beaconAddress, \\\"\\\")));\\n        wallet.initialize(walletOwner, this);\\n        wallets.push(address(wallet));\\n        walletToIndex[address(wallet)] = wallets.length;\\n        walletOwners.push(walletOwner);\\n        walletOwnerToIndex[walletOwner] = walletOwners.length;\\n        walletOwnerToWallet[walletOwner] = address(wallet);\\n        walletToWalletOwner[address(wallet)] = walletOwner;\\n        emit SwapWalletCreated(address(wallet), walletOwner);\\n        return address(wallet);\\n    }\\n\\n    function addWallet(address payable wallet, address walletOwner) external onlyOwner {\\n        require(walletOwner != address(0), \\\"SwapWalletFactory: wallet owner is the zero address\\\");\\n        require(wallet != address(0), \\\"SwapWalletFactory: wallet is the zero address\\\");\\n        require(walletToIndex[wallet] == 0, \\\"SwapWalletFactory: wallet already exist\\\");\\n        require(walletOwnerToIndex[walletOwner] == 0, \\\"SwapWalletFactory: wallet owner already exist\\\");\\n    \\n        SwapWallet walletContract = SwapWallet(wallet);\\n        require(walletContract.getFactory() == address(this), \\\"SwapWalletFactory: wallet is not created from this factory\\\");\\n\\n        wallets.push(wallet);\\n        walletToIndex[wallet] = wallets.length;\\n        walletOwners.push(walletOwner);\\n        walletOwnerToIndex[walletOwner] = walletOwners.length;\\n        walletToWalletOwner[wallet] = walletOwner;\\n        walletOwnerToWallet[walletOwner] = wallet;\\n        emit SwapWalletAdded(address(wallet), walletOwner);\\n    }\\n\\n    function  deleteWallet(address payable wallet) external onlyOwner {\\n        uint256 index = walletToIndex[wallet];\\n        require(index != 0, \\\"SwapWalletFactory: wallet is not in the walletList\\\");\\n        if (index != wallets.length) {\\n            wallets[index - 1] = wallets[wallets.length - 1];\\n            walletToIndex[wallets[index - 1]] = index;\\n        }\\n        wallets.pop();\\n        delete(walletToIndex[wallet]);\\n        address walletOwner = walletToWalletOwner[wallet];\\n        uint256 ownerIndex = walletOwnerToIndex[walletOwner];\\n        if (ownerIndex != walletOwners.length) {\\n            walletOwners[ownerIndex - 1] = walletOwners[walletOwners.length - 1];\\n            walletOwnerToIndex[walletOwners[ownerIndex - 1]] = ownerIndex;\\n        }\\n        walletOwners.pop();\\n        delete(walletOwnerToIndex[walletOwner]);\\n        delete(walletToWalletOwner[wallet]);\\n        delete(walletOwnerToWallet[walletOwner]);\\n        emit SwapWalletDeleted(wallet, walletOwner);\\n    }\\n\\n    function updateWallet(address payable wallet, address newWalletOwner) external onlyOwner {\\n        require(newWalletOwner != address(0), \\\"SwapWalletFactory: newWalletOwner is the zero address\\\");\\n        require(walletOwnerToIndex[newWalletOwner] == 0, \\\"SwapWalletFactory: newWalletOwner already exists\\\");\\n        address oldWalletOwner = walletToWalletOwner[wallet];\\n        require(oldWalletOwner != address(0), \\\"SwapWalletFactory: wallet doesn't exist\\\");\\n        delete(walletOwnerToWallet[oldWalletOwner]);\\n\\n        uint oldOwnerIndex = walletOwnerToIndex[oldWalletOwner];\\n        walletOwners[oldOwnerIndex - 1] = newWalletOwner;\\n        walletOwnerToIndex[newWalletOwner] = oldOwnerIndex;\\n\\n        walletToWalletOwner[wallet] = newWalletOwner;\\n        walletOwnerToWallet[newWalletOwner] = wallet;\\n        emit SwapWalletUpdated(wallet, oldWalletOwner, newWalletOwner);\\n    }\\n\\n    function addWithdrawWhitelist(address addressToAdd) external onlyOwner returns(uint256) {\\n        require(addressToAdd != address(0), \\\"SwapWalletFactory: new address is the zero address\\\");\\n        uint256 index = whitelistAddressToIndex[addressToAdd];\\n        require(index == 0, \\\"SwapWalletFactory: address is already in the whitelist\\\");\\n        whitelistAddresses.push(addressToAdd);\\n        whitelistAddressToIndex[addressToAdd] = whitelistAddresses.length;\\n        emit WithdrawWhiteListAdded(addressToAdd);\\n        return whitelistAddresses.length;\\n    }\\n\\n    function deleteWithdrawWhitelist(address addressToDelete) external onlyOwner returns(uint256) {\\n        uint256 index = whitelistAddressToIndex[addressToDelete];\\n        require(index != 0, \\\"SwapWalletFactory: address is not in the whitelist\\\");\\n        if (index != whitelistAddresses.length) {\\n            whitelistAddresses[index - 1] = whitelistAddresses[whitelistAddresses.length - 1];\\n            whitelistAddressToIndex[whitelistAddresses[index - 1]] = index;\\n        }\\n        whitelistAddresses.pop();\\n        delete whitelistAddressToIndex[addressToDelete];\\n        emit WithdrawWhiteListDeleted(addressToDelete);\\n        return index;\\n    }\\n\\n    function addPairWhitelist(address[3][] calldata pairs) external onlyOwner returns(uint256) {\\n        uint len = pairs.length;\\n        for(uint i; i < len; ++i) {\\n            address router = pairs[i][0];\\n            address tokenA = pairs[i][1];\\n            address tokenB = pairs[i][2];\\n            require(tokenA != tokenB, 'SwapWalletFactory: identical addresses');\\n            (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n            require(router != address(0), 'SwapWalletFactory: zero address');\\n            require(token0 != address(0), 'SwapWalletFactory: zero address');\\n            require(token1 != address(0), 'SwapWalletFactory: zero address');\\n            require(whitelistPairToIndex[router][token0][token1] == 0, 'SwapWalletFactory: pair exists'); // single check is sufficient\\n            \\n            whitelistPairs.push([router, token0, token1]);\\n            whitelistPairToIndex[router][token0][token1] = whitelistPairs.length;\\n            emit PairWhiteListAdded(router, token0, token1);\\n        }\\n       \\n        return whitelistPairs.length;\\n    }\\n\\n    function deletePairWhitelist(address[3][] calldata pairs) external onlyOwner returns(uint256) {\\n        uint len = pairs.length;\\n        for(uint i; i < len; ++i) {\\n            address router = pairs[i][0];\\n            address tokenA = pairs[i][1];\\n            address tokenB = pairs[i][2];\\n            require(tokenA != tokenB, 'SwapWalletFactory: identical addresses');\\n            (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n            uint256 index = whitelistPairToIndex[router][token0][token1];\\n            require(index != 0, 'SwapWalletFactory: pair not exists'); // single check is sufficient\\n            \\n            if (index != whitelistPairs.length) {\\n                whitelistPairs[index - 1] = whitelistPairs[whitelistPairs.length - 1];\\n                address router_ =  whitelistPairs[index - 1][0];\\n                address token0_ =  whitelistPairs[index - 1][1];\\n                address token1_ =  whitelistPairs[index - 1][2];\\n                whitelistPairToIndex[router_][token0_][token1_] = index;\\n            }\\n            whitelistPairs.pop();\\n            delete whitelistPairToIndex[router][token0][token1];\\n            emit PairWhiteListDeleted(router, token0, token1);\\n        }\\n        return whitelistPairs.length;\\n    }\\n\\n    function withdraw(address assetAddress_, uint256 amount_, address toAddress_) external nonReentrant {\\n        require(amount_ > 0, \\\"SwapWalletFactory: ZERO_AMOUNT\\\");\\n        bool isWhitelistAddress = whitelistAddressToIndex[toAddress_] > 0 || walletToIndex[toAddress_] > 0;\\n        require(isWhitelistAddress, \\\"SwapWalletFactory: withdraw to non whitelist address\\\");\\n        bool hasPermission = msg.sender == _owner || walletOwnerToWallet[msg.sender] != address(0);\\n        require(hasPermission, \\\"SwapWalletFactory: withdraw no permission\\\");\\n        if (assetAddress_ == address(0)) {\\n            address self = address(this);\\n            uint256 assetBalance = self.balance;\\n            require(assetBalance >= amount_, \\\"SwapWalletFactory: not enough balance\\\");\\n            _safeTransferETH(toAddress_, amount_);\\n            emit WithdrawHappened(assetAddress_, amount_, toAddress_);\\n        } else {\\n            uint256 assetBalance = IERC20Upgradeable(assetAddress_).balanceOf(address(this));\\n            require(assetBalance >= amount_, \\\"SwapWalletFactory: not enough balance\\\");\\n            IERC20Upgradeable(assetAddress_).safeTransfer(toAddress_, amount_);\\n            emit WithdrawHappened(assetAddress_, amount_, toAddress_);\\n        }\\n    }\\n\\n    function _safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(\\\"\\\");\\n        require(success, \\\"SwapWalletFactory: transfer eth failed\\\");\\n    }\\n\\n    function applyGas(uint256 amount_) external nonReentrant {\\n        require(walletOwnerToWallet[msg.sender] != address(0), \\\"SwapWalletFactory: apply gas from non wallet owner\\\");\\n        require(amount_ <= applyGasLimit, \\\"SwapWalletFactory: apply gas limit\\\");\\n        require(amount_ > 0, \\\"SwapWalletFactory: ZERO_AMOUNT\\\");\\n        uint256 lastApplyTime = applyGasTime[msg.sender];\\n        require(lastApplyTime == 0 || block.timestamp - lastApplyTime > applyGasInterval, \\\"SwapWalletFactory: apply gas interval\\\");\\n        address self = address(this);\\n        uint256 assetBalance = self.balance;\\n        if (assetBalance >= amount_) {\\n            applyGasTime[msg.sender] = block.timestamp;\\n            _safeTransferETH(msg.sender, amount_);\\n            emit WithdrawHappened(address(0), amount_, msg.sender);\\n        }\\n    }\\n\\n    function setApplyGasLimit(uint256 applyGasLimit_) external onlyOwner {\\n        require(applyGasLimit_ <= 10000000000000000000, \\\"SwapWalletFactory: TOO_LARGE\\\");\\n        uint256 oldLimit = applyGasLimit;\\n        applyGasLimit = applyGasLimit_;\\n        emit ApplyGasLimitUpdated(oldLimit, applyGasLimit_);\\n\\n    }\\n\\n    function setApplyGasInterval(uint256 applyGasInterval_) external onlyOwner {\\n        require(applyGasInterval_ >= 3600, \\\"SwapWalletFactory: TOO_SMALL\\\");\\n        require(applyGasInterval_ <= 604800, \\\"SwapWalletFactory: TOO_LARGE\\\");\\n        uint256 oldInterval = applyGasInterval;\\n        applyGasInterval = applyGasInterval_;\\n        emit ApplyGasIntervalUpdated(oldInterval, applyGasInterval_);\\n    }\\n\\n    function getBeaconAddress() external view returns (address) {\\n        return beaconAddress;\\n    }\\n\\n    function setBeaconAddress(address newBeaconAddress) external onlyOwner {\\n        require(newBeaconAddress != address(0), \\\"SwapWalletFactory: zero address\\\");\\n        require(newBeaconAddress != beaconAddress, \\\"SwapWalletFactory: same address\\\");\\n        emit BeaconAddressUpdated(beaconAddress, newBeaconAddress);\\n        beaconAddress = newBeaconAddress;\\n    }\\n\\n    function setCurveFactory(address factory) external onlyOwner {\\n        require(factory != address(0), \\\"SwapWalletFactory: zero address\\\");\\n        curveFactory = factory;\\n        emit CurveFactoryUpdated(curveFactory, factory);\\n    }\\n\\n    function setOnchainLP(address onchainlp) external nonReentrant onlyOwner {\\n        _onchainlp = onchainlp;\\n        emit OnchainLPSet(_onchainlp);\\n    }\\n\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldInterval\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newInterval\",\"type\":\"uint256\"}],\"name\":\"ApplyGasIntervalUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"ApplyGasLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousImplementation\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"BeaconAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousFactory\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFactory\",\"type\":\"address\"}],\"name\":\"CurveFactoryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onchainlp\",\"type\":\"address\"}],\"name\":\"OnchainLPSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"PairWhiteListAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"PairWhiteListDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletOwner\",\"type\":\"address\"}],\"name\":\"SwapWalletAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletOwner\",\"type\":\"address\"}],\"name\":\"SwapWalletCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletOwner\",\"type\":\"address\"}],\"name\":\"SwapWalletDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWalletOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWalletOwner\",\"type\":\"address\"}],\"name\":\"SwapWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"WithdrawHappened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addedAddress\",\"type\":\"address\"}],\"name\":\"WithdrawWhiteListAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"deletedAddress\",\"type\":\"address\"}],\"name\":\"WithdrawWhiteListDeleted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[3][]\",\"name\":\"pairs\",\"type\":\"address[3][]\"}],\"name\":\"addPairWhitelist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletOwner\",\"type\":\"address\"}],\"name\":\"addWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressToAdd\",\"type\":\"address\"}],\"name\":\"addWithdrawWhitelist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"applyGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"applyGasInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"applyGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"applyGasTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletOwner\",\"type\":\"address\"}],\"name\":\"createWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curveFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[3][]\",\"name\":\"pairs\",\"type\":\"address[3][]\"}],\"name\":\"deletePairWhitelist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"deleteWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressToDelete\",\"type\":\"address\"}],\"name\":\"deleteWithdrawWhitelist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBeaconAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"WETH_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"applyGasLimit_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"applyGasInterval_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onchainlp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"applyGasInterval_\",\"type\":\"uint256\"}],\"name\":\"setApplyGasInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"applyGasLimit_\",\"type\":\"uint256\"}],\"name\":\"setApplyGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBeaconAddress\",\"type\":\"address\"}],\"name\":\"setBeaconAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"setCurveFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"onchainlp\",\"type\":\"address\"}],\"name\":\"setOnchainLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newWalletOwner\",\"type\":\"address\"}],\"name\":\"updateWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletOwnerToIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletOwnerToWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"walletOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletOwnersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletToIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletToWalletOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistAddressToIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whitelistAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistAddressesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistPairToIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whitelistPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toAddress_\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SwapWalletFactory", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}