{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-06-19\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-04-20\r\n*/\r\n\r\n// File: @openzeppelin/contracts/utils/math/SafeMath.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/Believe.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\npragma abicoder v2;\r\n\r\n\r\n\r\ninterface TokenTransfer {\r\n    function transfer(address recipient, uint256 amount) external;\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external;\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n    function ownerOf(uint tokenId) external view returns (address nftOwner);\r\n    function tokensOfOwner(address owner) external view returns (uint256[] memory);\r\n}\r\n\r\ncontract BelieverNFTV4 is Ownable {\r\n    uint constant AFTER_DAYS = 1 days;\r\n    uint constant GAP_DAYS = 30 days;\r\n    uint gameStartTime;\r\n    enum State { Active, Abandoned }\r\n    address nftAddress;\r\n    address coinAddress;\r\n    uint nextClaimTime;\r\n\r\n    TokenTransfer _tokenTransferNFT;\r\n   \r\n    TokenTransfer _tokenTransferCoin;\r\n  \r\n    struct ClaimInfo {\r\n       uint tokenId;\r\n       uint canClaimTotal;\r\n       State claimState;\r\n       uint claimPercent;\r\n       uint claimedQuantity;\r\n       uint laveQuantity;\r\n       uint lastClaimTime; \r\n       uint firstClaimTime; \r\n       uint claimNum; \r\n       uint abandonedTime; \r\n       uint activeTime;\r\n    }\r\n \r\n    struct ClaimLog {\r\n        address receiver; \r\n        address nftAddr;\r\n        uint tokenId; \r\n        uint quantity; \r\n        uint claimTime; \r\n        uint claimPercent; \r\n        uint claimNum; \r\n    }\r\n    \r\n    \r\n    mapping(address=>mapping(uint=>ClaimInfo)) nftInfo;\r\n    \r\n    ClaimInfo[] public nftInfoList;\r\n   \r\n    mapping(address=>mapping(uint=>uint)) nftInfoIndex;\r\n    \r\n    \r\n    mapping(address=>mapping(uint=>ClaimLog)) claimLogs;\r\n    \r\n    ClaimLog[] public claimLogList;\r\n    \r\n    mapping(address=>mapping(uint=>uint)) claimLogIndex;\r\n    \r\n    mapping(address=>mapping(uint=>uint)) hasClaimedCoin;\r\n    \r\n   \r\n    event doClaimInfo(ClaimInfo claimInfo);\r\n    event doClaimLog(ClaimLog claimLog);\r\n    event changeClaimState(uint tokenId, State state, uint optTime);\r\n    event addClaimInfoEvent(uint _tokenId, uint _canClaimTotal, uint _claimPercent);\r\n    \r\n    \r\n    modifier hasClaimRight() {\r\n        uint _balance = getNFTBalance(msg.sender);\r\n        require(_balance > 0, 'Insufficient balance');\r\n         _;\r\n    }\r\n    \r\n \r\n    modifier onlyAdmin() {\r\n        address _nftOwner = _tokenTransferNFT.ownerOf(0);\r\n        require(_nftOwner == msg.sender, 'Only owner can call');\r\n         _;\r\n    }\r\n    \r\n    constructor(address _nftAddr, address _coinAddr) {\r\n        require(nftAddress == address(0), \"can't init this contract from nft\");\r\n        require(coinAddress == address(0), \"can't init this contract from coin\");\r\n        \r\n        nftAddress = _nftAddr;\r\n        coinAddress = _coinAddr;\r\n        _tokenTransferNFT = TokenTransfer(nftAddress);\r\n        _tokenTransferCoin = TokenTransfer(coinAddress);\r\n        gameStartTime = block.timestamp + AFTER_DAYS;\r\n        nextClaimTime = block.timestamp;\r\n    }\r\n    \r\n    bool _inited;\r\n    function addInitParames(uint[] memory _infos) public onlyOwner {\r\n        require(_inited == false, \"can't add parames\");\r\n        require(_infos.length > 0, \"can't init this contract from infos\");\r\n        uint _tokenId = _infos[0];\r\n        uint _canClaimTotal = _infos[1];\r\n        addClaimInfo(_tokenId, _canClaimTotal, 10);\r\n    }\r\n    \r\n    function finishAddParames() public onlyOwner {\r\n        _inited = true;\r\n    }\r\n    \r\n   \r\n    function addClaimInfo(uint _tokenId, uint _canClaimTotal, uint _claimPercent) internal {\r\n        require(_tokenId != uint(0), \"Distribute: tokenId null is not allowed\");\r\n        require(_canClaimTotal != uint(0), \"Distribute: canClaimTotal null is not allowed\");\r\n        require(_claimPercent != uint(0), \"Distribute: claimPercent null is not allowed\");\r\n        uint _percentTemp = SafeMath.mul(_claimPercent, (10**30));\r\n        ClaimInfo memory _claimInfo = ClaimInfo({tokenId:_tokenId,canClaimTotal:_canClaimTotal * (10 ** 18),claimState:State.Active,\r\n        claimPercent: _percentTemp,claimedQuantity: 0,laveQuantity: _canClaimTotal * (10 ** 18),\r\n        lastClaimTime: 0,firstClaimTime: 0,claimNum: 0,abandonedTime: 0,activeTime: block.timestamp });\r\n        \r\n        nftInfo[nftAddress][_tokenId] = _claimInfo;\r\n\t\tnftInfoList.push(_claimInfo);\r\n\t\tnftInfoIndex[nftAddress][_tokenId] = nftInfoList.length-1;\r\n    }\r\n    \r\n    function claim() hasClaimRight() public {\r\n        uint[] memory _myTokenIds = _tokenTransferNFT.tokensOfOwner(msg.sender);\r\n        require(_myTokenIds.length > 0, 'tokenId is null');\r\n        require(block.timestamp >= gameStartTime, 'start time not yet');\r\n        uint _needSendTotal = 0;\r\n        uint _days = block.timestamp - gameStartTime + GAP_DAYS;\r\n        uint _canClaimeNumTotal = SafeMath.div(_days, GAP_DAYS);\r\n        \r\n        for(uint i=0;i<_myTokenIds.length; i++) {\r\n            uint _tokenId =_myTokenIds[i];\r\n            ClaimInfo memory _info = nftInfo[nftAddress][_tokenId];\r\n           \r\n            if(_info.claimState == State.Abandoned) {\r\n                continue;\r\n            }\r\n            if(_info.claimNum == _canClaimeNumTotal) {\r\n                continue;\r\n            }\r\n            \r\n            if(_info.canClaimTotal <= 0) {\r\n                continue;\r\n            }\r\n            if(_info.laveQuantity <=0) {\r\n                continue;\r\n            }\r\n            \r\n            if (_info.claimNum == 0) {\r\n                _info.firstClaimTime = block.timestamp;\r\n            }\r\n            uint _claimNumTemp = 0;\r\n            uint _claimNeedTemp = 0;\r\n            for (uint k=1;k<=_canClaimeNumTotal;k++) {\r\n                if(k <= _info.claimNum) {\r\n                    continue;\r\n                }\r\n                \r\n                _claimNumTemp = _claimNumTemp + 1;\r\n                uint _thisClaimTemp = SafeMath.mul(_info.claimPercent, _info.canClaimTotal);\r\n                uint _thisClaim = SafeMath.div(_thisClaimTemp, (10 ** 30));\r\n                _thisClaim = SafeMath.div(_thisClaim, 100);\r\n                _claimNeedTemp =  SafeMath.add(_claimNeedTemp, _thisClaim);\r\n            }\r\n            _needSendTotal = SafeMath.add(_needSendTotal, _claimNeedTemp);\r\n            _info.claimNum = SafeMath.add(_info.claimNum, _claimNumTemp);\r\n            _info.claimedQuantity = SafeMath.add(_info.claimedQuantity, _claimNeedTemp);\r\n            _info.laveQuantity = SafeMath.sub(_info.canClaimTotal, _info.claimedQuantity);\r\n            _info.lastClaimTime = block.timestamp;\r\n            nftInfo[nftAddress][_tokenId] = _info;\r\n            nftInfoList[nftInfoIndex[nftAddress][_tokenId]] = _info;\r\n            emit doClaimInfo(_info);\r\n        \r\n            ClaimLog memory _claimLog = ClaimLog({receiver:msg.sender, nftAddr: nftAddress, tokenId: _tokenId, quantity:_claimNeedTemp, \r\n            claimTime: _info.lastClaimTime, claimPercent:_info.claimPercent, claimNum: _info.claimNum});\r\n    \t\t\r\n    \t\tclaimLogs[nftAddress][_tokenId] = _claimLog;\r\n    \t\tclaimLogList.push(_claimLog);\r\n    \t\tclaimLogIndex[nftAddress][_tokenId] = claimLogList.length-1;\r\n    \t\temit doClaimLog(_claimLog);\r\n        }\r\n        nextClaimTime = gameStartTime + (_canClaimeNumTotal) * GAP_DAYS;\r\n        if(_needSendTotal > 0){\r\n            _tokenTransferCoin.transfer(msg.sender, _needSendTotal);\r\n        }\r\n    }\r\n  \r\n    function changeTokenIdStatus0(uint[] memory _tokenIds) onlyAdmin() external {\r\n        require(_tokenIds.length > 0, 'tokenId is null');\r\n        for(uint i=0;i<_tokenIds.length;i++) {\r\n            uint _tokenId =_tokenIds[i];\r\n            ClaimInfo memory _info = nftInfo[nftAddress][_tokenId];\r\n            if(_info.claimState == State.Abandoned) {\r\n                continue;\r\n            }\r\n            _info.claimState = State.Abandoned;\r\n            _info.abandonedTime = block.timestamp;\r\n            nftInfo[nftAddress][_tokenId] = _info;\r\n            emit changeClaimState(_tokenId, State.Abandoned, _info.abandonedTime);\r\n        }\r\n    }\r\n    \r\n    function changeTokenIdStatus1(uint[] memory _tokenIds) onlyAdmin() external {\r\n        require(_tokenIds.length > 0, 'tokenId is null');\r\n        for(uint i=0;i<_tokenIds.length;i++) {\r\n            uint _tokenId =_tokenIds[i];\r\n            ClaimInfo memory _info = nftInfo[nftAddress][_tokenId];\r\n            if(_info.claimState == State.Active) {\r\n                continue;\r\n            }\r\n            _info.claimState = State.Active;\r\n            _info.activeTime = block.timestamp;\r\n            nftInfo[nftAddress][_tokenId] = _info;\r\n            emit changeClaimState(_tokenId, State.Active, _info.activeTime);\r\n        }\r\n    }\r\n    \r\n    function getClaimInfo(uint _tokenId) external view returns(ClaimInfo memory claimInfo){\r\n        return nftInfo[nftAddress][_tokenId];\r\n    }\r\n    \r\n    function getAllClaimInfo()  external view returns(ClaimInfo[] memory claimInfoList){\r\n        return nftInfoList;\r\n    }\r\n    \r\n    function getNextClaimTime() external view returns(uint) {\r\n        return nextClaimTime;\r\n    }\r\n    \r\n    function getClaimLog(uint _tokenId) external view returns(ClaimLog memory claimLog) {\r\n        return claimLogs[nftAddress][_tokenId];\r\n    }\r\n    \r\n    function getAllClaimLog() external view returns(ClaimLog[] memory claimLog) {\r\n        return claimLogList;\r\n    }\r\n    \r\n\tfunction getNFTBalance(address _addr) public view returns(uint) {\r\n\t    return _tokenTransferNFT.balanceOf(_addr);\r\n\t}\r\n\t\r\n\t\r\n\tfunction getNFTTokenIds(address _addr) public view returns(uint[] memory) {\r\n\t    return _tokenTransferNFT.tokensOfOwner(_addr);\r\n\t}\r\n\t\r\n\t\r\n\tfunction getCoinBalance(address _addr) public view returns(uint) {\r\n\t    return _tokenTransferCoin.balanceOf(_addr);\r\n\t}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_coinAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_canClaimTotal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_claimPercent\",\"type\":\"uint256\"}],\"name\":\"addClaimInfoEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum BelieverNFTV4.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"optTime\",\"type\":\"uint256\"}],\"name\":\"changeClaimState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"canClaimTotal\",\"type\":\"uint256\"},{\"internalType\":\"enum BelieverNFTV4.State\",\"name\":\"claimState\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"claimPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"laveQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"abandonedTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeTime\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct BelieverNFTV4.ClaimInfo\",\"name\":\"claimInfo\",\"type\":\"tuple\"}],\"name\":\"doClaimInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimNum\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct BelieverNFTV4.ClaimLog\",\"name\":\"claimLog\",\"type\":\"tuple\"}],\"name\":\"doClaimLog\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_infos\",\"type\":\"uint256[]\"}],\"name\":\"addInitParames\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"changeTokenIdStatus0\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"changeTokenIdStatus1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimLogList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimNum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishAddParames\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllClaimInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"canClaimTotal\",\"type\":\"uint256\"},{\"internalType\":\"enum BelieverNFTV4.State\",\"name\":\"claimState\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"claimPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"laveQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"abandonedTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeTime\",\"type\":\"uint256\"}],\"internalType\":\"struct BelieverNFTV4.ClaimInfo[]\",\"name\":\"claimInfoList\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllClaimLog\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimNum\",\"type\":\"uint256\"}],\"internalType\":\"struct BelieverNFTV4.ClaimLog[]\",\"name\":\"claimLog\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getClaimInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"canClaimTotal\",\"type\":\"uint256\"},{\"internalType\":\"enum BelieverNFTV4.State\",\"name\":\"claimState\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"claimPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"laveQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"abandonedTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeTime\",\"type\":\"uint256\"}],\"internalType\":\"struct BelieverNFTV4.ClaimInfo\",\"name\":\"claimInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getClaimLog\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimNum\",\"type\":\"uint256\"}],\"internalType\":\"struct BelieverNFTV4.ClaimLog\",\"name\":\"claimLog\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getCoinBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getNFTBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getNFTTokenIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextClaimTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftInfoList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"canClaimTotal\",\"type\":\"uint256\"},{\"internalType\":\"enum BelieverNFTV4.State\",\"name\":\"claimState\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"claimPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"laveQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"abandonedTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BelieverNFTV4", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000bf0f1b569677aa1b4a9bd1167bdb45213f0111a4000000000000000000000000d8a2ae43fd061d24acd538e3866ffc2c05151b53", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5fc21547117db4dbc84e2516ec5a74a1f04fb4536e5c6a52671395f8e6361254"}