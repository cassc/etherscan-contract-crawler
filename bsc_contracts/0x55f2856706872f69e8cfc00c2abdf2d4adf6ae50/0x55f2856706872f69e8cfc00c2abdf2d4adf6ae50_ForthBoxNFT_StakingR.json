{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.5.16;\r\n\r\nlibrary Math {\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {size := extcodesize(account)}\r\n        return size > 0;\r\n    }\r\n}\r\n\r\ncontract Context {\r\n    constructor () internal { }\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\"SafeERC20: approve from non-zero to non-zero allowance\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n    uint256 private _guardCounter;\r\n    constructor () internal {\r\n        _guardCounter = 1;\r\n    }\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\r\n    }\r\n}\r\n\r\ninterface IStakingRewards {\r\n    // Views\r\n    function lastTimeRewardApplicable() external view returns (uint256);\r\n    function rewardPerToken() external view returns (uint256);\r\n    function earned(address account) external view returns (uint256);\r\n    function getRewardForDuration() external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    // Mutative\r\n    function stake(uint256 tokenId) external;\r\n    function withdraw(uint256 tokenId) external;\r\n    function getReward() external;\r\n    function exit() external;\r\n    function stakeFresh(address ownerAdrr,uint256 tokenId) external;\r\n    // EVENTS\r\n    event StakeFresh(address indexed user, uint256 tokenId);\r\n    event Exit(address indexed user);\r\n    event RewardAdded(uint256 reward);\r\n    event Staked(address indexed user, uint256 amount);\r\n    event Withdrawn(address indexed user, uint256 amount);\r\n    event RewardPaid(address indexed user, uint256 reward);\r\n}\r\n\r\ninterface IFBX_NFT_Token {\r\n    function safeTransferFrom(address from_, address to_, uint256 tokenId_) external;\r\n    function getHashrateByTokenId(uint256 tokenId_) external view returns(uint256);\r\n    function feedFBXOnlyPrice() external view returns (uint256);\r\n}\r\n\r\ninterface IERC721Receiver {\r\n    function onERC721Received(address operator,address from,uint256 tokenId,bytes calldata data) view external returns (bytes4);\r\n}\r\n\r\ncontract ForthBoxNFT_StakingRewards is IStakingRewards, Ownable, ReentrancyGuard,IERC721Receiver {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n\r\n    string private _name = \"ForthBox Ham DeFi\";\r\n    string private _symbol = \"Ham DeFi\";\r\n\r\n    IERC20 public rewardsToken;\r\n    IFBX_NFT_Token public stakingToken;\r\n    uint256 public periodFinish = 0;\r\n    uint256 public rewardRate = 0;\r\n    uint256 public rewardsDuration = 30 days;\r\n    uint256 public lastUpdateTime;\r\n    uint256 public rewardPerTokenStored;\r\n    uint256 public totalReward;\r\n    uint256 public totalStakeTokens=0;\r\n\r\n    mapping(address => uint256) public userRewardPerTokenPaid;\r\n    mapping(address => uint256) public rewards;\r\n    uint256 private _totalSupply;\r\n    mapping(address => uint256) private _balances;\r\n    uint256 public totalRewardAlready;\r\n\r\n    struct sNftPropertys {\r\n        uint256 value;\r\n        address owner;\r\n    }\r\n    struct sOwnNftIDs {\r\n        uint256[] NftIDs;\r\n    }\r\n    mapping (uint256 => sNftPropertys) private _stakingNFTs;\r\n    mapping (address => sOwnNftIDs) private _OwnerNFTs;\r\n\r\n    mapping (address => bool) private _Is_WhiteContractArr;\r\n    address[] private _WhiteContractArr;\r\n    uint256 public basicDailyReward=100000;\r\n    bool public bFeedReward = true;\r\n\r\n    struct sFeedRewardData {\r\n        uint256 sum;\r\n        uint256 startTime;\r\n        uint256 alreadyReward;\r\n    }\r\n    mapping(address => sFeedRewardData) public feedRewardArr;\r\n\r\n\r\n\r\n    constructor() public {\r\n    }\r\n    /* ========== VIEWS ========== */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function totalSupply() external view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function balanceOf(address account) external view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function totalRewardYet() external view returns (uint256) {\r\n        return totalReward.sub(periodFinish.sub(lastTimeRewardApplicable()).mul(rewardRate));\r\n    }\r\n    function lastTimeRewardApplicable() public view returns (uint256) {\r\n        return Math.min(block.timestamp, periodFinish);\r\n    }\r\n    function rewardPerToken() public view returns (uint256){\r\n        if (_totalSupply == 0){\r\n            return rewardPerTokenStored;\r\n        }\r\n        return rewardPerTokenStored.add(\r\n          lastTimeRewardApplicable().sub(lastUpdateTime).mul(rewardRate).mul(1e18).div(_totalSupply)\r\n          );\r\n    }\r\n    function getFeedReward_dt(address account) internal view returns (uint256) {\r\n        if(feedRewardArr[account].sum==0 && feedRewardArr[account].alreadyReward==0){\r\n            return 0;\r\n        }\r\n        uint256 dt = Math.min(block.timestamp, feedRewardArr[account].startTime.add(rewardsDuration)).sub(feedRewardArr[account].startTime);\r\n        return dt.mul(feedRewardArr[account].sum).div(rewardsDuration);\r\n    }\r\n    function getFeedReward_All(address account) public view returns (uint256) {\r\n        uint256 dtReward = getFeedReward_dt(account);\r\n        return feedRewardArr[account].alreadyReward.add(dtReward);\r\n    }\r\n    function earned(address account) public view returns (uint256) {\r\n        return _balances[account].mul(\r\n          rewardPerToken().sub(userRewardPerTokenPaid[account])\r\n        ).div(1e18).add(rewards[account]).add(getFeedReward_All(account));\r\n    }\r\n    function earned_Stake(address account) internal view returns (uint256) {\r\n        return _balances[account].mul(\r\n          rewardPerToken().sub(userRewardPerTokenPaid[account])\r\n        ).div(1e18).add(rewards[account]);\r\n    }\r\n    function getRewardForDuration() external view returns (uint256) {\r\n        return rewardRate.mul(rewardsDuration);\r\n    }\r\n    function getRewardPerDay() external view returns (uint256) {\r\n        return rewardRate.mul(86400);\r\n    }\r\n    function getRewardPerDayPerToken() external view returns (uint256) {\r\n        return rewardRate.mul(86400).mul(1e18).div(_totalSupply);//result*1e18\r\n    }\r\n    function getAdressRewardPerDay(address account) external view returns (uint256) {\r\n        return rewardRate.mul(86400).mul(_balances[account]).div(_totalSupply);\r\n    }\r\n    function getOwnerStakeTokenIDs(address Owner) external view returns (uint256[] memory){\r\n        uint256 num = _OwnerNFTs[Owner].NftIDs.length;\r\n        uint256[] memory Token_list = new uint256[](uint256(num));\r\n        for(uint256 i=0; i<num; ++i) {\r\n            Token_list[i] =_OwnerNFTs[Owner].NftIDs[i];\r\n        }\r\n        return  Token_list;\r\n    }\r\n    function ownerTokenId(uint256 tokenId) external view returns (address){\r\n        return _stakingNFTs[tokenId].owner;\r\n    }\r\n    function onERC721Received(address,address,uint256,bytes memory) public view returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n    function isWhiteContract(address account) public view returns (bool) {\r\n        if(!account.isContract()) return true;\r\n        return _Is_WhiteContractArr[account];\r\n    }\r\n    function getWhiteAccountNum() public view returns (uint256){\r\n        return _WhiteContractArr.length;\r\n    }\r\n    function getWhiteAccountIth(uint256 ith) public view returns (address WhiteAddress){\r\n        require(ith <_WhiteContractArr.length, \"ForthBox NFT DeFi: no ith White Adress\");\r\n        return _WhiteContractArr[ith];\r\n    }\r\n    function getParameters(address account) public view returns (uint256[] memory){\r\n        uint256[] memory paraList = new uint256[](uint256(5));\r\n        paraList[0]=totalRewardAlready;\r\n        paraList[1]=basicDailyReward;\r\n        paraList[2]=_totalSupply;\r\n        paraList[3]=_balances[account];\r\n        paraList[4]= earned(account);\r\n        return paraList;\r\n    }\r\n    //---write---//\r\n    function stakes(uint256[] memory tokenIds) public nonReentrant updateReward(_msgSender()){\r\n        require(tokenIds.length<=100, \"ForthBox NFT DeFi: num exceed 100!\");\r\n        require(tokenIds.length>0, \"ForthBox NFT DeFi: num 0!\");\r\n        require(isWhiteContract(_msgSender()), \"ForthBox NFT DeFi: Contract not in white list!\");\r\n        for(uint256 i=0; i<tokenIds.length; ++i) {\r\n            _stake(tokenIds[i]);\r\n        }\r\n    }\r\n    function stake(uint256 tokenId) public nonReentrant updateReward(_msgSender()){\r\n        require(isWhiteContract(_msgSender()), \"ForthBox NFT DeFi: Contract not in white list!\");\r\n        _stake(tokenId);\r\n    }\r\n    function _stake(uint256 tokenId) internal {\r\n        require(tokenId >= 0, \"Cannot stake ID = 0\");\r\n        uint256 amount = stakingToken.getHashrateByTokenId(tokenId);\r\n        require(amount > 0, \"Cannot stake 0\");\r\n\r\n        stakingToken.safeTransferFrom(_msgSender(), address(this), tokenId);\r\n\r\n        _balances[_msgSender()] = _balances[_msgSender()].add(amount);\r\n        _totalSupply = _totalSupply.add(amount);\r\n\r\n        _stakingNFTs[tokenId].value = amount;\r\n        _stakingNFTs[tokenId].owner = _msgSender();\r\n\r\n        _OwnerNFTs[_msgSender()].NftIDs.push(tokenId);\r\n\r\n        totalStakeTokens = totalStakeTokens + 1;\r\n        emit Staked(_msgSender(), tokenId);\r\n    }\r\n    function stakeFresh(address ownerAdrr,uint256 tokenId) external nonReentrant updateReward(ownerAdrr){\r\n        require(ownerAdrr == _stakingNFTs[tokenId].owner , \"ForthBox NFT DeFi: 1 Cannot Fresh not own id\");\r\n        require(isWhiteContract(_msgSender()), \"ForthBox NFT DeFi: Contract not in white list!\");\r\n\r\n        if(address(_msgSender())!=address(stakingToken)){\r\n           require(_msgSender() == ownerAdrr , \"ForthBox NFT DeFi: 2 Cannot Fresh not own id\");\r\n        }\r\n        uint256 amount = stakingToken.getHashrateByTokenId(tokenId);\r\n        require(amount > _stakingNFTs[tokenId].value, \"ForthBox NFT DeFi: need token hashrate > old Hashrate \");\r\n        _balances[ownerAdrr] = _balances[ownerAdrr].add(amount.sub(_stakingNFTs[tokenId].value));\r\n        _totalSupply = _totalSupply.add(amount.sub(_stakingNFTs[tokenId].value));\r\n        _stakingNFTs[tokenId].value = amount;\r\n        addFeedReward(ownerAdrr);\r\n        emit StakeFresh(_msgSender(), tokenId);\r\n    }\r\n    function withdraw(uint256 tokenId) public nonReentrant updateReward(_msgSender()){\r\n        require(isWhiteContract(_msgSender()), \"ForthBox NFT DeFi: Contract not in white list!\");\r\n        _withdrawDel(tokenId);\r\n        emit Withdrawn(_msgSender(), tokenId);\r\n    }\r\n    function _withdraw(uint256 tokenId) internal{\r\n        _totalSupply = _totalSupply.sub(_stakingNFTs[tokenId].value);\r\n        _balances[_msgSender()] = _balances[_msgSender()].sub(_stakingNFTs[tokenId].value);\r\n        stakingToken.safeTransferFrom(address(this),_msgSender(), tokenId);\r\n        totalStakeTokens = totalStakeTokens.sub(1);\r\n    }\r\n    function _withdrawDel(uint256 tokenId) internal {\r\n        require(_msgSender() == _stakingNFTs[tokenId].owner , \"ForthBox NFT DeFi: Cannot withdraw not own id\");\r\n        _withdraw(tokenId);\r\n        for (uint256 i = 0; i < _OwnerNFTs[_msgSender()].NftIDs.length; i++){\r\n            if (_OwnerNFTs[_msgSender()].NftIDs[i] == tokenId){\r\n                _OwnerNFTs[_msgSender()].NftIDs[i] = _OwnerNFTs[_msgSender()].NftIDs[_OwnerNFTs[_msgSender()].NftIDs.length - 1];\r\n                _OwnerNFTs[_msgSender()].NftIDs.pop();\r\n                break;\r\n            }\r\n        }\r\n        delete _stakingNFTs[tokenId];\r\n    }\r\n    function getReward() public nonReentrant updateReward(_msgSender()){\r\n        require(isWhiteContract(_msgSender()), \"ForthBox NFT DeFi: Contract not in white list!\");\r\n\r\n        uint256 tFeedReward = getFeedReward_All(_msgSender());\r\n        uint256 reward = rewards[_msgSender()].add(tFeedReward);\r\n        require(reward > 0, \"ForthBox NFT DeFi: reward zero!\");\r\n        if (tFeedReward > 0){\r\n            freshFeedReward(_msgSender());\r\n        }\r\n        if (reward > 0){\r\n            rewards[_msgSender()] = 0;\r\n            rewardsToken.safeTransfer(_msgSender(), reward);\r\n            totalRewardAlready = totalRewardAlready.add(reward);\r\n            emit RewardPaid(_msgSender(), reward);\r\n        }\r\n    }\r\n    function exit() external nonReentrant updateReward(_msgSender()){\r\n        require(isWhiteContract(_msgSender()), \"ForthBox NFT DeFi: Contract not in white list!\");\r\n        _exit(_OwnerNFTs[_msgSender()].NftIDs.length);\r\n    }\r\n    function exits(uint256 num) external nonReentrant updateReward(_msgSender()){\r\n        require(isWhiteContract(_msgSender()), \"ForthBox NFT DeFi: Contract not in white list!\");\r\n        _exit(num);\r\n    }\r\n    function _exit(uint256 num) internal {\r\n        require(num>0, \"ForthBox NFT DeFi: num 0!\");\r\n        if(num>=_OwnerNFTs[_msgSender()].NftIDs.length){\r\n            for (uint256 i = 0; i < _OwnerNFTs[_msgSender()].NftIDs.length; i++){\r\n               _withdraw(_OwnerNFTs[_msgSender()].NftIDs[i]);\r\n               delete _stakingNFTs[_OwnerNFTs[_msgSender()].NftIDs[i]];\r\n            }\r\n            delete _OwnerNFTs[_msgSender()];\r\n        }\r\n        else{\r\n          uint256 LastNum = _OwnerNFTs[_msgSender()].NftIDs.length;\r\n          for (uint256 i = 0; i < num; i++){\r\n            _withdraw(_OwnerNFTs[_msgSender()].NftIDs[LastNum-1-i]);\r\n            delete _stakingNFTs[_OwnerNFTs[_msgSender()].NftIDs[LastNum-1-i]];\r\n          }\r\n          for (uint256 i = 0; i < num; i++){\r\n            _OwnerNFTs[_msgSender()].NftIDs.pop();\r\n          }\r\n        }\r\n\r\n        uint256 tFeedReward = getFeedReward_All(_msgSender());\r\n        uint256 reward = rewards[_msgSender()].add(tFeedReward);\r\n        if (tFeedReward > 0){\r\n            freshFeedReward(_msgSender());\r\n        }\r\n        if (reward > 0){\r\n            rewards[_msgSender()] = 0;\r\n            rewardsToken.safeTransfer(_msgSender(), reward);\r\n            totalRewardAlready = totalRewardAlready.add(reward);\r\n        }\r\n\r\n        emit Exit(_msgSender());\r\n    }\r\n    modifier updateReward(address account){\r\n        rewardPerTokenStored = rewardPerToken();\r\n        lastUpdateTime = lastTimeRewardApplicable();\r\n        if (account != address(0)){\r\n            rewards[account] = earned_Stake(account);\r\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\r\n        }\r\n        _;\r\n    }\r\n    function addFeedReward(address account) internal {\r\n        if(!bFeedReward) return;\r\n\r\n        uint256 feedReward=stakingToken.feedFBXOnlyPrice();\r\n        uint256 dtReward = getFeedReward_dt(account);\r\n        feedRewardArr[account].sum = feedRewardArr[account].sum.sub(dtReward).add(feedReward);\r\n        feedRewardArr[account].alreadyReward = feedRewardArr[account].alreadyReward.add(dtReward);\r\n        feedRewardArr[account].startTime = block.timestamp;\r\n        return;\r\n    }\r\n    function freshFeedReward(address account) internal {\r\n        uint256 dtReward = getFeedReward_dt(account);\r\n        feedRewardArr[account].sum = feedRewardArr[account].sum.sub(dtReward);\r\n        feedRewardArr[account].alreadyReward = 0;\r\n        feedRewardArr[account].startTime = block.timestamp;\r\n        return;\r\n    }\r\n\r\n    //---write onlyOwner---//\r\n    function setTokens(address _rewardsToken,address _stakingToken,uint256 _rewardsDuration) external onlyOwner {\r\n      rewardsToken = IERC20(_rewardsToken);\r\n      stakingToken = IFBX_NFT_Token(_stakingToken);\r\n      rewardsDuration = _rewardsDuration;\r\n    }\r\n    function notifyRewardAmount(uint256 reward) external onlyOwner updateReward(address(0)){\r\n        if (block.timestamp >= periodFinish){\r\n            rewardRate = reward.div(rewardsDuration);\r\n        }\r\n        else{\r\n            uint256 remaining = periodFinish.sub(block.timestamp);\r\n            uint256 leftover = remaining.mul(rewardRate);\r\n            rewardRate = reward.add(leftover).div(rewardsDuration);\r\n        }\r\n        totalReward = totalReward.add(reward);\r\n        uint256 balance = rewardsToken.balanceOf(address(this));\r\n        require(rewardRate <= balance.div(rewardsDuration), \"ForthBox NFT DeFi:Provided reward too high\");\r\n        lastUpdateTime = block.timestamp;\r\n        periodFinish = block.timestamp.add(rewardsDuration);\r\n        emit RewardAdded(reward);\r\n    }\r\n    function setBasicDailyReward (uint256 newBasicDailyReward) onlyOwner public{\r\n        basicDailyReward = newBasicDailyReward ;\r\n    }\r\n    function setFeedReward (bool tFeedReward) onlyOwner public{\r\n        bFeedReward = tFeedReward;\r\n    }\r\n    function addWhiteAccount(address account) external onlyOwner{\r\n        require(!_Is_WhiteContractArr[account], \"ForthBox NFT DeFi:Account is already White list\");\r\n        require(account.isContract(), \"ForthBox NFT DeFi: not Contract Adress\");\r\n        _Is_WhiteContractArr[account] = true;\r\n        _WhiteContractArr.push(account);\r\n    }\r\n    function removeWhiteAccount(address account) external onlyOwner{\r\n        require(_Is_WhiteContractArr[account], \"ForthBox NFT DeFi:Account is already out White list\");\r\n        for (uint256 i = 0; i < _WhiteContractArr.length; i++){\r\n            if (_WhiteContractArr[i] == account){\r\n                _WhiteContractArr[i] = _WhiteContractArr[_WhiteContractArr.length - 1];\r\n                _WhiteContractArr.pop();\r\n                _Is_WhiteContractArr[account] = false;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Exit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"StakeFresh\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhiteAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bFeedReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"basicDailyReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"exits\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feedRewardArr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"alreadyReward\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAdressRewardPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getFeedReward_All\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"Owner\",\"type\":\"address\"}],\"name\":\"getOwnerStakeTokenIDs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getParameters\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRewardForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRewardPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRewardPerDayPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ith\",\"type\":\"uint256\"}],\"name\":\"getWhiteAccountIth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"WhiteAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWhiteAccountNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhiteContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerTokenId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeWhiteAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardsDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBasicDailyReward\",\"type\":\"uint256\"}],\"name\":\"setBasicDailyReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"tFeedReward\",\"type\":\"bool\"}],\"name\":\"setFeedReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsDuration\",\"type\":\"uint256\"}],\"name\":\"setTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAdrr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"stakeFresh\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"stakes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IFBX_NFT_Token\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRewardAlready\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRewardYet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStakeTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ForthBoxNFT_StakingRewards", "CompilerVersion": "v0.5.16+commit.9c3226ce", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://5e1b5cf1eef47f731f68af0a9e5453d38afe563f631d0659d37ed4514f3bd038"}