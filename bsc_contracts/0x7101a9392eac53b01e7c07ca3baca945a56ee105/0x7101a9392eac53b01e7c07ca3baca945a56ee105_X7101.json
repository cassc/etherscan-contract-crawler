{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2022-09-24\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.15;\r\n\r\n/*\r\n\r\n /$$   /$$ /$$$$$$$$       /$$$$$$$$ /$$\r\n| $$  / $$|_____ $$/      | $$_____/|__/\r\n|  $$/ $$/     /$$/       | $$       /$$ /$$$$$$$   /$$$$$$  /$$$$$$$   /$$$$$$$  /$$$$$$\r\n \\  $$$$/     /$$/        | $$$$$   | $$| $$__  $$ |____  $$| $$__  $$ /$$_____/ /$$__  $$\r\n  >$$  $$    /$$/         | $$__/   | $$| $$  \\ $$  /$$$$$$$| $$  \\ $$| $$      | $$$$$$$$\r\n /$$/\\  $$  /$$/          | $$      | $$| $$  | $$ /$$__  $$| $$  | $$| $$      | $$_____/\r\n| $$  \\ $$ /$$/           | $$      | $$| $$  | $$|  $$$$$$$| $$  | $$|  $$$$$$$|  $$$$$$$\r\n|__/  |__/|__/            |__/      |__/|__/  |__/ \\_______/|__/  |__/ \\_______/ \\_______/\r\n\r\nContract: ERC-20 Token X7101\r\n\r\nThis contract will NOT be renounced.\r\n\r\nThe following are the only functions that can be called on the contract that affect the contract:\r\n\r\n    function setLiquidityHub(address liquidityHub_) external onlyOwner {\r\n        require(!liquidityHubFrozen);\r\n        liquidityHub = ILiquidityHub(liquidityHub_);\r\n    }\r\n\r\n    function setDiscountAuthority(address discountAuthority_) external onlyOwner {\r\n        require(!discountAuthorityFrozen);\r\n        discountAuthority = IDiscountAuthority(discountAuthority_);\r\n    }\r\n\r\n    function setFeeNumerator(uint256 feeNumerator_) external onlyOwner {\r\n        require(feeNumerator_ <= maxFeeNumerator);\r\n        feeNumerator = feeNumerator_;\r\n    }\r\n\r\n    function setAMM(address ammAddress, bool isAMM) external {\r\n        require(msg.sender == address(liquidityHub) || msg.sender == owner(), \"Only the owner or the liquidity hub may add a new pair\");\r\n        ammPair[ammAddress] = isAMM;\r\n    }\r\n\r\n    function setOffRampPair(address ammAddress) external {\r\n        require(msg.sender == address(liquidityHub) || msg.sender == owner(), \"Only the owner or the liquidity hub may add a new pair\");\r\n        offRampPair = ammAddress;\r\n    }\r\n\r\n    function freezeLiquidityHub() external onlyOwner {\r\n        require(!liquidityHubFrozen);\r\n        liquidityHubFrozen = true;\r\n    }\r\n\r\n    function freezeDiscountAuthority() external onlyOwner {\r\n        require(!discountAuthorityFrozen);\r\n        discountAuthorityFrozen = true;\r\n    }\r\n\r\nThese functions will be passed to DAO governance once the ecosystem stabilizes.\r\n\r\n*/\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor(address owner_) {\r\n        _transferOwnership(owner_);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract ERC20 is IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = msg.sender;\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = msg.sender;\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = msg.sender;\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = msg.sender;\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = msg.sender;\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n    unchecked {\r\n        _approve(owner, spender, currentAllowance - subtractedValue);\r\n    }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n    unchecked {\r\n        _balances[from] = fromBalance - amount;\r\n    }\r\n\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - amount);\r\n        }\r\n        }\r\n    }\r\n}\r\n\r\ninterface ILiquidityHub {\r\n    function processFees(address) external;\r\n}\r\n\r\ninterface IDiscountAuthority {\r\n    function discountRatio(address) external view returns (uint256, uint256);\r\n}\r\n\r\ncontract X7101 is ERC20, Ownable {\r\n\r\n    IDiscountAuthority public discountAuthority;\r\n    ILiquidityHub public liquidityHub;\r\n\r\n    mapping(address => bool) public ammPair;\r\n    address public offRampPair;\r\n\r\n    // max 6% fee\r\n    uint256 public maxFeeNumerator = 600;\r\n\r\n    // 2 % fee\r\n    uint256 public feeNumerator = 200;\r\n    uint256 public feeDenominator = 10000;\r\n\r\n    bool discountAuthorityFrozen;\r\n    bool liquidityHubFrozen;\r\n\r\n    bool transfersEnabled;\r\n\r\n    event LiquidityHubSet(address indexed liquidityHub);\r\n    event DiscountAuthoritySet(address indexed discountAuthority);\r\n    event FeeNumeratorSet(uint256 feeNumerator);\r\n    event AMMSet(address indexed pairAddress, bool isAMM);\r\n    event OffRampPairSet(address indexed offRampPair);\r\n    event LiquidityHubFrozen();\r\n    event DiscountAuthorityFrozen();\r\n\r\n    constructor(\r\n        address discountAuthority_,\r\n        address liquidityHub_\r\n    ) ERC20(\"bX7101\", \"bX7101\") Ownable(msg.sender) {\r\n        discountAuthority = IDiscountAuthority(discountAuthority_);\r\n        liquidityHub = ILiquidityHub(liquidityHub_);\r\n\r\n        _mint(msg.sender, 100000000 * 10**18);\r\n    }\r\n\r\n    function setLiquidityHub(address liquidityHub_) external onlyOwner {\r\n        require(!liquidityHubFrozen);\r\n        liquidityHub = ILiquidityHub(liquidityHub_);\r\n        emit LiquidityHubSet(liquidityHub_);\r\n    }\r\n\r\n    function setDiscountAuthority(address discountAuthority_) external onlyOwner {\r\n        require(!discountAuthorityFrozen);\r\n        discountAuthority = IDiscountAuthority(discountAuthority_);\r\n        emit DiscountAuthoritySet(discountAuthority_);\r\n    }\r\n\r\n    function setFeeNumerator(uint256 feeNumerator_) external onlyOwner {\r\n        require(feeNumerator_ <= maxFeeNumerator);\r\n        feeNumerator = feeNumerator_;\r\n        emit FeeNumeratorSet(feeNumerator_);\r\n    }\r\n\r\n    function setAMM(address ammAddress, bool isAMM) external {\r\n        require(msg.sender == address(liquidityHub) || msg.sender == owner(), \"Only the owner or the liquidity hub may add a new pair\");\r\n        ammPair[ammAddress] = isAMM;\r\n        emit AMMSet(ammAddress, isAMM);\r\n    }\r\n\r\n    function setOffRampPair(address ammAddress) external {\r\n        require(msg.sender == address(liquidityHub) || msg.sender == owner(), \"Only the owner or the liquidity hub may add a new pair\");\r\n        offRampPair = ammAddress;\r\n        emit OffRampPairSet(ammAddress);\r\n    }\r\n\r\n    function freezeLiquidityHub() external onlyOwner {\r\n        require(!liquidityHubFrozen);\r\n        liquidityHubFrozen = true;\r\n        emit LiquidityHubFrozen();\r\n    }\r\n\r\n    function freezeDiscountAuthority() external onlyOwner {\r\n        require(!discountAuthorityFrozen);\r\n        discountAuthorityFrozen = true;\r\n        emit DiscountAuthorityFrozen();\r\n    }\r\n\r\n    function circulatingSupply() external view returns (uint256) {\r\n        return totalSupply() - balanceOf(address(0)) - balanceOf(address(0x000000000000000000000000000000000000dEaD));\r\n    }\r\n\r\n    function enableTrading() external onlyOwner {\r\n        require(!transfersEnabled);\r\n        transfersEnabled = true;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(transfersEnabled || from == owner());\r\n\r\n        uint256 transferAmount = amount;\r\n\r\n        if (\r\n            from == address(liquidityHub)\r\n            || to == address(liquidityHub)\r\n        ) {\r\n            super._transfer(from, to, amount);\r\n            return;\r\n        }\r\n\r\n        if (\r\n            ammPair[to] || ammPair[from]\r\n        ) {\r\n            address effectivePrincipal;\r\n            if (ammPair[to]) {\r\n                effectivePrincipal = from;\r\n            } else {\r\n                effectivePrincipal = to;\r\n            }\r\n\r\n            (uint256 feeModifierNumerator, uint256 feeModifierDenominator) = discountAuthority.discountRatio(effectivePrincipal);\r\n            if (feeModifierNumerator > feeModifierDenominator || feeModifierDenominator == 0) {\r\n                feeModifierNumerator = 1;\r\n                feeModifierDenominator = 1;\r\n            }\r\n\r\n            uint256 feeAmount = amount * feeNumerator * feeModifierNumerator / feeDenominator / feeModifierDenominator;\r\n\r\n            super._transfer(from, address(liquidityHub), feeAmount);\r\n            transferAmount = amount - feeAmount;\r\n        }\r\n\r\n        if (\r\n            to == offRampPair\r\n        ) {\r\n            liquidityHub.processFees(address(this));\r\n        }\r\n\r\n        super._transfer(from, to, transferAmount);\r\n    }\r\n\r\n    function rescueETH() external {\r\n        (bool success,) = payable(address(liquidityHub)).call{value: address(this).balance}(\"\");\r\n        require(success);\r\n    }\r\n\r\n    function rescueTokens(address tokenAddress) external {\r\n        IERC20(tokenAddress).transfer(address(liquidityHub), IERC20(tokenAddress).balanceOf(address(this)));\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"discountAuthority_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityHub_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAMM\",\"type\":\"bool\"}],\"name\":\"AMMSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DiscountAuthorityFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"discountAuthority\",\"type\":\"address\"}],\"name\":\"DiscountAuthoritySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeNumerator\",\"type\":\"uint256\"}],\"name\":\"FeeNumeratorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LiquidityHubFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityHub\",\"type\":\"address\"}],\"name\":\"LiquidityHubSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"offRampPair\",\"type\":\"address\"}],\"name\":\"OffRampPairSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ammPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discountAuthority\",\"outputs\":[{\"internalType\":\"contract IDiscountAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freezeDiscountAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freezeLiquidityHub\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityHub\",\"outputs\":[{\"internalType\":\"contract ILiquidityHub\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFeeNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offRampPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ammAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isAMM\",\"type\":\"bool\"}],\"name\":\"setAMM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"discountAuthority_\",\"type\":\"address\"}],\"name\":\"setDiscountAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeNumerator_\",\"type\":\"uint256\"}],\"name\":\"setFeeNumerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityHub_\",\"type\":\"address\"}],\"name\":\"setLiquidityHub\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ammAddress\",\"type\":\"address\"}],\"name\":\"setOffRampPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "X7101", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f504f0ffad5f2c8e006697b7443439bf6125842d767b942818b8b86bab6c8388"}