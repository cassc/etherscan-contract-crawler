{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/BLBSwap/BLBSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./PancakeSwapper.sol\\\";\\n// import \\\"./PriceFeed.sol\\\";\\n\\ncontract BLBSwap is Ownable, PancakeSwapper {\\n\\n    constructor(\\n        uint256 _BLBsPerUSD,\\n        address _BLB,\\n        address _BUSD\\n    ) PancakeSwapper(_BLB, _BUSD) {\\n        setBLBsPerUSD(_BLBsPerUSD); \\n    }\\n\\n    event Swap(\\n        address indexed userAddr,\\n        string indexed tokenIn,\\n        string indexed tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut \\n    );\\n\\n    function purchaseBLB(\\n        uint256 amountBUSD\\n    ) external payable returns(uint256 amountBLB) {\\n\\n        address purchaser = msg.sender;\\n        uint256 amountBNB = msg.value;\\n\\n        if(onPancake) {\\n            amountBLB = _purchaseBLB(purchaser, amountBUSD, amountBNB);\\n        } else {\\n            if(amountBUSD == 0) {\\n                amountBLB = BLBsForBNB(amountBNB);\\n                require(blbBalance() >= amountBLB, \\\"insufficient BLB to pay\\\");\\n                TransferHelper.safeTransfer(BLB, purchaser, amountBLB);\\n                emit Swap(purchaser, \\\"BNB\\\", \\\"BLB\\\", amountBNB, amountBLB);\\n            } else {\\n                require(amountBNB == 0, \\\"not allowed to purchase in BUSD and BNB in sameTime\\\");\\n                amountBLB = BLBsForUSD(amountBUSD);\\n                require(blbBalance() >= amountBLB, \\\"insufficient BLB to pay\\\");\\n                TransferHelper.safeTransferFrom(BUSD, purchaser, address(this), amountBUSD);\\n                TransferHelper.safeTransfer(BLB, purchaser, amountBLB);\\n                emit Swap(purchaser, \\\"BUSD\\\", \\\"BLB\\\", amountBUSD, amountBLB);\\n            }\\n        }\\n    }\\n\\n    function sellBLB(\\n        uint256 amountBLB,\\n        bool toBUSD\\n    ) public returns(uint256 amountOut) {\\n\\n        address seller = msg.sender;\\n        TransferHelper.safeTransferFrom(BLB, seller, address(this), amountBLB);\\n\\n        if(onPancake) {\\n            _sellBLB(seller, amountBLB, toBUSD);\\n        } else {\\n            if(toBUSD) {\\n                amountOut = USDsForBLB(amountBLB);\\n                require(busdBalance() >= amountOut, \\\"insufficient BUSD to pay\\\");\\n                TransferHelper.safeTransfer(BUSD, seller, amountOut);\\n                emit Swap(seller, \\\"BLB\\\", \\\"BUSD\\\", amountBLB, amountOut);\\n            } else {\\n                amountOut = BNBsForBLB(amountBLB);\\n                require(bnbBalance() >= amountOut, \\\"insufficient BNB to pay\\\");\\n                payable(seller).transfer(amountOut);\\n                emit Swap(seller, \\\"BLB\\\", \\\"BNB\\\", amountBLB, amountOut);\\n            }\\n        }\\n    }\\n\\n    function BLBsForUSD(uint256 amountBUSD) public view returns(uint256) {\\n        if(onPancake) {\\n            return _BLBsForUSD(amountBUSD);\\n        } else {\\n            return BLBsPerUSD * amountBUSD / 10 ** 18;\\n        }\\n    }\\n\\n    function BLBsForBNB(uint256 amountBNB) public view returns(uint256) {\\n        if(onPancake) {\\n            return _BLBsForBNB(amountBNB);\\n        } else {\\n            return BLBsForUSD(amountBNB * BNB_BUSD() / 10 ** 18);\\n        }\\n    }\\n\\n    function USDsForBLB(uint256 amountBLB) public view returns(uint256) {\\n        if(onPancake) {\\n            return _USDsForBLB(amountBLB);\\n        } else {\\n            return amountBLB * 10 ** 18 / BLBsPerUSD;\\n        }\\n    }\\n\\n    function BNBsForBLB(uint256 amountBLB) public view returns(uint256) {\\n        if(onPancake) {\\n            return _BNBsForBLB(amountBLB);\\n        } else {\\n            return USDsForBLB(amountBLB) * BUSD_BNB() / 10 ** 18;\\n        }\\n    }\\n\\n// administration ---------------------------------------------------------------------------------------\\n\\n    uint256 public BLBsPerUSD;  //how much BLBs is earned for 1 USD.\\n    function setBLBsPerUSD(\\n        uint256 BLBsAmount\\n    ) public onlyOwner {\\n        BLBsPerUSD = BLBsAmount;\\n    }\\n\\n    function blbBalance() public view returns(uint256) {\\n        return IERC20(BLB).balanceOf(address(this));\\n    }\\n    function busdBalance() public view returns(uint256) {\\n        return IERC20(BUSD).balanceOf(address(this));\\n    }\\n    function bnbBalance() public view returns(uint256) {\\n        return address(this).balance;\\n    }\\n\\n    function withdrawBLB(uint256 amount) public onlyOwner {\\n        IERC20(BLB).transfer(owner(), amount);\\n    }\\n    function withdrawBUSD(uint256 amount) public onlyOwner {\\n        IERC20(BUSD).transfer(owner(), amount);\\n    }\\n    function withdrawBNB(uint256 amount) public onlyOwner {\\n        payable(owner()).transfer(amount);\\n    }\\n\\n    bool public onPancake;\\n    function setOnPancake() public onlyOwner {\\n        onPancake = onPancake ? false : true;\\n    }\\n    \\n\\n// // testnet ------------------------------------------------------------------------------------------------------\\n\\n//     function BUSD_BNB() public override view returns(uint256) {\\n//         uint256 chainID;\\n//         assembly{\\n//             chainID := chainid()\\n//         }\\n//         if(chainID == 97) {\\n//             return Test_USD_BNB();\\n//         }\\n//         return super.BUSD_BNB();\\n//     }\\n\\n//     function BNB_BUSD() public override view returns(uint256) {\\n//         uint256 chainID;\\n//         assembly{\\n//             chainID := chainid()\\n//         }\\n//         if(chainID == 97) {\\n//             return Test_BNB_USD();\\n//         }\\n//         return super.BNB_BUSD();\\n//     }\\n}\"\r\n    },\r\n    \"contracts/BLBSwap/PancakeSwapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@pancakeswap/v3-core/contracts/interfaces/callback/IPancakeV3SwapCallback.sol';\\nimport '@pancakeswap/v3-periphery/contracts/libraries/TransferHelper.sol';\\n\\ninterface IwERC20 {\\n    function deposit() external payable;\\n    function withdraw(uint256 amount) external;\\n    function balanceOf(address _owner) external view returns(uint256);\\n}\\n\\ninterface IV3Factory {\\n    function getPool(address token0, address token1, uint24 fee) external view returns(address);\\n}\\n\\ninterface IV3PairPool {\\n    struct Slot0 {\\n        // the current price\\n        uint160 sqrtPriceX96;\\n        // the current tick\\n        int24 tick;\\n        // the most-recently updated index of the observations array\\n        uint16 observationIndex;\\n        // the current maximum number of observations that are being stored\\n        uint16 observationCardinality;\\n        // the next maximum number of observations to store, triggered in observations.write\\n        uint16 observationCardinalityNext;\\n        // the current protocol fee for token0 and token1,\\n        // 2 uint32 values store in a uint32 variable (fee/PROTOCOL_FEE_DENOMINATOR)\\n        uint32 feeProtocol;\\n        // whether the pool is locked\\n        bool unlocked;\\n    }\\n    function slot0() external view returns(Slot0 memory);\\n    function token0() external view returns(address);\\n    function token1() external view returns(address);\\n}\\n\\ninterface IV3SwapRouter is IPancakeV3SwapCallback {\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\\nlibrary pricer {\\n    \\n    function getPrice0(uint256 sqrtPriceX96) internal pure returns(uint256) {\\n        uint256 denom = ((2 ** 96) ** 2);\\n        denom /= 10 ** 18;\\n        return (sqrtPriceX96 ** 2) / denom;\\n    }\\n\\n    function getPrice1(uint256 sqrtPriceX96) internal pure returns(uint256) {\\n        uint256 denom = (sqrtPriceX96 ** 2) / 10 ** 18;\\n        return ((2 ** 96) ** 2) / denom;\\n    }\\n}\\n\\ncontract PancakeSwapper {\\n    using pricer for uint160;\\n\\n    IV3SwapRouter internal constant swapRouter = IV3SwapRouter(0x13f4EA83D0bd40E75C8222255bc855a974568Dd4);\\n    IV3Factory internal constant factory = IV3Factory(0x0BFbCF9fa4f9C56B0F40a671Ad40E0805A091865);\\n    address internal constant wBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\n    uint24 internal constant poolFee = 500;\\n    address public BUSD;\\n    address public BLB;\\n\\n    constructor(address _BLB, address _BUSD) {\\n        BLB = _BLB;\\n        BUSD = _BUSD;\\n    }\\n\\n    function _BLBsForBNB(uint256 amountBNB) internal view returns(uint256) {\\n        return amountBNB * BNB_BLB() / 10 ** 18;\\n    }\\n    function _BLBsForUSD(uint256 amountBUSD) internal view returns(uint256) {\\n        return amountBUSD * BUSD_BLB() / 10 ** 18;\\n    }\\n    function _BNBsForBLB(uint256 amountBLB) internal view returns(uint256) {\\n        return amountBLB * BLB_BNB() / 10 ** 18;\\n    }\\n    function _USDsForBLB(uint256 amountBLB) internal view returns(uint256) {\\n        return amountBLB * BLB_BUSD() / 10 ** 18;\\n    }\\n\\n    function BUSD_BNB() public virtual view returns(uint256) {\\n        IV3PairPool pool = IV3PairPool(factory.getPool(wBNB, BUSD, poolFee));\\n        (uint160 sqrtPriceX96) = pool.slot0().sqrtPriceX96;\\n        return pool.token0() == wBNB ? sqrtPriceX96.getPrice1() : sqrtPriceX96.getPrice0();\\n    }\\n\\n    function BNB_BUSD() public virtual view returns(uint256) {\\n        IV3PairPool pool = IV3PairPool(factory.getPool(wBNB, BUSD, poolFee));\\n        (uint160 sqrtPriceX96) = pool.slot0().sqrtPriceX96;\\n        return pool.token0() == wBNB ? sqrtPriceX96.getPrice0() : sqrtPriceX96.getPrice1();\\n    }\\n\\n    function BLB_BNB() public virtual view returns(uint256) {\\n        IV3PairPool pool = IV3PairPool(factory.getPool(BLB, wBNB, poolFee));\\n        (uint160 sqrtPriceX96) = pool.slot0().sqrtPriceX96;\\n        return pool.token0() == BLB ? sqrtPriceX96.getPrice0() : sqrtPriceX96.getPrice1();\\n    }\\n\\n    function BNB_BLB() public virtual view returns(uint256) {\\n        IV3PairPool pool = IV3PairPool(factory.getPool(BLB, wBNB, poolFee));\\n        (uint160 sqrtPriceX96) = pool.slot0().sqrtPriceX96;\\n        return pool.token0() == BLB ? sqrtPriceX96.getPrice1() : sqrtPriceX96.getPrice0();\\n    }\\n\\n    function BLB_BUSD() public virtual view returns(uint256) {\\n        return BLB_BNB() * BNB_BUSD() / 10 ** 18;\\n    }\\n\\n    function BUSD_BLB() public virtual view returns(uint256) {\\n        return BUSD_BNB() * BNB_BLB() / 10 ** 18;\\n    }\\n\\n\\n    function _purchaseBLB(\\n        address userAddr,\\n        uint256 amountBUSD,\\n        uint256 amountBNB\\n    ) internal returns(uint256 amountBLB) {\\n\\n\\n        IV3SwapRouter.ExactInputParams memory params;\\n\\n        if(amountBUSD == 0) {\\n            IwERC20 wbnb = IwERC20(wBNB);\\n            wbnb.deposit{value: amountBNB}();\\n\\n            TransferHelper.safeApprove(wBNB, address(swapRouter), amountBNB);\\n            params = IV3SwapRouter.ExactInputParams({\\n                path: abi.encodePacked(wBNB, poolFee, BLB),\\n                recipient: userAddr,\\n                amountIn: amountBNB,\\n                amountOutMinimum: 0\\n            });\\n\\n        } else {\\n            require(amountBNB == 0, \\\"not allowed to purchase in BUSD and BNB in sameTime\\\");\\n            TransferHelper.safeTransferFrom(BUSD, userAddr, address(this), amountBUSD);\\n            TransferHelper.safeApprove(BUSD, address(swapRouter), amountBUSD);\\n            \\n            params = IV3SwapRouter.ExactInputParams({\\n                path: abi.encodePacked(BUSD, poolFee, wBNB, poolFee, BLB),\\n                recipient: userAddr,\\n                amountIn: amountBUSD,\\n                amountOutMinimum: 0\\n            });\\n        }\\n        \\n        amountBLB = swapRouter.exactInput(params);\\n    }\\n\\n    function _sellBLB(\\n        address userAddr,\\n        uint256 amountBLB,\\n        bool toBUSD\\n    ) internal returns(uint256 amountOut) {\\n\\n        TransferHelper.safeTransferFrom(BLB, userAddr, address(this), amountBLB);\\n        TransferHelper.safeApprove(BLB, address(swapRouter), amountBLB);\\n\\n        if(toBUSD) {\\n            IV3SwapRouter.ExactInputParams memory params = IV3SwapRouter.ExactInputParams({\\n                path: abi.encodePacked(BLB, poolFee, wBNB, poolFee, BUSD),\\n                recipient: userAddr,\\n                amountIn: amountBLB,\\n                amountOutMinimum: 0\\n            });\\n\\n            amountOut = swapRouter.exactInput(params);\\n\\n        } else {\\n\\n            IV3SwapRouter.ExactInputParams memory params = IV3SwapRouter.ExactInputParams({\\n                path: abi.encodePacked(BLB, poolFee, wBNB),\\n                recipient: address(this),\\n                amountIn: amountBLB,\\n                amountOutMinimum: 0\\n            });\\n\\n            amountOut = swapRouter.exactInput(params);\\n            IwERC20 wbnb = IwERC20(wBNB);\\n            wbnb.withdraw(amountOut);\\n            payable(userAddr).transfer(amountOut);\\n        }\\n    }\\n\\n    receive() external payable{}\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@pancakeswap/v3-core/contracts/interfaces/callback/IPancakeV3SwapCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IPancakeV3PoolActions#swap\\n/// @notice Any contract that calls IPancakeV3PoolActions#swap must implement this interface\\ninterface IPancakeV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IPancakeV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a PancakeV3Pool deployed by the canonical PancakeV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IPancakeV3PoolActions#swap call\\n    function pancakeV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@pancakeswap/v3-periphery/contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_BLBsPerUSD\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_BLB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_BUSD\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"tokenIn\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"tokenOut\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BLB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BLB_BNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BLB_BUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountBNB\",\"type\":\"uint256\"}],\"name\":\"BLBsForBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountBUSD\",\"type\":\"uint256\"}],\"name\":\"BLBsForUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BLBsPerUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BNB_BLB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BNB_BUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountBLB\",\"type\":\"uint256\"}],\"name\":\"BNBsForBLB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BUSD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BUSD_BLB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BUSD_BNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountBLB\",\"type\":\"uint256\"}],\"name\":\"USDsForBLB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blbBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bnbBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busdBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onPancake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountBUSD\",\"type\":\"uint256\"}],\"name\":\"purchaseBLB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountBLB\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountBLB\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"toBUSD\",\"type\":\"bool\"}],\"name\":\"sellBLB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"BLBsAmount\",\"type\":\"uint256\"}],\"name\":\"setBLBsPerUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setOnPancake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBLB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BLBSwap", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000056bc75e2d6310000000000000000000000000000013d67fd10bdbe8301e978e4adcbd2c0ad26f754900000000000000000000000055d398326f99059ff775485246999027b3197955", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}