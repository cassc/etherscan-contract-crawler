{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"Miner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/IClimb.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Router02.sol\\\";\\n\\ncontract BinanceWealthMatrix is Ownable, ReentrancyGuard {\\n    struct Mining {\\n        uint256 miners;\\n        uint256 totalInvested; // This is in CLIMB\\n        uint256 totalRedeemed; // This is in CLIMB\\n        uint256 eggsToClaim;\\n        uint256 lastInteraction;\\n        address referrer;\\n    }\\n    mapping(address => Mining) public user;\\n\\n    uint256 public constant EGGS_TO_HATCH_1MINERS = 2592000;\\n    uint256 public constant MAX_VAULT_TIME = 12 hours;\\n\\n    uint256 public constant PSN = 10000;\\n    uint256 public constant PSNH = 5000;\\n    uint256 public marketEggs;\\n\\n    address public feeReceiver;\\n    address public climb;\\n\\n    IOwnableClimb public immutable CLIMB;\\n    bool public initialized = false;\\n\\n    constructor(address _climbToken, address _receiver) {\\n        CLIMB = IOwnableClimb(_climbToken);\\n        feeReceiver = _receiver;\\n    }\\n\\n    // Invest with USDT\\n    function investInMatrix(\\n        address ref,\\n        address _stable,\\n        uint256 stableAmount\\n    ) public nonReentrant {\\n        require(initialized, \\\"Matrix is not initialized\\\");\\n        IERC20 stable = IERC20(_stable);\\n\\n        uint256 previousBalance = CLIMB.balanceOf(address(this));\\n        // We transfer _stable straight to CLIMB for a single transfer TX\\n        stable.transferFrom(msg.sender, address(CLIMB), stableAmount);\\n        uint amount = CLIMB.buyFor(address(this), stableAmount, _stable);\\n        // ----------------------------\\n        // ----------------------------\\n        uint256 eggsBought = calculateEggBuy(amount, previousBalance);\\n\\n        Mining storage miner = user[msg.sender];\\n\\n        eggsBought -= devFee(eggsBought);\\n\\n        // send referral eggs before adding in claimable eggs\\n        _checkAndSetRef(ref, miner);\\n        _sendRefAmount(miner.referrer, eggsBought / 10);\\n\\n        eggsBought += miner.eggsToClaim;\\n        miner.eggsToClaim = 0;\\n\\n        uint256 newMiners = eggsBought / EGGS_TO_HATCH_1MINERS;\\n        miner.miners += newMiners;\\n\\n        miner.totalInvested += amount;\\n        miner.lastInteraction = block.timestamp;\\n\\n        // boost market to nerf miners hoarding (MINER)\\n        marketEggs += eggsBought / 5;\\n        emit Invest(msg.sender, amount);\\n    }\\n\\n    function _checkAndSetRef(address _ref, Mining storage miner) private {\\n        if (_ref == msg.sender) {\\n            _ref = address(0);\\n        }\\n        if (miner.referrer == address(0) && _ref != address(0)) {\\n            miner.referrer = _ref;\\n        }\\n    }\\n\\n    function _sendRefAmount(address _ref, uint amount) private {\\n        if (_ref != address(0)) {\\n            user[_ref].eggsToClaim += amount;\\n        }\\n    }\\n\\n    // Reinvest in Matrix\\n    function reinvestInMatrix(address ref) public nonReentrant {\\n        require(initialized, \\\"Matrix is not initialized\\\");\\n        Mining storage miner = user[msg.sender];\\n        _checkAndSetRef(ref, miner);\\n\\n        uint256 eggsUsed = getEggs(msg.sender);\\n        uint256 eggsValue = calculateEggSell(eggsUsed);\\n        uint256 fee = devFee(eggsValue);\\n        eggsValue -= fee;\\n\\n        uint256 newMiners = (eggsUsed - devFee(eggsUsed)) /\\n            EGGS_TO_HATCH_1MINERS;\\n\\n        // boost market to nerf miners hoarding\\n        eggsUsed /= 5; // 20% of total eggs\\n        marketEggs += eggsUsed;\\n        // send Referral eggs\\n        eggsUsed /= 2; // 10% of total eggs\\n        _sendRefAmount(miner.referrer, eggsUsed);\\n\\n        miner.miners += newMiners;\\n        miner.eggsToClaim = 0;\\n        miner.totalInvested += eggsValue;\\n        miner.lastInteraction = block.timestamp;\\n\\n        // handle the fee\\n        uint256 dFee = fee / 5;\\n        fee -= dFee;\\n\\n        CLIMB.burn(fee);\\n        CLIMB.transfer(feeReceiver, dFee);\\n        // boost market to nerf miners hoarding\\n        // Actual eggs value reinvested\\n        emit Reinvest(msg.sender, eggsValue);\\n    }\\n\\n    // Withdraw Stable\\n    function matrixRedeem() public nonReentrant {\\n        require(initialized, \\\"Matrix is not initialized\\\");\\n        Mining storage miner = user[msg.sender];\\n        uint256 hasEggs = getEggs(msg.sender);\\n        uint256 eggsValue = calculateEggSell(hasEggs);\\n        miner.eggsToClaim = 0;\\n        miner.lastInteraction = block.timestamp;\\n        miner.totalRedeemed += eggsValue;\\n        marketEggs += hasEggs;\\n        uint currentClimbPrice = CLIMB.calculatePrice();\\n        uint stableAdjustable = (eggsValue * currentClimbPrice) / 1 ether;\\n        eggsValue = _sellEggs(stableAdjustable, eggsValue, msg.sender);\\n        emit Redeem(msg.sender, eggsValue);\\n    }\\n\\n    function _sellEggs(\\n        uint stableGoal,\\n        uint climbToSell,\\n        address recipient\\n    ) private returns (uint valueOfSell) {\\n        address[] memory allStables = CLIMB.allStables();\\n        for (uint i = 0; i < allStables.length; i++) {\\n            (uint balance, , uint8 _precision, , ) = CLIMB.stables(\\n                allStables[i]\\n            );\\n            balance = (balance * 1 ether) / (10 ** _precision);\\n            if (balance >= stableGoal) {\\n                return CLIMB.sell(recipient, climbToSell, allStables[i]);\\n            } else {\\n                uint climbAmount = (climbToSell * balance) / stableGoal;\\n                stableGoal -= balance;\\n                climbToSell -= climbAmount;\\n                if (climbAmount > 0)\\n                    valueOfSell += CLIMB.sell(\\n                        recipient,\\n                        climbAmount,\\n                        allStables[i]\\n                    );\\n            }\\n        }\\n    }\\n\\n    //magic trade balancing algorithm\\n    function calculateTrade(\\n        uint256 rt,\\n        uint256 rs,\\n        uint256 bs\\n    ) public pure returns (uint256) {\\n        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\\n        return (PSN * bs) / (PSNH + ((PSN * rs + PSNH * rt) / rt));\\n    }\\n\\n    function calculateEggSell(uint256 eggs) public view returns (uint256) {\\n        return calculateTrade(eggs, marketEggs, CLIMB.balanceOf(address(this)));\\n    }\\n\\n    function calculateEggBuy(\\n        uint256 amount,\\n        uint256 contractBalance\\n    ) public view returns (uint256) {\\n        return calculateTrade(amount, contractBalance, marketEggs);\\n    }\\n\\n    function calculateEggBuySimple(\\n        uint256 amount\\n    ) public view returns (uint256) {\\n        return calculateEggBuy(amount, CLIMB.balanceOf(address(this)));\\n    }\\n\\n    function devFee(uint256 amount) public pure returns (uint256) {\\n        return (amount * 5) / 100;\\n    }\\n\\n    function initializeMatrix() public onlyOwner {\\n        require(marketEggs == 0, \\\"Market eggs not zero\\\");\\n        initialized = true;\\n        marketEggs = 25920000000;\\n        emit Initialize(block.timestamp);\\n    }\\n\\n    function getBalance() public view returns (uint256) {\\n        return CLIMB.balanceOf(address(this));\\n    }\\n\\n    function getMiners(address _user) public view returns (uint256) {\\n        return user[_user].miners;\\n    }\\n\\n    function getEggs(address _user) public view returns (uint256) {\\n        return user[_user].eggsToClaim + getEggsSinceLastHatch(_user);\\n    }\\n\\n    function getEggsSinceLastHatch(address adr) public view returns (uint256) {\\n        Mining storage currentUser = user[adr];\\n        uint256 secondsPassed = min(\\n            MAX_VAULT_TIME,\\n            (block.timestamp - currentUser.lastInteraction)\\n        );\\n        return secondsPassed * currentUser.miners;\\n    }\\n\\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    event Initialize(uint256 timeStamp);\\n    event Invest(address indexed user, uint256 climbAmount);\\n    event Redeem(address indexed user, uint256 climbAmount);\\n    event Reinvest(address indexed user, uint256 climbAmount);\\n}\\n\"\r\n    },\r\n    \".cache/OpenZeppelin/v4.8.2/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \".cache/OpenZeppelin/v4.8.2/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \".cache/OpenZeppelin/v4.8.2/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    )\\n        external\\n        payable\\n        returns (uint amountToken, uint amountETH, uint liquidity);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint[] memory amounts);\\n\\n    function quote(\\n        uint amountA,\\n        uint reserveA,\\n        uint reserveB\\n    ) external pure returns (uint amountB);\\n\\n    function getAmountOut(\\n        uint amountIn,\\n        uint reserveIn,\\n        uint reserveOut\\n    ) external pure returns (uint amountOut);\\n\\n    function getAmountIn(\\n        uint amountOut,\\n        uint reserveIn,\\n        uint reserveOut\\n    ) external pure returns (uint amountIn);\\n\\n    function getAmountsOut(\\n        uint amountIn,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getAmountsIn(\\n        uint amountOut,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n}\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \".cache/OpenZeppelin/v4.8.2/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"interfaces/IClimb.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IClimb is IERC20 {\\n    function burn(uint256 amount) external;\\n\\n    function sell(\\n        uint256 amount,\\n        address stable\\n    ) external returns (uint stableReceived);\\n\\n    function sell(\\n        address recipient,\\n        uint256 amount,\\n        address stable\\n    ) external returns (uint stableReceived);\\n\\n    // These functions are used to buy CLIMB with STABLE, STABLE will need to be approved for transfer in for this contract.\\n    function buy(uint256 numTokens, address stable) external returns (uint256);\\n\\n    function buy(\\n        address recipient,\\n        uint256 numTokens,\\n        address stable\\n    ) external returns (uint256);\\n\\n    /// @notice although this function has the same parameters as the BUY functions, only Matrix contracts can call this function\\n    /// @dev the Matrix contract MUST send STABLE tokens to this contract before calling this function. Without this function, the Matrix contract would have to receive STABLE tokens from the user, then approve STABLE tokens to the contract to buy CLIMB token and then CLIMB would need to transfer STABLE back to themselves. This function saves gas and time.\\n    function buyFor(\\n        address recipient,\\n        uint256 numTokens,\\n        address stable\\n    ) external returns (uint256);\\n\\n    function eraseHoldings(uint256 nHoldings) external;\\n\\n    function volumeFor(address wallet) external view returns (uint256);\\n\\n    function calculatePrice() external view returns (uint256);\\n\\n    function stables(\\n        address _stable\\n    )\\n        external\\n        view\\n        returns (\\n            uint balance,\\n            uint8 index,\\n            uint8 decimals,\\n            bool accepted,\\n            bool setup\\n        );\\n\\n    function allStables() external view returns (address[] memory);\\n\\n    ///@notice this function is called by OWNER only and is used to exchange the complete balance in STABLE1 for STABLE2\\n    function exchangeTokens(\\n        address stable1,\\n        address stable2,\\n        address _router\\n    ) external;\\n\\n    ///////////////////////////////////\\n    //////        EVENTS        ///////\\n    ///////////////////////////////////\\n\\n    event UpdateShares(uint256 updatedDevShare, uint256 updatedLiquidityShare);\\n    event UpdateFees(\\n        uint256 updatedSellFee,\\n        uint256 updatedMintFee,\\n        uint256 updatedTransferFee\\n    );\\n    event UpdateDevAddress(address updatedDev);\\n    event SetMatrixContract(address newMatrix, bool exempt);\\n    event PriceChange(\\n        uint256 previousPrice,\\n        uint256 currentPrice,\\n        uint256 totalSupply\\n    );\\n    event ErasedHoldings(address who, uint256 amountTokensErased);\\n    event GarbageCollected(uint256 amountTokensErased);\\n    event UpdateTokenSlippage(uint256 newSlippage);\\n    event TransferOwnership(address newOwner);\\n    event TokenStaked(uint256 assetsReceived, address recipient);\\n    event SetFeeExemption(address Contract, bool exempt);\\n    event TokenActivated(uint256 totalSupply, uint256 price, uint256 timestamp);\\n    event TokenSold(\\n        uint256 amountCLIMB,\\n        uint256 assetsRedeemed,\\n        address recipient\\n    );\\n    event TokenPurchased(uint256 assetsReceived, address recipient);\\n    event SetStableToken(address stable, bool exempt);\\n    event ExchangeToken(\\n        address _from,\\n        address _to,\\n        uint256 amountFROM,\\n        uint256 amountTO\\n    );\\n}\\n\\ninterface IOwnableClimb is IClimb {\\n    function owner() external returns (address);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"remappings\": [\r\n      \"@openzeppelin/contracts=.cache/OpenZeppelin/v4.8.2\"\r\n    ]\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_climbToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"climbAmount\",\"type\":\"uint256\"}],\"name\":\"Invest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"climbAmount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"climbAmount\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLIMB\",\"outputs\":[{\"internalType\":\"contract IOwnableClimb\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EGGS_TO_HATCH_1MINERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_VAULT_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PSN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PSNH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateEggBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateEggBuySimple\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eggs\",\"type\":\"uint256\"}],\"name\":\"calculateEggSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bs\",\"type\":\"uint256\"}],\"name\":\"calculateTrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"climb\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"devFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getEggs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getEggsSinceLastHatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getMiners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeMatrix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stableAmount\",\"type\":\"uint256\"}],\"name\":\"investInMatrix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketEggs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"matrixRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"reinvestInMatrix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"user\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"miners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalInvested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRedeemed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eggsToClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastInteraction\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BinanceWealthMatrix", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000e1a5add8401dfb161adb35d120cf15dbb81f0b1d0000000000000000000000001d225c878f53f6e4846d29c37f4a4f7d69c3cdac", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}