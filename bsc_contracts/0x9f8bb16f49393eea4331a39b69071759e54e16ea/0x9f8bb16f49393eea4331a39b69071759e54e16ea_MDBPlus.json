{"SourceCode": "{\"IERC20.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface IERC20 {\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    \\r\\n    function symbol() external view returns(string memory);\\r\\n    \\r\\n    function name() external view returns(string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    \\r\\n    /**\\r\\n     * @dev Returns the number of decimal places\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"},\"IUniswapV2Router02.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.4;\\r\\n\\r\\n\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n    external\\r\\n    payable\\r\\n    returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n    external\\r\\n    returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n    external\\r\\n    returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n    external\\r\\n    payable\\r\\n    returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n    function allPairsLength() external view returns (uint);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n    function setFeeToSetter(address) external;\\r\\n}\"},\"MDBPlus.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./IUniswapV2Router02.sol\\\";\\r\\nimport \\\"./ReentrantGuard.sol\\\";\\r\\n\\r\\ninterface IXUSD {\\r\\n    function xSwapRouter() external view returns (address);\\r\\n}\\r\\n\\r\\ninterface StableSwapRouter {\\r\\n    function exchange(address source, address tokenIn, address tokenOut, uint256 amountTokenIn, address destination) external;\\r\\n}\\r\\n\\r\\ninterface XUSDRoyalty {\\r\\n    function getFee() external view returns (uint256);\\r\\n    function getFeeRecipient() external view returns (address);\\r\\n}\\r\\n\\r\\n/**\\r\\n *  Contract: MDB+ Powered by XUSD\\r\\n *  Appreciating Stable Coin Inheriting The IP Of XUSD by xSurge\\r\\n *  Visit MDB.fund and xsurge.net to learn more about appreciating stable coins\\r\\n */\\r\\ncontract MDBPlus is IERC20, Ownable, ReentrancyGuard {\\r\\n    \\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // token data\\r\\n    string private constant _name = \\\"MDB+\\\";\\r\\n    string private constant _symbol = \\\"MDB+\\\";\\r\\n    uint8 private constant _decimals = 18;\\r\\n    uint256 private constant precision = 10**18;\\r\\n    \\r\\n    // 1 initial supply\\r\\n    uint256 private _totalSupply = 10**18; \\r\\n    \\r\\n    // balances\\r\\n    mapping (address =\\u003e uint256) private _balances;\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n    // address -\\u003e Fee Exemption\\r\\n    mapping ( address =\\u003e bool ) public isTransferFeeExempt;\\r\\n\\r\\n    // Token Activation\\r\\n    mapping ( address =\\u003e bool ) public canTransactPreLaunch;\\r\\n    bool public tokenActivated;\\r\\n\\r\\n    // Max Holdings Exempt\\r\\n    mapping ( address =\\u003e bool ) public max_holdings_exempt;\\r\\n\\r\\n    // Dead Wallet\\r\\n    address private constant DEAD = 0x000000000000000000000000000000000000dEaD;\\r\\n\\r\\n    // PCS Router\\r\\n    IUniswapV2Router02 private router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\r\\n\\r\\n    // XUSD Token\\r\\n    address public constant XUSD = 0x324E8E649A6A3dF817F97CdDBED2b746b62553dD;\\r\\n\\r\\n    // Royalty Data Fetcher\\r\\n    XUSDRoyalty private constant royaltyTracker = XUSDRoyalty(0x4b4e239342E0BEf29FccbFe662Dd30029f21F7fF);\\r\\n\\r\\n    // Swap Path From BNB -\\u003e BUSD\\r\\n    address[] path;\\r\\n\\r\\n    // Fees\\r\\n    uint256 public mintFee        = 99250;            // 0.75% mint fee\\r\\n    uint256 public sellFee        = 99750;            // 0.25% redeem fee \\r\\n    uint256 public transferFee    = 99750;            // 0.25% transfer fee\\r\\n    uint256 public stableSwapFee  = 99950;            // 0.05% stable swap fee\\r\\n    uint256 private constant feeDenominator = 10**5;\\r\\n\\r\\n    // Maximum Holdings\\r\\n    uint256 public max_holdings = 50_000 * 10**18;\\r\\n    uint256 public constant min_max_holdings = 20_000 * 10**18;\\r\\n    \\r\\n    // Underlying Asset Is BUSD\\r\\n    IERC20 public constant underlying = IERC20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);\\r\\n\\r\\n    // initialize some stuff\\r\\n    constructor() {\\r\\n\\r\\n        // Fee Exempt PCS Router And Creator For Initial Distribution\\r\\n        isTransferFeeExempt[address(router)] = true;\\r\\n\\r\\n        // Allows Mint Access Pre Activation\\r\\n        canTransactPreLaunch[msg.sender] = true;\\r\\n        max_holdings_exempt[msg.sender] = true;\\r\\n\\r\\n        // Swap Path For BNB -\\u003e BUSD\\r\\n        path = new address[](2);\\r\\n        path[0] = router.WETH();\\r\\n        path[1] = address(underlying);\\r\\n\\r\\n        // allocate initial 1 token\\r\\n        _balances[msg.sender] = _totalSupply;\\r\\n        emit Transfer(address(0), msg.sender, _totalSupply);\\r\\n    }\\r\\n\\r\\n    /** Returns the total number of tokens in existence */\\r\\n    function totalSupply() external view override returns (uint256) { \\r\\n        return _totalSupply; \\r\\n    }\\r\\n\\r\\n    /** Returns the number of tokens owned by `account` */\\r\\n    function balanceOf(address account) public view override returns (uint256) { \\r\\n        return _balances[account]; \\r\\n    }\\r\\n\\r\\n    /** Returns the number of tokens `spender` can transfer from `holder` */\\r\\n    function allowance(address holder, address spender) external view override returns (uint256) { \\r\\n        return _allowances[holder][spender]; \\r\\n    }\\r\\n    \\r\\n    /** Token Name */\\r\\n    function name() public pure override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /** Token Ticker Symbol */\\r\\n    function symbol() public pure override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /** Tokens decimals */\\r\\n    function decimals() public pure override returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    /** Approves `spender` to transfer `amount` tokens from caller */\\r\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\r\\n        _allowances[msg.sender][spender] = amount;\\r\\n        emit Approval(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n  \\r\\n    /** Transfer Function */\\r\\n    function transfer(address recipient, uint256 amount) external override nonReentrant returns (bool) {\\r\\n        if (recipient == msg.sender) {\\r\\n            _sell(msg.sender, amount, msg.sender);\\r\\n            return true;\\r\\n        } else {\\r\\n            return _transferFrom(msg.sender, recipient, amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /** Transfer Function */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external override nonReentrant returns (bool) {\\r\\n        _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \\u0027Insufficient Allowance\\u0027);\\r\\n        return _transferFrom(sender, recipient, amount);\\r\\n    }\\r\\n    \\r\\n    /** Internal Transfer */\\r\\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\\r\\n        // make standard checks\\r\\n        require(recipient != address(0) \\u0026\\u0026 sender != address(0), \\\"Transfer To Zero\\\");\\r\\n        require(amount \\u003e 0, \\\"Transfer Amt Zero\\\");\\r\\n        // track price change\\r\\n        uint256 oldPrice = _calculatePrice();\\r\\n        // amount to give recipient\\r\\n        uint256 tAmount = (isTransferFeeExempt[sender] || isTransferFeeExempt[recipient]) ? amount : amount.mul(transferFee).div(feeDenominator);\\r\\n        // tax taken from transfer\\r\\n        uint256 tax = amount.sub(tAmount);\\r\\n        // subtract from sender\\r\\n        _balances[sender] = _balances[sender].sub(amount, \\\"Insufficient Balance\\\");\\r\\n\\r\\n        // give reduced amount to receiver\\r\\n        _balances[recipient] = _balances[recipient].add(tAmount);\\r\\n\\r\\n        // burn the tax\\r\\n        if (tax \\u003e 0) {\\r\\n            // Take Fee\\r\\n            _takeFee(tax);\\r\\n            _totalSupply = _totalSupply.sub(tax);\\r\\n            emit Transfer(sender, address(0), tax);\\r\\n        }\\r\\n        \\r\\n        // require price rises\\r\\n        _requirePriceRises(oldPrice);\\r\\n\\r\\n        // require maximum holdings is not met\\r\\n        if (!max_holdings_exempt[recipient]) {\\r\\n            require(\\r\\n                getValueOfHoldings(recipient) \\u003c= max_holdings,\\r\\n                \\u0027Value Exceeds Maximum Holdings\\u0027\\r\\n            );\\r\\n        }\\r\\n        \\r\\n        // Transfer Event\\r\\n        emit Transfer(sender, recipient, tAmount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        Mint MDB+ Tokens With The Native Token ( Smart Chain BNB )\\r\\n        This will purchase BUSD with BNB received\\r\\n        It will then mint tokens to `recipient` based on the number of stable coins received\\r\\n        `minOut` should be set to avoid the Transaction being front runned\\r\\n\\r\\n        @param recipient Account to receive minted MDB+ Tokens\\r\\n        @param minOut minimum amount out from BNB -\\u003e BUSD - prevents front run attacks\\r\\n        @return received number of MDB+ tokens received\\r\\n     */\\r\\n    function mintWithNative(address recipient, uint256 minOut) external payable returns (uint256) {\\r\\n        _checkGarbageCollector(address(this));\\r\\n        _checkGarbageCollector(DEAD);\\r\\n        return _mintWithNative(recipient, minOut);\\r\\n    }\\r\\n\\r\\n\\r\\n    /** \\r\\n        Mint MDB+ Tokens For `recipient` By Depositing BUSD Into The Contract\\r\\n            Requirements:\\r\\n                Approval from the BUSD prior to purchase\\r\\n        \\r\\n        @param numTokens number of BUSD tokens to mint MDB+ with\\r\\n        @param recipient Account to receive minted MDB+ tokens\\r\\n        @return tokensMinted number of MDB+ tokens minted\\r\\n    */\\r\\n    function mintWithBacking(uint256 numTokens, address recipient) external nonReentrant returns (uint256) {\\r\\n        _checkGarbageCollector(address(this));\\r\\n        _checkGarbageCollector(DEAD);\\r\\n        return _mintWithBacking(numTokens, recipient);\\r\\n    }\\r\\n\\r\\n    /** \\r\\n        Burns Sender\\u0027s MDB+ Tokens and redeems their value in BUSD\\r\\n        @param tokenAmount Number of MDB+ Tokens To Redeem, Must be greater than 0\\r\\n    */\\r\\n    function sell(uint256 tokenAmount) external nonReentrant returns (uint256) {\\r\\n        return _sell(msg.sender, tokenAmount, msg.sender);\\r\\n    }\\r\\n    \\r\\n    /** \\r\\n        Burns Sender\\u0027s MDB+ Tokens and redeems their value in BUSD for `recipient`\\r\\n        @param tokenAmount Number of MDB+ Tokens To Redeem, Must be greater than 0\\r\\n        @param recipient Recipient Of BUSD transfer, Must not be address(0)\\r\\n    */\\r\\n    function sell(uint256 tokenAmount, address recipient) external nonReentrant returns (uint256) {\\r\\n        return _sell(msg.sender, tokenAmount, recipient);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        Exchanges TokenIn For TokenOut 1:1 So Long As:\\r\\n            - TokenIn  is an approved XUSD stable and not address(0) or tokenOut\\r\\n            - TokenOut is an approved XUSD stable and not address(0) or tokenIn\\r\\n            - TokenIn and TokenOut have the same decimal count\\r\\n\\r\\n        @param tokenIn - Token To Give XUSD in exchange for TokenOut\\r\\n        @param tokenOut - Token To receive from swap\\r\\n        @param tokenInAmount - Amount of `tokenIn` to exchange for tokenOut\\r\\n        @param recipient - Recipient of `tokenOut` tokens\\r\\n     */\\r\\n    function exchange(address tokenIn, address tokenOut, uint256 tokenInAmount, address recipient) external nonReentrant {\\r\\n        require(\\r\\n            tokenIn != address(0) \\u0026\\u0026 \\r\\n            tokenOut != address(0) \\u0026\\u0026 \\r\\n            recipient != address(0) \\u0026\\u0026\\r\\n            tokenIn != tokenOut \\u0026\\u0026\\r\\n            tokenInAmount \\u003e 0,\\r\\n            \\u0027Invalid Params\\u0027\\r\\n        );\\r\\n        // log old price\\r\\n        uint oldPrice = _calculatePrice();\\r\\n        // instantiate xSwap Router\\r\\n        StableSwapRouter swapRouter = StableSwapRouter(IXUSD(XUSD).xSwapRouter());\\r\\n        require(\\r\\n            address(swapRouter) != address(0),\\r\\n            \\u0027Zero Address\\u0027\\r\\n        );\\r\\n        // transfer in tokenIn\\r\\n        uint received = _transferIn(tokenIn, tokenInAmount);\\r\\n        // take fee for contract\\r\\n        uint toSend = received.mul(stableSwapFee).div(feeDenominator);\\r\\n        // exchange tokenIn for tokenOut\\r\\n        swapRouter.exchange(XUSD, tokenIn, tokenOut, toSend, recipient);\\r\\n        // require price did not somehow fall\\r\\n        _requirePriceRises(oldPrice);\\r\\n    }\\r\\n    \\r\\n    /** \\r\\n        Allows A User To Erase Their Holdings From Supply \\r\\n        DOES NOT REDEEM UNDERLYING ASSET FOR USER\\r\\n        @param amount Number of MDB+ Tokens To Burn\\r\\n    */\\r\\n    function burn(uint256 amount) external nonReentrant {\\r\\n        // get balance of caller\\r\\n        uint256 bal = _balances[msg.sender];\\r\\n        require(bal \\u003e= amount \\u0026\\u0026 bal \\u003e 0, \\u0027Zero Holdings\\u0027);\\r\\n        // Track Change In Price\\r\\n        uint256 oldPrice = _calculatePrice();\\r\\n        // take fee\\r\\n        _takeFee(amount);\\r\\n        // burn tokens from sender + supply\\r\\n        _burn(msg.sender, amount);\\r\\n        // require price rises\\r\\n        _requirePriceRises(oldPrice);\\r\\n        // Emit Call\\r\\n        emit Burn(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    ///////////////////////////////////\\r\\n    //////  INTERNAL FUNCTIONS  ///////\\r\\n    ///////////////////////////////////\\r\\n    \\r\\n    /** Purchases MDB+ Token and Deposits Them in Recipient\\u0027s Address */\\r\\n    function _mintWithNative(address recipient, uint256 minOut) internal nonReentrant returns (uint256) {        \\r\\n        require(msg.value \\u003e 0, \\u0027Zero Value\\u0027);\\r\\n        require(recipient != address(0), \\u0027Zero Address\\u0027);\\r\\n        require(\\r\\n            tokenActivated || canTransactPreLaunch[msg.sender],\\r\\n            \\u0027Token Not Activated\\u0027\\r\\n        );\\r\\n        \\r\\n        // calculate price change\\r\\n        uint256 oldPrice = _calculatePrice();\\r\\n        \\r\\n        // previous backing\\r\\n        uint256 previousBacking = underlying.balanceOf(address(this));\\r\\n        \\r\\n        // swap BNB for stable\\r\\n        uint256 received = _purchaseBUSD(minOut);\\r\\n\\r\\n        // if this is the first purchase, use new amount\\r\\n        uint256 relevantBacking = previousBacking == 0 ? underlying.balanceOf(address(this)) : previousBacking;\\r\\n\\r\\n        // mint to recipient\\r\\n        return _mintTo(recipient, received, relevantBacking, oldPrice);\\r\\n    }\\r\\n    \\r\\n    /** Stake Tokens and Deposits MDB+ in Sender\\u0027s Address, Must Have Prior Approval For BUSD */\\r\\n    function _mintWithBacking(uint256 numBUSD, address recipient) internal returns (uint256) {\\r\\n        require(\\r\\n            tokenActivated || canTransactPreLaunch[msg.sender],\\r\\n            \\u0027Token Not Activated\\u0027\\r\\n        );\\r\\n        // users token balance\\r\\n        uint256 userTokenBalance = underlying.balanceOf(msg.sender);\\r\\n        // ensure user has enough to send\\r\\n        require(userTokenBalance \\u003e 0 \\u0026\\u0026 numBUSD \\u003c= userTokenBalance, \\u0027Insufficient Balance\\u0027);\\r\\n\\r\\n        // calculate price change\\r\\n        uint256 oldPrice = _calculatePrice();\\r\\n\\r\\n        // previous backing\\r\\n        uint256 previousBacking = underlying.balanceOf(address(this));\\r\\n\\r\\n        // transfer in token\\r\\n        uint256 received = _transferIn(address(underlying), numBUSD);\\r\\n\\r\\n        // if this is the first purchase, use new amount\\r\\n        uint256 relevantBacking = previousBacking == 0 ? underlying.balanceOf(address(this)) : previousBacking;\\r\\n\\r\\n        // Handle Minting\\r\\n        return _mintTo(recipient, received, relevantBacking, oldPrice);\\r\\n    }\\r\\n    \\r\\n    /** Burns MDB+ Tokens And Deposits BUSD Tokens into Recipients\\u0027s Address */\\r\\n    function _sell(address seller, uint256 tokenAmount, address recipient) internal returns (uint256) {\\r\\n        require(tokenAmount \\u003e 0 \\u0026\\u0026 _balances[seller] \\u003e= tokenAmount);\\r\\n        require(seller != address(0) \\u0026\\u0026 recipient != address(0));\\r\\n        \\r\\n        // calculate price change\\r\\n        uint256 oldPrice = _calculatePrice();\\r\\n        \\r\\n        // tokens post fee to swap for underlying asset\\r\\n        uint256 tokensToSwap = isTransferFeeExempt[seller] ? \\r\\n            tokenAmount.sub(10, \\u0027Minimum Exemption\\u0027) :\\r\\n            tokenAmount.mul(sellFee).div(feeDenominator);\\r\\n\\r\\n        // value of taxed tokens\\r\\n        uint256 amountUnderlyingAsset = amountOut(tokensToSwap);\\r\\n\\r\\n        // Take Fee\\r\\n        if (!isTransferFeeExempt[msg.sender]) {\\r\\n            uint fee = tokenAmount.sub(tokensToSwap);\\r\\n            _takeFee(fee);\\r\\n        }\\r\\n\\r\\n        // burn from sender + supply \\r\\n        _burn(seller, tokenAmount);\\r\\n\\r\\n        // send Tokens to Seller\\r\\n        require(\\r\\n            underlying.transfer(recipient, amountUnderlyingAsset), \\r\\n            \\u0027Underlying Transfer Failure\\u0027\\r\\n        );\\r\\n\\r\\n        // require price rises\\r\\n        _requirePriceRises(oldPrice);\\r\\n        // Differentiate Sell\\r\\n        emit Redeemed(seller, tokenAmount, amountUnderlyingAsset);\\r\\n        // return token redeemed and amount underlying\\r\\n        return amountUnderlyingAsset;\\r\\n    }\\r\\n\\r\\n    /** Handles Minting Logic To Create New MDB+ */\\r\\n    function _mintTo(address recipient, uint256 received, uint256 totalBacking, uint256 oldPrice) private returns(uint256) {\\r\\n        \\r\\n        // find the number of tokens we should mint to keep up with the current price\\r\\n        uint256 calculatedSupply = _totalSupply == 0 ? 10**18 : _totalSupply;\\r\\n        uint256 tokensToMintNoTax = calculatedSupply.mul(received).div(totalBacking);\\r\\n        \\r\\n        // apply fee to minted tokens to inflate price relative to total supply\\r\\n        uint256 tokensToMint = isTransferFeeExempt[msg.sender] ? \\r\\n                tokensToMintNoTax.sub(10, \\u0027Minimum Exemption\\u0027) :\\r\\n                tokensToMintNoTax.mul(mintFee).div(feeDenominator);\\r\\n        require(tokensToMint \\u003e 0, \\u0027Zero Amount\\u0027);\\r\\n        \\r\\n        // mint to Buyer\\r\\n        _mint(recipient, tokensToMint);\\r\\n\\r\\n        // apply fee to tax taken\\r\\n        if (!isTransferFeeExempt[msg.sender]) {\\r\\n            uint fee = tokensToMintNoTax.sub(tokensToMint);\\r\\n            _takeFee(fee);\\r\\n        }\\r\\n\\r\\n        // require price rises\\r\\n        _requirePriceRises(oldPrice);\\r\\n        // require maximum holdings is not met\\r\\n        if (!max_holdings_exempt[recipient]) {\\r\\n            require(\\r\\n                getValueOfHoldings(recipient) \\u003c= max_holdings,\\r\\n                \\u0027Value Exceeds Maximum Holdings\\u0027\\r\\n            );\\r\\n        }\\r\\n        // differentiate purchase\\r\\n        emit Minted(recipient, tokensToMint);\\r\\n        return tokensToMint;\\r\\n    }\\r\\n\\r\\n    /** Takes Fee */\\r\\n    function _takeFee(uint mFee) internal {\\r\\n        (uint fee, address feeRecipient) = getFeeAndRecipient();\\r\\n        if (fee \\u003e 0) {\\r\\n            uint fFee = mFee.mul(fee).div(100);\\r\\n            uint bFee = amountOut(fFee);\\r\\n            if (bFee \\u003e 0 \\u0026\\u0026 feeRecipient != address(0)) {\\r\\n                underlying.transfer(feeRecipient, bFee);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /** Swaps BNB for BUSD, must get at least `minOut` BUSD back from swap to be successful */\\r\\n    function _purchaseBUSD(uint256 minOut) internal returns (uint256) {\\r\\n\\r\\n        // previous amount of Tokens before we received any\\r\\n        uint256 prevTokenAmount = underlying.balanceOf(address(this));\\r\\n\\r\\n        // swap BNB For stable of choice\\r\\n        router.swapExactETHForTokens{value: address(this).balance}(minOut, path, address(this), block.timestamp + 300);\\r\\n\\r\\n        // amount after swap\\r\\n        uint256 currentTokenAmount = underlying.balanceOf(address(this));\\r\\n        require(currentTokenAmount \\u003e prevTokenAmount);\\r\\n        return currentTokenAmount - prevTokenAmount;\\r\\n    }\\r\\n\\r\\n    /** Requires The Price Of MDB+ To Rise For The Transaction To Conclude */\\r\\n    function _requirePriceRises(uint256 oldPrice) internal {\\r\\n        // Calculate Price After Transaction\\r\\n        uint256 newPrice = _calculatePrice();\\r\\n        // Require Current Price \\u003e= Last Price\\r\\n        require(newPrice \\u003e= oldPrice, \\u0027Price Cannot Fall\\u0027);\\r\\n        // Emit The Price Change\\r\\n        emit PriceChange(oldPrice, newPrice, _totalSupply);\\r\\n    }\\r\\n\\r\\n    /** Transfers `desiredAmount` of `token` in and verifies the transaction success */\\r\\n    function _transferIn(address token, uint256 desiredAmount) internal returns (uint256) {\\r\\n        uint256 balBefore = IERC20(token).balanceOf(address(this));\\r\\n        bool s = IERC20(token).transferFrom(msg.sender, address(this), desiredAmount);\\r\\n        uint256 received = IERC20(token).balanceOf(address(this)) - balBefore;\\r\\n        require(s \\u0026\\u0026 received \\u003e 0 \\u0026\\u0026 received \\u003c= desiredAmount);\\r\\n        return received;\\r\\n    }\\r\\n    \\r\\n    /** Mints Tokens to the Receivers Address */\\r\\n    function _mint(address receiver, uint amount) private {\\r\\n        _balances[receiver] = _balances[receiver].add(amount);\\r\\n        _totalSupply = _totalSupply.add(amount);\\r\\n        emit Transfer(address(0), receiver, amount);\\r\\n    }\\r\\n    \\r\\n    /** Burns `amount` of tokens from `account` */\\r\\n    function _burn(address account, uint amount) private {\\r\\n        _balances[account] = _balances[account].sub(amount, \\u0027Insufficient Balance\\u0027);\\r\\n        _totalSupply = _totalSupply.sub(amount, \\u0027Negative Supply\\u0027);\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /** Make Sure there\\u0027s no Native Tokens in contract */\\r\\n    function _checkGarbageCollector(address burnLocation) internal {\\r\\n        uint256 bal = _balances[burnLocation];\\r\\n        if (bal \\u003e 10**3) {\\r\\n            // Track Change In Price\\r\\n            uint256 oldPrice = _calculatePrice();\\r\\n            // take fee\\r\\n            _takeFee(bal);\\r\\n            // burn amount\\r\\n            _burn(burnLocation, bal);\\r\\n            // Emit Collection\\r\\n            emit GarbageCollected(bal);\\r\\n            // Require price rises\\r\\n            _requirePriceRises(oldPrice);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    ///////////////////////////////////\\r\\n    //////    READ FUNCTIONS    ///////\\r\\n    ///////////////////////////////////\\r\\n    \\r\\n\\r\\n    /** Price Of MDB+ in BUSD With 18 Points Of Precision */\\r\\n    function calculatePrice() external view returns (uint256) {\\r\\n        return _calculatePrice();\\r\\n    }\\r\\n    \\r\\n    /** Returns the Current Price of 1 Token */\\r\\n    function _calculatePrice() internal view returns (uint256) {\\r\\n        uint256 totalShares = _totalSupply == 0 ? 1 : _totalSupply;\\r\\n        uint256 backingValue = underlying.balanceOf(address(this));\\r\\n        return (backingValue.mul(precision)).div(totalShares);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        Amount Of Underlying To Receive For `numTokens` of MDB+\\r\\n     */\\r\\n    function amountOut(uint256 numTokens) public view returns (uint256) {\\r\\n        return _calculatePrice().mul(numTokens).div(precision);\\r\\n    }\\r\\n\\r\\n    /** Returns the value of `holder`\\u0027s holdings */\\r\\n    function getValueOfHoldings(address holder) public view returns(uint256) {\\r\\n        return amountOut(_balances[holder]);\\r\\n    }\\r\\n\\r\\n    /** Returns Royalty Fee And Fee Recipient For Taxes */\\r\\n    function getFeeAndRecipient() public view returns (uint256, address) {\\r\\n        uint fee = royaltyTracker.getFee();\\r\\n        address recipient = royaltyTracker.getFeeRecipient();\\r\\n        return (fee, recipient);\\r\\n    }\\r\\n    \\r\\n    ///////////////////////////////////\\r\\n    //////   OWNER FUNCTIONS    ///////\\r\\n    ///////////////////////////////////\\r\\n\\r\\n    /** Activates Token, Enabling Trading For All */\\r\\n    function activateToken() external onlyOwner {\\r\\n        tokenActivated = true;\\r\\n        emit TokenActivated(block.number);\\r\\n    }\\r\\n    \\r\\n    /** Registers List Of Addresses To Transact Before Token Goes Live */\\r\\n    function registerUserToBuyPreLaunch(address[] calldata users) external onlyOwner {\\r\\n        for (uint i = 0; i \\u003c users.length; i++) {\\r\\n            canTransactPreLaunch[users[i]] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /** Set Maximum Holdings */\\r\\n    function setMaxHoldings(uint256 maxHoldings) external onlyOwner {\\r\\n        require(maxHoldings \\u003e= min_max_holdings, \\u0027Minimum Reached\\u0027);\\r\\n        max_holdings = maxHoldings;\\r\\n        emit SetMaxHoldings(maxHoldings);\\r\\n    }\\r\\n\\r\\n    /** Updates The Address Of The Router To Purchase BUSD */\\r\\n    function upgradeRouter(address newRouter) external onlyOwner {\\r\\n        require(newRouter != address(0));\\r\\n        isTransferFeeExempt[newRouter] = true;\\r\\n        router = IUniswapV2Router02(newRouter);\\r\\n        emit SetRouter(newRouter);\\r\\n    }\\r\\n\\r\\n    /** Withdraws Tokens Incorrectly Sent To MDB+ */\\r\\n    function withdrawNonStableToken(IERC20 token) external onlyOwner {\\r\\n        require(address(token) != address(underlying), \\u0027Cannot Withdraw Underlying Asset\\u0027);\\r\\n        require(address(token) != address(0), \\u0027Zero Address\\u0027);\\r\\n        token.transfer(msg.sender, token.balanceOf(address(this)));\\r\\n    }\\r\\n\\r\\n    /** \\r\\n        Sells Tokens On Behalf Of Other User\\r\\n            Requirements:\\r\\n                User MUST have more than the max_holdings quantity in BUSD\\r\\n                Can only redeem as much as they have excess in BUSD\\r\\n     */\\r\\n    function sellDownAccountToMaximumHoldings(address account) external nonReentrant onlyOwner {\\r\\n        require(account != address(0), \\u0027Zero Address\\u0027);\\r\\n        require(!max_holdings_exempt[account], \\u0027Account Is Max Holdings Exempt\\u0027);\\r\\n        // value of accounts holdings\\r\\n        uint valueOfHoldings = getValueOfHoldings(account);\\r\\n        require(\\r\\n            valueOfHoldings \\u003e max_holdings,\\r\\n            \\u0027User Does Not Exceed Max Holdings\\u0027\\r\\n        );\\r\\n\\r\\n        // amount to sell to bring to max holdings\\r\\n        uint256 amtToSellBUSD = valueOfHoldings.sub(max_holdings);\\r\\n\\r\\n        // convert to MDB+\\r\\n        uint256 mdbPlusToSell = amtToSellBUSD.mul(precision).div(_calculatePrice());\\r\\n\\r\\n        // sell excess tokens\\r\\n        if (mdbPlusToSell \\u003e 0) {\\r\\n            _sell(\\r\\n                account,\\r\\n                mdbPlusToSell, \\r\\n                account\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /** \\r\\n        Sets Mint, Transfer, Sell Fee\\r\\n        Must Be Within Bounds ( Between 0% - 2% ) \\r\\n    */\\r\\n    function setFees(uint256 _mintFee, uint256 _transferFee, uint256 _sellFee, uint256 _stableSwapFee) external onlyOwner {\\r\\n        require(_mintFee \\u003e= 97000);       // capped at 3% fee\\r\\n        require(_transferFee \\u003e= 97000);   // capped at 3% fee\\r\\n        require(_sellFee \\u003e= 97000);       // capped at 3% fee\\r\\n        require(_stableSwapFee \\u003e= 99000); // capped at 1% fee\\r\\n        \\r\\n        mintFee = _mintFee;\\r\\n        transferFee = _transferFee;\\r\\n        sellFee = _sellFee;\\r\\n        stableSwapFee = _stableSwapFee;\\r\\n        emit SetFees(_mintFee, _transferFee, _sellFee, _stableSwapFee);\\r\\n    }\\r\\n    \\r\\n    /** Excludes Contract From Transfer Fees */\\r\\n    function setPermissions(address Contract, bool transferFeeExempt) external onlyOwner {\\r\\n        require(Contract != address(0), \\u0027Zero Address\\u0027);\\r\\n        isTransferFeeExempt[Contract] = transferFeeExempt;\\r\\n        emit SetPermissions(Contract, transferFeeExempt);\\r\\n    }\\r\\n\\r\\n    /** Excludes Contract From Transfer Fees */\\r\\n    function setMaxHoldingsExempt(address account, bool isHoldingsExempt) external onlyOwner {\\r\\n        require(account != address(0), \\u0027Zero Address\\u0027);\\r\\n        max_holdings_exempt[account] = isHoldingsExempt;\\r\\n        emit SetMaxHoldingsExempt(account, isHoldingsExempt);\\r\\n    }\\r\\n    \\r\\n    /** Mint Tokens to Buyer */\\r\\n    receive() external payable {\\r\\n        _mintWithNative(msg.sender, 0);\\r\\n        _checkGarbageCollector(address(this));\\r\\n        _checkGarbageCollector(DEAD);\\r\\n    }\\r\\n    \\r\\n    \\r\\n    ///////////////////////////////////\\r\\n    //////        EVENTS        ///////\\r\\n    ///////////////////////////////////\\r\\n    \\r\\n    // Data Tracking\\r\\n    event PriceChange(uint256 previousPrice, uint256 currentPrice, uint256 totalSupply);\\r\\n    event TokenActivated(uint blockNo);\\r\\n\\r\\n    // Balance Tracking\\r\\n    event Burn(address from, uint256 amountTokensErased);\\r\\n    event GarbageCollected(uint256 amountTokensErased);\\r\\n    event Redeemed(address seller, uint256 amountMDB, uint256 amountBUSD);\\r\\n    event Minted(address recipient, uint256 numTokens);\\r\\n\\r\\n    // Upgradable Contract Tracking\\r\\n    event SetMaxHoldings(uint256 maxHoldings);\\r\\n    event SetRouter(address newRouter);\\r\\n\\r\\n    // Governance Tracking\\r\\n    event SetPermissions(address Contract, bool feeExempt);\\r\\n    event SetMaxHoldingsExempt(address account, bool isExempt);\\r\\n    event SetFees(uint mintFee, uint transferFee, uint sellFee, uint stableSwapFee);\\r\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\n/**\\r\\n * @title Owner\\r\\n * @dev Set \\u0026 change owner\\r\\n */\\r\\ncontract Ownable {\\r\\n\\r\\n    address private owner;\\r\\n    \\r\\n    // event for EVM logging\\r\\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\\r\\n    \\r\\n    // modifier to check if caller is owner\\r\\n    modifier onlyOwner() {\\r\\n        // If the first argument of \\u0027require\\u0027 evaluates to \\u0027false\\u0027, execution terminates and all\\r\\n        // changes to the state and to Ether balances are reverted.\\r\\n        // This used to consume all gas in old EVM versions, but not anymore.\\r\\n        // It is often a good idea to use \\u0027require\\u0027 to check if functions are called correctly.\\r\\n        // As a second argument, you can also provide an explanation about what went wrong.\\r\\n        require(msg.sender == owner, \\\"Caller is not owner\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Set contract deployer as owner\\r\\n     */\\r\\n    constructor() {\\r\\n        owner = msg.sender; // \\u0027msg.sender\\u0027 is sender of current call, contract deployer for a constructor\\r\\n        emit OwnerSet(address(0), owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Change owner\\r\\n     * @param newOwner address of new owner\\r\\n     */\\r\\n    function changeOwner(address newOwner) public onlyOwner {\\r\\n        emit OwnerSet(owner, newOwner);\\r\\n        owner = newOwner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return owner address \\r\\n     * @return address of owner\\r\\n     */\\r\\n    function getOwner() external view returns (address) {\\r\\n        return owner;\\r\\n    }\\r\\n}\"},\"ReentrantGuard.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nabstract contract ReentrancyGuard {\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n    uint256 private _status;\\r\\n    constructor () {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    modifier nonReentrant() {\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n        _status = _ENTERED;\\r\\n        _;\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTokensErased\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTokensErased\",\"type\":\"uint256\"}],\"name\":\"GarbageCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"PriceChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountMDB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBUSD\",\"type\":\"uint256\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stableSwapFee\",\"type\":\"uint256\"}],\"name\":\"SetFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxHoldings\",\"type\":\"uint256\"}],\"name\":\"SetMaxHoldings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExempt\",\"type\":\"bool\"}],\"name\":\"SetMaxHoldingsExempt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Contract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"feeExempt\",\"type\":\"bool\"}],\"name\":\"SetPermissions\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"SetRouter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNo\",\"type\":\"uint256\"}],\"name\":\"TokenActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"XUSD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activateToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"amountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculatePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"canTransactPreLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenInAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"exchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeAndRecipient\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getValueOfHoldings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTransferFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"max_holdings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"max_holdings_exempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"min_max_holdings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"mintWithBacking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"}],\"name\":\"mintWithNative\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"registerUserToBuyPreLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"sellDownAccountToMaximumHoldings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transferFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stableSwapFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxHoldings\",\"type\":\"uint256\"}],\"name\":\"setMaxHoldings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isHoldingsExempt\",\"type\":\"bool\"}],\"name\":\"setMaxHoldingsExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Contract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"transferFeeExempt\",\"type\":\"bool\"}],\"name\":\"setPermissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableSwapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenActivated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"upgradeRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawNonStableToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MDBPlus", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://dd1772025411545ee03ba726e2d06dee21ca33bd9ccf0183cade5e4d216f8d6b"}