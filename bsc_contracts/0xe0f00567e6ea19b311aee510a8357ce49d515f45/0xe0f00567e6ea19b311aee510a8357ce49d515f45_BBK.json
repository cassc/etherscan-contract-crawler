{"SourceCode": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.14;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\ninterface ISwapPair {\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"new is 0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nabstract contract BBKToken is IERC20, Ownable {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    uint256 private _tTotal;\r\n    ISwapRouter public _swapRouter;\r\n    address public _usdt;\r\n    mapping(address => bool) public _swapPairList;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 public free = 500;\r\n    address public _mainPair;\r\n    address[] public holders;\r\n    uint256 public holdersBlock = 1200;\r\n    mapping(address => uint256) public holderIndex;\r\n    mapping(address => bool) public excludeHolder;\r\n    uint256 public currentIndex;\r\n    uint256 public holderRewardCondition;\r\n    uint256 public progressRewardBlock;\r\n    uint public excludeHolderNumber;\r\n    mapping(address => bool) public _isExcludedFromFee;\r\n    constructor (\r\n        address RouterAddress, address USDTAddress,\r\n        string memory Name, string memory Symbol, uint8 Decimals, uint256 Supply\r\n    ){\r\n        _name = Name;\r\n        _symbol = Symbol;\r\n        _decimals = Decimals;\r\n        ISwapRouter swapRouter = ISwapRouter(RouterAddress);\r\n        _usdt = USDTAddress;\r\n        _swapRouter = swapRouter;\r\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\r\n        address swapPair = swapFactory.createPair(address(this), _usdt);\r\n        _mainPair = swapPair;\r\n        _swapPairList[swapPair] = true;\r\n        uint256 total = Supply * 10 ** Decimals;\r\n        _tTotal = total;\r\n        _balances[msg.sender] = total;\r\n        emit Transfer(address(0), msg.sender, total);\r\n        excludeHolder[address(0)] = true;\r\n        _isExcludedFromFee[msg.sender] = true;\r\n        excludeHolder[RouterAddress] = true; //\u6392\u9664\u8def\u7531\r\n        excludeHolder[msg.sender] = true; //\u9879\u76ee\u65b9\u81ea\u5df1\u4e0d\u8981\r\n        excludeHolder[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n        holderRewardCondition = 10 * 10 ** Decimals;\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(amount>0);\r\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\r\n            _balances[from] = _balances[from] - amount;\r\n            _takeTransfer(from,to,amount);\r\n            return;\r\n        }\r\n        _tokenTransfer(from, to, amount);\r\n         processReward(500000);\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount;\r\n        bool isAddLdx;\r\n\r\n        if (_swapPairList[sender]) {//Buy\r\n            feeAmount = tAmount * free / 10000;\r\n        } else if(_swapPairList[recipient]) { //sell\r\n            isAddLdx = _isAddLiquidity(); //\u5224\u65ad\u662f\u5426\u52a0\u6c60\u5b50\r\n            feeAmount = tAmount * free / 10000;\r\n            //\u662f\u52a0\u6c60\u5b50\r\n            if(isAddLdx && !isContract(sender)){\r\n                feeAmount = 0; //\u624b\u7eed\u8d39\u4e3a0 \r\n                addHolder(sender); //\u6dfb\u52a0\u6301\u6709\u4eba\r\n            }\r\n        }\r\n        if (feeAmount > 0) {\r\n             _takeTransfer(\r\n                sender,\r\n                address(this),\r\n                feeAmount\r\n            );\r\n        }\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n\r\n    function excludeMultipleAccountsFromFee(\r\n        address[] calldata accounts,\r\n        bool excluded\r\n    ) public onlyOwner {\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            _isExcludedFromFee[accounts[i]] = excluded;\r\n        }\r\n    }\r\n\r\n    //\u8bbe\u7f6e\u6c60\u5b50\r\n    function setSwapPairList(address addr, bool enable) external onlyOwner {\r\n        _swapPairList[addr] = enable;\r\n    }\r\n\r\n    function claimBalance() external onlyOwner{\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n\r\n    function claimToken(address token, uint256 amount, address to) external onlyOwner {\r\n        IERC20(token).transfer(to, amount);\r\n    }\r\n    receive() external payable {}\r\n    function getHolderLength() public view returns (uint256){\r\n        return holders.length;\r\n    }\r\n    function addHolder(address adr) private {\r\n        if (0 == holderIndex[adr]) {\r\n            if (0 == holders.length || holders[0] != adr) {\r\n                uint256 size;\r\n                assembly {size := extcodesize(adr)}\r\n                if (size > 0) {\r\n                    return;\r\n                }\r\n                holderIndex[adr] = holders.length;\r\n                holders.push(adr);\r\n            }\r\n        }\r\n    }\r\n    function processReward(uint256 gas) private {\r\n        if (progressRewardBlock + holdersBlock > block.number) {\r\n            return;\r\n        }\r\n        uint256 balance = _balances[address(this)];\r\n        //\u83b7\u53d6\u5f53\u524d\u4f59\u989d,\u5982\u679c\u5c0f\u4e8e10\u679a\u4e0d\u5206\r\n        if (balance < holderRewardCondition) {\r\n            return;\r\n        }\r\n        IERC20 holdToken = IERC20(_mainPair); //\u83b7\u53d6\u6c60\u5b50\r\n        uint holdTokenTotal = holdToken.totalSupply(); //\u83b7\u53d6\u603b\u91cflp\r\n        uint delHoldTokenTotal =  excludeHolderNumber == 0 ? holdTokenTotal : holdTokenTotal - excludeHolderNumber;\r\n        address shareHolder;\r\n        uint256 tokenBalance;\r\n        uint256 amount;\r\n        uint256 shareholderCount = holders.length; //\u83b7\u53d6\u6301\u6709\u4eba\u5f53\u524d\u6709\u591a\u5c11\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex = 0;\r\n            }\r\n            shareHolder = holders[currentIndex];\r\n            tokenBalance = holdToken.balanceOf(shareHolder);\r\n            if (tokenBalance > 0 && !excludeHolder[shareHolder]) {\r\n                amount = balance * tokenBalance / delHoldTokenTotal;\r\n                if (amount > 0) {\r\n                    _tokenTransfer(address(this),shareHolder,amount);\r\n                }\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n\r\n        progressRewardBlock = block.number;\r\n    }\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n            return account.code.length > 0;\r\n    }\r\n\r\n    //\u8bbe\u7f6e\u6700\u5c0f\u7684\u5206\u7ea2\r\n    function setHolderRewardCondition(uint256 amount) external onlyOwner {\r\n        holderRewardCondition = amount;\r\n    }\r\n\tfunction _isAddLiquidity()internal view returns(bool ldxAdd){\r\n\r\n        address token0 = ISwapPair(address(_mainPair)).token0();\r\n        address token1 = ISwapPair(address(_mainPair)).token1();\r\n        (uint r0,uint r1,) = ISwapPair(address(_mainPair)).getReserves();\r\n        uint bal1 = IERC20(token1).balanceOf(address(_mainPair));\r\n        uint bal0 = IERC20(token0).balanceOf(address(_mainPair));\r\n        if( token0 == address(this) ){\r\n\t\t\tif( bal1 > r1){\r\n\t\t\t\tuint change1 = bal1 - r1;\r\n\t\t\t\tldxAdd = change1 > 1000;\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\tif( bal0 > r0){\r\n\t\t\t\tuint change0 = bal0 - r0;\r\n\t\t\t\tldxAdd = change0 > 1000;\r\n\t\t\t}\r\n\t\t}\r\n    }\r\n    //\u8bbe\u7f6e\u7a0e\r\n    function setFree(uint256 _free) external onlyOwner {\r\n        free = _free;\r\n    }\r\n    //\u8bbe\u7f6e\u6392\u9664\u5206\u7ea2\u4eba\r\n    function setExcludeHolder(address addr, bool enable) external onlyOwner {\r\n        excludeHolder[addr] = enable;\r\n    }\r\n    //\u8bbe\u7f6e\u76f8\u5173\u6392\u9664\u7ba1\u7406\u5458\u7684Lp\u6570\u91cf\r\n    function setExcludeHolderNumber(uint _excludeHolderNumber) external onlyOwner{\r\n        excludeHolderNumber = _excludeHolderNumber;\r\n    }\r\n\r\n    //\u8bbe\u7f6e\u5206\u7ea2\u65f6\u95f4\u95f4\u9694\u5757\r\n    function setholdersBlock(uint256 _holdersBlock) external onlyOwner{\r\n        holdersBlock = _holdersBlock;\r\n    }\r\n}\r\n\r\ncontract BBK is BBKToken {\r\n    constructor() BBKToken(\r\n        address(0x10ED43C718714eb63d5aA57B78B54704E256024E),\r\n        address(0x55d398326f99059fF775485246999027B3197955),\r\n        \"BBK\",\r\n        \"BBK\",\r\n        18,\r\n        10000\r\n    ){}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapPairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludeHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeHolderNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeMultipleAccountsFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"free\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHolderLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"holderIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holderRewardCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holdersBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"progressRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_excludeHolderNumber\",\"type\":\"uint256\"}],\"name\":\"setExcludeHolderNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_free\",\"type\":\"uint256\"}],\"name\":\"setFree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setHolderRewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_holdersBlock\",\"type\":\"uint256\"}],\"name\":\"setholdersBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BBK", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6f3e072c8990098f09987eceb7e34efdb8a68391dc4d236304b7e79091cb7407"}