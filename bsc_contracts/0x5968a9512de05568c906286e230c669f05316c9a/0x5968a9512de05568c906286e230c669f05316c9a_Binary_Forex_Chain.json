{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Binary_Forex_Chain.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\ncontract Binary_Forex_Chain is Context, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    struct Node {\\n        uint128 NumberOfChildNodeOnLeft;\\n        uint128 NumberOfChildNodeOnRight;\\n        uint256 NumberOfBalancedCalculated;\\n        uint256 TotalUserRewarded;\\n        uint256 NumberOfNewBalanced;\\n        uint256 RewardAmountNotReleased;\\n        address LeftNode;\\n        address RightNode;\\n        address UplineAddress;\\n        int8 DirectionOfCurrentNodeInUplineNode;\\n        bool Status;\\n    }\\n\\n    mapping(address => Node) private _users;\\n    mapping(address => bool) private _oldUsers;\\n    address[] private _usersAddresses;\\n\\n    uint256 private lastRun;\\n    address private owner;\\n    IERC20 private tetherToken;\\n\\n    uint256 private registrationFee;\\n    uint256 private numberOfRegisteredUsersIn_24Hours;\\n    uint256 private totalBalance;\\n    uint256 private allPayments;\\n    uint256 private numberOfNewBalanceIn_24Hours;\\n    uint256 private constMaxBalanceForCalculatedReward;\\n    uint256 private totalNetworkBalanced;\\n\\n    event UserRegistered(address indexed upLine, address indexed newUser);\\n    event UserReactivated(address indexed user);\\n    event UserWithdraw(address indexed user, uint256 indexed rewardAmount);\\n\\n    constructor(address _tetherToken, address _owner) {\\n        owner = _owner;\\n        registrationFee = 100 ether;\\n\\n        tetherToken = IERC20(_tetherToken);\\n        lastRun = block.timestamp;\\n        numberOfRegisteredUsersIn_24Hours = 0;\\n        numberOfNewBalanceIn_24Hours = 0;\\n        constMaxBalanceForCalculatedReward = 10;\\n\\n        _users[owner] = Node({\\n            NumberOfChildNodeOnLeft: 0,\\n            NumberOfChildNodeOnRight: 0,\\n            NumberOfBalancedCalculated: 0,\\n            TotalUserRewarded: 0,\\n            NumberOfNewBalanced: 0,\\n            RewardAmountNotReleased: 0,\\n            LeftNode: address(0),\\n            RightNode: address(0),\\n            UplineAddress: address(0),\\n            DirectionOfCurrentNodeInUplineNode: 1,\\n            Status: true\\n        });\\n\\n        _usersAddresses.push(owner);\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_msgSender() == owner, \\\"Just Owner Can Run This Order!\\\");\\n        _;\\n    }\\n\\n    function getTotalSubtreeNodes(address user) private view returns (uint256) {\\n        if (user == address(0)) {\\n            return 0;\\n        }\\n\\n        uint256 leftCount = getTotalSubtreeNodes(_users[user].LeftNode);\\n        uint256 rightCount = getTotalSubtreeNodes(_users[user].RightNode);\\n\\n        return 1 + leftCount + rightCount;\\n    }\\n\\n    function Calculating_Rewards_In_24_Hours() public {\\n        require(block.timestamp > lastRun + 1 days, \\\"The Calculating_Node_Rewards_In_24_Hours Time Has Not Come\\\");\\n\\n        uint256 totalNormalUserBalanced = 0;\\n        uint256 totalExcessBalances = 0;\\n        uint256 maxBalancedCap = 10;\\n        uint256 ownerBalanced = min(_usersAddresses.length, maxBalancedCap);\\n\\n        for (uint256 i = 0; i < _usersAddresses.length; i++) {\\n            address currentUser = _usersAddresses[i];\\n            uint256 leftSubtreeCount = getTotalSubtreeNodes(_users[currentUser].LeftNode);\\n            uint256 rightSubtreeCount = getTotalSubtreeNodes(_users[currentUser].RightNode);\\n            uint256 balancedCount = min(leftSubtreeCount, rightSubtreeCount);\\n\\n            if (currentUser != owner) {\\n                if (balancedCount > maxBalancedCap) {\\n                    totalExcessBalances += (balancedCount - maxBalancedCap);\\n                    balancedCount = maxBalancedCap;\\n                }\\n                totalNormalUserBalanced += balancedCount;\\n            }\\n        }\\n\\n        uint256 totalContractMoney = tetherToken.balanceOf(address(this));\\n        uint256 totalBalances = totalNormalUserBalanced + ownerBalanced;\\n        uint256 rewardPerBalanced = totalContractMoney / totalBalances;\\n\\n        for (uint256 i = 0; i < _usersAddresses.length; i++) {\\n            address currentUser = _usersAddresses[i];\\n            uint256 userReward;\\n            uint256 currentUserBalanced;\\n\\n            if (currentUser == owner) {\\n                userReward = ownerBalanced * rewardPerBalanced;\\n            } else {\\n                currentUserBalanced =\\n                    min(_users[currentUser].NumberOfChildNodeOnLeft, _users[currentUser].NumberOfChildNodeOnRight);\\n\\n                if (currentUserBalanced > maxBalancedCap) {\\n                    currentUserBalanced = maxBalancedCap;\\n                }\\n\\n                userReward = currentUserBalanced * rewardPerBalanced;\\n            }\\n\\n            if (totalExcessBalances > 0 && currentUserBalanced < maxBalancedCap) {\\n                userReward += (totalExcessBalances * rewardPerBalanced) / totalNormalUserBalanced;\\n            }\\n\\n            _users[currentUser].RewardAmountNotReleased += userReward;\\n            _users[currentUser].NumberOfNewBalanced = 0;\\n        }\\n\\n        lastRun = block.timestamp;\\n        numberOfRegisteredUsersIn_24Hours = 0;\\n        numberOfNewBalanceIn_24Hours = 0;\\n    }\\n\\n    function reactivateUser() public {\\n        require(_users[_msgSender()].Status == false, \\\"User is already active or not registered.\\\");\\n        require(_users[_msgSender()].TotalUserRewarded >= 1000 ether, \\\"Reactivate condition not met.\\\");\\n\\n        uint256 ownerBenefit = 20 ether;\\n        uint256 registerFee = registrationFee - ownerBenefit;\\n\\n        tetherToken.safeTransferFrom(_msgSender(), address(this), registerFee);\\n        tetherToken.safeTransferFrom(_msgSender(), owner, ownerBenefit);\\n\\n        _users[_msgSender()].TotalUserRewarded = 0;\\n        _users[_msgSender()].Status = true;\\n\\n        emit UserReactivated(_msgSender());\\n    }\\n\\n    function B_Withdraw() public nonReentrant {\\n        require(_users[_msgSender()].RewardAmountNotReleased > 0, \\\"You have not received any award yet\\\");\\n        require(_users[_msgSender()].Status == true, \\\"You can not withdraw your reward\\\");\\n\\n        if (_msgSender() == owner) {\\n            uint256 ownerReward = _users[owner].RewardAmountNotReleased;\\n            _users[owner].RewardAmountNotReleased = 0;\\n            tetherToken.safeTransfer(owner, ownerReward);\\n            return;\\n        }\\n\\n        uint256 reward;\\n        reward = _users[_msgSender()].RewardAmountNotReleased;\\n        _users[_msgSender()].TotalUserRewarded += reward;\\n        _users[_msgSender()].RewardAmountNotReleased = 0;\\n\\n        if (_users[_msgSender()].TotalUserRewarded >= 1000 ether) {\\n            _users[_msgSender()].Status = false;\\n        }\\n\\n        tetherToken.safeTransfer(_msgSender(), reward);\\n\\n        emit UserWithdraw(_msgSender(), reward);\\n    }\\n\\n    function Emergency_72() public onlyOwner {\\n        require(block.timestamp > lastRun + 3 days, \\\"The Emergency_72 Time Has Not Come\\\");\\n        require(tetherToken.balanceOf(address(this)) > 0, \\\"contract not have balance\\\");\\n\\n        tetherToken.safeTransfer(owner, tetherToken.balanceOf(address(this)));\\n    }\\n\\n    function A_Register(address uplineAddress) public {\\n        uint256 ownerBenefit = 20 ether;\\n        uint256 registerFee = registrationFee - ownerBenefit;\\n\\n        uint256 NumberOfCurrentBalanced;\\n        uint256 NumberOfNewBalanced;\\n\\n        address temp_UplineAddress;\\n        address temp_CurrentAddress;\\n        int8 temp_DirectionOfCurrentNodeInUplineNode;\\n\\n        require(\\n            _users[uplineAddress].LeftNode == address(0) || _users[uplineAddress].RightNode == address(0),\\n            \\\"This address have two directs and could not accept new members!\\\"\\n        );\\n        require(_msgSender() != uplineAddress, \\\"You can not enter your own address!\\\");\\n\\n        require(_users[_msgSender()].Status == false, \\\"This address is already registered!\\\");\\n        require(_users[uplineAddress].Status == true, \\\"This Upline address is Not Exist!\\\");\\n\\n        if (_oldUsers[_msgSender()] == false) {\\n            tetherToken.safeTransferFrom(_msgSender(), address(this), registerFee);\\n            tetherToken.safeTransferFrom(_msgSender(), owner, ownerBenefit);\\n        }\\n\\n        if (uplineAddress == owner) {\\n            require(_users[owner].LeftNode == address(0), \\\"Owner can only have one direct subset.\\\");\\n            _users[owner].LeftNode = _msgSender();\\n            temp_DirectionOfCurrentNodeInUplineNode = 0;\\n        } else {\\n            if (_users[uplineAddress].LeftNode == address(0)) {\\n                _users[uplineAddress].LeftNode = _msgSender();\\n                temp_DirectionOfCurrentNodeInUplineNode = -1;\\n            } else {\\n                _users[uplineAddress].RightNode = _msgSender();\\n                temp_DirectionOfCurrentNodeInUplineNode = 1;\\n            }\\n        }\\n\\n        _users[_msgSender()] = Node({\\n            NumberOfChildNodeOnLeft: 0,\\n            NumberOfChildNodeOnRight: 0,\\n            NumberOfBalancedCalculated: 0,\\n            TotalUserRewarded: 0,\\n            NumberOfNewBalanced: 0,\\n            RewardAmountNotReleased: 0,\\n            LeftNode: address(0),\\n            RightNode: address(0),\\n            UplineAddress: uplineAddress,\\n            DirectionOfCurrentNodeInUplineNode: temp_DirectionOfCurrentNodeInUplineNode,\\n            Status: true\\n        });\\n\\n        temp_UplineAddress = uplineAddress;\\n        temp_CurrentAddress = _msgSender();\\n\\n        if (!_oldUsers[temp_CurrentAddress]) {\\n            while (true) {\\n                if (_users[temp_UplineAddress].Status == false) {\\n                    break;\\n                }\\n\\n                if (temp_DirectionOfCurrentNodeInUplineNode == 1) {\\n                    _users[temp_UplineAddress].NumberOfChildNodeOnRight += 1;\\n                } else {\\n                    _users[temp_UplineAddress].NumberOfChildNodeOnLeft += 1;\\n                }\\n\\n                NumberOfCurrentBalanced = _users[temp_UplineAddress].NumberOfChildNodeOnLeft\\n                    < _users[temp_UplineAddress].NumberOfChildNodeOnRight\\n                    ? _users[temp_UplineAddress].NumberOfChildNodeOnLeft\\n                    : _users[temp_UplineAddress].NumberOfChildNodeOnRight;\\n\\n                NumberOfNewBalanced = NumberOfCurrentBalanced\\n                    - (\\n                        _users[temp_UplineAddress].NumberOfBalancedCalculated\\n                            + _users[temp_UplineAddress].NumberOfNewBalanced\\n                    );\\n\\n                if (NumberOfNewBalanced > 0) {\\n                    _users[temp_UplineAddress].NumberOfNewBalanced += NumberOfNewBalanced;\\n                    if (_users[temp_UplineAddress].NumberOfNewBalanced <= constMaxBalanceForCalculatedReward) {\\n                        totalBalance += NumberOfNewBalanced;\\n                        numberOfNewBalanceIn_24Hours += NumberOfNewBalanced;\\n                    }\\n                }\\n\\n                temp_CurrentAddress = temp_UplineAddress;\\n                temp_DirectionOfCurrentNodeInUplineNode = _users[temp_CurrentAddress].DirectionOfCurrentNodeInUplineNode;\\n                temp_UplineAddress = _users[temp_UplineAddress].UplineAddress;\\n            }\\n\\n            numberOfRegisteredUsersIn_24Hours += 1;\\n        }\\n\\n        _usersAddresses.push(_msgSender());\\n        emit UserRegistered(uplineAddress, _msgSender());\\n    }\\n\\n    function Today_Contract_Balance() public view returns (uint256) {\\n        return (80 ether) * numberOfRegisteredUsersIn_24Hours;\\n    }\\n\\n    function All_Time_User_Left_Right(address userAddress) public view returns (uint128, uint128) {\\n        return (_users[userAddress].NumberOfChildNodeOnLeft, _users[userAddress].NumberOfChildNodeOnRight);\\n    }\\n\\n    function Today_Total_Balance() public view returns (uint256) {\\n        return numberOfNewBalanceIn_24Hours;\\n    }\\n\\n    function Today_Reward_Per_Balance() public view returns (uint256) {\\n        uint256 todayReward;\\n        if (numberOfNewBalanceIn_24Hours == 0) {\\n            todayReward = 0;\\n        } else {\\n            todayReward = (80 ether) * numberOfRegisteredUsersIn_24Hours / numberOfNewBalanceIn_24Hours;\\n        }\\n\\n        return todayReward;\\n    }\\n\\n    function Reward_Amount_Not_Released(address userAddress) public view returns (uint256) {\\n        return _users[userAddress].RewardAmountNotReleased;\\n    }\\n\\n    function Total_User_Reward(address userAddress) public view returns (uint256) {\\n        return _users[userAddress].TotalUserRewarded;\\n    }\\n\\n    function Registration_Fee() public view returns (uint256) {\\n        return registrationFee;\\n    }\\n\\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tetherToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"UserReactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"upLine\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newUser\",\"type\":\"address\"}],\"name\":\"UserRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"UserWithdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uplineAddress\",\"type\":\"address\"}],\"name\":\"A_Register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"All_Time_User_Left_Right\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"B_Withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Calculating_Rewards_In_24_Hours\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Emergency_72\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Registration_Fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"Reward_Amount_Not_Released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Today_Contract_Balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Today_Reward_Per_Balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Today_Total_Balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"Total_User_Reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reactivateUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Binary_Forex_Chain", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000055d398326f99059ff775485246999027b31979550000000000000000000000009ee3ee7184e55b92b52014b4cc0d421715fe6bf1", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}