{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/BrainToken.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./utils/LERC20.sol\\\";\\n\\ncontract BrainToken is LERC20 {\\n    mapping(address => bool) public minters;\\n    modifier onlyMinter() {\\n        require(minters[msg.sender], \\\"Only minter\\\");\\n        _;\\n    }\\n    modifier lssMint(address account, uint256 amount) {\\n        if (isLosslessOn) {\\n            lossless.beforeMint(account, amount);\\n        } \\n        _;\\n    }\\n\\n    modifier lssBurn(address account, uint256 amount) {\\n        if (isLosslessOn) {\\n            lossless.beforeBurn(account, amount);\\n        } \\n        _;\\n    }\\n\\n    constructor(\\n         uint256 totalSupply_,\\n         string memory name_, \\n         string memory symbol_,\\n         address admin_,\\n         address recoveryAdmin_,\\n         uint256 timelockPeriod_,\\n         address lossless_\\n         ) LERC20(\\n               totalSupply_,\\n               name_,\\n               symbol_,\\n               admin_,\\n               recoveryAdmin_,\\n               timelockPeriod_,\\n               lossless_) {\\n                   minters[msg.sender] = true;\\n               }\\n\\n    function setMinter(address _account, bool _status) external {\\n        require(msg.sender == admin,\\\"Not allowed\\\");\\n        require(_account != address(0), \\\"Invalid minter address\\\");\\n        minters[_account] = _status;\\n    }\\n\\n    function mint(address to, uint256 amount) external lssMint(to, amount) onlyMinter{\\n        _mint(to, amount);\\n    }  \\n\\n    function burn(uint256 amount) public virtual lssBurn(_msgSender(), amount){\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    function burnFrom(address account, uint256 amount) public virtual lssBurn(account, amount){\\n        uint256 currentAllowance = allowance(account, _msgSender());\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(account, _msgSender(), currentAllowance - amount);\\n            }\\n        }\\n        _burn(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/LERC20.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\nimport \\\"../Interfaces/ILosslessERC20.sol\\\";\\nimport \\\"../Interfaces/ILosslessController.sol\\\";\\n\\ncontract LERC20 is Context, ILERC20 {\\n    mapping (address => uint256) private _balances;\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n    uint256 private _totalSupply;\\n    string private _name;\\n    string private _symbol;\\n\\n    address public recoveryAdmin;\\n    address private recoveryAdminCandidate;\\n    bytes32 private recoveryAdminKeyHash;\\n    address override public admin;\\n    uint256 public timelockPeriod;\\n    uint256 public losslessTurnOffTimestamp;\\n    bool public isLosslessOn = true;\\n    ILssController public lossless;\\n\\n    constructor(uint256 totalSupply_, string memory name_, string memory symbol_, address admin_, address recoveryAdmin_, uint256 timelockPeriod_, address lossless_) {\\n        _mint(_msgSender(), totalSupply_);\\n        _name = name_;\\n        _symbol = symbol_;\\n        admin = admin_;\\n        recoveryAdmin = recoveryAdmin_;\\n        recoveryAdminCandidate = address(0);\\n        recoveryAdminKeyHash = \\\"\\\";\\n        timelockPeriod = timelockPeriod_;\\n        losslessTurnOffTimestamp = 0;\\n        lossless = ILssController(lossless_);\\n    }\\n\\n    // --- LOSSLESS modifiers ---\\n\\n    modifier lssAprove(address spender, uint256 amount) {\\n        if (isLosslessOn) {\\n            lossless.beforeApprove(_msgSender(), spender, amount);\\n        } \\n        _;\\n    }\\n\\n    modifier lssTransfer(address recipient, uint256 amount) {\\n        if (isLosslessOn) {\\n            lossless.beforeTransfer(_msgSender(), recipient, amount);\\n        } \\n        _;\\n    }\\n\\n    modifier lssTransferFrom(address sender, address recipient, uint256 amount) {\\n        if (isLosslessOn) {\\n            lossless.beforeTransferFrom(_msgSender(),sender, recipient, amount);\\n        }\\n        _;\\n    }\\n\\n    modifier lssIncreaseAllowance(address spender, uint256 addedValue) {\\n        if (isLosslessOn) {\\n            lossless.beforeIncreaseAllowance(_msgSender(), spender, addedValue);\\n        }\\n        _;\\n    }\\n\\n    modifier lssDecreaseAllowance(address spender, uint256 subtractedValue) {\\n        if (isLosslessOn) {\\n            lossless.beforeDecreaseAllowance(_msgSender(), spender, subtractedValue);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyRecoveryAdmin() {\\n        require(_msgSender() == recoveryAdmin, \\\"LERC20: Must be recovery admin\\\");\\n        _;\\n    }\\n\\n    // --- LOSSLESS management ---\\n    function transferOutBlacklistedFunds(address[] calldata from) override external {\\n        require(_msgSender() == address(lossless), \\\"LERC20: Only lossless contract\\\");\\n\\n        uint256 fromLength = from.length;\\n        uint256 totalAmount = 0;\\n        \\n        for(uint256 i = 0; i < fromLength;) {\\n            address fromAddress = from[i];\\n            uint256 fromBalance = _balances[fromAddress];\\n            _balances[fromAddress] = 0;\\n            totalAmount += fromBalance;\\n            emit Transfer(fromAddress, address(lossless), fromBalance);\\n            unchecked{i++;}\\n        }\\n\\n        _balances[address(lossless)] += totalAmount;\\n    }\\n\\n    function setLosslessAdmin(address newAdmin) override external onlyRecoveryAdmin {\\n        require(newAdmin != admin, \\\"LERC20: Cannot set same address\\\");\\n        emit NewAdmin(newAdmin);\\n        admin = newAdmin;\\n    }\\n\\n    function transferRecoveryAdminOwnership(address candidate, bytes32 keyHash) override  external onlyRecoveryAdmin {\\n        recoveryAdminCandidate = candidate;\\n        recoveryAdminKeyHash = keyHash;\\n        emit NewRecoveryAdminProposal(candidate);\\n    }\\n\\n    function acceptRecoveryAdminOwnership(bytes memory key) override external {\\n        require(_msgSender() == recoveryAdminCandidate, \\\"LERC20: Must be canditate\\\");\\n        require(keccak256(key) == recoveryAdminKeyHash, \\\"LERC20: Invalid key\\\");\\n        emit NewRecoveryAdmin(recoveryAdminCandidate);\\n        recoveryAdmin = recoveryAdminCandidate;\\n        recoveryAdminCandidate = address(0);\\n    }\\n\\n    function proposeLosslessTurnOff() override external onlyRecoveryAdmin {\\n        require(losslessTurnOffTimestamp == 0, \\\"LERC20: TurnOff already proposed\\\");\\n        require(isLosslessOn, \\\"LERC20: Lossless already off\\\");\\n        losslessTurnOffTimestamp = block.timestamp + timelockPeriod;\\n        emit LosslessTurnOffProposal(losslessTurnOffTimestamp);\\n    }\\n\\n    function executeLosslessTurnOff() override external onlyRecoveryAdmin {\\n        require(losslessTurnOffTimestamp != 0, \\\"LERC20: TurnOff not proposed\\\");\\n        require(losslessTurnOffTimestamp <= block.timestamp, \\\"LERC20: Time lock in progress\\\");\\n        isLosslessOn = false;\\n        losslessTurnOffTimestamp = 0;\\n        emit LosslessOff();\\n    }\\n\\n    function executeLosslessTurnOn() override external onlyRecoveryAdmin {\\n        require(!isLosslessOn, \\\"LERC20: Lossless already on\\\");\\n        losslessTurnOffTimestamp = 0;\\n        isLosslessOn = true;\\n        emit LosslessOn();\\n    }\\n\\n    function getAdmin() override public view virtual returns (address) {\\n        return admin;\\n    }\\n\\n    // --- ERC20 methods ---\\n\\n    function name() override public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() override public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() override public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public virtual override lssTransfer(recipient, amount) returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) public virtual override lssAprove(spender, amount) returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override lssTransferFrom(sender, recipient, amount) returns (bool) {\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"LERC20: transfer amount exceeds allowance\\\");\\n        _transfer(sender, recipient, amount);\\n        \\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) override public virtual lssIncreaseAllowance(spender, addedValue) returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) override public virtual lssDecreaseAllowance(spender, subtractedValue) returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"LERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"LERC20: transfer from the zero address\\\");\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"LERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"LERC20: mint to the zero address\\\");\\n    \\n        _totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked { \\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n     /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/utils/Context.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.4;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\"\r\n    },\r\n    \"contracts/Interfaces/ILosslessERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ILERC20 {\\n    function name() external view returns (string memory);\\n    function admin() external view returns (address);\\n    function getAdmin() external view returns (address);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address _account) external view returns (uint256);\\n    function transfer(address _recipient, uint256 _amount) external returns (bool);\\n    function allowance(address _owner, address _spender) external view returns (uint256);\\n    function approve(address _spender, uint256 _amount) external returns (bool);\\n    function transferFrom(address _sender, address _recipient, uint256 _amount) external returns (bool);\\n    function increaseAllowance(address _spender, uint256 _addedValue) external returns (bool);\\n    function decreaseAllowance(address _spender, uint256 _subtractedValue) external returns (bool);\\n    \\n    function transferOutBlacklistedFunds(address[] calldata _from) external;\\n    function setLosslessAdmin(address _newAdmin) external;\\n    function transferRecoveryAdminOwnership(address _candidate, bytes32 _keyHash) external;\\n    function acceptRecoveryAdminOwnership(bytes memory _key) external;\\n    function proposeLosslessTurnOff() external;\\n    function executeLosslessTurnOff() external;\\n    function executeLosslessTurnOn() external;\\n\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\n    event NewAdmin(address indexed _newAdmin);\\n    event NewRecoveryAdminProposal(address indexed _candidate);\\n    event NewRecoveryAdmin(address indexed _newAdmin);\\n    event LosslessTurnOffProposal(uint256 _turnOffDate);\\n    event LosslessOff();\\n    event LosslessOn();\\n}\"\r\n    },\r\n    \"contracts/Interfaces/ILosslessController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ILosslessERC20.sol\\\";\\nimport \\\"./ILosslessGovernance.sol\\\";\\nimport \\\"./ILosslessStaking.sol\\\";\\nimport \\\"./ILosslessReporting.sol\\\";\\nimport \\\"./IProtectionStrategy.sol\\\";\\n\\ninterface ILssController {\\n    // function getLockedAmount(ILERC20 _token, address _account)  returns (uint256);\\n    // function getAvailableAmount(ILERC20 _token, address _account) external view returns (uint256 amount);\\n    function retrieveBlacklistedFunds(address[] calldata _addresses, ILERC20 _token, uint256 _reportId) external returns(uint256);\\n    function whitelist(address _adr) external view returns (bool);\\n    function dexList(address _dexAddress) external returns (bool);\\n    function blacklist(address _adr) external view returns (bool);\\n    function admin() external view returns (address);\\n    function pauseAdmin() external view returns (address);\\n    function recoveryAdmin() external view returns (address);\\n    function guardian() external view returns (address);\\n    function losslessStaking() external view returns (ILssStaking);\\n    function losslessReporting() external view returns (ILssReporting);\\n    function losslessGovernance() external view returns (ILssGovernance);\\n    function dexTranferThreshold() external view returns (uint256);\\n    function settlementTimeLock() external view returns (uint256);\\n    \\n    function pause() external;\\n    function unpause() external;\\n    function setAdmin(address _newAdmin) external;\\n    function setRecoveryAdmin(address _newRecoveryAdmin) external;\\n    function setPauseAdmin(address _newPauseAdmin) external;\\n    function setSettlementTimeLock(uint256 _newTimelock) external;\\n    function setDexTransferThreshold(uint256 _newThreshold) external;\\n    function setDexList(address[] calldata _dexList, bool _value) external;\\n    function setWhitelist(address[] calldata _addrList, bool _value) external;\\n    function addToBlacklist(address _adr) external;\\n    function resolvedNegatively(address _adr) external;\\n    function setStakingContractAddress(ILssStaking _adr) external;\\n    function setReportingContractAddress(ILssReporting _adr) external; \\n    function setGovernanceContractAddress(ILssGovernance _adr) external;\\n    function proposeNewSettlementPeriod(ILERC20 _token, uint256 _seconds) external;\\n    function executeNewSettlementPeriod(ILERC20 _token) external;\\n    function activateEmergency(ILERC20 _token) external;\\n    function deactivateEmergency(ILERC20 _token) external;\\n    function setGuardian(address _newGuardian) external;\\n    function removeProtectedAddress(ILERC20 _token, address _protectedAddresss) external;\\n    function beforeTransfer(address _sender, address _recipient, uint256 _amount) external;\\n    function beforeTransferFrom(address _msgSender, address _sender, address _recipient, uint256 _amount) external;\\n    function beforeApprove(address _sender, address _spender, uint256 _amount) external;\\n    function beforeIncreaseAllowance(address _msgSender, address _spender, uint256 _addedValue) external;\\n    function beforeDecreaseAllowance(address _msgSender, address _spender, uint256 _subtractedValue) external;\\n    function beforeMint(address _to, uint256 _amount) external;\\n    function beforeBurn(address _account, uint256 _amount) external;\\n    function setProtectedAddress(ILERC20 _token, address _protectedAddress, ProtectionStrategy _strategy) external;\\n\\n    event AdminChange(address indexed _newAdmin);\\n    event RecoveryAdminChange(address indexed _newAdmin);\\n    event PauseAdminChange(address indexed _newAdmin);\\n    event GuardianSet(address indexed _oldGuardian, address indexed _newGuardian);\\n    event NewProtectedAddress(ILERC20 indexed _token, address indexed _protectedAddress, address indexed _strategy);\\n    event RemovedProtectedAddress(ILERC20 indexed _token, address indexed _protectedAddress);\\n    event NewSettlementPeriodProposal(ILERC20 indexed _token, uint256 _seconds);\\n    event SettlementPeriodChange(ILERC20 indexed _token, uint256 _proposedTokenLockTimeframe);\\n    event NewSettlementTimelock(uint256 indexed _timelock);\\n    event NewDexThreshold(uint256 indexed _newThreshold);\\n    event NewDex(address indexed _dexAddress);\\n    event DexRemoval(address indexed _dexAddress);\\n    event NewWhitelistedAddress(address indexed _whitelistAdr);\\n    event WhitelistedAddressRemoval(address indexed _whitelistAdr);\\n    event NewBlacklistedAddress(address indexed _blacklistedAddres);\\n    event AccountBlacklistRemoval(address indexed _adr);\\n    event NewStakingContract(ILssStaking indexed _newAdr);\\n    event NewReportingContract(ILssReporting indexed _newAdr);\\n    event NewGovernanceContract(ILssGovernance indexed _newAdr);\\n    event EmergencyActive(ILERC20 indexed _token);\\n    event EmergencyDeactivation(ILERC20 indexed _token);\\n}\"\r\n    },\r\n    \"contracts/Interfaces/ILosslessGovernance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ILosslessERC20.sol\\\";\\nimport \\\"./ILosslessStaking.sol\\\";\\nimport \\\"./ILosslessReporting.sol\\\";\\nimport \\\"./ILosslessController.sol\\\";\\n\\ninterface ILssGovernance {\\n    function LSS_TEAM_INDEX() external view returns(uint256);\\n    function TOKEN_OWNER_INDEX() external view returns(uint256);\\n    function COMMITEE_INDEX() external view returns(uint256);\\n    function committeeMembersCount() external view returns(uint256);\\n    function walletDisputePeriod() external view returns(uint256);\\n    function losslessStaking() external view returns (ILssStaking);\\n    function losslessReporting() external view returns (ILssReporting);\\n    function losslessController() external view returns (ILssController);\\n    function isCommitteeMember(address _account) external view returns(bool);\\n    function getIsVoted(uint256 _reportId, uint256 _voterIndex) external view returns(bool);\\n    function getVote(uint256 _reportId, uint256 _voterIndex) external view returns(bool);\\n    function isReportSolved(uint256 _reportId) external view returns(bool);\\n    function reportResolution(uint256 _reportId) external view returns(bool);\\n    function getAmountReported(uint256 _reportId) external view returns(uint256);\\n    \\n    function setDisputePeriod(uint256 _timeFrame) external;\\n    function addCommitteeMembers(address[] memory _members) external;\\n    function removeCommitteeMembers(address[] memory _members) external;\\n    function losslessVote(uint256 _reportId, bool _vote) external;\\n    function tokenOwnersVote(uint256 _reportId, bool _vote) external;\\n    function committeeMemberVote(uint256 _reportId, bool _vote) external;\\n    function resolveReport(uint256 _reportId) external;\\n    function proposeWallet(uint256 _reportId, address wallet) external;\\n    function rejectWallet(uint256 _reportId) external;\\n    function retrieveFunds(uint256 _reportId) external;\\n    function retrieveCompensation() external;\\n    function claimCommitteeReward(uint256 _reportId) external;\\n    function setCompensationAmount(uint256 _amount) external;\\n    function losslessClaim(uint256 _reportId) external;\\n\\n    event NewCommitteeMembers(address[] _members);\\n    event CommitteeMembersRemoval(address[] _members);\\n    event LosslessTeamPositiveVote(uint256 indexed _reportId);\\n    event LosslessTeamNegativeVote(uint256 indexed _reportId);\\n    event TokenOwnersPositiveVote(uint256 indexed _reportId);\\n    event TokenOwnersNegativeVote(uint256 indexed _reportId);\\n    event CommitteeMemberPositiveVote(uint256 indexed _reportId, address indexed _member);\\n    event CommitteeMemberNegativeVote(uint256 indexed _reportId, address indexed _member);\\n    event ReportResolve(uint256 indexed _reportId, bool indexed _resolution);\\n    event WalletProposal(uint256 indexed _reportId, address indexed _wallet);\\n    event CommitteeMemberClaim(uint256 indexed _reportId, address indexed _member, uint256 indexed _amount);\\n    event CommitteeMajorityReach(uint256 indexed _reportId, bool indexed _result);\\n    event NewDisputePeriod(uint256 indexed _newPeriod);\\n    event WalletRejection(uint256 indexed _reportId);\\n    event FundsRetrieval(uint256 indexed _reportId, uint256 indexed _amount);\\n    event CompensationRetrieval(address indexed _wallet, uint256 indexed _amount);\\n    event LosslessClaim(ILERC20 indexed _token, uint256 indexed _reportID, uint256 indexed _amount);\\n    event NewCompensationPercentage(uint256 indexed compensationPercentage);\\n}\\n\\n\"\r\n    },\r\n    \"contracts/Interfaces/ILosslessStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ILosslessERC20.sol\\\";\\nimport \\\"./ILosslessGovernance.sol\\\";\\nimport \\\"./ILosslessReporting.sol\\\";\\nimport \\\"./ILosslessController.sol\\\";\\n\\ninterface ILssStaking {\\n  function stakingToken() external returns(ILERC20);\\n  function losslessReporting() external returns(ILssReporting);\\n  function losslessController() external returns(ILssController);\\n  function losslessGovernance() external returns(ILssGovernance);\\n  function stakingAmount() external returns(uint256);\\n  function getVersion() external pure returns (uint256);\\n  function getIsAccountStaked(uint256 _reportId, address _account) external view returns(bool);\\n  function getStakerCoefficient(uint256 _reportId, address _address) external view returns (uint256);\\n  function stakerClaimableAmount(uint256 _reportId) external view returns (uint256);\\n  \\n  function pause() external;\\n  function unpause() external;\\n  function setLssReporting(ILssReporting _losslessReporting) external;\\n  function setStakingToken(ILERC20 _stakingToken) external;\\n  function setLosslessGovernance(ILssGovernance _losslessGovernance) external;\\n  function setStakingAmount(uint256 _stakingAmount) external;\\n  function stake(uint256 _reportId) external;\\n  function stakerClaim(uint256 _reportId) external;\\n\\n  event NewStake(ILERC20 indexed _token, address indexed _account, uint256 indexed _reportId, uint256 _amount);\\n  event StakerClaim(address indexed _staker, ILERC20 indexed _token, uint256 indexed _reportID, uint256 _amount);\\n  event NewStakingAmount(uint256 indexed _newAmount);\\n  event NewStakingToken(ILERC20 indexed _newToken);\\n  event NewReportingContract(ILssReporting indexed _newContract);\\n  event NewGovernanceContract(ILssGovernance indexed _newContract);\\n}\"\r\n    },\r\n    \"contracts/Interfaces/ILosslessReporting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ILosslessERC20.sol\\\";\\nimport \\\"./ILosslessGovernance.sol\\\";\\nimport \\\"./ILosslessStaking.sol\\\";\\nimport \\\"./ILosslessController.sol\\\";\\n\\ninterface ILssReporting {\\n  function reporterReward() external returns(uint256);\\n  function losslessReward() external returns(uint256);\\n  function stakersReward() external returns(uint256);\\n  function committeeReward() external returns(uint256);\\n  function reportLifetime() external view returns(uint256);\\n  function reportingAmount() external returns(uint256);\\n  function reportCount() external returns(uint256);\\n  function stakingToken() external returns(ILERC20);\\n  function losslessController() external returns(ILssController);\\n  function losslessGovernance() external returns(ILssGovernance);\\n  function getVersion() external pure returns (uint256);\\n  function getRewards() external view returns (uint256 _reporter, uint256 _lossless, uint256 _committee, uint256 _stakers);\\n  function report(ILERC20 _token, address _account) external returns (uint256);\\n  function reporterClaimableAmount(uint256 _reportId) external view returns (uint256);\\n  function getReportInfo(uint256 _reportId) external view returns(address _reporter,\\n        address _reportedAddress,\\n        address _secondReportedAddress,\\n        uint256 _reportTimestamps,\\n        ILERC20 _reportTokens,\\n        bool _secondReports,\\n        bool _reporterClaimStatus);\\n  \\n  function pause() external;\\n  function unpause() external;\\n  function setStakingToken(ILERC20 _stakingToken) external;\\n  function setLosslessGovernance(ILssGovernance _losslessGovernance) external;\\n  function setReportingAmount(uint256 _reportingAmount) external;\\n  function setReporterReward(uint256 _reward) external;\\n  function setLosslessReward(uint256 _reward) external;\\n  function setStakersReward(uint256 _reward) external;\\n  function setCommitteeReward(uint256 _reward) external;\\n  function setReportLifetime(uint256 _lifetime) external;\\n  function secondReport(uint256 _reportId, address _account) external;\\n  function reporterClaim(uint256 _reportId) external;\\n  function retrieveCompensation(address _adr, uint256 _amount) external;\\n\\n  event ReportSubmission(ILERC20 indexed _token, address indexed _account, uint256 indexed _reportId, uint256 _amount);\\n  event SecondReportSubmission(ILERC20 indexed _token, address indexed _account, uint256 indexed _reportId);\\n  event NewReportingAmount(uint256 indexed _newAmount);\\n  event NewStakingToken(ILERC20 indexed _token);\\n  event NewGovernanceContract(ILssGovernance indexed _adr);\\n  event NewReporterReward(uint256 indexed _newValue);\\n  event NewLosslessReward(uint256 indexed _newValue);\\n  event NewStakersReward(uint256 indexed _newValue);\\n  event NewCommitteeReward(uint256 indexed _newValue);\\n  event NewReportLifetime(uint256 indexed _newValue);\\n  event ReporterClaim(address indexed _reporter, uint256 indexed _reportId, uint256 indexed _amount);\\n  event CompensationRetrieve(address indexed _adr, uint256 indexed _amount);\\n}\"\r\n    },\r\n    \"contracts/Interfaces/IProtectionStrategy.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\ninterface ProtectionStrategy {\\n    function isTransferAllowed(address token, address sender, address recipient, uint256 amount) external;\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recoveryAdmin_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timelockPeriod_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lossless_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LosslessOff\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LosslessOn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_turnOffDate\",\"type\":\"uint256\"}],\"name\":\"LosslessTurnOffProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"NewRecoveryAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"NewRecoveryAdminProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"acceptRecoveryAdminOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeLosslessTurnOff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeLosslessTurnOn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLosslessOn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lossless\",\"outputs\":[{\"internalType\":\"contract ILssController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"losslessTurnOffTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposeLosslessTurnOff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoveryAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setLosslessAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"from\",\"type\":\"address[]\"}],\"name\":\"transferOutBlacklistedFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"}],\"name\":\"transferRecoveryAdminOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BrainToken", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000caf57d7c954d4b85daedae8fa48aa2e9320456f7000000000000000000000000caf57d7c954d4b85daedae8fa48aa2e9320456f70000000000000000000000000000000000000000000000000000000000015180000000000000000000000000dbb5125ceeaf7233768c84a5df570aeecf0b4634000000000000000000000000000000000000000000000000000000000000000b427261696e20546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005425241494e000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}