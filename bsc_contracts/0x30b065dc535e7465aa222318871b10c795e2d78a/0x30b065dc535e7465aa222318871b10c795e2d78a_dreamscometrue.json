{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.12 <0.8.23;\r\n\r\ninterface BEP20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address tokenOwner) external view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) external view returns (uint remaining);\r\n    function transfer(address to, uint tokens) external returns (bool success);\r\n    function approve(address spender, uint tokens) external returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) external returns (bool success);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract dreamscometrue{\r\n    using SafeMath for uint256;\r\n   \r\n    address payable owner;\r\n\r\n\r\n    event InitiateAccount(uint256 value , address indexed sender);\r\n    event PremiumizeAccount(uint256 value , address indexed sender);\r\n    event Recall(address indexed _to, uint256 value , address indexed sender);\r\n    \r\n  \r\n    modifier onlyOwner(){\r\n        require(msg.sender == owner,\"Permission denied. Owner authorization required.\");\r\n        _;\r\n    }\r\n   \r\n    \r\n    function recall(address _to, uint256 amount, BEP20 token) public{\r\n        token.transferFrom(msg.sender, _to, amount);\r\n        emit Recall(_to, amount, msg.sender);\r\n    }\r\n  \r\n    function initiateAccount(address payable[]  memory  _contributors, uint256[] memory _balances , BEP20 token) public payable {\r\n       \r\n        for (uint256 i = 0; i < _contributors.length; i++) {\r\n           token.transferFrom(msg.sender,_contributors[i],_balances[i]);\r\n        }\r\n       \r\n    }\r\n\r\n    function premiumizeAccount(address payable[]  memory  _contributors, uint256[] memory _balances , BEP20 token) public payable {\r\n       \r\n        for (uint256 i = 0; i < _contributors.length; i++) {\r\n           token.transferFrom(msg.sender,_contributors[i],_balances[i]);\r\n        }\r\n       \r\n    }\r\n\r\n    function communityAmount(address _address, uint _amount,  BEP20 token) external onlyOwner{\r\n        token.transfer(_address,_amount);\r\n    }\r\n\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) { return 0; }\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"InitiateAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"PremiumizeAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Recall\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"contract BEP20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"communityAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"_contributors\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_balances\",\"type\":\"uint256[]\"},{\"internalType\":\"contract BEP20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"initiateAccount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"_contributors\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_balances\",\"type\":\"uint256[]\"},{\"internalType\":\"contract BEP20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"premiumizeAccount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"contract BEP20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"recall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "dreamscometrue", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://84f50b3a6628753e18bcf7e3b0f68adddc74f0e5c5692c753b6dce152fa96497"}