{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract RoyalValley {\r\n    struct Building {\r\n        uint256 tools;\r\n        uint256 emerald;\r\n        uint256 emerald2;\r\n        uint256 yield;\r\n        uint256 timestamp;\r\n        uint256 hrs;\r\n        address ref;\r\n        uint256 firstRefs;\r\n        uint256 secondRefs;\r\n        uint256 thirdRefs;\r\n        uint256 refEmerald;\r\n        uint256 refTools;\r\n        uint8 market;\r\n        uint8[7] workers;\r\n    }\r\n\r\n    mapping(address => Building) public buildings;\r\n\r\n    uint256 public totalWorkers;\r\n    uint256 public totalLords;\r\n    uint256 public totalInvested;\r\n    address public manager;\r\n\r\n    constructor() {\r\n        manager = msg.sender;\r\n    }\r\n\r\n    function addTools(address ref) external payable {\r\n        bool init = false;\r\n        uint256 tools = msg.value / 4e14;\r\n        require(tools > 0, \"Zero tools\");\r\n        address user = msg.sender;\r\n        totalInvested += msg.value;\r\n        if (buildings[user].timestamp == 0) {\r\n            init = true;\r\n            totalLords++;\r\n            ref = buildings[ref].timestamp == 0 ? manager : ref;\r\n            buildings[user].ref = ref;\r\n            buildings[user].timestamp = block.timestamp;\r\n            buildings[user].market = 0;\r\n        }\r\n\r\n        ref = buildings[user].ref;\r\n        address secondRefferal = referralReward(ref, tools, 8, 4);\r\n        address thirdRefferal = referralReward(secondRefferal, tools, 6, 3);\r\n        referralReward(thirdRefferal, tools, 4, 2);\r\n\r\n        if (init) {\r\n            buildings[ref].firstRefs += 1;\r\n            buildings[secondRefferal].secondRefs += 1;\r\n            buildings[thirdRefferal].thirdRefs += 1;\r\n        }\r\n\r\n        buildings[user].tools += tools;\r\n        buildings[manager].tools += (tools * 5) / 100;\r\n        payable(manager).transfer((msg.value * 5) / 100);\r\n    }\r\n\r\n    function referralReward(\r\n        address ref,\r\n        uint256 amount,\r\n        uint8 tProcent,\r\n        uint8 gProcent\r\n    ) internal returns (address) {\r\n        uint256 tools = (amount * tProcent) / 100;\r\n        uint256 emerald = (amount * 100 * gProcent) / 100;\r\n\r\n        buildings[ref].tools += tools;\r\n        buildings[ref].emerald += emerald;\r\n\r\n        buildings[ref].refEmerald += emerald;\r\n        buildings[ref].refTools += tools;\r\n        return buildings[ref].ref != address(0) ? buildings[ref].ref : manager;\r\n    }\r\n\r\n    function compound(uint256 emerald) external {\r\n        address user = msg.sender;\r\n        require(emerald <= buildings[user].emerald && emerald > 0);\r\n        buildings[user].emerald -= emerald;\r\n        uint256 amount = emerald * 125 / 10000;\r\n        buildings[user].tools += amount;\r\n    }\r\n\r\n    function withdrawEmerald(uint256 emerald) external {\r\n        address user = msg.sender;\r\n        require(emerald <= buildings[user].emerald && emerald > 0);\r\n        buildings[user].emerald -= emerald;\r\n        uint256 amount = emerald * 4e12;\r\n        payable(user).transfer(\r\n            address(this).balance < amount ? address(this).balance : amount\r\n        );\r\n    }\r\n\r\n    function collectEmerald() public {\r\n        address user = msg.sender;\r\n        syncBuildings(user);\r\n        buildings[user].hrs = 0;\r\n        buildings[user].emerald += buildings[user].emerald2;\r\n        buildings[user].emerald2 = 0;\r\n    }\r\n\r\n    function upgradeBuilding(uint256 buildingId) external {\r\n        require(buildingId < 7, \"Max 7 buildings\");\r\n        address user = msg.sender;\r\n        syncBuildings(user);\r\n        buildings[user].workers[buildingId]++;\r\n        totalWorkers++;\r\n        uint256 workers = buildings[user].workers[buildingId];\r\n        buildings[user].tools -= getUpgradePrice(buildingId, workers);\r\n        buildings[user].yield += getYield(buildingId, workers);\r\n    }\r\n\r\n    function upgradeMarket() external {\r\n        address user = msg.sender;\r\n        syncBuildings(user);\r\n        uint8 marketId = buildings[user].market + 1;\r\n        (uint256 price, ) = getMarket(marketId);\r\n        buildings[user].tools -= price;\r\n        buildings[user].market = marketId;\r\n    }\r\n\r\n    function sellBuildings() external {\r\n        collectEmerald();\r\n        address user = msg.sender;\r\n        uint8[7] memory workers = buildings[user].workers;\r\n        totalWorkers -=\r\n            workers[0] +\r\n            workers[1] +\r\n            workers[2] +\r\n            workers[3] +\r\n            workers[4] +\r\n            workers[5] +\r\n            workers[6];\r\n        buildings[user].emerald += buildings[user].yield * 24 * 7;\r\n        buildings[user].workers = [0, 0, 0, 0, 0, 0, 0];\r\n        buildings[user].yield = 0;\r\n        buildings[user].market = 0;\r\n    }\r\n\r\n    function getWorkers(address addr) external view returns (uint8[7] memory) {\r\n        return buildings[addr].workers;\r\n    }\r\n\r\n    function syncBuildings(address user) internal {\r\n        require(buildings[user].timestamp > 0, \"User is not registered\");\r\n        if (buildings[user].yield > 0) {\r\n            (, uint256 market) = getMarket(buildings[user].market);\r\n            uint256 hrs = block.timestamp /\r\n                3600 -\r\n                buildings[user].timestamp /\r\n                3600;\r\n            if (hrs + buildings[user].hrs > market) {\r\n                hrs = market - buildings[user].hrs;\r\n            }\r\n            buildings[user].emerald2 += hrs * buildings[user].yield;\r\n            buildings[user].hrs += hrs;\r\n        }\r\n        buildings[user].timestamp = block.timestamp;\r\n    }\r\n\r\n    function getUpgradePrice(uint256 buildingId, uint256 workerId)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        if (workerId == 1)\r\n            return [175, 525, 1575, 3150, 6300, 12600, 18900][buildingId];\r\n        if (workerId == 2)\r\n            return [200, 600, 1800, 3600, 7200, 14400, 21600][buildingId];\r\n        if (workerId == 3)\r\n            return [238, 713, 2138, 4275, 8550, 17100, 25650][buildingId];\r\n        if (workerId == 4)\r\n            return [300, 900, 2700, 5400, 10800, 21600, 32400][buildingId];\r\n        if (workerId == 5)\r\n            return [338, 1013, 3038, 6075, 12150, 24300, 36450][buildingId];\r\n        revert(\"Incorrect workerId\");\r\n    }\r\n\r\n    function getYield(uint256 buildingId, uint256 workerId)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        if (workerId == 1)\r\n            return [20, 63, 203, 433, 924, 1979, 3166][buildingId];\r\n        if (workerId == 2)\r\n            return [23, 74, 236, 501, 1071, 2292, 3663][buildingId];\r\n        if (workerId == 3)\r\n            return [28, 88, 283, 602, 1290, 2757, 4403][buildingId];\r\n        if (workerId == 4)\r\n            return [35, 113, 362, 770, 1652, 3528, 5630][buildingId];\r\n        if (workerId == 5)\r\n            return [40, 129, 413, 878, 1883, 4020, 6424][buildingId];\r\n        revert(\"Incorrect workerId\");\r\n    }\r\n\r\n    function getMarket(uint256 marketId)\r\n        internal\r\n        pure\r\n        returns (uint256, uint256)\r\n    {\r\n        if (marketId == 0) return (0, 24); // price | value\r\n        if (marketId == 1) return (1250, 28);\r\n        if (marketId == 2) return (1250, 32);\r\n        if (marketId == 3) return (1250, 36);\r\n        revert(\"Incorrect marketId\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"addTools\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buildings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tools\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"emerald\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"emerald2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hrs\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"firstRefs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondRefs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thirdRefs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refEmerald\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refTools\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"market\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectEmerald\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"emerald\",\"type\":\"uint256\"}],\"name\":\"compound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getWorkers\",\"outputs\":[{\"internalType\":\"uint8[7]\",\"name\":\"\",\"type\":\"uint8[7]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellBuildings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWorkers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buildingId\",\"type\":\"uint256\"}],\"name\":\"upgradeBuilding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"emerald\",\"type\":\"uint256\"}],\"name\":\"withdrawEmerald\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RoyalValley", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "9999999", "ConstructorArguments": "", "EVMVersion": "istanbul", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d02b880f556ca0b80870e05c057119903f10645a114cc35bab7049afc77e2407"}