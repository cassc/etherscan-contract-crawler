{"SourceCode": "/**\r\n *Submitted for verification at bscscan.com on 2023-07-10\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.14;\r\n\r\ninterface IBEP20 {\r\nfunction totalSupply() external view returns (uint256);\r\nfunction decimals() external view returns (uint8);\r\nfunction symbol() external view returns (string memory);\r\nfunction name() external view returns (string memory);\r\nfunction getOwner() external view returns (address);\r\n\r\nfunction balanceOf(address account) external view returns (uint256);\r\nfunction allowance(address _owner, address spender) external view returns (uint256);\r\n\r\nfunction transfer(address recipient, uint256 amount) external returns (bool);\r\nfunction approve(address spender, uint256 amount) external returns (bool);\r\nfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\nevent Transfer(address indexed from, address indexed to, uint256 value);\r\nevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract HMTToken is IBEP20 {\r\n\r\nuint256 private _totalSupply;\r\nuint8 private _decimals = 18;\r\nstring private _symbol = \"HMT\";\r\nstring private _name= \"HOPEMONEY TOKEN\";\r\naddress private _owner;\r\n\r\nmapping(address => uint256) _balances;\r\n\r\nmapping(address => mapping (address => uint256)) allowed;\r\n\r\nusing SafeMath for uint256;\r\n\r\n\r\nconstructor(uint256 _initialSupply)  {\r\n_owner = msg.sender;\r\n_totalSupply = _initialSupply;\r\n_balances[msg.sender] = _totalSupply;\r\n}\r\n\r\nfunction decimals() external view returns (uint8) {\r\nreturn _decimals;\r\n}\r\n\r\nfunction symbol() external view returns (string memory) {\r\n\treturn _symbol;\r\n}\r\n\r\nfunction name() external view returns (string memory) {\r\nreturn _name;\r\n}\r\n\r\nfunction totalSupply() external view returns (uint256) {\r\n  return _totalSupply;\r\n}\r\n\r\n\r\nfunction getOwner() public view returns (address) {\r\n\treturn _owner;\r\n}\r\n\r\nfunction balanceOf(address account) external view returns (uint256) {\r\n\treturn _balances[account];\r\n}\r\n\r\nfunction transfer(address receiver, uint256 numTokens) external returns (bool) {\r\n\trequire(numTokens <= _balances[msg.sender],\"No of tokens should be less that balance\");\r\n\t_balances[msg.sender] = _balances[msg.sender].sub(numTokens);\r\n\t_balances[receiver] = _balances[receiver].add(numTokens);\r\n\temit Transfer(msg.sender, receiver, numTokens);\r\n\treturn true;\r\n}\r\n\r\nfunction approve(address delegate, uint256 numTokens)external returns (bool) {\r\n\tallowed[msg.sender][delegate] = numTokens;\r\n\temit Approval(msg.sender, delegate, numTokens);\r\n\treturn true;\r\n}\r\n\r\nfunction allowance(address owner, address delegate) external view returns (uint) {\r\n\treturn allowed[owner][delegate];\r\n}\r\n\r\nfunction transferFrom(address owner, address buyer, uint256 numTokens) external returns (bool) {\r\n\trequire(numTokens <= _balances[owner]);\r\n\trequire(numTokens <= allowed[owner][msg.sender]);\r\n\r\n\t_balances[owner] = _balances[owner].sub(numTokens);\r\n\tallowed[owner][msg.sender] = allowed[owner][msg.sender].sub(numTokens);\r\n\t_balances[buyer] = _balances[buyer].add(numTokens);\r\n\temit Transfer(owner, buyer, numTokens);\r\n\treturn true;\r\n}\r\n}\r\n\r\nlibrary SafeMath {\r\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n  assert(b <= a);\r\n  return a - b;\r\n}\r\n\r\nfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n  uint256 c = a + b;\r\n  assert(c >= a);\r\n  return c;\r\n}\r\n}\r\n\r\ncontract HMTTokenSale {\r\naddress payable admin;\r\nHMTToken public tokenContract;\r\nuint256 public tokenPrice;\r\nuint256 public tokensSold;\r\n\r\nevent Sell(address _buyer, uint256 _amount);\r\n\r\nevent Temp(uint256 _tokens, uint256 _amount);\r\nevent Temp2(uint256 _tokens, uint256 _amount);\r\n\r\n\r\nconstructor(HMTToken _tokenContract, uint256 _tokensSold)  {\r\n\tadmin = payable(msg.sender);\r\n\ttokenContract = _tokenContract;\r\n\ttokensSold = _tokensSold;\r\n}\r\n\r\nfunction settokenPrice(uint256 _tokenPrice) public {\r\n\trequire(msg.sender == admin);\r\n\ttokenPrice = _tokenPrice;\r\n}\r\n\r\nfunction multiply(uint x, uint y) internal pure returns (uint z) {\r\n\tunchecked {\r\n\t\trequire(y == 0 || (z = x * y) / y == x);\r\n\t}\r\n}\r\n\r\nfunction buyTokens(uint256 _numberOfTokens) public payable {\r\n\tuint256 _bnbvalue = (_numberOfTokens/1000000000000000000)*tokenPrice;\r\n\trequire(msg.value >= _bnbvalue);\r\n\trequire(tokenContract.balanceOf(address(this)) >= _numberOfTokens,\"Not enough tokens\");\r\n\trequire(tokenContract.transfer(msg.sender, _numberOfTokens),\"Transfer failed\");\r\n\r\n\ttokensSold += _numberOfTokens;\r\n\r\n\temit Sell(msg.sender, _numberOfTokens);\r\n}\r\n\r\n//x\r\n\r\nfunction endSale() public payable {\r\n\trequire(msg.sender == admin);\r\n\trequire(tokenContract.transfer(admin, tokenContract.balanceOf(address(this))));\r\n\r\n\t// UPDATE: Let's not destroy the contract here\r\n\t// Just transfer the balance to the admin\r\n\tadmin.transfer(address(address(this)).balance);\r\n}\r\n\r\nfunction withdrawal(address payable _toUser, uint _amount) public returns (bool) {\r\n\trequire(msg.sender == admin, \"only Owner Wallet\");\r\n\trequire(_toUser != address(0), \"Invalid Address\");\r\n\trequire(address(this).balance >= _amount, \"Insufficient balance\");\r\n\r\n\t(_toUser).transfer(_amount);\r\n\treturn true;\r\n}\r\n\r\nfunction buyadmin(address _toUser, uint256 _numberOfTokens) public {\r\n\trequire(msg.sender == admin, \"only Owner Wallet\");\r\n\trequire(_toUser != address(0), \"Invalid Address\");\r\n\trequire(tokenContract.balanceOf(address(this)) >= _numberOfTokens,\"Not enough tokens\");\r\n\trequire(tokenContract.transfer(_toUser, _numberOfTokens),\"Transfer failed\");\r\n\r\n\ttokensSold += _numberOfTokens;\r\n\r\n\temit Sell(msg.sender, _numberOfTokens);\r\n}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract HMTToken\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokensSold\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Temp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Temp2\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toUser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"buyadmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endSale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenPrice\",\"type\":\"uint256\"}],\"name\":\"settokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"internalType\":\"contract HMTToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_toUser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "HMTTokenSale", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000f3d6cf3f028032b8a82c0fa5091f1e31aba611160000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0d1c03706a1b72c7b9b019c637955cdb51246f0a2e0403bca4e3e1b224f31f98"}