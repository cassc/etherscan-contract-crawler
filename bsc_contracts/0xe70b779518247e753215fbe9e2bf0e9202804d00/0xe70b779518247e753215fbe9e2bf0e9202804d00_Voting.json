{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/royal-empress/contracts/Voting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\n\\n// Deployed with the Atlas IDE\\n// https://app.atlaszk.com\\n\\npragma solidity ^0.8.19;\\n\\ncontract Voting {\\n    // Model a Candidate\\n    struct Candidate {\\n        uint id;\\n        string name;\\n        uint voteCount;\\n    }\\n\\n    // Store accounts that have voted\\n    mapping(address => bool) public voters;\\n    // Store Candidates\\n    // Fetch Candidate\\n    mapping(uint => Candidate) public candidates;\\n    // Store Candidates Count\\n    uint public candidatesCount;\\n\\n    // voted event\\n    event votedEvent (\\n        uint indexed _candidateId\\n    );\\n\\n    constructor () public {\\n        addCandidate(\\\"Candidate 1\\\");\\n        addCandidate(\\\"Candidate 2\\\");\\n    }\\n\\n    function addCandidate (string memory _name) private {\\n        candidatesCount ++;\\n        candidates[candidatesCount] = Candidate(candidatesCount, _name, 0);\\n    }\\n\\n    function vote (uint _candidateId) public {\\n        // require that they haven't voted before\\n        require(!voters[msg.sender]);\\n\\n        // require a valid candidate\\n        require(_candidateId > 0 && _candidateId <= candidatesCount);\\n\\n        // record that voter has voted\\n        voters[msg.sender] = true;\\n\\n        // update candidate vote Count\\n        candidates[_candidateId].voteCount ++;\\n\\n        // trigger voted event\\n        emit votedEvent(_candidateId);\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_candidateId\",\"type\":\"uint256\"}],\"name\":\"votedEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"candidates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"voteCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"candidatesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_candidateId\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Voting", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}