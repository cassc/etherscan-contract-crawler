{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity 0.8.17;\r\n\r\n// IERC20 standard interface\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// Ownership smart contract\r\nabstract contract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface AggregatorV3Interface {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function description() external view returns (string memory);\r\n\r\n    function version() external view returns (uint256);\r\n\r\n    function getRoundData(uint80 _roundId)\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n\r\n    function latestRoundData()\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n}\r\n\r\n// Main Token sale smart contract\r\ncontract PRESALE is Ownable {\r\n    // Live BNB price variable\r\n    AggregatorV3Interface internal priceFeed;\r\n\r\n    //public variables\r\n    IBEP20 public token;\r\n    address public busdToken;\r\n    address public USDTToken;\r\n    address public usdcToken;\r\n\r\n    uint256 public exchangeRateInBUSD; // exchange rate => 1 BUSD = how many tokens\r\n\r\n    // Events\r\n    event TokensPurchasedWithBNB(\r\n        address indexed buyer,\r\n        uint256 amount,\r\n        uint256 tokenPaid\r\n    );\r\n    event TokensPurchasedWithUSDT(\r\n        address indexed buyer,\r\n        address tokenAddress,\r\n        uint256 amount\r\n    );\r\n\r\n    constructor(IBEP20 _token, uint256 _exchangeRateInBUSD) {\r\n        token = _token;\r\n        exchangeRateInBUSD = _exchangeRateInBUSD;\r\n        priceFeed = AggregatorV3Interface(\r\n            0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE\r\n        );\r\n    }\r\n\r\n    function updateexchangeRateInBUSD(uint256 _exchangeRate)\r\n        external\r\n        onlyOwner\r\n    {\r\n        exchangeRateInBUSD = _exchangeRate;\r\n    }\r\n\r\n    function setBUSDToken(address _busdToken) external onlyOwner {\r\n        busdToken = _busdToken;\r\n    }\r\n\r\n    function setUSDTToken(address _usdcToken) external onlyOwner {\r\n        USDTToken = _usdcToken;\r\n    }\r\n\r\n    function setUSDCToken(address _usdcToken) external onlyOwner {\r\n        usdcToken = _usdcToken;\r\n    }\r\n\r\n    function getLatestPriceBNB() public view returns (int256) {\r\n        (\r\n            uint80 roundID,\r\n            int256 price,\r\n            uint256 startedAt,\r\n            uint256 timeStamp,\r\n            uint80 answeredInRound\r\n        ) = priceFeed.latestRoundData();\r\n        return price / 100000000;\r\n    }\r\n\r\n    /**\r\n     * Token Buy\r\n     */\r\n\r\n    function buyTokensWithBNB() external payable {\r\n        require(msg.value > 0, \"You need to send some BNB\");\r\n        int256 latestPrice = getLatestPriceBNB();\r\n        uint256 nativeprice = uint256(latestPrice);\r\n        uint256 tokensToBuy = msg.value * (exchangeRateInBUSD * nativeprice);\r\n\r\n        require(\r\n            token.balanceOf(address(this)) >= tokensToBuy / 1000000000,\r\n            \"Not enough tokens left for sale\"\r\n        );\r\n\r\n        token.transfer(msg.sender, tokensToBuy/ 1000000000);\r\n        payable(owner()).transfer(msg.value);\r\n\r\n        emit TokensPurchasedWithBNB(msg.sender, msg.value, tokensToBuy/ 1000000000);\r\n    }\r\n\r\n    function buyTokensWithBUSD(uint256 usdtAmount) external {\r\n        require(\r\n            IBEP20(busdToken).balanceOf(msg.sender) >= usdtAmount,\r\n            \"Not suffiecient balance\"\r\n        );\r\n        require(usdtAmount > 0, \"Token amount should be greater than zero\");\r\n\r\n        uint256 amount = usdtAmount * exchangeRateInBUSD;\r\n\r\n        require(\r\n            token.balanceOf(address(this)) >= amount,\r\n            \"Not enough tokens left for sale\"\r\n        );\r\n\r\n        IBEP20(busdToken).transferFrom(msg.sender, owner(), usdtAmount);\r\n\r\n        token.transfer(msg.sender, amount/ 1000000000);\r\n\r\n        emit TokensPurchasedWithUSDT(msg.sender, busdToken, amount/ 1000000000);\r\n    }\r\n\r\n    function buyTokensWithUSDT(uint256 usdtAmount) external {\r\n        require(\r\n            IBEP20(USDTToken).balanceOf(msg.sender) >= usdtAmount,\r\n            \"Not suffiecient balance\"\r\n        );\r\n        require(usdtAmount > 0, \"Token amount should be greater than zero\");\r\n\r\n        uint256 amount = usdtAmount * exchangeRateInBUSD;\r\n\r\n        require(\r\n            token.balanceOf(address(this)) >= amount / 1000000000,\r\n            \"Not enough tokens left for sale\"\r\n        );\r\n\r\n        IBEP20(USDTToken).transferFrom(msg.sender, owner(), usdtAmount);\r\n\r\n        token.transfer(msg.sender, amount/ 1000000000);\r\n\r\n        emit TokensPurchasedWithUSDT(msg.sender, USDTToken, amount);\r\n    }\r\n\r\n    function buyTokensWithUSDC(uint256 usdtAmount) external {\r\n        require(\r\n            IBEP20(usdcToken).balanceOf(msg.sender) >= usdtAmount,\r\n            \"Not suffiecient balance\"\r\n        );\r\n        require(usdtAmount > 0, \"Token amount should be greater than zero\");\r\n\r\n        uint256 amount = usdtAmount * exchangeRateInBUSD;\r\n\r\n        require(\r\n            token.balanceOf(address(this)) >= amount / 1000000000,\r\n            \"Not enough tokens left for sale\"\r\n        );\r\n\r\n        IBEP20(usdcToken).transferFrom(msg.sender, owner(), usdtAmount / 1000000000);\r\n\r\n        token.transfer(msg.sender, amount / 1000000000);\r\n\r\n        emit TokensPurchasedWithUSDT(msg.sender, usdcToken, amount);\r\n    }\r\n\r\n    /**\r\n     * This lets owner to withdraw any leftover tokens.\r\n     */\r\n    function withdrawLeftoverTokens(address tokenAddress) external onlyOwner {\r\n        uint256 balance = IBEP20(tokenAddress).balanceOf(address(this));\r\n        require(balance > 0, \"No token balance to withdraw\");\r\n        IBEP20(tokenAddress).transfer(msg.sender, balance);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_exchangeRateInBUSD\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenPaid\",\"type\":\"uint256\"}],\"name\":\"TokensPurchasedWithBNB\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchasedWithUSDT\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"USDTToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busdToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTokensWithBNB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"buyTokensWithBUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"buyTokensWithUSDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"buyTokensWithUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRateInBUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPriceBNB\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_busdToken\",\"type\":\"address\"}],\"name\":\"setBUSDToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdcToken\",\"type\":\"address\"}],\"name\":\"setUSDCToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdcToken\",\"type\":\"address\"}],\"name\":\"setUSDTToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_exchangeRate\",\"type\":\"uint256\"}],\"name\":\"updateexchangeRateInBUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawLeftoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PRESALE", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000001649d238d2c2f9faf79db2b2cb4d8a0094d2c710000000000000000000000000000000000000000000000000000000000000019", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a5ef3de253c5baeddcaa9568d5585984236d0bb46f0b37d684fa9281d305c486"}