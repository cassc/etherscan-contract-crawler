{"SourceCode": "//SPDX-License-Identifier: MIT\r\n/* \r\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\r\n\u2500\u2500\u2584\u2584\u2500\u2500\u2500\u2500\u2500\u2584\u2500\u2500\u2500\u2584\u2584\u2584\u2584\u2584\r\n\u2584\u2580\u2500\u2500\u2580\u2584\u2500\u2500\u2588\u2500\u2588\u2500\u2500\u2588\u2500\u2500\u2500\u2588\r\n\u2588\u2500\u2500\u2500\u2500\u2588\u2500\u2588\u2500\u2500\u2500\u2588\u2500\u2588\u2500\u2500\u2500\u2588\r\n\u2500\u2580\u2584\u2584\u2580\u2500\u2590\u2584\u2584\u2584\u2584\u2584\u258c\u2588\u2584\u2584\u2584\u2588\r\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\r\n\r\n  \u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588   \u2588    \u2588\u2588  \u2588\u2588\u2593\u2593\u2588\u2588\u2588\u2588\u2588\u2584      \u2584\u2588\u2588\u2588\u2588  \u2584\u2584\u2584       \u2588\u2588\u2588\u2584 \u2584\u2588\u2588\u2588\u2593\u2593\u2588\u2588\u2588\u2588\u2588   2 \r\n\u2592\u2588\u2588    \u2592 \u2592\u2588\u2588\u2593  \u2588\u2588\u2592 \u2588\u2588  \u2593\u2588\u2588\u2592\u2593\u2588\u2588\u2592\u2592\u2588\u2588\u2580 \u2588\u2588\u258c    \u2588\u2588\u2592 \u2580\u2588\u2592\u2592\u2588\u2588\u2588\u2588\u2584    \u2593\u2588\u2588\u2592\u2580\u2588\u2580 \u2588\u2588\u2592\u2593\u2588   \u2580    \r\n\u2591 \u2593\u2588\u2588\u2584   \u2592\u2588\u2588\u2592  \u2588\u2588\u2591\u2593\u2588\u2588  \u2592\u2588\u2588\u2591\u2592\u2588\u2588\u2592\u2591\u2588\u2588   \u2588\u258c   \u2592\u2588\u2588\u2591\u2584\u2584\u2584\u2591\u2592\u2588\u2588  \u2580\u2588\u2584  \u2593\u2588\u2588    \u2593\u2588\u2588\u2591\u2592\u2588\u2588\u2588      \r\n  \u2592   \u2588\u2588\u2592\u2591\u2588\u2588  \u2588\u2580 \u2591\u2593\u2593\u2588  \u2591\u2588\u2588\u2591\u2591\u2588\u2588\u2591\u2591\u2593\u2588\u2584   \u258c   \u2591\u2593\u2588  \u2588\u2588\u2593\u2591\u2588\u2588\u2584\u2584\u2584\u2584\u2588\u2588 \u2592\u2588\u2588    \u2592\u2588\u2588 \u2592\u2593\u2588  \u2584    \r\n\u2592\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2592\u2591\u2592\u2588\u2588\u2588\u2592\u2588\u2584 \u2592\u2592\u2588\u2588\u2588\u2588\u2588\u2593 \u2591\u2588\u2588\u2591\u2591\u2592\u2588\u2588\u2588\u2588\u2593    \u2591\u2592\u2593\u2588\u2588\u2588\u2580\u2592 \u2593\u2588   \u2593\u2588\u2588\u2592\u2592\u2588\u2588\u2592   \u2591\u2588\u2588\u2592\u2591\u2592\u2588\u2588\u2588\u2588\u2592   \r\n\u2592 \u2592\u2593\u2592 \u2592 \u2591\u2591\u2591 \u2592\u2592\u2591 \u2592 \u2591\u2592\u2593\u2592 \u2592 \u2592 \u2591\u2593   \u2592\u2592\u2593  \u2592     \u2591\u2592   \u2592  \u2592\u2592   \u2593\u2592\u2588\u2591\u2591 \u2592\u2591   \u2591  \u2591\u2591\u2591 \u2592\u2591 \u2591   \r\n\u2591 \u2591\u2592  \u2591 \u2591 \u2591 \u2592\u2591  \u2591 \u2591\u2591\u2592\u2591 \u2591 \u2591  \u2592 \u2591 \u2591 \u2592  \u2592      \u2591   \u2591   \u2592   \u2592\u2592 \u2591\u2591  \u2591      \u2591 \u2591 \u2591  \u2591   \r\n\u2591  \u2591  \u2591     \u2591   \u2591  \u2591\u2591\u2591 \u2591 \u2591  \u2592 \u2591 \u2591 \u2591  \u2591    \u2591 \u2591   \u2591   \u2591   \u2592   \u2591      \u2591      \u2591      \r\n      \u2591      \u2591       \u2591      \u2591     \u2591             \u2591       \u2591  \u2591       \u2591      \u2591  \u2591   \r\n                                \u2591                                                \r\nWebsite: http://squidtwo.io\r\n */\r\n// o/\r\npragma solidity 0.8.15;\r\n//interfaces\r\ninterface IPancakeV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\ninterface IPancakeV2Router02 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n}\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n// contracts\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }   \r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n    function getTime() public view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n}\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    constructor (string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 9;\r\n    }\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n        return true;\r\n    }\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        return true;\r\n    }\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[sender] = senderBalance - amount;\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        _balances[account] = accountBalance - amount;\r\n        _totalSupply -= amount;\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\ncontract SquidGameTwo is ERC20, Ownable {\r\n//custom\r\n    IPancakeV2Router02 public pancakeV2Router;\r\n//bool\r\n    bool public swapAndLiquifyEnabled = true;\r\n    bool public marketActive;\r\n    bool public limitSells = true;\r\n    bool public limitBuys = true;\r\n    bool public feeStatus = true;\r\n    bool public buyFeeStatus = true;\r\n    bool public sellFeeStatus = true;\r\n    bool public blockMultiBuys = true;\r\n    bool public addLiquidityEnabled = true;\r\n    bool private isInternalTransaction;\r\n//address\r\n    address public pancakeV2Pair;\r\n    address public marketingAddress = 0x07AfB4dA9B4fC723779c6554d52db647F0a8d8c7;\r\n    address public devAddress = 0x8DFdEAFCba7064b8d854EC82822D13847bfa8EE1;\r\n    address public teamAddress = 0x5D0e624Ac7B6d1BAFF95eaaB42996CdAECB59cF9;\r\n    address public liquidityAddress = 0x07AfB4dA9B4fC723779c6554d52db647F0a8d8c7;\r\n//uint\r\n    uint public buyMarketingFee = 40;\r\n    uint public sellMarketingFee = 40;\r\n    uint public buyLiquidityFee = 40;\r\n    uint public sellLiquidityFee = 40;\r\n    uint public buyDevFee = 10;\r\n    uint public sellDevFee = 10;\r\n    uint public buyTeamFee = 10;\r\n    uint public sellTeamFee = 10;\r\n    uint public totalBuyFee = buyMarketingFee + buyLiquidityFee + buyDevFee + buyTeamFee;\r\n    uint public totalSellFee = sellMarketingFee + sellLiquidityFee + sellDevFee + sellTeamFee;\r\n    uint public maxBuyTxAmount;\r\n    uint public maxSellTxAmount;\r\n    uint public minimumTokensBeforeSwap = 50_000 * 10 ** decimals();\r\n    uint public tokensToSwap = 50_000 * 10 ** decimals();\r\n    uint public intervalSecondsForSwap = 30;\r\n    uint public minimumWeiForTokenomics = 1 * 10**17; // 0.1 BNB\r\n    uint private startTimeForSwap;\r\n    uint private marketActiveAt;\r\n//struct\r\n    struct userData {uint lastBuyTime;}\r\n//mapping\r\n    mapping (address => bool) public premarketUser;\r\n    mapping (address => bool) public excludedFromFees;\r\n    mapping (address => bool) public automatedMarketMakerPairs;\r\n    mapping (address => userData) public userLastTradeData;\r\n//events\r\n    event MarketingFeeCollected(uint amount);\r\n    event DevFeeCollected(uint amount);\r\n    event TeamFeeCollected(uint amount);\r\n    event LiquidityFeeCollected(uint amount);\r\n    event PancakeRouterUpdated(address indexed newAddress, address indexed newPair);\r\n    event PancakePairUpdated(address indexed newAddress, address indexed newPair);\r\n    event TokenRemovedFromContract(address indexed tokenAddress, uint256 amount);\r\n    event BnbRemovedFromContract(uint256 amount);\r\n    event MarketStatusChanged(bool status, uint256 date);\r\n    event LimitSellChanged(bool status);\r\n    event LimitBuyChanged(bool status);\r\n    event MinimumWeiChanged(uint256 amount);\r\n    event MaxSellChanged(uint256 amount);\r\n    event MaxBuyChanged(uint256 amount);\r\n    event FeesChanged(uint256 buyMarketingFee, uint256 buyLiquidityFee, uint256 buyDevFee,uint256 buyTeamFee,\r\n                      uint256 sellMarketingFee, uint256 sellLiquidityFee,uint256 sellDevFee,uint256 sellTeamFee);\r\n    event FeesAddressesChanged(address marketing, address liquidity, address team, address dev);\r\n    event FeesStatusChanged(bool feesActive, bool buy, bool sell);\r\n    event SwapSystemChanged(bool status, uint256 intervalSecondsToWait, uint256 minimumToSwap, uint256 tokensToSwap);\r\n    event PremarketUserChanged(bool status, address indexed user);\r\n    event ExcludeFromFeesChanged(bool status, address indexed user);\r\n    event AutomatedMarketMakerPairsChanged(bool status, address indexed target);\r\n    event ContractSwap(uint256 date, uint256 amount);\r\n    event BlockMultiBuysChange(bool status);\r\n    event AddLiquidityEnabled(bool state);\r\n// constructor\r\n    constructor() ERC20(\"Squid Game 2.0\", \"SQUID2\") {\r\n        uint total_supply = 100_000_000_000 * 10 ** decimals();\r\n        // set gvars\r\n        IPancakeV2Router02 _pancakeV2Router = IPancakeV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        pancakeV2Router = _pancakeV2Router;\r\n        maxSellTxAmount = total_supply / 100; // 1% supply\r\n        maxBuyTxAmount = total_supply / 100; // 1% supply\r\n        //spawn pair\r\n        pancakeV2Pair = IPancakeV2Factory(_pancakeV2Router.factory())\r\n        .createPair(address(this), _pancakeV2Router.WETH());\r\n        // mappings\r\n        excludedFromFees[address(this)] = true;\r\n        excludedFromFees[owner()] = true;\r\n        excludedFromFees[liquidityAddress] = true;\r\n        excludedFromFees[marketingAddress] = true;\r\n        excludedFromFees[teamAddress] = true;\r\n        excludedFromFees[devAddress] = true;\r\n        premarketUser[owner()] = true;\r\n        automatedMarketMakerPairs[pancakeV2Pair] = true;\r\n        _mint(owner(), total_supply); // mint is used only here\r\n    }\r\n    // accept bnb for autoswap\r\n    receive() external payable {}\r\n// utility functions\r\n    function updatePancakeV2Router(address newAddress, bool _createPair, address _pair) external onlyOwner {\r\n        pancakeV2Router = IPancakeV2Router02(newAddress);\r\n        if(_createPair) {\r\n            address _pancakeV2Pair = IPancakeV2Factory(pancakeV2Router.factory())\r\n                .createPair(address(this), pancakeV2Router.WETH());\r\n            pancakeV2Pair = _pancakeV2Pair;\r\n            emit PancakePairUpdated(newAddress,pancakeV2Pair);\r\n        } else {\r\n            pancakeV2Pair = _pair;\r\n        }\r\n        emit PancakeRouterUpdated(newAddress,pancakeV2Pair);\r\n    }\r\n    // to take leftover(tokens) from contract\r\n    function transferToken(address _token, address _to, uint _value) external onlyOwner returns(bool _sent){\r\n        if(_value == 0) {\r\n            _value = IERC20(_token).balanceOf(address(this));\r\n        } \r\n        _sent = IERC20(_token).transfer(_to, _value);\r\n        emit TokenRemovedFromContract(_token, _value);\r\n    }\r\n    // to take leftover(bnb) from contract\r\n    function transferBNB() external onlyOwner {\r\n        uint balance = address(this).balance;\r\n        payable(owner()).transfer(balance);\r\n        emit BnbRemovedFromContract(balance);\r\n    }\r\n//switch functions\r\n    function switchMarketActive(bool _state) external onlyOwner {\r\n        marketActive = _state;\r\n        if(_state) {\r\n            marketActiveAt = block.timestamp;\r\n        }\r\n        emit MarketStatusChanged(_state, block.timestamp);\r\n    }\r\n    function switchLimitSells(bool _state) external onlyOwner {\r\n        limitSells = _state;\r\n        emit LimitSellChanged(_state);\r\n    }\r\n    function switchLimitBuys(bool _state) external onlyOwner {\r\n        limitBuys = _state;\r\n        emit LimitBuyChanged(_state);\r\n    }\r\n//set functions\r\n    function setBlockMultiBuys(bool _status) external onlyOwner {\r\n        blockMultiBuys = _status;\r\n        emit BlockMultiBuysChange(_status);\r\n    }\r\n    function setminimumWeiForTokenomics(uint _value) external onlyOwner {\r\n        minimumWeiForTokenomics = _value;\r\n        emit MinimumWeiChanged(_value);\r\n    }\r\n    function setFeesAddress(address marketing, address liquidity, address team, address dev) external onlyOwner {\r\n        marketingAddress = marketing;\r\n        liquidityAddress = liquidity;\r\n        teamAddress = team;\r\n        devAddress = dev;\r\n        emit FeesAddressesChanged(marketing,liquidity,team,dev);\r\n    }\r\n    function setMaxSellTxAmount(uint _value) external onlyOwner {\r\n        maxSellTxAmount = _value*10**decimals();\r\n        require(maxSellTxAmount >= totalSupply() ,\"maxSellTxAmount should be at least 0.5% of total supply.\");\r\n        emit MaxSellChanged(_value);\r\n    }\r\n    function setMaxBuyTxAmount(uint _value) external onlyOwner {\r\n        maxBuyTxAmount = _value*10**decimals();\r\n        require(maxBuyTxAmount >= totalSupply() ,\"maxBuyTxAmount should be at least 0.5% of total supply.\");\r\n        emit MaxBuyChanged(maxBuyTxAmount);\r\n\r\n    }\r\n    function setFee(uint Buymarketing, uint Buyliquidity,uint Sellmarketing, uint Sellliquidity,\r\n    uint Buydev, uint Buyteam,uint Selldev, uint Sellteam) external onlyOwner {\r\n        //buy\r\n        buyMarketingFee = Buymarketing;\r\n        buyLiquidityFee = Buyliquidity;\r\n        buyDevFee = Buydev;\r\n        buyTeamFee = Buyteam;\r\n        totalBuyFee = buyMarketingFee + buyLiquidityFee + buyDevFee + buyTeamFee;\r\n        //sell\r\n        sellMarketingFee = Sellmarketing;\r\n        sellLiquidityFee = Sellliquidity;\r\n        sellDevFee = Selldev;\r\n        sellTeamFee = Sellteam;\r\n        totalSellFee = sellMarketingFee + sellLiquidityFee + sellDevFee + sellTeamFee;\r\n        //checks\r\n        require(totalBuyFee + totalSellFee <= 200,\"Total fees cannot be over 20%\");\r\n        emit FeesChanged(buyMarketingFee,buyLiquidityFee,buyDevFee,Buyteam,sellMarketingFee,sellLiquidityFee,sellDevFee,sellTeamFee);\r\n    }\r\n    function setAddLiquidityEnabled(bool state) external onlyOwner {\r\n        addLiquidityEnabled = state;\r\n        emit AddLiquidityEnabled(state);\r\n    }\r\n    function setFeeStatus(bool buy, bool sell, bool _state) external onlyOwner {\r\n        feeStatus = _state;\r\n        buyFeeStatus = buy;\r\n        sellFeeStatus = sell;\r\n        emit FeesStatusChanged(_state,buy,sell);\r\n    }\r\n    function setSwapAndLiquify(bool _state, uint _intervalSecondsForSwap, uint _minimumTokensBeforeSwap, uint _tokensToSwap) external onlyOwner {\r\n        swapAndLiquifyEnabled = _state;\r\n        intervalSecondsForSwap = _intervalSecondsForSwap;\r\n        minimumTokensBeforeSwap = _minimumTokensBeforeSwap*10**decimals();\r\n        tokensToSwap = _tokensToSwap*10**decimals();\r\n        require(tokensToSwap <= minimumTokensBeforeSwap,\"You cannot swap more then the minimum amount\");\r\n        require(tokensToSwap <= totalSupply() / 1000,\"token to swap limited to 0.1% supply\");\r\n        emit SwapSystemChanged(_state,_intervalSecondsForSwap,_minimumTokensBeforeSwap,_tokensToSwap);\r\n    }\r\n// mappings functions\r\n    function editPremarketUser(address _target, bool _status) external onlyOwner {\r\n        premarketUser[_target] = _status;\r\n        emit PremarketUserChanged(_status,_target);\r\n    }\r\n    function editExcludedFromFees(address _target, bool _status) external onlyOwner {\r\n        excludedFromFees[_target] = _status;\r\n        emit ExcludeFromFeesChanged(_status,_target);\r\n    }\r\n    function editAutomatedMarketMakerPairs(address _target, bool _status) external onlyOwner {\r\n        automatedMarketMakerPairs[_target] = _status;\r\n        emit AutomatedMarketMakerPairsChanged(_status,_target);\r\n    }\r\n// operational functions\r\n    function KKAirdrop(address[] memory _address, uint256[] memory _amount) external onlyOwner {\r\n        for(uint i=0; i< _amount.length; i++){\r\n            address adr = _address[i];\r\n            uint amnt = _amount[i] *10**decimals();\r\n            super._transfer(owner(), adr, amnt);\r\n        }\r\n        // events from ERC20\r\n    }\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = pancakeV2Router.WETH();\r\n        _approve(address(this), address(pancakeV2Router), tokenAmount);\r\n        pancakeV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        emit ContractSwap(block.timestamp, tokenAmount);\r\n    }\r\n    \r\n    modifier FastTx() {\r\n        isInternalTransaction = true;\r\n        _;\r\n        isInternalTransaction = false;\r\n    }\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        _approve(address(this), address(pancakeV2Router), tokenAmount);\r\n        pancakeV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            liquidityAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n    function swapTokens(uint256 contractTokenBalance) private FastTx {\r\n        uint256 liq_part = contractTokenBalance * sellLiquidityFee / 100;\r\n        uint256 initialBalance = address(this).balance;\r\n        uint256 swaptokensamount = contractTokenBalance - liq_part;\r\n        swapTokensForEth(swaptokensamount);\r\n        uint256 newBalance = address(this).balance - initialBalance;\r\n        uint liq_part_percent = newBalance * sellLiquidityFee / 100;\r\n        if(addLiquidityEnabled) {\r\n            addLiquidity(liq_part, liq_part_percent);\r\n        }\r\n    }\r\n    function _transfer(address from, address to, uint256 amount) internal override {\r\n        uint trade_type = 0;\r\n    // market status flag\r\n        if(!marketActive) {\r\n            require(premarketUser[from],\"cannot trade before the market opening\");\r\n        }\r\n    // normal transaction\r\n        if(!isInternalTransaction) {\r\n        // tx limits\r\n            //buy\r\n            if(automatedMarketMakerPairs[from]) {\r\n                trade_type = 1;\r\n                // limits\r\n                if(!excludedFromFees[to]) {\r\n                    // tx limit\r\n                    if(limitBuys) {\r\n                        require(amount <= maxBuyTxAmount, \"maxBuyTxAmount Limit Exceeded\");\r\n                        // multi-buy limit\r\n                        if(marketActiveAt + 30 < block.timestamp) {\r\n                            require(marketActiveAt + 7 < block.timestamp,\"You cannot buy at launch.\");\r\n                            require(userLastTradeData[to].lastBuyTime + 3 <= block.timestamp,\"You cannot do multi-buy orders.\");\r\n                            userLastTradeData[to].lastBuyTime = block.timestamp;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            //sell\r\n            else if(automatedMarketMakerPairs[to]) {\r\n                trade_type = 2;\r\n                bool overMinimumTokenBalance = balanceOf(address(this)) >= minimumTokensBeforeSwap;\r\n                // marketing auto-bnb\r\n                if (swapAndLiquifyEnabled && balanceOf(pancakeV2Pair) > 0) {\r\n                    // if contract has X tokens, not sold since Y time, sell Z tokens\r\n                    if (overMinimumTokenBalance && startTimeForSwap + intervalSecondsForSwap <= block.timestamp) {\r\n                        startTimeForSwap = block.timestamp;\r\n                        // sell to bnb\r\n                        swapTokens(tokensToSwap);\r\n                    }\r\n                }\r\n                // limits\r\n                if(!excludedFromFees[from]) {\r\n                    // tx limit\r\n                    if(limitSells) {\r\n                    require(amount <= maxSellTxAmount, \"maxSellTxAmount Limit Exceeded\");\r\n                    }\r\n                }\r\n            }\r\n            // fees redistribution\r\n            if(address(this).balance > minimumWeiForTokenomics) {\r\n                //marketing\r\n                uint256 caBalance = address(this).balance;\r\n                uint256 marketingTokens = caBalance * sellMarketingFee / totalSellFee;\r\n                (bool success,) = address(marketingAddress).call{value: marketingTokens}(\"\");\r\n                if(success) {\r\n                    emit MarketingFeeCollected(marketingTokens);\r\n                }\r\n                uint256 devTokens = caBalance * sellDevFee / totalSellFee;\r\n                (bool success1,) = address(devAddress).call{value: devTokens}(\"\");\r\n                if(success1) {\r\n                    emit DevFeeCollected(devTokens);\r\n                }\r\n                uint256 teamTokens = caBalance * sellTeamFee / totalSellFee;\r\n                (bool success2,) = address(teamAddress).call{value: teamTokens}(\"\");\r\n                if(success2) {\r\n                    emit TeamFeeCollected(marketingTokens);\r\n                }\r\n            }\r\n        // fees management\r\n            if(feeStatus) {\r\n                // buy\r\n                if(trade_type == 1 && buyFeeStatus && !excludedFromFees[to]) {\r\n                \tuint txFees = amount * totalBuyFee / 1000;\r\n                \tamount -= txFees;\r\n                    super._transfer(from, address(this), txFees);\r\n                }\r\n                //sell\r\n                if(trade_type == 2 && sellFeeStatus && !excludedFromFees[from]) {\r\n                \tuint txFees = amount * totalSellFee / 1000;\r\n                \tamount -= txFees;\r\n                    super._transfer(from, address(this), txFees);\r\n                }\r\n                // no wallet to wallet tax\r\n            }\r\n        }\r\n        // transfer tokens\r\n        super._transfer(from, to, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"AddLiquidityEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AutomatedMarketMakerPairsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"BlockMultiBuysChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BnbRemovedFromContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ContractSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DevFeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ExcludeFromFeesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"marketing\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"team\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dev\",\"type\":\"address\"}],\"name\":\"FeesAddressesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyMarketingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyLiquidityFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyDevFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyTeamFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellMarketingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellLiquidityFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellDevFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellTeamFee\",\"type\":\"uint256\"}],\"name\":\"FeesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"feesActive\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"sell\",\"type\":\"bool\"}],\"name\":\"FeesStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"LimitBuyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"LimitSellChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityFeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"MarketStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MarketingFeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MaxBuyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MaxSellChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MinimumWeiChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPair\",\"type\":\"address\"}],\"name\":\"PancakePairUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPair\",\"type\":\"address\"}],\"name\":\"PancakeRouterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"PremarketUserChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"intervalSecondsToWait\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumToSwap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensToSwap\",\"type\":\"uint256\"}],\"name\":\"SwapSystemChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TeamFeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenRemovedFromContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_address\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"KKAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLiquidityEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockMultiBuys\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTeamFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"editAutomatedMarketMakerPairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"editExcludedFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"editPremarketUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"intervalSecondsForSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitBuys\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitSells\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTokensBeforeSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumWeiForTokenomics\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeV2Router\",\"outputs\":[{\"internalType\":\"contract IPancakeV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"premarketUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTeamFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setAddLiquidityEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setBlockMultiBuys\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Buymarketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Buyliquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Sellmarketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Sellliquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Buydev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Buyteam\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Selldev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Sellteam\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"sell\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setFeeStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"team\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dev\",\"type\":\"address\"}],\"name\":\"setFeesAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMaxBuyTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMaxSellTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_intervalSecondsForSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumTokensBeforeSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokensToSwap\",\"type\":\"uint256\"}],\"name\":\"setSwapAndLiquify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setminimumWeiForTokenomics\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"switchLimitBuys\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"switchLimitSells\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"switchMarketActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensToSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_sent\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_createPair\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"updatePancakeV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLastTradeData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastBuyTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SquidGameTwo", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b3b92d451b51b3f2955c2a9021272b463f48ba524dc34cb14d33f2df698a6cb3"}