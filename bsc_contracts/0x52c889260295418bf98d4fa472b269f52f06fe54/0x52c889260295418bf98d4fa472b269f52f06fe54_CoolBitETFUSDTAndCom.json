{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-02-16\r\n*/\r\n\r\npragma solidity ^0.4.24;\r\n\r\ninterface ITetherERC20 {\r\n    function totalSupply() public view returns (uint supply);\r\n    function balanceOf(address _owner) public view returns (uint balance);\r\n    function transfer(address _to, uint _value) public;\r\n    function transferFrom(address _from, address _to, uint _value) public;\r\n    function approve(address _spender, uint _value) public;\r\n    function allowance(address _owner, address _spender) public view returns (uint remaining);\r\n    function decimals() public view returns(uint8 digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances; // Storage slot 0\r\n\r\n  uint256 totalSupply_; // Storage slot 1\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n* @title Standard ERC20 token\r\n*\r\n* @dev Implementation of the basic standard token.\r\n* https://github.com/ethereum/EIPs/issues/20\r\n* Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n*/\r\ncontract StandardToken is ERC20, BasicToken {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed; // Storage slot 2\r\n\r\n    /**\r\n    * @dev Transfer tokens from one address to another\r\n    * @param _from address The address which you want to send tokens from\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the amount of tokens to be transferred\r\n    */\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _value The amount of tokens to be spent.\r\n    */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n    * @param _owner address The address which owns the funds.\r\n    * @param _spender address The address which will spend the funds.\r\n    * @return A uint256 specifying the amount of tokens still available for the spender.\r\n    */\r\n    function allowance(\r\n        address _owner,\r\n        address _spender\r\n    )\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n    * approve should be called when allowed[_spender] == 0. To increment\r\n    * allowed value is better to use this function to avoid 2 calls (and wait until\r\n    * the first transaction is mined)\r\n    * From MonolithDAO Token.sol\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _addedValue The amount of tokens to increase the allowance by.\r\n    */\r\n    function increaseApproval(\r\n        address _spender,\r\n        uint256 _addedValue\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        allowed[msg.sender][_spender] = (\r\n        allowed[msg.sender][_spender].add(_addedValue));\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n    * approve should be called when allowed[_spender] == 0. To decrement\r\n    * allowed value is better to use this function to avoid 2 calls (and wait until\r\n    * the first transaction is mined)\r\n    * From MonolithDAO Token.sol\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n    */\r\n    function decreaseApproval(\r\n        address _spender,\r\n        uint256 _subtractedValue\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        uint256 oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n        allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n        allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\ncontract StandardTokenMintableBurnable is StandardToken {\r\n  using SafeMath for uint256;\r\n\r\n  function _mint(address account, uint256 amount) internal {\r\n    require(account != address(0), \"ERC20: mint to the zero address\");\r\n    totalSupply_ = totalSupply_.add(amount);\r\n    balances[account] = balances[account].add(amount);\r\n    emit Transfer(address(0), account, amount);\r\n  }\r\n\r\n  function burn(uint256 amount) public {\r\n    _burn(msg.sender, amount);\r\n  }\r\n\r\n  function _burn(address account, uint256 amount) internal {\r\n    require(account != address(0), \"ERC20: burn from the zero address\");\r\n    totalSupply_ = totalSupply_.sub(amount);\r\n    balances[account] = balances[account].sub(amount);\r\n    emit Transfer(account, address(0), amount);\r\n  }\r\n}\r\n\r\ncontract WhiteListToken is StandardTokenMintableBurnable{\r\n  address public whiteListAdmin;\r\n  bool public isTransferRestricted;\r\n  bool public isReceiveRestricted;\r\n  mapping(address => bool) public transferWhiteList;\r\n  mapping(address => bool) public receiveWhiteList;\r\n\r\n\r\n  constructor(address _admin) public {\r\n    whiteListAdmin = _admin;\r\n    isReceiveRestricted = true;\r\n  }\r\n\r\n  modifier isWhiteListAdmin() {\r\n      require(msg.sender == whiteListAdmin);\r\n      _;\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool){\r\n    if (isTransferRestricted) {\r\n      require(transferWhiteList[msg.sender], \"only whitelist senders can transfer tokens\");\r\n    }\r\n    if (isReceiveRestricted) {\r\n      require(receiveWhiteList[_to], \"only whiteList receivers can receive tokens\");\r\n    }\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool){\r\n    if (isTransferRestricted) {\r\n      require(transferWhiteList[_from], \"only whiteList senders can transfer tokens\");\r\n    }\r\n    if (isReceiveRestricted) {\r\n      require(receiveWhiteList[_to], \"only whiteList receivers can receive tokens\");\r\n    }\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function enableTransfer() isWhiteListAdmin public {\r\n    require(isTransferRestricted);\r\n    isTransferRestricted = false;\r\n  }\r\n\r\n  function restrictTransfer() isWhiteListAdmin public {\r\n    require(isTransferRestricted == false);\r\n    isTransferRestricted = true;\r\n  }\r\n\r\n  function enableReceive() isWhiteListAdmin public {\r\n    require(isReceiveRestricted);\r\n    isReceiveRestricted = false;\r\n  }\r\n\r\n  function restrictReceive() isWhiteListAdmin public {\r\n    require(isReceiveRestricted == false);\r\n    isReceiveRestricted = true;\r\n  }\r\n\r\n\r\n  function removeTransferWhiteListAddress(address _whiteListAddress) public isWhiteListAdmin returns(bool) {\r\n    require(transferWhiteList[_whiteListAddress]);\r\n    transferWhiteList[_whiteListAddress] = false;\r\n    return true;\r\n  }\r\n\r\n  function addTransferWhiteListAddress(address _whiteListAddress) public isWhiteListAdmin returns(bool) {\r\n    require(transferWhiteList[_whiteListAddress] == false);\r\n    transferWhiteList[_whiteListAddress] = true;\r\n    return true;\r\n  }\r\n\r\n  function removeReceiveWhiteListAddress(address _whiteListAddress) public isWhiteListAdmin returns(bool) {\r\n    require(receiveWhiteList[_whiteListAddress]);\r\n    receiveWhiteList[_whiteListAddress] = false;\r\n    return true;\r\n  }\r\n\r\n  function addReceiveWhiteListAddress(address _whiteListAddress) public isWhiteListAdmin returns(bool) {\r\n    require(receiveWhiteList[_whiteListAddress] == false);\r\n    receiveWhiteList[_whiteListAddress] = true;\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract SimpleOracleAccruedRatioUSD {\r\n    using SafeMath for uint256;\r\n    address public admin;\r\n    address public superAdmin;\r\n    uint256 public accruedRatioUSD;\r\n    uint256 public lastUpdateTime;\r\n    uint256 public MAXIMUM_CHANGE_PCT = 3;\r\n\r\n    constructor(uint256 _accruedRatioUSD, address _admin, address _superAdmin) public {\r\n        admin = _admin;\r\n        superAdmin = _superAdmin;\r\n        accruedRatioUSD = _accruedRatioUSD;\r\n    }\r\n\r\n    modifier onlyAdmin {\r\n        require(msg.sender == admin || msg.sender == superAdmin);\r\n        _;\r\n    }\r\n\r\n    modifier onlySuperAdmin {\r\n        require(msg.sender == superAdmin);\r\n        _;\r\n    }\r\n\r\n    function isValidRatio(uint256 _accruedRatioUSD) view internal {\r\n      require(_accruedRatioUSD >= accruedRatioUSD, \"ratio should be monotonically increased\");\r\n      uint256 maximumChange = accruedRatioUSD.mul(MAXIMUM_CHANGE_PCT).div(100);\r\n      require(_accruedRatioUSD.sub(accruedRatioUSD) < maximumChange, \"exceeds maximum chagne\");\r\n    }\r\n\r\n    function checkTimeStamp() view internal {\r\n      // 82800 = 23 * 60 * 60  (23 hours)\r\n      require(block.timestamp.sub(lastUpdateTime) > 82800, \"oracle are not allowed to update two times within 23 hours\");\r\n    }\r\n\r\n    function set(uint256 _accruedRatioUSD) onlyAdmin public{\r\n        if(msg.sender != superAdmin) {\r\n          isValidRatio(_accruedRatioUSD);\r\n          checkTimeStamp();\r\n        }\r\n        lastUpdateTime = block.timestamp;\r\n        accruedRatioUSD = _accruedRatioUSD;\r\n    }\r\n\r\n    function query() external view returns(uint256)  {\r\n        // QueryEvent(msg.sender, block.number);\r\n        return accruedRatioUSD;\r\n    }\r\n}\r\n\r\ninterface CERC20 {\r\n    function mint(uint mintAmount) returns (uint);\r\n    function redeem(uint redeemTokens) returns (uint);\r\n    function supplyRatePerBlock() returns (uint);\r\n    function exchangeRateCurrent() returns (uint);\r\n    function balanceOf(address _owner) public view returns (uint balance);\r\n    function balanceOfUnderlying(address account) returns (uint);\r\n}\r\n\r\ninterface CEther {\r\n    function mint() payable;\r\n    function redeem(uint redeemTokens) returns (uint);\r\n    function supplyRatePerBlock() returns (uint);\r\n    function balanceOf(address _owner) public view returns (uint balance);\r\n    function balanceOfUnderlying(address account) returns (uint);\r\n}\r\n\r\ncontract CoolBitETFUSDTAndCompound is WhiteListToken{\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public baseRatio;\r\n    string public name = \"X-Saving Certificate\";\r\n    string public constant symbol = \"XSCert\";\r\n    uint8 public decimals;\r\n\r\n    // USDT token contract\r\n    ITetherERC20 public StableToken;\r\n    SimpleOracleAccruedRatioUSD public oracle;\r\n    // Defi contract\r\n    CERC20 public cToken;\r\n\r\n    // Roles\r\n    address public bincentiveHot; // i.e., Platform Owner\r\n    address public bincentiveCold;\r\n    address[] public investors;\r\n    mapping(address => bool) public isInInvestorList;\r\n\r\n    uint256 public numAUMDistributedInvestors; // i.e., number of investors that already received AUM\r\n\r\n    // Contract(Fund) Status\r\n    // 0: not initialized\r\n    // 1: initialized\r\n    // 2: not enough fund came in in time\r\n    // 3: fundStarted\r\n    // 4: running\r\n    // 5: stoppped\r\n    // 6: closed\r\n    // 7: suspended\r\n    uint256 public fundStatus;\r\n\r\n    // Money\r\n    mapping(address => uint256) public investorDepositUSDTAmount;  // denominated in stable token\r\n    uint256 public currentInvestedAmount;  // denominated in stable token\r\n\r\n    // Fund Parameters\r\n    uint256 public investPaymentDueTime;  // deadline for deposit which comes in before fund starts running\r\n    uint256 public percentageOffchainFund;  // percentage of fund that will be transfered off-chain\r\n    uint256 public percentageMinimumFund;  // minimum percentage of fund required to keep the fund functioning\r\n    uint256 public minimumFund;  // minimum amounf required to keep the fund functioning\r\n    uint256 public minPenalty;  // a minimum 100 USDT penalty\r\n\r\n    // Events\r\n    event Deposit(address indexed investor, uint256 investAmount, uint256 mintedAmount);\r\n    event UserInfo(bytes32 indexed uuid, string referralCode);\r\n    event StartFund(uint256 timeStamp, uint256 num_investors, uint256 totalInvestedAmount, uint256 totalMintedTokenAmount);\r\n    event Withdraw(address indexed investor, uint256 tokenAmount, uint256 USDTAmount, uint256 ToBincentiveColdUSDTAmount);\r\n    event MidwayQuit(address indexed investor, uint256 tokenAmount, uint256 USDTAmount);\r\n    event ReturnAUM(uint256 StableTokenAmount);\r\n    event DistributeAUM(address indexed to, uint256 tokenAmount, uint256 StableTokenAmount);\r\n    // Admin Events\r\n    event NewBincentiveCold(address newBincentiveCold);\r\n    // Defi Events\r\n    event MintcUSDT(uint USDTAmount);\r\n    event RedeemcUSDT(uint RedeemcUSDTAmount);\r\n\r\n    // Modifiers\r\n    modifier initialized() {\r\n        require(fundStatus == 1);\r\n        _;\r\n    }\r\n\r\n    // modifier fundStarted() {\r\n    //     require(fundStatus == 3);\r\n    //     _;\r\n    // }\r\n\r\n    modifier running() {\r\n        require(fundStatus == 4);\r\n        _;\r\n    }\r\n\r\n    modifier runningOrSuspended() {\r\n        require((fundStatus == 4) || (fundStatus == 7));\r\n        _;\r\n    }\r\n\r\n    modifier stoppedOrSuspended() {\r\n        require((fundStatus == 5) || (fundStatus == 7));\r\n        _;\r\n    }\r\n\r\n    modifier runningOrStoppedOrSuspended() {\r\n        require((fundStatus == 4) || (fundStatus == 5) || (fundStatus == 7));\r\n        _;\r\n    }\r\n\r\n    modifier closedOrAbortedOrSuspended() {\r\n        require((fundStatus == 6) || (fundStatus == 2) || (fundStatus == 7));\r\n        _;\r\n    }\r\n\r\n    modifier isBincentive() {\r\n        require(\r\n            (msg.sender == bincentiveHot) || (msg.sender == bincentiveCold)\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier isBincentiveCold() {\r\n        require(msg.sender == bincentiveCold);\r\n        _;\r\n    }\r\n\r\n    modifier isInvestor() {\r\n        // bincentive is not investor\r\n        require(msg.sender != bincentiveHot);\r\n        require(msg.sender != bincentiveCold);\r\n        require(balances[msg.sender] > 0);\r\n        _;\r\n    }\r\n\r\n\r\n    // Transfer functions for USDT\r\n    function checkBalanceTransfer(address to, uint256 amount) internal {\r\n        uint256 balanceBeforeTransfer = StableToken.balanceOf(to);\r\n        uint256 balanceAfterTransfer;\r\n        StableToken.transfer(to, amount);\r\n        balanceAfterTransfer = StableToken.balanceOf(to);\r\n        require(balanceAfterTransfer == balanceBeforeTransfer.add(amount));\r\n    }\r\n\r\n    function checkBalanceTransferFrom(address from, address to, uint256 amount) internal {\r\n        uint256 balanceBeforeTransfer = StableToken.balanceOf(to);\r\n        uint256 balanceAfterTransfer;\r\n        StableToken.transferFrom(from, to, amount);\r\n        balanceAfterTransfer = StableToken.balanceOf(to);\r\n        require(balanceAfterTransfer == balanceBeforeTransfer.add(amount));\r\n    }\r\n\r\n\r\n    // Getter Functions\r\n\r\n    // Get the balance of an investor, denominated in stable token\r\n    function getBalanceValue(address investor) public view returns(uint256) {\r\n        uint256 accruedRatioUSDT = oracle.query();\r\n        return balances[investor].mul(accruedRatioUSDT).div(baseRatio);\r\n    }\r\n\r\n    // Defi Functions\r\n\r\n    function querycUSDTAmount() internal returns(uint256) {\r\n        return cToken.balanceOf(address(this));\r\n    }\r\n\r\n    function querycExgRate() internal returns(uint256) {\r\n        return cToken.exchangeRateCurrent();\r\n    }\r\n\r\n    function mintcUSDT(uint USDTAmount) public isBincentive {\r\n\r\n        StableToken.approve(address(cToken), USDTAmount); // approve the transfer\r\n        assert(cToken.mint(USDTAmount) == 0);\r\n\r\n        emit MintcUSDT(USDTAmount);\r\n    }\r\n\r\n    function redeemcUSDT(uint RedeemcUSDTAmount) public isBincentive {\r\n\r\n        require(cToken.redeem(RedeemcUSDTAmount) == 0, \"something went wrong\");\r\n\r\n        emit RedeemcUSDT(RedeemcUSDTAmount);\r\n    }\r\n\r\n\r\n    // Investor Deposit\r\n    // It can either be called by investor directly or by bincentive accounts.\r\n    // Only the passed in argument `investor` would be treated as the real investor.\r\n    function deposit(address investor, uint256 depositUSDTAmount, bytes32 uuid, string referralCode) initialized public {\r\n        require(now < investPaymentDueTime, \"Deposit too late\");\r\n        require((investor != bincentiveHot) && (investor != bincentiveCold), \"Investor can not be bincentive accounts\");\r\n        require(depositUSDTAmount > 0, \"Deposited stable token amount should be greater than zero\");\r\n\r\n        // Transfer Stable Token to this contract\r\n        checkBalanceTransferFrom(msg.sender, address(this), depositUSDTAmount);\r\n\r\n        // Add investor to investor list if not present in the record before\r\n        if(isInInvestorList[investor] == false) {\r\n            investors.push(investor);\r\n            isInInvestorList[investor] = true;\r\n        }\r\n        currentInvestedAmount = currentInvestedAmount.add(depositUSDTAmount);\r\n        investorDepositUSDTAmount[investor] = investorDepositUSDTAmount[investor].add(depositUSDTAmount);\r\n\r\n        // Query Oracle for current stable token ratio\r\n        uint256 accruedRatioUSDT = oracle.query();\r\n        // Mint and distribute tokens to investors\r\n        uint256 mintedTokenAmount;\r\n        mintedTokenAmount = depositUSDTAmount.mul(baseRatio).div(accruedRatioUSDT);\r\n        _mint(investor, mintedTokenAmount);\r\n\r\n        emit Deposit(investor, depositUSDTAmount, mintedTokenAmount);\r\n        emit UserInfo(uuid, referralCode);\r\n    }\r\n\r\n    // Start Investing\r\n    // Send part of the funds offline\r\n    // and calculate the minimum amount of fund needed to keep the fund functioning\r\n    // and calculate the maximum amount of fund allowed to be withdrawn per period.\r\n    function start() initialized isBincentive public {\r\n        // Send some USDT offline\r\n        uint256 amountSentOffline = currentInvestedAmount.mul(percentageOffchainFund).div(100);\r\n        checkBalanceTransfer(bincentiveCold, amountSentOffline);\r\n\r\n        minimumFund = totalSupply().mul(percentageMinimumFund).div(100);\r\n        // Start the contract\r\n        fundStatus = 4;\r\n        emit StartFund(now, investors.length, currentInvestedAmount, totalSupply());\r\n    }\r\n\r\n    function amountWithdrawable() public view returns(uint256) {\r\n        return totalSupply().sub(minimumFund);\r\n    }\r\n\r\n    function isAmountWithdrawable(address investor, uint256 tokenAmount) public view returns(bool) {\r\n        require(tokenAmount > 0, \"Withdrawn amount must be greater than zero\");\r\n        require(balances[investor] >= tokenAmount, \"Not enough token to be withdrawn\");\r\n        require(totalSupply().sub(tokenAmount) >= minimumFund, \"Amount of fund left would be less than minimum fund threshold after withdrawal\");\r\n\r\n        return true;\r\n    }\r\n\r\n    function withdraw(address investor, uint256 tokenAmount) running isBincentive public {\r\n        require(tokenAmount > 0, \"Withdrawn amount must be greater than zero\");\r\n        require(balances[investor] >= tokenAmount, \"Not enough token to be withdrawn\");\r\n        require(totalSupply().sub(tokenAmount) >= minimumFund, \"Amount of fund left would be less than minimum fund threshold after withdrawal\");\r\n\r\n        uint256 investorBalanceBeforeWithdraw = balances[investor];\r\n        // Substract withdrawing amount from investor's balance\r\n        _burn(investor, tokenAmount);\r\n\r\n        uint256 depositUSDTAmount = investorDepositUSDTAmount[investor];\r\n\r\n        // Query Oracle for current stable token ratio\r\n        uint256 accruedRatioUSDT = oracle.query();\r\n        uint256 principle;\r\n        uint256 interest;\r\n        uint256 amountUSDTToWithdraw;\r\n        uint256 amountUSDTForInvestor;\r\n        uint256 amountUSDTToBincentiveCold;\r\n\r\n        amountUSDTToWithdraw = tokenAmount.mul(accruedRatioUSDT).div(baseRatio);\r\n        principle = depositUSDTAmount.mul(tokenAmount).div(investorBalanceBeforeWithdraw);\r\n        interest = amountUSDTToWithdraw.sub(principle);\r\n        amountUSDTForInvestor = principle.mul(99).div(100).add(interest.div(2));\r\n        amountUSDTToBincentiveCold = amountUSDTToWithdraw.sub(amountUSDTForInvestor);\r\n\r\n        // Check if `amountUSDTToBincentiveCold >= penalty`\r\n        if (amountUSDTToBincentiveCold < minPenalty) {\r\n            uint256 dif = minPenalty.sub(amountUSDTToBincentiveCold);\r\n            require(dif <= amountUSDTForInvestor, \"Withdraw amount is not enough to cover minimum penalty\");\r\n            amountUSDTForInvestor = amountUSDTForInvestor.sub(dif);\r\n            amountUSDTToBincentiveCold = minPenalty;\r\n        }\r\n\r\n        investorDepositUSDTAmount[investor] = investorDepositUSDTAmount[investor].sub(principle);\r\n\r\n        checkBalanceTransfer(investor, amountUSDTForInvestor);\r\n        checkBalanceTransfer(bincentiveCold, amountUSDTToBincentiveCold);\r\n\r\n        emit Withdraw(investor, tokenAmount, amountUSDTForInvestor, amountUSDTToBincentiveCold);\r\n\r\n        // Suspend the contract if not enough fund remained\r\n        if(totalSupply() == minimumFund) {\r\n            fundStatus = 7;\r\n        }\r\n    }\r\n\r\n    // Return AUM\r\n    // Transfer the fund back to the contract\r\n    function returnAUM(uint256 stableTokenAmount) runningOrSuspended isBincentiveCold public {\r\n        // Option 1: contract transfer AUM directly from bincentiveCold\r\n        checkBalanceTransferFrom(bincentiveCold, address(this), stableTokenAmount);\r\n\r\n        emit ReturnAUM(stableTokenAmount);\r\n\r\n        // If fund is running, stop the fund after AUM is returned\r\n        if(fundStatus == 4) fundStatus = 5;\r\n    }\r\n\r\n    // Add an overlay on top of underlying token transfer\r\n    // because token receiver should also be added to investor list to be able to receive AUM.\r\n    function transfer(address _to, uint256 _value) public returns (bool){\r\n        uint256 tokenBalanceBeforeTransfer = balances[msg.sender];\r\n        bool success = super.transfer(_to, _value);\r\n\r\n        if(success == true) {\r\n            if(isInInvestorList[_to] == false) {\r\n                investors.push(_to);\r\n                isInInvestorList[_to] = true;\r\n            }\r\n            // Also transfer the deposited USDT so the receiver can withdraw\r\n            uint256 USDTAmountToTransfer = investorDepositUSDTAmount[msg.sender].mul(_value).div(tokenBalanceBeforeTransfer);\r\n            investorDepositUSDTAmount[msg.sender] = investorDepositUSDTAmount[msg.sender].sub(USDTAmountToTransfer);\r\n            investorDepositUSDTAmount[_to] = investorDepositUSDTAmount[_to].add(USDTAmountToTransfer);\r\n        }\r\n        return success;\r\n    }\r\n\r\n    // Add an overlay on top of underlying token transferFrom\r\n    // because token receiver should also be added to investor list to be able to receive AUM.\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool){\r\n        uint256 tokenBalanceBeforeTransfer = balances[_from];\r\n        bool success = super.transferFrom(_from, _to, _value);\r\n\r\n        if(success == true) {\r\n            if(isInInvestorList[_to] == false) {\r\n                investors.push(_to);\r\n                isInInvestorList[_to] = true;\r\n            }\r\n            // Also transfer the deposited USDT so the receiver can withdraw\r\n            uint256 USDTAmountToTransfer = investorDepositUSDTAmount[_from].mul(_value).div(tokenBalanceBeforeTransfer);\r\n            investorDepositUSDTAmount[_from] = investorDepositUSDTAmount[_from].sub(USDTAmountToTransfer);\r\n            investorDepositUSDTAmount[_to] = investorDepositUSDTAmount[_to].add(USDTAmountToTransfer);\r\n        }\r\n        return success;\r\n    }\r\n\r\n    function update_investor(address _old_address, address _new_address) public isBincentiveCold {\r\n        require((_new_address != bincentiveHot) && (_new_address != bincentiveCold), \"Investor can not be bincentive accounts\");\r\n        require(isInInvestorList[_old_address] == true, \"Investor does not exist\");\r\n\r\n        uint256 balance = balances[_old_address];\r\n        balances[_old_address] = balances[_old_address].sub(balance);\r\n        balances[_new_address] = balances[_new_address].add(balance);\r\n        emit Transfer(_old_address, _new_address, balance);\r\n        if(isInInvestorList[_new_address] == false) {\r\n            investors.push(_new_address);\r\n            isInInvestorList[_new_address] = true;\r\n        }\r\n        uint256 USDTAmountToTransfer = investorDepositUSDTAmount[_old_address];\r\n        investorDepositUSDTAmount[_old_address] = investorDepositUSDTAmount[_old_address].sub(USDTAmountToTransfer);\r\n        investorDepositUSDTAmount[_new_address] = investorDepositUSDTAmount[_new_address].add(USDTAmountToTransfer);\r\n    }\r\n\r\n    // Distribute AUM\r\n    // Dispense the fund returned to each investor according to his portion of the token he possessed.\r\n    // All withdraw requests should be processed before calling this function.\r\n    // Since there might be too many investors, each time this function is called,\r\n    // a parameter `numInvestorsToDistribute` is passed in to indicate how many investors to process this time.\r\n    function distributeAUM(uint256 numInvestorsToDistribute) stoppedOrSuspended isBincentive public {\r\n        require(numAUMDistributedInvestors.add(numInvestorsToDistribute) <= investors.length, \"Distributing to more than total number of investors\");\r\n\r\n        // Query Oracle for current stable token ratio\r\n        uint256 accruedRatioUSDT = oracle.query();\r\n\r\n        uint256 stableTokenDistributeAmount;\r\n        address investor;\r\n        uint256 investor_amount;\r\n        // Distribute Stable Token to investors\r\n        for(uint i = numAUMDistributedInvestors; i < (numAUMDistributedInvestors.add(numInvestorsToDistribute)); i++) {\r\n            investor = investors[i];\r\n            investor_amount = balances[investor];\r\n            if(investor_amount == 0) continue;\r\n            _burn(investor, investor_amount);\r\n\r\n            stableTokenDistributeAmount = investor_amount.mul(accruedRatioUSDT).div(baseRatio);\r\n            checkBalanceTransfer(investor, stableTokenDistributeAmount);\r\n\r\n            emit DistributeAUM(investor, investor_amount, stableTokenDistributeAmount);\r\n        }\r\n\r\n        numAUMDistributedInvestors = numAUMDistributedInvestors.add(numInvestorsToDistribute);\r\n        // If all investors have received AUM, then close the fund.\r\n        if(numAUMDistributedInvestors >= investors.length) {\r\n            currentInvestedAmount = 0;\r\n            // If fund is stopped, close the fund\r\n            if(fundStatus == 5) fundStatus = 6;\r\n        }\r\n    }\r\n\r\n    function claimWronglyTransferredFund() closedOrAbortedOrSuspended isBincentive public {\r\n        // withdraw leftover funds from Defi\r\n        uint256 totalcUSDTAmount;\r\n        totalcUSDTAmount = querycUSDTAmount();\r\n        redeemcUSDT(totalcUSDTAmount);\r\n\r\n        uint256 leftOverAmount = StableToken.balanceOf(address(this));\r\n        if(leftOverAmount > 0) {\r\n            checkBalanceTransfer(bincentiveCold, leftOverAmount);\r\n        }\r\n    }\r\n\r\n    function updateBincentiveColdAddress(address _newBincentiveCold) public isBincentiveCold {\r\n        require(_newBincentiveCold != address(0), \"New BincentiveCold address can not be zero\");\r\n\r\n        bincentiveCold = _newBincentiveCold;\r\n        emit NewBincentiveCold(_newBincentiveCold);\r\n    }\r\n\r\n    constructor(\r\n        address _oracle,\r\n        address _StableToken,\r\n        address _cToken,\r\n        address _bincentiveHot,\r\n        address _bincentiveCold,\r\n        uint256 _investPaymentPeriod,\r\n        uint256 _percentageOffchainFund,\r\n        uint256 _percentageMinimumFund) WhiteListToken(_bincentiveCold) public {\r\n\r\n        oracle = SimpleOracleAccruedRatioUSD(_oracle);\r\n        bincentiveHot = _bincentiveHot;\r\n        bincentiveCold = _bincentiveCold;\r\n        StableToken = ITetherERC20(_StableToken);\r\n        cToken = CERC20(_cToken);\r\n\r\n        decimals = StableToken.decimals();\r\n        minPenalty = 100 * (10 ** uint256(decimals));  // a minimum 100 USDT penalty\r\n        baseRatio = oracle.query();\r\n        require(baseRatio > 0, \"baseRatio should always greater than zero\");\r\n\r\n        // Set parameters\r\n        investPaymentDueTime = now.add(_investPaymentPeriod);\r\n        percentageOffchainFund = _percentageOffchainFund;\r\n        percentageMinimumFund = _percentageMinimumFund;\r\n\r\n        // Initialized the contract\r\n        fundStatus = 1;\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"transferWhiteList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bincentiveHot\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minPenalty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiveWhiteList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentageOffchainFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountWithdrawable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_whiteListAddress\",\"type\":\"address\"}],\"name\":\"removeReceiveWhiteListAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableReceive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investorDepositUSDTAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"StableToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"getBalanceValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isTransferRestricted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_old_address\",\"type\":\"address\"},{\"name\":\"_new_address\",\"type\":\"address\"}],\"name\":\"update_investor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whiteListAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"},{\"name\":\"depositUSDTAmount\",\"type\":\"uint256\"},{\"name\":\"uuid\",\"type\":\"bytes32\"},{\"name\":\"referralCode\",\"type\":\"string\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"numInvestorsToDistribute\",\"type\":\"uint256\"}],\"name\":\"distributeAUM\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investPaymentDueTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stableTokenAmount\",\"type\":\"uint256\"}],\"name\":\"returnAUM\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isInInvestorList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseRatio\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"isAmountWithdrawable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"RedeemcUSDTAmount\",\"type\":\"uint256\"}],\"name\":\"redeemcUSDT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimWronglyTransferredFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isReceiveRestricted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_whiteListAddress\",\"type\":\"address\"}],\"name\":\"removeTransferWhiteListAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"USDTAmount\",\"type\":\"uint256\"}],\"name\":\"mintcUSDT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"restrictTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bincentiveCold\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_whiteListAddress\",\"type\":\"address\"}],\"name\":\"addTransferWhiteListAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_whiteListAddress\",\"type\":\"address\"}],\"name\":\"addReceiveWhiteListAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numAUMDistributedInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newBincentiveCold\",\"type\":\"address\"}],\"name\":\"updateBincentiveColdAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"restrictReceive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentageMinimumFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentInvestedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_oracle\",\"type\":\"address\"},{\"name\":\"_StableToken\",\"type\":\"address\"},{\"name\":\"_cToken\",\"type\":\"address\"},{\"name\":\"_bincentiveHot\",\"type\":\"address\"},{\"name\":\"_bincentiveCold\",\"type\":\"address\"},{\"name\":\"_investPaymentPeriod\",\"type\":\"uint256\"},{\"name\":\"_percentageOffchainFund\",\"type\":\"uint256\"},{\"name\":\"_percentageMinimumFund\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"investAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"uuid\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"referralCode\",\"type\":\"string\"}],\"name\":\"UserInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"num_investors\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalInvestedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalMintedTokenAmount\",\"type\":\"uint256\"}],\"name\":\"StartFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"USDTAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ToBincentiveColdUSDTAmount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"USDTAmount\",\"type\":\"uint256\"}],\"name\":\"MidwayQuit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"StableTokenAmount\",\"type\":\"uint256\"}],\"name\":\"ReturnAUM\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"StableTokenAmount\",\"type\":\"uint256\"}],\"name\":\"DistributeAUM\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newBincentiveCold\",\"type\":\"address\"}],\"name\":\"NewBincentiveCold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"USDTAmount\",\"type\":\"uint256\"}],\"name\":\"MintcUSDT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"RedeemcUSDTAmount\",\"type\":\"uint256\"}],\"name\":\"RedeemcUSDT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "ContractName": "CoolBitETFUSDTAndCompound", "CompilerVersion": "v0.4.26+commit.4563c3fc", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000e023a1781b7de0fbadec37a01ef567c16925bc2400000000000000000000000055d398326f99059ff775485246999027b31979550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c4c358f3af4888c5fea5f232ccc7ed04d5735cae00000000000000000000000006dd21231689a9444a578d070a0fe2e8e9aff5e70000000000000000000000000000000000000000000000000000000000620d9000000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000050", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://f7a93f344768e40b5bf3482207cd5b6ae9a2a7e1980af3b43d46a783550337fb"}