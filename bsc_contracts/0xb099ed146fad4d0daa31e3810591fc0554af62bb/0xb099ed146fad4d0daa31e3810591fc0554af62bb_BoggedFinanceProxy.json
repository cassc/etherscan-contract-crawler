{"SourceCode": "//SPDX-License-Identifier: BUSL-1.1\r\n\r\npragma solidity ^0.8.7;\r\n\r\n/**\r\n * $$$$$$$\\                                                $$\\     $$$$$$$$\\ $$\\                                                   \r\n * $$  __$$\\                                               $$ |    $$  _____|\\__|                                                  \r\n * $$ |  $$ | $$$$$$\\   $$$$$$\\   $$$$$$\\   $$$$$$\\   $$$$$$$ |    $$ |      $$\\ $$$$$$$\\   $$$$$$\\  $$$$$$$\\   $$$$$$$\\  $$$$$$\\  \r\n * $$$$$$$\\ |$$  __$$\\ $$  __$$\\ $$  __$$\\ $$  __$$\\ $$  __$$ |    $$$$$\\    $$ |$$  __$$\\  \\____$$\\ $$  __$$\\ $$  _____|$$  __$$\\ \r\n * $$  __$$\\ $$ /  $$ |$$ /  $$ |$$ /  $$ |$$$$$$$$ |$$ /  $$ |    $$  __|   $$ |$$ |  $$ | $$$$$$$ |$$ |  $$ |$$ /      $$$$$$$$ |\r\n * $$ |  $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$   ____|$$ |  $$ |    $$ |      $$ |$$ |  $$ |$$  __$$ |$$ |  $$ |$$ |      $$   ____|\r\n * $$$$$$$  |\\$$$$$$  |\\$$$$$$$ |\\$$$$$$$ |\\$$$$$$$\\ \\$$$$$$$ |$$\\ $$ |      $$ |$$ |  $$ |\\$$$$$$$ |$$ |  $$ |\\$$$$$$$\\ \\$$$$$$$\\ \r\n * \\_______/  \\______/  \\____$$ | \\____$$ | \\_______| \\_______|\\__|\\__|      \\__|\\__|  \\__| \\_______|\\__|  \\__| \\_______| \\_______|\r\n *                     $$\\   $$ |$$\\   $$ |                                                                                        \r\n *                     \\$$$$$$  |\\$$$$$$  |                                                                                        \r\n *                      \\______/  \\______/\r\n * \r\n * https://bogged.finance/\r\n */\r\n\r\nlibrary LibCoreStorage {\r\n    struct CoreStorage {\r\n        address owner;\r\n        bool paused;\r\n        bool guardReentrancy;\r\n        mapping (bytes4 => address) implementations;\r\n    }\r\n    function coreStorage() internal pure returns (CoreStorage storage cs) {\r\n        bytes32 location = keccak256(\"bogged.proxy.core\");\r\n        assembly { cs.slot := location }\r\n    }\r\n}\r\n\r\nabstract contract ProxyOwnable {\r\n    constructor(){\r\n        LibCoreStorage.coreStorage().owner = msg.sender;\r\n    }\r\n    \r\n    modifier onlyOwner {\r\n        require(msg.sender == getOwner(), \"BOGProxy: !OWNER\");\r\n        _;\r\n    }\r\n\r\n    function getOwner() public view returns (address) {\r\n        return LibCoreStorage.coreStorage().owner;\r\n    }\r\n    \r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        LibCoreStorage.coreStorage().owner = newOwner;\r\n        emit OwnershipTransferred(newOwner);\r\n    }\r\n    \r\n    event OwnershipTransferred(address newOwner);\r\n}\r\n\r\nabstract contract ProxyPausable is ProxyOwnable {\r\n    modifier notPaused {\r\n        require(!paused(), \"BOGProxy: PAUSED\");\r\n        _;\r\n    }\r\n    \r\n    modifier whenPaused {\r\n        require(paused(), \"BOGProxy: !PAUSED\");\r\n        _;\r\n    }\r\n    \r\n    function paused() public view returns (bool) {\r\n        return LibCoreStorage.coreStorage().paused;\r\n    }\r\n    \r\n    function pause() external notPaused onlyOwner {\r\n        LibCoreStorage.coreStorage().paused = true;\r\n        emit Paused();\r\n    }\r\n    \r\n    function unpause() external whenPaused onlyOwner {\r\n        LibCoreStorage.coreStorage().paused = false;\r\n        emit Unpaused();\r\n    }\r\n    \r\n    event Paused();\r\n    event Unpaused();\r\n}\r\n\r\nabstract contract ProxyReentrancyGuard {\r\n    modifier nonReentrant {\r\n        LibCoreStorage.CoreStorage storage cs = LibCoreStorage.coreStorage();\r\n        require(!cs.guardReentrancy, \"BOGProxy: REENTRANCY_DISALLOWED\");\r\n        cs.guardReentrancy = true;\r\n        _;\r\n        cs.guardReentrancy = false;\r\n    }\r\n}\r\n\r\ncontract BoggedFinanceProxy is ProxyOwnable, ProxyPausable, ProxyReentrancyGuard {\r\n    fallback() external payable notPaused {\r\n        address impl = getImplementation(msg.sig);\r\n        require(impl != address(0), \"BOGProxy: INVALID_SELECTOR\");\r\n        (bool success, bytes memory data) = impl.delegatecall(msg.data);\r\n        require(success, _getRevertMsg(data));\r\n        assembly { return(add(data, 32), mload(data)) }\r\n    }\r\n    \r\n    receive() external payable { }\r\n    \r\n    function getImplementation(bytes4 selector) public view returns (address) {\r\n        return LibCoreStorage.coreStorage().implementations[selector];\r\n    }\r\n    \r\n    function setImplementation(bytes4 selector, address implementation, bool initialize) external onlyOwner {\r\n        require(implementation == address(0) || _isContract(implementation), \"BOGProxy: INVALID_IMPLEMENTAION\");\r\n        LibCoreStorage.coreStorage().implementations[selector] = implementation;\r\n        if(initialize){\r\n            (bool success, ) = implementation.delegatecall(abi.encode(bytes4(keccak256(\"initialize()\"))));\r\n            require(success, \"BOGProxy: INITIALIZATION_FAILED\");\r\n        }\r\n        emit ImplementationUpdated(selector, implementation);\r\n    }\r\n    \r\n    function _getRevertMsg(bytes memory data) internal pure returns (string memory reason) {\r\n        uint l = data.length;\r\n        if (l < 68) return \"\";\r\n        uint t;\r\n        assembly {\r\n            data := add(data, 4)\r\n            t := mload(data)\r\n            mstore(data, sub (l, 4))\r\n        }\r\n        reason = abi.decode(data, (string));\r\n        assembly {\r\n            mstore(data, t)\r\n        }\r\n    }\r\n    \r\n    function _isContract(address adr) internal view returns (bool){\r\n        uint32 size;\r\n        assembly { size := extcodesize(adr) }\r\n        return (size > 0);\r\n    }\r\n\r\n    event ImplementationUpdated(bytes4 selector, address delegate);\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"ImplementationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"getImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"initialize\",\"type\":\"bool\"}],\"name\":\"setImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BoggedFinanceProxy", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "1", "Implementation": "0xb2ddf4b9116a64bf80082a2efa1821ca5f9ceba4", "SwarmSource": "ipfs://42e63fd7b2e7a0249eb5587d9302df7318119736313939e2cf0139dc32aa8e7a"}