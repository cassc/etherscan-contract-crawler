{"SourceCode": "/**\r\n *Submitted for verification at testnet.bscscan.com on 2023-10-06\r\n */\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint256);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function getOwner() external view returns (address);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address _owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Altroz is IBEP20, Ownable {\r\n    // Define the USDT token contract address\r\n    address public usdtTokenAddress;\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n    uint256 private _decimals;\r\n    string private _symbol;\r\n    string private _name;\r\n    address public token;\r\n\r\n    address admin_fee_address = 0x94efA74AB0190B9EbE3BAf66f087D424E7f5B429;\r\n    address liquidity_pool_address = 0xEdd64B6e6AA8aeE8e774c5A8AcdE173187315528;\r\n    uint256 public totalCollection;\r\n    uint256 public totalMint;\r\n\r\n    constructor(address token_address, address usdtAddress) {\r\n        _name = \"Altroz\";\r\n        _symbol = \"ALTZ\";\r\n        _decimals = 18;\r\n        _totalSupply = 0 * 10**_decimals;\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n        totalCollection = 0;\r\n        totalMint = 0;\r\n        token = token_address;\r\n        usdtTokenAddress = usdtAddress;\r\n        isRegistered[address(this)] = true;\r\n    }\r\n\r\n    function getOwner() external view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function decimals() external view returns (uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n    function symbol() external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function totalSupply() external view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) external view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            msg.sender,\r\n            _allowances[sender][msg.sender].sub(amount)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal {\r\n        require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n        require(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function withdraw(\r\n        address con_address,\r\n        address recevier,\r\n        uint256 amount\r\n    ) public onlyOwner {\r\n        address payable to = payable(recevier);\r\n        IBEP20(con_address).transfer(to, amount);\r\n    }\r\n\r\n    function withdrawCollection(address payable recevier, uint256 amount)\r\n        public\r\n        onlyOwner\r\n    {\r\n        recevier.transfer(amount);\r\n    }\r\n\r\n    uint256 public altroz_rate = 57000000000000;\r\n\r\n    // uint256 public distribute_level = 10;\r\n    // uint256 public levelPercent = 15;\r\n    uint256 public payoutPercent = 50;\r\n    uint256 public directPercent = 15;\r\n    uint256 public adminPercent = 10;\r\n    uint256 public liquidityPercent = 25;\r\n    event Burn(address user_address, uint256 amt);\r\n\r\n    struct User {\r\n        address referral_address;\r\n        uint256 totalDeposit;\r\n        uint256 level;\r\n    }\r\n\r\n    struct Buyhistory {\r\n        uint256 bnb_amt;\r\n        uint256 token_to_user;\r\n        uint256 distribution_amt;\r\n        uint256 distrbution_to_per_level;\r\n        uint256 admin_amt;\r\n    }\r\n\r\n    struct SellHistory {\r\n        uint256 token_amount;\r\n        uint256 bnb_received;\r\n    }\r\n\r\n    mapping(address => Buyhistory) public buyRecord;\r\n    mapping(address => User) public userRegister;\r\n    mapping(address => bool) public isRegistered;\r\n    mapping(address => SellHistory) public sellRecord;\r\n\r\n    event ReferralIncomeDistributed(\r\n        address indexed user,\r\n        uint256 amount,\r\n        uint256 level\r\n    );\r\n\r\n    function register(address refer_address) public {\r\n        require(refer_address != msg.sender, \"Cannot refer yourself\");\r\n        require(!isRegistered[msg.sender], \"User is already registered\");\r\n        require(isRegistered[refer_address], \"Invaild referral address\");\r\n\r\n        userRegister[msg.sender].referral_address = refer_address;\r\n        userRegister[msg.sender].totalDeposit = 0;\r\n        userRegister[msg.sender].level = 0;\r\n\r\n        isRegistered[msg.sender] = true;\r\n    }\r\n\r\n    // function BuyAltroz() public payable {\r\n    //     require(isRegistered[msg.sender], \"User is not belongs to system\");\r\n    //     require(msg.value > 0, \"Zero is not allowed to deposit\");\r\n\r\n    //     // uint256 altroz = msg.value.mul(1 ether).div(altroz_rate);\r\n\r\n    //     // uint256 user_amt = altroz.mul(payoutPercent).div(100);\r\n\r\n    //     // uint256 refer_amt = user_amt.mul(directPercent).div(100);\r\n\r\n    //     // uint256 refer_per = refer_amt.div(distribute_level);\r\n\r\n    //     // uint256 admin_amt = user_amt.mul(adminPercent).div(100);\r\n\r\n    //     // totalCollection = totalCollection + msg.value;\r\n\r\n    //     // //user\r\n    //     // _balances[msg.sender] = _balances[msg.sender].add(user_amt);\r\n    //     // emit Transfer(address(0), msg.sender, user_amt);\r\n\r\n    //     // // admin\r\n    //     // _balances[admin_fee_address] = _balances[admin_fee_address].add(\r\n    //     //     admin_amt\r\n    //     // );\r\n    //     // emit Transfer(address(0), admin_fee_address, admin_amt);\r\n\r\n    //     // address currentReferrer = userRegister[msg.sender].referral_address;\r\n\r\n    //     // for (uint256 i = 0; i < distribute_level; i++) {\r\n    //     //     if (currentReferrer == address(0)) {\r\n    //     //         _balances[address(this)] = _balances[address(this)].add(\r\n    //     //             refer_per\r\n    //     //         );\r\n    //     //         emit Transfer(address(0), address(this), refer_per);\r\n    //     //     } else {\r\n    //     //         _balances[currentReferrer] = _balances[currentReferrer].add(\r\n    //     //             refer_per\r\n    //     //         );\r\n    //     //         emit Transfer(address(0), currentReferrer, refer_per);\r\n    //     //     }\r\n\r\n    //     //     emit ReferralIncomeDistributed(currentReferrer, refer_per, i + 1);\r\n    //     //     currentReferrer = userRegister[currentReferrer].referral_address;\r\n    //     // }\r\n\r\n    //     // userRegister[msg.sender].totalDeposit =\r\n    //     //     userRegister[msg.sender].totalDeposit +\r\n    //     //     msg.value;\r\n\r\n    //     // totalMint = totalMint + user_amt + refer_amt + admin_amt;\r\n    //     // _totalSupply = _totalSupply + user_amt + refer_amt + admin_amt;\r\n    //     // altroz_rate = totalCollection.mul(1 ether).div(totalMint);\r\n\r\n    //     // buyRecord[msg.sender].bnb_amt = msg.value;\r\n    //     // buyRecord[msg.sender].token_to_user = user_amt;\r\n    //     // buyRecord[msg.sender].distribution_amt = refer_amt;\r\n    //     // buyRecord[msg.sender].distrbution_to_per_level = refer_per;\r\n    //     // buyRecord[msg.sender].admin_amt = admin_amt;\r\n\r\n    //     uint256 altroz = msg.value.mul(1 ether).div(altroz_rate);\r\n\r\n    //     // Calculate all other percentages based on totalTokens\r\n    //     uint256 totalTokens = altroz;\r\n\r\n    //     // Calculate levelPercent per level\r\n    //     uint256 levelPerLevel = totalTokens\r\n    //         .mul(levelPercent)\r\n    //         .div(distribute_level)\r\n    //         .div(100);\r\n\r\n    //     uint256 user_amt = totalTokens.mul(payoutPercent).div(100);\r\n    //     uint256 refer_amt = totalTokens.mul(directPercent).div(100);\r\n    //     uint256 admin_amt = totalTokens.mul(adminPercent).div(100);\r\n    //     uint256 liquidity_amt = totalTokens.mul(liquidityPercent).div(100);\r\n\r\n    //     totalCollection = totalCollection + msg.value;\r\n\r\n    //     // User\r\n    //     _balances[msg.sender] = _balances[msg.sender].add(user_amt);\r\n    //     emit Transfer(address(0), msg.sender, user_amt);\r\n\r\n    //     // Admin\r\n    //     _balances[admin_fee_address] = _balances[admin_fee_address].add(\r\n    //         admin_amt\r\n    //     );\r\n    //     emit Transfer(address(0), admin_fee_address, admin_amt);\r\n\r\n    //     // Liquidity pool\r\n    //     _balances[liquidity_pool_address] = _balances[liquidity_pool_address]\r\n    //         .add(liquidity_amt);\r\n    //     emit Transfer(address(0), liquidity_pool_address, liquidity_amt);\r\n\r\n    //     address currentReferrer = userRegister[msg.sender].referral_address;\r\n\r\n    //     // Direct referal\r\n\r\n    //     _balances[currentReferrer] = _balances[currentReferrer].add(refer_amt);\r\n    //     emit Transfer(address(0), currentReferrer, refer_amt);\r\n\r\n    //     for (uint256 i = 0; i < distribute_level; i++) {\r\n    //         if (currentReferrer == address(0)) {\r\n    //             _balances[address(this)] = _balances[address(this)].add(\r\n    //                 levelPerLevel\r\n    //             );\r\n    //             emit Transfer(address(0), address(this), levelPerLevel);\r\n    //         } else {\r\n    //             _balances[currentReferrer] = _balances[currentReferrer].add(\r\n    //                 levelPerLevel\r\n    //             );\r\n    //             emit Transfer(address(0), currentReferrer, levelPerLevel);\r\n    //         }\r\n\r\n    //         emit ReferralIncomeDistributed(\r\n    //             currentReferrer,\r\n    //             levelPerLevel,\r\n    //             i + 1\r\n    //         );\r\n    //         currentReferrer = userRegister[currentReferrer].referral_address;\r\n    //     }\r\n\r\n    //     userRegister[msg.sender].totalDeposit =\r\n    //         userRegister[msg.sender].totalDeposit +\r\n    //         msg.value;\r\n\r\n    //     totalMint =\r\n    //         totalMint +\r\n    //         user_amt +\r\n    //         refer_amt +\r\n    //         admin_amt +\r\n    //         liquidity_amt +\r\n    //         (levelPerLevel * distribute_level);\r\n    //     _totalSupply =\r\n    //         _totalSupply +\r\n    //         user_amt +\r\n    //         refer_amt +\r\n    //         admin_amt +\r\n    //         liquidity_amt +\r\n    //         (levelPerLevel * distribute_level);\r\n    //     altroz_rate = totalCollection.mul(1 ether).div(totalMint);\r\n\r\n    //     buyRecord[msg.sender].bnb_amt = msg.value;\r\n    //     buyRecord[msg.sender].token_to_user = user_amt;\r\n    //     buyRecord[msg.sender].distribution_amt = refer_amt;\r\n    //     buyRecord[msg.sender].distrbution_to_per_level = levelPerLevel;\r\n    //     buyRecord[msg.sender].admin_amt = admin_amt;\r\n    // }\r\n\r\n    // function buyAltroz() public payable {\r\n    //     require(isRegistered[msg.sender], \"User is not belongs to system\");\r\n    //     require(msg.value > 0, \"Zero is not allowed to deposit\");\r\n\r\n    //     uint256 altroz = msg.value.mul(1 ether).div(altroz_rate);\r\n\r\n    //     // Calculate user amount with the new payoutPercent\r\n    //     uint256 user_amt = altroz.mul(payoutPercent).div(100);\r\n\r\n    //     // Calculate refer amount with the new directPercent\r\n    //     uint256 refer_amt = altroz.mul(directPercent).div(100);\r\n\r\n    //     // Calculate admin amount with the adminPercent\r\n    //     uint256 admin_amt = altroz.mul(adminPercent).div(100);\r\n\r\n    //     // Calculate liquidity pool amount with the new liquidityPercent\r\n    //     uint256 liquidity_amt = altroz.mul(liquidityPercent).div(100);\r\n\r\n    //     totalCollection = totalCollection.add(msg.value);\r\n\r\n    //     // User\r\n    //     _balances[msg.sender] = _balances[msg.sender].add(user_amt);\r\n    //     emit Transfer(address(0), msg.sender, user_amt);\r\n\r\n    //     // Admin\r\n    //     _balances[admin_fee_address] = _balances[admin_fee_address].add(\r\n    //         admin_amt\r\n    //     );\r\n    //     emit Transfer(address(0), admin_fee_address, admin_amt);\r\n\r\n    //     // Liquidity pool\r\n    //     _balances[liquidity_pool_address] = _balances[liquidity_pool_address]\r\n    //         .add(liquidity_amt);\r\n    //     emit Transfer(address(0), liquidity_pool_address, liquidity_amt);\r\n\r\n    //     address currentReferrer = userRegister[msg.sender].referral_address;\r\n\r\n    //     // Direct referral\r\n    //     _balances[currentReferrer] = _balances[currentReferrer].add(refer_amt);\r\n    //     emit Transfer(address(0), currentReferrer, refer_amt);\r\n\r\n    //     userRegister[msg.sender].totalDeposit = userRegister[msg.sender]\r\n    //         .totalDeposit\r\n    //         .add(msg.value);\r\n\r\n    //     totalMint = totalMint.add(user_amt).add(refer_amt).add(admin_amt).add(\r\n    //         liquidity_amt\r\n    //     );\r\n    //     _totalSupply = _totalSupply\r\n    //         .add(user_amt)\r\n    //         .add(refer_amt)\r\n    //         .add(admin_amt)\r\n    //         .add(liquidity_amt);\r\n    //     altroz_rate = totalCollection.mul(1 ether).div(totalMint);\r\n\r\n    //     // Update buyRecord\r\n    //     buyRecord[msg.sender].bnb_amt = msg.value;\r\n    //     buyRecord[msg.sender].token_to_user = user_amt;\r\n    //     buyRecord[msg.sender].distribution_amt = refer_amt;\r\n    //     buyRecord[msg.sender].admin_amt = admin_amt;\r\n    // }\r\n\r\n    function buyAltroz(uint256 usdtAmount) public {\r\n        require(isRegistered[msg.sender], \"User is not belongs to the system\");\r\n        require(usdtAmount > 0, \"Zero is not allowed to deposit\");\r\n\r\n        // Interact with the USDT contract using its address to transfer USDT tokens from the sender to this contract\r\n        require(\r\n            IBEP20(usdtTokenAddress).transferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                usdtAmount\r\n            ),\r\n            \"USDT transfer failed\"\r\n        );\r\n\r\n        uint256 altroz = usdtAmount.mul(1 ether).div(altroz_rate);\r\n\r\n        // Calculate user amount with the new payoutPercent\r\n        uint256 user_amt = altroz.mul(payoutPercent).div(100);\r\n\r\n        // Calculate admin amount with the adminPercent\r\n        uint256 admin_amt = altroz.mul(adminPercent).div(100);\r\n\r\n        // Calculate direct referral amount with the new directPercent\r\n        uint256 direct_amt = usdtAmount.mul(directPercent).div(100);\r\n\r\n        // Calculate liquidity pool amount with the new liquidityPercent\r\n        uint256 liquidity_amt = usdtAmount.mul(liquidityPercent).div(100);\r\n\r\n        totalCollection = totalCollection.add(usdtAmount);\r\n\r\n        // User\r\n        _balances[msg.sender] = _balances[msg.sender].add(user_amt);\r\n        emit Transfer(address(0), msg.sender, user_amt);\r\n\r\n        // Admin\r\n        _balances[admin_fee_address] = _balances[admin_fee_address].add(\r\n            admin_amt\r\n        );\r\n        emit Transfer(address(0), admin_fee_address, admin_amt);\r\n\r\n        // Direct referral\r\n        address currentReferrer = userRegister[msg.sender].referral_address;\r\n        if (currentReferrer != address(0)) {\r\n            address payable directReferral = payable(currentReferrer);\r\n            directReferral.transfer(direct_amt);\r\n        }\r\n\r\n        // Liquidity pool\r\n        address payable liquidityAddress = payable(liquidity_pool_address);\r\n        liquidityAddress.transfer(liquidity_amt);\r\n\r\n        userRegister[msg.sender].totalDeposit = userRegister[msg.sender]\r\n            .totalDeposit\r\n            .add(usdtAmount);\r\n\r\n        totalMint = totalMint.add(user_amt).add(admin_amt);\r\n        _totalSupply = _totalSupply.add(user_amt).add(admin_amt);\r\n        altroz_rate = totalCollection.mul(1 ether).div(totalMint);\r\n\r\n        // Update buyRecord\r\n        buyRecord[msg.sender].bnb_amt = usdtAmount;\r\n        buyRecord[msg.sender].token_to_user = user_amt;\r\n        buyRecord[msg.sender].admin_amt = admin_amt;\r\n    }\r\n\r\n    function sellAltroz(uint256 tokenAmount) public {\r\n        require(isRegistered[msg.sender], \"User is not belongs to system\");\r\n        require(tokenAmount > 0, \"Tokens amount must be greater than 0\");\r\n        require(\r\n            IBEP20(token).balanceOf(msg.sender) >= tokenAmount.mul(10).div(100),\r\n            \"You need 10 Roller pro tokens\"\r\n        );\r\n\r\n        _balances[msg.sender] = _balances[msg.sender].sub(tokenAmount);\r\n        _totalSupply = _totalSupply.sub(tokenAmount);\r\n        emit Burn(msg.sender, tokenAmount);\r\n\r\n        uint256 amt = (tokenAmount).mul(altroz_rate).div(1 ether);\r\n        uint256 deduction = amt.mul(adminPercent).div(100);\r\n        uint256 final_amt = amt.sub(deduction);\r\n\r\n        require(\r\n            final_amt > userRegister[msg.sender].totalDeposit.mul(2 ether),\r\n            \"Max sell limit\"\r\n        );\r\n        altroz_rate = totalCollection.mul(1 ether).div(totalMint);\r\n\r\n        address payable to = payable(msg.sender);\r\n        to.transfer(final_amt);\r\n\r\n        // Update the sellRecord for the user\r\n        sellRecord[msg.sender].token_amount = sellRecord[msg.sender]\r\n            .token_amount\r\n            .add(tokenAmount);\r\n        sellRecord[msg.sender].bnb_received = sellRecord[msg.sender]\r\n            .bnb_received\r\n            .add(final_amt);\r\n    }\r\n\r\n    function getValue(uint256 tokenAmount)\r\n        public\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 amt = (tokenAmount).mul(altroz_rate).div(1 ether);\r\n        uint256 deduction = amt.mul(adminPercent).div(100);\r\n        uint256 final_amt = amt.sub(deduction);\r\n        return (amt, deduction, final_amt);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdtAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"ReferralIncomeDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"adminPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"altroz_rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"buyAltroz\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyRecord\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bnb_amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token_to_user\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distribution_amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distrbution_to_per_level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"admin_amt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"directPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"getValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"refer_address\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"sellAltroz\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellRecord\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"token_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bnb_received\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCollection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRegister\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"referral_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"con_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recevier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recevier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Altroz", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000d899ebded30f1f2939593c6d3a9fc70d0201280c00000000000000000000000055d398326f99059ff775485246999027b3197955", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://24a51298ea083e8c0fedf9bc5a69bf80eb992be84ae0526b6f9d0c3c8ed0c14b"}