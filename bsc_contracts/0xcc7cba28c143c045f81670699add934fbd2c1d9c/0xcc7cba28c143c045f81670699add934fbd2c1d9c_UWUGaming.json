{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\nlibrary SafeMath {\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract SafeToken is Ownable {\r\n    address payable safeManager;\r\n\r\n    constructor() {\r\n        safeManager = payable(msg.sender);\r\n    }\r\n\r\n    function setSafeManager(address payable _safeManager) public onlyOwner {\r\n        safeManager = _safeManager;\r\n    }\r\n\r\n    function withdraw(address _token, uint256 _amount) external {\r\n        require(msg.sender == safeManager);\r\n        IERC20(_token).transfer(safeManager, _amount);\r\n    }\r\n\r\n    function withdrawBNB(uint256 _amount) external {\r\n        require(msg.sender == safeManager);\r\n        safeManager.transfer(_amount);\r\n    }\r\n}\r\n\r\ncontract UWUGaming is ERC20, Ownable, SafeToken {\r\n    using SafeMath for uint;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n\r\n    uint256 public _totalSupply;\r\n    uint256 public _totalSupplyWithDecimals;\r\n\r\n    uint256 public liquidityFee;\r\n    uint256 public rewardFee;\r\n    uint256 public devFee;\r\n    uint256 public transferCardFee;\r\n    bool public rewardPoolFee = false;\r\n\r\n    uint256 public _swapTokensAtAmount;\r\n    bool public _swapTokensEnabled = true;\r\n    bool public _tradingEnabled = false;\r\n\r\n    address public devWallet;\r\n    address public rewardWallet;\r\n\r\n    bool private _inSwap;\r\n\r\n    struct CardType {\r\n        uint id;\r\n        bool activated;\r\n        uint256 price;\r\n    }\r\n\r\n    struct Card {\r\n        uint id;\r\n        uint cardTypeId;\r\n        address owner;\r\n    }\r\n\r\n    struct CardAuction {\r\n        uint id;\r\n        uint cardId;\r\n        uint256 price;\r\n        address owner;\r\n        bool sold;\r\n        bool canceled;\r\n    }\r\n\r\n    uint _cardTypeId = 0;\r\n    uint _cardId = 0;\r\n    uint _cardAuctionId = 0;\r\n\r\n    mapping (uint => CardType) public _cardTypes;\r\n    mapping (uint => Card) public _cards;\r\n    mapping (uint => CardAuction) public _cardAuctions;\r\n\r\n    mapping (address => bool) private _isExcludedFromFees;\r\n    mapping (address => bool) public _marketPairs;\r\n\r\n    event AddCardType(uint cardTypeId, bool active, uint256 amount);\r\n    event UpdateCardTypePrice(uint cardTypeId, uint256 amount);\r\n    event UpdateCardTypePrices(uint timestamp);\r\n    event UpdateCardTypeActivated(uint cardTypeId, bool activated);\r\n    event BuyCard(address indexed account, uint cardTypeId, uint256 amount, uint256 price);\r\n    event GiftCard(address indexed receiver, uint cardId);\r\n    event GiftCards(uint timestamp);\r\n    event TransferCard(address indexed from, address indexed to, uint cardId);\r\n    event CreateAuction(address indexed account, uint cardId, uint256 amount);\r\n    event UpdateAuctionPrice(address indexed account, uint cardAuctionId, uint256 amount);\r\n    event BuyAuction(address indexed from, address indexed to, uint cardId, uint256 amount);\r\n    event CancelAuction(address indexed account, uint cardAuctionId);\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n    event SendRewards(address indexed account, uint256 amount);\r\n    event ContractCreation(address indexed from, address indexed to, uint256 value);\r\n    event Presale(address indexed from, address indexed to, uint256 amount);\r\n    event EnableTrading(uint256 timestamp);\r\n\r\n    constructor() ERC20(\"UWU Gaming\", \"UWU\") {\r\n        _totalSupply = 10000000;\r\n        _totalSupplyWithDecimals = _totalSupply * 10 ** decimals();\r\n\r\n        // Set trading fees\r\n        liquidityFee = 3;\r\n        rewardFee = 3;\r\n        devFee = 2;\r\n\r\n        // Set card transfer fee\r\n        setTransferCardFee(500);\r\n\r\n        // Set wallets\r\n        devWallet = address(0x3a651C8f19E366Aa3E99dfF67df6D6b31094B819);\r\n        rewardWallet = address(0xC664DFDB68edd9A655DF9dFA7Ff52105208Fc6F6);\r\n\r\n        // Exclude wallets from fees\r\n        excludeFromFees(owner(), true);\r\n        excludeFromFees(devWallet, true);\r\n        excludeFromFees(rewardWallet, true);\r\n        excludeFromFees(address(this), true);\r\n\r\n        // Create first 6 cards\r\n        addCardType(true, 340);\r\n        addCardType(true, 640);\r\n        addCardType(true, 850);\r\n        addCardType(true, 1020);\r\n        addCardType(true, 1275);\r\n        addCardType(true, 4250);\r\n\r\n        // Pancakeswap router\r\n        //IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3);\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\r\n        // Create pair\r\n        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        // Save router and pair in contract\r\n        uniswapV2Router = _uniswapV2Router;\r\n        uniswapV2Pair = _uniswapV2Pair;\r\n        setMarketPair(uniswapV2Pair, true);\r\n\r\n        _swapTokensAtAmount = 10000 * 10 ** decimals();\r\n\r\n        // Mint tokens to token creator, this function can never be accessed again\r\n        _mint(msg.sender, _totalSupplyWithDecimals);\r\n\r\n        emit ContractCreation(address(0), owner(), _totalSupplyWithDecimals);\r\n    }\r\n\r\n    /**\r\n     * @dev Enable trading.\r\n     * Function is used to stop early bots from purchasing on first LP injection.\r\n     */\r\n    function enableTrading() public onlyOwner {\r\n        require(!_tradingEnabled, \"Trading is already enabled.\");\r\n        _tradingEnabled = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Add new type of card.\r\n     */\r\n    function addCardType(bool active, uint256 tokenAmount) public onlyOwner {\r\n        require(tokenAmount > 0, \"Token amount needs to be higher than 0.\");\r\n\r\n        _cardTypeId++;\r\n\r\n        uint256 cardPrice = tokenAmount * 10 ** decimals();\r\n\r\n        // Create the new card type\r\n        _cardTypes[_cardTypeId] = CardType(_cardTypeId, active, cardPrice);\r\n\r\n        emit AddCardType(_cardTypeId, active, cardPrice);\r\n    }\r\n\r\n    /**\r\n     * @dev Update existing type of card.\r\n     */\r\n    function updateCardTypePrice(uint cardTypeId, uint256 tokenAmount) public onlyOwner {\r\n        require(tokenAmount > 0, \"Token amount needs to be higher than 0.\");\r\n        require(_cardTypes[cardTypeId].id > 0, \"Card type does not exist.\");\r\n\r\n        uint256 newCardPrice = tokenAmount * 10 ** decimals();\r\n\r\n        // Update the price of card type\r\n        _cardTypes[cardTypeId].price = newCardPrice;\r\n\r\n        emit UpdateCardTypePrice(cardTypeId, newCardPrice);\r\n    }\r\n\r\n    /**\r\n     * @dev Update existing type of card.\r\n     */\r\n    function updateCardTypePrices(uint[] memory cardTypeIds, uint256[] memory tokenAmounts) public onlyOwner {\r\n        for (uint i = 0; i < cardTypeIds.length; i++) {\r\n            require(tokenAmounts[i] > 0, \"Token amount needs to be higher than 0.\");\r\n            require(_cardTypes[cardTypeIds[i]].id > 0, \"Card type does not exist.\");\r\n\r\n            // Update the price of card type\r\n            _cardTypes[cardTypeIds[i]].price = tokenAmounts[i] * 10 ** decimals();\r\n        }\r\n\r\n        emit UpdateCardTypePrices(block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @dev Update existing type of card.\r\n     */\r\n    function updateCardTypeActivated(uint cardTypeId, bool activated) public onlyOwner {\r\n        require(_cardTypes[cardTypeId].id > 0, \"Card type does not exist.\");\r\n\r\n        _cardTypes[cardTypeId].activated = activated;\r\n\r\n        emit UpdateCardTypeActivated(cardTypeId, activated);\r\n    }\r\n\r\n    /**\r\n     * @dev Buy card making transfer to reward wallet including fees.\r\n     */\r\n    function buyCard(uint amount, uint cardTypeId) public {\r\n        require(amount > 0, \"Amount of cards has to be more than 0.\");\r\n        require(_cardTypes[cardTypeId].id > 0, \"Card type does not exist.\");\r\n        require(_cardTypes[cardTypeId].activated, \"Card type is not for sale as of this moment.\");\r\n\r\n        uint256 totalCost = _cardTypes[cardTypeId].price.mul(amount);\r\n\r\n        // Remove reward wallet from excluded from fees.\r\n        _isExcludedFromFees[rewardWallet] = false;\r\n\r\n        // Make transfer to the reward wallet.\r\n        _transfer(msg.sender, rewardWallet, totalCost);\r\n\r\n        // Add reward wallet to excluded from fees.\r\n        _isExcludedFromFees[rewardWallet] = true;\r\n\r\n        for (uint i = 0; i < amount; i++) {\r\n            _cardId++;\r\n            Card memory card = Card(_cardId, cardTypeId, msg.sender);\r\n            _cards[card.id] = card;\r\n        }\r\n\r\n        emit BuyCard(msg.sender, cardTypeId, amount, totalCost);\r\n    }\r\n\r\n    /**\r\n     * @dev Gift card to the receiver.\r\n     */\r\n    function giftCard(uint cardTypeId, address receiver) public onlyOwner {\r\n        require(_cardTypes[cardTypeId].id > 0, \"Card type does not exist.\");\r\n\r\n        _cardId++;\r\n\r\n        Card memory card = Card(_cardId, cardTypeId, receiver);\r\n        _cards[card.id] = card;\r\n\r\n        emit GiftCard(receiver, card.id);\r\n    }\r\n\r\n    /** \r\n     * @dev Gift cards to receivers.\r\n     */\r\n    function giftCards(uint[] memory cardTypeIds, address[] memory receivers) public onlyOwner {\r\n        for (uint i = 0; i < receivers.length; i++) {\r\n            giftCard(cardTypeIds[i], receivers[i]);\r\n        }\r\n\r\n        emit GiftCards(block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer card.\r\n     */\r\n    function transferCard(uint cardId, address to) public {\r\n        require(_cards[cardId].id > 0, \"Card does not exist.\");\r\n        require(_cards[cardId].owner == msg.sender, \"Card does not belong to you.\");\r\n\r\n        if (!_isExcludedFromFees[msg.sender]) {\r\n            // Remove reward wallet from excluded from fees.\r\n            _isExcludedFromFees[rewardWallet] = false;\r\n\r\n            // Transfer the card transfer fee to reward wallet.\r\n            _transfer(msg.sender, rewardWallet, transferCardFee);\r\n\r\n            // Add reward wallet to excluded from fees.\r\n            _isExcludedFromFees[rewardWallet] = true;\r\n        }\r\n\r\n        _cards[cardId].owner = to;\r\n\r\n        emit TransferCard(msg.sender, to, cardId);\r\n    }\r\n\r\n    /**\r\n     * @dev Auction card for amounts of token setting contract as card owner.\r\n     */\r\n    function createAuction(uint cardId, uint256 tokenAmount) public {\r\n        require(_cards[cardId].owner == msg.sender, \"You are not the owner of this card.\");\r\n        require(tokenAmount > 0, \"Auction price has to be higher than 0.\");\r\n        require(tokenAmount < _totalSupply, \"Auction price needs to be lower then the total supply.\");\r\n\r\n        _cardAuctionId++;\r\n\r\n        // Set contract as the new owner\r\n        _cards[cardId].owner = address(this);\r\n\r\n        uint256 price = tokenAmount * 10 ** decimals();\r\n        CardAuction memory cardAuction = CardAuction(_cardAuctionId, cardId, price, msg.sender, false, false);\r\n\r\n        _cardAuctions[cardAuction.id] = cardAuction;\r\n\r\n        emit CreateAuction(msg.sender, cardId, price);\r\n    }\r\n\r\n    /**\r\n     * @dev Cancel auctioned card setting auction owner as card owner again\r\n     */\r\n    function cancelAuction(uint cardAuctionId) public {\r\n        CardAuction memory cardAuction = _cardAuctions[cardAuctionId];\r\n\r\n        require(cardAuction.owner == msg.sender, \"You do not own this auctioned card.\");\r\n        require(cardAuction.id > 0, \"Card auction does not exist.\");\r\n        require(!cardAuction.sold, \"Card auction is already sold.\");\r\n        require(!cardAuction.canceled, \"Card auction is already canceled.\");\r\n\r\n        // Set auction as canceled\r\n        _cardAuctions[cardAuctionId].canceled = true;\r\n\r\n        // Set sender as owner of the card again\r\n        _cards[cardAuction.cardId].owner = msg.sender;\r\n\r\n        emit CancelAuction(msg.sender, cardAuctionId);\r\n    }\r\n\r\n    /**\r\n     * @dev Cancel auctioned card setting auction owner as card owner again\r\n     */\r\n    function updateAuctionPrice(uint cardAuctionId, uint256 tokenAmount) public {\r\n        CardAuction memory cardAuction = _cardAuctions[cardAuctionId];\r\n\r\n        require(cardAuction.owner == msg.sender, \"You do not own this auctioned card.\");\r\n        require(cardAuction.id > 0, \"Card auction does not exist.\");\r\n        require(!cardAuction.sold, \"Card auction is sold.\");\r\n        require(!cardAuction.canceled, \"Card auction is canceled.\");\r\n        require(tokenAmount > 0, \"Auction price has to be higher than 0.\");\r\n        require(tokenAmount < _totalSupply, \"Auction price needs to be lower then the total supply.\");\r\n\r\n        // Set new price for auction\r\n        _cardAuctions[cardAuctionId].price = tokenAmount * 10 ** decimals();\r\n\r\n        emit UpdateAuctionPrice(msg.sender, cardAuctionId, tokenAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Buy auctioned card setting sender as new owner of the card and sending priced amount to auction owner.\r\n     */\r\n    function buyAuction(uint cardAuctionId) public {\r\n        CardAuction memory cardAuction = _cardAuctions[cardAuctionId];\r\n\r\n        require(cardAuction.owner != msg.sender, \"You can not buy your own auctioned cards, cancel your auction instead.\");\r\n        require(cardAuction.id > 0, \"Card auction does not exist.\");\r\n        require(!cardAuction.canceled, \"Card auction has been canceled.\");\r\n        require(!cardAuction.sold, \"Card auction has been sold already.\");\r\n\r\n        // Set buyer as card owner\r\n        _cards[cardAuction.cardId].owner = msg.sender;\r\n\r\n        // Make transaction of the auctioned amount\r\n        _transfer(msg.sender, cardAuction.owner, cardAuction.price);\r\n\r\n        // Set auction as sold\r\n        _cardAuctions[cardAuctionId].sold = true;\r\n\r\n        emit BuyAuction(msg.sender, cardAuction.owner, cardAuction.cardId, cardAuction.price);\r\n    }\r\n\r\n    /**\r\n     * @dev Get all cards types.\r\n     */\r\n    function getAllCardTypes() public view returns (CardType[] memory) {\r\n        CardType[] memory cardTypes = new CardType[](_cardTypeId);\r\n\r\n        for (uint i = 1; i <= _cardTypeId; i++) {\r\n            cardTypes[i - 1] = _cardTypes[i];\r\n        }\r\n\r\n        return cardTypes;\r\n    }\r\n\r\n    /**\r\n     * @dev Set new fee for card transfers.\r\n     */\r\n    function setTransferCardFee(uint256 _transferCardFee) public onlyOwner {\r\n        transferCardFee = _transferCardFee * 10 ** decimals();\r\n    }\r\n\r\n    /**\r\n     * @dev Set new fees for the contract.\r\n     */\r\n    function setFee(uint256 _liquidityFee, uint256 _rewardFee, uint256 _devFee) public onlyOwner {\r\n        require(_liquidityFee.add(_rewardFee).add(_devFee) < 11, \"Total fees can not be higher than 10.\");\r\n\r\n        liquidityFee = _liquidityFee;\r\n        rewardFee = _rewardFee;\r\n        devFee = _devFee;\r\n    }\r\n\r\n    /**\r\n     * @dev Set new dev wallet which will receive the trading fees for developers.\r\n     */\r\n    function setDevWallet(address _newDevWallet) public onlyOwner {\r\n        devWallet = _newDevWallet;\r\n    }\r\n\r\n    /**\r\n     * @dev Set new reward wallet which will receive the trading fees for rewards.\r\n     */\r\n    function setRewardWallet(address _newRewardWallet) public onlyOwner {\r\n        rewardWallet = _newRewardWallet;\r\n    }\r\n\r\n    /**\r\n     * @dev Exclude token from contract fees, adding address to array of excluded addresses.\r\n     */\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n        require(_isExcludedFromFees[account] != excluded, \"Address is already excluded!\");\r\n\r\n        _isExcludedFromFees[account] = excluded;\r\n\r\n        emit ExcludeFromFees(account, excluded);\r\n    }\r\n\r\n    /**\r\n     * @dev Check if address is excluded from contract fees.\r\n     */\r\n    function isExcludedFromFees(address account) public view returns (bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Set new router address for the contract token.\r\n     */\r\n    function setRouterAddress(address newRouter) public onlyOwner {\r\n        require(newRouter != address(uniswapV2Router), \"The router already has that address\");\r\n\r\n        IUniswapV2Router02 _newPancakeRouter = IUniswapV2Router02(newRouter);\r\n        uniswapV2Pair = IUniswapV2Factory(_newPancakeRouter.factory()).createPair(address(this), _newPancakeRouter.WETH());\r\n        uniswapV2Router = _newPancakeRouter;\r\n\r\n        setMarketPair(uniswapV2Pair, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Set new market pair\r\n     */\r\n    function setMarketPair(address pair, bool value) public onlyOwner {\r\n        _setMarketPair(pair, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Set new market pair, saving router address.\r\n     */\r\n    function _setMarketPair(address pair, bool value) private {\r\n        _marketPairs[pair] = value;\r\n    }\r\n\r\n    /**\r\n     * @dev Set contract tokens swap function as enabled or disabled.\r\n     */\r\n    function setSwapTokensEnabled(bool value) external onlyOwner {\r\n        _swapTokensEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * @dev Set amount of which contract listens to for when to swap contract tokens.\r\n     */\r\n    function setSwapTokensAtAmount(uint256 amount) external onlyOwner {\r\n        _swapTokensAtAmount = amount * 10 ** decimals();\r\n    }\r\n\r\n    /**\r\n     * @dev Modified transfer collecting fees to correct wallets.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0), \"Cannot transfer from the zero address\");\r\n        require(to != address(0), \"Cannot transfer to the zero address\");\r\n        require(\r\n            _tradingEnabled ||\r\n            _isExcludedFromFees[from],\r\n            \"Trading has not been enabled yet.\"\r\n        );\r\n\r\n        if (amount == 0) {\r\n            super._transfer(from, to, 0);\r\n            return;\r\n        }\r\n\r\n        uint256 walletTokenBalance = balanceOf(address(from));\r\n        require(\r\n            walletTokenBalance >= amount,\r\n            \"Transfer amount exceeds wallet balance\"\r\n        );\r\n\r\n        // Amount to transfer\r\n        uint256 transferAmount = amount;\r\n\r\n        if (\r\n            !_isExcludedFromFees[from] &&\r\n            !_isExcludedFromFees[to]\r\n        ) {\r\n            uint256 devAmount = amount.mul(devFee).div(100);\r\n            uint256 rewardAmount = amount.mul(rewardFee).div(100);\r\n            uint256 liquidityAmount = amount.mul(liquidityFee).div(100);\r\n\r\n            // Remove the fees from the amount to transfer\r\n            transferAmount = amount.sub(devAmount).sub(rewardAmount).sub(liquidityAmount);\r\n\r\n            super._transfer(from, devWallet, devAmount);\r\n            super._transfer(from, rewardWallet, rewardAmount);\r\n            super._transfer(from, address(this), liquidityAmount);\r\n\r\n            // Contract token balance\r\n            uint256 tokenBalance = balanceOf(address(this));\r\n\r\n            if (\r\n                _swapTokensEnabled &&\r\n                !_inSwap &&\r\n                !_marketPairs[from] &&\r\n                tokenBalance >= _swapTokensAtAmount\r\n            ) {\r\n                _inSwap = true;\r\n\r\n                // Split the balance for liquidity into halves\r\n                uint256 half = tokenBalance.div(2);\r\n                uint256 otherHalf = tokenBalance.sub(half);\r\n\r\n                // BNB balance before swap\r\n                uint256 initialBalance = address(this).balance;\r\n\r\n                // Swap half of liquidity tokens to BNB\r\n                swapTokensForBnb(half);\r\n\r\n                uint256 swappedBnb = address(this).balance.sub(initialBalance);\r\n\r\n                // Add liquidity to the pool\r\n                addLiquidity(otherHalf, swappedBnb);\r\n\r\n                _inSwap = false;\r\n            }\r\n        }\r\n\r\n        // Send the original transaction\r\n        super._transfer(from, to, transferAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Swap tokens to BNB.\r\n     */\r\n    function swapTokensForBnb(uint256 tokenAmount) private {\r\n        // Generate the uniswap pair path of token -> WETH\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // Make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // Accept any amount\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Add liquidity to pancake swap router from contract balances.\r\n     */\r\n    function addLiquidity(uint256 tokenAmount, uint256 bnbAmount) private {\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // Add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value: bnbAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // Slippage is unavoidable\r\n            0, // Slippage is unavoidable\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mod for functions only executable by reward wallet.\r\n     */\r\n    modifier onlyRewardWallet() {\r\n        _checkRewardWallet();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the reward wallet.\r\n     */\r\n    function _checkRewardWallet() private view {\r\n        require(rewardWallet == _msgSender(), \"Caller is not the reward wallet.\");\r\n    }\r\n\r\n    /**\r\n     * @dev Send rewards from reward wallet to reward receivers.\r\n     */\r\n    function sendRewards(address[] calldata to, uint256[] calldata tokenAmount) external onlyRewardWallet {\r\n        uint256 totalRewards = 0;\r\n\r\n        for (uint i = 0; i < to.length; i++) {\r\n            if (rewardPoolFee) {\r\n                _transfer(msg.sender, to[i], tokenAmount[i]);\r\n            } else {\r\n                super._transfer(msg.sender, to[i], tokenAmount[i]);\r\n            }\r\n\r\n            totalRewards = totalRewards + tokenAmount[i];\r\n        }\r\n\r\n        emit SendRewards(msg.sender, totalRewards);\r\n    }\r\n\r\n    /**\r\n     * @dev Send presold tokens.\r\n     */\r\n    function preSale(address to, uint256 tokenAmount) external onlyOwner {\r\n        // Transfer the pre sold amount to receiver\r\n        uint256 amount = tokenAmount * 10 ** decimals();\r\n        super._transfer(msg.sender, to, amount);\r\n\r\n        emit Presale(msg.sender, to, amount);\r\n    }\r\n\r\n    // To receive BNB from uniswapV2Router when swaping\r\n    receive() external payable {}\r\n\r\n    function getCards(uint from_id, uint to_id, uint length) public view returns(Card[] memory) {\r\n        Card[] memory cards = new Card[](length);\r\n\r\n        uint index = 0;\r\n\r\n        for (uint i = from_id; i <= to_id; i++) {\r\n            (uint id, uint cardTypeId, address owner) = fetchCard(i);\r\n\r\n            Card memory card = Card(id, cardTypeId, owner);\r\n            cards[index] = card;\r\n            index++;\r\n        }\r\n\r\n        return cards;\r\n    }\r\n\r\n    function fetchCard(uint cardId) public view returns(uint, uint, address) {\r\n        return (_cards[cardId].id, _cards[cardId].cardTypeId, _cards[cardId].owner);\r\n    }\r\n\r\n    function getAuctions(uint from_id, uint to_id, uint length) public view returns(CardAuction[] memory) {\r\n        CardAuction[] memory auctions = new CardAuction[](length);\r\n\r\n        uint index = 0;\r\n\r\n        for (uint i = from_id; i <= to_id; i++) {\r\n            (uint id, uint cardId, uint256 price, address owner, bool sold, bool canceled) = fetchAuction(i);\r\n            CardAuction memory auction = CardAuction(id, cardId, price, owner, sold, canceled);\r\n            auctions[index] = auction;\r\n            index++;\r\n        }\r\n\r\n        return auctions;\r\n    }\r\n\r\n    function fetchAuction(uint cardAuctionId) public view returns(uint, uint, uint256, address, bool, bool) {\r\n        return (\r\n            _cardAuctions[cardAuctionId].id,\r\n            _cardAuctions[cardAuctionId].cardId,\r\n            _cardAuctions[cardAuctionId].price,\r\n            _cardAuctions[cardAuctionId].owner,\r\n            _cardAuctions[cardAuctionId].sold,\r\n            _cardAuctions[cardAuctionId].canceled\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cardTypeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddCardType\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BuyAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cardTypeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"BuyCard\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cardAuctionId\",\"type\":\"uint256\"}],\"name\":\"CancelAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ContractCreation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CreateAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"EnableTrading\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"}],\"name\":\"GiftCard\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"GiftCards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Presale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"}],\"name\":\"TransferCard\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cardAuctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UpdateAuctionPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cardTypeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"activated\",\"type\":\"bool\"}],\"name\":\"UpdateCardTypeActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cardTypeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UpdateCardTypePrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateCardTypePrices\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_cardAuctions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"sold\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canceled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_cardTypes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"activated\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_cards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cardTypeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_marketPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapTokensEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupplyWithDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"addCardType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cardAuctionId\",\"type\":\"uint256\"}],\"name\":\"buyAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cardTypeId\",\"type\":\"uint256\"}],\"name\":\"buyCard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cardAuctionId\",\"type\":\"uint256\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"createAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cardAuctionId\",\"type\":\"uint256\"}],\"name\":\"fetchAuction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"}],\"name\":\"fetchCard\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllCardTypes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"activated\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct UWUGaming.CardType[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"getAuctions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"sold\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canceled\",\"type\":\"bool\"}],\"internalType\":\"struct UWUGaming.CardAuction[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"getCards\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cardTypeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct UWUGaming.Card[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cardTypeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"giftCard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"cardTypeIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"}],\"name\":\"giftCards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"preSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPoolFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenAmount\",\"type\":\"uint256[]\"}],\"name\":\"sendRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newDevWallet\",\"type\":\"address\"}],\"name\":\"setDevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setMarketPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRewardWallet\",\"type\":\"address\"}],\"name\":\"setRewardWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"setRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_safeManager\",\"type\":\"address\"}],\"name\":\"setSafeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setSwapTokensEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transferCardFee\",\"type\":\"uint256\"}],\"name\":\"setTransferCardFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferCard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferCardFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cardAuctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"updateAuctionPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cardTypeId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"activated\",\"type\":\"bool\"}],\"name\":\"updateCardTypeActivated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cardTypeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"updateCardTypePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"cardTypeIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"}],\"name\":\"updateCardTypePrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "UWUGaming", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2c2d70f071571861c152d9f730fdbedc328589f158d97e9851581689a0d76e0e"}