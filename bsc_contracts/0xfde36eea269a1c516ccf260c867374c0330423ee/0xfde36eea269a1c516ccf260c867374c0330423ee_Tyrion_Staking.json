{"SourceCode": "//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface Token {\r\n    function transfer(address to, uint tokens) external returns (bool success);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) ;\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    }\r\ncontract Tyrion_Staking\r\n    {\r\n       \r\n        address  public owner;\r\n        address constant public Staking_token=0x7Ee43f72b5431082993AE81356472AfbB42F9dAc; //credit\r\n        address constant public Reward_Token =0x7Ee43f72b5431082993AE81356472AfbB42F9dAc; // bel3\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event stake(address indexed from, address indexed to,uint amount);\r\n    event unstake(address indexed from, address indexed to,uint amount);\r\n    event UnStake_request(address indexed from, address indexed to, uint id);\r\n    event withdraw_Reward(address indexed from, uint amount);\r\n\r\n\r\n        mapping(address=>bool) public isUser;\r\n\r\n        uint public totalusers;\r\n        uint public Apy_Timeframe= 1 days; \r\n        uint public Lockup_period= 365 days; \r\n        uint public Apy= 25*10**9;\r\n        uint public minimum_Apy= 3*10**9;\r\n        uint public penality = 10*10**9; \r\n        uint public minimum_investment=100*10**9;\r\n        uint public maximum_investment=100000*10**9;\r\n        uint public minimum_withdraw_reward_limit=10*10**9;\r\n        uint public Unstake_request_time= 14 days;\r\n        uint public total_reward_to_distribute = 50000000*10**9;\r\n\r\n\r\n        uint public totalbusiness; \r\n        mapping(uint=>address) public All_investors;\r\n        uint public launch_time;\r\n        struct allInvestments{\r\n\r\n            uint investedAmount;\r\n            uint withdrawnTime;\r\n            uint DepositTime;\r\n            uint investmentNum;\r\n            uint unstakeTime;\r\n            bool unstake;\r\n            uint reward;\r\n            bool unstake_req;\r\n            uint unstake_req_time;\r\n            uint unstake_reqEnd_time;\r\n            bool autoCompounding;\r\n\r\n        }\r\n\r\n\r\n\r\n        struct Data{\r\n\r\n            mapping(uint=>allInvestments) investment;\r\n            uint noOfInvestment;\r\n            uint totalInvestment;\r\n            uint totalWithdraw_reward;\r\n            bool investBefore;\r\n        }\r\n\r\n\r\n\r\n          mapping(address=>Data) public user;\r\n\r\n            // mapping(uint=>time_Apy) public details;\r\n\r\n            mapping(address=>mapping(uint=>allInvestments)) public user_investments;\r\n\r\n        constructor(){\r\n            \r\n            owner=msg.sender;              //here we are setting the owner of this contract\r\n            launch_time=block.timestamp;\r\n\r\n        }\r\n\r\n\r\n\r\n     modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the owner can call this function.\");\r\n        _; \r\n    }\r\n\r\n\r\n        function Stake(uint _investedamount, bool _autoCompounding) external  returns(bool success)\r\n        {\r\n            require(_investedamount >= minimum_investment && _investedamount <= maximum_investment ,\"value is not greater than 0\");     //ensuring that investment amount is not less than zero\r\n\r\n            require(Token(Staking_token).allowance(msg.sender,address(this))>=_investedamount,\"allowance\");\r\n\r\n\r\n            if(user[msg.sender].investBefore == false)\r\n            { \r\n                All_investors[totalusers]=msg.sender;\r\n                isUser[msg.sender]=true;\r\n\r\n                totalusers++;                                     \r\n            }\r\n\r\n            uint num = user[msg.sender].noOfInvestment;\r\n            user[msg.sender].investment[num].investedAmount =_investedamount;\r\n            user[msg.sender].investment[num].autoCompounding =_autoCompounding;\r\n\r\n            user[msg.sender].investment[num].DepositTime=block.timestamp;\r\n            user[msg.sender].investment[num].withdrawnTime=block.timestamp + Lockup_period ;  \r\n            \r\n            user[msg.sender].investment[num].investmentNum=num;\r\n \r\n\r\n            user[msg.sender].totalInvestment+=_investedamount;\r\n            user[msg.sender].noOfInvestment++;\r\n            totalbusiness+=_investedamount;\r\n\r\n\r\n            Token(Staking_token).transferFrom(msg.sender,address(this),_investedamount);\r\n            user_investments[msg.sender][num] = user[msg.sender].investment[num];\r\n            user[msg.sender].investBefore=true;\r\n\r\n            emit stake(msg.sender,address(this),_investedamount);\r\n            return true;\r\n            \r\n        }\r\n\r\n        function get_apy_temp() view public returns(uint,uint){ \r\n            uint cal_apy=0;\r\n            uint rew;\r\n\r\n            for(uint j=0;j < 365;j++)\r\n            {\r\n                rew =  rew + ((((rew + totalbusiness) * Apy  )/ (100*10**9) )/365);\r\n            }\r\n\r\n\r\n            if(rew <= total_reward_to_distribute)\r\n            {\r\n                cal_apy=Apy;\r\n            \r\n            }\r\n            else\r\n            {\r\n                cal_apy=  (total_reward_to_distribute*100*10**9)/totalbusiness;\r\n\r\n                if(cal_apy>Apy)\r\n                {\r\n                    cal_apy=Apy;\r\n                }\r\n                if(cal_apy<minimum_Apy)\r\n                {\r\n                    cal_apy=minimum_Apy;\r\n\r\n                }\r\n            }\r\n\r\n\r\n\r\n            \r\n            \r\n\r\n            return (rew,cal_apy);\r\n\r\n\r\n        }\r\n        function get_apy() view public returns(uint){ \r\n            uint cal_apy=0;\r\n            uint rew;\r\n\r\n            for(uint j=0;j < 365;j++)\r\n            {\r\n                rew =  rew + ( (((rew + totalbusiness) * Apy )/ (100*10**9) )/365);\r\n            }\r\n\r\n\r\n            if(rew <= total_reward_to_distribute)\r\n            {\r\n                cal_apy=Apy;\r\n            \r\n            }\r\n            else\r\n            {\r\n                cal_apy=  (total_reward_to_distribute*100*10**9)/totalbusiness;\r\n\r\n                if(cal_apy>Apy)\r\n                {\r\n                    cal_apy=Apy;\r\n                }\r\n                if(cal_apy<minimum_Apy)\r\n                {\r\n                    cal_apy=minimum_Apy;\r\n\r\n                }                                                                                      \r\n            }\r\n\r\n                \r\n\r\n            \r\n            \r\n\r\n            return cal_apy;\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n        function get_TotalReward() view public returns(uint)\r\n        {\r\n            uint totalReward;\r\n            uint depTime;\r\n            uint rew;\r\n            uint cal_apy=get_apy();\r\n            uint temp = user[msg.sender].noOfInvestment;\r\n            for( uint i = 0;i < temp;i++)\r\n            {   \r\n                if(!user[msg.sender].investment[i].unstake)\r\n                {\r\n                    if(user[msg.sender].investment[i].unstake_req)\r\n                    {\r\n                        depTime =user[msg.sender].investment[i].unstake_req_time - user[msg.sender].investment[i].DepositTime;\r\n                    }\r\n                    else\r\n                    {\r\n                        depTime =block.timestamp - user[msg.sender].investment[i].DepositTime;\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    depTime =user[msg.sender].investment[i].unstakeTime - user[msg.sender].investment[i].DepositTime;\r\n                }\r\n                depTime=depTime/Apy_Timeframe; //1 day\r\n                if(depTime>0)\r\n                {\r\n                    if(user[msg.sender].investment[i].autoCompounding)\r\n                    {\r\n                        for(uint j=0;j<depTime;j++)\r\n                        {\r\n                            rew =  rew+ (((rew + user[msg.sender].investment[i].investedAmount * cal_apy )/ (100*10**9) )/365);\r\n\r\n                        }\r\n                        totalReward += rew;\r\n\r\n                    }\r\n                    else\r\n                    {\r\n                            \r\n                        rew =   (((user[msg.sender].investment[i].investedAmount * cal_apy  )/ (100*10**9) )/365);\r\n                        totalReward += depTime * rew;\r\n\r\n                    }\r\n                    \r\n                    rew=0;\r\n\r\n\r\n                }\r\n            }\r\n            totalReward -= user[msg.sender].totalWithdraw_reward;\r\n\r\n            return totalReward;\r\n        }\r\n\r\n        function getReward_perInv(uint i) view public returns(uint){ //this function is get the total reward balance of the investor\r\n            uint totalReward;\r\n            uint depTime;\r\n            uint rew;\r\n            uint cal_apy=get_apy();\r\n\r\n                if(!user[msg.sender].investment[i].unstake)\r\n                {\r\n                    if(user[msg.sender].investment[i].unstake_req)\r\n                    {\r\n                        depTime =user[msg.sender].investment[i].unstake_req_time - user[msg.sender].investment[i].DepositTime;\r\n                    }\r\n                    else\r\n                    {\r\n                        depTime =block.timestamp - user[msg.sender].investment[i].DepositTime;\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    depTime =user[msg.sender].investment[i].unstakeTime - user[msg.sender].investment[i].DepositTime;\r\n                }\r\n                depTime=depTime/Apy_Timeframe; //1 day\r\n                if(depTime>0)\r\n                {\r\n                    if(user[msg.sender].investment[i].autoCompounding)\r\n                    {\r\n                        for(uint j=0;j<depTime;j++)\r\n                        {\r\n                            rew = rew+   (((rew + user[msg.sender].investment[i].investedAmount *cal_apy  )/ (100*10**9) )/365);\r\n\r\n                        }\r\n                        totalReward += rew;\r\n\r\n                    }\r\n                    else\r\n                    {\r\n                            \r\n                        rew =   (((user[msg.sender].investment[i].investedAmount * cal_apy )/ (100*10**9) )/365);\r\n                        totalReward += depTime * rew;\r\n\r\n                    }\r\n                    \r\n                    rew=0;\r\n\r\n\r\n                }\r\n            \r\n\r\n            return totalReward;\r\n        }\r\n\r\n\r\n\r\n        function withdrawReward() external returns (bool success){\r\n            uint Total_reward = get_TotalReward();\r\n            require(Total_reward>0,\"you dont have rewards to withdrawn\");         //ensuring that if the investor have rewards to withdraw\r\n            require(Total_reward>=minimum_withdraw_reward_limit,\"withdraw limit issue\");\r\n            Token(Reward_Token).transfer(msg.sender,Total_reward);             // transfering the reward to investor             \r\n            user[msg.sender].totalWithdraw_reward+=Total_reward;\r\n            emit withdraw_Reward( msg.sender,Total_reward );\r\n            return true;\r\n\r\n        }\r\n\r\n        function unStake(uint num) external returns (bool success)\r\n        {\r\n\r\n\r\n            // require(user[msg.sender].investment[num].withdrawnTime < block.timestamp,\"time is not over\");\r\n            require(user[msg.sender].investment[num].investedAmount>0,\"you dont have investment to withdrawn\");             //checking that he invested any amount or not\r\n            require(!user[msg.sender].investment[num].unstake ,\"you have withdrawn\");\r\n            uint amount=user[msg.sender].investment[num].investedAmount;\r\n\r\n           if((user[msg.sender].investment[num].unstake_req && user[msg.sender].investment[num].unstake_reqEnd_time > block.timestamp) || !user[msg.sender].investment[num].unstake_req && user[msg.sender].investment[num].unstake_req_time==0)\r\n            {\r\n                uint penalty_fee=(amount*penality)/(100*10**9);\r\n                Token(Staking_token).transfer(owner,penalty_fee);            \r\n                amount=amount-penalty_fee;\r\n            }\r\n            Token(Staking_token).transfer(msg.sender,amount);             //transferring this specific investment to the investor\r\n          \r\n            user[msg.sender].investment[num].unstake =true;    \r\n            user[msg.sender].investment[num].unstakeTime =block.timestamp;    \r\n\r\n            user[msg.sender].totalInvestment-=user[msg.sender].investment[num].investedAmount;\r\n            user_investments[msg.sender][num] = user[msg.sender].investment[num];\r\n            totalbusiness-=user[msg.sender].investment[num].investedAmount;\r\n            \r\n            emit unstake(address(this),msg.sender,amount);\r\n\r\n            return true;\r\n\r\n        }\r\n\r\n\r\n\r\n        function unStake_Request(uint num) external returns (bool success)\r\n        {\r\n\r\n            require(!user[msg.sender].investment[num].unstake_req,\" req done\");\r\n            require(user[msg.sender].investment[num].investedAmount>0,\"you dont have investment to withdrawn\");             //checking that he invested any amount or not\r\n            require(!user[msg.sender].investment[num].unstake ,\"you have withdrawn\");\r\n            user[msg.sender].investment[num].unstake_req =true;    \r\n            user[msg.sender].investment[num].unstake_req_time =block.timestamp;    \r\n            user[msg.sender].investment[num].unstake_reqEnd_time =block.timestamp + Unstake_request_time;    \r\n            emit UnStake_request(msg.sender,address(this),num);\r\n\r\n            return true;\r\n\r\n        }\r\n\r\n\r\n\r\n        function get_ReqEndTime(uint num) public view returns(uint) {   //this function is to get the total investment of the ivestor\r\n            \r\n            return user[msg.sender].investment[num].unstake_reqEnd_time;\r\n        }\r\n\r\n        function getTotalInvestment() public view returns(uint) {   //this function is to get the total investment of the ivestor\r\n            \r\n            return user[msg.sender].totalInvestment;\r\n\r\n        }\r\n\r\n        function getAll_investments() public view returns (allInvestments[] memory Invested) { //this function will return the all investments of the investor and withware date\r\n            uint num = user[msg.sender].noOfInvestment;\r\n            uint temp;\r\n            uint currentIndex;\r\n            \r\n            for(uint i=0;i<num;i++)\r\n            {\r\n               if(!user[msg.sender].investment[i].unstake ){\r\n                   temp++;\r\n               }\r\n\r\n            }\r\n         \r\n            Invested =  new allInvestments[](temp) ;\r\n\r\n            for(uint i=0;i<num;i++)\r\n            {\r\n               if( !user[msg.sender].investment[(num-1)-i].unstake )\r\n               {\r\n                   Invested[currentIndex]=user[msg.sender].investment[(num-1)-i];\r\n                    Invested[currentIndex].reward=getReward_perInv((num-1)-i);\r\n\r\n                   currentIndex++;\r\n               }\r\n\r\n            }\r\n            return Invested;\r\n\r\n        }\r\n\r\n        function getAll_investments_ForReward() public view returns (allInvestments[] memory Invested) { //this function will return the all investments of the investor and withware date\r\n            uint num = user[msg.sender].noOfInvestment;\r\n        \r\n         \r\n            Invested =  new allInvestments[](num) ;\r\n\r\n            for(uint i=0;i<num;i++)\r\n            {\r\n                   Invested[i]=user[msg.sender].investment[(num-1)-i];\r\n                    Invested[i].reward=getReward_perInv((num-1)-i);\r\n\r\n\r\n            }\r\n            return Invested;\r\n\r\n        }\r\n        \r\n  \r\n        function transferOwnership(address _owner) onlyOwner public\r\n        {\r\n            owner = _owner;\r\n           emit OwnershipTransferred(owner, _owner);\r\n        }\r\n\r\n        function total_withdraw_reaward() view public returns(uint){\r\n\r\n\r\n            uint Temp = user[msg.sender].totalWithdraw_reward;\r\n\r\n            return Temp;\r\n            \r\n\r\n        }\r\n        function get_currTime() public view returns(uint)\r\n        {\r\n            return block.timestamp;\r\n        }\r\n        \r\n        function get_withdrawnTime(uint num) public view returns(uint)\r\n        {\r\n            return user[msg.sender].investment[num].withdrawnTime;\r\n        }\r\n\r\n\r\n       function withdrawFunds(uint _amount) onlyOwner public\r\n        {\r\n            \r\n            uint bal = Token(Staking_token).balanceOf(address(this));\r\n            require(bal>=_amount,\"bal is less\");\r\n\r\n            Token(Staking_token).transfer(owner,_amount); \r\n        }\r\n        \r\n\r\n        //SETTER\r\n\r\n\r\n        function update_minimum_Apy(uint _value) onlyOwner public\r\n        {\r\n\r\n            minimum_Apy = _value;\r\n        }\r\n        \r\n        function update_minimum_investment(uint _value) onlyOwner public\r\n        {\r\n\r\n            minimum_investment = _value;\r\n        }\r\n        \r\n        function update_max_investment(uint _value) onlyOwner public\r\n        {\r\n\r\n            maximum_investment = _value;\r\n        }\r\n        \r\n        function update_penality(uint _value) onlyOwner public\r\n        {\r\n\r\n            penality = _value;\r\n        }\r\n        \r\n        function update_withdraw_limit(uint _value) onlyOwner  public\r\n        {\r\n\r\n            minimum_withdraw_reward_limit = _value;\r\n        }\r\n\r\n        function update_Lockup_period(uint _value) onlyOwner  public\r\n        {\r\n\r\n            Lockup_period = _value;\r\n        }      \r\n        \r\n        function update_Apy_Timeframe(uint _value) onlyOwner  public\r\n        {\r\n\r\n            Apy_Timeframe = _value;\r\n        }\r\n        function update_distributed_reward(uint _value) onlyOwner  public\r\n        {\r\n\r\n            total_reward_to_distribute = _value;\r\n        }\r\n\r\n        function update_Unstake_request_time(uint _value) onlyOwner  public\r\n        {\r\n\r\n            Unstake_request_time = _value;\r\n        }\r\n        \r\n        function update_APY(uint _value) onlyOwner  public\r\n        {\r\n\r\n            Apy = _value;\r\n        }\r\n\r\n    }", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"UnStake_request\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw_Reward\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"All_investors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Apy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Apy_Timeframe\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Lockup_period\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Reward_Token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_investedamount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_autoCompounding\",\"type\":\"bool\"}],\"name\":\"Stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Staking_token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Unstake_request_time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAll_investments\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"investedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"DepositTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investmentNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unstake\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unstake_req\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"unstake_req_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstake_reqEnd_time\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"autoCompounding\",\"type\":\"bool\"}],\"internalType\":\"struct Tyrion_Staking.allInvestments[]\",\"name\":\"Invested\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAll_investments_ForReward\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"investedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"DepositTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investmentNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unstake\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unstake_req\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"unstake_req_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstake_reqEnd_time\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"autoCompounding\",\"type\":\"bool\"}],\"internalType\":\"struct Tyrion_Staking.allInvestments[]\",\"name\":\"Invested\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getReward_perInv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalInvestment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"get_ReqEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_TotalReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_apy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_apy_temp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_currTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"get_withdrawnTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launch_time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximum_investment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimum_Apy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimum_investment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimum_withdraw_reward_limit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penality\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_reward_to_distribute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_withdraw_reaward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalbusiness\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalusers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"unStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"unStake_Request\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"update_APY\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"update_Apy_Timeframe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"update_Lockup_period\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"update_Unstake_request_time\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"update_distributed_reward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"update_max_investment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"update_minimum_Apy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"update_minimum_investment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"update_penality\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"update_withdraw_limit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"user\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"noOfInvestment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalInvestment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdraw_reward\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"investBefore\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"user_investments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"investedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"DepositTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investmentNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unstake\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unstake_req\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"unstake_req_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstake_reqEnd_time\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"autoCompounding\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Tyrion_Staking", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b4d5c89f2cd374061c296cff0b3dcc2a5d157c3ceb457258e802a451cc4d265c"}