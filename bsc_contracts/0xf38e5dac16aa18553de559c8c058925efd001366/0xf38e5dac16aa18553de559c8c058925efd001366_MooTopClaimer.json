{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.19;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender,address recipient,uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner,address indexed spender,uint256 value);\r\n}\r\n\r\ninterface ITopReward {\r\n    function getCurrentCycle() external view returns (uint256,uint256);\r\n    function cycleMemory(uint256 cycle,string memory key) external view returns (uint256);\r\n    function getTopWinner(uint256 cycle) external view returns (address[] memory,uint256[] memory);   \r\n}\r\n\r\ncontract permission {\r\n\r\n    address private _owner;\r\n    mapping(address => mapping(string => bytes32)) private _permit;\r\n\r\n    modifier forRole(string memory str) {\r\n        require(checkpermit(msg.sender,str),\"Permit Revert!\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        newpermit(msg.sender,\"owner\");\r\n        newpermit(msg.sender,\"permit\");\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function owner() public view returns (address) { return _owner; }\r\n    function newpermit(address adr,string memory str) internal { _permit[adr][str] = bytes32(keccak256(abi.encode(adr,str))); }\r\n    function clearpermit(address adr,string memory str) internal { _permit[adr][str] = bytes32(keccak256(abi.encode(\"null\"))); }\r\n    function checkpermit(address adr,string memory str) public view returns (bool) {\r\n        if(_permit[adr][str]==bytes32(keccak256(abi.encode(adr,str)))){ return true; }else{ return false; }\r\n    }\r\n\r\n    function grantRole(address adr,string memory role) public forRole(\"owner\") returns (bool) { newpermit(adr,role); return true; }\r\n    function revokeRole(address adr,string memory role) public forRole(\"owner\") returns (bool) { clearpermit(adr,role); return true; }\r\n\r\n    function transferOwnership(address adr) public forRole(\"owner\") returns (bool) {\r\n        newpermit(adr,\"owner\");\r\n        clearpermit(msg.sender,\"owner\");\r\n        _owner = adr;\r\n        return true;\r\n    }\r\n\r\n    function renounceOwnership() public forRole(\"owner\") returns (bool) {\r\n        newpermit(address(0),\"owner\");\r\n        clearpermit(msg.sender,\"owner\");\r\n        _owner = address(0);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract MooTopClaimer is permission {\r\n\r\n    ITopReward topReward;\r\n\r\n    uint256[] dividend = [2,2,2,2,2,2,2,2,2,2,5,5,10,20,40];\r\n\r\n    mapping(address => uint256) public totalClaim;\r\n    mapping(address => mapping(uint256 => bool)) public claimed;\r\n\r\n    bool locked;\r\n    modifier noReentrant() {\r\n        require(!locked, \"No re-entrancy\");\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n\r\n    constructor(address TopClaimContract) {\r\n        topReward = ITopReward(TopClaimContract);\r\n    }\r\n\r\n    function claimTopReward(address account,uint256 cycle) public noReentrant returns (bool) {\r\n        (bool shouldClaim,uint256 reward) = isCanClaim(account,cycle);\r\n        require(shouldClaim && reward > 0,\"Error to claim or have not enough requirement\");\r\n        IERC20(0x6d6F4afbe38A04d15399EabB47Edfdd78c12D729).transfer(account,reward);\r\n        totalClaim[account] += reward;\r\n        claimed[account][cycle] = true;\r\n        return true;\r\n    }\r\n\r\n    function isCanClaim(address account,uint256 cycle) public view returns (bool,uint256) {\r\n        (address[] memory addrs,) = topReward.getTopWinner(cycle);\r\n        (bool isWinner,uint256 index) = isAddressWinner(addrs,account);\r\n        (,uint256 currentCycle) = topReward.getCurrentCycle();\r\n        uint256 totalRewardPaid = topReward.cycleMemory(cycle,\"rewardTOKEN\");\r\n        uint256 reward = totalRewardPaid * dividend[index] / 100;\r\n        if(isWinner && !claimed[account][cycle] && currentCycle>cycle){\r\n            return (true,reward);\r\n        }\r\n        return (false,reward);\r\n    }\r\n\r\n    function isAddressWinner(address[] memory checkData,address account) public pure returns (bool,uint256) {\r\n        for (uint256 i = 0; i < checkData.length; i++) {\r\n            if(account==checkData[i]){ return (true,i); }\r\n        }\r\n        return (false,0);\r\n    }\r\n\r\n    function purgeToken(address token,uint256 amount) public forRole(\"owner\") returns (bool) {\r\n        IERC20(token).transfer(msg.sender,amount);\r\n        return true;\r\n    }\r\n\r\n    function withdrawETH(uint256 amount) public forRole(\"owner\") returns (bool) {\r\n        (bool success,) = msg.sender.call{ value: amount }(\"\");\r\n        require(success, \"MOOMOOUP REVERT: FAIL TO WITHDRAW ETH\");\r\n        return true;\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"TopClaimContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"checkpermit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"}],\"name\":\"claimTopReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"}],\"name\":\"grantRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"checkData\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAddressWinner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"}],\"name\":\"isCanClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"purgeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"}],\"name\":\"revokeRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MooTopClaimer", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c76c6d83b6b3306a724616b2c344f670db35b505", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://01be71f4041c3ec5154b2009bd224aee341ba9748ea7d43df094da7fc52571de"}