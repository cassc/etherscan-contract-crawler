{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.10;\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {size := extcodesize(account)}\r\n        return size > 0;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n    uint256 private _status;\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ncontract BoredApeExchangeCoin is Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n\r\n    string private _name = \"BoredApeExchangeCoin\";\r\n    string private _symbol = \"BoredApeExchangeCoin\";\r\n\r\n    IERC20 public coinToken;\r\n    address public fundAddress;\r\n    struct sBuyPropertys {\r\n        uint256 id;\r\n        address addr;\r\n        uint256 buyAmount;\r\n        uint256 time;\r\n    }\r\n\r\n    mapping(uint256 => sBuyPropertys) private _buyPropertys;\r\n    mapping(address => uint256[]) private _buyIds;\r\n    uint256 private _sumCount;\r\n    \r\n    mapping (address => uint256) private _balances;\r\n    uint256 private _totalSupply;\r\n\r\n    mapping (address => bool) private _Is_WhiteContractArr;\r\n    address[] private _WhiteContractArr;\r\n\r\n    event BuyCoins(address indexed user, uint256 amount,uint256 id);\r\n\r\n    bytes32 private constant DOMAIN_NAME = keccak256(bytes('BoredApeExchangeCoin'));\r\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\r\n    bytes32 public constant CLAIM_TYPEHASH = keccak256(\"Claim(address to,uint256 value,uint256 rewardId,uint256 rewardType,uint256 endTime)\");\r\n    bytes32 public immutable DOMAIN_SEPARATOR;\r\n\r\n    address[] public signers;\r\n    mapping (address => bool) public authorized;\r\n    mapping (address => uint256) public indexes;\r\n    event SignerAdded(address indexed sender, address indexed account);\r\n    event SignerRemoved(address indexed sender, address indexed account);\r\n    event Claimed(address indexed to, uint256 indexed value, uint256 rewardId, uint256 rewardType,uint256 endTime);\r\n\r\n    mapping (bytes32 => bool) public isClaimed;\r\n\r\n    struct sClaimPropertys {\r\n        uint256 id;\r\n        address to;\r\n        uint256 value;\r\n        uint256 rewardId;\r\n        uint256 rewardType;\r\n        uint256 endTime;\r\n        uint256 time;\r\n    }\r\n    mapping(uint256 => sClaimPropertys) private _claimPropertys;\r\n    mapping(address => uint256[]) private _claimIds;\r\n    uint256 private _sumClaimCount;\r\n    mapping (address => uint256) private _balancesClaim;\r\n    uint256 private _totalSupplyClaim;\r\n\r\n    constructor() {\r\n        coinToken = IERC20(0xdd079B3678dfB01e451Ae58A37B0dEb39C90aDF3);\r\n        fundAddress = 0x0ff1A9FB9712DaD271dE16C2fCFD82AC89b7BE57;\r\n\r\n        uint256 chainId;\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n        DOMAIN_SEPARATOR = keccak256(abi.encode(DOMAIN_TYPEHASH, DOMAIN_NAME, keccak256(bytes('1')), chainId, address(this)));\r\n    }\r\n\r\n    /* ========== VIEWS ========== */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    //read info\r\n   function balanceOf(address account) external view  returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function totalSupply() external view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function sumCount() external view returns(uint256){\r\n        return _sumCount;\r\n    }\r\n    function buyInfo(uint256 iD) external view returns (\r\n        uint256 id,\r\n        address addr,\r\n        uint256 buyAmount,\r\n        uint256 time\r\n        ) {\r\n        require(iD <= _sumCount, \"BoredApeExchangeCoin: exist num!\");\r\n        id = _buyPropertys[iD].id;\r\n        addr = _buyPropertys[iD].addr;\r\n        buyAmount = _buyPropertys[iD].buyAmount;\r\n        time = _buyPropertys[iD].time;\r\n        return (id,addr,buyAmount,time);\r\n    }\r\n    function buyNum(address addr) external view returns (uint256) {\r\n        return _buyIds[addr].length;\r\n    }\r\n    function buyIthId(address addr,uint256 ith) external view returns (uint256) {\r\n        require(ith < _buyIds[addr].length, \"BoredApeExchangeCoin: not exist!\");\r\n        return _buyIds[addr][ith];\r\n    }\r\n\r\n    function buyInfos(uint256 fromId,uint256 toId) external view returns (\r\n        uint256[] memory idArr,\r\n        address[] memory addrArr,\r\n        uint256[] memory buyAmountArr,\r\n        uint256[] memory timeArr\r\n        ) {\r\n        require(toId <= _sumCount, \"BoredApeExchangeCoin: exist num!\");\r\n        require(fromId <= toId, \"BoredApeExchangeCoin: exist num!\");\r\n        idArr = new uint256[](toId-fromId+1);\r\n        addrArr = new address[](toId-fromId+1);\r\n        buyAmountArr = new uint256[](toId-fromId+1);\r\n        timeArr = new uint256[](toId-fromId+1);\r\n        uint256 i=0;\r\n        for(uint256 ith=fromId; ith<=toId; ith++) {\r\n            idArr[i] = _buyPropertys[ith].id;\r\n            addrArr[i] = _buyPropertys[ith].addr;\r\n            buyAmountArr[i] = _buyPropertys[ith].buyAmount;\r\n            timeArr[i] = _buyPropertys[ith].time;\r\n            i = i+1;\r\n        }\r\n        return (idArr,addrArr,buyAmountArr,timeArr);\r\n    }\r\n    \r\n    \r\n   function balanceOfClaim(address account) external view  returns (uint256) {\r\n        return _balancesClaim[account];\r\n    }\r\n    function totalSupplyClaim() external view returns (uint256) {\r\n        return _totalSupplyClaim;\r\n    }\r\n    function sumclaimCount() external view returns(uint256){\r\n        return _sumClaimCount;\r\n    }\r\n    function claimInfo(uint256 iD) external view returns (\r\n        uint256 id,\r\n        address to,\r\n        uint256 value,\r\n        uint256 rewardId,\r\n        uint256 rewardType,\r\n        uint256 endTime,\r\n        uint256 time\r\n        ) {\r\n        require(iD <= _sumClaimCount, \"BoredApeExchangeERC1155: exist num!\");\r\n\r\n        id = _claimPropertys[iD].id;\r\n        to = _claimPropertys[iD].to;\r\n        value = _claimPropertys[iD].value;\r\n        rewardId = _claimPropertys[iD].rewardId;\r\n        rewardType = _claimPropertys[iD].rewardType;\r\n        endTime = _claimPropertys[iD].endTime;\r\n        time = _claimPropertys[iD].time;\r\n\r\n        return (id,to,value,rewardId,rewardType,endTime,time);\r\n    }\r\n    function claimNum(address addr) external view returns (uint256) {\r\n        return _claimIds[addr].length;\r\n    }\r\n    function claimIthId(address addr,uint256 ith) external view returns (uint256) {\r\n        require(ith < _claimIds[addr].length, \"BoredApeExchangeERC1155: not exist!\");\r\n        return _claimIds[addr][ith];\r\n    }\r\n\r\n    function claimInfos(uint256 fromId,uint256 toId) external view returns (\r\n        uint256[] memory idArr,\r\n        address[] memory toArr,\r\n        uint256[] memory valueArr,\r\n        uint256[] memory rewardIdArr,\r\n        uint256[] memory rewardTypeArr,\r\n        uint256[] memory endTimeArr,\r\n        uint256[] memory timeArr\r\n        ) {\r\n        require(toId <= _sumClaimCount, \"BoredApeExchangeERC1155: exist num!\");\r\n        require(fromId <= toId, \"BoredApeExchangeERC1155: exist num!\");\r\n        idArr = new uint256[](toId-fromId+1);\r\n        toArr = new address[](toId-fromId+1);\r\n        rewardIdArr = new uint256[](toId-fromId+1);\r\n        rewardTypeArr = new uint256[](toId-fromId+1);\r\n        endTimeArr = new uint256[](toId-fromId+1);\r\n        timeArr = new uint256[](toId-fromId+1);\r\n        uint256 i=0;\r\n        for(uint256 ith=fromId; ith<=toId; ith++) {\r\n            idArr[i] = _claimPropertys[ith].id;\r\n            toArr[i] = _claimPropertys[ith].to;\r\n            valueArr[i] = _claimPropertys[ith].value;\r\n            rewardIdArr[i] = _claimPropertys[ith].rewardId;\r\n            rewardTypeArr[i] = _claimPropertys[ith].rewardType;\r\n            endTimeArr[i] = _claimPropertys[ith].endTime;\r\n            timeArr[i] = _claimPropertys[ith].time;\r\n            i = i+1;\r\n        }\r\n        return (idArr,toArr,valueArr,rewardIdArr,rewardTypeArr,endTimeArr,timeArr);\r\n    }\r\n    \r\n    function isWhiteContract(address account) public view returns (bool) {\r\n        if(!account.isContract()) return true;\r\n        return _Is_WhiteContractArr[account];\r\n    }\r\n    function getWhiteAccountNum() public view returns (uint256){\r\n        return _WhiteContractArr.length;\r\n    }\r\n    function getWhiteAccountIth(uint256 ith) public view returns (address WhiteAddress){\r\n        require(ith <_WhiteContractArr.length, \"BoredApeExchangeCoin: not in White Adress\");\r\n        return _WhiteContractArr[ith];\r\n    }\r\n    //---write---//\r\n    function buyCoin(uint256 amount,uint256 time) external nonReentrant{\r\n        require(isWhiteContract(_msgSender()), \"BoredApeExchangeCoin: Contract not in white list!\");\r\n        coinToken.safeTransferFrom(_msgSender(), fundAddress, amount);\r\n\r\n        _sumCount = _sumCount.add(1);\r\n        _buyIds[_msgSender()].push(_sumCount);\r\n\r\n        _buyPropertys[_sumCount].id = _sumCount;\r\n        _buyPropertys[_sumCount].addr = _msgSender();\r\n        _buyPropertys[_sumCount].buyAmount = amount;\r\n        _buyPropertys[_sumCount].time = time;\r\n\r\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\r\n        _totalSupply = _totalSupply.add(amount);\r\n        emit BuyCoins(msg.sender, amount, _sumCount);\r\n    }\r\n    mapping (address => mapping (uint256 => bool)) private bUseTimes;\r\n    function claim(address to, uint256 value,uint256 rewardId,uint256 rewardType,uint256 endTime,\r\n        uint8[] calldata v,bytes32[] calldata r, bytes32[] calldata s) \r\n        external nonReentrant \r\n    {\r\n        require(\r\n            signers.length > 0 &&\r\n            signers.length == v.length &&\r\n            signers.length == r.length &&\r\n            signers.length == s.length,\r\n            \"BoredApeExchangeCoin:invalid signatures\"\r\n        );\r\n\r\n        require(block.timestamp <= endTime, \"BoredApeExchangeCoin:out of time\");\r\n        require(coinToken.balanceOf(fundAddress) >= value, \"BoredApeExchangeCoin:insufficient balance\");\r\n        require(_msgSender() == to, \"BoredApeExchangeCoin:address not sender\");\r\n        require(value <= 1000000*10**18, \"BoredApeExchangeCoin:Single exchange limit within 1 million\");\r\n\r\n        require(!bUseTimes[to][endTime] , \"BoredApeExchangeCoin:Too frequent requests.\");\r\n        bUseTimes[to][endTime] = true;\r\n        bUseTimes[to][endTime+1] = true;\r\n\r\n        bytes32 digest = buildSeparator(to, value, rewardId, rewardType,endTime);\r\n        require(!isClaimed[digest], \"reuse\");\r\n        isClaimed[digest] = true;\r\n\r\n        address[] memory signatures = new address[](signers.length);\r\n        for (uint256 i = 0; i < signers.length; i++) {\r\n            address signer = ecrecover(digest, v[i], r[i], s[i]);\r\n            require(authorized[signer], \"BoredApeExchangeCoin:invalid signer\");\r\n            for (uint256 j = 0; j < i; j++) {\r\n                require(signatures[j] != signer, \"BoredApeExchangeCoin:duplicated\");\r\n            }\r\n            signatures[i] = signer;\r\n        }\r\n        coinToken.safeTransferFrom(fundAddress,to, value);\r\n\r\n\r\n        _sumClaimCount = _sumClaimCount.add(1);\r\n        _claimIds[to].push(_sumClaimCount);\r\n\r\n        _claimPropertys[_sumClaimCount].id = _sumClaimCount;\r\n        _claimPropertys[_sumClaimCount].to = to;\r\n        _claimPropertys[_sumClaimCount].value = value;\r\n        _claimPropertys[_sumClaimCount].rewardId = rewardId;\r\n        _claimPropertys[_sumClaimCount].rewardType = rewardType;\r\n        _claimPropertys[_sumClaimCount].endTime = endTime;\r\n        _claimPropertys[_sumClaimCount].time = block.timestamp;\r\n        _balancesClaim[msg.sender] = _balancesClaim[msg.sender].add(value);\r\n        _totalSupplyClaim = _totalSupplyClaim.add(value);\r\n\r\n        emit Claimed(to, value, rewardId, rewardType,endTime);\r\n    }\r\n    function buildSeparator(address to,uint256 value,uint256 rewardId,uint256 rewardType,uint256 endTime) view public returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\r\n            '\\x19\\x01',\r\n            DOMAIN_SEPARATOR,\r\n            keccak256(abi.encode(CLAIM_TYPEHASH, to, value, rewardId, rewardType,endTime))\r\n        ));\r\n    }\r\n\r\n    //---write onlyOwner---//\r\n   function setParameters(address coinAddr,address fundAddr) external onlyOwner {\r\n        coinToken = IERC20(coinAddr);\r\n        fundAddress = fundAddr;\r\n    }\r\n\r\n    function addWhiteAccount(address account) external onlyOwner{\r\n        require(!_Is_WhiteContractArr[account], \"BoredApeExchangeCoin:Account is already White list\");\r\n        require(account.isContract(), \"BoredApeExchangeCoin: not Contract Adress\");\r\n        _Is_WhiteContractArr[account] = true;\r\n        _WhiteContractArr.push(account);\r\n    }\r\n    function removeWhiteAccount(address account) external onlyOwner{\r\n        require(_Is_WhiteContractArr[account], \"BoredApeExchangeCoin:Account is already out White list\");\r\n        for (uint256 i = 0; i < _WhiteContractArr.length; i++){\r\n            if (_WhiteContractArr[i] == account){\r\n                _WhiteContractArr[i] = _WhiteContractArr[_WhiteContractArr.length - 1];\r\n                _WhiteContractArr.pop();\r\n                _Is_WhiteContractArr[account] = false;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    function addSigner(address account) external onlyOwner {\r\n        require(!authorized[account], \"BoredApeExchangeCoin:already exists\");\r\n\r\n        indexes[account] = signers.length;\r\n        authorized[account] = true;\r\n        signers.push(account);\r\n\r\n        emit SignerAdded(msg.sender, account);\r\n    }\r\n\r\n    function removeSigner(address account) external onlyOwner {\r\n        require(signers.length > 1, \"BoredApeExchangeCoin:illogical\");\r\n        require(authorized[account], \"BoredApeExchangeCoin:non-existent\");\r\n\r\n        uint256 index = indexes[account];\r\n        uint256 lastIndex = signers.length - 1;\r\n\r\n        if (index != lastIndex) {\r\n            address lastAddr = signers[lastIndex];\r\n            signers[index] = lastAddr;\r\n            indexes[lastAddr] = index;\r\n        }\r\n\r\n        delete authorized[account];\r\n        delete indexes[account];\r\n        signers.pop();\r\n\r\n        emit SignerRemoved(msg.sender, account);\r\n    }\r\n\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"BuyCoins\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SignerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SignerRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhiteAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"buildSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"buyCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"iD\",\"type\":\"uint256\"}],\"name\":\"buyInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toId\",\"type\":\"uint256\"}],\"name\":\"buyInfos\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"idArr\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"addrArr\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"buyAmountArr\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"timeArr\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ith\",\"type\":\"uint256\"}],\"name\":\"buyIthId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"buyNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"s\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"iD\",\"type\":\"uint256\"}],\"name\":\"claimInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toId\",\"type\":\"uint256\"}],\"name\":\"claimInfos\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"idArr\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"toArr\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"valueArr\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rewardIdArr\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rewardTypeArr\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"endTimeArr\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"timeArr\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ith\",\"type\":\"uint256\"}],\"name\":\"claimIthId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"claimNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coinToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ith\",\"type\":\"uint256\"}],\"name\":\"getWhiteAccountIth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"WhiteAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhiteAccountNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"indexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhiteContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeWhiteAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coinAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundAddr\",\"type\":\"address\"}],\"name\":\"setParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"signers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sumCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sumclaimCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BoredApeExchangeCoin", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6b320d81c9c890cfe6b84b28da3f7f69ee06cfa5308c674a7ccb7a00874f3c1d"}