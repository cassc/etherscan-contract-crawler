{"SourceCode": "{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.7.0 \\u003c0.9.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256(\\u0027\\u0027)`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash \\u0026\\u0026 codehash != 0x0);\\n    }\\n\\n    function isDead(address addy) internal pure returns (bool) {\\n        return addy == address(0)\\n            || addy == address(1)\\n            || addy == address(0xDEAD);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"Auth.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\nabstract contract Auth {\\n    address internal owner;\\n    mapping (address =\\u003e bool) internal authorizations;\\n\\n    constructor(address _owner) {\\n        owner = _owner;\\n        authorizations[_owner] = true;\\n    }\\n\\n    /**\\n     * Function modifier to require caller to be contract owner\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(msg.sender), \\\"!OWNER\\\"); _;\\n    }\\n\\n    /**\\n     * Function modifier to require caller to be authorized\\n     */\\n    modifier authorized() {\\n        require(isAuthorized(msg.sender), \\\"!AUTHORIZED\\\"); _;\\n    }\\n\\n    /**\\n     * Authorize address. Owner only\\n     */\\n    function authorize(address adr) public onlyOwner {\\n        authorizations[adr] = true;\\n    }\\n\\n    /**\\n     * Remove address\\u0027 authorization. Owner only\\n     */\\n    function unauthorize(address adr) public onlyOwner {\\n        authorizations[adr] = false;\\n    }\\n\\n    /**\\n     * Check if address is owner\\n     */\\n    function isOwner(address account) public view returns (bool) {\\n        return account == owner;\\n    }\\n\\n    /**\\n     * Return address\\u0027 authorization status\\n     */\\n    function isAuthorized(address adr) public view returns (bool) {\\n        return authorizations[adr];\\n    }\\n\\n    /**\\n     * Transfer ownership to new address. Caller must be owner. Leaves old owner authorized\\n     */\\n    function transferOwnership(address payable adr) public onlyOwner {\\n        owner = adr;\\n        authorizations[adr] = true;\\n        emit OwnershipTransferred(adr);\\n    }\\n\\n    event OwnershipTransferred(address owner);\\n}\\n\"},\"BirbNftStaking.sol\":{\"content\":\"/**\\n * Staking for the NFT collection for the Birb game ecosystem.\\n * Check out Birb, a fun currency for everyone!\\n *\\n * https://birb.com/\\n * https://t.me/BirbDefi\\n *\\n *\\n * NFTs and staking system powered by Hibiki.finance\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\nimport \\\"./Auth.sol\\\";\\nimport \\\"./IBEP20.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\n\\ninterface IBirbRarity {\\n\\tfunction getIdRarity(uint256 index) external view returns (uint8 rarity);\\n}\\n\\ncontract BirbNftStaking is Auth {\\n\\n    struct Stake {\\n        uint256 amount;\\n\\t\\tuint256 nfts;\\n        uint256 totalExcluded;\\n        uint256 totalRealised;\\n\\t\\tuint256 totalExcludedBnb;\\n        uint256 totalRealisedBnb;\\n    }\\n\\n\\taddress _birbNft;\\n\\taddress _birbRarity;\\n    address public rewardToken;\\n\\n    uint256 public totalRealised;\\n\\tuint256 public totalRealisedBnb;\\n    uint256 public totalStaked;\\n\\n    mapping (address =\\u003e Stake) public stakes;\\n\\tmapping (uint256 =\\u003e address) public stakedBy;\\n\\tmapping (address =\\u003e uint256[]) public stakedIds;\\n\\tmapping (uint256 =\\u003e uint8) stakedIdToStakedPoints;\\n\\n\\tuint256 _accuracyFactor = 10 ** 18;\\n    uint256 _rewardsPerScore;\\n\\tuint256 _rewardsPerScoreBnb;\\n    uint256 _lastContractBalance;\\n\\tuint256 _lastContractBalanceBnb;\\n\\n\\tuint256 sendBnbRewardGas = 34000;\\n\\n\\tevent Realised(address account, uint256 amount, uint256 amountBnb);\\n    event Staked(address account, uint256 id, uint256 value);\\n    event Unstaked(address account, uint256 id, uint256 value);\\n\\n    constructor(address cs, address stats, address _rewardToken) Auth(msg.sender) {\\n\\t\\t_birbNft = cs;\\n\\t\\t_birbRarity = stats;\\n        rewardToken = _rewardToken;\\n    }\\n\\n\\tfunction setBirbNft(address addy) external authorized {\\n\\t\\t_birbNft = addy;\\n\\t}\\n\\n\\tfunction setStats(address addy) external authorized {\\n\\t\\t_birbRarity = addy;\\n\\t}\\n\\n\\tfunction setRewardToken(address addy) external authorized {\\n\\t\\trewardToken = addy;\\n\\t}\\n\\n\\tfunction setGas(uint256 gas) external authorized {\\n\\t\\tsendBnbRewardGas = gas;\\n\\t}\\n\\n    function getTotalRewards() external view returns (uint256) {\\n        return totalRealised + IBEP20(rewardToken).balanceOf(address(this));\\n    }\\n\\n\\tfunction getTotalRewardsBnb() external view returns (uint256) {\\n        return totalRealisedBnb + address(this).balance;\\n    }\\n\\n    function getCumulativeRewardsPerToken() external view returns (uint256) {\\n        return _rewardsPerScore;\\n    }\\n\\n\\tfunction getCumulativeRewardsPerTokenBNB() external view returns (uint256) {\\n        return _rewardsPerScoreBnb;\\n    }\\n\\n    function getLastContractBalance() external view returns (uint256) {\\n        return _lastContractBalance;\\n    }\\n\\n\\tfunction getLastContractBalanceBnb() external view returns (uint256) {\\n        return _lastContractBalanceBnb;\\n    }\\n\\n    function getAccuracyFactor() external view returns (uint256) {\\n        return _accuracyFactor;\\n    }\\n\\n    function getStake(address account) public view returns (uint256) {\\n        return stakes[account].amount;\\n    }\\n\\n\\tfunction getStakedNftCount(address account) public view returns (uint256) {\\n        return stakes[account].nfts;\\n    }\\n\\n    function getRealisedEarnings(address staker) external view returns (uint256) {\\n        return stakes[staker].totalRealised;\\n    }\\n\\n\\tfunction getRealisedEarningsBnb(address staker) external view returns (uint256) {\\n        return stakes[staker].totalRealisedBnb;\\n    }\\n\\n    function getUnrealisedEarnings(address staker) external view returns (uint256) {\\n        if (stakes[staker].amount == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n        uint256 stakerTotalRewards = (stakes[staker].amount * getCurrentRewardsPerScore()) / _accuracyFactor;\\n        uint256 stakerTotalExcluded = stakes[staker].totalExcluded;\\n\\n        if (stakerTotalRewards \\u003c= stakerTotalExcluded) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n        return stakerTotalRewards - stakerTotalExcluded;\\n    }\\n\\n\\tfunction getUnrealisedEarningsBnb(address staker) external view returns (uint256) {\\n        if (stakes[staker].amount == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n        uint256 stakerTotalRewards = (stakes[staker].amount * getCurrentRewardsPerScoreBnb()) / _accuracyFactor;\\n        uint256 stakerTotalExcluded = stakes[staker].totalExcludedBnb;\\n\\n        if (stakerTotalRewards \\u003c= stakerTotalExcluded) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n        return stakerTotalRewards - stakerTotalExcluded;\\n    }\\n\\n    function getCumulativeRewards(uint256 amount) public view returns (uint256) {\\n        return amount * _rewardsPerScore / _accuracyFactor;\\n    }\\n\\n\\tfunction getCumulativeRewardsBnb(uint256 amount) public view returns (uint256) {\\n        return amount * _rewardsPerScoreBnb / _accuracyFactor;\\n    }\\n\\n    function stake(uint256 id) public {\\n        IERC721(_birbNft).safeTransferFrom(msg.sender, address(this), id);\\n\\n        _stake(msg.sender, id);\\n    }\\n\\n\\tfunction multiStake(uint256[] calldata ids) external {\\n\\t\\tfor (uint256 i = 0; i \\u003c ids.length; i++) {\\n\\t\\t\\tstake(ids[i]);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction valuePerNft(uint256 nft) public view returns(uint8 value) {\\n\\t\\tuint8 rarity;\\n\\t\\ttry IBirbRarity(_birbRarity).getIdRarity(nft) returns(uint8 rar) {\\n\\t\\t\\trarity = rar;\\n\\t\\t} catch {\\n\\t\\t\\trarity = 0;\\n\\t\\t}\\n\\n\\t\\treturn birbStakeValue(rarity);\\n\\t}\\n\\n\\tfunction birbStakeValue(uint8 rarity) public pure returns(uint8 value) {\\n\\t\\t// Uncommon\\n\\t\\tif (rarity == 1) {\\n\\t\\t\\treturn 10;\\n\\t\\t}\\n\\t\\t// Rare\\n\\t\\tif (rarity == 2) {\\n\\t\\t\\treturn 25;\\n\\t\\t}\\n\\t\\t// Epic\\n\\t\\tif (rarity == 3) {\\n\\t\\t\\treturn 55;\\n\\t\\t}\\n\\t\\t// Legendary\\n\\t\\tif (rarity == 4) {\\n\\t\\t\\treturn 120;\\n\\t\\t}\\n\\n\\t\\t// Common\\n\\t\\treturn 5;\\n\\t}\\n\\n    function stakeFor(address staker, uint256 id) external {\\n        IBEP20(_birbNft).transferFrom(msg.sender, address(this), id);\\n\\n        _stake(staker, id);\\n    }\\n\\n    function unstake(uint id) external {\\n        require(stakedBy[id] == msg.sender);\\n\\n        _unstake(msg.sender, id);\\n    }\\n\\n    function unstakeAll(uint256[] calldata ids) external {\\n        for (uint256 i = 0; i \\u003c ids.length; i++) {\\n\\t\\t\\t_unstake(msg.sender, ids[i]);\\n\\t\\t}\\n    }\\n\\n    function realise() external {\\n        _realise(msg.sender);\\n    }\\n\\n    function _realise(address staker) internal {\\n        _updateRewards();\\n\\t\\t_updateRewardsBnb();\\n\\n        uint256 amount = earnt(staker);\\n\\t\\tuint256 amountBnb = earntBnb(staker);\\n\\n        if (getStake(staker) == 0 || (amount == 0 \\u0026\\u0026 amountBnb == 0)) {\\n            return;\\n        }\\n\\n\\t\\tif (amount \\u003e 0) {\\n\\t\\t\\tstakes[staker].totalRealised += amount;\\n\\t\\t\\tstakes[staker].totalExcluded += amount;\\n\\t\\t\\ttotalRealised += amount;\\n        \\tIBEP20(rewardToken).transfer(staker, amount);\\n\\t\\t}\\n\\t\\tif (amountBnb \\u003e 0) {\\n\\t\\t\\tstakes[staker].totalRealisedBnb += amountBnb;\\n\\t\\t\\tstakes[staker].totalExcludedBnb += amountBnb;\\n\\t\\t\\ttotalRealisedBnb += amountBnb;\\n\\t\\t\\t(bool sent, bytes memory data) = staker.call{value: amountBnb, gas: sendBnbRewardGas}(\\\"\\\");\\n\\t\\t\\trequire(sent, \\\"Failed to send BNB on realise\\\");\\n\\t\\t}\\n\\n        _updateRewards();\\n\\t\\t_updateRewardsBnb();\\n\\n        emit Realised(staker, amount, amountBnb);\\n    }\\n\\n    function earnt(address staker) internal view returns (uint256) {\\n        if (stakes[staker].amount == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n        uint256 stakerTotalRewards = getCumulativeRewards(stakes[staker].amount);\\n        uint256 stakerTotalExcluded = stakes[staker].totalExcluded;\\n\\n        if (stakerTotalRewards \\u003c= stakerTotalExcluded) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n        return stakerTotalRewards - stakerTotalExcluded;\\n    }\\n\\n\\tfunction earntBnb(address staker) internal view returns (uint256) {\\n        if (stakes[staker].amount == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n        uint256 stakerTotalRewards = getCumulativeRewardsBnb(stakes[staker].amount);\\n        uint256 stakerTotalExcluded = stakes[staker].totalExcludedBnb;\\n\\n        if (stakerTotalRewards \\u003c= stakerTotalExcluded) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n        return stakerTotalRewards - stakerTotalExcluded;\\n    }\\n\\n    function _stake(address staker, uint256 id) internal {\\n\\t\\tstakedBy[id] = msg.sender;\\n\\t\\tstakedIds[msg.sender].push(id);\\n\\n        _realise(staker);\\n\\n\\t\\tuint8 amount = valuePerNft(id);\\n\\t\\tstakedIdToStakedPoints[id] = amount;\\n\\n        _addToStake(staker, amount);\\n\\n\\t\\temit Staked(staker, id, amount);\\n    }\\n\\n\\tfunction _addToStake(address staker, uint256 amount) internal {\\n\\t\\t// add to current address\\u0027 stake\\n        stakes[staker].amount += amount;\\n        stakes[staker].totalExcluded = getCumulativeRewards(stakes[staker].amount);\\n\\t\\tstakes[staker].totalExcludedBnb = getCumulativeRewardsBnb(stakes[staker].amount);\\n        totalStaked += amount;\\n\\t}\\n\\n    function _unstake(address staker, uint256 id) internal {\\n\\t\\t// realise staking gains\\n        _realise(staker);\\n\\n\\t\\tuint256 amount = stakedIdToStakedPoints[id];\\n        _removeStake(staker, amount);\\n\\t\\t_removeStakedNftFromList(id);\\n\\t\\temit Unstaked(staker, id, amount);\\n\\n\\t\\tIERC721(_birbNft).safeTransferFrom(address(this), msg.sender, id);\\n    }\\n\\n\\tfunction _removeStakedNftFromList(uint256 id) internal {\\n\\t\\tuint256[] memory arr = stakedIds[msg.sender];\\n\\t\\tuint256 index = findArrayIndex(arr, id);\\n\\t\\tif (index == arr.length - 1) {\\n\\t\\t\\tstakedIds[msg.sender].pop();\\n\\t\\t} else {\\n\\t\\t\\tstakedIds[msg.sender][index] = stakedIds[msg.sender][stakedIds[msg.sender].length - 1];\\n\\t\\t\\tstakedIds[msg.sender].pop();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction findArrayIndex(uint256[] memory arr, uint256 num) public pure returns(uint256) {\\n\\t\\tfor (uint256 i = 0; i \\u003c arr.length; i++) {\\n\\t\\t\\tif (arr[i] == num) {\\n\\t\\t\\t\\treturn i;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// We return max as a way to indicate an error.\\n\\t\\treturn type(uint256).max;\\n\\t}\\n\\n\\tfunction _removeStake(address staker, uint256 amount) internal {\\n        stakes[staker].amount -= amount;\\n        stakes[staker].totalExcluded = getCumulativeRewards(stakes[staker].amount);\\n        totalStaked -= amount;\\n\\t}\\n\\n\\tfunction updateRewards() external {\\n\\t\\t_updateRewards();\\n\\t\\t_updateRewardsBnb();\\n\\t}\\n\\n    function _updateRewards() internal  {\\n        uint tokenBalance = IBEP20(rewardToken).balanceOf(address(this));\\n\\n\\t\\tif (tokenBalance == _lastContractBalance) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n        if (tokenBalance \\u003e _lastContractBalance \\u0026\\u0026 totalStaked != 0) {\\n            uint256 newRewards = tokenBalance - _lastContractBalance;\\n\\t\\t\\tif (newRewards \\u003e 0) {\\n\\t\\t\\t\\tuint256 additionalAmountPerLP = newRewards * _accuracyFactor / totalStaked;\\n\\t\\t\\t\\t_rewardsPerScore += additionalAmountPerLP;\\n\\t\\t\\t}\\n        }\\n\\n        if (totalStaked \\u003e 0) {\\n\\t\\t\\t_lastContractBalance = tokenBalance;\\n\\t\\t}\\n    }\\n\\n\\tfunction _updateRewardsBnb() internal  {\\n        uint256 balance = address(this).balance;\\n\\n\\t\\tif (balance == _lastContractBalanceBnb) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n        if (balance \\u003e _lastContractBalanceBnb \\u0026\\u0026 totalStaked != 0) {\\n            uint256 newRewards = balance - _lastContractBalanceBnb;\\n\\t\\t\\tif (newRewards \\u003e 0) {\\n\\t\\t\\t\\tuint256 additionalAmountPerLP = newRewards * _accuracyFactor / totalStaked;\\n\\t\\t\\t\\t_rewardsPerScoreBnb += additionalAmountPerLP;\\n\\t\\t\\t}\\n        }\\n\\n        if (totalStaked \\u003e 0) {\\n\\t\\t\\t_lastContractBalanceBnb = balance;\\n\\t\\t}\\n    }\\n\\n    function getCurrentRewardsPerScore() public view returns (uint256 currentRewardsPerLP) {\\n        uint tokenBalance = IBEP20(rewardToken).balanceOf(address(this));\\n        if (tokenBalance \\u003e _lastContractBalance \\u0026\\u0026 totalStaked != 0) {\\n            uint256 newRewards = tokenBalance - _lastContractBalance;\\n            uint256 additionalAmountPerLP = newRewards * _accuracyFactor / totalStaked;\\n            currentRewardsPerLP = _rewardsPerScore + additionalAmountPerLP;\\n        } else {\\n\\t\\t\\tcurrentRewardsPerLP = _rewardsPerScore;\\n\\t\\t}\\n    }\\n\\n\\tfunction getCurrentRewardsPerScoreBnb() public view returns (uint256 currentRewardsPerLP) {\\n        uint256 balance = address(this).balance;\\n        if (balance \\u003e _lastContractBalanceBnb \\u0026\\u0026 totalStaked != 0) {\\n            uint256 newRewards = balance - _lastContractBalanceBnb;\\n            uint256 additionalAmountPerLP = newRewards * _accuracyFactor / totalStaked;\\n            currentRewardsPerLP = _rewardsPerScoreBnb + additionalAmountPerLP;\\n        } else {\\n\\t\\t\\tcurrentRewardsPerLP = _rewardsPerScoreBnb;\\n\\t\\t}\\n    }\\n\\n    function setAccuracyFactor(uint256 newFactor) external authorized {\\n        _rewardsPerScore = _rewardsPerScore * newFactor / _accuracyFactor;\\n        _accuracyFactor = newFactor;\\n    }\\n\\n\\tfunction onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) public pure returns (bytes4) {\\n        return 0x150b7a02;\\n    }\\n\\n\\tfunction emergencyUnstake(uint256 id) external {\\n\\t\\trequire(stakedBy[id] == msg.sender);\\n\\t\\tIERC721(_birbNft).safeTransferFrom(address(this), msg.sender, id);\\n\\t}\\n\\n\\tfunction viewMyStakedIds() external view returns(uint256[] memory) {\\n\\t\\treturn stakedIds[msg.sender];\\n\\t}\\n\\n\\treceive() external payable {}\\n\\tfallback() external payable {}\\n}\\n\"},\"BirbRarity.sol\":{\"content\":\"/**\\n * Rarity system for the Birb NFTs.\\n * Rarity is kept on-chain and can be upgraded through enchanting.\\n * This is what drives the NFT value on the staking platform.\\n *\\n * https://birb.com/\\n * https://t.me/BirbDefi\\n *\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\nimport \\\"./Auth.sol\\\";\\n\\ninterface IBirbNft {\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n    function burnFromEnchant(uint256 id) external;\\n}\\n\\ninterface IBEP20 {\\n    function balanceOf(address account) external view returns (uint256);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n}\\n\\ncontract BirbRarity is Auth {\\n\\n\\tmapping (uint256 =\\u003e uint8) public idToRarity;\\n\\taddress birbNft;\\n    address payToken;\\n    address tokenReceiver = 0xf3Ea7CA781ac32960E528cc288effF64C279d678;\\n    uint256 public commonCost = 500 ether;\\n    uint256 public uncommonCost = 1000 ether;\\n    uint256 public rareCost = 2000 ether;\\n    uint256 public epicCost = 5000 ether;\\n\\n\\tconstructor(address nft, address payt) Auth(msg.sender) {\\n\\t\\towner = msg.sender;\\n\\t\\tbirbNft = nft;\\n\\t\\tpayToken = payt;\\n\\t}\\n\\n\\tfunction setTokenReceiver(address add) external authorized {\\n\\t\\ttokenReceiver = add;\\n\\t}\\n\\n\\tfunction setIdRarity(uint256 id, uint8 rarity) external authorized {\\n\\t\\t_setIdRarity(id, rarity);\\n\\t}\\n\\n\\tfunction _setIdRarity(uint256 id, uint8 rarity) internal {\\n\\t\\tidToRarity[id] = rarity;\\n\\t}\\n\\n\\tfunction setIdsRarities(uint256[] calldata id, uint8[] calldata rarities) external authorized {\\n\\t\\trequire(id.length == rarities.length, \\\"array mismatch\\\");\\n\\t\\tfor (uint256 i = 0; i \\u003c id.length; i++) {\\n\\t\\t\\t_setIdRarity(id[i], rarities[i]);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction getIdRarity(uint256 id) public view returns (uint8) {\\n\\t\\treturn idToRarity[id];\\n\\t}\\n\\n\\tfunction getIdsRarities(uint256[] calldata ids) external view returns (uint8[] memory) {\\n\\t\\tuint8[] memory rarities = new uint8[](ids.length);\\n\\t\\tfor (uint256 i = 0; i \\u003c ids.length; i++) {\\n\\t\\t\\trarities[i] = getIdRarity(ids[i]);\\n\\t\\t}\\n\\n\\t\\treturn rarities;\\n\\t}\\n\\n\\tfunction enchant(uint256 card, uint256 sac) external {\\n        IBirbNft nft = IBirbNft(birbNft);\\n        // 0 Common 1 Uncommon 2 Rare 3 Epic 4 Legendary\\n        uint8 rar = getIdRarity(card);\\n\\t\\trequire(rar \\u003c 4, \\\"You cannot enchant a Legendary Birb.\\\");\\n        require(nft.ownerOf(card) == msg.sender, \\\"You can only enchant your own cards.\\\");\\n        require(nft.ownerOf(sac) == msg.sender, \\\"You must own the card to burn for enchant.\\\");\\n        // Rarity must be equal or higher than the card being enchanted.\\n        require(rar \\u003c= getIdRarity(sac), \\\"Wrong rarity in burner card.\\\");\\n\\n        // Burn the sacrifices for the rarity break.\\n        nft.burnFromEnchant(sac);\\n\\n        // Token cost.\\n\\t\\tif (payToken != address(0)) {\\n\\t\\t\\tuint256 tokenCost = getEnchantCost(rar);\\n\\t\\t\\tIBEP20 token = IBEP20(payToken);\\n\\t\\t\\trequire(token.balanceOf(msg.sender) \\u003e= tokenCost, \\\"You don\\u0027t have enough tokens.\\\");\\n\\t\\t\\ttoken.transferFrom(msg.sender, tokenReceiver, tokenCost);\\n\\t\\t}\\n\\n        // Upgrade card rarity\\n        _setIdRarity(card, rar + 1);\\n    }\\n\\n    function getEnchantCost(uint8 rarity) public view returns (uint256) {\\n        if (rarity == 3) {\\n            return epicCost;\\n        }\\n        if (rarity == 2) {\\n            return rareCost;\\n        }\\n        if (rarity == 1) {\\n            return uncommonCost;\\n        }\\n\\n        return commonCost;\\n    }\\n\\n    function setCosts(uint256 common, uint256 uncommon, uint256 rare, uint256 epic) external authorized {\\n        commonCost = common;\\n        uncommonCost = uncommon;\\n        rareCost = rare;\\n        epicCost = epic;\\n    }\\n\\n\\tfunction setNftAddress(address nft) external authorized {\\n\\t\\tbirbNft = nft;\\n\\t}\\n\\n\\tfunction setPayToken(address t) external authorized {\\n\\t\\tpayToken = t;\\n\\t}\\n}\\n\"},\"EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity\\u0027s\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only maps of type `uint256 -\\u003e address` (`UintToAddressMap`) are\\n * supported.\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n\\n        mapping (bytes32 =\\u003e bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n   /**\\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of entries inside the\\n    * array, and it may change when more entries are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (_contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || _contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || _contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return _remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the element stored at position `index` in the set. O(1).\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\\n    }\\n}\\n\"},\"EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 =\\u003e uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value\\u0027s index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as \\u0027swap and pop\\u0027).\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue\\u0027s index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"},\"ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.7.0 \\u003c0.9.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\ncontract ERC165 is IERC165 {\\n    /*\\n     * bytes4(keccak256(\\u0027supportsInterface(bytes4)\\u0027)) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it\\u0027s supported.\\n     */\\n    mapping(bytes4 =\\u003e bool) private _supportedInterfaces;\\n\\n    constructor () {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\"},\"IBEP20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\ninterface IBEP20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the token decimals.\\n   */\\n  function decimals() external view returns (uint8);\\n\\n  /**\\n   * @dev Returns the token symbol.\\n   */\\n  function symbol() external view returns (string memory);\\n\\n  /**\\n  * @dev Returns the token name.\\n  */\\n  function name() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the bep token owner.\\n   */\\n  function getOwner() external view returns (address);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address _owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.7.0 \\u003c0.9.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.7.0 \\u003c0.9.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``\\u0027s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"},\"IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.7.0 \\u003c0.9.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``\\u0027s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"},\"IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.7.0 \\u003c0.9.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns url to see the token itself.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"},\"IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.7.0 \\u003c0.9.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stats\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBnb\",\"type\":\"uint256\"}],\"name\":\"Realised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"rarity\",\"type\":\"uint8\"}],\"name\":\"birbStakeValue\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"value\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"emergencyUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"arr\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"findArrayIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAccuracyFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getCumulativeRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getCumulativeRewardsBnb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCumulativeRewardsPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCumulativeRewardsPerTokenBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentRewardsPerScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentRewardsPerLP\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentRewardsPerScoreBnb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentRewardsPerLP\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastContractBalanceBnb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getRealisedEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getRealisedEarningsBnb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getStakedNftCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalRewardsBnb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getUnrealisedEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getUnrealisedEarningsBnb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"multiStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"realise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFactor\",\"type\":\"uint256\"}],\"name\":\"setAccuracyFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"setBirbNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"setGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"setRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"setStats\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"stakeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakedBy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakedIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nfts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalExcluded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRealised\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalExcludedBnb\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRealisedBnb\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRealised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRealisedBnb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"unstakeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"}],\"name\":\"valuePerNft\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"value\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewMyStakedIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BirbNftStaking", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005b77cc517fe0444d94a80791205fc9b02efe88360000000000000000000000003dde276121b87532720fe6ff235bba87e17ca8540000000000000000000000003cf33ff134c0e00a2664f148a4232adea1515c6f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c1a7a66ce502a59340fb5c5b4b30353024bb157ee5738697b4f74b40be9e1c88"}