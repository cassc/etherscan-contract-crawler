{"SourceCode": "/*\r\n\r\nThis contract is brought to you by Tokerr\r\n\r\nhttp://tokerr.io\r\n\r\nJoin us at https://t.me/tokrdeployerchannel\r\n\r\n*/\r\n\r\npragma solidity 0.8.17;\r\n\r\n//SPDX-License-Identifier: MIT\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Auth {\r\n    address internal owner;\r\n    mapping (address => bool) internal authorizations;\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n        authorizations[_owner] = true;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"!OWNER\"); _;\r\n    }\r\n\r\n    modifier authorized() {\r\n        require(isAuthorized(msg.sender), \"!AUTHORIZED\"); _;\r\n    }\r\n\r\n    function authorize(address adr) public onlyOwner {\r\n        authorizations[adr] = true;\r\n    }\r\n\r\n    function unauthorize(address adr) public onlyOwner {\r\n        authorizations[adr] = false;\r\n    }\r\n\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    function isAuthorized(address adr) public view returns (bool) {\r\n        return authorizations[adr];\r\n    }\r\n\r\n    function transferOwnership(address payable adr) public onlyOwner {\r\n        owner = adr;\r\n        authorizations[adr] = true;\r\n        emit OwnershipTransferred(adr);\r\n    }\r\n\r\n    event OwnershipTransferred(address owner);\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface BotRekt{\r\n    function isBot(uint256 time, address recipient) external returns (bool, address);\r\n}\r\n\r\ncontract StandardTokerrContract is IERC20, Auth {\r\n    using SafeMath for uint256;\r\n\r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address ZERO = 0x0000000000000000000000000000000000000000;\r\n\r\n    BotRekt KillBot;\r\n    \r\n    string _name;\r\n    string _symbol;\r\n    uint8 constant _decimals = 9;\r\n    \r\n    uint256 _totalSupply; \r\n    \r\n    uint256 public _maxTxAmount;\r\n    uint256 public _maxWalletToken;\r\n\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n    mapping (address => uint256) botLocation;\r\n\r\n    mapping (address => bool) lpProvider;\r\n    address creator;\r\n\r\n    mapping (address => bool) isFeeExempt;\r\n    mapping (address => bool) isTxLimitExempt;\r\n\r\n    uint256 launchTime;\r\n    \r\n\r\n    //fees are set with a 10x multiplier to allow for 2.5 etc. Denominator of 1000\r\n    uint256 marketingBuyFee;\r\n    uint256 liquidityBuyFee;\r\n    uint256 devBuyFee;\r\n    uint256 public totalBuyFee = marketingBuyFee.add(liquidityBuyFee).add(devBuyFee);\r\n\r\n    uint256 marketingSellFee;\r\n    uint256 liquiditySellFee;\r\n    uint256 devSellFee;\r\n    uint256 public totalSellFee = marketingSellFee.add(liquiditySellFee).add(devSellFee);\r\n\r\n    uint256 marketingFee = marketingBuyFee.add(marketingSellFee);\r\n    uint256 liquidityFee = liquidityBuyFee.add(liquiditySellFee);\r\n    uint256 devFee = devBuyFee.add(devSellFee);\r\n\r\n    uint256 totalFee = liquidityFee.add(marketingFee).add(devFee);\r\n\r\n    address public liquidityWallet;\r\n    address public marketingWallet;\r\n    address public devWallet;\r\n\r\n    address tokerrWallet = 0xaeC1FB8CA3ee0d47Cd9E9b17CA89cbA5bAe34649;\r\n\r\n    uint256 transferCount = 1;\r\n\r\n    string telegram;\r\n    string website;\r\n\r\n    //one time trade lock\r\n    bool lockTilStart = true;\r\n    bool lockUsed = false;\r\n\r\n    //contract cant be tricked into spam selling exploit\r\n    uint256 cooldownSeconds = 1;\r\n    uint256 lastSellTime;\r\n\r\n    event LockTilStartUpdated(bool enabled);\r\n\r\n    bool limits = true;\r\n\r\n    uint256 public lockTime;\r\n    uint256 public lockDiff; \r\n\r\n    IDEXRouter public router;\r\n    address public pair;\r\n\r\n    bool public swapEnabled = true;\r\n    uint256 public swapThreshold;\r\n    uint256 swapRatio = 40;\r\n\r\n    bool inSwap;\r\n    modifier swapping() { inSwap = true; _; inSwap = false; }\r\n\r\n    event TradeStarted(bool trading);\r\n\r\n\r\n    constructor (uint[] memory numbers, address[] memory addresses, string[] memory names, \r\n                address antiBot, address builder) Auth(msg.sender) {\r\n        router = IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        pair = IDEXFactory(router.factory()).createPair(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c, address(this));\r\n\r\n        transferOwnership(payable(builder));\r\n        authorizations[builder] = true;\r\n        lpProvider[builder] = true;\r\n        authorizations[addresses[0]] = true;\r\n        creator = addresses[0];\r\n\r\n        KillBot = BotRekt(antiBot);\r\n\r\n        _name = names[0];\r\n        _symbol = names[1];\r\n        telegram = names[2];\r\n        website = names[3];\r\n        _totalSupply = numbers[1] * (10 ** _decimals);\r\n\r\n        _allowances[address(this)][address(router)] = _totalSupply;\r\n\r\n        isFeeExempt[builder] = true;\r\n        isTxLimitExempt[builder] = true;\r\n        isFeeExempt[addresses[0]] = true;\r\n        isTxLimitExempt[addresses[0]] = true;\r\n\r\n        swapThreshold = _totalSupply.mul(10).div(100000);\r\n\r\n        marketingWallet = addresses[1];\r\n        devWallet = addresses[2];\r\n        liquidityWallet = address(this);\r\n\r\n\r\n        marketingBuyFee = numbers[2];\r\n        liquidityBuyFee = numbers[4];\r\n        devBuyFee = numbers[6];\r\n\r\n        totalBuyFee = marketingBuyFee.add(liquidityBuyFee).add(devBuyFee);\r\n        require(totalBuyFee <= 100, \"Buy tax too high!\"); //10% buy tax\r\n\r\n        marketingSellFee = numbers[3];\r\n        liquiditySellFee = numbers[5];\r\n        devSellFee = numbers[7];\r\n        \r\n\r\n        totalSellFee = marketingSellFee.add(liquiditySellFee).add(devSellFee);\r\n        require(totalSellFee <= 100, \"Sell tax too high!\"); //10% sell tax\r\n\r\n        marketingFee = marketingBuyFee.add(marketingSellFee);\r\n        liquidityFee = liquidityBuyFee.add(liquiditySellFee);\r\n        devFee = devBuyFee.add(devSellFee);\r\n\r\n        totalFee = liquidityFee.add(marketingFee).add(devFee);\r\n\r\n        _maxTxAmount = ( _totalSupply * numbers[10] ) / 1000;\r\n        require(numbers[10] >= 5,\"Max txn too low!\"); //0.5% max txn\r\n        require(numbers[10] <= 30,\"Max txn too high!\"); //3% max txn\r\n        _maxWalletToken = ( _totalSupply * numbers[11] ) / 1000;\r\n        require(numbers[11] >= 5,\"Max wallet too low!\"); //0.5% max wallet\r\n        require(numbers[11] <= 30,\"Max wallet too high!\"); //3% max wallet\r\n\r\n        approve(address(router), _totalSupply);\r\n        approve(address(pair), _totalSupply);\r\n        require(95 <= numbers[13] && numbers[13] <= 100, \"Too low LP %\");\r\n\r\n        require(block.timestamp + 1 days - 1 hours <= numbers[14], \"Must lock longer than X\");\r\n        require(numbers[14] < 9999999999, \"Avoid potential timestamp overflow\");\r\n        lockTime = numbers[14];\r\n        lockDiff = lockTime.sub(block.timestamp);\r\n        uint256 lpDiv;\r\n\r\n        //calculate desired dev bag, compare to max wallet\r\n        uint256 devCheck = (100 - numbers[13]) * 10;\r\n        if (devCheck > numbers[11]){\r\n            lpDiv = (1000 - numbers[11]) / 10;\r\n        }\r\n        else{\r\n            lpDiv = numbers[13];\r\n        }\r\n\r\n        uint256 liquidityAmount = ( _totalSupply * lpDiv ) / 100;\r\n        _balances[builder] = liquidityAmount;\r\n        _balances[addresses[0]] = _totalSupply.sub(liquidityAmount);\r\n        emit Transfer(address(0), builder, liquidityAmount);\r\n        emit Transfer(address(0), addresses[0], _totalSupply.sub(liquidityAmount));\r\n    }\r\n\r\n    receive() external payable { }\r\n\r\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external view override returns (string memory) { return _symbol; }\r\n    function name() external view override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) { return owner; }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n    function getPair() external view returns (address){return pair;}\r\n\r\n    function aboutMe() external view returns (string memory,string memory){\r\n        return (telegram,website);\r\n    }\r\n\r\n    function updateAboutMe(string memory _telegram,string memory _website) external authorized{\r\n        telegram = _telegram;\r\n        website = _website;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function lpLockCheck() external view returns (bool){\r\n        return (block.timestamp >= lockTime);\r\n    }\r\n\r\n    function lpTimeCheck() external view returns (uint256){\r\n        return lockTime;\r\n    }\r\n\r\n    function lpTimeCheckInSeconds() external view returns (uint256){\r\n        return lockTime - block.timestamp;\r\n    }\r\n\r\n    function unlockLPAfterTime() external onlyOwner {\r\n        require(block.timestamp >= lockTime,\"Too early\");\r\n        IERC20 _token = IERC20(pair);\r\n        uint256 balance = _token.balanceOf(address(this));\r\n        bool _success = _token.transfer(owner, balance);\r\n        require(_success, \"Token could not be transferred\");\r\n    }\r\n\r\n    function lpExtend(uint256 newTime) external onlyOwner{\r\n        require(newTime < 9999999999, \"Avoid potential timestamp overflow\");\r\n        require(newTime > lockTime);\r\n        lockTime = newTime;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, _totalSupply);\r\n    }\r\n    \r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function setBuyFees(uint256 _marketingFee, uint256 _liquidityFee, \r\n                    uint256 _devFee) external authorized{\r\n        require((_marketingFee.add(_liquidityFee).add(_devFee)) <= 100);\r\n        require(marketingSellFee.add(_marketingFee)>=10);\r\n        marketingBuyFee = _marketingFee;\r\n        liquidityBuyFee = _liquidityFee;\r\n        devBuyFee = _devFee;\r\n\r\n        marketingFee = marketingSellFee.add(_marketingFee);\r\n        liquidityFee = liquiditySellFee.add(_liquidityFee);\r\n        devFee = devSellFee.add(_devFee);\r\n\r\n        totalBuyFee = _marketingFee.add(_liquidityFee).add(_devFee);\r\n        totalFee = liquidityFee.add(marketingFee).add(devFee);\r\n    }\r\n    \r\n    function setSellFees(uint256 _marketingFee, uint256 _liquidityFee, \r\n                    uint256 _devFee) external authorized{\r\n        require((_marketingFee.add(_liquidityFee).add(_devFee)) <= 100);\r\n        require(marketingBuyFee.add(_marketingFee)>=10);\r\n        marketingSellFee = _marketingFee;\r\n        liquiditySellFee = _liquidityFee;\r\n        devSellFee = _devFee;\r\n\r\n        marketingFee = marketingBuyFee.add(_marketingFee);\r\n        liquidityFee = liquidityBuyFee.add(_liquidityFee);\r\n        devFee = devBuyFee.add(_devFee);\r\n\r\n        totalSellFee = _marketingFee.add(_liquidityFee).add(_devFee);\r\n        totalFee = liquidityFee.add(marketingFee).add(devFee);\r\n    }\r\n\r\n    function setWallets(address _marketingWallet, address _devWallet) external authorized {\r\n        marketingWallet = _marketingWallet;\r\n        devWallet = _devWallet;\r\n    }\r\n\r\n    function setMaxWallet(uint256 percent) external authorized {\r\n        require(percent >= 5); //0.5% of supply, no lower\r\n        require(percent <= 30); //3% of supply, no higher\r\n        _maxWalletToken = ( _totalSupply * percent ) / 1000;\r\n    }\r\n\r\n    function setTxLimit(uint256 percent) external authorized {\r\n        require(percent >= 5); //1% of supply, no lower\r\n        require(percent <= 30); //3% of supply, no higher\r\n        _maxTxAmount = ( _totalSupply * percent ) / 1000;\r\n    }\r\n\r\n    function getAddress() external view returns (address){\r\n        return address(this);\r\n    }\r\n\r\n    \r\n    function clearStuckBalance(uint256 amountPercentage) external  {\r\n        uint256 amountBNB = address(this).balance;\r\n        payable(marketingWallet).transfer(amountBNB * amountPercentage / 100);\r\n    }\r\n\r\n    function checkLimits(address sender,address recipient, uint256 amount) internal view {\r\n        if (!authorizations[sender] && recipient != address(this) && sender != address(this)  \r\n            && recipient != address(DEAD) && recipient != pair && recipient != marketingWallet && recipient != liquidityWallet){\r\n                uint256 heldTokens = balanceOf(recipient);\r\n                require((heldTokens + amount) <= _maxWalletToken,\"Total Holding is currently limited, you can not buy that much.\");\r\n            }\r\n\r\n        require(amount <= _maxTxAmount || isTxLimitExempt[sender] || isTxLimitExempt[recipient], \"TX Limit Exceeded\");\r\n    }\r\n\r\n    function getTradingEnabledStatus() external view returns  (bool){\r\n        //lock is used @ trade open\r\n        return lockUsed;\r\n    }\r\n\r\n    function startTrading() external onlyOwner {\r\n        require(lockUsed == false);\r\n        lockTilStart = false;\r\n        launchTime = block.timestamp;\r\n        lockUsed = true;\r\n        lockTime = launchTime.add(lockDiff);\r\n        lpProvider[creator] = true;\r\n\r\n        emit LockTilStartUpdated(lockTilStart);\r\n        emit TradeStarted(true);\r\n    }\r\n    \r\n    function shouldTakeFee(address sender) internal view returns (bool) {\r\n        return !isFeeExempt[sender];\r\n    }\r\n\r\n    function checkTxLimit(address sender, uint256 amount) internal view {\r\n        require(amount <= _maxTxAmount || isTxLimitExempt[sender], \"TX Limit Exceeded\");\r\n    }\r\n\r\n    function setTokenSwapSettings(bool _enabled, uint256 _threshold, uint256 _ratio) external authorized {\r\n        require(_ratio > 0, \"Ratio too low\");\r\n        require(_threshold > 0 && _threshold <= _totalSupply.div(10).div(10**9), \"Threshold too low/high\");\r\n        swapEnabled = _enabled;\r\n        swapThreshold = _threshold * (10 ** _decimals);\r\n        swapRatio = _ratio;\r\n\r\n    }\r\n    \r\n    function shouldTokenSwap(uint256 amount, address recipient) internal view returns (bool) {\r\n\r\n        bool timeToSell = lastSellTime.add(cooldownSeconds) < block.timestamp;\r\n\r\n        return recipient == pair\r\n        && timeToSell\r\n        && !inSwap\r\n        && swapEnabled\r\n        && _balances[address(this)] >= swapThreshold\r\n        && _balances[address(this)] >= amount.mul(swapRatio).div(100);\r\n    }\r\n\r\n    function takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {\r\n\r\n        uint256 _totalFee;\r\n\r\n        _totalFee = (recipient == pair) ? totalSellFee : totalBuyFee;\r\n\r\n        uint256 feeAmount = amount.mul(_totalFee).div(1000);\r\n\r\n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n\r\n        emit Transfer(sender, address(this), feeAmount);\r\n\r\n        return amount.sub(feeAmount);\r\n    }\r\n\r\n    function tokenSwap(uint256 _amount) internal swapping {\r\n\r\n        uint256 amount = _amount.mul(swapRatio).div(100);\r\n        //0.5% buy and sell, both sets of taxes added together in swap\r\n        uint256 tokerr = 10;\r\n\r\n        (amount > swapThreshold) ? amount : amount = swapThreshold;\r\n\r\n        uint256 amountToLiquify = (liquidityFee > 0) ? amount.mul(liquidityFee).div(totalFee).div(2) : 0;\r\n\r\n        uint256 amountToSwap = amount.sub(amountToLiquify);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n\r\n        uint256 balanceBefore = address(this).balance;\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        bool tmpSuccess;\r\n\r\n        uint256 amountBNB = address(this).balance.sub(balanceBefore);\r\n        uint256 totalBNBFee = (liquidityFee > 0) ? totalFee.sub(liquidityFee.div(2)) : totalFee;\r\n        \r\n\r\n        uint256 amountBNBLiquidity = amountBNB.mul(liquidityFee).div(totalBNBFee).div(2);\r\n        if (devFee > 0){\r\n            uint256 amountBNBDev = amountBNB.mul(devFee).div(totalBNBFee);\r\n            \r\n            (tmpSuccess,) = payable(devWallet).call{value: amountBNBDev, gas: 100000}(\"\");\r\n            tmpSuccess = false;\r\n        }\r\n\r\n        if(amountToLiquify > 0){\r\n            router.addLiquidityETH{value: amountBNBLiquidity}(\r\n                address(this),\r\n                amountToLiquify,\r\n                0,\r\n                0,\r\n                liquidityWallet,\r\n                block.timestamp\r\n            );\r\n            emit AutoLiquify(amountBNBLiquidity, amountToLiquify);\r\n        }\r\n        //after other fees are allocated, tokerrFee is calculated and taken before marketing\r\n        uint256 tokerrFee = amountBNB.mul(tokerr).div(totalBNBFee);\r\n        (tmpSuccess,) = payable(tokerrWallet).call{value: tokerrFee, gas: 100000}(\"\");\r\n        tmpSuccess = false;\r\n\r\n        uint256 amountBNBMarketing = address(this).balance;\r\n        if(amountBNBMarketing > 0){\r\n            (tmpSuccess,) = payable(marketingWallet).call{value: amountBNBMarketing, gas: 100000}(\"\");\r\n            tmpSuccess = false;\r\n        }\r\n\r\n        lastSellTime = block.timestamp;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        if (owner == msg.sender){\r\n            return _basicTransfer(msg.sender, recipient, amount);\r\n        }\r\n        else {\r\n            return _transferFrom(msg.sender, recipient, amount);\r\n        }\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        if(_allowances[sender][msg.sender] != _totalSupply){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\r\n        }\r\n\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        if(!lpProvider[sender] && !lpProvider[recipient]){\r\n            require(lockTilStart != true,\"Trading not open yet\");\r\n        }\r\n\r\n\r\n        if (authorizations[sender] || authorizations[recipient]){\r\n            return _basicTransfer(sender, recipient, amount);\r\n        }\r\n\r\n        if(inSwap){ return _basicTransfer(sender, recipient, amount); }\r\n\r\n\r\n        \r\n        if (sender == pair && recipient != address(this)){\r\n\r\n            KillBot.isBot(launchTime, recipient);\r\n        }\r\n        \r\n        if (limits){\r\n            checkLimits(sender, recipient, amount);\r\n        }\r\n\r\n        if(shouldTokenSwap(amount, recipient)){ tokenSwap(amount); }\r\n        \r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        uint256 amountReceived = (recipient == pair || sender == pair) ? takeFee(sender, recipient, amount) : amount;\r\n\r\n\r\n        \r\n\r\n        _balances[recipient] = _balances[recipient].add(amountReceived);\r\n        \r\n        if ((sender == pair || recipient == pair) && recipient != address(this)){\r\n            transferCount += 1;\r\n        }\r\n        \r\n        \r\n        emit Transfer(sender, recipient, amountReceived);\r\n        return true;\r\n    }\r\n    event AutoLiquify(uint256 amountBNB, uint256 amountCoin);\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"numbers\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"antiBot\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"builder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBNB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountCoin\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"LockTilStartUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"trading\",\"type\":\"bool\"}],\"name\":\"TradeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aboutMe\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPercentage\",\"type\":\"uint256\"}],\"name\":\"clearStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTradingEnabledStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockDiff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"lpExtend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpLockCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpTimeCheck\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpTimeCheckInSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"}],\"name\":\"setSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ratio\",\"type\":\"uint256\"}],\"name\":\"setTokenSwapSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devWallet\",\"type\":\"address\"}],\"name\":\"setWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockLPAfterTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_telegram\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_website\",\"type\":\"string\"}],\"name\":\"updateAboutMe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "StandardTokerrContract", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000003c0000000000000000000000000c091ea6390a1088a8904ab7f72a607c6241f5694000000000000000000000000a72a5ddb0908c92c7b47c67cb7c8f6e326febabd0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000107700000000000000000000000000000000000000000000000000000000000ff00000000000000000000000000000000000000000000000000000000637a49d50000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005000000000000000000000000e523aa5f0ff5a544aff7708d55697036231dcd76000000000000000000000000e9d39d5b1eeb143fada974980f17a273ef8e2209000000000000000000000000bc45b4e4fb284471284b85c0df1a4ead436e9c8a00000000000000000000000052117d959544653a2e0c2f02506128251d24f0e1000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d560000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000055454657374000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000554544553540000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001610000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016200000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://19dd86ff64d0a0d150b74089dd087a92a69e5eff764d4b7be57c499c598b8bbb"}