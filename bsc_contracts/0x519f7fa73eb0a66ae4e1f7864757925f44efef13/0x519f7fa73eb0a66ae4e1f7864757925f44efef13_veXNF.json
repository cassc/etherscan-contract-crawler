{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAuction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\n/*\\r\\n * @title IAuction Interface\\r\\n *\\r\\n * @notice This interface defines the essential functions for an auction contract,\\r\\n * facilitating token burning, reward distribution, and cycle management. It provides\\r\\n * a standardized way to interact with different auction implementations.\\r\\n *\\r\\n * Co-Founders:\\r\\n * - Simran Dhillon: simran@xenify.io\\r\\n * - Hardev Dhillon: hardev@xenify.io\\r\\n * - Dayana Plaz: dayana@xenify.io\\r\\n *\\r\\n * Official Links:\\r\\n * - Twitter: https://twitter.com/xenify_io\\r\\n * - Telegram: https://t.me/xenify_io\\r\\n * - Website: https://xenify.io\\r\\n *\\r\\n * Disclaimer:\\r\\n * This contract aligns with the principles of the Fair Crypto Foundation, promoting self-custody, transparency, consensus-based\\r\\n * trust, and permissionless value exchange. There are no administrative access keys, underscoring our commitment to decentralization.\\r\\n * Engaging with this contract involves technical and legal risks. Users must conduct their own due diligence and ensure compliance\\r\\n * with local laws and regulations. The software is provided \\\"AS-IS,\\\" without warranties, and the co-founders and developers disclaim\\r\\n * all liability for any vulnerabilities, exploits, errors, or breaches that may occur. By using this contract, users accept all associated\\r\\n * risks and this disclaimer. The co-founders, developers, or related parties will not bear liability for any consequences of non-compliance.\\r\\n *\\r\\n * Redistribution and Use:\\r\\n * Redistribution, modification, or repurposing of this contract, in whole or in part, is strictly prohibited without express written\\r\\n * approval from all co-founders. Approval requests must be sent to the official email addresses of the co-founders, ensuring responses\\r\\n * are received directly from these addresses. Proposals for redistribution, modification, or repurposing must include a detailed explanation\\r\\n * of the intended changes or uses and the reasons behind them. The co-founders reserve the right to request additional information or\\r\\n * clarification as necessary. Approval is at the sole discretion of the co-founders and may be subject to conditions to uphold the\\r\\n * project\u2019s integrity and the values of the Fair Crypto Foundation. Failure to obtain express written approval prior to any redistribution,\\r\\n * modification, or repurposing will result in a breach of these terms and immediate legal action.\\r\\n *\\r\\n * Copyright and License:\\r\\n * Copyright \u00a9 2023 Xenify (Simran Dhillon, Hardev Dhillon, Dayana Plaz). All rights reserved.\\r\\n * This software is provided 'as is' and may be used by the recipient. No permission is granted for redistribution,\\r\\n * modification, or repurposing of this contract. Any use beyond the scope defined herein may be subject to legal action.\\r\\n */\\r\\ninterface IAuction {\\r\\n\\r\\n    /// --------------------------------- EXTERNAL FUNCTIONS -------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Enables users to recycle their native rewards and claim other rewards.\\r\\n     */\\r\\n    function recycle() external;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Allows the caller to claim all their pending rewards.\\r\\n     */\\r\\n    function claimAll() external;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Allows the caller to claim their pending XNF rewards.\\r\\n     */\\r\\n    function claimXNF() external;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Allows the caller to claim XNF rewards and locks them in the veXNF contract for a year.\\r\\n     */\\r\\n    function claimVeXNF() external;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Allows the caller to claim their native rewards.\\r\\n     */\\r\\n    function claimNative() external;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the statistics related to the provided user address.\\r\\n     */\\r\\n    function updateStats(address) external;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Allows the caller to recycle native rewards and claim all other rewards.\\r\\n     */\\r\\n    function claimAllAndRecycle() external;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Claims all pending rewards for a specific user.\\r\\n     * @dev This function aggregates all rewards and claims them in a single transaction.\\r\\n     * It should be invoked by the veXNF contract before any burn action.\\r\\n     */\\r\\n    function claimAllForUser(address) external;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Claims the accumulated veXNF rewards for a specific user.\\r\\n     * @dev This function mints and transfers the veXNF tokens to the user.\\r\\n     * It should be invoked by the veXNF contract.\\r\\n     */\\r\\n    function claimVeXNFForUser(address) external;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Burns specified batches of vXEN or YSL tokens to earn rewards.\\r\\n     */\\r\\n    function burn(bool, uint256) external payable;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Retrieves the current cycle number of the auction.\\r\\n     * @dev A cycle represents a specific duration or round in the auction process.\\r\\n     * @return The current cycle number.\\r\\n     */\\r\\n    function currentCycle() external returns (uint256);\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Updates and retrieves the current cycle number of the auction.\\r\\n     * @dev A cycle represents a specific duration or round in the auction process.\\r\\n     * @return The current cycle number.\\r\\n     */\\r\\n    function calculateCycle() external returns (uint256);\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Retrieves the number of the last active cycle.\\r\\n     * @dev Useful for determining the most recent cycle with recorded activity.\\r\\n     * @return The number of the last active cycle.\\r\\n     */\\r\\n    function lastActiveCycle() external returns (uint256);\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Registers the caller as a burner by paying in native tokens.\\r\\n     */\\r\\n    function participateWithNative(uint256) external payable;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Retrieves the current cycle number based on the time elapsed since the contract's initialization.\\r\\n     * @return The current cycle number.\\r\\n     */\\r\\n    function getCurrentCycle() external view returns (uint256);\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates the pending native token rewards for a user based on their NFT ownership and recycling activities.\\r\\n     * @return The amount of pending native token rewards.\\r\\n     */\\r\\n    function pendingNative(address) external view returns (uint256);\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Determines the burn and native fee for a given number of batches, adjusting for the time within the current cycle.\\r\\n     * @return The calculated burn and native fee.\\r\\n     */\\r\\n    function coefficientWrapper(uint256) external view returns (uint256);\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates the reward amount for a given cycle, adjusting for halving events.\\r\\n     * @return The calculated reward amount.\\r\\n     */\\r\\n    function calculateRewardPerCycle(uint256) external view returns (uint256);\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates the pending native token rewards for a user for the current cycle based on their NFT ownership and recycling activities.\\r\\n     * @return The amount of pending native token rewards.\\r\\n     */\\r\\n    function pendingNativeForCurrentCycle(address) external view returns (uint256);\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Computes the pending XNF rewards for a user across various activities.\\r\\n     * @return pendingXNFRewards An array containing the pending XNF rewards amounts for different activities.\\r\\n     */\\r\\n    function pendingXNF(address _user) external view returns (uint256, uint256, uint256);\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Registers the caller as a swap user and earns rewards.\\r\\n     */\\r\\n    function registerSwapUser(bytes calldata, address, uint256, address) external payable;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Computes the pending XNF rewards for a user for the current cycle across various activities.\\r\\n     * @return pendingXNFRewards An array containing the pending XNF rewards amounts for different activities.\\r\\n     */\\r\\n    function pendingXNFForCurrentCycle(address _user) external view returns (uint256, uint256, uint256);\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IVeXNF.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\n/*\\r\\n * @title IVeXNF Interface\\r\\n *\\r\\n * @notice Interface for querying \\\"time-weighted\\\" supply and balance of NFTs.\\r\\n * Provides methods to determine the total supply and user balance at specific points in time.\\r\\n *\\r\\n * Co-Founders:\\r\\n * - Simran Dhillon: simran@xenify.io\\r\\n * - Hardev Dhillon: hardev@xenify.io\\r\\n * - Dayana Plaz: dayana@xenify.io\\r\\n *\\r\\n * Official Links:\\r\\n * - Twitter: https://twitter.com/xenify_io\\r\\n * - Telegram: https://t.me/xenify_io\\r\\n * - Website: https://xenify.io\\r\\n *\\r\\n * Disclaimer:\\r\\n * This contract aligns with the principles of the Fair Crypto Foundation, promoting self-custody, transparency, consensus-based\\r\\n * trust, and permissionless value exchange. There are no administrative access keys, underscoring our commitment to decentralization.\\r\\n * Engaging with this contract involves technical and legal risks. Users must conduct their own due diligence and ensure compliance\\r\\n * with local laws and regulations. The software is provided \\\"AS-IS,\\\" without warranties, and the co-founders and developers disclaim\\r\\n * all liability for any vulnerabilities, exploits, errors, or breaches that may occur. By using this contract, users accept all associated\\r\\n * risks and this disclaimer. The co-founders, developers, or related parties will not bear liability for any consequences of non-compliance.\\r\\n *\\r\\n * Redistribution and Use:\\r\\n * Redistribution, modification, or repurposing of this contract, in whole or in part, is strictly prohibited without express written\\r\\n * approval from all co-founders. Approval requests must be sent to the official email addresses of the co-founders, ensuring responses\\r\\n * are received directly from these addresses. Proposals for redistribution, modification, or repurposing must include a detailed explanation\\r\\n * of the intended changes or uses and the reasons behind them. The co-founders reserve the right to request additional information or\\r\\n * clarification as necessary. Approval is at the sole discretion of the co-founders and may be subject to conditions to uphold the\\r\\n * project\u2019s integrity and the values of the Fair Crypto Foundation. Failure to obtain express written approval prior to any redistribution,\\r\\n * modification, or repurposing will result in a breach of these terms and immediate legal action.\\r\\n *\\r\\n * Copyright and License:\\r\\n * Copyright \u00a9 2023 Xenify (Simran Dhillon, Hardev Dhillon, Dayana Plaz). All rights reserved.\\r\\n * This software is provided 'as is' and may be used by the recipient. No permission is granted for redistribution,\\r\\n * modification, or repurposing of this contract. Any use beyond the scope defined herein may be subject to legal action.\\r\\n */\\r\\ninterface IVeXNF {\\r\\n\\r\\n    /// --------------------------------- EXTERNAL FUNCTIONS -------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Merges all NFTs that user has into a single new NFT with 1 year lock period.\\r\\n     */\\r\\n    function mergeAll() external;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Records a global checkpoint for data tracking.\\r\\n     */\\r\\n    function checkpoint() external;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraws all tokens from all expired NFT locks.\\r\\n     */\\r\\n    function withdrawAll() external;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraws all tokens from an expired NFT lock.\\r\\n     */\\r\\n    function withdraw(uint) external;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Merges multiple NFTs into a single new NFT.\\r\\n     */\\r\\n    function merge(uint[] memory) external;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Deposits tokens into a specific NFT lock.\\r\\n     */\\r\\n    function depositFor(uint, uint) external;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Splits a single NFT into multiple new NFTs with specified amounts.\\r\\n     */\\r\\n    function split(uint[] calldata, uint) external;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Extends the unlock time of a specific NFT lock.\\r\\n     */\\r\\n    function increaseUnlockTime(uint, uint) external;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Retrieves the current total supply of tokens.\\r\\n     * @return The current total token supply.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint);\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Retrieves the end timestamp of a lock for a specific NFT.\\r\\n     * @return The timestamp when the NFT's lock expires.\\r\\n     */\\r\\n    function lockedEnd(uint) external view returns (uint);\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Creates a lock for a user for a specified amount and duration.\\r\\n     * @return tokenId The identifier of the newly created NFT.\\r\\n     */\\r\\n    function createLock(uint, uint) external returns (uint);\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates the total voting power at a specific timestamp.\\r\\n     * @return The total voting power at the specified timestamp.\\r\\n     */\\r\\n    function totalSupplyAtT(uint) external view returns (uint);\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Retrieves the balance of a specific NFT at a given timestamp.\\r\\n     * @return The balance of the NFT at the given timestamp.\\r\\n     */\\r\\n    function balanceOfNFTAt(uint, uint) external view returns (uint);\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Retrieves the total token supply at a specific timestamp.\\r\\n     * @return The total token supply at the given timestamp.\\r\\n     */\\r\\n    function getPastTotalSupply(uint256) external view returns (uint);\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Retrieves the most recent voting power decrease rate for a specific NFT.\\r\\n     * @return The slope value representing the rate of voting power decrease.\\r\\n     */\\r\\n    function get_last_user_slope(uint) external view returns (int128);\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Creates a new NFT lock for a specified address, locking a specific amount of tokens.\\r\\n     * @return tokenId The identifier of the newly created NFT.\\r\\n     */\\r\\n    function createLockFor(uint, uint, address) external returns (uint);\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n     /**\\r\\n     * @notice Retrieves a list of NFT IDs owned by a specific address.\\r\\n     * @return An array of NFT IDs owned by the specified address.\\r\\n     */\\r\\n    function userToIds(address) external view returns (uint256[] memory);\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Retrieves the timestamp of a specific checkpoint for an NFT.\\r\\n     * @return The timestamp of the specified checkpoint.\\r\\n     */\\r\\n    function userPointHistory_ts(uint, uint) external view returns (uint);\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if an address is approved to manage a specific NFT or if it's the owner.\\r\\n     * @return True if the address is approved or is the owner, false otherwise.\\r\\n     */\\r\\n    function isApprovedOrOwner(address, uint) external view returns (bool);\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Retrieves the aggregate balance of NFTs owned by a specific user at a given epoch time.\\r\\n     * @return totalBalance The total balance of the user's NFTs at the given timestamp.\\r\\n     */\\r\\n    function totalBalanceOfNFTAt(address, uint) external view returns (uint256);\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n}\"\r\n    },\r\n    \"contracts/veXNF.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IERC721Metadata} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\r\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport {IAuction} from \\\"./interfaces/IAuction.sol\\\";\\r\\nimport {IVeXNF} from \\\"./interfaces/IVeXNF.sol\\\";\\r\\n\\r\\n/*\\r\\n * @title veXNF Contract\\r\\n *\\r\\n * @notice Allows users to lock ERC-20 tokens and receive an ERC-721 NFT in return.\\r\\n * The NFT's earning power decays over time and is influenced by the lock duration,\\r\\n * with a maximum lock time of 1 year (`_MAXTIME`).\\r\\n *\\r\\n * Co-Founders:\\r\\n * - Simran Dhillon: simran@xenify.io\\r\\n * - Hardev Dhillon: hardev@xenify.io\\r\\n * - Dayana Plaz: dayana@xenify.io\\r\\n *\\r\\n * Official Links:\\r\\n * - Twitter: https://twitter.com/xenify_io\\r\\n * - Telegram: https://t.me/xenify_io\\r\\n * - Website: https://xenify.io\\r\\n *\\r\\n * Disclaimer:\\r\\n * This contract aligns with the principles of the Fair Crypto Foundation, promoting self-custody, transparency, consensus-based\\r\\n * trust, and permissionless value exchange. There are no administrative access keys, underscoring our commitment to decentralization.\\r\\n * Engaging with this contract involves technical and legal risks. Users must conduct their own due diligence and ensure compliance\\r\\n * with local laws and regulations. The software is provided \\\"AS-IS,\\\" without warranties, and the co-founders and developers disclaim\\r\\n * all liability for any vulnerabilities, exploits, errors, or breaches that may occur. By using this contract, users accept all associated\\r\\n * risks and this disclaimer. The co-founders, developers, or related parties will not bear liability for any consequences of non-compliance.\\r\\n *\\r\\n * Redistribution and Use:\\r\\n * Redistribution, modification, or repurposing of this contract, in whole or in part, is strictly prohibited without express written\\r\\n * approval from all co-founders. Approval requests must be sent to the official email addresses of the co-founders, ensuring responses\\r\\n * are received directly from these addresses. Proposals for redistribution, modification, or repurposing must include a detailed explanation\\r\\n * of the intended changes or uses and the reasons behind them. The co-founders reserve the right to request additional information or\\r\\n * clarification as necessary. Approval is at the sole discretion of the co-founders and may be subject to conditions to uphold the\\r\\n * project\u2019s integrity and the values of the Fair Crypto Foundation. Failure to obtain express written approval prior to any redistribution,\\r\\n * modification, or repurposing will result in a breach of these terms and immediate legal action.\\r\\n *\\r\\n * Copyright and License:\\r\\n * Copyright \u00a9 2023 Xenify (Simran Dhillon, Hardev Dhillon, Dayana Plaz). All rights reserved.\\r\\n * This software is provided 'as is' and may be used by the recipient. No permission is granted for redistribution,\\r\\n * modification, or repurposing of this contract. Any use beyond the scope defined herein may be subject to legal action.\\r\\n */\\r\\ncontract veXNF is\\r\\n    IVeXNF,\\r\\n    IERC721,\\r\\n    IERC721Metadata,\\r\\n    ReentrancyGuard\\r\\n{\\r\\n\\r\\n    /// ------------------------------------- LIBRARYS ------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Library for converting uint256 to string.\\r\\n     */\\r\\n    using Strings for uint256;\\r\\n\\r\\n    /**\\r\\n     * @notice Library for safe ERC20 transfers.\\r\\n     */\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    /// ------------------------------------ VARIABLES ------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Address of the XNF token.\\r\\n     */\\r\\n    address public xnf;\\r\\n\\r\\n    /**\\r\\n     * @notice Address of the Auction contract, set during deployment and cannot be changed.\\r\\n     */\\r\\n    address public Auction;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Name of the NFT token.\\r\\n     */\\r\\n    string constant public name = \\\"veXNF\\\";\\r\\n\\r\\n    /**\\r\\n     * @notice Symbol of the NFT token.\\r\\n     */\\r\\n    string constant public symbol = \\\"veXNF\\\";\\r\\n\\r\\n    /**\\r\\n     * @notice Version of the contract.\\r\\n     */\\r\\n    string constant public version = \\\"1.0.0\\\";\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Number of decimals the token uses.\\r\\n     */\\r\\n    uint8 constant public decimals = 18;\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Current epoch number.\\r\\n     */\\r\\n    uint public epoch;\\r\\n\\r\\n    /**\\r\\n     * @notice Current total supply.\\r\\n     */\\r\\n    uint public supply;\\r\\n\\r\\n    /**\\r\\n     * @notice Counter for new token ids.\\r\\n     */\\r\\n    uint internal _tokenID;\\r\\n\\r\\n    /**\\r\\n     * @notice Number of seconds in 1 day.\\r\\n     */\\r\\n    uint internal constant _DAY = 1 days;\\r\\n\\r\\n    /**\\r\\n     * @notice Number of seconds in 1 week.\\r\\n     */\\r\\n    uint internal constant _WEEK = 1 weeks;\\r\\n\\r\\n    /**\\r\\n     * @notice Maximum lock duration of 1 year.\\r\\n     */\\r\\n    uint internal constant _MAXTIME = 31536000; // 365 * 86400\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Scaled maximum lock duration of 1 year (for calculations).\\r\\n     */\\r\\n    int128 internal constant _iMAXTIME = 31536000; // 365 * 86400\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Interface ID for ERC165.\\r\\n     */\\r\\n    bytes4 internal constant _ERC165_INTERFACE_ID = 0x01ffc9a7;\\r\\n\\r\\n    /**\\r\\n     * @notice Interface ID for ERC721.\\r\\n     */\\r\\n    bytes4 internal constant _ERC721_INTERFACE_ID = 0x80ac58cd;\\r\\n\\r\\n    /// ------------------------------------ MAPPINGS --------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Maps epoch to total supply point.\\r\\n     */\\r\\n    mapping (uint => Point) public pointHistory;\\r\\n\\r\\n    /**\\r\\n     * @notice Maps time to signed slope change.\\r\\n     */\\r\\n    mapping(uint => int128) public slope_changes;\\r\\n\\r\\n    /**\\r\\n     * @notice Maps token ID to owner address.\\r\\n     */\\r\\n    mapping (uint => address) internal _idToOwner;\\r\\n\\r\\n    /**\\r\\n     * @notice Maps token ID to lock info.\\r\\n     */\\r\\n    mapping (uint => LockedBalance) public locked;\\r\\n\\r\\n    /**\\r\\n     * @notice Maps user address to epoch count.\\r\\n     */\\r\\n    mapping (uint => uint) public user_point_epoch;\\r\\n\\r\\n    /**\\r\\n     * @notice Maps token ID to approved address.\\r\\n     */\\r\\n    mapping (uint => address) internal _idToApprovals;\\r\\n\\r\\n    /**\\r\\n     * @notice Maps owner address to token ids owned.\\r\\n     */\\r\\n    mapping (address => uint256[]) internal _ownerToIds;\\r\\n\\r\\n    /**\\r\\n     * @notice Interface support lookup.\\r\\n     */\\r\\n    mapping (bytes4 => bool) internal _supportedInterfaces;\\r\\n\\r\\n    /**\\r\\n     * @notice Maps address to number of tokens owned.\\r\\n     */\\r\\n    mapping (address => uint) internal _ownerToNFTokenCount;\\r\\n\\r\\n    /**\\r\\n     * @notice Maps token ID and epoch to user point.\\r\\n     */\\r\\n    mapping (uint => mapping (uint => Point)) public userPointHistory;\\r\\n\\r\\n    /**\\r\\n     * @notice Maps owner and operator addresses to approval.\\r\\n     */\\r\\n    mapping (address => mapping (address => bool)) internal _ownerToOperators;\\r\\n\\r\\n    /// -------------------------------------- ERRORS --------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice This error is thrown when the lock has already expired.\\r\\n     */\\r\\n    error LockExpired();\\r\\n\\r\\n    /**\\r\\n     * @notice This error is thrown when sum of weights is zero.\\r\\n     */\\r\\n    error WeightIsZero();\\r\\n\\r\\n    /**\\r\\n     * @notice This error is thrown when user don't have NFTs to merge.\\r\\n     */\\r\\n    error NoNFTsToMerge();\\r\\n\\r\\n    /**\\r\\n     * @notice This error is thrown when the caller attempts to clear the allowance from an NFT that does not belong to them.\\r\\n     */\\r\\n    error NotOwnerOfNFT();\\r\\n\\r\\n    /**\\r\\n     * @notice This error is thrown when NFT does not exist.\\r\\n     */\\r\\n    error NFTDoesNotExist();\\r\\n\\r\\n    /**\\r\\n     * @notice This error is thrown when trying to mint to the zero address.\\r\\n     */\\r\\n    error ZeroAddressMint();\\r\\n\\r\\n    /**\\r\\n    * @notice This error is thrown when the locked amount is zero.\\r\\n    */\\r\\n    error LockedAmountZero();\\r\\n\\r\\n    /**\\r\\n     * @notice This error is thrown when the deposit value is zero.\\r\\n     */\\r\\n    error ZeroValueDeposit();\\r\\n\\r\\n    /**\\r\\n     * @notice This error is thrown when a contract attempts to record an NFT owner that already exists.\\r\\n     */\\r\\n    error NFTAlreadyHasOwner();\\r\\n\\r\\n    /**\\r\\n     * @notice This error is thrown when the lock duration is too long.\\r\\n     */\\r\\n    error LockDurationTooLong();\\r\\n\\r\\n    /**\\r\\n     * @notice This error is thrown when the lock duration is too short.\\r\\n     */\\r\\n    error LockDurationTooShort();\\r\\n\\r\\n    /**\\r\\n     * @notice This error is thrown when the ERC721 receiver is missing.\\r\\n     */\\r\\n    error MissingERC721Receiver();\\r\\n\\r\\n    /**\\r\\n     * @notice This error is thrown when the receiver of the NFT does not implement the expected function.\\r\\n     */\\r\\n    error InvalidERC721Receiver();\\r\\n\\r\\n    /**\\r\\n     * @notice This error is thrown when the owner of the NFT tries to give allowance to his address.\\r\\n     */\\r\\n    error ApprovingToSameAddress();\\r\\n\\r\\n    /**\\r\\n     * @notice This error is thrown when the token is not owned.\\r\\n     */\\r\\n    error TokenNotOwned(uint tokenId);\\r\\n\\r\\n    /**\\r\\n     * @notice This error is thrown when not all tokens in the list are owned by the sender.\\r\\n     */\\r\\n    error NotAllTokensOwnedBySender();\\r\\n\\r\\n    /**\\r\\n     * @notice This error is thrown when trying to withdraw before the lock expires.\\r\\n     */\\r\\n    error LockNotExpiredYet(uint lockedEnd);\\r\\n\\r\\n    /**\\r\\n     * @notice Error thrown when the contract is already initialised.\\r\\n     */\\r\\n    error ContractInitialised(address contractAddress);\\r\\n\\r\\n    /**\\r\\n     * @notice This error is thrown when the sender is neither the owner nor an operator for the NFT.\\r\\n     */\\r\\n    error NotOwnerOrOperator(address sender, uint tokenId);\\r\\n\\r\\n    /**\\r\\n     * @notice This error is thrown when the sender is neither the owner nor approved for the NFT.\\r\\n     */\\r\\n    error NotApprovedOrOwner(address sender, uint tokenId);\\r\\n\\r\\n    /**\\r\\n     * @notice This error is thrown when the unlock time is set too short.\\r\\n     */\\r\\n    error UnlockTimeTooShort(uint unlockTime, uint minTime);\\r\\n\\r\\n    /**\\r\\n     * @notice This error is thrown when the token's owner does not match the expected owner.\\r\\n     */\\r\\n    error NotTokenOwner(address expectedOwner, uint tokenId);\\r\\n\\r\\n    /**\\r\\n     * @notice This error is thrown when the unlock time is set too early.\\r\\n     */\\r\\n    error UnlockTimeTooEarly(uint unlockTime, uint lockedEnd);\\r\\n\\r\\n    /**\\r\\n     * @notice This error is thrown when the unlock time exceeds the maximum allowed time.\\r\\n     */\\r\\n    error UnlockTimeExceedsMax(uint unlockTime, uint maxTime);\\r\\n\\r\\n    /**\\r\\n     * @notice This error is thrown when trying to approve the current owner of the NFT.\\r\\n     */\\r\\n    error ApprovingCurrentOwner(address approved, uint tokenId);\\r\\n\\r\\n    /**\\r\\n     * @notice This error is thrown when the sender is neither the owner nor approved for the NFT.\\r\\n     */\\r\\n    error NotTokenOwnerOrApproved(address sender, uint tokenId);\\r\\n\\r\\n    /**\\r\\n     * @notice This error is thrown when the sender is neither the owner nor approved for the NFT split.\\r\\n     */\\r\\n    error NotApprovedOrOwnerForSplit(address sender, uint tokenId);\\r\\n\\r\\n    /**\\r\\n     * @notice This error is thrown when the sender is neither the owner nor approved for the NFT withdrawal.\\r\\n     */\\r\\n    error NotApprovedOrOwnerForWithdraw(address sender, uint tokenId);\\r\\n\\r\\n    /// --------------------------------------- ENUM ---------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Deposit type enum.\\r\\n     */\\r\\n    enum DepositType {\\r\\n        DEPOSIT_FOR_TYPE,\\r\\n        CREATE_LOCK_TYPE,\\r\\n        INCREASE_UNLOCK_TIME,\\r\\n        MERGE_TYPE,\\r\\n        SPLIT_TYPE\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------- STRUCTURES ------------------------------------ \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Point structure for slope and bias.\\r\\n     * @param bias Integer bias component.\\r\\n     * @param slope Integer slope component.\\r\\n     * @param ts Timestamp.\\r\\n     */\\r\\n    struct Point {\\r\\n        int128 bias;\\r\\n        int128 slope;\\r\\n        uint ts;\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Represents a locked balance for a user's NFT.\\r\\n     * @param amount Amount of tokens locked.\\r\\n     * @param end Timestamp when tokens unlock.\\r\\n     * @param decayEnd Timestamp when decay ends.\\r\\n     * @param daysCount Number of days tokens are locked for.\\r\\n     */\\r\\n    struct LockedBalance {\\r\\n        int128 amount;\\r\\n        uint end;\\r\\n        uint decayEnd;\\r\\n        uint256 daysCount;\\r\\n    }\\r\\n\\r\\n    /// -------------------------------------- EVENTS --------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when supply changes.\\r\\n     * @param prevSupply Previous total supply.\\r\\n     * @param supply New total supply.\\r\\n     */\\r\\n    event Supply(\\r\\n        uint prevSupply,\\r\\n        uint supply\\r\\n    );\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted on token deposit.\\r\\n     * @param provider Account making the deposit.\\r\\n     * @param tokenId ID of deposited token.\\r\\n     * @param value Amount deposited.\\r\\n     * @param locktime New unlock timestamp.\\r\\n     * @param deposit_type Type of deposit.\\r\\n     */\\r\\n    event Deposit(\\r\\n        address indexed provider,\\r\\n        uint tokenId,\\r\\n        uint value,\\r\\n        uint locktime,\\r\\n        DepositType deposit_type\\r\\n    );\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when tokens are withdrawn.\\r\\n     * @param provider Account making withdrawal.\\r\\n     * @param tokenId ID of withdrawn token.\\r\\n     * @param value Amount withdrawn.\\r\\n     */\\r\\n    event Withdraw(\\r\\n        address indexed provider,\\r\\n        uint tokenId,\\r\\n        uint value\\r\\n    );\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when a token is minted.\\r\\n     * @param to Address minting token.\\r\\n     * @param id Token id.\\r\\n     * @param lockedAmount Amount of locked XNF tokens.\\r\\n     * @param lockEnd Timestamp when lock will be ended.\\r\\n     */\\r\\n    event Mint(\\r\\n        address indexed to,\\r\\n        uint id,\\r\\n        uint256 lockedAmount,\\r\\n        uint256 lockEnd\\r\\n    );\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when a token is burnt.\\r\\n     * @param user Address of user.\\r\\n     * @param tokenID ID of the token that will be burnt.\\r\\n     */\\r\\n    event Burn(\\r\\n        address indexed user,\\r\\n        uint256 tokenID\\r\\n    );\\r\\n\\r\\n    /// --------------------------------- EXTERNAL FUNCTIONS -------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Initialises the contract with the given `XNF` token address and storage contract address.\\r\\n     * @param _xnf Address of the `XNF` token.\\r\\n     * @param _Auction Address of the `Auction` contract.\\r\\n     */\\r\\n    function initialise(\\r\\n        address _xnf,\\r\\n        address _Auction\\r\\n    ) external {\\r\\n        if (xnf != address(0))\\r\\n            revert ContractInitialised(xnf);\\r\\n        xnf = _xnf;\\r\\n        pointHistory[0].ts = block.timestamp;\\r\\n        _supportedInterfaces[_ERC165_INTERFACE_ID] = true;\\r\\n        _supportedInterfaces[_ERC721_INTERFACE_ID] = true;\\r\\n        Auction = _Auction;\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Sets approval for a third party to manage all of the sender's NFTs.\\r\\n     * @param _operator The address to grant or revoke operator rights.\\r\\n     * @param _approved Whether to approve or revoke the operator's rights.\\r\\n     */\\r\\n    function setApprovalForAll(\\r\\n        address _operator,\\r\\n        bool _approved\\r\\n    )\\r\\n        external\\r\\n        override\\r\\n    {\\r\\n        if (_operator == msg.sender) {\\r\\n            revert ApprovingToSameAddress();\\r\\n        }\\r\\n        _ownerToOperators[msg.sender][_operator] = _approved;\\r\\n        emit ApprovalForAll(msg.sender, _operator, _approved);\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Transfers a specific NFT from one address to another.\\r\\n     * @param _from Address currently owning the NFT.\\r\\n     * @param _to Address to receive the NFT.\\r\\n     * @param _tokenId ID of the NFT to be transferred.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint _tokenId\\r\\n    )\\r\\n        external\\r\\n        override\\r\\n    {\\r\\n        _transferFrom(_from, _to, _tokenId, msg.sender);\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Safely transfers a specific NFT, ensuring the receiver is capable of handling it.\\r\\n     * @param _from Address currently owning the NFT.\\r\\n     * @param _to Address to receive the NFT.\\r\\n     * @param _tokenId ID of the NFT to be transferred.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint _tokenId\\r\\n    )\\r\\n        external\\r\\n        override\\r\\n    {\\r\\n        safeTransferFrom(_from, _to, _tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Records a global checkpoint for data tracking.\\r\\n     */\\r\\n    function checkpoint() external override {\\r\\n        _checkpoint(0, LockedBalance(0, 0, 0, 0), LockedBalance(0, 0, 0, 0));\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Deposits tokens into a specific NFT lock.\\r\\n     * @param _tokenId ID of the NFT where tokens will be deposited.\\r\\n     * @param _value Amount of tokens to deposit.\\r\\n     */\\r\\n    function depositFor(\\r\\n        uint _tokenId,\\r\\n        uint _value\\r\\n    )\\r\\n        external\\r\\n        override\\r\\n        nonReentrant\\r\\n    {\\r\\n        if (!_isApprovedOrOwner(msg.sender, _tokenId)) {\\r\\n            revert NotApprovedOrOwner(msg.sender, _tokenId);\\r\\n        }\\r\\n        LockedBalance memory _locked = locked[_tokenId];\\r\\n        if (_value == 0) {\\r\\n            revert ZeroValueDeposit();\\r\\n        }\\r\\n        if (_locked.end <= block.timestamp) {\\r\\n            revert LockExpired();\\r\\n        }\\r\\n        uint unlock_time = block.timestamp + locked[_tokenId].daysCount * _DAY;\\r\\n        uint decayEnd = block.timestamp + locked[_tokenId].daysCount * _DAY / 6;\\r\\n        decayEnd = decayEnd / _DAY * _DAY;\\r\\n        _depositFor(_tokenId, _value, unlock_time, decayEnd, _locked, DepositType.DEPOSIT_FOR_TYPE);\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Creates a new NFT lock for the sender, locking a specific amount of tokens.\\r\\n     * @param _value Amount of tokens to lock.\\r\\n     * @param _countOfDays Duration of the lock in days.\\r\\n     * @return tokenId ID of the newly created NFT lock.\\r\\n     */\\r\\n    function createLock(\\r\\n        uint _value,\\r\\n        uint _countOfDays\\r\\n    )\\r\\n        external\\r\\n        override\\r\\n        nonReentrant\\r\\n        returns (uint)\\r\\n    {\\r\\n        return _createLock(_value, _countOfDays, msg.sender);\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Creates a new NFT lock for a specified address, locking a specific amount of tokens.\\r\\n     * @param _value Amount of tokens to lock.\\r\\n     * @param _countOfDays Duration of the lock in days.\\r\\n     * @param _to Address for which the lock will be created.\\r\\n     * @return tokenId ID of the newly created NFT lock.\\r\\n     */\\r\\n    function createLockFor(\\r\\n        uint _value,\\r\\n        uint _countOfDays,\\r\\n        address _to\\r\\n    )\\r\\n        external\\r\\n        override\\r\\n        nonReentrant\\r\\n        returns (uint)\\r\\n    {\\r\\n        return _createLock(_value, _countOfDays, _to);\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Extends the unlock time of a specific NFT lock.\\r\\n     * @param _tokenId ID of the NFT to extend.\\r\\n     * @param _countOfDays Number of days to extend the unlock time.\\r\\n     */\\r\\n    function increaseUnlockTime(\\r\\n        uint _tokenId,\\r\\n        uint _countOfDays\\r\\n    )\\r\\n        external\\r\\n        override\\r\\n        nonReentrant\\r\\n    {\\r\\n        if (!_isApprovedOrOwner(msg.sender, _tokenId)) {\\r\\n            revert NotApprovedOrOwner(msg.sender, _tokenId);\\r\\n        }\\r\\n        LockedBalance memory _locked = locked[_tokenId];\\r\\n        uint unlock_time = block.timestamp + _countOfDays * _DAY;\\r\\n        uint decayEnd = block.timestamp + _countOfDays * _DAY / 6;\\r\\n        decayEnd = decayEnd / _DAY * _DAY;\\r\\n        if (_locked.end <= block.timestamp) {\\r\\n            revert LockExpired();\\r\\n        }\\r\\n        if (unlock_time <= _locked.end) {\\r\\n            revert UnlockTimeTooEarly(unlock_time, _locked.end);\\r\\n        }\\r\\n        if (unlock_time > block.timestamp + _MAXTIME) {\\r\\n            revert UnlockTimeExceedsMax(unlock_time, block.timestamp + _MAXTIME);\\r\\n        }\\r\\n        if (unlock_time < block.timestamp + _WEEK) {\\r\\n            revert UnlockTimeTooShort(unlock_time, block.timestamp + _WEEK);\\r\\n        }\\r\\n        _locked.daysCount = _countOfDays;\\r\\n        _depositFor(_tokenId, 0, unlock_time, decayEnd, _locked, DepositType.INCREASE_UNLOCK_TIME);\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraws all tokens from an expired NFT lock.\\r\\n     * @param _tokenId ID of the NFT from which to withdraw.\\r\\n     */\\r\\n    function withdraw(uint _tokenId)\\r\\n        external\\r\\n        override\\r\\n        nonReentrant\\r\\n    {\\r\\n        if (!_isApprovedOrOwner(msg.sender, _tokenId)) {\\r\\n            revert NotApprovedOrOwnerForWithdraw(msg.sender, _tokenId);\\r\\n        }\\r\\n        address owner = _idToOwner[_tokenId];\\r\\n        LockedBalance memory _locked = locked[_tokenId];\\r\\n        if (block.timestamp < _locked.end) {\\r\\n            revert LockNotExpiredYet(_locked.end);\\r\\n        }\\r\\n        uint value = uint(int256(_locked.amount));\\r\\n        locked[_tokenId] = LockedBalance(0,0,0,0);\\r\\n        uint supply_before = supply;\\r\\n        supply = supply_before - value;\\r\\n        _checkpoint(_tokenId, _locked, LockedBalance(0,0,0,0));\\r\\n        IERC20(xnf).safeTransfer(owner, value);\\r\\n        IAuction(Auction).claimAllForUser(owner);\\r\\n        _burn(_tokenId);\\r\\n        emit Burn(owner, _tokenId);\\r\\n        emit Withdraw(owner, _tokenId, value);\\r\\n        emit Supply(supply_before, supply_before - value);\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice This function facilitates the withdrawal of all tokens held in expired NFT locks.\\r\\n     */\\r\\n    function withdrawAll()\\r\\n        external\\r\\n        override\\r\\n        nonReentrant\\r\\n    {\\r\\n        uint[] memory tokens = _ownerToIds[msg.sender];\\r\\n        uint XNFamount;\\r\\n        IAuction(Auction).claimAllForUser(msg.sender);\\r\\n        for (uint256 i; i < tokens.length; i++) {\\r\\n            LockedBalance memory _locked = locked[tokens[i]];\\r\\n            if (block.timestamp >= _locked.end) {\\r\\n                uint value = uint(int256(_locked.amount));\\r\\n                XNFamount += value;\\r\\n                locked[tokens[i]] = LockedBalance(0,0,0,0);\\r\\n                uint supply_before = supply;\\r\\n                supply = supply_before - value;\\r\\n                _checkpoint(tokens[i], _locked, LockedBalance(0,0,0,0));\\r\\n                _burn(tokens[i]);\\r\\n                emit Burn(msg.sender, tokens[i]);\\r\\n                emit Withdraw(msg.sender, tokens[i], value);\\r\\n                emit Supply(supply_before, supply_before - value);\\r\\n            }\\r\\n        }\\r\\n        if (XNFamount > 0) {\\r\\n            IERC20(xnf).safeTransfer(msg.sender, XNFamount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Merges multiple NFTs into a single new NFT.\\r\\n     * @param _from Array of NFT IDs to be merged.\\r\\n     */\\r\\n    function merge(uint[] memory _from)\\r\\n        external\\r\\n        override\\r\\n    {\\r\\n        address owner = _checkOwner(_from);\\r\\n        (uint256 maxPeriod) = _getMaxPeriod(_from);\\r\\n        uint value;\\r\\n        uint256 length = _from.length;\\r\\n        IAuction(Auction).claimAllForUser(msg.sender);\\r\\n        for (uint256 i; i < length; i++) {\\r\\n            LockedBalance memory _locked = locked[_from[i]];\\r\\n            value += uint(int256(_locked.amount));\\r\\n            locked[_from[i]] = LockedBalance(0, 0, 0, 0);\\r\\n            _checkpoint(_from[i], _locked, LockedBalance(0, 0, 0, 0));\\r\\n            _burn(_from[i]);\\r\\n            emit Burn(msg.sender, _from[i]);\\r\\n        }\\r\\n        supply -= value;\\r\\n        uint unlock_time = block.timestamp + maxPeriod * _DAY;\\r\\n        uint decayEnd = block.timestamp + maxPeriod * _DAY / 6;\\r\\n        decayEnd = decayEnd / _DAY * _DAY;\\r\\n        ++_tokenID;\\r\\n        uint _tokenId = _tokenID;\\r\\n        _mint(owner, _tokenId);\\r\\n        emit Mint(msg.sender, _tokenId, value, unlock_time);\\r\\n        locked[_tokenId].daysCount = maxPeriod;\\r\\n        _depositFor(_tokenId, value, unlock_time, decayEnd, locked[_tokenId], DepositType.MERGE_TYPE);\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Merges all NFTs that user has into a single new NFT with 1 year lock period.\\r\\n     */\\r\\n    function mergeAll()\\r\\n        external\\r\\n        override\\r\\n    {\\r\\n        uint value;\\r\\n        IAuction(Auction).updateStats(msg.sender);\\r\\n        IAuction(Auction).claimVeXNFForUser(msg.sender);\\r\\n        uint[] memory tokens = _ownerToIds[msg.sender];\\r\\n        uint256 length = tokens.length;\\r\\n        if (length == 0) {\\r\\n            revert NoNFTsToMerge();\\r\\n        }\\r\\n        for (uint256 i; i < length; i++) {\\r\\n            LockedBalance memory _locked = locked[tokens[i]];\\r\\n            value += uint(int256(_locked.amount));\\r\\n            locked[tokens[i]] = LockedBalance(0, 0, 0, 0);\\r\\n            _checkpoint(tokens[i], _locked, LockedBalance(0, 0, 0, 0));\\r\\n            _burn(tokens[i]);\\r\\n            emit Burn(msg.sender, tokens[i]);\\r\\n        }\\r\\n        supply -= value;\\r\\n        uint unlock_time = block.timestamp + 365 * _DAY;\\r\\n        uint decayEnd = block.timestamp + 365 * _DAY / 6;\\r\\n        decayEnd = decayEnd / _DAY * _DAY;\\r\\n        ++_tokenID;\\r\\n        uint _tokenId = _tokenID;\\r\\n        _mint(msg.sender, _tokenId);\\r\\n        emit Mint(msg.sender, _tokenId, value, unlock_time);\\r\\n        locked[_tokenId].daysCount = 365;\\r\\n        _depositFor(_tokenId, value, unlock_time, decayEnd, locked[_tokenId], DepositType.MERGE_TYPE);\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Splits a single NFT into multiple new NFTs with specified amounts.\\r\\n     * @param amounts Array of token amounts for each new NFT.\\r\\n     * @param _tokenId ID of the NFT to be split.\\r\\n     */\\r\\n    function split(\\r\\n        uint[] calldata amounts,\\r\\n        uint _tokenId\\r\\n    )\\r\\n        external\\r\\n        override\\r\\n    {\\r\\n        if (!_isApprovedOrOwner(msg.sender, _tokenId)) {\\r\\n            revert NotApprovedOrOwnerForSplit(msg.sender, _tokenId);\\r\\n        }\\r\\n        address _to = _idToOwner[_tokenId];\\r\\n        LockedBalance memory _locked = locked[_tokenId];\\r\\n        uint value = uint(int256(_locked.amount));\\r\\n        if (value == 0) {\\r\\n            revert LockedAmountZero();\\r\\n        }\\r\\n        supply = supply - value;\\r\\n        uint totalWeight;\\r\\n        uint256 length = amounts.length;\\r\\n        for (uint i; i < length; i++) {\\r\\n            totalWeight += amounts[i];\\r\\n        }\\r\\n        if (totalWeight == 0) {\\r\\n            revert WeightIsZero();\\r\\n        }\\r\\n        locked[_tokenId] = LockedBalance(0, 0, 0, 0);\\r\\n        _checkpoint(_tokenId, _locked, LockedBalance(0, 0, 0, 0));\\r\\n        IAuction(Auction).claimAllForUser(_idToOwner[_tokenId]);\\r\\n        _burn(_tokenId);\\r\\n        emit Burn(msg.sender, _tokenId);\\r\\n        uint unlock_time = _locked.end;\\r\\n        if (unlock_time <= block.timestamp) {\\r\\n            revert LockExpired();\\r\\n        }\\r\\n        uint _value;\\r\\n        for (uint j; j < length; j++) {\\r\\n            ++_tokenID;\\r\\n            _tokenId = _tokenID;\\r\\n            _mint(_to, _tokenId);\\r\\n            _value = value * amounts[j] / totalWeight;\\r\\n            locked[_tokenId].daysCount = _locked.daysCount;\\r\\n            emit Mint(msg.sender, _tokenId, _value, unlock_time);\\r\\n            _depositFor(_tokenId, _value, unlock_time, _locked.decayEnd, locked[_tokenId], DepositType.SPLIT_TYPE);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the token URI of the specified NFT.\\r\\n     * @dev This function requires the specified NFT. It returns the token URI,\\r\\n     * which consists of the base URI concatenated with the token ID and \\\".json\\\" extension.\\r\\n     * @param tokenId The ID of the NFT to query the token URI of.\\r\\n     * @return The token URI of the specified NFT.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        string memory baseURI = _baseURI();\\r\\n        if (_idToOwner[tokenId] == address(0)) {\\r\\n            revert NFTDoesNotExist();\\r\\n        }\\r\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString(), \\\".json\\\")) : \\\"\\\";\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Retrieves the total token supply at a specific timestamp.\\r\\n     * @param timestamp The specific point in time to retrieve the supply.\\r\\n     * @return The total token supply at the given timestamp.\\r\\n     */\\r\\n    function getPastTotalSupply(uint256 timestamp)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint)\\r\\n    {\\r\\n        return totalSupplyAtT(timestamp);\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Retrieves the count of NFTs owned by a specific address.\\r\\n     * @param _owner The address whose NFT count is to be determined.\\r\\n     * @return The number of NFTs owned by the given address.\\r\\n     */\\r\\n    function balanceOf(address _owner)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint)\\r\\n    {\\r\\n        return _balance(_owner);\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Retrieves the approved address for a specific NFT.\\r\\n     * @param _tokenId The unique identifier of the NFT.\\r\\n     * @return The address approved to manage the given NFT.\\r\\n     */\\r\\n    function getApproved(uint _tokenId)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (address)\\r\\n    {\\r\\n        return _idToApprovals[_tokenId];\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Determines if an operator is approved to manage all NFTs of an owner.\\r\\n     * @param _owner The owner of the NFTs.\\r\\n     * @param _operator The potential operator.\\r\\n     * @return True if the operator is approved, false otherwise.\\r\\n     */\\r\\n    function isApprovedForAll(\\r\\n        address _owner,\\r\\n        address _operator\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        return (_ownerToOperators[_owner])[_operator];\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if an address is approved to manage a specific NFT or if it's the owner.\\r\\n     * @param _spender The address in question.\\r\\n     * @param _tokenId The unique identifier of the NFT.\\r\\n     * @return True if the address is approved or is the owner, false otherwise.\\r\\n     */\\r\\n    function isApprovedOrOwner(\\r\\n        address _spender,\\r\\n        uint _tokenId\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _isApprovedOrOwner(_spender, _tokenId);\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Verifies if the contract supports a specific interface.\\r\\n     * @param _interfaceID The ID of the interface in question.\\r\\n     * @return True if the interface is supported, false otherwise.\\r\\n     */\\r\\n    function supportsInterface(bytes4 _interfaceID)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _supportedInterfaces[_interfaceID];\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Retrieves the most recent voting power decrease rate for a specific NFT.\\r\\n     * @param _tokenId The unique identifier of the NFT.\\r\\n     * @return The slope value representing the rate of voting power decrease.\\r\\n     */\\r\\n    function get_last_user_slope(uint _tokenId)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (int128)\\r\\n    {\\r\\n        uint uepoch = user_point_epoch[_tokenId];\\r\\n        return userPointHistory[_tokenId][uepoch].slope;\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Retrieves the timestamp of a specific checkpoint for an NFT.\\r\\n     * @param _tokenId The unique identifier of the NFT.\\r\\n     * @param _idx The index of the user's epoch.\\r\\n     * @return The timestamp of the specified checkpoint.\\r\\n     */\\r\\n    function userPointHistory_ts(\\r\\n        uint _tokenId,\\r\\n        uint _idx\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint)\\r\\n    {\\r\\n        return userPointHistory[_tokenId][_idx].ts;\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Retrieves the end timestamp of a lock for a specific NFT.\\r\\n     * @param _tokenId The unique identifier of the NFT.\\r\\n     * @return The timestamp when the NFT's lock expires.\\r\\n     */\\r\\n    function lockedEnd(uint _tokenId)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint)\\r\\n    {\\r\\n        return locked[_tokenId].end;\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Retrieves the balance of a specific NFT at a given timestamp.\\r\\n     * @param _tokenId The unique identifier of the NFT.\\r\\n     * @param _t The specific point in time to retrieve the balance.\\r\\n     * @return The balance of the NFT at the given timestamp.\\r\\n     */\\r\\n    function balanceOfNFTAt(\\r\\n        uint _tokenId,\\r\\n        uint _t\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint)\\r\\n    {\\r\\n        return _balanceOfNFT(_tokenId, _t);\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Retrieves the combined balance of all NFTs owned by an address at a specific timestamp.\\r\\n     * @param _user The owner's address.\\r\\n     * @param _t The specific point in time to retrieve the total balance.\\r\\n     * @return totalBalanceOf The combined balance of all NFTs owned by the address at the given timestamp.\\r\\n     */\\r\\n    function totalBalanceOfNFTAt(\\r\\n        address _user,\\r\\n        uint _t\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint256 totalBalanceOf)\\r\\n    {\\r\\n        uint256 length = _ownerToIds[_user].length;\\r\\n        for (uint256 i; i < length; i++) {\\r\\n            totalBalanceOf += _balanceOfNFT(_ownerToIds[_user][i], _t);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Retrieves a list of NFT IDs owned by a specific address.\\r\\n     * @param _user The address whose NFT IDs are to be listed.\\r\\n     * @return An array of NFT IDs owned by the specified address.\\r\\n     */\\r\\n    function userToIds(address _user)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        return _ownerToIds[_user];\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Retrieves the current total supply of tokens.\\r\\n     * @return The current total token supply.\\r\\n     */\\r\\n    function totalSupply()\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint)\\r\\n    {\\r\\n        return totalSupplyAtT(block.timestamp);\\r\\n    }\\r\\n\\r\\n    /// --------------------------------- PUBLIC FUNCTIONS ---------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Grants or changes approval for an address to manage a specific NFT.\\r\\n     * @param _approved The address to be granted approval.\\r\\n     * @param _tokenId The ID of the NFT to be approved.\\r\\n     */\\r\\n    function approve(\\r\\n        address _approved,\\r\\n        uint _tokenId\\r\\n    )\\r\\n        public\\r\\n        override\\r\\n    {\\r\\n        address owner = _idToOwner[_tokenId];\\r\\n        if (owner == address(0)) {\\r\\n            revert TokenNotOwned(_tokenId);\\r\\n        }\\r\\n        if (_approved == owner) {\\r\\n            revert ApprovingCurrentOwner(_approved, _tokenId);\\r\\n        }\\r\\n        bool senderIsOwner = (owner == msg.sender);\\r\\n        bool senderIsApprovedForAll = (_ownerToOperators[owner])[msg.sender];\\r\\n        if (!senderIsOwner && !senderIsApprovedForAll) {\\r\\n            revert NotOwnerOrOperator(msg.sender, _tokenId);\\r\\n        }\\r\\n        _idToApprovals[_tokenId] = _approved;\\r\\n        emit Approval(owner, _approved, _tokenId);\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Safely transfers an NFT to another address, ensuring the recipient is capable of receiving it.\\r\\n     * @param _from The current owner of the NFT.\\r\\n     * @param _to The address to receive the NFT. If it's a contract, it must implement `onERC721Received`.\\r\\n     * @param _tokenId The ID of the NFT to be transferred.\\r\\n     * @param _data Additional data to send with the transfer, used in `onERC721Received` if `_to` is a contract.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint _tokenId,\\r\\n        bytes memory _data\\r\\n    )\\r\\n        public\\r\\n        override\\r\\n    {\\r\\n        _transferFrom(_from, _to, _tokenId, msg.sender);\\r\\n        if (_isContract(_to)) {\\r\\n            try IERC721Receiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data) returns (bytes4 response) {\\r\\n                if (response != IERC721Receiver(_to).onERC721Received.selector) {\\r\\n                    revert InvalidERC721Receiver();\\r\\n                }\\r\\n            } catch (bytes memory reason) {\\r\\n                if (reason.length == 0) {\\r\\n                    revert MissingERC721Receiver();\\r\\n                }\\r\\n                else {\\r\\n                    assembly {\\r\\n                        revert(add(32, reason), mload(reason))\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Retrieves the owner of a specific NFT.\\r\\n     * @param _tokenId The ID of the NFT whose owner is to be determined.\\r\\n     * @return The address of the owner of the specified NFT.\\r\\n     */\\r\\n    function ownerOf(uint _tokenId)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (address)\\r\\n    {\\r\\n        return _idToOwner[_tokenId];\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates the total voting power at a specific timestamp.\\r\\n     * @param t The timestamp at which to determine the total voting power.\\r\\n     * @return The total voting power at the specified timestamp.\\r\\n     */\\r\\n    function totalSupplyAtT(uint t)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint)\\r\\n    {\\r\\n        uint _epoch = epoch;\\r\\n        Point memory last_point = pointHistory[_epoch];\\r\\n        return _supply_at(last_point, t);\\r\\n    }\\r\\n\\r\\n    /// -------------------------------- INTERNAL FUNCTIONS --------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Clears the approval of a specific NFT.\\r\\n     * @param _owner The address of the current owner of the NFT.\\r\\n     * @param _tokenId The unique identifier of the NFT.\\r\\n     */\\r\\n    function _clearApproval(\\r\\n        address _owner,\\r\\n        uint _tokenId\\r\\n    ) internal {\\r\\n        if (_idToOwner[_tokenId] != _owner) {\\r\\n            revert NotOwnerOfNFT();\\r\\n        }\\r\\n        if (_idToApprovals[_tokenId] != address(0)) {\\r\\n            _idToApprovals[_tokenId] = address(0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Transfers an NFT from one address to another.\\r\\n     * @param _from The address of the current owner of the NFT.\\r\\n     * @param _to The address to receive the NFT.\\r\\n     * @param _tokenId The unique identifier of the NFT.\\r\\n     * @param _sender The address initiating the transfer.\\r\\n     */\\r\\n    function _transferFrom(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint _tokenId,\\r\\n        address _sender\\r\\n    ) internal {\\r\\n        if (!_isApprovedOrOwner(_sender, _tokenId)) {\\r\\n            revert NotApprovedOrOwner(_sender, _tokenId);\\r\\n        }\\r\\n        IAuction(Auction).updateStats(_from);\\r\\n        IAuction(Auction).updateStats(_to);\\r\\n        _clearApproval(_from, _tokenId);\\r\\n        _removeTokenFrom(_from, _tokenId);\\r\\n        _addTokenTo(_to, _tokenId);\\r\\n        emit Transfer(_from, _to, _tokenId);\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Assigns ownership of an NFT to a specific address.\\r\\n     * @param _to The address to receive the NFT.\\r\\n     * @param _tokenId The unique identifier of the NFT.\\r\\n     */\\r\\n    function _addTokenTo(\\r\\n        address _to,\\r\\n        uint _tokenId\\r\\n    ) internal {\\r\\n        if (_idToOwner[_tokenId] != address(0)) {\\r\\n            revert NFTAlreadyHasOwner();\\r\\n        }\\r\\n        _idToOwner[_tokenId] = _to;\\r\\n        _ownerToIds[_to].push(_tokenId);\\r\\n        _ownerToNFTokenCount[_to] += 1;\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Mints a new NFT and assigns it to a specific address.\\r\\n     * @param _to The address to receive the minted NFT.\\r\\n     * @param _tokenId The unique identifier for the new NFT.\\r\\n     * @return A boolean indicating if the minting was successful.\\r\\n     */\\r\\n    function _mint(\\r\\n        address _to,\\r\\n        uint _tokenId\\r\\n    )\\r\\n        internal\\r\\n        returns (bool)\\r\\n    {\\r\\n        if (_to == address(0)) {\\r\\n            revert ZeroAddressMint();\\r\\n        }\\r\\n        _addTokenTo(_to, _tokenId);\\r\\n        if (_isContract(_to)) {\\r\\n            try IERC721Receiver(_to).onERC721Received(address(0), _to, _tokenId, \\\"\\\") returns (bytes4 response) {\\r\\n                if (response != IERC721Receiver(_to).onERC721Received.selector) {\\r\\n                    revert InvalidERC721Receiver();\\r\\n                }\\r\\n            } catch (bytes memory reason) {\\r\\n                if (reason.length == 0) {\\r\\n                    revert MissingERC721Receiver();\\r\\n                }\\r\\n                else {\\r\\n                    assembly {\\r\\n                        revert(add(32, reason), mload(reason))\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        emit Transfer(address(0), _to, _tokenId);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Removes an NFT from its owner, effectively clearing its ownership.\\r\\n     * @param _from The address of the current owner of the NFT.\\r\\n     * @param _tokenId The unique identifier of the NFT.\\r\\n     */\\r\\n    function _removeTokenFrom(\\r\\n        address _from,\\r\\n        uint _tokenId\\r\\n    ) internal {\\r\\n        if (_idToOwner[_tokenId] != _from) {\\r\\n            revert NotTokenOwner(_from, _tokenId);\\r\\n        }\\r\\n        _idToOwner[_tokenId] = address(0);\\r\\n        uint256 length = _ownerToIds[_from].length;\\r\\n        if (length == 1) {\\r\\n            _ownerToIds[_from].pop();\\r\\n        } else {\\r\\n             for (uint256 i; i < length; i++) {\\r\\n                if (_ownerToIds[_from][i] == _tokenId) {\\r\\n                    if (i != length - 1) {\\r\\n                        uint256 tokenIdToChange = _ownerToIds[_from][length - 1];\\r\\n                        _ownerToIds[_from][i] = tokenIdToChange;\\r\\n                    }\\r\\n                    _ownerToIds[_from].pop();\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        _ownerToNFTokenCount[_from] -= 1;\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Permanently destroys an NFT.\\r\\n     * @param _tokenId The unique identifier of the NFT to be burned.\\r\\n     */\\r\\n    function _burn(uint _tokenId) internal {\\r\\n        if (!_isApprovedOrOwner(msg.sender, _tokenId)) {\\r\\n            revert NotTokenOwnerOrApproved(msg.sender, _tokenId);\\r\\n        }\\r\\n        address owner = ownerOf(_tokenId);\\r\\n        _clearApproval(owner, _tokenId);\\r\\n        _removeTokenFrom(owner, _tokenId);\\r\\n        emit Transfer(owner, address(0), _tokenId);\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Records data to a checkpoint for tracking historical data.\\r\\n     * @param _tokenId The unique identifier of the NFT. If 0, no user checkpoint is created.\\r\\n     * @param old_locked The previous locked balance details.\\r\\n     * @param new_locked The new locked balance details.\\r\\n     */\\r\\n    function _checkpoint(\\r\\n        uint _tokenId,\\r\\n        LockedBalance memory old_locked,\\r\\n        LockedBalance memory new_locked\\r\\n    ) internal {\\r\\n        Point memory u_old;\\r\\n        Point memory u_new;\\r\\n        uint _epoch = epoch;\\r\\n        int128 old_dslope = 0;\\r\\n        int128 new_dslope = 0;\\r\\n        if (_tokenId != 0) {\\r\\n            if (old_locked.decayEnd > block.timestamp && old_locked.amount != 0) {\\r\\n                u_old.slope = old_locked.amount * 6 / _iMAXTIME;\\r\\n                u_old.bias = u_old.slope * int128(int256(old_locked.decayEnd) - int256(block.timestamp));\\r\\n            }\\r\\n            if (new_locked.decayEnd > block.timestamp && new_locked.amount != 0) {\\r\\n                u_new.slope = new_locked.amount * 6 / _iMAXTIME;\\r\\n                u_new.bias = u_new.slope * int128(int256(new_locked.decayEnd) - int256(block.timestamp));\\r\\n            }\\r\\n            old_dslope = slope_changes[old_locked.decayEnd];\\r\\n            if (new_locked.decayEnd != 0) {\\r\\n                if (new_locked.decayEnd == old_locked.decayEnd) {\\r\\n                    new_dslope = old_dslope;\\r\\n                } else {\\r\\n                    new_dslope = slope_changes[new_locked.decayEnd];\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        Point memory last_point = Point({bias: 0, slope: 0, ts: block.timestamp});\\r\\n        if (_epoch != 0) {\\r\\n            last_point = pointHistory[_epoch];\\r\\n        }\\r\\n        uint last_checkpoint = last_point.ts;\\r\\n        {\\r\\n            uint t_i = (last_checkpoint / _DAY) * _DAY;\\r\\n            for (uint i; i < 61; ++i) {\\r\\n                t_i += _DAY;\\r\\n                int128 d_slope = 0;\\r\\n                if (t_i > block.timestamp) {\\r\\n                    t_i = block.timestamp;\\r\\n                } else {\\r\\n                    d_slope = slope_changes[t_i];\\r\\n                }\\r\\n                last_point.bias -= last_point.slope * int128(int256(t_i) - int256(last_checkpoint));\\r\\n                last_point.slope += d_slope;\\r\\n                if (last_point.bias < 0) {\\r\\n                    last_point.bias = 0;\\r\\n                }\\r\\n                if (last_point.slope < 0) {\\r\\n                    last_point.slope = 0;\\r\\n                }\\r\\n                last_checkpoint = t_i;\\r\\n                last_point.ts = t_i;\\r\\n                _epoch += 1;\\r\\n                if (t_i != block.timestamp) {\\r\\n                    pointHistory[_epoch] = last_point;\\r\\n                } else {\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        epoch = _epoch;\\r\\n        if (_tokenId != 0) {\\r\\n            last_point.slope += (u_new.slope - u_old.slope);\\r\\n            last_point.bias += (u_new.bias - u_old.bias);\\r\\n            if (last_point.slope < 0) {\\r\\n                last_point.slope = 0;\\r\\n            }\\r\\n            if (last_point.bias < 0) {\\r\\n                last_point.bias = 0;\\r\\n            }\\r\\n        }\\r\\n        pointHistory[_epoch] = last_point;\\r\\n        if (_tokenId != 0) {\\r\\n            if (old_locked.decayEnd > block.timestamp) {\\r\\n                old_dslope += u_old.slope;\\r\\n                if (new_locked.decayEnd == old_locked.decayEnd) {\\r\\n                    old_dslope -= u_new.slope;\\r\\n                }\\r\\n                slope_changes[old_locked.decayEnd] = old_dslope;\\r\\n            }\\r\\n            if (new_locked.decayEnd > block.timestamp) {\\r\\n                if (new_locked.decayEnd > old_locked.decayEnd) {\\r\\n                    new_dslope -= u_new.slope;\\r\\n                    slope_changes[new_locked.decayEnd] = new_dslope;\\r\\n                }\\r\\n            }\\r\\n            uint user_epoch = user_point_epoch[_tokenId] + 1;\\r\\n            user_point_epoch[_tokenId] = user_epoch;\\r\\n            u_new.ts = block.timestamp;\\r\\n            userPointHistory[_tokenId][user_epoch] = u_new;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Deposits and locks tokens associated with an NFT.\\r\\n     * @dev This function handles the internal logic for depositing and locking tokens. It updates the user's\\r\\n     * locked balance, the total supply of locked tokens, and emits the appropriate events. It also\\r\\n     * ensures the tokens are transferred into the contract when needed.\\r\\n     * @param _tokenId The unique identifier of the NFT that holds the lock.\\r\\n     * @param _value The amount of tokens to deposit.\\r\\n     * @param unlock_time The timestamp when the tokens should be unlocked.\\r\\n     * @param decayEnd The timestamp when the decay period ends, relevant for certain types of locks.\\r\\n     * @param locked_balance The previous locked balance details.\\r\\n     * @param deposit_type The type of deposit being made, defined by the DepositType enum.\\r\\n     */\\r\\n    function _depositFor(\\r\\n        uint _tokenId,\\r\\n        uint _value,\\r\\n        uint unlock_time,\\r\\n        uint decayEnd,\\r\\n        LockedBalance memory locked_balance,\\r\\n        DepositType deposit_type\\r\\n    ) internal {\\r\\n        LockedBalance memory _locked = locked_balance;\\r\\n        uint supply_before = supply;\\r\\n        supply = supply_before + _value;\\r\\n        LockedBalance memory old_locked;\\r\\n        (old_locked.amount, old_locked.end, old_locked.decayEnd) = (_locked.amount, _locked.end, _locked.decayEnd);\\r\\n        _locked.amount += int128(int256(_value));\\r\\n        if (unlock_time != 0) {\\r\\n            _locked.end = unlock_time;\\r\\n            _locked.decayEnd = decayEnd;\\r\\n        }\\r\\n        locked[_tokenId] = _locked;\\r\\n        _checkpoint(_tokenId, old_locked, _locked);\\r\\n        address from = msg.sender;\\r\\n        if (_value != 0 && deposit_type != DepositType.MERGE_TYPE && deposit_type != DepositType.SPLIT_TYPE) {\\r\\n            IERC20(xnf).safeTransferFrom(from, address(this), _value);\\r\\n        }\\r\\n        emit Deposit(from, _tokenId, _value, _locked.end, deposit_type);\\r\\n        emit Supply(supply_before, supply_before + _value);\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Creates a lock by depositing tokens for a specified duration.\\r\\n     * @param _value The amount of tokens to deposit.\\r\\n     * @param _countOfDays The duration (in days) to lock the tokens.\\r\\n     * @param _to The address for which the lock is being created.\\r\\n     * @return The unique identifier of the newly created NFT representing the lock.\\r\\n     */\\r\\n    function _createLock(\\r\\n        uint _value,\\r\\n        uint _countOfDays,\\r\\n        address _to\\r\\n    )\\r\\n        internal\\r\\n        returns (uint)\\r\\n    {\\r\\n        uint unlock_time = block.timestamp + _countOfDays * _DAY;\\r\\n        uint decayEnd = ((block.timestamp + _countOfDays * _DAY / 6) /_DAY) * _DAY;\\r\\n        if (_value == 0) {\\r\\n            revert ZeroValueDeposit();\\r\\n        }\\r\\n        if (unlock_time < block.timestamp + _WEEK) {\\r\\n            revert LockDurationTooShort();\\r\\n        }\\r\\n        if (unlock_time > block.timestamp + _MAXTIME) {\\r\\n            revert LockDurationTooLong();\\r\\n        }\\r\\n        ++_tokenID;\\r\\n        uint _tokenId = _tokenID;\\r\\n        _mint(_to, _tokenId);\\r\\n        emit Mint(msg.sender, _tokenId, _value, unlock_time);\\r\\n        locked[_tokenId].daysCount = _countOfDays;\\r\\n        _depositFor(_tokenId, _value, unlock_time, decayEnd, locked[_tokenId], DepositType.CREATE_LOCK_TYPE);\\r\\n        return _tokenId;\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if a given address is authorised to transfer a specific NFT.\\r\\n     * @param _spender The address attempting the transfer.\\r\\n     * @param _tokenId The unique identifier of the NFT.\\r\\n     * @return A boolean indicating if the spender is authorized.\\r\\n     */\\r\\n    function _isApprovedOrOwner(\\r\\n        address _spender,\\r\\n        uint _tokenId\\r\\n    )\\r\\n        internal\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        address owner = _idToOwner[_tokenId];\\r\\n        bool spenderIsOwner = owner == _spender;\\r\\n        bool spenderIsApproved = _spender == _idToApprovals[_tokenId];\\r\\n        bool spenderIsApprovedForAll = (_ownerToOperators[owner])[_spender];\\r\\n        return spenderIsOwner || spenderIsApproved || spenderIsApprovedForAll;\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Retrieves the number of NFTs owned by a specific address.\\r\\n     * @param _owner The address whose balance is being queried.\\r\\n     * @return The number of NFTs owned by the address.\\r\\n     */\\r\\n    function _balance(address _owner)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint)\\r\\n    {\\r\\n        return _ownerToNFTokenCount[_owner];\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Retrieves the voting power of a specific NFT at a given epoch time.\\r\\n     * @param _tokenId The unique identifier of the NFT.\\r\\n     * @param _t The epoch time for which the voting power is being queried.\\r\\n     * @return The voting power of the NFT at the specified time.\\r\\n     */\\r\\n    function _balanceOfNFT(\\r\\n        uint _tokenId,\\r\\n        uint _t\\r\\n    )\\r\\n        internal\\r\\n        view\\r\\n        returns (uint)\\r\\n    {\\r\\n        uint _epoch = user_point_epoch[_tokenId];\\r\\n        if (_epoch == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        else {\\r\\n            Point memory last_point = userPointHistory[_tokenId][_epoch];\\r\\n            if (_t < last_point.ts) {\\r\\n                uint256 left = 0;\\r\\n                uint256 right = _epoch;\\r\\n                while (left <= right) {\\r\\n                    uint256 mid = (left + right + 1) / 2;\\r\\n                    last_point = userPointHistory[_tokenId][mid];\\r\\n                    Point memory last_point_right = userPointHistory[_tokenId][mid + 1];\\r\\n                    if (last_point.ts <= _t && _t < last_point_right.ts) {\\r\\n                        break;\\r\\n                    }\\r\\n                    else if (_t < last_point.ts) {\\r\\n                        if (mid == 0)\\r\\n                            return 0;\\r\\n                        right = mid - 1;\\r\\n                    } else {\\r\\n                        left = mid + 1;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n            last_point.bias -= last_point.slope * int128(int256(_t) - int256(last_point.ts));\\r\\n            if (last_point.bias < 0) {\\r\\n                last_point.bias = 0;\\r\\n            }\\r\\n            return uint(int256(last_point.bias));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Verifies that the msg.sender is the owner of all provided NFT IDs.\\r\\n     * @param _ids An array of NFT IDs to verify ownership.\\r\\n     * @return owner The address of the owner if all NFTs in the list are owned by the msg.sender.\\r\\n     */\\r\\n    function _checkOwner(uint[] memory _ids)\\r\\n        internal\\r\\n        view\\r\\n        returns (address owner)\\r\\n    {\\r\\n        uint256 count;\\r\\n        uint256 length = _ids.length;\\r\\n        for (uint256 i; i < length; i++) {\\r\\n            if (ownerOf(_ids[i]) == msg.sender) {\\r\\n                count++;\\r\\n            }\\r\\n        }\\r\\n        if (count != length) {\\r\\n            revert NotAllTokensOwnedBySender();\\r\\n        }\\r\\n        owner = _idToOwner[_ids[0]];\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Determines the longest lock duration from a list of NFT IDs.\\r\\n     * @param _ids An array of NFT IDs to check.\\r\\n     * @return maxPeriod The maximum lock duration (in days) found among the provided NFTs.\\r\\n     */\\r\\n    function _getMaxPeriod(uint[] memory _ids)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256 maxPeriod)\\r\\n    {\\r\\n        maxPeriod = locked[_ids[0]].daysCount;\\r\\n        uint256 length = _ids.length;\\r\\n        for (uint256 i = 1; i < length; i++) {\\r\\n            if (maxPeriod < locked[_ids[i]].daysCount) {\\r\\n                maxPeriod = locked[_ids[i]].daysCount;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if a given address is associated with a contract.\\r\\n     * @param account The address to verify.\\r\\n     * @return A boolean indicating whether the address is a contract (true) or an externally owned account (false).\\r\\n     */\\r\\n    function _isContract(address account)\\r\\n        internal\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        uint size;\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size != 0;\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Computes the total voting power at a specific past time using a given point as a reference.\\r\\n     * @param point The reference point containing bias and slope values.\\r\\n     * @param t The epoch time for which the total voting power is being calculated.\\r\\n     * @return The total voting power at the specified time.\\r\\n     */\\r\\n    function _supply_at(\\r\\n        Point memory point,\\r\\n        uint t\\r\\n    )\\r\\n        internal\\r\\n        view\\r\\n        returns (uint)\\r\\n    {\\r\\n        Point memory last_point = point;\\r\\n        if (t < last_point.ts) {\\r\\n            uint256 left = 0;\\r\\n            uint256 right = epoch;\\r\\n            while (left <= right) {\\r\\n                uint256 mid = (left + right + 1) / 2;\\r\\n                last_point = pointHistory[mid];\\r\\n                Point memory last_point_right = pointHistory[mid + 1];\\r\\n                if (last_point.ts <= t && t < last_point_right.ts) {\\r\\n                    break;\\r\\n                }\\r\\n                else if (t < last_point.ts) {\\r\\n                    if (mid == 0)\\r\\n                        return 0;\\r\\n                    right = mid - 1;\\r\\n                } else {\\r\\n                    left = mid + 1;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        uint t_i = (last_point.ts / _DAY) * _DAY;\\r\\n        for (uint i; i < 61; ++i) {\\r\\n            t_i += _DAY;\\r\\n            int128 d_slope = 0;\\r\\n            if (t_i > t) {\\r\\n                t_i = t;\\r\\n            } else {\\r\\n                d_slope = slope_changes[t_i];\\r\\n            }\\r\\n            last_point.bias -= last_point.slope * int128(int256(t_i) - int256(last_point.ts));\\r\\n            if (t_i == t) {\\r\\n                break;\\r\\n            }\\r\\n            last_point.slope += d_slope;\\r\\n            last_point.ts = t_i;\\r\\n        }\\r\\n        if (last_point.bias < 0) {\\r\\n            last_point.bias = 0;\\r\\n        }\\r\\n        return uint(uint128(last_point.bias));\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the base URI for the veXNF NFT contract.\\r\\n     * @return Base URI for the veXNF NFT contract.\\r\\n     * @dev This function is internal and pure, it's used to get the base URI for the veXNF NFT contract.\\r\\n     */\\r\\n    function _baseURI()\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return \\\"https://xnf-info.xenify.io/arbitrum/metadata/\\\";\\r\\n    }\\r\\n\\r\\n    /// ------------------------------------------------------------------------------------- \\\\\\\\\\\\\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ApprovingCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovingToSameAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"ContractInitialised\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidERC721Receiver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockDurationTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockDurationTooShort\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockExpired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedEnd\",\"type\":\"uint256\"}],\"name\":\"LockNotExpiredYet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockedAmountZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MissingERC721Receiver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NFTAlreadyHasOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NFTDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoNFTsToMerge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAllTokensOwnedBySender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NotApprovedOrOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NotApprovedOrOwnerForSplit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NotApprovedOrOwnerForWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwnerOfNFT\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NotOwnerOrOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"expectedOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NotTokenOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NotTokenOwnerOrApproved\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenNotOwned\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTime\",\"type\":\"uint256\"}],\"name\":\"UnlockTimeExceedsMax\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedEnd\",\"type\":\"uint256\"}],\"name\":\"UnlockTimeTooEarly\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTime\",\"type\":\"uint256\"}],\"name\":\"UnlockTimeTooShort\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WeightIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressMint\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroValueDeposit\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"locktime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum veXNF.DepositType\",\"name\":\"deposit_type\",\"type\":\"uint8\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockEnd\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"Supply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Auction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_t\",\"type\":\"uint256\"}],\"name\":\"balanceOfNFTAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_countOfDays\",\"type\":\"uint256\"}],\"name\":\"createLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_countOfDays\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"createLockFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getPastTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"get_last_user_slope\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_countOfDays\",\"type\":\"uint256\"}],\"name\":\"increaseUnlockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_xnf\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_Auction\",\"type\":\"address\"}],\"name\":\"initialise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isApprovedOrOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"amount\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decayEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daysCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"lockedEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_from\",\"type\":\"uint256[]\"}],\"name\":\"merge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mergeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pointHistory\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"bias\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"slope\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slope_changes\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"split\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_t\",\"type\":\"uint256\"}],\"name\":\"totalBalanceOfNFTAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBalanceOf\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAtT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userPointHistory\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"bias\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"slope\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"userPointHistory_ts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userToIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"user_point_epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xnf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "veXNF", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "2", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}