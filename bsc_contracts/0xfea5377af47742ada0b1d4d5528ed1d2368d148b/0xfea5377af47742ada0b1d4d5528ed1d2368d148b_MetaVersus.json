{"SourceCode": "/**\r\nMetaVersus\r\n*/\r\n\r\n//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.9;\r\n\r\n/**\r\n * BEP20 standard interface\r\n */\r\n\r\ninterface BEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * Basic access control mechanism\r\n */\r\n\r\nabstract contract Ownable {\r\n    address internal owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"!OWNER\"); _;\r\n    }\r\n\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    function getUnlockTime() public view returns (uint256) {\r\n        return _lockTime;\r\n    }\r\n\r\n    function Ownershiplock(uint256 time) public virtual onlyOwner {\r\n        _previousOwner = owner;\r\n        owner = address(0);\r\n        _lockTime = block.timestamp + time;\r\n        emit OwnershipTransferred(owner, address(0));\r\n    }\r\n\r\n    function Ownershipunlock() public virtual {\r\n        require(_previousOwner == msg.sender, \"You don't have permission to unlock\");\r\n        require(block.timestamp > _lockTime , \"Contract is locked until 7 days\");\r\n        emit OwnershipTransferred(owner, _previousOwner);\r\n        owner = _previousOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * Router Interfaces\r\n */\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n/**\r\n * Contract Code\r\n */\r\n\r\ncontract MetaVersus is BEP20, Ownable {\r\n\r\n    // Events\r\n    event AutoLiquify(uint256 amountBNB, uint256 amountTokens);\r\n    event SetMaxWallet(uint256 maxWalletToken);\r\n    event SetMaxTxAmount(uint256 maxTxAmount);\r\n    event SetBuyFees(uint256 liquidityFee, uint256 marketingFee, uint256 buybackFee, uint256 totalFee);\r\n    event SetSellFees(uint256 liquidityFee, uint256 marketingFee, uint256 buybackFee, uint256 totalFee);\r\n    event SetSwapBackSettings(bool enabled, uint256 swapThreshold);\r\n    event SetTargetLiquidity(uint256 PercentageLiquidity);\r\n    event SetIsFeeExempt(address holder, bool enabled);\r\n    event SetIsTxLimitExempt(address holder, bool enabled);\r\n    event SetFeeReceivers(address marketingReceiver, address buybackFeeReceiver);\r\n    event StuckBalanceSent(uint256 amountBNB, address recipient);\r\n    event ForeignTokenTransfer(address tokenAddress, uint256 quantity);\r\n\r\n    // Mappings\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n    mapping (address => bool) isFeeExempt;\r\n    mapping (address => bool) isTxLimitExempt;\r\n\r\n    // Basic Contract Info\r\n    string constant _name = \"MetaVersus\";\r\n    string constant _symbol = \"METAVS\";\r\n    uint8 constant _decimals = 9;\r\n\r\n    // Supply\r\n    uint256 _totalSupply = 10000000 * (10 ** _decimals); // 10,000,000 Tokens\r\n    uint256 _burntSupply = (_totalSupply * 0) /100;\r\n    uint256 _liqSupply = (_totalSupply - _burntSupply);\r\n\r\n    // Max wallet\r\n    uint256 public _maxWalletSize = (_totalSupply * 1) / 100;  // 1% MaxWallet - 200,000 Tokens\r\n    uint256 public _maxTxAmount = (_totalSupply * 1) / 200;  // 0.5% Max Transaction - 100,000 Tokens  \r\n\r\n    // Detailed Fees\r\n    uint256 liquidityFee;\r\n    uint256 marketingFee;\r\n    uint256 buybackFee;\r\n    uint256 totalFee;\r\n\r\n    uint256 _buyLiquidityFee = 3;\r\n    uint256 _buyMarketingFee = 5;\r\n    uint256 _buyBuybackFee = 3;\r\n    uint256 _buyTotalFee = _buyLiquidityFee + _buyBuybackFee + _buyMarketingFee;\r\n\r\n    uint256 _initialSellLiquidityFee = 3;\r\n    uint256 _initialSellMarketingFee = 5;\r\n    uint256 _initialSellBuybackFee = 3;\r\n    uint256 _initialSellTotalFee = _initialSellBuybackFee + _initialSellMarketingFee + _initialSellLiquidityFee;\r\n\r\n    uint256 public _sellLiquidityFee;\r\n    uint256 public _sellMarketingFee;\r\n    uint256 public _sellBuybackFee;\r\n    uint256 public _sellTotalFee; \r\n    \r\n    // Fee receivers\r\n    address private marketingFeeReceiver = 0x014F118e6DF3aFb237aFa3212444B300E92E1bd0;\r\n    address private buybackFeeReceiver = 0x014F118e6DF3aFb237aFa3212444B300E92E1bd0;\r\n    address constant private DEAD = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    // Dynamic Liquidity Fee\r\n    uint256 targetLiquidity = 25;\r\n\r\n    // Router\r\n    IDEXRouter public router;\r\n    address public pair;\r\n    \r\n    uint256 public launchedAt;\r\n\r\n    bool public swapEnabled = true;\r\n    uint256 public swapThreshold = _totalSupply / 1000 * 1; // 0.1% \r\n\r\n    bool inSwap;\r\n    modifier swapping() { inSwap = true; _; inSwap = false; }\r\n\r\n    constructor () Ownable(msg.sender) {\r\n        router = IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E  );\r\n        pair = IDEXFactory(router.factory()).createPair(address(this), router.WETH());\r\n        _allowances[address(this)][address(router)] = type(uint256).max;\r\n        \r\n        address _owner = owner;\r\n        address _DEAD = DEAD;\r\n\r\n        isFeeExempt[_owner] = true;\r\n        isFeeExempt[marketingFeeReceiver] = true;\r\n        isFeeExempt[buybackFeeReceiver] = true;\r\n\r\n        isTxLimitExempt[_owner] = true;\r\n        isTxLimitExempt[marketingFeeReceiver] = true;\r\n        isTxLimitExempt[buybackFeeReceiver] = true;\r\n\r\n        _balances[_owner] = _liqSupply;\r\n        _balances[_DEAD] = _burntSupply;\r\n        emit Transfer(address(0), _owner, _liqSupply);\r\n        emit Transfer(address(0), _DEAD, _burntSupply);\r\n    }\r\n\r\n    receive() external payable { }\r\n\r\n    // Basic Internal Functions\r\n\r\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) { return owner; }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, type(uint256).max);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if(_allowances[sender][msg.sender] != type(uint256).max){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - (amount);\r\n        }\r\n\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        if(inSwap){ return _basicTransfer(sender, recipient, amount); }\r\n        \r\n        // Checks max transaction limit and actual sell fees\r\n        getActualSellFee();\r\n        checkTxLimit(sender, amount);\r\n\r\n        if (sender != owner &&\r\n            recipient != owner &&\r\n            recipient != pair) {\r\n            \r\n            require(isTxLimitExempt[recipient] || _balances[recipient] + amount <= _maxWalletSize, \"Transfer amount exceeds the MaxWallet size.\");\r\n        }\r\n\r\n        // Buy Taxes\r\n            if(sender == pair){\r\n                liquidityFee = _buyLiquidityFee;\r\n                marketingFee = _buyMarketingFee;\r\n                buybackFee = _buyBuybackFee;\r\n                totalFee = _buyTotalFee;\r\n            }\r\n\r\n        // Sell Taxes\r\n            if(recipient == pair){\r\n                liquidityFee = _sellLiquidityFee;\r\n                marketingFee = _sellMarketingFee;\r\n                buybackFee = _sellBuybackFee;\r\n                totalFee = _sellTotalFee;\r\n            }\r\n        \r\n        //Exchange tokens\r\n        if(shouldSwapBack()){ swapBack(); }\r\n\r\n        if(!launched() && recipient == pair){ require(_balances[sender] > 0); launch(); }\r\n\r\n        _balances[sender] = _balances[sender] - amount;\r\n\r\n        //Check if should Take Fee\r\n        uint256 amountReceived = (!shouldTakeFee(sender) || !shouldTakeFee(recipient)) ? amount : takeFee(sender, amount);\r\n        _balances[recipient] = _balances[recipient] + (amountReceived);\r\n\r\n        emit Transfer(sender, recipient, amountReceived);\r\n        return true;\r\n    }\r\n    \r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender] - amount;\r\n        _balances[recipient] = _balances[recipient] + amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    // Internal Functions\r\n\r\n    function checkTxLimit(address sender, uint256 amount) internal view {\r\n        require(amount <= _maxTxAmount || isTxLimitExempt[sender], \"TX Limit Exceeded\");\r\n    }\r\n\r\n    function shouldTakeFee(address sender) internal view returns (bool) {\r\n        return !isFeeExempt[sender];\r\n    }\r\n\r\n    function getActualSellFee() internal {\r\n        uint256 days_since_start = (block.timestamp - launchedAt) / 1 days;\r\n        if(days_since_start > 0 &&\r\n           days_since_start < 10) {\r\n            _sellLiquidityFee = _initialSellLiquidityFee;\r\n            _sellBuybackFee = _initialSellBuybackFee - days_since_start;\r\n            _sellMarketingFee = _initialSellMarketingFee - days_since_start;\r\n            _sellTotalFee = _sellMarketingFee + _sellLiquidityFee + _sellBuybackFee;\r\n        }\r\n    }\r\n\r\n    function takeFee(address sender, uint256 amount) internal returns (uint256) {\r\n        uint256 feeAmount = (amount * totalFee) / 100;\r\n        \r\n        _balances[address(this)] = _balances[address(this)] + (feeAmount);\r\n        emit Transfer(sender, address(this), feeAmount);\r\n\r\n        return amount - (feeAmount);\r\n    }\r\n\r\n    function shouldSwapBack() internal view returns (bool) {\r\n        return msg.sender != pair\r\n        && !inSwap\r\n        && swapEnabled\r\n        && _balances[address(this)] >= swapThreshold;\r\n    }\r\n\r\n    function swapBack() internal swapping {       \r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        uint256 dynamicLiquidityFee = isOverLiquified(targetLiquidity, 100) ? 0 : liquidityFee;\r\n        uint256 amountToLiquify = contractTokenBalance * dynamicLiquidityFee / totalFee / (2);\r\n        uint256 amountToSwap = contractTokenBalance - amountToLiquify;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        uint256 amountBNB = address(this).balance;\r\n        uint256 totalBNBFee = totalFee - (dynamicLiquidityFee / (2));\r\n        uint256 amountBNBLiquidity = amountBNB * dynamicLiquidityFee / totalBNBFee / (2);\r\n        uint256 amountBNBMarketing = amountBNB * marketingFee / totalBNBFee;\r\n        uint256 amountBNBbuyback = amountBNB - amountBNBLiquidity - amountBNBMarketing;\r\n\r\n        (bool MarketingSuccess, /* bytes memory data */) = payable(marketingFeeReceiver).call{value: amountBNBMarketing, gas: 30000}(\"\");\r\n        require(MarketingSuccess, \"receiver rejected BNB transfer\");\r\n        (bool buybackSuccess, /* bytes memory data */) = payable(buybackFeeReceiver).call{value: amountBNBbuyback, gas: 30000}(\"\");\r\n        require(buybackSuccess, \"receiver rejected BNB transfer\");\r\n\r\n        if(amountToLiquify > 0){\r\n            router.addLiquidityETH{value: amountBNBLiquidity}(\r\n                address(this),\r\n                amountToLiquify,\r\n                0,\r\n                0,\r\n                marketingFeeReceiver,\r\n                block.timestamp\r\n            );\r\n            emit AutoLiquify(amountBNBLiquidity, amountToLiquify);\r\n        }\r\n    }\r\n\r\n    function launched() internal view returns (bool) {\r\n        return launchedAt != 0;\r\n    }\r\n\r\n    function launch() internal {\r\n        launchedAt = block.timestamp;\r\n    }\r\n\r\n    function getLiquidityBacking(uint256 accuracy) public view returns (uint256) {\r\n        return accuracy * (balanceOf(pair) * (2)) / (_liqSupply);\r\n    }\r\n\r\n    function isOverLiquified(uint256 target, uint256 accuracy) public view returns (bool) {\r\n        return getLiquidityBacking(accuracy) > target;\r\n    }\r\n\r\n    // External Functions\r\n\r\n    function setMaxWallet(uint256 percentageBase100) external onlyOwner {\r\n        uint256 percentage = _totalSupply * percentageBase100 / 100;\r\n        require(percentage >= _totalSupply / 100, \"Can't set MaxWallet below 1%\" );\r\n        _maxWalletSize = percentage;\r\n        emit SetMaxWallet(_maxWalletSize);\r\n    }\r\n\r\n    function setMaxTx(uint256 percentageBase1000) external onlyOwner {\r\n        uint256 percentage = _totalSupply * percentageBase1000 / 1000;\r\n        require(percentage >= _totalSupply / 1000, \"Can't set MaxTX below 0.1%\" );\r\n        _maxTxAmount = percentage;\r\n        emit SetMaxTxAmount(_maxTxAmount);\r\n    }\r\n\r\n    function setTargetLiquidity(uint256 _target) external onlyOwner {\r\n        targetLiquidity = _target;\r\n        emit SetTargetLiquidity(_target);\r\n    }    \r\n\r\n    function setIsFeeExempt(address holder, bool exempt) external onlyOwner {\r\n        isFeeExempt[holder] = exempt;\r\n        emit SetIsFeeExempt(holder, exempt);\r\n    }\r\n\r\n    function setIsTxLimitExempt(address holder, bool exempt) external onlyOwner {\r\n        isTxLimitExempt[holder] = exempt;\r\n        emit SetIsTxLimitExempt(holder, exempt);\r\n    }\r\n\r\n    function setBuyFees(uint256 _liquidityFee, uint256 _marketingFee, uint256 _buybackFee) external onlyOwner {\r\n        require(_liquidityFee + _marketingFee + _buybackFee < 33, \"Total fees must be below 33%\");\r\n        _buyLiquidityFee = _liquidityFee;\r\n        _buyMarketingFee = _marketingFee;\r\n        _buyBuybackFee = _buybackFee;\r\n        _buyTotalFee = _liquidityFee + _marketingFee + _buybackFee;\r\n        emit SetBuyFees(_liquidityFee, _marketingFee, _buybackFee, totalFee);\r\n    }\r\n\r\n    function setSellFees(uint256 _liquidityFee, uint256 _marketingFee, uint256 _buybackFee) external onlyOwner {\r\n        require(_liquidityFee + _marketingFee + _buybackFee < 33, \"Total fees must be below 33%\");\r\n        _sellLiquidityFee = _liquidityFee;\r\n        _sellMarketingFee = _marketingFee;\r\n        _sellBuybackFee = _buybackFee;\r\n        _sellTotalFee = _liquidityFee + _marketingFee + _buybackFee;\r\n        emit SetSellFees(_liquidityFee, _marketingFee, _buybackFee, totalFee);\r\n    }\r\n\r\n    function setFeeReceiver(address _marketingFeeReceiver, address _buybackFeeReceiver) external onlyOwner {\r\n        marketingFeeReceiver = _marketingFeeReceiver;\r\n        buybackFeeReceiver = _buybackFeeReceiver;\r\n        emit SetFeeReceivers(marketingFeeReceiver, buybackFeeReceiver);\r\n    }\r\n\r\n    function setSwapBackSettings(bool _enabled, uint256 _amount) external onlyOwner {\r\n        require(_amount > 0, \"Can't set SwapThreshold to ZERO\");\r\n        swapEnabled = _enabled;\r\n        swapThreshold = _amount;\r\n        emit SetSwapBackSettings(swapEnabled, swapThreshold);\r\n    }\r\n\r\n    // Stuck Balance Function\r\n\r\n    function ClearStuckBalance() external onlyOwner {\r\n        uint256 contractETHBalance = address(this).balance;\r\n        payable(marketingFeeReceiver).transfer(contractETHBalance);\r\n        emit StuckBalanceSent(contractETHBalance, marketingFeeReceiver);\r\n    }\r\n\r\n    function transferForeignToken(address _token) public onlyOwner {\r\n        uint256 _contractBalance = BEP20(_token).balanceOf(address(this));\r\n        payable(marketingFeeReceiver).transfer(_contractBalance);\r\n        emit ForeignTokenTransfer(_token, _contractBalance);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBNB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"ForeignTokenTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buybackFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalFee\",\"type\":\"uint256\"}],\"name\":\"SetBuyFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"marketingReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buybackFeeReceiver\",\"type\":\"address\"}],\"name\":\"SetFeeReceivers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SetIsFeeExempt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SetIsTxLimitExempt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"SetMaxTxAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxWalletToken\",\"type\":\"uint256\"}],\"name\":\"SetMaxWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buybackFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalFee\",\"type\":\"uint256\"}],\"name\":\"SetSellFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapThreshold\",\"type\":\"uint256\"}],\"name\":\"SetSwapBackSettings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"PercentageLiquidity\",\"type\":\"uint256\"}],\"name\":\"SetTargetLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBNB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"StuckBalanceSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ClearStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Ownershiplock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Ownershipunlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellBuybackFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"getLiquidityBacking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"isOverLiquified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buybackFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_buybackFeeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsTxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentageBase1000\",\"type\":\"uint256\"}],\"name\":\"setMaxTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentageBase100\",\"type\":\"uint256\"}],\"name\":\"setMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buybackFee\",\"type\":\"uint256\"}],\"name\":\"setSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_target\",\"type\":\"uint256\"}],\"name\":\"setTargetLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"transferForeignToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MetaVersus", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b442399b78585b54dc49b0440e0693fa5d4149b94549106bfc12f6348743527c"}