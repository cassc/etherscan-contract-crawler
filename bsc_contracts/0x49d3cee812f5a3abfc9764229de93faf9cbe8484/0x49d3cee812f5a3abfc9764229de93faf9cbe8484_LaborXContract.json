{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/LaborXContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./utils/ECDSA.sol\\\";\\nimport './access/Ownable.sol';\\nimport './utils/SafeERC20.sol';\\nimport './interfaces/IERC20.sol';\\nimport './interfaces/IWETH.sol';\\nimport \\\"./TokenManager.sol\\\";\\n\\ncontract LaborXContract is Ownable {\\n    using SafeERC20 for IERC20;\\n    using ECDSA for bytes32;\\n\\n    enum State {NULL, CREATED, BLOCKED, PAYED_TO_FREELANCER, RETURNED_FUNDS_TO_CUSTOMER, DISTRIBUTED_FUNDS_BY_ARBITER}\\n\\n    event ContractCreated(bytes32 indexed contractId, address token, uint256 amount, address disputer, uint256 deadline);\\n    event ContractBlocked(bytes32 indexed contractId);\\n    event PayedToFreelancer(bytes32 indexed contractId, uint256 freelancerFee, uint256 freelancerAmount);\\n    event RefundedToCustomer(bytes32 indexed contractId, uint256 customerPayAmount);\\n    event DistributedForPartials(bytes32 indexed contractId, uint256 freelancerFee, uint256 customerPayAmount, uint256 freelancerPayAmount);\\n    event ServiceFeesChanged(uint256 customerFee, uint256 freelancerFee);\\n\\n    uint256 public constant FEE_PRECISION = 1000;\\n\\n    bool private initialized;\\n    uint256 public customerFee = 0;\\n    uint256 public freelancerFee = 100;\\n    uint256 public extraDuration = 172800;\\n    uint256 public precision = 10000000000;\\n    uint256 public priceOutdateDelay = 14400;\\n    uint256 public priceOutdateDelayStable = 172800;\\n    bool public convertAvailable = true;\\n\\n    address public weth;\\n    address public tokenManager;\\n    address public serviceFeesRecipient;\\n    address public disputer;\\n\\n    struct Contract {\\n        bytes32 contractId;\\n        address customer;\\n        address freelancer;\\n        address disputer;\\n        address token;\\n        uint256 amount;\\n        uint256 customerFee;\\n        uint256 deadline;\\n        uint256 percentToBaseConvert;\\n        State state;\\n    }\\n\\n    struct ServiceFeeAccum {\\n        address token;\\n        uint256 amount;\\n    }\\n\\n    mapping(bytes32 => Contract) public contracts;\\n    mapping(address => uint256) public serviceFeesAccum;\\n\\n    function init(address _weth, address _tokenManager, address _disputer, address _serviceFeesRecipient) external onlyOwner {\\n        require(!initialized, \\\"Initialized\\\");\\n        weth = _weth;\\n        tokenManager = _tokenManager;\\n        disputer = _disputer;\\n        serviceFeesRecipient = _serviceFeesRecipient;\\n        initialized = true;\\n    }\\n\\n    function createContract(\\n        bytes32 _contractId,\\n        address _freelancer,\\n        address _disputer,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _duration,\\n        uint256 _percentToBaseConvert\\n    ) external payable {\\n        require(contracts[_contractId].state == State.NULL, \\\"Contract already exist\\\");\\n        (bool found,) = TokenManager(tokenManager).indexOfToken(_token);\\n        require(found, \\\"Only allowed currency\\\");\\n        require((_percentToBaseConvert >= 0 && _percentToBaseConvert <= 1000), \\\"Percent to base convert goes beyond the limits from 0 to 1000\\\");\\n        require(_duration > 0, \\\"Duration must be greater than zero\\\");\\n        uint256 _deadline = _duration + block.timestamp;\\n        uint256 feeAmount = customerFee * _amount / FEE_PRECISION;\\n        uint256 amountWithFee = _amount + feeAmount;\\n        if (_token == weth) {\\n            require(msg.value == amountWithFee, 'Incorrect passed msg.value');\\n            IWETH(weth).deposit{value : amountWithFee}();\\n        } else {\\n            IERC20(_token).safeTransferFrom(_msgSender(), address(this), amountWithFee);\\n        }\\n        Contract storage jobContract = contracts[_contractId];\\n        jobContract.state = State.CREATED;\\n        jobContract.customer = _msgSender();\\n        jobContract.freelancer = _freelancer;\\n        if (_disputer != address(0)) jobContract.disputer = _disputer;\\n        jobContract.token = _token;\\n        jobContract.amount = _amount;\\n        if (customerFee != 0) jobContract.customerFee = customerFee;\\n        jobContract.deadline = _deadline;\\n        if (_percentToBaseConvert != 0) jobContract.percentToBaseConvert = _percentToBaseConvert;\\n        emit ContractCreated(_contractId, _token, _amount, _disputer, _deadline);\\n    }\\n\\n    function blockContract(bytes32 _contractId) external onlyCreatedState(_contractId) {\\n        require(\\n            ((contracts[_contractId].disputer == address(0) && _msgSender() == disputer) || _msgSender() == contracts[_contractId].disputer) ||\\n            _msgSender() == contracts[_contractId].freelancer,\\n            \\\"Only disputer or freelancer can block contract\\\"\\n        );\\n        contracts[_contractId].state = State.BLOCKED;\\n        emit ContractBlocked(_contractId);\\n    }\\n\\n    function payToFreelancer(\\n        bytes32 _contractId\\n    ) external onlyCustomer(_contractId) onlyCreatedState(_contractId) {\\n        uint256 freelancerFeeAmount = freelancerFee * contracts[_contractId].amount / FEE_PRECISION;\\n        uint256 customerFeeAmount = contracts[_contractId].customerFee * contracts[_contractId].amount / FEE_PRECISION;\\n        uint256 freelancerAmount = contracts[_contractId].amount - freelancerFeeAmount;\\n        contracts[_contractId].state = State.PAYED_TO_FREELANCER;\\n        if (contracts[_contractId].token == weth) {\\n            IWETH(weth).withdraw(freelancerAmount);\\n            payable(contracts[_contractId].freelancer).transfer(freelancerAmount);\\n        } else {\\n            if (contracts[_contractId].percentToBaseConvert > 0) {\\n                uint256 freelancerAmountToBase = freelancerAmount * contracts[_contractId].percentToBaseConvert / FEE_PRECISION;\\n                bool success = _payInBase(contracts[_contractId].freelancer, contracts[_contractId].token, freelancerAmountToBase);\\n                if (success) {\\n                    IERC20(contracts[_contractId].token).safeTransfer(contracts[_contractId].freelancer, freelancerAmount - freelancerAmountToBase);\\n                } else {\\n                    IERC20(contracts[_contractId].token).safeTransfer(contracts[_contractId].freelancer, freelancerAmount);\\n                }\\n            } else {\\n                IERC20(contracts[_contractId].token).safeTransfer(contracts[_contractId].freelancer, freelancerAmount);\\n            }\\n        }\\n        serviceFeesAccum[contracts[_contractId].token] += freelancerFeeAmount + customerFeeAmount;\\n        emit PayedToFreelancer(_contractId, freelancerFee, freelancerAmount);\\n    }\\n\\n    function refundToCustomerByFreelancer(\\n        bytes32 _contractId\\n    ) external onlyFreelancer(_contractId) onlyCreatedState(_contractId) {\\n        uint256 customerFeeAmount = contracts[_contractId].customerFee * contracts[_contractId].amount / FEE_PRECISION;\\n        uint256 customerAmount = contracts[_contractId].amount + customerFeeAmount;\\n        contracts[_contractId].state = State.RETURNED_FUNDS_TO_CUSTOMER;\\n        if (contracts[_contractId].token == weth) {\\n            IWETH(weth).withdraw(customerAmount);\\n            payable(contracts[_contractId].customer).transfer(customerAmount);\\n        } else {\\n            IERC20(contracts[_contractId].token).safeTransfer(\\n                contracts[_contractId].customer,\\n                customerAmount\\n            );\\n        }\\n        emit RefundedToCustomer(_contractId, customerAmount);\\n    }\\n\\n    function refundToCustomerByCustomer(\\n        bytes32 _contractId\\n    ) external onlyCustomer(_contractId) onlyCreatedState(_contractId) {\\n        require(contracts[_contractId].deadline + extraDuration < block.timestamp, \\\"You cannot refund the funds, deadline plus extra hours\\\");\\n        uint256 customerFeeAmount = contracts[_contractId].customerFee * contracts[_contractId].amount / FEE_PRECISION;\\n        uint256 customerAmount = contracts[_contractId].amount + customerFeeAmount;\\n        contracts[_contractId].state = State.RETURNED_FUNDS_TO_CUSTOMER;\\n        if (contracts[_contractId].token == weth) {\\n            IWETH(weth).withdraw(customerAmount);\\n            payable(contracts[_contractId].customer).transfer(customerAmount);\\n        } else {\\n            IERC20(contracts[_contractId].token).safeTransfer(\\n                contracts[_contractId].customer,\\n                customerAmount\\n            );\\n        }\\n        emit RefundedToCustomer(_contractId, customerAmount);\\n    }\\n\\n    function refundToCustomerWithFreelancerSignature(\\n        bytes32 _contractId,\\n        bytes memory signature\\n    ) public onlyCustomer(_contractId) onlyCreatedState(_contractId) {\\n        address signerAddress = _contractId.toEthSignedMessageHash().recover(signature);\\n        require(signerAddress == contracts[_contractId].freelancer, \\\"Freelancer signature is incorrect\\\");\\n        uint256 customerFeeAmount = contracts[_contractId].customerFee * contracts[_contractId].amount / FEE_PRECISION;\\n        uint256 customerAmount = contracts[_contractId].amount + customerFeeAmount;\\n        contracts[_contractId].state = State.RETURNED_FUNDS_TO_CUSTOMER;\\n        if (contracts[_contractId].token == weth) {\\n            IWETH(weth).withdraw(customerAmount);\\n            payable(contracts[_contractId].customer).transfer(customerAmount);\\n        } else {\\n            IERC20(contracts[_contractId].token).safeTransfer(\\n                contracts[_contractId].customer,\\n                customerAmount\\n            );\\n        }\\n        emit RefundedToCustomer(_contractId, customerAmount);\\n    }\\n\\n    function distributionForPartials(\\n        bytes32 _contractId,\\n        uint256 _customerAmount\\n    ) external onlyDisputer(_contractId) onlyBlockedState(_contractId) {\\n        require(contracts[_contractId].amount >= _customerAmount, \\\"High value of the customer amount\\\");\\n        uint256 customerBeginFee = contracts[_contractId].amount * contracts[_contractId].customerFee / FEE_PRECISION;\\n        uint256 freelancerAmount = contracts[_contractId].amount - _customerAmount;\\n        uint256 freelancerFeeAmount = freelancerAmount * freelancerFee / FEE_PRECISION;\\n        uint256 freelancerPayAmount = freelancerAmount - freelancerFeeAmount;\\n        uint256 customerFeeAmount = freelancerAmount * precision * customerBeginFee / contracts[_contractId].amount / precision;\\n        uint256 customerPayAmount = _customerAmount + (customerBeginFee - customerFeeAmount);\\n        contracts[_contractId].state = State.DISTRIBUTED_FUNDS_BY_ARBITER;\\n        if (contracts[_contractId].token == weth) {\\n            IWETH(weth).withdraw(customerPayAmount + freelancerPayAmount);\\n            if (customerPayAmount != 0) {\\n                payable(contracts[_contractId].customer).transfer(customerPayAmount);\\n            }\\n            if (freelancerPayAmount != 0) {\\n                payable(contracts[_contractId].freelancer).transfer(freelancerPayAmount);\\n            }\\n        } else {\\n            if (customerPayAmount != 0) {\\n                IERC20(contracts[_contractId].token).safeTransfer(contracts[_contractId].customer, customerPayAmount);\\n            }\\n            if (freelancerPayAmount != 0) {\\n                IERC20(contracts[_contractId].token).safeTransfer(contracts[_contractId].freelancer, freelancerPayAmount);\\n            }\\n        }\\n        serviceFeesAccum[contracts[_contractId].token] += customerFeeAmount + freelancerFeeAmount;\\n        emit DistributedForPartials(_contractId, freelancerFee, customerPayAmount, freelancerPayAmount);\\n    }\\n\\n    function withdrawServiceFee(address token) external onlyServiceFeesRecipient {\\n        require(serviceFeesRecipient != address(0), \\\"Not specified service fee address\\\");\\n        require(serviceFeesAccum[token] > 0, \\\"You have no accumulated commissions\\\");\\n        uint256 amount = serviceFeesAccum[token];\\n        serviceFeesAccum[token] = 0;\\n        if (token == weth) {\\n            IWETH(weth).withdraw(amount);\\n            payable(serviceFeesRecipient).transfer(amount);\\n        } else {\\n            IERC20(token).safeTransfer(serviceFeesRecipient, amount);\\n        }\\n    }\\n\\n    function withdrawServiceFees() external onlyServiceFeesRecipient {\\n        address[] memory addresses = TokenManager(tokenManager).getListTokenAddresses();\\n        for (uint256 i = 0; i < addresses.length; i++) {\\n            if (serviceFeesAccum[addresses[i]] > 0) {\\n                uint256 amount = serviceFeesAccum[addresses[i]];\\n                serviceFeesAccum[addresses[i]] = 0;\\n                if (addresses[i] == weth) {\\n                    IWETH(weth).withdraw(amount);\\n                    payable(serviceFeesRecipient).transfer(amount);\\n                } else {\\n                    IERC20(addresses[i]).safeTransfer(serviceFeesRecipient, amount);\\n                }\\n            }\\n        }\\n    }\\n\\n    function checkAbilityConvertToBase(address fromToken, uint256 amount) public view returns (bool success, uint256 amountInBase) {\\n        if (!convertAvailable) return (false, 0);\\n        if (address(0) == weth) return (false, 1);\\n        if (fromToken == weth) return (false, 2);\\n        (bool found,) = TokenManager(tokenManager).indexOfToken(weth);\\n        if (!found) return (false, 3);\\n        (,,,,address priceContractToUSD, bool isStable) = TokenManager(tokenManager).tokens(fromToken);\\n        if (priceContractToUSD == address(0)) return (false, 4);\\n        (,int256 answerToUSD,,uint256 updatedAtToUSD,) = AggregatorV3Interface(priceContractToUSD).latestRoundData();\\n        if ((updatedAtToUSD + (isStable ? priceOutdateDelayStable : priceOutdateDelay )) < block.timestamp) return (false, 5);\\n        if (answerToUSD <= 0) return (false, 6);\\n        (,,,,address priceContractToBase,) = TokenManager(tokenManager).tokens(weth);\\n        (,int256 answerToBase,,uint256 updatedAtToBase,) = AggregatorV3Interface(priceContractToBase).latestRoundData();\\n        if ((updatedAtToBase + priceOutdateDelay) < block.timestamp) return (false, 7);\\n        if (answerToBase <= 0) return (false, 8);\\n        uint256 amountInUSD = amount * uint(answerToUSD) / (10 ** AggregatorV3Interface(priceContractToUSD).decimals());\\n        amountInBase = amountInUSD * (10 ** 18) / uint(answerToBase);\\n        if (amountInBase > serviceFeesAccum[weth]) return (false, 9);\\n        return (true, amountInBase);\\n    }\\n\\n    function addToServiceFeeAccumBase() external payable onlyServiceFeesRecipient {\\n        IWETH(weth).deposit{value : msg.value}();\\n        serviceFeesAccum[weth] += msg.value;\\n    }\\n\\n    function setPrecision(uint256 _precision) external onlyOwner {\\n        precision = _precision;\\n    }\\n\\n    function setServiceFeesRecipient(address _address) external onlyOwner {\\n        serviceFeesRecipient = _address;\\n    }\\n\\n    function setDisputer(address _address) external onlyOwner {\\n        disputer = _address;\\n    }\\n\\n    function setTokenManager(address _address) external onlyOwner {\\n        tokenManager = _address;\\n    }\\n\\n    function setServiceFees(uint256 _customerFee, uint256 _freelancerFee) external onlyOwner {\\n        customerFee = _customerFee;\\n        freelancerFee = _freelancerFee;\\n        emit ServiceFeesChanged(customerFee, freelancerFee);\\n    }\\n\\n    function setExtraDuration(uint256 _extraDuration) external onlyOwner {\\n        extraDuration = _extraDuration;\\n    }\\n\\n    function setPriceOutdateDelay(uint256 _priceOutdateDelay, uint256 _priceOutdateDelayStable) external onlyOwner {\\n        priceOutdateDelay = _priceOutdateDelay;\\n        priceOutdateDelayStable = _priceOutdateDelayStable;\\n    }\\n\\n    function setConvertAvailable(bool _convertAvailable) external onlyOwner {\\n        convertAvailable = _convertAvailable;\\n    }\\n\\n    function _payInBase(address to, address fromToken, uint256 amount) internal returns (bool) {\\n        (bool success, uint256 amountInBase) = checkAbilityConvertToBase(fromToken, amount);\\n        if (!success) return false;\\n        IWETH(weth).withdraw(amountInBase);\\n        payable(to).transfer(amountInBase);\\n        serviceFeesAccum[weth] -= amountInBase;\\n        serviceFeesAccum[fromToken] += amount;\\n        return true;\\n    }\\n\\n    receive() external payable {\\n        assert(msg.sender == weth);\\n    }\\n\\n    // -------- Getters ----------\\n    function getAccumulatedFees() public view returns (ServiceFeeAccum[] memory _fees) {\\n        uint256 length = TokenManager(tokenManager).getLengthTokenAddresses();\\n        ServiceFeeAccum[] memory fees = new ServiceFeeAccum[](length);\\n        for (uint256 i = 0; i < length; i++) {\\n            address token = TokenManager(tokenManager).tokenAddresses(i);\\n            fees[i].token = token;\\n            fees[i].amount = serviceFeesAccum[token];\\n        }\\n        return fees;\\n    }\\n\\n    function getServiceFees() public view returns (uint256 _customerFee, uint256 _freelancerFee) {\\n        _customerFee = customerFee;\\n        _freelancerFee = freelancerFee;\\n    }\\n\\n    // -------- Modifiers ----------\\n    modifier onlyCreatedState (bytes32 _contractId) {\\n        require(contracts[_contractId].state == State.CREATED, \\\"Contract allowed only created state\\\");\\n        _;\\n    }\\n\\n    modifier onlyBlockedState (bytes32 _contractId) {\\n        require(contracts[_contractId].state == State.BLOCKED, \\\"Contract allowed only blocked state\\\");\\n        _;\\n    }\\n\\n    modifier onlyServiceFeesRecipient () {\\n        require(_msgSender() == serviceFeesRecipient, \\\"Only service fees recipient can call this function\\\");\\n        _;\\n    }\\n\\n    modifier onlyFreelancer (bytes32 _contractId) {\\n        require(_msgSender() == contracts[_contractId].freelancer, \\\"Only freelancer can call this function\\\");\\n        _;\\n    }\\n\\n    modifier onlyCustomer (bytes32 _contractId) {\\n        require(_msgSender() == contracts[_contractId].customer, \\\"Only customer can call this function\\\");\\n        _;\\n    }\\n\\n    modifier onlyTxSender (bytes32 _contractId) {\\n        require(msg.sender == tx.origin, \\\"Only tx sender can call this function\\\");\\n        _;\\n    }\\n\\n    modifier onlyDisputer (bytes32 _contractId) {\\n        require((contracts[_contractId].disputer == address(0) && _msgSender() == disputer) || _msgSender() == contracts[_contractId].disputer, \\\"Only disputer can call this function\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/TokenManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./access/Ownable.sol\\\";\\n\\ncontract TokenManager is Ownable {\\n    event TokenAdded(address indexed _tokenAddress);\\n    event TokenRemoved(address indexed _tokenAddress);\\n\\n    struct Token {\\n        address tokenAddress;\\n        string name;\\n        string symbol;\\n        uint256 decimals;\\n        address usdPriceContract;\\n        bool isStable;\\n    }\\n\\n    address[] public tokenAddresses;\\n    mapping(address => Token) public tokens;\\n\\n    function addToken(\\n        address _tokenAddress,\\n        string memory _name,\\n        string memory _symbol,\\n        uint256 _decimals,\\n        address _usdPriceContract,\\n        bool _isStable\\n    ) public onlyOwner {\\n        (bool found,) = indexOfToken(_tokenAddress);\\n        require(!found, 'Token already added');\\n        tokens[_tokenAddress] = Token(_tokenAddress, _name, _symbol, _decimals, _usdPriceContract, _isStable);\\n        tokenAddresses.push(_tokenAddress);\\n        emit TokenAdded(_tokenAddress);\\n    }\\n\\n    function removeToken(\\n        address _tokenAddress\\n    ) public onlyOwner {\\n        (bool found, uint256 index) = indexOfToken(_tokenAddress);\\n        require(found, 'Erc20 token not found');\\n        if (tokenAddresses.length > 1) {\\n            tokenAddresses[index] = tokenAddresses[tokenAddresses.length - 1];\\n        }\\n        tokenAddresses.pop();\\n        delete tokens[_tokenAddress];\\n        emit TokenRemoved(_tokenAddress);\\n    }\\n\\n    function indexOfToken(address _address) public view returns (bool found, uint256 index) {\\n        for (uint256 i = 0; i < tokenAddresses.length; i++) {\\n            if (tokenAddresses[i] == _address) {\\n                return (true, i);\\n            }\\n        }\\n        return (false, 0);\\n    }\\n\\n    function getListTokenAddresses() public view returns (address[] memory)\\n    {\\n        return tokenAddresses;\\n    }\\n\\n    function getLengthTokenAddresses() public view returns (uint256)\\n    {\\n        return tokenAddresses.length;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n    * @dev Returns the address of the pending owner.\\n    */\\n    function pendingOwner() public view returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Throws if called by any account other than the pending owner.\\n    */\\n    modifier onlyPendingOwner() {\\n        require(pendingOwner() == _msgSender(), \\\"Ownable: caller is not the pending owner\\\");\\n        _;\\n    }\\n\\n    function transferOwnership(address newOwner) external onlyOwner {\\n        _pendingOwner = newOwner;\\n    }\\n\\n    function claimOwnership() external onlyPendingOwner {\\n        _owner = _pendingOwner;\\n        _pendingOwner = address(0);\\n        emit OwnershipTransferred(_owner, _pendingOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n    function decimals()\\n    external\\n    view\\n    returns (\\n        uint8\\n    );\\n\\n    function description()\\n    external\\n    view\\n    returns (\\n        string memory\\n    );\\n\\n    function version()\\n    external\\n    view\\n    returns (\\n        uint256\\n    );\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(\\n        uint80 _roundId\\n    )\\n    external\\n    view\\n    returns (\\n        uint80 roundId,\\n        int256 answer,\\n        uint256 startedAt,\\n        uint256 updatedAt,\\n        uint80 answeredInRound\\n    );\\n\\n    function latestRoundData()\\n    external\\n    view\\n    returns (\\n        uint80 roundId,\\n        int256 answer,\\n        uint256 startedAt,\\n        uint256 updatedAt,\\n        uint80 answeredInRound\\n    );\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint wad) external;\\n    function balanceOf(address user) external returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n        } else if (signature.length == 64) {\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                let vs := mload(add(signature, 0x40))\\n                r := mload(add(signature, 0x20))\\n                s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n                v := add(shr(255, vs), 27)\\n            }\\n        } else {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (282): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        uint256 newAllowance = oldAllowance - value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n}\\n\\n/**\\n * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n * on the return value: the return value is optional (but if data is returned, it must not be false).\\n * @param token The token targeted by the call.\\n * @param data The call data (encoded using abi.encode or one of its variants).\\n */\\nfunction _callOptionalReturn(IERC20 token, bytes memory data) private {\\n// We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n// we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n// the target address contains contract code and also asserts for success in the low-level call.\\n\\nbytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\nif (returndata.length > 0) {// Return data is optional\\n// solhint-disable-next-line max-line-length\\nrequire(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n}\\n}\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"contractId\",\"type\":\"bytes32\"}],\"name\":\"ContractBlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"contractId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"disputer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"ContractCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"contractId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"freelancerFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"customerPayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"freelancerPayAmount\",\"type\":\"uint256\"}],\"name\":\"DistributedForPartials\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"contractId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"freelancerFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"freelancerAmount\",\"type\":\"uint256\"}],\"name\":\"PayedToFreelancer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"contractId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"customerPayAmount\",\"type\":\"uint256\"}],\"name\":\"RefundedToCustomer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"customerFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"freelancerFee\",\"type\":\"uint256\"}],\"name\":\"ServiceFeesChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addToServiceFeeAccumBase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_contractId\",\"type\":\"bytes32\"}],\"name\":\"blockContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"checkAbilityConvertToBase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountInBase\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"contracts\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"contractId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"customer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"freelancer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"disputer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"customerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentToBaseConvert\",\"type\":\"uint256\"},{\"internalType\":\"enum LaborXContract.State\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convertAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_contractId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_freelancer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_disputer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_duration\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_percentToBaseConvert\",\"type\":\"uint256\"}],\"name\":\"createContract\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"customerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disputer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_contractId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_customerAmount\",\"type\":\"uint256\"}],\"name\":\"distributionForPartials\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freelancerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAccumulatedFees\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct LaborXContract.ServiceFeeAccum[]\",\"name\":\"_fees\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getServiceFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_customerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_freelancerFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_disputer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_serviceFeesRecipient\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_contractId\",\"type\":\"bytes32\"}],\"name\":\"payToFreelancer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOutdateDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOutdateDelayStable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_contractId\",\"type\":\"bytes32\"}],\"name\":\"refundToCustomerByCustomer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_contractId\",\"type\":\"bytes32\"}],\"name\":\"refundToCustomerByFreelancer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_contractId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"refundToCustomerWithFreelancerSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"serviceFeesAccum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"serviceFeesRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_convertAvailable\",\"type\":\"bool\"}],\"name\":\"setConvertAvailable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setDisputer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_extraDuration\",\"type\":\"uint256\"}],\"name\":\"setExtraDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_precision\",\"type\":\"uint256\"}],\"name\":\"setPrecision\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceOutdateDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceOutdateDelayStable\",\"type\":\"uint256\"}],\"name\":\"setPriceOutdateDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_customerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_freelancerFee\",\"type\":\"uint256\"}],\"name\":\"setServiceFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setServiceFeesRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setTokenManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawServiceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawServiceFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LaborXContract", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}