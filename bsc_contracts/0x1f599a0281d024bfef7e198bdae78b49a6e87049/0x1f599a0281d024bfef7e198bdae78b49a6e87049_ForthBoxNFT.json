{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\ninterface IERC721 is IERC165 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n    function safeTransferFrom(address from,address to,uint256 tokenId) external;\r\n    function transferFrom(address from,address to,uint256 tokenId) external;\r\n    function approve(address to, uint256 tokenId) external;\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n    function safeTransferFrom(address from,address to,uint256 tokenId,bytes calldata data) external;\r\n}\r\n\r\ninterface IERC721Receiver {\r\n    function onERC721Received(address operator,address from,uint256 tokenId,bytes calldata data) view external returns (bytes4);\r\n}\r\n\r\ninterface IERC721Metadata is IERC721 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {size := extcodesize(account)}\r\n        return size > 0;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n}\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\nlibrary Counters {\r\n    struct Counter {\r\n        uint256 _value;\r\n    }\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n    function increment(Counter storage counter) internal {\r\n        unchecked {counter._value += 1;}\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IStakingRewards {\r\n    function stakeFresh(address ownerAdrr,uint256 tokenId) external;\r\n    function ownerTokenId(uint256 tokenId) external view returns (address);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface IERC721Enumerable is IERC721 {\r\n    function totalSupply() external view returns (uint256);\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\ninterface IUniswapV2Router01 {\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)external view returns (uint256[] memory amounts);\r\n}\r\ncontract ReentrancyGuard {\r\n    uint256 private _guardCounter;\r\n    constructor () {\r\n        _guardCounter = 1;\r\n    }\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\r\n    }\r\n}\r\n\r\nabstract contract ERC165 is IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\nabstract contract ERC721 is Context,ERC165, IERC721, IERC721Metadata,IERC721Receiver,Ownable {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    mapping(uint256 => address) private _owners;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    mapping (address => bool) private _Is_WhiteContractArr;\r\n    address[] private _WhiteContractArr;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"FBXNFT: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n    function isWhiteContract(address account) public view returns (bool) {\r\n        if(!account.isContract()) return true;\r\n        return _Is_WhiteContractArr[account];\r\n    }\r\n\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n        require(  _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\"ERC721: approve caller is not owner nor approved for all\");\r\n        _approve(to, tokenId);\r\n    }\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n    function transferFrom(address from,address to,uint256 tokenId) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _transfer(from, to, tokenId);\r\n    }\r\n    function safeTransferFrom(address from,address to,uint256 tokenId) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n    function safeTransferFrom(address from,address to,uint256 tokenId,bytes memory _data) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n    function _safeTransfer(address from,address to,uint256 tokenId,bytes memory _data) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n    function _safeMint(address to,uint256 tokenId,bytes memory _data) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(_checkOnERC721Received(address(0), to, tokenId, _data),\"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n        _approve(address(0), tokenId);\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n    function _transfer(address from,address to,uint256 tokenId) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n        _approve(address(0), tokenId);\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n    function getWhiteAccountNum() public view returns (uint256){\r\n        return _WhiteContractArr.length;\r\n    }\r\n    function getWhiteAccountIth(uint256 ith) public view returns (address WhiteAddress){\r\n        require(ith <_WhiteContractArr.length, \"ForthBoxNFT: no ith White Adress\");\r\n        return _WhiteContractArr[ith];\r\n    }\r\n    function addWhiteAccount(address account) external onlyOwner{\r\n        require(!_Is_WhiteContractArr[account], \"ForthBoxNFT:Account is already White list\");\r\n        require(account.isContract(), \"ForthBoxNFT: not Contract Adress\");\r\n        _Is_WhiteContractArr[account] = true;\r\n        _WhiteContractArr.push(account);\r\n    }\r\n    function removeWhiteAccount(address account) external onlyOwner{\r\n        require(_Is_WhiteContractArr[account], \"ForthBoxNFT:Account is already out White list\");\r\n        for (uint i = 0; i < _WhiteContractArr.length; i++){\r\n            if (_WhiteContractArr[i] == account){\r\n                _WhiteContractArr[i] = _WhiteContractArr[_WhiteContractArr.length - 1];\r\n                _WhiteContractArr.pop();\r\n                _Is_WhiteContractArr[account] = false;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _checkOnERC721Received(address from,address to,uint256 tokenId,bytes memory _data) private view returns (bool) {\r\n        if (to.isContract()){\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval){\r\n              return retval == IERC721Receiver.onERC721Received.selector;\r\n            }\r\n            catch (bytes memory reason){\r\n                if (reason.length == 0){\r\n                  revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                }\r\n                else{\r\n                  assembly {revert(add(32, reason), mload(reason))}\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n    function _beforeTokenTransfer(address from,address to,uint256 tokenId) internal virtual {}\r\n}\r\n\r\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\r\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\r\n    mapping(uint256 => uint256) private _ownedTokensIndex;\r\n    uint256[] private _allTokens;\r\n    mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\r\n        return _ownedTokens[owner][index];\r\n    }\r\n    function tokenOfOwner(address owner) public view returns (uint256[] memory) {\r\n        uint256 num = ERC721.balanceOf(owner);\r\n        uint256[] memory Token_list = new uint256[](uint256(num));\r\n        for(uint256 i=0; i<num; ++i) {\r\n            Token_list[i] =_ownedTokens[owner][i];\r\n        }\r\n        return Token_list;\r\n    }\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _allTokens.length;\r\n    }\r\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\r\n        return _allTokens[index];\r\n    }\r\n    function _beforeTokenTransfer(address from,address to,uint256 tokenId) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n        if (from == address(0)) {\r\n            _addTokenToAllTokensEnumeration(tokenId);\r\n        } else if (from != to) {\r\n            _removeTokenFromOwnerEnumeration(from, tokenId);\r\n        }\r\n        if (to == address(0)) {\r\n            _removeTokenFromAllTokensEnumeration(tokenId);\r\n        } else if (to != from) {\r\n            _addTokenToOwnerEnumeration(to, tokenId);\r\n        }\r\n    }\r\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n        uint256 length = ERC721.balanceOf(to);\r\n        _ownedTokens[to][length] = tokenId;\r\n        _ownedTokensIndex[tokenId] = length;\r\n    }\r\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n        _allTokensIndex[tokenId] = _allTokens.length;\r\n        _allTokens.push(tokenId);\r\n    }\r\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\r\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\r\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n        }\r\n        delete _ownedTokensIndex[tokenId];\r\n        delete _ownedTokens[from][lastTokenIndex];\r\n    }\r\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\n        uint256 lastTokenIndex = _allTokens.length - 1;\r\n        uint256 tokenIndex = _allTokensIndex[tokenId];\r\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\r\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n\r\n        delete _allTokensIndex[tokenId];\r\n        _allTokens.pop();\r\n    }\r\n    function onERC721Received(address,address,uint256,bytes memory) public view virtual override returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\r\n         return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n}\r\n\r\ncontract ForthBoxNFT is ERC721Enumerable,ReentrancyGuard  {\r\n   using Strings for uint256;\r\n   using SafeMath for uint256;\r\n   using Counters for Counters.Counter;\r\n   using SafeERC20 for IERC20;\r\n\r\n   Counters.Counter private _tokenIds;\r\n   string private _baseURIextended;\r\n   string private _imageAdress;\r\n   struct sNftPropertys {\r\n     string tokenURI;\r\n       uint256 value;\r\n       uint256[7] propertys;\r\n       uint256 lastUpdateTime;\r\n   }\r\n    uint256 maxValue=108;\r\n\r\n   mapping(uint256 => sNftPropertys) private _NftPropertys;\r\n\r\n   struct sInviter {\r\n       address inviter;\r\n       uint256 inviterNum;\r\n       uint256 benefitsInvitation_FBX;\r\n       uint256 benefitsInvitation_Forth;\r\n   }\r\n   mapping(address => sInviter) private _inviters;\r\n   mapping(address => uint256) private _mintNum;\r\n\r\n   uint256 public usdt_FeedPrice = 20*10**18;\r\n   uint256 private FBX_feedingProportion=90;\r\n   uint256 private FeedFBXPrice = 233*10**18;\r\n   uint256 private FeedForhtPrice = 4*10**17;\r\n   IERC20 public FBXToken;\r\n   IERC20 public ForthToken;\r\n   address public FundAdress;\r\n\r\n   bool public bChangePriceAuto = false;\r\n   address public usdtAddress;// 0x55d398326f99059fF775485246999027B3197955;\r\n   IUniswapV2Router01 private pancakeRouter01;//0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n\r\n   uint256 public totlaFeedUsdt=0;\r\n\r\n   IStakingRewards public DeFi_NFT_FBXToken;\r\n   bool private bFreshDeFiNFT = false;\r\n\r\n   uint256[7] public upgradePropertysFBXPrice=[10**19,10**19,10**19,10**19,10**19,10**19,10**19];\r\n  event Feed(address indexed feeder,uint256 tokenId);\r\n  event Feeds(address indexed feeder,uint256[] tokenIds);\r\n  event Upgrade_Propertys(address indexed owner,uint256 tokenId,uint256 ith,uint256 degree);\r\n  event AddInviters(address indexed owner,address indexed Inviter);\r\n\r\n  constructor () ERC721(\"ForthBox Ham NFT\", \"Ham NFT\") {\r\n  }\r\n\r\n  //---view---//\r\n  function _baseURI() internal view virtual override returns (string memory) {\r\n      return _baseURIextended;\r\n  }\r\n  function bExistsID(uint256 tokenId) public view returns (bool) {\r\n      return _exists(tokenId);\r\n  }\r\n  function getBenefitsInvitation_FBX(address address1) public view returns(uint256){\r\n     return _inviters[address1].benefitsInvitation_FBX;\r\n  }\r\n  function getInviterNum(address address1) public view returns(uint256){\r\n     return _inviters[address1].inviterNum;\r\n  }\r\n  function getBenefitsInvitation_Forth(address address1) public view returns(uint256){\r\n     return _inviters[address1].benefitsInvitation_Forth;\r\n  }\r\n  function getValueByTokenId(uint256 tokenId) external view returns(uint256){\r\n     require(_exists(tokenId), \"ERC721: Existent ID\");\r\n     return _NftPropertys[tokenId].value;\r\n  }\r\n  function getPropertysByTokenId(uint256 tokenId) external view returns(uint256[] memory){\r\n     require(_exists(tokenId), \"ERC721: Existent ID\");\r\n     uint256 num = _NftPropertys[tokenId].propertys.length;\r\n     uint256[] memory Token_list = new uint256[](uint256(num));\r\n    for(uint256 i=0; i<num; ++i) {\r\n        Token_list[i] =_NftPropertys[tokenId].propertys[i];\r\n    }\r\n     return Token_list;\r\n  }\r\n  struct sNftPro {\r\n      uint256 ID;\r\n      uint256 value;\r\n      uint256 hashrate;\r\n      uint256 lastUpdateTime;\r\n      uint256[7] propertys;\r\n  }\r\n  function getPropertiesByTokenIds(uint256[] calldata tokenIdArr ) external view returns(uint256[] memory){\r\n      for(uint256 i=0; i<tokenIdArr.length; ++i) {\r\n        require(_exists(tokenIdArr[i]), \"ERC721: Existent ID\");\r\n      }\r\n     uint256[] memory tPropertyArr = new uint256[](uint256(11*tokenIdArr.length));\r\n     uint256 ith=0;\r\n     for(uint256 i=0; i<tokenIdArr.length; ++i) {\r\n       tPropertyArr[ith] = tokenIdArr[i]; ith++;\r\n       tPropertyArr[ith] =_NftPropertys[tokenIdArr[i]].value; ith++;\r\n       tPropertyArr[ith] = getHashrateByTokenId(tokenIdArr[i]); ith++;\r\n       tPropertyArr[ith] =_NftPropertys[tokenIdArr[i]].lastUpdateTime; ith++;\r\n      for(uint256 j=0; j<7; ++j){\r\n          tPropertyArr[ith] = _NftPropertys[tokenIdArr[i]].propertys[j]; ith++;\r\n      }\r\n     }\r\n     return tPropertyArr;\r\n  }\r\n\r\n\r\n  function getHashrateByTokenId(uint256 tokenId) public view returns(uint256)  {\r\n     require(_exists(tokenId), \"ERC721: Existent ID\");\r\n     if(_NftPropertys[tokenId].value==0){\r\n        return 1;\r\n     }\r\n     if(_NftPropertys[tokenId].value<=9){\r\n        return _NftPropertys[tokenId].value.mul(200);\r\n     }\r\n     if(_NftPropertys[tokenId].value<=44){\r\n        return (_NftPropertys[tokenId].value.mul(100)).add(900);\r\n     }\r\n     if(_NftPropertys[tokenId].value<=87){\r\n        return (_NftPropertys[tokenId].value.mul(200)).sub(3500);\r\n     }\r\n     if(_NftPropertys[tokenId].value<=maxValue){\r\n        return (_NftPropertys[tokenId].value.mul(100)).add(5200);\r\n     }\r\n     return 0;\r\n  }\r\n  function getLastUpdateTimeByTokenId(uint256 tokenId) external view returns(uint256){\r\n     require(_exists(tokenId), \"ERC721: Existent ID\");\r\n     return _NftPropertys[tokenId].lastUpdateTime;\r\n  }\r\n  function tokenURI(uint256 tokenId) public view virtual override(ERC721) returns (string memory){\r\n    require(_exists(tokenId), \"FBXNFT: URI query for nonexistent token\");\r\n    string memory base = _baseURI();\r\n    string memory imageAdress = _imageAdress;\r\n    uint256 H = getHashrateByTokenId(tokenId);\r\n    string memory json1;\r\n    if (bytes(base).length != 0) {\r\n          json1 = string(abi.encodePacked(\r\n            '{\"name\":\"ForthBoxNFT\",',\r\n            '\"description\":\"Platform NFT\",',\r\n            '\"image\":\"',imageAdress, '\",',\r\n            '\"base\":\"',base, '\",',\r\n            '\"id\":',Strings.toString(tokenId), ',',\r\n            '\"degree\":',Strings.toString(_NftPropertys[tokenId].value), ',',\r\n            '\"hashrate\":',Strings.toString(H), ','\r\n            ));\r\n      }\r\n      else\r\n      {\r\n          json1 = string(abi.encodePacked(\r\n            '{\"name\":\"ForthBoxNFT\",',\r\n            '\"description\":\"Platform NFT\",',\r\n            '\"image\":\"',imageAdress, '\",',\r\n            '\"id\":',Strings.toString(tokenId), ',',\r\n            '\"degree\":',Strings.toString(_NftPropertys[tokenId].value), ',',\r\n            '\"hashrate\":',Strings.toString(H), ','\r\n            ));\r\n      }\r\n    string memory json2 = string(abi.encodePacked(\r\n        '\"property\":[',Strings.toString(_NftPropertys[tokenId].propertys[0]), ',',\r\n        Strings.toString(_NftPropertys[tokenId].propertys[1]), ',',\r\n        Strings.toString(_NftPropertys[tokenId].propertys[2]), ',',\r\n        Strings.toString(_NftPropertys[tokenId].propertys[3]), ','\r\n        ));\r\n    string memory json3 = string(abi.encodePacked(\r\n        Strings.toString(_NftPropertys[tokenId].propertys[4]), ',',\r\n        Strings.toString(_NftPropertys[tokenId].propertys[5]), ',',\r\n        Strings.toString(_NftPropertys[tokenId].propertys[6]), ']'\r\n        ));\r\n    string memory jsonAll = string(abi.encodePacked(\r\n        json1,json2,json3,'}'\r\n        ));\r\n    return jsonAll;\r\n  }\r\n\r\n  function getPathUsdtToFBX() private view returns (address[] memory) {\r\n     address[] memory path = new address[](2);\r\n     path[0] = address(FBXToken);\r\n     path[1] = usdtAddress;\r\n     return path;\r\n   }\r\n   function getPathUsdtToForth() private view returns (address[] memory) {\r\n      address[] memory path = new address[](2);\r\n      path[0] = address(ForthToken);\r\n      path[1] = usdtAddress;\r\n      return path;\r\n    }\r\n  function getUsdtFBXForthPrice() public view returns (uint256,uint256) {\r\n      uint256[] memory price1 = pancakeRouter01.getAmountsOut(10**18,getPathUsdtToFBX());\r\n      uint256[] memory price2 = pancakeRouter01.getAmountsOut(10**18,getPathUsdtToForth());\r\n      return (price1[1],price2[1]);\r\n  }\r\n  function getUsdtFBXPrice() public view returns (uint256) {\r\n      uint256[] memory price1 = pancakeRouter01.getAmountsOut(10**18,getPathUsdtToFBX());\r\n      return price1[1];\r\n  }\r\n  function getFBXFeedingProportion(uint256 price) public view returns (uint256 ) {\r\n    if(!bChangePriceAuto){\r\n       return FBX_feedingProportion;\r\n    }else{\r\n        uint256 feedingProportion=85;\r\n        if(price<=15*10**15) {\r\n          feedingProportion = 90;\r\n          return feedingProportion;\r\n        }\r\n        if(price<=30*10**15){\r\n          feedingProportion = 80;\r\n          return feedingProportion;\r\n        }\r\n        if(price<=60*10**15){\r\n          feedingProportion = 70;\r\n          return feedingProportion;\r\n        }\r\n        if(price<=80*10**15){\r\n          feedingProportion = 60;\r\n          return feedingProportion;\r\n        }\r\n        if(price<=1*10**17){\r\n          feedingProportion = 50;\r\n          return feedingProportion;\r\n        }\r\n        if(price<=3*10**17){\r\n          feedingProportion = 40;\r\n          return feedingProportion;\r\n        }\r\n        if(price<=5*10**17){\r\n          feedingProportion = 30;\r\n          return feedingProportion;\r\n        }\r\n        if(price<=9*10**17){\r\n          feedingProportion = 20;\r\n          return feedingProportion;\r\n        }\r\n        feedingProportion = 10;\r\n        return feedingProportion;\r\n    }\r\n  }\r\n  function feedFBXForthPrice() public view returns (uint256,uint256) {\r\n    if(!bChangePriceAuto){\r\n       return (FeedFBXPrice,FeedForhtPrice);\r\n    }else{\r\n      uint256 tUsdt2FBX = 100*10**18;\r\n      uint256 tUsdt2Forth = 1*10**18;\r\n      (tUsdt2FBX,tUsdt2Forth) = getUsdtFBXForthPrice();\r\n      uint256 feedingProportion =  getFBXFeedingProportion(tUsdt2FBX);\r\n      uint256 tFeedFBXPrice = usdt_FeedPrice.mul(feedingProportion).div(100).mul(10**18).div(tUsdt2FBX);\r\n      uint256 tFeedFothPrice=100;\r\n      tFeedFothPrice = usdt_FeedPrice.mul(tFeedFothPrice.sub(feedingProportion)).div(100).mul(10**18).div(tUsdt2Forth);\r\n      return (tFeedFBXPrice,tFeedFothPrice);\r\n    }\r\n  }\r\n  function feedFBXOnlyPrice() public view returns (uint256) {\r\n    if(!bChangePriceAuto){\r\n       return FeedFBXPrice.mul(100).div(FBX_feedingProportion);\r\n    }else{\r\n      uint256 tFeedFBXPrice = usdt_FeedPrice.mul(10**18).div(getUsdtFBXPrice());\r\n      return tFeedFBXPrice;\r\n    }\r\n  }\r\n  function getParameters(address account) public view returns (uint256[] memory){\r\n      uint256[] memory paraList = new uint256[](uint256(8));\r\n      paraList[0]=totlaFeedUsdt;\r\n      uint256 tFeedFBXPrice;\r\n      uint256 tFeedForhtPrice;\r\n      (tFeedFBXPrice,tFeedForhtPrice) = feedFBXForthPrice();\r\n      paraList[1]=tFeedFBXPrice;\r\n      paraList[2]=tFeedForhtPrice;\r\n      paraList[3]=totalSupply();\r\n      paraList[4]=getBenefitsInvitation_FBX(account);\r\n      paraList[5]=getBenefitsInvitation_Forth(account);\r\n      paraList[6]=getInviterNum(account);\r\n      if(!bChangePriceAuto){\r\n        paraList[7]=FeedFBXPrice;\r\n      }else{\r\n        paraList[7]=getUsdtFBXPrice();\r\n      }\r\n      return paraList;\r\n  }\r\n\r\n  //---write---//\r\n  function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override {\r\n      super._beforeTokenTransfer(from, to, tokenId);\r\n  }\r\n  function _burn(uint256 tokenId) internal override(ERC721) {\r\n      super._burn(tokenId);\r\n      delete _NftPropertys[tokenId];\r\n  }\r\n  function burnNFT(uint256 tokenId) public returns (uint256) {\r\n      require(_msgSender() == ownerOf(tokenId),\"ForthBoxNFT: Only the owner of this Token could Burn It!\");\r\n      _burn(tokenId);\r\n      return tokenId;\r\n  }\r\n  function mintNFT_AddInviter(address Inviter) public returns (uint256) {\r\n      require(isWhiteContract(_msgSender()), \"ForthBoxNFT: Contract not in white list!\");\r\n      addInviters(Inviter);\r\n      return mintNFT();\r\n  }\r\n  function mintNFTs(uint256 num) public {\r\n      require(num<=100, \"ForthBoxNFT: num exceed 100!\");\r\n      require(isWhiteContract(_msgSender()), \"ForthBoxNFT: Contract not in white list!\");\r\n      for(uint256 i=0; i<num; ++i) {\r\n          _mintNFT();\r\n      }\r\n      return;\r\n  }\r\n  function mintNFT() public returns (uint256) {\r\n      require(isWhiteContract(_msgSender()), \"ForthBoxNFT: Contract not in white list!\");\r\n      return _mintNFT();\r\n  }\r\n  function _mintNFT() internal returns (uint256) {\r\n      _tokenIds.increment();\r\n      uint256 newItemId = _tokenIds.current();\r\n      _mint(_msgSender(), newItemId);\r\n      _NftPropertys[newItemId].value=0;\r\n      _mintNum[_msgSender()] = _mintNum[_msgSender()].add(1);\r\n      return newItemId;\r\n  }\r\n  function transNFT(address _to,uint256 tokenId) public returns (uint256) {\r\n      require(_msgSender() == ownerOf(tokenId),\"ForthBoxNFT: Only the owner of this Token could transfer It!\");\r\n      require(isWhiteContract(_msgSender()), \"ForthBoxNFT: Contract not in white list!\");\r\n      _transfer(_msgSender(),_to,tokenId);\r\n      return tokenId;\r\n  }\r\n\r\n  function feed_Foth_FBXs(uint256[] calldata tokenIds) nonReentrant public{\r\n      require(tokenIds.length<=100, \"ForthBoxNFT: num exceed 100!\");\r\n      require(isWhiteContract(_msgSender()), \"ForthBoxNFT: Contract not in white list!\");\r\n      _feedPay_Foth_FBX(tokenIds.length);\r\n      for(uint256 i=0; i<tokenIds.length; ++i) {\r\n          _feed_Foth_FBX(tokenIds[i]);\r\n      }\r\n      emit Feeds(_msgSender(), tokenIds);\r\n      return;\r\n  }\r\n  function feed_Foth_FBX(uint256 tokenId) nonReentrant public{\r\n      require(isWhiteContract(_msgSender()), \"ForthBoxNFT: Contract not in white list!\");\r\n      _feedPay_Foth_FBX(1);\r\n      _feed_Foth_FBX(tokenId);\r\n      emit Feed(_msgSender(), tokenId);\r\n      return;\r\n  }\r\n  function _feed_Foth_FBX(uint256 tokenId) internal{\r\n      if(_msgSender() != ownerOf(tokenId)){\r\n         if(bFreshDeFiNFT){\r\n           require(_msgSender() == DeFi_NFT_FBXToken.ownerTokenId(tokenId), \"ForthBoxNFT: 1 Only the owner of this Token could feed it\");\r\n         }\r\n         else{\r\n           require(_msgSender() == ownerOf(tokenId), \"ForthBoxNFT: 2 Only the owner of this Token could feed it\");\r\n         }\r\n      }\r\n      require(_exists(tokenId), \"ERC721: Existent ID\");\r\n      require(block.timestamp >= _NftPropertys[tokenId].lastUpdateTime + 12*3600,\"ForthBoxNFT: onwer can only feed once in 12 hours!\");\r\n      require(_NftPropertys[tokenId].value<maxValue, \"ForthBoxNFT: exceed max Degree\");\r\n\r\n     _NftPropertys[tokenId].value=_NftPropertys[tokenId].value.add(1);\r\n     _NftPropertys[tokenId].lastUpdateTime = block.timestamp;\r\n\r\n     if(bFreshDeFiNFT && _msgSender() != ownerOf(tokenId)){\r\n        DeFi_NFT_FBXToken.stakeFresh(_msgSender(),tokenId);\r\n     }\r\n     return ;\r\n  }\r\n  function _feedPay_Foth_FBX(uint256 num) internal{\r\n     uint256 tFeedFBXPrice;\r\n     uint256 tFeedForhtPrice;\r\n     (tFeedFBXPrice,tFeedForhtPrice) = feedFBXForthPrice();\r\n     tFeedFBXPrice = tFeedFBXPrice.mul(num);\r\n     tFeedForhtPrice = tFeedForhtPrice.mul(num);\r\n     address address1 =  _inviters[_msgSender()].inviter;\r\n     if(address1==address(0)){\r\n         FBXToken.safeTransferFrom(_msgSender(), address(0), tFeedFBXPrice);\r\n         ForthToken.safeTransferFrom(_msgSender(), FundAdress, tFeedForhtPrice);\r\n     }\r\n     else{\r\n       address address2 =  _inviters[address1].inviter;\r\n       if(address2==address(0))\r\n       {\r\n           FBXToken.safeTransferFrom(_msgSender(), address1, tFeedFBXPrice.mul(10).div(100));\r\n           FBXToken.safeTransferFrom(_msgSender(), address(0), tFeedFBXPrice.mul(90).div(100));\r\n\r\n           ForthToken.safeTransferFrom(_msgSender(), address1, tFeedForhtPrice.mul(10).div(100));\r\n           ForthToken.safeTransferFrom(_msgSender(), FundAdress, tFeedForhtPrice.mul(90).div(100));\r\n\r\n           _inviters[address1].benefitsInvitation_FBX = _inviters[address1].benefitsInvitation_FBX.add(tFeedFBXPrice.mul(10).div(100));\r\n           _inviters[address1].benefitsInvitation_Forth = _inviters[address1].benefitsInvitation_Forth.add(tFeedForhtPrice.mul(10).div(100));\r\n       }\r\n       else\r\n       {\r\n         FBXToken.safeTransferFrom(_msgSender(), address1, tFeedFBXPrice.mul(10).div(100));\r\n         FBXToken.safeTransferFrom(_msgSender(), address2, tFeedFBXPrice.mul(5).div(100));\r\n         FBXToken.safeTransferFrom(_msgSender(),address(0),tFeedFBXPrice.mul(85).div(100));\r\n\r\n         ForthToken.safeTransferFrom(_msgSender(), address1, tFeedForhtPrice.mul(10).div(100));\r\n         ForthToken.safeTransferFrom(_msgSender(), address2, tFeedForhtPrice.mul(5).div(100));\r\n         ForthToken.safeTransferFrom(_msgSender(), FundAdress,tFeedForhtPrice.mul(85).div(100));\r\n\r\n         _inviters[address1].benefitsInvitation_FBX = _inviters[address1].benefitsInvitation_FBX.add(tFeedFBXPrice.mul(10).div(100));\r\n         _inviters[address1].benefitsInvitation_Forth = _inviters[address1].benefitsInvitation_Forth.add(tFeedForhtPrice.mul(10).div(100));\r\n\r\n         _inviters[address2].benefitsInvitation_FBX = _inviters[address2].benefitsInvitation_FBX.add(tFeedFBXPrice.mul(5).div(100));\r\n         _inviters[address2].benefitsInvitation_Forth = _inviters[address2].benefitsInvitation_Forth.add(tFeedForhtPrice.mul(5).div(100));\r\n       }\r\n     }\r\n     totlaFeedUsdt =totlaFeedUsdt.add(usdt_FeedPrice.mul(num));\r\n  }\r\n  function upgrade_Propertys(uint256 tokenId,uint256 ith,uint256 degree) nonReentrant external{\r\n       require(_exists(tokenId), \"ForthBoxNFT: Existent ID\");\r\n       require(ith<7, \"ForthBoxNFT: Existent ith\");\r\n       require(isWhiteContract(_msgSender()), \"ForthBoxNFT: Contract not in white list!\");\r\n\r\n       FBXToken.safeTransferFrom(_msgSender(), FundAdress, upgradePropertysFBXPrice[ith].mul(degree));\r\n       _NftPropertys[tokenId].propertys[ith]=_NftPropertys[tokenId].propertys[ith].add(degree);\r\n       emit Upgrade_Propertys(_msgSender(),tokenId,ith,degree);\r\n  }\r\n  function addInviters(address Inviter) internal{\r\n       require(_msgSender() != Inviter,\"ForthBoxNFT: Inviter cannot be self!\");\r\n       require(Inviter != address(0), \"ForthBoxNFT: Inviter cannot be zero address!\");\r\n       require(isWhiteContract(_msgSender()), \"ForthBoxNFT: Contract not in white list!\");\r\n       if(_mintNum[_msgSender()] > 0) return;\r\n\r\n       if(_inviters[_msgSender()].inviter!= address(0) && _inviters[_inviters[_msgSender()].inviter].inviterNum>0){\r\n           _inviters[_inviters[_msgSender()].inviter].inviterNum = _inviters[_inviters[_msgSender()].inviter].inviterNum.sub(1);\r\n       }\r\n       _inviters[_msgSender()].inviter = Inviter;\r\n       _inviters[Inviter].inviterNum = _inviters[Inviter].inviterNum.add(1);\r\n       emit AddInviters(_msgSender(),Inviter);\r\n  }\r\n\r\n  //---write onlyOwner---//\r\n  function setTokens(address tFBXToken,address tForhToken,address fund_Adress) external onlyOwner {\r\n      FBXToken = IERC20(tFBXToken);\r\n      ForthToken = IERC20(tForhToken);\r\n      FundAdress = fund_Adress;\r\n  }\r\n  function setTokensDeFi(address tDeFi_NFT_FBXToken,bool tBFreshDeFiNFT) external onlyOwner {\r\n      DeFi_NFT_FBXToken = IStakingRewards(tDeFi_NFT_FBXToken);\r\n      bFreshDeFiNFT = tBFreshDeFiNFT;\r\n  }\r\n  function setChangePriceTokens(address tUsdtAddress,address tPancakeRouter01,bool tbChangePriceAuto) external onlyOwner {\r\n      usdtAddress = tUsdtAddress;\r\n      pancakeRouter01 = IUniswapV2Router01(tPancakeRouter01);\r\n      bChangePriceAuto = tbChangePriceAuto;\r\n  }\r\n  function setFeedUsdtPrice(uint256 tUsdt_FeedPrice) external onlyOwner {\r\n      usdt_FeedPrice = tUsdt_FeedPrice;\r\n  }\r\n  function setBaseURI(string memory baseURI_) external onlyOwner {\r\n      _baseURIextended = baseURI_;\r\n  }\r\n  function setImageAdress(string memory imageAdress) external onlyOwner {\r\n      _imageAdress = imageAdress;\r\n  }\r\n  function setFeed_Price(uint256 newFeedFBXPrice,uint256 newFeedFothPrice) onlyOwner public{\r\n      FeedFBXPrice = newFeedFBXPrice;\r\n      FeedForhtPrice = newFeedFothPrice;\r\n  }\r\n\r\n  function setupgradePropertysFBXPrice(uint256[] calldata FBXPriceArr) onlyOwner external{\r\n      require(FBXPriceArr.length==7, \"ForthBoxNFT:length of FBXPriceArr is not 7\");\r\n      for (uint256 i=0; i < FBXPriceArr.length; i++){\r\n          upgradePropertysFBXPrice[i]=FBXPriceArr[i];\r\n      }\r\n  }\r\n\r\n  function setFBX_feedingProportion(uint256 newFBX_feedingProportion) onlyOwner public{\r\n      FBX_feedingProportion = newFBX_feedingProportion;\r\n  }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Inviter\",\"type\":\"address\"}],\"name\":\"AddInviters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Feed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"Feeds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ith\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"degree\",\"type\":\"uint256\"}],\"name\":\"Upgrade_Propertys\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DeFi_NFT_FBXToken\",\"outputs\":[{\"internalType\":\"contract IStakingRewards\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FBXToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ForthToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FundAdress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhiteAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bChangePriceAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"bExistsID\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burnNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feedFBXForthPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feedFBXOnlyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"feed_Foth_FBX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"feed_Foth_FBXs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address1\",\"type\":\"address\"}],\"name\":\"getBenefitsInvitation_FBX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address1\",\"type\":\"address\"}],\"name\":\"getBenefitsInvitation_Forth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"getFBXFeedingProportion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getHashrateByTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address1\",\"type\":\"address\"}],\"name\":\"getInviterNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getLastUpdateTimeByTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getParameters\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIdArr\",\"type\":\"uint256[]\"}],\"name\":\"getPropertiesByTokenIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getPropertysByTokenId\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsdtFBXForthPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsdtFBXPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getValueByTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ith\",\"type\":\"uint256\"}],\"name\":\"getWhiteAccountIth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"WhiteAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhiteAccountNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhiteContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Inviter\",\"type\":\"address\"}],\"name\":\"mintNFT_AddInviter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"mintNFTs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeWhiteAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tUsdtAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tPancakeRouter01\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"tbChangePriceAuto\",\"type\":\"bool\"}],\"name\":\"setChangePriceTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFBX_feedingProportion\",\"type\":\"uint256\"}],\"name\":\"setFBX_feedingProportion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tUsdt_FeedPrice\",\"type\":\"uint256\"}],\"name\":\"setFeedUsdtPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFeedFBXPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newFeedFothPrice\",\"type\":\"uint256\"}],\"name\":\"setFeed_Price\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"imageAdress\",\"type\":\"string\"}],\"name\":\"setImageAdress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tFBXToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tForhToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fund_Adress\",\"type\":\"address\"}],\"name\":\"setTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tDeFi_NFT_FBXToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"tBFreshDeFiNFT\",\"type\":\"bool\"}],\"name\":\"setTokensDeFi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"FBXPriceArr\",\"type\":\"uint256[]\"}],\"name\":\"setupgradePropertysFBXPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"tokenOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totlaFeedUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"upgradePropertysFBXPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ith\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"degree\",\"type\":\"uint256\"}],\"name\":\"upgrade_Propertys\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt_FeedPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ForthBoxNFT", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://573ec608430329f04cff8a1d6fab57ad41452bfdc9c729bad7aaf10111a376f0"}