{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/marketNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n\\ninterface ISwapFeeRewardWithRB {\\n    function accrueRBFromMarket(\\n        address account,\\n        address fromToken,\\n        uint256 amount\\n    ) external;\\n}\\n\\ninterface ISmartChefMarket {\\n    function updateStakedTokens(address _user, uint256 amount) external;\\n}\\n\\n//BSW, BNB, WBNB, BUSD, USDT\\ncontract Market is ReentrancyGuard, Ownable, Pausable {\\n    using SafeERC20 for IERC20;\\n\\n    enum Side {\\n        Sell,\\n        Buy\\n    }\\n    enum OfferStatus {\\n        Open,\\n        Accepted,\\n        Cancelled\\n    }\\n\\n    struct RoyaltyStr {\\n        uint32 rate;\\n        address receiver;\\n        bool enable;\\n    }\\n\\n    uint256 constant MAX_DEFAULT_FEE = 1000; // max fee 10% (base 10000)\\n    uint256 public defaultFee = 100; //in base 10000 1%\\n    uint8 public maxUserTokenOnSellToReward = 3; //max count sell offers of nftForAccrualRB on which Rb accrual\\n    uint256 rewardDistributionSeller = 50; //Distribution reward between seller and buyer. Base 100\\n    address public treasuryAddress;\\n    ISwapFeeRewardWithRB feeRewardRB;\\n    ISmartChefMarket smartChefMarket;\\n    bool feeRewardRBIsEnabled = false; // Enable/disable accrue RB reward for trade NFT tokens from nftForAccrualRB list\\n    bool placementRewardEnabled = false; //Enable rewards for place NFT tokens on market\\n\\n    Offer[] public offers;\\n    mapping(IERC721 => mapping(uint256 => uint256)) public tokenSellOffers; // nft => tokenId => id\\n    mapping(address => mapping(IERC721 => mapping(uint256 => uint256))) public userBuyOffers; // user => nft => tokenId => id\\n    mapping(address => bool) public nftBlacklist; //add tokens on blackList\\n    mapping(address => bool) public nftForAccrualRB; //add tokens on which RobiBoost is accrual\\n    mapping(address => bool) public dealTokensWhitelist;\\n    mapping(address => uint256) public userFee; //User trade fee. if Zero - fee by default\\n    mapping(address => uint256) public tokensCount; //User`s number of tokens on sale: user => count\\n    mapping(address => RoyaltyStr) public royalty; //Royalty for NFT creator. NFTToken => royalty (base 10000)\\n\\n    struct Offer {\\n        uint256 tokenId;\\n        uint256 price;\\n        IERC20 dealToken;\\n        IERC721 nft;\\n        address user;\\n        address acceptUser;\\n        OfferStatus status;\\n        Side side;\\n    }\\n\\n    event NewOffer(\\n        address indexed user,\\n        IERC721 indexed nft,\\n        uint256 indexed tokenId,\\n        address dealToken,\\n        uint256 price,\\n        Side side,\\n        uint256 id\\n    );\\n\\n    event CancelOffer(uint256 indexed id);\\n    event AcceptOffer(uint256 indexed id, address indexed user, uint256 price);\\n    event NewTreasuryAddress(address _treasuryAddress);\\n    event NFTBlackListUpdate(address nft, bool state);\\n    event NFTAccrualListUpdate(address nft, bool state);\\n    event DealTokensWhiteListUpdate(address token, bool whiteListed);\\n    event NewUserFee(address user, uint256 fee);\\n    event SetRoyalty(\\n        address nftAddress,\\n        address royaltyReceiver,\\n        uint32 rate,\\n        bool enable\\n    );\\n\\n    constructor(\\n        address _treasuryAddress,\\n        ISwapFeeRewardWithRB _feeRewardRB\\n    ) {\\n        //NFT-01\\n        require(_treasuryAddress != address(0), \\\"Address cant be zero\\\");\\n        treasuryAddress = _treasuryAddress;\\n        feeRewardRB = _feeRewardRB;\\n        feeRewardRBIsEnabled = false;\\n        // take id(0) as placeholder\\n        offers.push(\\n            Offer({\\n                tokenId: 0,\\n                price: 0,\\n                nft: IERC721(address(0)),\\n                dealToken: IERC20(address(0)),\\n                user: address(0),\\n                acceptUser: address(0),\\n                status: OfferStatus.Cancelled,\\n                side: Side.Buy\\n            })\\n        );\\n    }\\n\\n\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n\\n    function enableRBFeeReward() public onlyOwner {\\n        feeRewardRBIsEnabled = true;\\n    }\\n\\n    function disableRBFeeReward() public onlyOwner {\\n        feeRewardRBIsEnabled = false;\\n    }\\n\\n    function enablePlacementReward() public onlyOwner {\\n        placementRewardEnabled = true;\\n    }\\n\\n    function disablePlacementReward() public onlyOwner {\\n        placementRewardEnabled = false;\\n    }\\n\\n    function setTreasuryAddress(address _treasuryAddress) public onlyOwner {\\n        //NFT-01\\n        require(_treasuryAddress != address(0), \\\"Address cant be zero\\\");\\n        treasuryAddress = _treasuryAddress;\\n        emit NewTreasuryAddress(_treasuryAddress);\\n    }\\n\\n    function setRewardDistributionSeller(uint256 _rewardDistributionSeller)\\n        public\\n        onlyOwner\\n    {\\n        require(\\n            _rewardDistributionSeller <= 100,\\n            \\\"Incorrect value Must be equal to or greater than 100\\\"\\n        );\\n        rewardDistributionSeller = _rewardDistributionSeller;\\n    }\\n\\n    function setRoyalty(\\n        address nftAddress,\\n        address royaltyReceiver,\\n        uint32 rate,\\n        bool enable\\n    ) public onlyOwner {\\n        require(nftAddress != address(0), \\\"Address cant be zero\\\");\\n        require(royaltyReceiver != address(0), \\\"Address cant be zero\\\");\\n        require(rate < 10000, \\\"Rate must be less than 10000\\\");\\n        royalty[nftAddress].receiver = royaltyReceiver;\\n        royalty[nftAddress].rate = rate;\\n        royalty[nftAddress].enable = enable;\\n        emit SetRoyalty(nftAddress, royaltyReceiver, rate, enable);\\n    }\\n\\n    function addBlackListNFT(address[] calldata nfts) public onlyOwner {\\n        for (uint256 i = 0; i < nfts.length; i++) {\\n            nftBlacklist[nfts[i]] = true;\\n            emit NFTBlackListUpdate(nfts[i], true);\\n        }\\n    }\\n\\n    function delBlackListNFT(address[] calldata nfts) public onlyOwner {\\n        for (uint256 i = 0; i < nfts.length; i++) {\\n            delete nftBlacklist[nfts[i]];\\n            emit NFTBlackListUpdate(nfts[i], false);\\n        }\\n    }\\n\\n    function addWhiteListDealTokens(address[] calldata _tokens)\\n        public\\n        onlyOwner\\n    {\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            require(_tokens[i] != address(0), \\\"Address cant be 0\\\");\\n            dealTokensWhitelist[_tokens[i]] = true;\\n            emit DealTokensWhiteListUpdate(_tokens[i], true);\\n        }\\n    }\\n\\n    function delWhiteListDealTokens(address[] calldata _tokens)\\n        public\\n        onlyOwner\\n    {\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            delete dealTokensWhitelist[_tokens[i]];\\n            emit DealTokensWhiteListUpdate(_tokens[i], false);\\n        }\\n    }\\n\\n    function addNftForAccrualRB(address _nft) public onlyOwner {\\n        require(_nft != address(0), \\\"Address cant be zero\\\");\\n        nftForAccrualRB[_nft] = true;\\n        emit NFTAccrualListUpdate(_nft, true);\\n    }\\n\\n    function delNftForAccrualRB(address _nft) public onlyOwner {\\n        require(_nft != address(0), \\\"Address cant be zero\\\");\\n        delete nftForAccrualRB[_nft];\\n        emit NFTAccrualListUpdate(_nft, false);\\n    }\\n\\n    function setUserFee(address user, uint256 fee) public onlyOwner {\\n        userFee[user] = fee;\\n        emit NewUserFee(user, fee);\\n    }\\n\\n    function setDefaultFee(uint256 _newFee) public onlyOwner {\\n        require(\\n            _newFee <= MAX_DEFAULT_FEE,\\n            \\\"New fee must be less than or equal to max fee\\\"\\n        );\\n        defaultFee = _newFee;\\n    }\\n\\n    function SetMaxUserTokenOnSellToReward(uint8 newCount) public onlyOwner {\\n        maxUserTokenOnSellToReward = newCount;\\n    }\\n\\n    function setSmartChefMarket(ISmartChefMarket _smartChefMarket)\\n        public\\n        onlyOwner\\n    {\\n        require(address(_smartChefMarket) != address(0), \\\"Address cant be 0\\\");\\n        smartChefMarket = _smartChefMarket;\\n    }\\n\\n    function setFeeRewardRB(ISwapFeeRewardWithRB _feeRewardRB)\\n        public\\n        onlyOwner\\n    {\\n        require(address(_feeRewardRB) != address(0), \\\"Address cant be 0\\\");\\n        feeRewardRB = _feeRewardRB;\\n    }\\n\\n    // user functions\\n\\n    function offer(\\n        Side side,\\n        address dealToken,\\n        IERC721 nft,\\n        uint256 tokenId,\\n        uint256 price\\n    )\\n        public\\n        nonReentrant\\n        whenNotPaused\\n        _nftAllowed(nft)\\n        _validDealToken(dealToken)\\n        notContract\\n    {\\n        if (side == Side.Buy) {\\n            _offerBuy(nft, tokenId, price, dealToken);\\n        } else if (side == Side.Sell) {\\n            _offerSell(nft, tokenId, price, dealToken);\\n        } else {\\n            revert(\\\"Not supported\\\");\\n        }\\n    }\\n\\n    function accept(uint256 id)\\n        public\\n        nonReentrant\\n        _offerExists(id)\\n        _offerOpen(id)\\n        _notBlackListed(id)\\n        whenNotPaused\\n        notContract\\n    {\\n        if (offers[id].side == Side.Buy) {\\n            _acceptBuy(id);\\n        } else {\\n            _acceptSell(id);\\n        }\\n    }\\n\\n    function cancel(uint256 id)\\n        public\\n        nonReentrant\\n        _offerExists(id)\\n        _offerOpen(id)\\n        _offerOwner(id)\\n        whenNotPaused\\n    {\\n        if (offers[id].side == Side.Buy) {\\n            _cancelBuy(id);\\n        } else {\\n            _cancelSell(id);\\n        }\\n    }\\n\\n    function multiCancel(uint256[] calldata ids) public notContract {\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            cancel(ids[i]);\\n        }\\n    }\\n\\n    //increase: true - increase token to accrue rewards; false - decrease token from\\n    function placementRewardQualifier(\\n        bool increase,\\n        address user,\\n        address nftToken\\n    ) internal {\\n        //Check if nft token in nftForAccrualRB list and accrue reward enable\\n        if (!nftForAccrualRB[nftToken] || !placementRewardEnabled) return;\\n\\n        if (increase) {\\n            tokensCount[user]++;\\n        } else {\\n            tokensCount[user] = tokensCount[user] > 0\\n                ? tokensCount[user] - 1\\n                : 0;\\n        }\\n        if (tokensCount[user] > maxUserTokenOnSellToReward) return;\\n\\n        uint256 stakedAmount = tokensCount[user] >= maxUserTokenOnSellToReward\\n            ? maxUserTokenOnSellToReward\\n            : tokensCount[user];\\n        smartChefMarket.updateStakedTokens(user, stakedAmount);\\n    }\\n\\n    function _offerSell(\\n        IERC721 nft,\\n        uint256 tokenId,\\n        uint256 price,\\n        address dealToken\\n    ) internal {\\n        require(msg.value == 0, \\\"Seller should not pay\\\");\\n        require(price > 0, \\\"price > 0\\\");\\n        offers.push(\\n            Offer({\\n                tokenId: tokenId,\\n                price: price,\\n                dealToken: IERC20(dealToken),\\n                nft: nft,\\n                user: msg.sender,\\n                acceptUser: address(0),\\n                status: OfferStatus.Open,\\n                side: Side.Sell\\n            })\\n        );\\n\\n        uint256 id = offers.length - 1;\\n        emit NewOffer(\\n            msg.sender,\\n            nft,\\n            tokenId,\\n            dealToken,\\n            price,\\n            Side.Sell,\\n            id\\n        );\\n\\n        require(getTokenOwner(id) == msg.sender, \\\"sender should own the token\\\");\\n        require(isTokenApproved(id, msg.sender), \\\"token is not approved\\\");\\n\\n        if (tokenSellOffers[nft][tokenId] > 0) {\\n            _closeSellOfferFor(nft, tokenId);\\n        } else {\\n            placementRewardQualifier(true, msg.sender, address(nft));\\n        }\\n        tokenSellOffers[nft][tokenId] = id;\\n    }\\n\\n    function _offerBuy(\\n        IERC721 nft,\\n        uint256 tokenId,\\n        uint256 price,\\n        address dealToken\\n    ) internal {\\n        IERC20(dealToken).safeTransferFrom(msg.sender, address(this), price);\\n        require(price > 0, \\\"buyer should pay\\\");\\n        offers.push(\\n            Offer({\\n                tokenId: tokenId,\\n                price: price,\\n                dealToken: IERC20(dealToken),\\n                nft: nft,\\n                user: msg.sender,\\n                acceptUser: address(0),\\n                status: OfferStatus.Open,\\n                side: Side.Buy\\n            })\\n        );\\n        uint256 id = offers.length - 1;\\n        emit NewOffer(msg.sender, nft, tokenId, dealToken, price, Side.Buy, id);\\n        _closeUserBuyOffer(userBuyOffers[msg.sender][nft][tokenId]);\\n        userBuyOffers[msg.sender][nft][tokenId] = id;\\n    }\\n\\n    function _acceptBuy(uint256 id) internal {\\n        // caller is seller\\n        Offer storage _offer = offers[id];\\n        require(msg.value == 0, \\\"seller should not pay\\\");\\n\\n        require(getTokenOwner(id) == msg.sender, \\\"only owner can call\\\");\\n        require(isTokenApproved(id, msg.sender), \\\"token is not approved\\\");\\n        _offer.status = OfferStatus.Accepted;\\n        _offer.acceptUser = msg.sender;\\n\\n        _offer.nft.safeTransferFrom(msg.sender, _offer.user, _offer.tokenId);\\n        _distributePayment(_offer);\\n\\n        emit AcceptOffer(id, msg.sender, _offer.price);\\n        _unlinkBuyOffer(_offer);\\n        if (tokenSellOffers[_offer.nft][_offer.tokenId] > 0) {\\n            _closeSellOfferFor(_offer.nft, _offer.tokenId);\\n            //NFT-03\\n            placementRewardQualifier(false, msg.sender, address(_offer.nft));\\n        }\\n    }\\n\\n    function _acceptSell(uint256 id) internal {\\n        // caller is buyer\\n        Offer storage _offer = offers[id];\\n\\n        if (\\n            getTokenOwner(id) != _offer.user ||\\n            isTokenApproved(id, _offer.user) == false\\n        ) {\\n            _cancelSell(id);\\n            return;\\n        }\\n\\n        _offer.status = OfferStatus.Accepted;\\n        _offer.acceptUser = msg.sender;\\n        _unlinkSellOffer(_offer);\\n\\n        _offer.dealToken.safeTransferFrom(msg.sender, address(this), _offer.price);\\n        _distributePayment(_offer);\\n        _offer.nft.safeTransferFrom(_offer.user, msg.sender, _offer.tokenId);\\n        emit AcceptOffer(id, msg.sender, _offer.price);\\n    }\\n\\n    function _cancelSell(uint256 id) internal {\\n        Offer storage _offer = offers[id];\\n        require(_offer.status == OfferStatus.Open, \\\"Offer was cancelled\\\");\\n        _offer.status = OfferStatus.Cancelled;\\n        emit CancelOffer(id);\\n        _unlinkSellOffer(_offer);\\n    }\\n\\n    function _cancelBuy(uint256 id) internal {\\n        Offer storage _offer = offers[id];\\n        require(_offer.status == OfferStatus.Open, \\\"Offer was cancelled\\\");\\n        _offer.status = OfferStatus.Cancelled;\\n        _transfer(msg.sender, _offer.price, _offer.dealToken);\\n        emit CancelOffer(id);\\n        _unlinkBuyOffer(_offer);\\n    }\\n\\n    // modifiers\\n    modifier _validDealToken(address _token) {\\n        require(dealTokensWhitelist[_token], \\\"Deal token not available\\\");\\n        _;\\n    }\\n    modifier _offerExists(uint256 id) {\\n        require(id > 0 && id < offers.length, \\\"offer does not exist\\\");\\n        _;\\n    }\\n\\n    modifier _offerOpen(uint256 id) {\\n        require(offers[id].status == OfferStatus.Open, \\\"offer should be open\\\");\\n        _;\\n    }\\n\\n    modifier _offerOwner(uint256 id) {\\n        require(offers[id].user == msg.sender, \\\"call should own the offer\\\");\\n        _;\\n    }\\n\\n    modifier _notBlackListed(uint256 id) {\\n        Offer storage _offer = offers[id];\\n        require(!nftBlacklist[address(_offer.nft)], \\\"NFT in black list\\\");\\n        _;\\n    }\\n\\n    modifier _nftAllowed(IERC721 nft) {\\n        require(!nftBlacklist[address(nft)], \\\"NFT in black list\\\");\\n        _;\\n    }\\n\\n    modifier notContract() {\\n        require(!_isContract(msg.sender), \\\"Contract not allowed\\\");\\n        require(msg.sender == tx.origin, \\\"Proxy contract not allowed\\\");\\n        _;\\n    }\\n\\n    // internal functions\\n    function _transfer(\\n        address to,\\n        uint256 amount,\\n        IERC20 _dealToken\\n    ) internal {\\n        require(amount > 0 && to != address(0), \\\"Wrong amount or dest on transfer\\\");\\n        _dealToken.safeTransfer(to, amount);\\n    }\\n\\n    function _distributePayment(Offer memory _offer) internal {\\n        (address seller, address buyer) = _offer.side == Side.Sell\\n            ? (_offer.user, _offer.acceptUser)\\n            : (_offer.acceptUser, _offer.user);\\n        uint256 feeRate = userFee[seller] == 0 ? defaultFee : userFee[seller];\\n        uint256 fee = (_offer.price * feeRate) / 10000;\\n        uint256 royaltyFee = 0;\\n        if (royalty[address(_offer.nft)].enable) {\\n            royaltyFee =\\n                (_offer.price * royalty[address(_offer.nft)].rate) /\\n                10000;\\n            _transfer(\\n                royalty[address(_offer.nft)].receiver,\\n                royaltyFee,\\n                _offer.dealToken\\n            );\\n        }\\n        _transfer(treasuryAddress, fee, _offer.dealToken);\\n        _transfer(seller, _offer.price - fee - royaltyFee, _offer.dealToken);\\n        if (feeRewardRBIsEnabled && nftForAccrualRB[address(_offer.nft)]) {\\n            feeRewardRB.accrueRBFromMarket(\\n                seller,\\n                address(_offer.dealToken),\\n                (fee * rewardDistributionSeller) / 100\\n            );\\n            feeRewardRB.accrueRBFromMarket(\\n                buyer,\\n                address(_offer.dealToken),\\n                (fee * (100 - rewardDistributionSeller)) / 100\\n            );\\n        }\\n    }\\n\\n    function _closeSellOfferFor(IERC721 nft, uint256 tokenId) internal {\\n        uint256 id = tokenSellOffers[nft][tokenId];\\n        if (id == 0) return;\\n\\n        // closes old open sell offer\\n        Offer storage _offer = offers[id];\\n        _offer.status = OfferStatus.Cancelled;\\n        tokenSellOffers[_offer.nft][_offer.tokenId] = 0;\\n        emit CancelOffer(id);\\n    }\\n\\n    function _closeUserBuyOffer(uint256 id) internal {\\n        Offer storage _offer = offers[id];\\n        if (\\n            id > 0 &&\\n            _offer.status == OfferStatus.Open &&\\n            _offer.side == Side.Buy\\n        ) {\\n            _offer.status = OfferStatus.Cancelled;\\n            _transfer(_offer.user, _offer.price, _offer.dealToken);\\n            _unlinkBuyOffer(_offer);\\n            emit CancelOffer(id);\\n        }\\n    }\\n\\n    function _unlinkBuyOffer(Offer storage o) internal {\\n        userBuyOffers[o.user][o.nft][o.tokenId] = 0;\\n    }\\n\\n    function _unlinkSellOffer(Offer storage o) internal {\\n        placementRewardQualifier(false, o.user, address(o.nft));\\n        tokenSellOffers[o.nft][o.tokenId] = 0;\\n    }\\n\\n    // helpers\\n\\n    function isValidSell(uint256 id) public view returns (bool) {\\n        if (id >= offers.length) {\\n            return false;\\n        }\\n\\n        Offer storage _offer = offers[id];\\n        // try to not throw exception\\n        return\\n            _offer.status == OfferStatus.Open &&\\n            _offer.side == Side.Sell &&\\n            isTokenApproved(id, _offer.user) &&\\n            (_offer.nft.ownerOf(_offer.tokenId) == _offer.user);\\n    }\\n\\n    function isTokenApproved(uint256 id, address owner)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        Offer storage _offer = offers[id];\\n        return\\n            _offer.nft.getApproved(_offer.tokenId) == address(this) ||\\n            _offer.nft.isApprovedForAll(owner, address(this));\\n    }\\n\\n    function getTokenOwner(uint256 id) public view returns (address) {\\n        Offer storage _offer = offers[id];\\n        return _offer.nft.ownerOf(_offer.tokenId);\\n    }\\n\\n    function _isContract(address _addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return size > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"},{\"internalType\":\"contract ISwapFeeRewardWithRB\",\"name\":\"_feeRewardRB\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"AcceptOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"CancelOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"whiteListed\",\"type\":\"bool\"}],\"name\":\"DealTokensWhiteListUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"NFTAccrualListUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"NFTBlackListUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC721\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dealToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Market.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"NewOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"}],\"name\":\"NewTreasuryAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"NewUserFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"royaltyReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"rate\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"SetRoyalty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newCount\",\"type\":\"uint8\"}],\"name\":\"SetMaxUserTokenOnSellToReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"accept\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"nfts\",\"type\":\"address[]\"}],\"name\":\"addBlackListNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"}],\"name\":\"addNftForAccrualRB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"addWhiteListDealTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"dealTokensWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"nfts\",\"type\":\"address[]\"}],\"name\":\"delBlackListNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"}],\"name\":\"delNftForAccrualRB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"delWhiteListDealTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disablePlacementReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableRBFeeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enablePlacementReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableRBFeeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getTokenOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"isTokenApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isValidSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxUserTokenOnSellToReward\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"multiCancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nftBlacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nftForAccrualRB\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Market.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"dealToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC721\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"offer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"offers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"dealToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC721\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"acceptUser\",\"type\":\"address\"},{\"internalType\":\"enum Market.OfferStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Market.Side\",\"name\":\"side\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"royalty\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"rate\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setDefaultFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwapFeeRewardWithRB\",\"name\":\"_feeRewardRB\",\"type\":\"address\"}],\"name\":\"setFeeRewardRB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardDistributionSeller\",\"type\":\"uint256\"}],\"name\":\"setRewardDistributionSeller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"royaltyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"rate\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISmartChefMarket\",\"name\":\"_smartChefMarket\",\"type\":\"address\"}],\"name\":\"setSmartChefMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"}],\"name\":\"setTreasuryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setUserFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenSellOffers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userBuyOffers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Market", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000006332da1565f0135e7b7daa41c419106af93274ba00000000000000000000000004efd76283a70334c72bb4015e90d034b9f3d245", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}