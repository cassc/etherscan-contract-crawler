{"SourceCode": "// SPDX-License-Identifier: MIT License\r\npragma solidity ^0.8.10;\r\n\r\ncontract GoldMiner {\r\n    uint256 private GOLDS_TO_HATCH_1MINERS = 1066000;\r\n    uint256 private PSN = 10000;\r\n    uint256 private PSNH = 5000;\r\n    bool private seeded = false;\r\n\r\n    uint256 private ref_div_1k = 100;\r\n    uint256 private dev_fee_div_1k = 5;\r\n    uint256 private marketing_fee_div_1k = 5;\r\n    uint256 private project_fee_div_1k = 5;\r\n    address payable dev_address;\r\n    address payable marketing_address;\r\n    address payable project_address;\r\n\r\n    mapping(address => uint256) private goldMiners;\r\n    mapping(address => uint256) private claimedGold;\r\n    mapping(address => uint256) private lastHarvest;\r\n    mapping(address => address) private referrals;\r\n    uint256 private marketGolds;\r\n\r\n    event GoldBought(uint256 value);\r\n    event GoldSold(uint256 value);\r\n\r\n    constructor(\r\n        address payable _dev_address,\r\n        address payable _marketing_address,\r\n        address payable _project_address\r\n    ) {\r\n        require(!isContract(_dev_address));\r\n        require(!isContract(_marketing_address));\r\n        require(!isContract(_project_address));\r\n        dev_address = _dev_address;\r\n        marketing_address = _marketing_address;\r\n        project_address = _project_address;\r\n    }\r\n\r\n    function harvestGolds(address ref) public {\r\n        require(seeded);\r\n\r\n        if (ref == msg.sender) {\r\n            ref = address(0);\r\n        }\r\n\r\n        if (\r\n            referrals[msg.sender] == address(0) &&\r\n            referrals[msg.sender] != msg.sender\r\n        ) {\r\n            referrals[msg.sender] = ref;\r\n        }\r\n\r\n        uint256 goldsUsed = getMyGolds();\r\n        uint256 newMiners = goldsUsed / GOLDS_TO_HATCH_1MINERS;\r\n        goldMiners[msg.sender] += newMiners;\r\n        claimedGold[msg.sender] = 0;\r\n        lastHarvest[msg.sender] = block.timestamp;\r\n\r\n        //send referral golds\r\n        claimedGold[referrals[msg.sender]] += (goldsUsed * ref_div_1k) / 1000;\r\n\r\n        //boost market to nerf miners hoarding\r\n        marketGolds += goldsUsed / 5;\r\n    }\r\n\r\n    function sellGolds() public {\r\n        require(seeded);\r\n        uint256 hasGolds = getMyGolds();\r\n        uint256 goldValue = calculateGoldSell(hasGolds);\r\n        if (getBalance() < goldValue) {\r\n            goldValue = getBalance();\r\n        }\r\n        uint256 fee1 = dev_fee(goldValue);\r\n        uint256 fee2 = marketing_fee(goldValue);\r\n        uint256 fee3 = project_fee(goldValue);\r\n        dev_address.transfer(fee1);\r\n        marketing_address.transfer(fee2);\r\n        project_address.transfer(fee3);\r\n\r\n        claimedGold[msg.sender] = 0;\r\n        lastHarvest[msg.sender] = block.timestamp;\r\n        marketGolds = marketGolds + hasGolds;\r\n        payable(msg.sender).transfer(goldValue - fee1 - fee2 - fee3);\r\n        emit GoldSold(goldValue);\r\n    }\r\n\r\n    function seedMarket(uint256 _marketGolds) public payable {\r\n        require(dev_address == msg.sender);\r\n        seeded = true;\r\n        marketGolds = _marketGolds;\r\n    }\r\n\r\n    function buyGolds(address ref) public payable {\r\n        if (!seeded) {\r\n            if (msg.sender == dev_address) {\r\n                seedMarket(108000000);\r\n            } else revert(\"Contract not yet started.\");\r\n        }\r\n        uint256 goldsBought = calculateGoldBuy(\r\n            msg.value,\r\n            address(this).balance - msg.value\r\n        );\r\n        uint256 fee1 = dev_fee(msg.value);\r\n        uint256 fee2 = marketing_fee(msg.value);\r\n        uint256 fee3 = project_fee(msg.value);\r\n\r\n        dev_address.transfer(fee1);\r\n        marketing_address.transfer(fee2);\r\n        project_address.transfer(fee3);\r\n\r\n        claimedGold[msg.sender] += goldsBought;\r\n        emit GoldBought(msg.value);\r\n        harvestGolds(ref);\r\n    }\r\n\r\n    //magic trade balancing algorithm\r\n    function calculateTrade(\r\n        uint256 input,\r\n        uint256 reserve_input,\r\n        uint256 reserve_output\r\n    ) private view returns (uint256) {\r\n        return\r\n            (PSN * reserve_output) /\r\n            ((PSNH * reserve_input) /\r\n                (reserve_input + PSNH) +\r\n                (PSN * reserve_input) /\r\n                input +\r\n                1);\r\n    }\r\n\r\n    function calculateGoldSell(uint256 rubies) public view returns (uint256) {\r\n        return calculateTrade(rubies, marketGolds, address(this).balance);\r\n    }\r\n\r\n    function calculateGoldBuy(uint256 eth, uint256 contractBalance)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return calculateTrade(eth, contractBalance, marketGolds);\r\n    }\r\n\r\n    function calculateGoldBuySimple(uint256 eth) public view returns (uint256) {\r\n        return calculateGoldBuy(eth, address(this).balance);\r\n    }\r\n\r\n    function dev_fee(uint256 amount) private view returns (uint256) {\r\n        return (amount * dev_fee_div_1k) / 1000;\r\n    }\r\n\r\n    function marketing_fee(uint256 amount) private view returns (uint256) {\r\n        return (amount * marketing_fee_div_1k) / 1000;\r\n    }\r\n\r\n    function project_fee(uint256 amount) private view returns (uint256) {\r\n        return (amount * project_fee_div_1k) / 1000;\r\n    }\r\n\r\n    function getBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getMyMiners() public view returns (uint256) {\r\n        return goldMiners[msg.sender];\r\n    }\r\n\r\n    function getMyGolds() public view returns (uint256) {\r\n        return claimedGold[msg.sender] + getGoldsSinceLastHarvest(msg.sender);\r\n    }\r\n\r\n    function getGoldsSinceLastHarvest(address adr)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 secondsPassed = min(\r\n            GOLDS_TO_HATCH_1MINERS,\r\n            block.timestamp - lastHarvest[adr]\r\n        );\r\n        return secondsPassed * goldMiners[adr];\r\n    }\r\n\r\n    function goldRewards() public view returns (uint256) {\r\n        uint256 hasGolds = getMyGolds();\r\n        uint256 goldsValue = calculateGoldSell(hasGolds);\r\n        return goldsValue;\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function isContract(address addr) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(addr)\r\n        }\r\n        return size > 0;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_dev_address\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_marketing_address\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_project_address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"GoldBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"GoldSold\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"buyGolds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateGoldBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateGoldBuySimple\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rubies\",\"type\":\"uint256\"}],\"name\":\"calculateGoldSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getGoldsSinceLastHarvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyGolds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyMiners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goldRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"harvestGolds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketGolds\",\"type\":\"uint256\"}],\"name\":\"seedMarket\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellGolds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GoldMiner", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000004a6201302edc476aaafbb0e75fea0861a9dac1ca000000000000000000000000642796b88e670121eed3c5399a6a7131220e6a63000000000000000000000000190fbdee6d154235273bf27f8faee9680b3351f1", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://59232e300f64e73ceca35af9ba020cd74f50b21bcd55c7a9a07945cb842976b8"}