{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/tabooPresale.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.4;\\n\\n// SPDX-License-Identifier: Unlicensed\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\nabstract contract ReentrancyGuard {\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n        return c;\\n    }\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\\ninterface IProviderPair {\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112,\\n            uint112,\\n            uint32\\n        );\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n}\\n\\ncontract TabooPresale is ReentrancyGuard, Ownable {\\n    using SafeMath for uint256;\\n\\n    IERC20 public _token = IERC20(0x9abDbA20EdFbA06B782126b4D8d72A5853918FD0);\\n    IERC20 public _WBNB = IERC20(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);\\n    IERC20 public _BUSD = IERC20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);\\n    IERC20 public _ETH = IERC20(0x2170Ed0880ac9A755fd29B2688956BD959F933F8);\\n    IERC20 public _MATIC = IERC20(0xCC42724C6683B7E57334c4E856f4c9965ED682bD);\\n    IERC20 public _BTC = IERC20(0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c);\\n    IERC20 public _ADA = IERC20(0x3EE2200Efb3400fAbB9AacF31297cBdD1d435D47);\\n    IERC20 public _DOGE = IERC20(0xbA2aE424d960c26247Dd6c32edC70B295c744C43);\\n    IERC20 public _CHAINLINK =\\n        IERC20(0xF8A0BF9cF54Bb92F17374d9e9A321E6a111a51bD);\\n    IERC20 public _USDC = IERC20(0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d);\\n    IERC20 public _USDT = IERC20(0x55d398326f99059fF775485246999027B3197955);\\n    IERC20 public _UNI = IERC20(0xBf5140A22578168FD562DCcF235E5D43A02ce9B1);\\n\\n    IProviderPair public TokenBnb =\\n        IProviderPair(0xb4E7b227D344c8BA1604Ae241898E02dA3d1Fe63);\\n    IProviderPair public BusdBnb =\\n        IProviderPair(0xDc558D64c29721d74C4456CfB4363a6e6660A9Bb);\\n    IProviderPair public BusdEth =\\n        IProviderPair(0x7213a321F1855CF1779f42c0CD85d3D95291D34C);\\n    IProviderPair public BnbMatic =\\n        IProviderPair(0x3B09e13Ca9189FBD6a196cfE5FbD477C885afBf3);\\n    IProviderPair public BusdBtc =\\n        IProviderPair(0xF45cd219aEF8618A92BAa7aD848364a158a24F33);\\n    IProviderPair public BusdAda =\\n        IProviderPair(0x1E249DF2F58cBef7EAc2b0EE35964ED8311D5623);\\n    IProviderPair public BusdDoge =\\n        IProviderPair(0xE27859308ae2424506D1ac7BF5bcb92D6a73e211);\\n    IProviderPair public BnbChain =\\n        IProviderPair(0x16Fe21c91c426E603977b1C6EcD59Fc510a518C2);\\n    IProviderPair public BnbUni =\\n        IProviderPair(0x014608E87AF97a054C9a49f81E1473076D51d9a3);\\n    uint256 private _tokenDecimals = 9;\\n\\n    address payable public _wallet;\\n    address payable public _outGoingWallet;\\n    uint256 public _minAmount;\\n\\n    event TokensPurchased(\\n        address purchaser,\\n        address beneficiary,\\n        uint256 value,\\n        uint256 amount\\n    );\\n\\n    constructor(\\n        address payable wallet,\\n        address payable outGoingWallet,\\n        uint256 minAmount\\n    ) {\\n        require(wallet != address(0), \\\"Pre-Sale: wallet is the zero address\\\");\\n        require(\\n            outGoingWallet != address(0),\\n            \\\"Pre-Sale: wallet is the zero address\\\"\\n        );\\n        _wallet = wallet;\\n        _outGoingWallet = outGoingWallet;\\n        _minAmount = minAmount;\\n    }\\n\\n    receive() external payable {\\n        // React to receiving ether\\n    }\\n\\n    function AddProvider(\\n        IProviderPair _TokenBnb,\\n        IProviderPair _BusdBnb,\\n        IProviderPair _BusdEth,\\n        IProviderPair _BusdBtc,\\n        IProviderPair _BnbMatic,\\n        IProviderPair _BusdAda,\\n        IProviderPair _BusdDoge,\\n        IProviderPair _BnbChain,\\n        IProviderPair _BnbUni\\n    ) external onlyOwner {\\n        TokenBnb = _TokenBnb;\\n        BusdBnb = _BusdBnb;\\n        BusdEth = _BusdEth;\\n        BusdBtc = _BusdBtc;\\n        BnbMatic = _BnbMatic;\\n        BusdAda = _BusdAda;\\n        BusdDoge = _BusdDoge;\\n        BnbChain = _BnbChain;\\n        BnbUni = _BnbUni;\\n    }\\n\\n    //Pre-Sale\\n    function buyTokensBNB(address _beneficiary) public payable nonReentrant {\\n        uint256 bnbAmount = msg.value;\\n        (bool success, ) = payable(_wallet).call{value: bnbAmount}(\\\"\\\");\\n        require(success);\\n        uint256 tokens = _getTokenAmount(bnbAmount);\\n        require(tokens >= _minAmount,\\\"Please buy tokens above the minimum limit\\\");\\n        _token.transferFrom(_outGoingWallet, _beneficiary, tokens);\\n        emit TokensPurchased(_msgSender(), _beneficiary, bnbAmount, tokens);\\n    }\\n\\n    function buyTokensBUSD(address _beneficiary, uint256 _BUSDAmount)\\n        public\\n        nonReentrant\\n    {\\n        _BUSD.transferFrom(msg.sender, _wallet, _BUSDAmount);\\n        uint256 tokens = _getTokenAmountBUSD(_BUSDAmount);\\n        require(tokens >= _minAmount,\\\"Please buy tokens above the minimum limit\\\");\\n        _token.transferFrom(_outGoingWallet, _beneficiary, tokens);\\n        emit TokensPurchased(_msgSender(), _beneficiary, _BUSDAmount, tokens);\\n    }\\n\\n    function buyTokensUSDC(address _beneficiary, uint256 _USDCAmount)\\n        public\\n        nonReentrant\\n    {\\n        _USDC.transferFrom(msg.sender, _wallet, _USDCAmount);\\n        uint256 tokens = _getTokenAmountUSDC(_USDCAmount);\\n        require(tokens >= _minAmount,\\\"Please buy tokens above the minimum limit\\\");\\n        _token.transferFrom(_outGoingWallet, _beneficiary, tokens);\\n        emit TokensPurchased(_msgSender(), _beneficiary, _USDCAmount, tokens);\\n    }\\n\\n    function buyTokensUSDT(address _beneficiary, uint256 _USDTAmount)\\n        public\\n        nonReentrant\\n    {\\n        _USDT.transferFrom(msg.sender, _wallet, _USDTAmount);\\n        uint256 tokens = _getTokenAmountUSDT(_USDTAmount);\\n        require(tokens >= _minAmount,\\\"Please buy tokens above the minimum limit\\\");\\n        _token.transferFrom(_outGoingWallet, _beneficiary, tokens);\\n        emit TokensPurchased(_msgSender(), _beneficiary, _USDTAmount, tokens);\\n    }\\n\\n    function buyTokensETH(address _beneficiary, uint256 _ETHAmount)\\n        public\\n        nonReentrant\\n    {\\n        _ETH.transferFrom(msg.sender, _wallet, _ETHAmount);\\n        uint256 tokens = _getTokenAmountETH(_ETHAmount);\\n        require(tokens >= _minAmount,\\\"Please buy tokens above the minimum limit\\\");\\n        _token.transferFrom(_outGoingWallet, _beneficiary, tokens);\\n        emit TokensPurchased(_msgSender(), _beneficiary, _ETHAmount, tokens);\\n    }\\n\\n    function buyTokensBTC(address _beneficiary, uint256 _BTCAmount)\\n        public\\n        nonReentrant\\n    {\\n        _BTC.transferFrom(msg.sender, _wallet, _BTCAmount);\\n        uint256 tokens = _getTokenAmountBTC(_BTCAmount);\\n        require(tokens >= _minAmount,\\\"Please buy tokens above the minimum limit\\\");\\n        _token.transferFrom(_outGoingWallet, _beneficiary, tokens);\\n        emit TokensPurchased(_msgSender(), _beneficiary, _BTCAmount, tokens);\\n    }\\n\\n    function buyTokensMATIC(address _beneficiary, uint256 _MATICAmount)\\n        public\\n        nonReentrant\\n    {\\n        _MATIC.transferFrom(msg.sender, _wallet, _MATICAmount);\\n        uint256 tokens = _getTokenAmountMATIC(_MATICAmount);\\n        require(tokens >= _minAmount,\\\"Please buy tokens above the minimum limit\\\");\\n        _token.transferFrom(_outGoingWallet, _beneficiary, tokens);\\n        emit TokensPurchased(_msgSender(), _beneficiary, _MATICAmount, tokens);\\n    }\\n\\n    function buyTokensADA(address _beneficiary, uint256 _ADAAmount)\\n        public\\n        nonReentrant\\n    {\\n        _ADA.transferFrom(msg.sender, _wallet, _ADAAmount);\\n        uint256 tokens = _getTokenAmountADA(_ADAAmount);\\n        require(tokens >= _minAmount,\\\"Please buy tokens above the minimum limit\\\");\\n        _token.transferFrom(_outGoingWallet, _beneficiary, tokens);\\n        emit TokensPurchased(_msgSender(), _beneficiary, _ADAAmount, tokens);\\n    }\\n\\n    function buyTokensDOGE(address _beneficiary, uint256 _DOGEAmount)\\n        public\\n        nonReentrant\\n    {\\n        _DOGE.transferFrom(msg.sender, _wallet, _DOGEAmount);\\n        uint256 tokens = _getTokenAmountDOGE(_DOGEAmount * (10**10));\\n        require(tokens >= _minAmount,\\\"Please buy tokens above the minimum limit\\\");\\n        _token.transferFrom(_outGoingWallet, _beneficiary, tokens);\\n        emit TokensPurchased(_msgSender(), _beneficiary, _DOGEAmount, tokens);\\n    }\\n\\n    function buyTokensCHAIN(address _beneficiary, uint256 _CHAINAmount)\\n        public\\n        nonReentrant\\n    {\\n        _CHAINLINK.transferFrom(msg.sender, _wallet, _CHAINAmount);\\n        uint256 tokens = _getTokenAmountCHAIN(_CHAINAmount);\\n        require(tokens >= _minAmount,\\\"Please buy tokens above the minimum limit\\\");\\n        _token.transferFrom(_outGoingWallet, _beneficiary, tokens);\\n        emit TokensPurchased(_msgSender(), _beneficiary, _CHAINAmount, tokens);\\n    }\\n\\n    function buyTokensUNI(address _beneficiary, uint256 _UNIAmount)\\n        public\\n        nonReentrant\\n    {\\n        _UNI.transferFrom(msg.sender, _wallet, _UNIAmount);\\n        uint256 tokens = _getTokenAmountUNI(_UNIAmount);\\n        require(tokens >= _minAmount,\\\"Please buy tokens above the minimum limit\\\");\\n        _token.transferFrom(_outGoingWallet, _beneficiary, tokens);\\n        emit TokensPurchased(_msgSender(), _beneficiary, _UNIAmount, tokens);\\n    }\\n\\n    function withdrawBNB() external onlyOwner {\\n        (bool success, ) = payable(_wallet).call{value: address(this).balance}(\\n            \\\"\\\"\\n        );\\n        require(success);\\n    }\\n\\n    function setAddress(\\n        IERC20 token,\\n        IERC20 busd,\\n        IERC20 eth,\\n        IERC20 btc,\\n        IERC20 matic,\\n        IERC20 ada,\\n        IERC20 doge,\\n        IERC20 chainLink,\\n        IERC20 uni,\\n        IERC20 usdc,\\n        IERC20 usdt\\n    ) external onlyOwner {\\n        _BUSD = busd;\\n        _ETH = eth;\\n        _BTC = btc;\\n        _MATIC = matic;\\n        _ADA = ada;\\n        _DOGE = doge;\\n        _CHAINLINK = chainLink;\\n        _UNI = uni;\\n        _USDC = usdc;\\n        _USDT = usdt;\\n        _token = token;\\n    }\\n\\n    function setToken(IERC20 token) external onlyOwner {\\n        _token = token;\\n    }\\n\\n    function setMinAmount(uint256 minAmount) external onlyOwner {\\n        _minAmount = minAmount;\\n    }\\n\\n    function setWalletReceiver(\\n        address payable incommingWallet,\\n        address payable outGoingWallet\\n    ) external onlyOwner {\\n        _wallet = incommingWallet;\\n        _outGoingWallet = outGoingWallet;\\n    }\\n\\n    function takeTokens(IERC20 _TokenAddress) public onlyOwner {\\n        IERC20 tokenBEP = _TokenAddress;\\n        uint256 tokenAmt = tokenBEP.balanceOf(address(this));\\n        require(tokenAmt > 0, \\\"BEP-20 balance is 0\\\");\\n        tokenBEP.transfer(_wallet, tokenAmt);\\n    }\\n\\n    function _getTokenAmount(uint256 _bnbAmount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _bnbAmount.mul(bnbRate()).div(10**9);\\n    }\\n\\n    function _getTokenAmountBUSD(uint256 _busdAmount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _busdAmount.mul(getTabooPrice()).div(10**9);\\n    }\\n\\n    function _getTokenAmountETH(uint256 _ethAmount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _ethAmount.mul(ethRate()).div(10**9);\\n    }\\n\\n    function _getTokenAmountBTC(uint256 _btcAmount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _btcAmount.mul(btcRate()).div(10**9);\\n    }\\n\\n    function _getTokenAmountMATIC(uint256 _maticAmount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _maticAmount.mul(maticRate()).div(10**9);\\n    }\\n\\n    function _getTokenAmountDOGE(uint256 _dogeAmount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _dogeAmount.mul(dogeRate()).div(10**9);\\n    }\\n\\n    function _getTokenAmountADA(uint256 _adaAmount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _adaAmount.mul(adaRate()).div(10**9);\\n    }\\n\\n    function _getTokenAmountCHAIN(uint256 _chainAmount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _chainAmount.mul(chainRate()).div(10**9);\\n    }\\n\\n    function _getTokenAmountUNI(uint256 _uniAmount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _uniAmount.mul(uniRate()).div(10**9);\\n    }\\n\\n    function _getTokenAmountUSDC(uint256 _usdcAmount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _usdcAmount.mul(getTabooPrice()).div(10**9);\\n    }\\n\\n    function _getTokenAmountUSDT(uint256 _usdtAmount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _usdtAmount.mul(getTabooPrice()).div(10**9);\\n    }\\n\\n    function getPriceData(IProviderPair _pairAddress)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint112 reserve0;\\n        uint112 reserve1;\\n        uint32 timestamp;\\n        uint256 exchangeRate;\\n        (reserve0, reserve1, timestamp) = IProviderPair(_pairAddress)\\n            .getReserves();\\n        address token0 = IProviderPair(_pairAddress).token0();\\n        if (token0 == address(_BUSD)) {\\n            exchangeRate = (uint256((uint256(reserve0) * (10**9)) / uint256(reserve1)));\\n        } else {\\n            exchangeRate = (uint256((uint256(reserve1) * (10**9)) / uint256(reserve0)));\\n        }\\n        return (exchangeRate);\\n    }\\n\\n    function getPriceDataBnb(IProviderPair _pairAddress)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint112 reserve0;\\n        uint112 reserve1;\\n        uint32 timestamp;\\n        uint256 exchangeRate;\\n        (reserve0, reserve1, timestamp) = IProviderPair(_pairAddress)\\n            .getReserves();\\n        address token0 = IProviderPair(_pairAddress).token0();\\n        if (token0 == address(_WBNB)) {\\n            exchangeRate = (uint256((uint256(reserve0) * (10**9)) / uint256(reserve1)));\\n        } else {\\n            exchangeRate = (uint256((uint256(reserve1) * (10**9)) / uint256(reserve0)));\\n        }\\n        return (exchangeRate);\\n    }\\n\\n    function getTabooPrice() public view returns (uint256) {\\n        uint112 reserve0;\\n        uint112 reserve1;\\n        uint32 timestamp;\\n        uint256 exchangeRate;\\n        (reserve0, reserve1, timestamp) = IProviderPair(TokenBnb).getReserves();\\n        address token0 = IProviderPair(TokenBnb).token0();\\n        if (token0 == address(_token)) {\\n            exchangeRate = (uint256((uint256(reserve0) * (10**18)) / uint256(reserve1)));\\n        } else {\\n            exchangeRate = (uint256((uint256(reserve1) * (10**18)) / uint256(reserve0)));\\n        }\\n        uint256 bnbPrice = getPriceData(BusdBnb);\\n        exchangeRate = (exchangeRate * 1e9) / bnbPrice;\\n        return (exchangeRate);\\n    }\\n\\n    function bnbRate() public view returns (uint256) {\\n        uint256 bnbrate = (getPriceData(BusdBnb).mul(getTabooPrice())).div(\\n            10**9\\n        );\\n        return (bnbrate);\\n    }\\n\\n    function ethRate() public view returns (uint256) {\\n        uint256 ethrate = (getPriceData(BusdEth).mul(getTabooPrice())).div(\\n            10**9\\n        );\\n        return (ethrate);\\n    }\\n\\n    function btcRate() public view returns (uint256) {\\n        uint256 btcrate = (getPriceData(BusdBtc).mul(getTabooPrice())).div(\\n            10**9\\n        );\\n        return (btcrate);\\n    }\\n\\n    function maticRate() public view returns (uint256) {\\n        uint256 maticrate = (\\n            getPriceDataBnb(BnbMatic).mul(getPriceData(BusdBnb)).mul(\\n                getTabooPrice()\\n            )\\n        ).div(10**18);\\n        return (maticrate);\\n    }\\n\\n    function adaRate() public view returns (uint256) {\\n        uint256 adarate = (getPriceData(BusdAda).mul(getTabooPrice())).div(\\n            10**9\\n        );\\n        return (adarate);\\n    }\\n\\n    function dogeRate() public view returns (uint256) {\\n        uint256 dogerate = (\\n            (getPriceData(BusdDoge).div(10**10)).mul(getTabooPrice())\\n        ).div(10**9);\\n        return (dogerate);\\n    }\\n\\n    function chainRate() public view returns (uint256) {\\n        uint256 chainlinkrate = (\\n            getPriceDataBnb(BnbChain).mul(getPriceData(BusdBnb)).mul(\\n                getTabooPrice()\\n            )\\n        ).div(10**18);\\n        return (chainlinkrate);\\n    }\\n\\n    function uniRate() public view returns (uint256) {\\n        uint256 unirate = (\\n            getPriceDataBnb(BnbUni).mul(getPriceData(BusdBnb)).mul(\\n                getTabooPrice()\\n            )\\n        ).div(10**18);\\n        return (unirate);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"outGoingWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IProviderPair\",\"name\":\"_TokenBnb\",\"type\":\"address\"},{\"internalType\":\"contract IProviderPair\",\"name\":\"_BusdBnb\",\"type\":\"address\"},{\"internalType\":\"contract IProviderPair\",\"name\":\"_BusdEth\",\"type\":\"address\"},{\"internalType\":\"contract IProviderPair\",\"name\":\"_BusdBtc\",\"type\":\"address\"},{\"internalType\":\"contract IProviderPair\",\"name\":\"_BnbMatic\",\"type\":\"address\"},{\"internalType\":\"contract IProviderPair\",\"name\":\"_BusdAda\",\"type\":\"address\"},{\"internalType\":\"contract IProviderPair\",\"name\":\"_BusdDoge\",\"type\":\"address\"},{\"internalType\":\"contract IProviderPair\",\"name\":\"_BnbChain\",\"type\":\"address\"},{\"internalType\":\"contract IProviderPair\",\"name\":\"_BnbUni\",\"type\":\"address\"}],\"name\":\"AddProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BnbChain\",\"outputs\":[{\"internalType\":\"contract IProviderPair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BnbMatic\",\"outputs\":[{\"internalType\":\"contract IProviderPair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BnbUni\",\"outputs\":[{\"internalType\":\"contract IProviderPair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BusdAda\",\"outputs\":[{\"internalType\":\"contract IProviderPair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BusdBnb\",\"outputs\":[{\"internalType\":\"contract IProviderPair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BusdBtc\",\"outputs\":[{\"internalType\":\"contract IProviderPair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BusdDoge\",\"outputs\":[{\"internalType\":\"contract IProviderPair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BusdEth\",\"outputs\":[{\"internalType\":\"contract IProviderPair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TokenBnb\",\"outputs\":[{\"internalType\":\"contract IProviderPair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ADA\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_BTC\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_BUSD\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_CHAINLINK\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_DOGE\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ETH\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_MATIC\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_UNI\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_USDC\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_USDT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_WBNB\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_outGoingWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_wallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adaRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bnbRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"btcRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ADAAmount\",\"type\":\"uint256\"}],\"name\":\"buyTokensADA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokensBNB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_BTCAmount\",\"type\":\"uint256\"}],\"name\":\"buyTokensBTC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_BUSDAmount\",\"type\":\"uint256\"}],\"name\":\"buyTokensBUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_CHAINAmount\",\"type\":\"uint256\"}],\"name\":\"buyTokensCHAIN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_DOGEAmount\",\"type\":\"uint256\"}],\"name\":\"buyTokensDOGE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ETHAmount\",\"type\":\"uint256\"}],\"name\":\"buyTokensETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_MATICAmount\",\"type\":\"uint256\"}],\"name\":\"buyTokensMATIC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_UNIAmount\",\"type\":\"uint256\"}],\"name\":\"buyTokensUNI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_USDCAmount\",\"type\":\"uint256\"}],\"name\":\"buyTokensUSDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_USDTAmount\",\"type\":\"uint256\"}],\"name\":\"buyTokensUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dogeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProviderPair\",\"name\":\"_pairAddress\",\"type\":\"address\"}],\"name\":\"getPriceData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProviderPair\",\"name\":\"_pairAddress\",\"type\":\"address\"}],\"name\":\"getPriceDataBnb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTabooPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maticRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"busd\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"eth\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"btc\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"matic\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"ada\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"doge\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"chainLink\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"uni\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"usdc\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"usdt\",\"type\":\"address\"}],\"name\":\"setAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"setMinAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"incommingWallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"outGoingWallet\",\"type\":\"address\"}],\"name\":\"setWalletReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_TokenAddress\",\"type\":\"address\"}],\"name\":\"takeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TabooPresale", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000295ce0ed279a6158db987bfeec5b3e51b6e421fa00000000000000000000000093d714f3ab9f37dc8fadac85255fc4ccd6addc080000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}