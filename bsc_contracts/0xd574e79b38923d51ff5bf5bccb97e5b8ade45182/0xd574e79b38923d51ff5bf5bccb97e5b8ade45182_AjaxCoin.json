{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.7;\r\n\r\ncontract Callable {\r\n\r\n    address payable private _context;\r\n    address private _creator;\r\n\r\n    constructor() { \r\n        _context = payable(address(this));\r\n        _creator = msg.sender;\r\n        emit CreateContext(_context, _creator);\r\n    }\r\n\r\n    function _contextAddress() internal view returns (address payable) {\r\n        return _context;\r\n    }\r\n\r\n    function _contextCreator() internal view returns (address) {\r\n        return _creator;\r\n    }\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n\r\n    function _msgTimestamp() internal view returns (uint256) {\r\n        this;\r\n        return block.timestamp;\r\n    }\r\n\r\n    receive() external payable { }\r\n\r\n    event CreateContext(address contextAddress, address contextCreator);\r\n}\r\n\r\ncontract Manageable is Callable {\r\n    address private _executiveManager;\r\n    mapping(address => bool) private _isManager;\r\n    address[] private _managers;\r\n\r\n    bool private _managementIsLocked = false;\r\n    uint256 private _managementUnlockTime = 0;\r\n    uint256 private _maxNumberOfManagers = 10;\r\n\r\n    constructor () {\r\n        _executiveManager = _contextCreator();\r\n        _isManager[_executiveManager] = true;\r\n        _managers.push(_executiveManager);\r\n\r\n        emit ManagerAdded(_executiveManager);\r\n        emit ExecutiveManagerChanged(address(0), _executiveManager);\r\n    }\r\n\r\n    function executiveManager() public view returns (address) {\r\n        return _executiveManager;\r\n    }\r\n\r\n    function isManager(address account) public view returns (bool) {\r\n        return _isManager[account];\r\n    }\r\n\r\n    function managementIsLocked() public view returns (bool) {\r\n        return _managementIsLocked;\r\n    }\r\n\r\n    function timeToManagementUnlock() public view returns (uint256) {\r\n        return block.timestamp >= _managementUnlockTime ? 0 : _managementUnlockTime - block.timestamp;\r\n    }\r\n    \r\n    function addManager(address newManager) public onlyExecutive() returns (bool) {\r\n        require(!_isManager[newManager], \"Account is already a manager\");\r\n        require(newManager != address(0), \"0 address cannot be made manager\");\r\n        require(_managers.length <= _maxNumberOfManagers, \"max number of managers reached\");\r\n\r\n        _isManager[newManager] = true;\r\n        _managers.push(newManager);\r\n\r\n        emit ManagerAdded(newManager);\r\n\r\n        return true;\r\n    }\r\n\r\n    function removeManager(address managerToRemove) public onlyExecutive() returns (bool) {\r\n        require(_isManager[managerToRemove], \"Account is already not a manager\");\r\n        require(managerToRemove != _executiveManager, \"Executive manager cannot be removed\");\r\n\r\n        _isManager[managerToRemove] = false;\r\n        for(uint256 i = 0; i < _managers.length; i++) {\r\n            if(_managers[i] == managerToRemove){\r\n                _managers[i] = _managers[_managers.length - 1];\r\n                _managers.pop();\r\n                break;\r\n            }\r\n        }\r\n\r\n        emit ManagerRemoved(managerToRemove);\r\n\r\n        return true;\r\n    }\r\n\r\n    function changeExecutiveManager(address newExecutiveManager) public onlyExecutive() returns (bool) {\r\n        require(newExecutiveManager != _executiveManager, \"Manager is already the executive\");\r\n\r\n        if(!_isManager[newExecutiveManager]){\r\n            _isManager[newExecutiveManager] = true;\r\n            emit ManagerAdded(newExecutiveManager);\r\n        }\r\n        _executiveManager = newExecutiveManager;\r\n\r\n        emit ExecutiveManagerChanged(_executiveManager, newExecutiveManager);\r\n\r\n        return true;\r\n    }\r\n\r\n    function lockManagement(uint256 lockDuration) public onlyExecutive() returns (bool) {\r\n        _managementIsLocked = true;\r\n        _managementUnlockTime = block.timestamp + lockDuration;\r\n\r\n        emit ManagementLocked(lockDuration);\r\n\r\n        return true;\r\n    }\r\n\r\n    function unlockManagement() public onlyExecutive() returns (bool) {\r\n        _managementIsLocked = false;\r\n        _managementUnlockTime = 0;\r\n\r\n        emit ManagementUnlocked();\r\n\r\n        return true;\r\n    }\r\n\r\n    function renounceManagement() public onlyExecutive() returns (bool) {\r\n        while(_managers.length > 0) {\r\n            _isManager[_managers[_managers.length - 1]] = false;\r\n\r\n            emit ManagerRemoved(_managers[_managers.length - 1]);\r\n\r\n            if(_managers[_managers.length - 1] == _executiveManager){\r\n                emit ExecutiveManagerChanged(_executiveManager, address(0));\r\n                _executiveManager = address(0);\r\n            }\r\n\r\n            _managers.pop();\r\n        }\r\n\r\n        emit ManagementRenounced();\r\n\r\n        return true;\r\n    }\r\n\r\n    event ManagerAdded(address addedManager);\r\n    event ManagerRemoved(address removedManager);\r\n    event ExecutiveManagerChanged(address indexed previousExecutiveManager, address indexed newExecutiveManager);\r\n    event ManagementLocked(uint256 lockDuration);\r\n    event ManagementUnlocked();\r\n    event ManagementRenounced();\r\n\r\n    modifier onlyExecutive() {\r\n        require(_msgSender() == _executiveManager, \"Caller is not the executive manager\");\r\n        require(!_managementIsLocked || block.timestamp >= _managementUnlockTime, \"Management is locked\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyManagement() {\r\n        require(_isManager[_msgSender()], \"Caller is not a manager\");\r\n        require(!_managementIsLocked, \"Management is locked\");\r\n        _;\r\n    }\r\n}\r\n\r\ninterface IBEP20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\nlibrary SackMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if(b >= a){\r\n            return 0;\r\n        }\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0 || b == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"division by zero\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n}\r\n\r\ncontract AjaxCoin is IBEP20, Manageable {\r\n    using SackMath for uint256;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n\r\n    string private _name = \"Ajax Coin\";\r\n    string private _symbol = \"AJAX\";\r\n    uint8 private _decimals = 9;\r\n    uint256 private _totalSupply = 2000000000000 * 10**_decimals;\r\n\r\n    uint256 private _burnTotal = 0;\r\n\r\n    mapping (address => uint256) private _owned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    bool public _areLimitsEnabled = false;\r\n    mapping (address => bool) private _isExcludedFromLimits;\r\n    uint256 public _maxTransferAmount = _totalSupply.mul(3).div(1000);\r\n\r\n    bool public _areFeesEnabled = true;\r\n    mapping (address => bool) private _isExcludedFromFees;\r\n    uint256 public _managementFeePercentage = 5;\r\n\r\n    address[] private _managementFeesReceivers;\r\n    mapping (address => bool) private _isManagementFeesReceiver;\r\n    uint256 private _maxNumberManagementFeesReceivers = 5;\r\n\r\n    bool public _isAutoManagementFeeDistributionEnabled = true;\r\n    uint256 private _minPendingFeesForDistribution = 50000 * 10**_decimals;\r\n    uint256 private _autoDistributeFactor = 1000;\r\n    uint256 private _managementFeesPendingDistribution = 0;\r\n\r\n    address public _deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    bool private _isDistributingFees = false;\r\n    \r\n    constructor() {\r\n        _isExcludedFromFees[_contextAddress()] = true;\r\n        _isExcludedFromLimits[_contextAddress()] = true;\r\n\r\n        _isExcludedFromFees[_deadAddress] = true;\r\n        _isExcludedFromLimits[_deadAddress] = true;\r\n\r\n        _isExcludedFromFees[_msgSender()] = true;\r\n        _isExcludedFromLimits[_msgSender()] = true;\r\n\r\n        _owned[_msgSender()] = _totalSupply;\r\n\r\n        _managementFeesReceivers.push(_msgSender());\r\n        _isManagementFeesReceiver[_msgSender()] = true;\r\n\r\n        emit Mint(_totalSupply);\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n\r\n    function name() public override view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public override view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public override view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public override view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function totalBurned() public view returns (uint256) {\r\n        return _burnTotal;\r\n    }\r\n\r\n    function getOwner() public view returns (address) {\r\n        return executiveManager();\r\n    }\r\n\r\n    function balanceOf(address account) public override view returns (uint256) {\r\n        return _owned[account];\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public override view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address owner, address to, uint256 amount) public override returns (bool) {\r\n        _transfer(owner, to, amount);\r\n        _approve(owner, _msgSender(), _allowances[owner][_msgSender()].sub(amount, \"transfer amount exceeds spender's allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(amount));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 amount) public returns (bool) {\r\n        if(amount <= _allowances[_msgSender()][spender]){\r\n            _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(amount));\r\n        } else {\r\n            _approve(_msgSender(), spender, 0);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function isExcludedFromFees(address account) public view returns (bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n\r\n    function isExcludedFromLimits(address account) public view returns (bool) {\r\n        return _isExcludedFromLimits[account];\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"cannot approve allowance from the zero address\");\r\n        require(spender != address(0), \"cannot approve allowance to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0) && to != address(0), \"cannot transfer tokens from or to the zero address\");\r\n        require(to != _deadAddress, \"Cannot transfer to dead address. Use Burn function instead.\");\r\n        require(amount <= _maxTransferAmount || !_areLimitsEnabled || _isExcludedFromLimits[from] || _isExcludedFromLimits[to], \"transfer amount exceeds transaction limit\");\r\n        require(amount > 0, \"Transfer amount must be bigger than 0\");\r\n\r\n        uint256 fromAccountBalance = balanceOf(from);\r\n        require(fromAccountBalance >= amount, \"insufficent from account token balance\");\r\n\r\n        uint256 managementFeeAmount = _calculateManagementFees(from, to, amount);\r\n\r\n        uint256 transferAmount = amount.sub(managementFeeAmount);\r\n\r\n        require (transferAmount > 0, \"Amount of transfer is to small\");\r\n\r\n        _transferManagementFeesIfNecessary(from, to, managementFeeAmount);\r\n\r\n        _distributeFeesIfNecessary();\r\n        \r\n        _owned[from] = _owned[from].sub(amount);\r\n        _owned[to] = _owned[to].add(transferAmount);\r\n\r\n        emit Transfer(from, to, transferAmount);\r\n    }\r\n\r\n    function _calculateManagementFees(address from, address to, uint256 amount) private view returns (uint256){\r\n        uint256 managementFeeAmount = 0;\r\n        if(_areFeesEnabled && !(_isExcludedFromFees[from] || _isExcludedFromFees[to])) {\r\n            managementFeeAmount = amount.mul(_managementFeePercentage).div(1000);\r\n        }\r\n\r\n        return managementFeeAmount;\r\n    }\r\n\r\n    function _distributeFeesIfNecessary() private {\r\n        if (!_isDistributingFees) {\r\n            if(_isAutoManagementFeeDistributionEnabled && _managementFeesPendingDistribution >= _minPendingFeesForDistribution) {\r\n                _distributeFees(_autoDistributeFactor);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _transferManagementFeesIfNecessary(address from, address to, uint256 managementFeeAmount) private {\r\n        if(_areFeesEnabled && !(_isExcludedFromFees[to] || _isExcludedFromFees[from])){\r\n            _owned[_contextAddress()] = _owned[_contextAddress()].add(managementFeeAmount);\r\n            \r\n            emit Transfer(from, _contextAddress(), managementFeeAmount);\r\n            \r\n            _managementFeesPendingDistribution = _managementFeesPendingDistribution.add(managementFeeAmount);\r\n        }\r\n    }\r\n\r\n    function _distributeFees(uint256 liquifyFactor) private internalSwapLock() {\r\n        require(liquifyFactor <= 1000, \"liquify factor cannot exceed 100 percent\");\r\n        require(_managementFeesReceivers.length > 0, \"no managers to distribute fees\");\r\n\r\n        uint256 feesToDistribute = _managementFeesPendingDistribution.mul(liquifyFactor).div(1000);\r\n        \r\n        _managementFeesPendingDistribution = _managementFeesPendingDistribution.sub(feesToDistribute);\r\n\r\n        uint256 individualFeesAmount = feesToDistribute.div(_managementFeesReceivers.length);\r\n\r\n        _owned[_contextAddress()] = _owned[_contextAddress()].sub(feesToDistribute);\r\n\r\n        for(uint256 i = 0; i < _managementFeesReceivers.length; i++){\r\n            _owned[_managementFeesReceivers[i]] = _owned[_managementFeesReceivers[i]].add(individualFeesAmount);\r\n        }\r\n    }\r\n\r\n    function excludeFromFees(address account) public onlyManagement() returns (bool) {\r\n        _isExcludedFromFees[account] = true;\r\n        return true;\r\n    }\r\n\r\n    function includeInFees(address account) public onlyManagement() returns (bool) {\r\n        require(account != _contextAddress(), \"cannot include token address in fees\");\r\n        require(account != _deadAddress, \"cannot include dead address in fees\");\r\n        _isExcludedFromFees[account] = false;\r\n        return true;\r\n    }\r\n\r\n    function excludeFromLimits(address account) public onlyManagement() returns (bool) {\r\n        _isExcludedFromLimits[account] = true;\r\n        return true;\r\n    }\r\n\r\n    function includeInLimits(address account) public onlyManagement() returns (bool) {\r\n        require(account != _contextAddress(), \"cannot include token address in limits\");\r\n        require(account != _deadAddress, \"cannot include dead address in limits\");\r\n        _isExcludedFromLimits[account] = false;\r\n        return true;\r\n    }\r\n\r\n    function addManagementFeesReciever(address managementFeesReciever) public onlyManagement() returns (bool) {\r\n        require(!_isManagementFeesReceiver[managementFeesReciever], \"address is already a management fees reciever\");\r\n        require(_managementFeesReceivers.length <= _maxNumberManagementFeesReceivers, \"max number of management fees recievers already reached\");\r\n        _managementFeesReceivers.push(managementFeesReciever);\r\n        _isManagementFeesReceiver[managementFeesReciever] = true;\r\n        return true;\r\n    }\r\n\r\n    function isManagementFeesReceiver(address userAddress) public view onlyManagement() returns (bool) {\r\n        return _isManagementFeesReceiver[userAddress];\r\n    }\r\n\r\n    function getManagementFeesPendingDistribution() public view onlyManagement() returns (uint256) {\r\n        return _managementFeesPendingDistribution;\r\n    }\r\n\r\n    function removeManagementFeesReciever(address managementFeesReciever) public onlyManagement() returns (bool) {\r\n        require(_isManagementFeesReceiver[managementFeesReciever], \"address is already not a management fees reciever\");\r\n        require(_managementFeesReceivers.length > 1, \"can't have no managers\");\r\n        for(uint256 i = 0; i < _managementFeesReceivers.length; i++) {\r\n            if(_managementFeesReceivers[i] == managementFeesReciever){\r\n                _managementFeesReceivers[i] = _managementFeesReceivers[_managementFeesReceivers.length - 1];\r\n                _isManagementFeesReceiver[managementFeesReciever] = false;\r\n                _managementFeesReceivers.pop();\r\n                break;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function setFeesEnabled(bool areFeesEnabled) public onlyManagement() returns (bool) {\r\n        _areFeesEnabled = areFeesEnabled;\r\n        if(!areFeesEnabled){\r\n            _isAutoManagementFeeDistributionEnabled = false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function setFeesEnabled(bool areFeesEnabled, bool isAutoFeeDistributeEnabled) public onlyManagement() returns (bool) {\r\n        _areFeesEnabled = areFeesEnabled;\r\n        if(!areFeesEnabled){\r\n            _isAutoManagementFeeDistributionEnabled = false;\r\n        } else {\r\n            _isAutoManagementFeeDistributionEnabled = isAutoFeeDistributeEnabled;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function setManagementFee(uint256 managementFee) public onlyManagement() returns (bool) {\r\n        require(managementFee <= 200, \"total fees cannot exceed 20 percent\");\r\n        _managementFeePercentage = managementFee;\r\n        return true;\r\n    }\r\n\r\n    function setAutoManagementFeeDistributionEnabled(bool isAutoFeeDistributionEnabled) public onlyManagement() returns (bool) {\r\n        require(_areFeesEnabled || !isAutoFeeDistributionEnabled, \"fees must be enabled to enable auto fee liquify\");\r\n        _isAutoManagementFeeDistributionEnabled = isAutoFeeDistributionEnabled;\r\n        return true;\r\n    }\r\n\r\n    function setFeeDistributeFactor(uint256 autoDistributeFactor) public onlyManagement() returns (bool) {\r\n        require(autoDistributeFactor <= 1000, \"auto liquify factor cannot eceed 100 percent\");\r\n        _autoDistributeFactor = autoDistributeFactor;\r\n        return true;\r\n    }\r\n\r\n    function setMinPendingFeesForDistribution(uint256 minPendingFeesForDistrbution) public onlyManagement() returns (bool) {\r\n        _minPendingFeesForDistribution = minPendingFeesForDistrbution;\r\n        return true;\r\n    }\r\n\r\n    function setLimitsEnabled(bool areLimitsEnabled) public onlyManagement() returns (bool) {\r\n        _areLimitsEnabled = areLimitsEnabled;\r\n        return true;\r\n    }\r\n\r\n    function setMaxTransferAmount(uint256 maxTransferAmount) public onlyManagement() returns (bool) {\r\n        require(maxTransferAmount <= _totalSupply, \"max transfer amount cannot exceed token supply\");\r\n        _maxTransferAmount = maxTransferAmount;\r\n        return true;\r\n    }\r\n\r\n    function performManualFeeDistribution(uint256 distributeFactor) external onlyManagement() returns (bool) {\r\n        _distributeFees(distributeFactor);\r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 amount) external {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"Burn from the zero address\");\r\n        require(account != _deadAddress, \"Burn from the dead address\");\r\n        require(amount > 0, \"Amount must be bigger than zero.\");\r\n\r\n        _owned[account] = _owned[account].sub(amount);\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        _burnTotal = _burnTotal.add(amount);\r\n        emit Transfer(account, _deadAddress, amount);\r\n    }\r\n\r\n    function rescueBNB() external onlyExecutive() {\r\n        require(_contextAddress().balance > 0, \"Contract's balance is zero.\");\r\n\r\n        uint256 balance = _contextAddress().balance;\r\n        payable(msg.sender).transfer(balance);\r\n    }\r\n\r\n    function rescueCoin(address tokenContractAddress) external onlyExecutive() {\r\n        IBEP20 coinInstance = IBEP20(tokenContractAddress);\r\n        uint256 contractBalance = coinInstance.balanceOf(address(this));\r\n        if (contractBalance == 0) {\r\n            revert();\r\n        }\r\n        if (!coinInstance.transfer(msg.sender, contractBalance)) {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    modifier internalSwapLock() {\r\n        _isDistributingFees = true;\r\n        _;\r\n        _isDistributingFees = false;\r\n    }\r\n\r\n    event Mint(uint256 amountTokens);\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contextAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contextCreator\",\"type\":\"address\"}],\"name\":\"CreateContext\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousExecutiveManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newExecutiveManager\",\"type\":\"address\"}],\"name\":\"ExecutiveManagerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"}],\"name\":\"ManagementLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ManagementRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ManagementUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addedManager\",\"type\":\"address\"}],\"name\":\"ManagerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"removedManager\",\"type\":\"address\"}],\"name\":\"ManagerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_areFeesEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_areLimitsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_isAutoManagementFeeDistributionEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_managementFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTransferAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"managementFeesReciever\",\"type\":\"address\"}],\"name\":\"addManagementFeesReciever\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"addManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newExecutiveManager\",\"type\":\"address\"}],\"name\":\"changeExecutiveManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executiveManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getManagementFeesPendingDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"isManagementFeesReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"}],\"name\":\"lockManagement\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managementIsLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"distributeFactor\",\"type\":\"uint256\"}],\"name\":\"performManualFeeDistribution\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"managementFeesReciever\",\"type\":\"address\"}],\"name\":\"removeManagementFeesReciever\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"managerToRemove\",\"type\":\"address\"}],\"name\":\"removeManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceManagement\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"}],\"name\":\"rescueCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isAutoFeeDistributionEnabled\",\"type\":\"bool\"}],\"name\":\"setAutoManagementFeeDistributionEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"autoDistributeFactor\",\"type\":\"uint256\"}],\"name\":\"setFeeDistributeFactor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"areFeesEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isAutoFeeDistributeEnabled\",\"type\":\"bool\"}],\"name\":\"setFeesEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"areFeesEnabled\",\"type\":\"bool\"}],\"name\":\"setFeesEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"areLimitsEnabled\",\"type\":\"bool\"}],\"name\":\"setLimitsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"managementFee\",\"type\":\"uint256\"}],\"name\":\"setManagementFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTransferAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTransferAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minPendingFeesForDistrbution\",\"type\":\"uint256\"}],\"name\":\"setMinPendingFeesForDistribution\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeToManagementUnlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockManagement\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "AjaxCoin", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4d98585fdf2d2a17fa9458df11526f8e7106e4cd4463de7aeb245de6984c3f84"}