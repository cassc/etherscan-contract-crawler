{"SourceCode": "pragma solidity ^0.8.0;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IBEP20 {\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ncontract StakingContract {\r\n    using SafeMath for uint256;\r\n\r\n    struct Stake {\r\n        uint256 amount;\r\n        uint256 timestamp;\r\n        uint256 lastInterestAccruedTimestamp;\r\n        uint256 lockPeriod;\r\n        uint256 apr;\r\n        uint256 totalInterestPaid;\r\n    }\r\n\r\n    mapping(address => Stake) public stakes;\r\n    mapping(uint256 => uint256) public totalStakedPerLockPeriod;\r\n    IBEP20 public currencyToken;\r\n    address public owner;\r\n    uint256 public stakingOpenTimestamp;\r\n    uint256 public constant maxStakeAmount = 1e6 * 10**18;\r\n    mapping(uint256 => uint256) public quotaForLockPeriod;\r\n    event StakeDeposited(address indexed user, uint256 amount, uint256 timestamp);\r\n    event StakeWithdrawn(address indexed user, uint256 amount, uint256 timestamp);\r\n    event InterestWithdrawn(address indexed user, uint256 amount, uint256 timestamp);\r\n    event UnclaimedTokensRetrieved(address indexed owner, uint256 amount, uint256 timestamp);\r\n    uint256 percentageBase = 10000; \r\n\r\n    constructor() {\r\n        currencyToken = IBEP20(0xE02DEe9267E21A43E19658B50983102765594854);\r\n        owner = msg.sender;\r\n        stakingOpenTimestamp = block.timestamp.add(90 days);\r\n        \r\n        quotaForLockPeriod[7 days] = 1.5e6 * 10**18;   // 1.5M BRIUM for 7 days\r\n        quotaForLockPeriod[15 days] = 2.5e6 * 10**18;  // 2.5M BRIUM for 15 days\r\n        quotaForLockPeriod[30 days] = 4e6 * 10**18;    // 4M BRIUM for 30 days\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the contract owner can call this function\");\r\n        _;\r\n    }\r\n\r\n     function depositStake(uint256 _amount, uint256 _lockPeriod) external {\r\n        require(block.timestamp < stakingOpenTimestamp, \"Deposit period is over\");\r\n        require(_amount > 0 && _amount <= maxStakeAmount, \"Amount must be greater than 0 and less than or equal to the max stake amount\");\r\n        require(stakes[msg.sender].amount == 0, \"Existing stake found. Withdraw previous stake to deposit a new one.\");\r\n        require(_lockPeriod == 7 days || _lockPeriod == 15 days || _lockPeriod == 30 days, \"Invalid lock period, only 7, 15 or 30 days are allowed\");\r\n        \r\n        require(totalStakedPerLockPeriod[_lockPeriod].add(_amount) <= quotaForLockPeriod[_lockPeriod], \"The max staking limit for this lock period has been reached\");\r\n\r\n        uint256 apr;\r\n        if (_lockPeriod == 7 days) {\r\n            apr = 4575; \r\n        } else if (_lockPeriod == 15 days) {\r\n            apr = 2985; \r\n        } else if (_lockPeriod == 30 days) {\r\n            apr = 1750; \r\n        }\r\n\r\n        require(currencyToken.transferFrom(msg.sender, address(this), _amount), \"Token transfer failed\");\r\n\r\n        stakes[msg.sender] = Stake({\r\n            amount: _amount,\r\n            timestamp: block.timestamp,\r\n            lastInterestAccruedTimestamp: block.timestamp,\r\n            lockPeriod: _lockPeriod,\r\n            apr: apr,\r\n            totalInterestPaid: 0\r\n        });\r\n\r\n        totalStakedPerLockPeriod[_lockPeriod] = totalStakedPerLockPeriod[_lockPeriod].add(_amount);\r\n\r\n        emit StakeDeposited(msg.sender, _amount, block.timestamp);\r\n    }\r\n\r\n    function withdrawStake() external {\r\n        require(block.timestamp >= stakes[msg.sender].timestamp.add(stakes[msg.sender].lockPeriod), \"Lock period not yet expired\");\r\n        require(stakes[msg.sender].amount > 0, \"No stake found\");\r\n\r\n        uint256 stakeAmount = stakes[msg.sender].amount;\r\n\r\n        stakes[msg.sender].amount = 0;\r\n        totalStakedPerLockPeriod[stakes[msg.sender].lockPeriod] = totalStakedPerLockPeriod[stakes[msg.sender].lockPeriod].sub(stakeAmount);\r\n\r\n        require(currencyToken.transfer(msg.sender, stakeAmount), \"Token transfer failed\");\r\n\r\n        emit StakeWithdrawn(msg.sender, stakeAmount, block.timestamp);\r\n    }\r\n\r\n    function withdrawInterest() external {\r\n        Stake storage stake = stakes[msg.sender];\r\n        require(stake.amount > 0, \"No stake found\");\r\n\r\n        uint256 accruedInterest = calculateAccruedInterest(msg.sender);\r\n        require(accruedInterest > 0, \"No interest accrued\");\r\n\r\n        uint256 totalInterestForStake = stake.amount.mul(stake.apr).mul(stake.lockPeriod).div(365 days).div(percentageBase);\r\n        require(stake.totalInterestPaid.add(accruedInterest) <= totalInterestForStake, \"Total interest paid out cannot exceed the total interest for the lock period\");\r\n\r\n        require(currencyToken.balanceOf(address(this)) >= accruedInterest, \"Insufficient contract balance for interest\");\r\n\r\n        stake.lastInterestAccruedTimestamp = block.timestamp;\r\n        stake.totalInterestPaid = stake.totalInterestPaid.add(accruedInterest);\r\n\r\n        require(currencyToken.transfer(msg.sender, accruedInterest), \"Token transfer failed\");\r\n\r\n        emit InterestWithdrawn(msg.sender, accruedInterest, block.timestamp);\r\n    }\r\n\r\n    function remainingQuota(uint256 _lockPeriod) public view returns(uint256) {\r\n        return quotaForLockPeriod[_lockPeriod].sub(totalStakedPerLockPeriod[_lockPeriod]);\r\n    }\r\n\r\n     function calculateAccruedInterest(address _staker) public view returns(uint256) {\r\n        Stake memory stake = stakes[_staker];\r\n        uint256 timeElapsed = block.timestamp.sub(stake.lastInterestAccruedTimestamp);\r\n        if (timeElapsed > stake.lockPeriod) {\r\n            timeElapsed = stake.lockPeriod;\r\n        }\r\n        uint256 daysInYear = 365;  \r\n        uint256 interest = stake.amount.mul(stake.apr).mul(timeElapsed).div(daysInYear.mul(percentageBase));\r\n\r\n        uint256 totalInterestForStake = stake.amount.mul(stake.apr).mul(stake.lockPeriod).div(365 days).div(percentageBase);\r\n        uint256 remainingInterest = totalInterestForStake.sub(stake.totalInterestPaid);\r\n\r\n        if(interest > remainingInterest){\r\n            return remainingInterest;\r\n        }\r\n\r\n        return interest;\r\n    }\r\n\r\n    function canDeposit(uint256 _lockPeriod) public view returns(bool) {\r\n        if(block.timestamp < stakingOpenTimestamp && totalStakedPerLockPeriod[_lockPeriod] < quotaForLockPeriod[_lockPeriod]) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    function retrieveUnclaimedTokens() external onlyOwner {\r\n        require(block.timestamp >= stakingOpenTimestamp.add(90 days), \"Can only retrieve after 90 days of staking opening\");\r\n        uint256 balance = currencyToken.balanceOf(address(this));\r\n        require(currencyToken.transfer(owner, balance), \"Token transfer failed\");\r\n\r\n        emit UnclaimedTokensRetrieved(owner, balance, block.timestamp);\r\n    }\r\n\r\n    function getStakingOpenTimestamp() external view returns (uint256) {\r\n        return stakingOpenTimestamp;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"InterestWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"StakeDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"StakeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UnclaimedTokensRetrieved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"calculateAccruedInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockPeriod\",\"type\":\"uint256\"}],\"name\":\"canDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currencyToken\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockPeriod\",\"type\":\"uint256\"}],\"name\":\"depositStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingOpenTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"quotaForLockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockPeriod\",\"type\":\"uint256\"}],\"name\":\"remainingQuota\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieveUnclaimedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastInterestAccruedTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalInterestPaid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingOpenTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalStakedPerLockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawInterest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakingContract", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://747409fad6cfd60208023ff998ab81c2c87ed0604c235a999f9eba19d0781f79"}