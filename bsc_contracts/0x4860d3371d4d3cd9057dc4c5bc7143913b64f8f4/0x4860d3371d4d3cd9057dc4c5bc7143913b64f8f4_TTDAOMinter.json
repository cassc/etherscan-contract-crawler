{"SourceCode": "// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/math/SafeMath.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/TTDAOMinter_NEW.sol\r\n\r\n\r\npragma solidity ^0.8.9;\r\n\r\n\r\n\r\n\r\ninterface INFTMinter {\r\n    function mint(address to, uint256[] calldata uids, address referrer) external;\r\n\r\n    function safeMint(address to) external;\r\n\r\n    function safeBatchMint(address to, uint256 quantity) external;\r\n\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ninterface ITTDAOLiquidity {\r\n    function addInitLiquidity() external;\r\n\r\n    function addLiquidity() external;\r\n}\r\n\r\ninterface ITTDAOBurn {\r\n    function burn() external;\r\n}\r\n\r\ninterface IERC20Burn {\r\n    function burn(uint256 amount) external;\r\n}\r\n\r\ninterface IBank {\r\n    function withdraw(address account, uint256 amount) external;\r\n}\r\n\r\ncontract TTDAOMinter is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    IERC20  public usdtToken;\r\n\r\n    address private constant _ttDaoNodeAddress = 0x4AEFB89b8c6493E94E5E9Ac9F223EE25589b4522;\r\n    address private constant _usdtAddress = 0x55d398326f99059fF775485246999027B3197955;\r\n    address private constant _swapAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    address private constant _officalMinterAddress = 0x7d6F5Ac2B06aa6C78b079A29fBC584f23C38950b;\r\n    address private bankAdddress = 0x967ff7D5f3D428f9236F31197677a7C84FE2F5D1;\r\n\r\n    mapping(address => address) private _refers;\r\n    mapping(address => uint256) private _referCount;\r\n    mapping(address => uint256) private _referNodeCostCount;\r\n\r\n    mapping(uint256 => mapping(address => uint256)) private _nodeMints;\r\n    mapping(uint256 => uint256) private _nodeAllMint;\r\n\r\n\r\n    uint256 public  DAY_SEC = 86400;\r\n    uint256 public  DAY_SEC_7 = 7 * 86400;\r\n    uint256 public  DAY_SEC_360 = 360 * 86400;\r\n    uint256 public  constant basePrice = 30 * 10 ** 18;\r\n    uint256 public  constant basePower = 10;\r\n    uint256 public  constant MAX = ~uint256(0);\r\n    address private constant _marketFd = 0x977164848E49D1ecB5CF490e5ab1eF51B6f26D56;\r\n    address private constant _marketQd = 0x53e9D9dc8f2CD7b6b84E6620C9c4020895d3542E;\r\n\r\n    ITTDAOBurn private _burnContract;\r\n    ITTDAOLiquidity private _liquidityContract;\r\n\r\n    address private _ttDaoAddress = address(0);\r\n    address private _burnPool = address(0);\r\n    address private _liquidityPool = address(0);\r\n    uint256 private _mintNodeEndTime = 1690288200;\r\n    uint256 private _mintNodeReferCount = 50;\r\n    uint256 private _mintedAmount = 0;\r\n    mapping(address => uint256) private accountUsdtRewards;\r\n    mapping(address => uint256) private accountReferRewards;\r\n\r\n    struct MintData {\r\n        uint256 nftMintCount;\r\n        uint256 totalTTDAO;\r\n        uint256 claimedTTDAO;\r\n        uint256 totalNftPower;\r\n        uint256 totalReferPower;\r\n        uint256 startTime;\r\n        uint256 miningNftPower;\r\n        uint256 deduction;\r\n        uint256 lastReferClaimTime;\r\n        uint256 totalReferTTDAO;\r\n    }\r\n\r\n    mapping(address => MintData) public minters;\r\n\r\n    event MintPay(address sender, uint256 payAmount, uint256 nftCount, address referrer);\r\n    event MintNodePay(address sender, uint256 payAmount, uint256 nftCount);\r\n    event ClaimReferReward(address sender, uint256 amount, uint256 power);\r\n    event ClaimNftReward(address sender, uint256 power, uint256 amount, uint256 burnAmount);\r\n\r\n    constructor() {\r\n        usdtToken = IERC20(_usdtAddress);\r\n        IERC20(_usdtAddress).approve(_officalMinterAddress, MAX);\r\n    }\r\n\r\n    function mint(uint256[] calldata uids, address referrer) public {\r\n        require(uids.length > 0, \"need uids\");\r\n        require(msg.sender != referrer, \"error referrer\");\r\n        require(block.timestamp >= _mintNodeEndTime, \"can not mint now\");\r\n        require(block.timestamp < _mintNodeEndTime + DAY_SEC_360, \"end\");\r\n        // pay & mint\r\n        uint256 price = getPrice();\r\n        uint256 payAmount = price.mul(uids.length);\r\n        usdtToken.transferFrom(msg.sender, address(this), payAmount);\r\n        INFTMinter(_officalMinterAddress).mint(msg.sender, uids, referrer);\r\n\r\n        // refer\r\n        if (_refers[msg.sender] == address(0)) {\r\n            // need did\r\n            MintData storage user = minters[referrer];\r\n            if (user.nftMintCount > 0) {\r\n                _refers[msg.sender] = referrer;\r\n                _referCount[referrer] = _referCount[referrer].add(uids.length);\r\n            }\r\n        } else {\r\n            address olderRefer = _refers[msg.sender];\r\n            _referCount[olderRefer] = _referCount[olderRefer].add(uids.length);\r\n        }\r\n        _referCount[msg.sender] = _referCount[msg.sender].add(uids.length);\r\n\r\n        // calc power\r\n        updateNftPower(msg.sender, uids.length);\r\n        address Lv1 = _refers[msg.sender];\r\n        address Lv2 = _refers[Lv1];\r\n        address Lv3 = _refers[Lv2];\r\n        updateReferPower(Lv1, uids.length, 10);\r\n        updateReferPower(Lv2, uids.length, 7);\r\n        updateReferPower(Lv3, uids.length, 3);\r\n\r\n        // transfer\r\n        uint256 payAmount1 = payAmount.mul(40).div(100) - 12 * 10 ** 18 * uids.length;\r\n        usdtToken.transfer(_marketFd, payAmount1);\r\n        uint256 payAmount2 = payAmount.mul(10).div(100);\r\n        usdtToken.transfer(_marketQd, payAmount2);\r\n        usdtToken.transfer(_burnPool, payAmount2);\r\n        uint256 payAmount3 = payAmount.mul(40).div(100);\r\n        usdtToken.transfer(_liquidityPool, payAmount3);\r\n\r\n        _burnContract.burn();\r\n        _liquidityContract.addLiquidity();\r\n\r\n        if (Lv1 != address(0) && INFTMinter(_ttDaoNodeAddress).balanceOf(Lv1) > 0) {\r\n            uint256 dayIndex = block.timestamp / 86400;\r\n            _nodeMints[dayIndex][Lv1] = _nodeMints[dayIndex][Lv1].add(uids.length);\r\n            _nodeAllMint[dayIndex] = _nodeAllMint[dayIndex].add(uids.length);\r\n        }\r\n\r\n        emit MintPay(msg.sender, payAmount, uids.length, referrer);\r\n    }\r\n\r\n    function updateNftPower(address account, uint256 nftCount) internal {\r\n        MintData storage user = minters[account];\r\n\r\n        uint256 addPower = getPower() * nftCount;\r\n        user.totalNftPower = user.totalNftPower.add(addPower);\r\n        user.nftMintCount = user.nftMintCount.add(nftCount);\r\n        user.totalTTDAO = user.totalTTDAO.add(addPower * 360 * 1e18);\r\n\r\n        // sale statistic\r\n        _mintedAmount = _mintedAmount.add(nftCount);\r\n\r\n        // mining\r\n        if (user.startTime > 0 && block.timestamp < user.startTime + DAY_SEC_7) {\r\n            uint256 lost = (block.timestamp - user.startTime) / DAY_SEC * addPower;\r\n            user.deduction = user.deduction.add(lost);\r\n            user.miningNftPower = user.miningNftPower.add(addPower);\r\n        }\r\n    }\r\n\r\n    function updateReferPower(address account, uint256 nftCount, uint256 ratio) internal {\r\n        if (account == address(0)) {\r\n            return;\r\n        }\r\n\r\n        // need did\r\n        MintData storage user = minters[account];\r\n        if (user.nftMintCount == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 addPower = getPower() * nftCount;\r\n        addPower = addPower.mul(ratio).div(100);\r\n        user.totalReferPower = user.totalReferPower.add(addPower);\r\n        user.totalReferTTDAO = user.totalReferTTDAO.add(addPower * 360 * 1e18);\r\n\r\n        if (user.lastReferClaimTime == 0) {\r\n            user.lastReferClaimTime = block.timestamp;\r\n        }\r\n    }\r\n\r\n    function getPrice() public view returns (uint256) {\r\n        return basePrice.add(_mintedAmount.div(10000).mul(10 ** 19));\r\n    }\r\n\r\n    function getPower() public view returns (uint256) {\r\n        uint256 subPower = _mintedAmount.div(20000);\r\n        if (subPower >= 5) {\r\n            return 5;\r\n        } else {\r\n            return basePower.sub(subPower);\r\n        }\r\n    }\r\n\r\n    function getMintedAmount() public view returns (uint256) {\r\n        return _mintedAmount;\r\n    }\r\n\r\n    function getReferDetail(address account) public view returns (uint256, uint256, address, uint256) {\r\n        uint256 mintNodeCount = (_referCount[account] - _referNodeCostCount[account]) / _mintNodeReferCount;\r\n        return (\r\n        _referCount[account], // refer count\r\n        _referNodeCostCount[account], // swap node cost count\r\n        _refers[account], // referal\r\n        mintNodeCount\r\n        );\r\n    }\r\n\r\n    function getAccountMintData(address account) public view returns (MintData memory) {\r\n        return minters[account];\r\n    }\r\n\r\n    function getMintData(address account) public view returns (\r\n        uint256, //  nftMintCount;\r\n        uint256, //  totalNftPower;\r\n        uint256, //  totalReferPower;\r\n        uint256, //  startTime;\r\n        uint256, //  miningNftPower,\r\n        uint256, //  lastReferClaimTime,\r\n        uint256  //  refererCount,\r\n    ) {\r\n        MintData storage user = minters[account];\r\n        uint256 cnt = _referCount[account];\r\n        return (user.nftMintCount,\r\n        user.totalNftPower,\r\n        user.totalReferPower,\r\n        user.startTime,\r\n        user.miningNftPower,\r\n        user.lastReferClaimTime,\r\n        cnt);\r\n    }\r\n\r\n    function startMine() public {\r\n        require(block.timestamp >= _mintNodeEndTime, \"can not mine now\");\r\n        MintData storage user = minters[msg.sender];\r\n        require(user.totalNftPower > 0, \"no power\");\r\n        require(user.startTime == 0, \"start again\");\r\n\r\n        user.startTime = block.timestamp;\r\n        user.miningNftPower = user.totalNftPower;\r\n        user.deduction = 0;\r\n    }\r\n\r\n    function claimNftReward() public {\r\n        MintData storage user = minters[msg.sender];\r\n        require(user.miningNftPower > 0, \"no power\");\r\n        require(user.startTime > 0 && block.timestamp > user.startTime + DAY_SEC_7, \"unripe\");\r\n\r\n        // claim USDT\r\n        uint256 mintBalance = (user.miningNftPower * 7 - user.deduction) * 10 ** 18;\r\n        if (user.claimedTTDAO.add(mintBalance) > user.totalTTDAO) {\r\n            mintBalance = user.totalTTDAO - user.claimedTTDAO;\r\n        }\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = _ttDaoAddress;\r\n        path[1] = _usdtAddress;\r\n        uint256 usdtBeforeBalance = usdtToken.balanceOf(msg.sender);\r\n\r\n        IBank(bankAdddress).withdraw(address(this), mintBalance);\r\n\r\n        ISwapRouter(_swapAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            mintBalance,\r\n            0,\r\n            path,\r\n            msg.sender,\r\n            block.timestamp\r\n        );\r\n        uint256 usdtAfterBalance = usdtToken.balanceOf(msg.sender);\r\n\r\n        // burn\r\n        uint256 burnBalance = user.deduction * 10 ** 18;\r\n        burnBalance = burnBalance + (block.timestamp - user.startTime - DAY_SEC_7) * user.miningNftPower * 10 ** 18 / DAY_SEC;\r\n\r\n        if (mintBalance + user.claimedTTDAO + burnBalance > user.totalTTDAO) {\r\n            burnBalance = user.totalTTDAO - mintBalance - user.claimedTTDAO;\r\n        }\r\n\r\n        if (burnBalance > 0) {\r\n            IERC20Burn(bankAdddress).burn(burnBalance);\r\n        }\r\n\r\n        emit ClaimNftReward(msg.sender, user.totalNftPower, mintBalance, burnBalance);\r\n\r\n        // restart\r\n        user.claimedTTDAO = user.claimedTTDAO.add(mintBalance).add(burnBalance);\r\n        user.startTime = block.timestamp;\r\n        user.miningNftPower = user.totalNftPower;\r\n        user.deduction = 0;\r\n\r\n        accountUsdtRewards[msg.sender] += (usdtAfterBalance.sub(usdtBeforeBalance));\r\n    }\r\n\r\n    function claimReferReward() public {\r\n\r\n        MintData storage user = minters[msg.sender];\r\n        require(user.nftMintCount > 0, \"no did\");\r\n        require(user.totalReferPower > 0, \"no power\");\r\n        require(user.lastReferClaimTime > 0 && block.timestamp > user.lastReferClaimTime + DAY_SEC, \"unripe\");\r\n\r\n        uint256 balance = (block.timestamp - user.lastReferClaimTime) * user.totalReferPower * 10 ** 18 / DAY_SEC;\r\n        if (accountReferRewards[msg.sender] + balance > user.totalReferTTDAO) {\r\n            balance = user.totalReferTTDAO - accountReferRewards[msg.sender];\r\n        }\r\n        IBank(bankAdddress).withdraw(msg.sender, balance);\r\n\r\n        user.lastReferClaimTime = block.timestamp;\r\n        accountReferRewards[msg.sender] += balance;\r\n        emit ClaimReferReward(msg.sender, balance, user.totalReferPower);\r\n    }\r\n\r\n    function getRewardAmount(address account) public view returns (uint256 nftRewardAmount, uint256 referReward) {\r\n        MintData memory user = minters[account];\r\n        if (user.miningNftPower == 0 || user.startTime == 0) {\r\n            nftRewardAmount = 0;\r\n        } else {\r\n            uint256 day = (block.timestamp - user.startTime) / DAY_SEC;\r\n            if (day > 7) {\r\n                day = 7;\r\n            }\r\n\r\n            if (day == 0) {\r\n                nftRewardAmount = 0;\r\n            } else {\r\n                nftRewardAmount = (day * user.miningNftPower - user.deduction) * 10 ** 18;\r\n                if (nftRewardAmount + user.claimedTTDAO > user.totalTTDAO) {\r\n                    nftRewardAmount = user.totalTTDAO - user.claimedTTDAO;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (user.nftMintCount == 0 || user.totalReferPower == 0 || user.lastReferClaimTime == 0 || block.timestamp <= user.lastReferClaimTime + DAY_SEC) {\r\n            referReward = 0;\r\n        } else {\r\n            referReward = (block.timestamp - user.lastReferClaimTime) * user.totalReferPower * 10 ** 18 / DAY_SEC;\r\n            if (accountReferRewards[account] + referReward > user.totalReferTTDAO) {\r\n                referReward = user.totalReferTTDAO - accountReferRewards[account];\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    function getAccountUsdtReward(address account) public view returns (uint256) {\r\n        return accountUsdtRewards[account];\r\n    }\r\n\r\n    function getAccountReferRewards(address account) public view returns (uint256) {\r\n        return accountReferRewards[account];\r\n    }\r\n\r\n    function swapNode() public {\r\n        MintData storage user = minters[msg.sender];\r\n        require(user.nftMintCount > 0, \"no did\");\r\n\r\n        uint256 mintNodeCount = (_referCount[msg.sender] - _referNodeCostCount[msg.sender]) / _mintNodeReferCount;\r\n        if (mintNodeCount > 0) {\r\n            INFTMinter(_ttDaoNodeAddress).safeBatchMint(msg.sender, mintNodeCount);\r\n            _referNodeCostCount[msg.sender] = _referNodeCostCount[msg.sender].add(mintNodeCount * _mintNodeReferCount);\r\n        }\r\n    }\r\n\r\n    function setAddress(address ttDaoAddr, address liquidityAddr, address burnAddr) public onlyOwner {\r\n        _ttDaoAddress = ttDaoAddr;\r\n        _burnPool = burnAddr;\r\n        _liquidityPool = liquidityAddr;\r\n\r\n        IERC20(_ttDaoAddress).approve(_swapAddress, MAX);\r\n        _burnContract = ITTDAOBurn(_burnPool);\r\n        _liquidityContract = ITTDAOLiquidity(_liquidityPool);\r\n    }\r\n\r\n    function update(address[] memory accounts) public onlyOwner {\r\n        for (uint256 i = 0; i < accounts.length; ++i) {\r\n            _updateAddress(accounts[i]);\r\n        }\r\n    }\r\n\r\n    function setIntitor(address account, address invitor) public onlyOwner {\r\n        _refers[account] = invitor;\r\n    }\r\n\r\n    function setIntiteAmount(address account, uint256 amount) public onlyOwner {\r\n        _referCount[account] = amount;\r\n    }\r\n\r\n    function updateReferLv(address [] memory accounts) public onlyOwner {\r\n        for (uint256 i = 0; i < accounts.length; ++i) {\r\n            MintData storage user = minters[accounts[i]];\r\n            address Lv1 = _refers[accounts[i]];\r\n            address Lv2 = _refers[Lv1];\r\n            address Lv3 = _refers[Lv2];\r\n            updateReferPower(Lv1, user.nftMintCount, 10);\r\n            updateReferPower(Lv2, user.nftMintCount, 7);\r\n            updateReferPower(Lv3, user.nftMintCount, 3);\r\n        }\r\n    }\r\n\r\n    function setAccountReferPower(address account, uint256 addPower) public onlyOwner {\r\n        MintData storage user = minters[account];\r\n        user.totalReferPower = addPower;\r\n        user.totalReferTTDAO = addPower * 360 * 1e18;\r\n    }\r\n\r\n    function _updateAddress(address account) internal {\r\n        uint256 nftMintCount;\r\n        uint256 totalNftPower;\r\n        uint256 totalReferPower;\r\n        uint256 startTime;\r\n        uint256 miningNftPower;\r\n        uint256 lastReferClaimTime;\r\n        TTDAOMinter dao = TTDAOMinter(0xfb1e3Dfd965EB70DdAb273C3279e23f3B1ECb359);\r\n        (nftMintCount, totalNftPower, totalReferPower, startTime, miningNftPower, lastReferClaimTime,) = dao.getMintData(account);\r\n        MintData storage user = minters[account];\r\n        user.totalNftPower = totalNftPower;\r\n        user.nftMintCount = nftMintCount;\r\n        user.totalTTDAO = user.totalTTDAO.add(totalNftPower * 360 * 1e18);\r\n\r\n        uint256 refererCount;\r\n        address refer;\r\n        uint256 referNodeCostCount;\r\n        (refererCount, referNodeCostCount, refer,) = dao.getReferDetail(account);\r\n        _refers[account] = refer;\r\n        _referCount[account] = refererCount;\r\n        _referNodeCostCount[account] = referNodeCostCount;\r\n\r\n        _mintedAmount = dao.getMintedAmount();\r\n    }\r\n\r\n    function setMintNodeEndTime(uint256 t) public onlyOwner {\r\n        _mintNodeEndTime = t;\r\n    }\r\n\r\n    function getMintNodeEndTime() public view returns (uint256) {\r\n        return _mintNodeEndTime;\r\n    }\r\n\r\n    function setMintNodeReferCount(uint256 c) public onlyOwner {\r\n        _mintNodeReferCount = c;\r\n    }\r\n\r\n    function getNodeMint(uint256 dayIndex, address account) public view returns (uint256, uint256) {\r\n        return (_nodeMints[dayIndex][account], _nodeAllMint[dayIndex]);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"power\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"}],\"name\":\"ClaimNftReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"power\",\"type\":\"uint256\"}],\"name\":\"ClaimReferReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftCount\",\"type\":\"uint256\"}],\"name\":\"MintNodePay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"MintPay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAY_SEC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAY_SEC_360\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAY_SEC_7\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basePower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimNftReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReferReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountMintData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nftMintCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTTDAO\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedTTDAO\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalNftPower\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReferPower\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"miningNftPower\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deduction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastReferClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReferTTDAO\",\"type\":\"uint256\"}],\"internalType\":\"struct TTDAOMinter.MintData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountReferRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountUsdtReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getMintData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMintNodeEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMintedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dayIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getNodeMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getReferDetail\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nftRewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"uids\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nftMintCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTTDAO\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedTTDAO\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalNftPower\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReferPower\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"miningNftPower\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deduction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastReferClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReferTTDAO\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addPower\",\"type\":\"uint256\"}],\"name\":\"setAccountReferPower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ttDaoAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"burnAddr\",\"type\":\"address\"}],\"name\":\"setAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setIntiteAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"invitor\",\"type\":\"address\"}],\"name\":\"setIntitor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"setMintNodeEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"c\",\"type\":\"uint256\"}],\"name\":\"setMintNodeReferCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startMine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"updateReferLv\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TTDAOMinter", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7c423e148dc77422cbcc828ce297976ff81a84b299a436674b01102f0c379cd3"}