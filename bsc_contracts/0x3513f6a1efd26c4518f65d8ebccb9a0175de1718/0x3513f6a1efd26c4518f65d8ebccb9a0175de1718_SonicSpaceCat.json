{"SourceCode": "// SPDX-License-Identifier: Unlicensed \r\n// This contract is not open source and can not be copied/forked\r\n// Custom Contract Created for Sonic Space Cat (SCAT) by GEN (www.tokensbygen.com)\r\n\r\npragma solidity 0.8.19;\r\n \r\ninterface IERC20 {\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function factory() external view returns (address);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract SonicSpaceCat is Context, IERC20 {   \r\n\r\n    // Contract Wallets\r\n    address private _owner = payable(0x0ee9d20740f43635A4D6B6Bcafd723719bA73f4e);\r\n\r\n    address public Wallet_Tokens = _owner;\r\n    address public Wallet_Liquidity = _owner;\r\n    address payable public Wallet_Marketing = payable(_owner);\r\n\r\n    // Token Info\r\n    string private constant  _name = \"Sonic Space Cat\";\r\n    string private constant  _symbol = \"SCAT\";\r\n\r\n    uint256 private constant _decimals = 18;\r\n    uint256 private _tTotal = 1_000_000_000_000_000 * 10**_decimals;\r\n\r\n\r\n    // Token social links\r\n    string private _Website;\r\n    string private _Telegram;\r\n    string private _LP_Locker_URL;\r\n\r\n    // Wallet and transaction limits\r\n    uint256 private max_Hold = _tTotal;\r\n    uint256 private max_Tran = _tTotal;\r\n\r\n    // Fees\r\n    uint256 public _Fee__Buy_Burn;\r\n    uint256 public _Fee__Buy_Tokens;\r\n    uint256 public _Fee__Buy_Liquidity;\r\n    uint256 public _Fee__Buy_Marketing;\r\n\r\n    uint256 public _Fee__Sell_Burn;\r\n    uint256 public _Fee__Sell_Tokens;\r\n    uint256 public _Fee__Sell_Liquidity;\r\n    uint256 public _Fee__Sell_Marketing;\r\n\r\n    uint256 public _Fee__Dev = 1; \r\n\r\n    // Total fees that are processed on buys and sells for swap and liquify calculations\r\n    uint256 private _SwapFeeTotal_Buy;\r\n    uint256 private _SwapFeeTotal_Sell;\r\n\r\n    // Set factory\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n\r\n    constructor () {\r\n\r\n        // Transfer token supply to owner wallet\r\n        _tOwned[_owner] = _tTotal;\r\n\r\n        // Set PancakeSwap Router Address\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E); \r\n        \r\n        // Create initial liquidity pair with BNB on PancakeSwap factory\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        // Set the initial liquidity pair\r\n        _isPair[uniswapV2Pair] = true;    \r\n\r\n        // Wallets that are excluded from holding limits\r\n        _isLimitExempt[_owner] = true;\r\n        _isLimitExempt[address(this)] = true;\r\n        _isLimitExempt[Wallet_Burn] = true;\r\n        _isLimitExempt[uniswapV2Pair] = true;\r\n\r\n        // Wallets that are excluded from fees\r\n        _isExcludedFromFee[_owner] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[Wallet_Burn] = true;\r\n\r\n        // Wallets granted access before trade is open\r\n        _isWhiteListed[_owner] = true;\r\n\r\n        // Emit supply transfer to owner\r\n        emit Transfer(address(0), _owner, _tTotal);\r\n\r\n        // Emit ownership transfer to owner\r\n        emit OwnershipTransferred(address(0), _owner);\r\n\r\n    }\r\n\r\n    \r\n    // Events\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event updated_Wallet_Limits(uint256 max_Tran, uint256 max_Hold);\r\n    event updated_Buy_fees(uint256 Marketing, uint256 Liquidity, uint256 Burn, uint256 Tokens, uint256 DevFee);\r\n    event updated_Sell_fees(uint256 Marketing, uint256 Liquidity, uint256 Burn, uint256 Tokens, uint256 DevFee);\r\n    event updated_SwapAndLiquify_Enabled(bool Swap_and_Liquify_Enabled);\r\n    event updated_trade_Open(bool TradeOpen);\r\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n\r\n    // Restrict function to contract owner only \r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n\r\n    // Address mappings\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) public _isExcludedFromFee;\r\n    mapping (address => bool) public _isWhiteListed;\r\n    mapping (address => bool) public _isLimitExempt;\r\n    mapping (address => bool) public _isPair;\r\n\r\n\r\n    // Token information \r\n    function Token_Information() external view returns(address Owner_Wallet,\r\n                                                       uint256 Transaction_Limit,\r\n                                                       uint256 Max_Wallet,\r\n                                                       uint256 Fee_When_Buying,\r\n                                                       uint256 Fee_When_Selling,\r\n                                                       string memory Website,\r\n                                                       string memory Telegram,\r\n                                                       string memory Liquidity_Lock_URL,\r\n                                                       string memory Custom_Contract_By) {\r\n\r\n                                                           \r\n        string memory Creator = \"https://tokensbygen.com\";\r\n                                                           \r\n        uint256 Total_buy =  _Fee__Buy_Burn         +\r\n                             _Fee__Buy_Liquidity    +\r\n                             _Fee__Buy_Marketing    +\r\n                             _Fee__Buy_Tokens       +\r\n                             _Fee__Dev              ;\r\n\r\n        uint256 Total_sell = _Fee__Sell_Burn        +\r\n                             _Fee__Sell_Liquidity   +\r\n                             _Fee__Sell_Marketing   +\r\n                             _Fee__Sell_Tokens      +\r\n                             _Fee__Dev              ;\r\n\r\n        return (_owner,\r\n                max_Tran / 10 ** _decimals,\r\n                max_Hold / 10 ** _decimals,\r\n                Total_buy,\r\n                Total_sell,\r\n                _Website,\r\n                _Telegram,\r\n                _LP_Locker_URL,\r\n                Creator\r\n                );\r\n\r\n    }\r\n    \r\n\r\n    // Burn (dead) address\r\n    address public constant Wallet_Burn = 0x000000000000000000000000000000000000dEaD; \r\n\r\n    // Contract fee collection address \r\n    address payable public constant feeCollector = payable(0xDc9Db0cB2293468989ea8d50D3279E2798366A07);\r\n\r\n    // Fee processing\r\n    uint256 private swapTrigger = 11; \r\n    uint256 private swapCounter = 1;               \r\n    bool public inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled; \r\n\r\n    // Launch settings\r\n    bool public TradeOpen;\r\n\r\n    // Deflationary Burn Switch\r\n    bool public deflationaryBurn;\r\n\r\n    // Take fee tracker\r\n    bool private takeFee;\r\n\r\n\r\n    // Prepare the contract for presale\r\n    function Contract_SetUp_1__Presale_Address(\r\n\r\n        address Presale_Contract_Address\r\n\r\n        ) external onlyOwner {\r\n        _isExcludedFromFee[Presale_Contract_Address] = true; \r\n        _isLimitExempt[Presale_Contract_Address] = true;\r\n        _isWhiteListed[Presale_Contract_Address] = true;\r\n\r\n    }\r\n\r\n    // Set Buy Fees\r\n    function Contract_SetUp_2__Fees_on_Buy(\r\n\r\n        uint256 Marketing_on_BUY,\r\n        uint256 Liquidity_on_BUY,\r\n        uint256 Tokens_on_BUY,\r\n        uint256 Burn_on_BUY\r\n\r\n        ) external onlyOwner {\r\n\r\n        // Buy Fee Limit 10%\r\n        uint256 buy_Fee_Limit = 10;\r\n\r\n        // Check limits\r\n        require (Marketing_on_BUY    + \r\n                 Liquidity_on_BUY    +\r\n                 Tokens_on_BUY       +\r\n                 Burn_on_BUY         + \r\n                 _Fee__Dev           <= buy_Fee_Limit, \"E01\"); // Exceeds 10% buy fee limit\r\n\r\n        // Update fees\r\n        _Fee__Buy_Marketing  = Marketing_on_BUY;\r\n        _Fee__Buy_Liquidity  = Liquidity_on_BUY;\r\n        _Fee__Buy_Burn       = Burn_on_BUY;\r\n        _Fee__Buy_Tokens     = Tokens_on_BUY;\r\n\r\n        // Fees that will need to be processed during swap and liquify\r\n        _SwapFeeTotal_Buy    = _Fee__Buy_Marketing + _Fee__Buy_Liquidity + _Fee__Dev;\r\n\r\n        emit updated_Buy_fees(_Fee__Buy_Marketing, _Fee__Buy_Liquidity, _Fee__Buy_Burn, _Fee__Buy_Tokens, _Fee__Dev);\r\n    }\r\n\r\n    // Sell Fees\r\n    function Contract_SetUp_3__Fees_on_Sell(\r\n\r\n        uint256 Marketing_on_SELL,\r\n        uint256 Liquidity_on_SELL, \r\n        uint256 Tokens_on_SELL,\r\n        uint256 Burn_on_SELL\r\n\r\n        ) external onlyOwner {\r\n\r\n        // Sell Fee Limit 15%\r\n        uint256 sell_Fee_Limit = 15;\r\n\r\n        // Check limits\r\n        require (Marketing_on_SELL  + \r\n                 Liquidity_on_SELL  + \r\n                 Tokens_on_SELL     +\r\n                 Burn_on_SELL       +\r\n                 _Fee__Dev          <= sell_Fee_Limit, \"E02\"); // Exceeds 15% sell fee limit\r\n\r\n        // Update fees\r\n        _Fee__Sell_Marketing  = Marketing_on_SELL;\r\n        _Fee__Sell_Liquidity  = Liquidity_on_SELL;\r\n        _Fee__Sell_Burn       = Burn_on_SELL;\r\n        _Fee__Sell_Tokens     = Tokens_on_SELL;\r\n\r\n        // Fees that will need to be processed during swap and liquify\r\n        _SwapFeeTotal_Sell   = _Fee__Sell_Marketing + _Fee__Sell_Liquidity + _Fee__Dev;\r\n\r\n        emit updated_Sell_fees(_Fee__Sell_Marketing, _Fee__Sell_Liquidity, _Fee__Sell_Burn, _Fee__Sell_Tokens, _Fee__Dev);\r\n    }\r\n\r\n    // Wallet Holding and Transaction Limits (Enter token amount, excluding decimals)\r\n    function Contract_SetUp_4__Set_Limits(\r\n\r\n        uint256 Max_Tokens_Per_Transaction,\r\n        uint256 Max_Total_Tokens_Per_Wallet \r\n\r\n        ) external onlyOwner {\r\n\r\n        // Buyer protection - Transaction limit must be greater than 0.1% of total supply\r\n        require(Max_Tokens_Per_Transaction >= _tTotal / 1000 / 10**_decimals, \"E03\"); // Must be greater than 0.1% of total supply\r\n\r\n        // Buyer protection - Wallet limit must be greater than 0.5% of total supply\r\n        require(Max_Total_Tokens_Per_Wallet >= _tTotal / 200 / 10**_decimals, \"E04\"); // Must be greater than 0.5% of total supply\r\n        \r\n        max_Tran = Max_Tokens_Per_Transaction * 10**_decimals;\r\n        max_Hold = Max_Total_Tokens_Per_Wallet * 10**_decimals;\r\n\r\n        emit updated_Wallet_Limits(max_Tran, max_Hold);\r\n\r\n    }\r\n\r\n    // Open trade: Buyer Protection - one way switch - trade can not be paused once opened\r\n    function Contract_SetUp_5__Open_Trade() external onlyOwner {\r\n\r\n        require(!TradeOpen, \"E05\"); // Trade already open\r\n        TradeOpen = true;\r\n        swapAndLiquifyEnabled = true;\r\n\r\n        emit updated_trade_Open(TradeOpen);\r\n        emit updated_SwapAndLiquify_Enabled(swapAndLiquifyEnabled); \r\n    }\r\n\r\n\r\n\r\n\r\n    // Deflationary burn option - Default is false (tokens are added to burn wallet and NOT removed from total supply)\r\n    function Maintenance__Deflationary_Burn(bool true_or_false) external onlyOwner {\r\n\r\n        deflationaryBurn = true_or_false;\r\n    }\r\n\r\n\r\n\r\n    // Setting an address as a liquidity pair\r\n    function Maintenance__New_Liquidity_Pair(\r\n\r\n        address Wallet_Address,\r\n        bool true_or_false)\r\n\r\n         external onlyOwner {\r\n        _isPair[Wallet_Address] = true_or_false;\r\n        _isLimitExempt[Wallet_Address] = true_or_false;\r\n    }\r\n\r\n\r\n    // Transfer the contract to to a new owner\r\n    function Maintenance__Ownership_Transfer(address payable newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"E06\"); // Enter a valid BSC Address\r\n\r\n        // Remove old owner status \r\n        _isLimitExempt[owner()]     = false;\r\n        _isExcludedFromFee[owner()] = false;\r\n        _isWhiteListed[owner()]     = false;\r\n\r\n\r\n        // Emit ownership transfer\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n\r\n        // Transfer owner\r\n        _owner = newOwner;\r\n\r\n    }\r\n\r\n    // Renounce ownership of the contract \r\n    function Maintenance__Ownership_Renounce() public virtual onlyOwner {\r\n\r\n        // Remove old owner status \r\n        _isLimitExempt[owner()]     = false;\r\n        _isExcludedFromFee[owner()] = false;\r\n        _isWhiteListed[owner()]     = false;\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n\r\n\r\n    // Remove 1% contract fee (3 BNB payment required)\r\n    function Maintenance__Remove_Contract_Fee() external onlyOwner payable {\r\n\r\n        require(msg.value == 3*10**18, \"E07\"); // Must pay 3 BNB to remove contratc fee\r\n        send_BNB(feeCollector, msg.value);\r\n\r\n        // Remove Contract Fee\r\n        _Fee__Dev = 0;\r\n\r\n        // Update Swap Fees\r\n        _SwapFeeTotal_Buy   = _Fee__Buy_Liquidity + _Fee__Buy_Marketing;\r\n        _SwapFeeTotal_Sell  = _Fee__Sell_Liquidity + _Fee__Sell_Marketing;\r\n    }\r\n\r\n\r\n    // Update Project Wallets\r\n    function Update_Project_Wallets(\r\n\r\n        address payable BNB_Fee_Wallet, \r\n        address Liquidity_Collection_Wallet,\r\n        address Token_Fee_Wallet\r\n\r\n        ) external onlyOwner {\r\n\r\n        \r\n        require(BNB_Fee_Wallet != address(0), \"E08\"); // Enter a valid BSC wallet address\r\n        require(Liquidity_Collection_Wallet != address(0), \"E09\"); // Enter a valid BSC wallet address\r\n        require(Token_Fee_Wallet != address(0), \"E10\"); // Enter a valid BSC wallet address\r\n\r\n        Wallet_Marketing = payable(BNB_Fee_Wallet);\r\n        Wallet_Liquidity = Liquidity_Collection_Wallet;\r\n        Wallet_Tokens = Token_Fee_Wallet;\r\n\r\n    }\r\n\r\n    // Update Project Links\r\n    function Update_Project_Links(\r\n\r\n        string memory Website_URL, \r\n        string memory Telegram_URL, \r\n        string memory Liquidity_Locker_URL\r\n\r\n        ) external onlyOwner{\r\n\r\n        _Website         = Website_URL;\r\n        _Telegram        = Telegram_URL;\r\n        _LP_Locker_URL   = Liquidity_Locker_URL;\r\n\r\n    }\r\n\r\n\r\n\r\n    /*\r\n\r\n    --------------\r\n    FEE PROCESSING\r\n    --------------\r\n\r\n    */\r\n\r\n\r\n    // Processing transaction fees automatically\r\n    function Processing__Auto_Process(bool true_or_false) external onlyOwner {\r\n        swapAndLiquifyEnabled = true_or_false;\r\n        emit updated_SwapAndLiquify_Enabled(true_or_false);\r\n    }\r\n\r\n\r\n    // Manually process percentage of accumulated fees\r\n    function Processing__Process_Now (uint256 Percent_of_Tokens_to_Process) external onlyOwner {\r\n        require(!inSwapAndLiquify, \"E11\"); // Already in swap\r\n        if (Percent_of_Tokens_to_Process > 100){Percent_of_Tokens_to_Process == 100;}\r\n        uint256 tokensOnContract = balanceOf(address(this));\r\n        uint256 sendTokens = tokensOnContract * Percent_of_Tokens_to_Process / 100;\r\n        swapAndLiquify(sendTokens);\r\n\r\n    }\r\n\r\n    // Update count for swap trigger - Number of transactions to wait before processing accumulated fees (default is 10)\r\n    function Processing__Update_Swap_Trigger_Count(uint256 Transaction_Count) external onlyOwner {\r\n        // Counter is reset to 1 (not 0) to save gas, so add one to swapTrigger\r\n        swapTrigger = Transaction_Count + 1;\r\n    }\r\n\r\n\r\n    // Remove random tokens from the contract\r\n    function Processing__Remove_Random_Tokens(\r\n\r\n        address random_Token_Address,\r\n        uint256 number_of_Tokens\r\n\r\n        ) external onlyOwner {\r\n\r\n            // Can not remove the native token\r\n            require (random_Token_Address != address(this), \"E12\"); // Can not remove native token\r\n            IERC20(random_Token_Address).transfer(msg.sender, number_of_Tokens);\r\n            \r\n    }\r\n\r\n\r\n\r\n\r\n    \r\n\r\n    /*\r\n\r\n    ---------------\r\n    WALLET SETTINGS\r\n    ---------------\r\n\r\n    */\r\n\r\n\r\n    // Grants wallet access before trade is open\r\n    function Wallet_Settings__PreLaunch_Access(\r\n\r\n        address Wallet_Address,\r\n        bool true_or_false\r\n\r\n        ) external onlyOwner {    \r\n        _isWhiteListed[Wallet_Address] = true_or_false;\r\n    }\r\n\r\n    // Excludes wallet from transaction and holding limits\r\n    function Wallet_Settings__Exempt_From_Limits(\r\n\r\n        address Wallet_Address,\r\n        bool true_or_false\r\n\r\n        ) external onlyOwner {  \r\n        _isLimitExempt[Wallet_Address] = true_or_false;\r\n    }\r\n\r\n    // Excludes wallet from transaction fees\r\n    function Wallet_Settings__Exclude_From_Fees(\r\n\r\n        address Wallet_Address,\r\n        bool true_or_false\r\n\r\n        ) external onlyOwner {\r\n        _isExcludedFromFee[Wallet_Address] = true_or_false;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    /*\r\n\r\n    -----------------------------\r\n    BEP20 STANDARD AND COMPLIANCE\r\n    -----------------------------\r\n\r\n    */\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _tOwned[account];\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    // Transfer BNB via call to reduce possibility of future 'out of gas' errors\r\n    function send_BNB(address _to, uint256 _amount) internal returns (bool SendSuccess) {\r\n                                \r\n        (SendSuccess,) = payable(_to).call{value: _amount}(\"\");\r\n\r\n    }\r\n\r\n\r\n    /*\r\n\r\n    -----------------------\r\n    TOKEN TRANSFER HANDLING\r\n    -----------------------\r\n\r\n    */\r\n\r\n    // Main transfer checks and settings \r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n      ) private {\r\n\r\n        require(balanceOf(from) >= amount, \"E13\"); // Not enough tokens!\r\n\r\n\r\n        // Allows owner to add liquidity safely, eliminating the risk of someone maliciously setting the price \r\n        if (!TradeOpen){\r\n\r\n            require(_isWhiteListed[from] || _isWhiteListed[to], \"E14\"); // Trade not open, whitelisted wallets only!\r\n\r\n        }\r\n\r\n\r\n        // Wallet Limit\r\n        if (!_isLimitExempt[to] && from != owner()){\r\n\r\n            uint256 heldTokens = balanceOf(to);\r\n            require((heldTokens + amount) <= max_Hold, \"E15\"); // Purchase exceed max wallet limit\r\n\r\n        }\r\n\r\n\r\n        // Transaction limit - To send over the transaction limit the sender AND the recipient must be limit exempt\r\n        if (!_isLimitExempt[to] || !_isLimitExempt[from]){\r\n\r\n            require(amount <= max_Tran, \"E16\"); // Purchase exceeds max transaction limit\r\n\r\n        }\r\n\r\n\r\n        // Compliance and safety checks\r\n        require(from != address(0), \"E17\"); // Enter a valid BSC wallet address\r\n        require(to != address(0), \"E18\"); // Enter a valid BSC wallet address\r\n        require(amount > 0, \"E19\"); // Amount must be greater than 0\r\n\r\n\r\n        // Check if fee processing is possible\r\n        if( _isPair[to] &&\r\n            !inSwapAndLiquify &&\r\n            swapAndLiquifyEnabled\r\n            )\r\n            {\r\n\r\n            // Check that enough transactions have passed since last swap\r\n            if(swapCounter >= swapTrigger){\r\n\r\n                // Check number of tokens on contract\r\n                uint256 contractTokens = balanceOf(address(this));\r\n\r\n                    // Only trigger fee processing if there are tokens to swap!\r\n                    if (contractTokens > 0){\r\n\r\n                        // Limit number of tokens that can be swapped \r\n                        if (contractTokens <= max_Tran){\r\n                            swapAndLiquify (contractTokens);\r\n                            } else {\r\n                            swapAndLiquify (max_Tran);\r\n                            }\r\n                    }\r\n                } \r\n            }\r\n\r\n\r\n        takeFee = true;\r\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\r\n            takeFee = false;\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n\r\n    }\r\n\r\n\r\n    /*\r\n    \r\n    ------------\r\n    PROCESS FEES\r\n    ------------\r\n\r\n    */\r\n\r\n    function swapAndLiquify(uint256 Tokens) private {\r\n\r\n        // Lock swapAndLiquify function\r\n        inSwapAndLiquify        = true;  \r\n\r\n        // Dev fee for buys and sells\r\n        uint256 Total_Dev_Fee   = _Fee__Dev * 2;\r\n\r\n        uint256 _FeesTotal      = (_SwapFeeTotal_Buy + _SwapFeeTotal_Sell);\r\n        uint256 LP_Tokens       = Tokens * (_Fee__Buy_Liquidity + _Fee__Sell_Liquidity) / _FeesTotal / 2;\r\n        uint256 Swap_Tokens     = Tokens - LP_Tokens;\r\n\r\n        // Swap tokens for BNB\r\n        uint256 contract_BNB    = address(this).balance;\r\n        swapTokensForBNB(Swap_Tokens);\r\n        uint256 returned_BNB    = address(this).balance - contract_BNB;\r\n\r\n        // Double fees instead of halving LP fee to prevent rounding errors if fee is an odd number\r\n        uint256 fee_Split       = _FeesTotal * 2 - (_Fee__Buy_Liquidity + _Fee__Sell_Liquidity);\r\n\r\n        // Calculate the BNB values for each fee (excluding BNB wallet)\r\n        uint256 BNB_Liquidity   = returned_BNB * (_Fee__Buy_Liquidity + _Fee__Sell_Liquidity) / fee_Split;\r\n        uint256 BNB_Contract    = returned_BNB * Total_Dev_Fee * 2 / fee_Split;\r\n\r\n\r\n        // Add liquidity \r\n        if (LP_Tokens > 0){\r\n            addLiquidity(LP_Tokens, BNB_Liquidity);\r\n            emit SwapAndLiquify(LP_Tokens, BNB_Liquidity, LP_Tokens);\r\n        }\r\n\r\n        // Take developer fee\r\n        if(BNB_Contract > 0){\r\n            send_BNB(feeCollector, BNB_Contract);\r\n        }\r\n\r\n        // Send remaining BNB to BNB wallet (Marketing)\r\n        contract_BNB = address(this).balance;\r\n\r\n        if(contract_BNB > 0){\r\n            send_BNB(Wallet_Marketing, contract_BNB);\r\n        }\r\n\r\n\r\n        // Reset transaction counter (reset to 1 not 0 to save gas)\r\n        swapCounter = 1;\r\n\r\n        // Unlock swapAndLiquify function\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n\r\n\r\n    // Swap tokens for BNB\r\n    function swapTokensForBNB(uint256 tokenAmount) private {\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, \r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n\r\n\r\n    // Add liquidity and send Cake LP tokens to liquidity collection wallet\r\n    function addLiquidity(uint256 tokenAmount, uint256 BNBAmount) private {\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.addLiquidityETH{value: BNBAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, \r\n            0,\r\n            Wallet_Liquidity, \r\n            block.timestamp\r\n        );\r\n    } \r\n\r\n\r\n\r\n    /*\r\n    \r\n    ----------------------------------\r\n    TRANSFER TOKENS AND CALCULATE FEES\r\n    ----------------------------------\r\n\r\n    */\r\n\r\n    uint256 private tBurn;\r\n    uint256 private tTokens;\r\n    uint256 private tSwapFeeTotal;\r\n    uint256 private tTransferAmount;\r\n\r\n    // Transfer Tokens and Calculate Fees\r\n    function _tokenTransfer(address sender, address recipient, uint256 tAmount, bool Fee) private {\r\n\r\n        \r\n        if (Fee){\r\n\r\n            if(_isPair[recipient]){\r\n\r\n                // Sell fees\r\n                tBurn           = tAmount * _Fee__Sell_Burn       / 100;\r\n                tTokens         = tAmount * _Fee__Sell_Tokens     / 100;\r\n                tSwapFeeTotal   = tAmount * _SwapFeeTotal_Sell    / 100;\r\n\r\n            } else {\r\n\r\n                // Buy fees (and wallet transfers)\r\n                tBurn           = tAmount * _Fee__Buy_Burn        / 100;\r\n                tTokens         = tAmount * _Fee__Buy_Tokens      / 100;\r\n                tSwapFeeTotal   = tAmount * _SwapFeeTotal_Buy     / 100;\r\n\r\n            }\r\n\r\n        } else {\r\n\r\n                tBurn           = 0;\r\n                tTokens         = 0;\r\n                tSwapFeeTotal   = 0;\r\n\r\n        }\r\n\r\n        // Calculate transfer amount\r\n        tTransferAmount = tAmount - (tBurn + tTokens + tSwapFeeTotal);\r\n\r\n            _tOwned[sender] -= tAmount;\r\n\r\n                if (deflationaryBurn && recipient == Wallet_Burn) {\r\n\r\n                // Remove tokens from Total Supply \r\n                _tTotal -= tTransferAmount;\r\n\r\n                } else {\r\n\r\n                _tOwned[recipient] += tTransferAmount;\r\n\r\n                }\r\n\r\n            emit Transfer(sender, recipient, tTransferAmount);\r\n\r\n\r\n        // Take fees that require processing during swap and liquify\r\n        if(tSwapFeeTotal > 0){\r\n\r\n            _tOwned[address(this)] += tSwapFeeTotal;\r\n\r\n            // Increase the transaction counter\r\n            swapCounter++;\r\n                \r\n        }\r\n\r\n        // Process Token Fee\r\n        if(tTokens > 0){\r\n\r\n            _tOwned[Wallet_Tokens] += tTokens;\r\n\r\n        }\r\n\r\n        // Handle tokens for burn\r\n        if(tBurn > 0){\r\n\r\n            if (deflationaryBurn){\r\n\r\n                // Remove tokens from total supply\r\n                _tTotal = _tTotal - tBurn;\r\n\r\n            } else {\r\n\r\n                // Send Tokens to Burn Wallet\r\n                _tOwned[Wallet_Burn] += tBurn;\r\n\r\n            }\r\n\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    receive() external payable {}\r\n\r\n\r\n}\r\n\r\n\r\n\r\n/*\r\n\r\n  Custom Contract by Gen\r\n\r\n      Telegram: https://t.me/GenTokens_GEN\r\n      Website: https://tokensbygen.com/\r\n\r\n*/", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Marketing\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Liquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Burn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"DevFee\",\"type\":\"uint256\"}],\"name\":\"updated_Buy_fees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Marketing\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Liquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Burn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"DevFee\",\"type\":\"uint256\"}],\"name\":\"updated_Sell_fees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"Swap_and_Liquify_Enabled\",\"type\":\"bool\"}],\"name\":\"updated_SwapAndLiquify_Enabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"max_Tran\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"max_Hold\",\"type\":\"uint256\"}],\"name\":\"updated_Wallet_Limits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"TradeOpen\",\"type\":\"bool\"}],\"name\":\"updated_trade_Open\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Presale_Contract_Address\",\"type\":\"address\"}],\"name\":\"Contract_SetUp_1__Presale_Address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Marketing_on_BUY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Liquidity_on_BUY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Tokens_on_BUY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Burn_on_BUY\",\"type\":\"uint256\"}],\"name\":\"Contract_SetUp_2__Fees_on_Buy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Marketing_on_SELL\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Liquidity_on_SELL\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Tokens_on_SELL\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Burn_on_SELL\",\"type\":\"uint256\"}],\"name\":\"Contract_SetUp_3__Fees_on_Sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Max_Tokens_Per_Transaction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Max_Total_Tokens_Per_Wallet\",\"type\":\"uint256\"}],\"name\":\"Contract_SetUp_4__Set_Limits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Contract_SetUp_5__Open_Trade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"Maintenance__Deflationary_Burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Wallet_Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"Maintenance__New_Liquidity_Pair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Maintenance__Ownership_Renounce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"Maintenance__Ownership_Transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Maintenance__Remove_Contract_Fee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"Processing__Auto_Process\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Percent_of_Tokens_to_Process\",\"type\":\"uint256\"}],\"name\":\"Processing__Process_Now\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"random_Token_Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"number_of_Tokens\",\"type\":\"uint256\"}],\"name\":\"Processing__Remove_Random_Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Transaction_Count\",\"type\":\"uint256\"}],\"name\":\"Processing__Update_Swap_Trigger_Count\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Token_Information\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"Owner_Wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"Transaction_Limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Max_Wallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Fee_When_Buying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Fee_When_Selling\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"Website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"Telegram\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"Liquidity_Lock_URL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"Custom_Contract_By\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TradeOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"Website_URL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"Telegram_URL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"Liquidity_Locker_URL\",\"type\":\"string\"}],\"name\":\"Update_Project_Links\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"BNB_Fee_Wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"Liquidity_Collection_Wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"Token_Fee_Wallet\",\"type\":\"address\"}],\"name\":\"Update_Project_Wallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Wallet_Burn\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Wallet_Liquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Wallet_Marketing\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Wallet_Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"Wallet_Settings__Exclude_From_Fees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Wallet_Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"Wallet_Settings__Exempt_From_Limits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Wallet_Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"Wallet_Settings__PreLaunch_Access\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Wallet_Tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Fee__Buy_Burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Fee__Buy_Liquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Fee__Buy_Marketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Fee__Buy_Tokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Fee__Dev\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Fee__Sell_Burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Fee__Sell_Liquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Fee__Sell_Marketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Fee__Sell_Tokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isWhiteListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deflationaryBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inSwapAndLiquify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SonicSpaceCat", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c8668eb9f2721e56cb4389e98b3fd5a4a4c6276aad8a38da1c3802e97b64863a"}