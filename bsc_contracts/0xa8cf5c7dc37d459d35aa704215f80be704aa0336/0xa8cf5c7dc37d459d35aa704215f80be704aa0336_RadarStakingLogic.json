{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/RadarStakingLogic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\npragma solidity ^0.8.17;\\n\\n// Author: @mizi\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/iRadarStakingLogic.sol\\\";\\nimport \\\"./interfaces/iRadarToken.sol\\\";\\nimport \\\"./interfaces/iRadarStake.sol\\\";\\n\\ncontract RadarStakingLogic is iRadarStakingLogic, Ownable, ReentrancyGuard {\\n\\n    constructor(address rewarderAddr, address radarTokenContractAddr, address radarStakeContractAddr) {\\n        require(address(rewarderAddr) != address(0), \\\"RadarStakingLogic: Rewarder address not set\\\");\\n        require(address(radarTokenContractAddr) != address(0), \\\"RadarStakingLogic: Token contract not set\\\");\\n        require(address(radarStakeContractAddr) != address(0), \\\"RadarStakingLogic: Staking contract not set\\\");\\n\\n        rewarderAddress = rewarderAddr;\\n        radarTokenContract = iRadarToken(radarTokenContractAddr);\\n        radarStakeContract = iRadarStake(radarStakeContractAddr);\\n    }\\n\\n    /** EVENTS */\\n    event TokensStaked(address indexed owner, uint256 amount);\\n    event TokensHarvested(address indexed owner, uint256 amount, bool restake);\\n    event TokensUnstaked(address indexed owner, uint256 amount);\\n    event TokensUnstakingTriggered(address indexed owner);\\n\\n    /** PUBLIC VARS */\\n    // interface of our ERC20 RADAR token\\n    iRadarToken public radarTokenContract;\\n    // interface of the staking contract (stateful)\\n    iRadarStake public radarStakeContract;\\n    // the address which holds the reward tokens, which get paid out to users when they harvest their rewards\\n    address public rewarderAddress;\\n    // minimum amount to stake (aka. subscription for the DappRadar PRO subscription)\\n    uint256 public stakeForDappRadarPro = 30_000 ether;\\n\\n    /** PUBLIC */\\n    // this contract needs to have permission to move RADAR for the _msgSender() before this function can be called\\n    // allow amount == 0 so we can reset the staking timers without having to add tokens to the stake\\n    function stake(uint256 amount) external nonReentrant {\\n        iRadarStake.Stake memory myStake = radarStakeContract.getStake(_msgSender());\\n        require(myStake.totalStaked + amount >= stakeForDappRadarPro, \\\"RadarStakingLogic: You cannot stake less than the minimum\\\");\\n\\n        // check if the user owns the amount of tokens he wants to stake\\n        require(radarTokenContract.balanceOf(_msgSender()) >= amount, \\\"RadarStakingLogic: Not enough tokens to stake\\\");\\n        // check if this contract is allowed to move users RADAR to the staking contract\\n        require(radarTokenContract.allowance(_msgSender(), address(this)) >= amount, \\\"RadarStakingLogic: This contact is not allowed to move the amount of tokens you want to stake\\\");\\n\\n        // move tokens from the user to the staking contract\\n        radarTokenContract.transferFrom(_msgSender(), address(radarStakeContract), amount);\\n        \\n        // calculate rewards in case the user already has a stake and now adds to it\\n        uint256 tokenReward = calculateReward(_msgSender());\\n        // move additional tokens to the staking contract so it can later pay out the already accrued and restaked rewards\\n        if (tokenReward > 0) {\\n            radarTokenContract.transferFrom(rewarderAddress, address(radarStakeContract), tokenReward);\\n            emit TokensHarvested(_msgSender(), tokenReward, true);\\n        }\\n\\n        // add to stake, which updates totals and resets timestamps\\n        radarStakeContract.addToStake(amount + tokenReward, _msgSender());\\n        emit TokensStaked(_msgSender(), amount + tokenReward);\\n    }\\n\\n    // there is no cooldown when harvesting token rewards.\\n    function harvest(bool restake) public nonReentrant {\\n        iRadarStake.Stake memory myStake = radarStakeContract.getStake(_msgSender());\\n        require(myStake.totalStaked > 0, \\\"RadarStakingLogic: You don't have tokens staked\\\");\\n        uint256 tokenReward = calculateReward(_msgSender());\\n        require(tokenReward > 0, \\\"RadarStakingLogic: No reward to harvest\\\");\\n        \\n        emit TokensHarvested(_msgSender(), tokenReward, restake);\\n\\n        if (restake) {\\n            // move additional tokens to the staking contract so it can later pay out the already accrued and restaked rewards\\n            radarTokenContract.transferFrom(rewarderAddress, address(radarStakeContract), tokenReward);\\n\\n            // stake again to reset the clock and add the reward to the existing stake\\n            radarStakeContract.addToStake(tokenReward, _msgSender());\\n            emit TokensStaked(_msgSender(), tokenReward);\\n        } else {\\n            // stake again to reset the timestamps and cooldown\\n            radarStakeContract.addToStake(0, _msgSender());\\n            // decided to not trigger this event because it does not add value\\n            // emit TokensStaked(_msgSender(), 0);\\n\\n            // pay out the rewards, keep the original stake, reset the clock\\n            radarTokenContract.transferFrom(rewarderAddress, _msgSender(), tokenReward);\\n        }\\n    }\\n\\n    // trigger the cooldown so you can later on call unstake() to unstake your tokens\\n    function triggerUnstake() external nonReentrant {\\n        iRadarStake.Stake memory myStake = radarStakeContract.getStake(_msgSender());\\n        require(myStake.totalStaked > 0, \\\"RadarStakingLogic: You have no stake yet\\\");\\n        require(myStake.cooldownTriggeredAtTimestamp == 0, \\\"RadarStakingLogic: Cooldown already triggered\\\");\\n\\n        radarStakeContract.triggerUnstake(_msgSender());\\n\\n        emit TokensUnstakingTriggered(_msgSender());\\n    }\\n\\n    // unstake your tokens + rewards after the cooldown has passed\\n    function unstake(uint256 amount) external nonReentrant {\\n        require(amount > 0, \\\"RadarStakingLogic: Amount cannot be lower than 0\\\");\\n        iRadarStake.Stake memory myStake = radarStakeContract.getStake(_msgSender());\\n\\n        require(myStake.cooldownTriggeredAtTimestamp > 0, \\\"RadarStakingLogic: Cooldown not yet triggered\\\");\\n        require(block.timestamp >= myStake.cooldownTriggeredAtTimestamp + myStake.cooldownSeconds, \\\"RadarStakingLogic: Can't unstake during the cooldown period\\\");\\n        \\n        require(myStake.totalStaked >= amount, \\\"RadarStakingLogic: Amount you want to unstake exceeds your staked amount\\\");\\n        require((myStake.totalStaked - amount >= stakeForDappRadarPro) || (myStake.totalStaked - amount == 0), \\\"RadarStakingLogic: Either unstake all or keep more than the minimum stake required\\\");\\n        \\n        // calculate rewards\\n        uint256 tokenReward = calculateReward(_msgSender());\\n\\n        // unstake & reset cooldown\\n        radarStakeContract.removeFromStake(amount, _msgSender());\\n\\n        if (tokenReward > 0) {\\n            // transfer the rewards from the rewarderAddress to the user aka. pay the rewards\\n            radarTokenContract.transferFrom(rewarderAddress, _msgSender(), tokenReward);\\n            emit TokensHarvested(_msgSender(), tokenReward, false);\\n        }\\n\\n        // transfer the stake from the radarStakeContract\\n        radarTokenContract.transferFrom(address(radarStakeContract), _msgSender(), amount);\\n        emit TokensUnstaked(_msgSender(), amount);\\n    }\\n\\n    // calculate the total rewards a user has already earned.\\n    function calculateReward(address addr) public view returns(uint256 reward) {\\n        require(addr != address(0), \\\"RadarStakingLogic: Cannot use the null address\\\");\\n\\n        iRadarStake.Stake memory myStake = radarStakeContract.getStake(addr);\\n        uint256 totalStaked = myStake.totalStaked;\\n\\n        // return 0 if the user has no stake\\n        if (totalStaked <= 0 ) return 0;\\n\\n        // calculate the timestamp when the cooldown is over\\n        uint256 endOfCooldownTimestamp = myStake.cooldownTriggeredAtTimestamp + myStake.cooldownSeconds;\\n\\n        iRadarStake.Apr[] memory allAprs = radarStakeContract.getAllAprs();\\n        for (uint256 i = 0; i < allAprs.length; i++) {\\n            iRadarStake.Apr memory currentApr = allAprs[i];\\n\\n            // jump over APRs, which are in the past for this user/address\\n            if (currentApr.endTime > 0 && currentApr.endTime < myStake.lastStakedTimestamp) continue;\\n\\n            uint256 startTime = (myStake.lastStakedTimestamp > currentApr.startTime) ? myStake.lastStakedTimestamp : currentApr.startTime;\\n            uint256 endTime = (currentApr.endTime < block.timestamp)? currentApr.endTime : block.timestamp;\\n\\n            // use current timestamp if the APR is still active (aka. has no endTime yet)\\n            if (endTime <= 0) endTime = block.timestamp;\\n            \\n            // once the cooldown is triggered, accumulate rewards only until that time\\n            if (myStake.cooldownTriggeredAtTimestamp > 0) {\\n                // accumulate only until the cooldown is over - user can reset it by unstaking or staking again\\n                if (endTime > endOfCooldownTimestamp) endTime = endOfCooldownTimestamp;\\n            }\\n\\n            // protect against subtraction errors\\n            if (endTime <= startTime) continue;\\n\\n            uint256 secondsWithCurrentApr = endTime - startTime;\\n            uint256 daysPassed = secondsWithCurrentApr/1 days;\\n\\n            // calculate compounding rewards (per day)\\n            uint256 compoundingReward = calculateCompoundingReward(totalStaked, currentApr.apr, daysPassed);\\n            \\n            // compound the rewards for each APR period\\n            reward += compoundingReward;\\n            totalStaked += compoundingReward;\\n        }\\n\\n        return reward;\\n    }\\n\\n    // calculate compounding interest without running into floating point issues\\n    function calculateCompoundingReward(uint256 principal, uint256 aprToUse, uint256 daysPassed) private pure returns(uint256 compoundingReward) {\\n        for (uint256 i = 0; i < daysPassed; i++) {\\n            compoundingReward += (principal + compoundingReward) * aprToUse/10_000/365;\\n        }\\n    }\\n    \\n    /** ONLY OWNER */\\n    // allow to change the minimum amount to stake & keep staked to keep the PRO subscription\\n    function setStakeForDappRadarPro(uint256 number) external onlyOwner {\\n        require(number > 0, \\\"RadarStakingLogic: Amount must be above 0\\\");\\n        stakeForDappRadarPro = number;\\n    }\\n\\n    // set the address from which all RADAR rewards are paid\\n    function setRewarderAddress(address addr) external onlyOwner {\\n        require(address(addr) != address(0), \\\"RadarStakingLogic: Rewarder address not set\\\");\\n        rewarderAddress = addr;\\n    }\\n\\n    // if someone sends ETH to this contract by accident we want to be able to send it back to them\\n    function withdraw() external onlyOwner {\\n        uint256 totalAmount = address(this).balance;\\n\\n        bool sent;\\n        (sent, ) = owner().call{value: totalAmount}(\\\"\\\");\\n        require(sent, \\\"RadarStakingLogic: Failed to send funds\\\");\\n    }\\n}\"\r\n    },\r\n    \"/contracts/interfaces/iRadarToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface iRadarToken is IERC20 {\\n\\n}\"\r\n    },\r\n    \"/contracts/interfaces/iRadarStakingLogic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.17;\\n\\ninterface iRadarStakingLogic {\\n   \\n}\"\r\n    },\r\n    \"/contracts/interfaces/iRadarStake.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.17;\\n\\ninterface iRadarStake {\\n\\n    // store lock meta data\\n    struct Stake {\\n        uint256 totalStaked;\\n        uint256 lastStakedTimestamp;\\n        uint256 cooldownSeconds;\\n        uint256 cooldownTriggeredAtTimestamp;\\n    }\\n\\n    struct Apr {\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 apr; // e.g. 300 => 3%\\n    }\\n\\n    function getAllAprs() external view returns(Apr[] memory);\\n    function getStake(address addr) external view returns (Stake memory);\\n\\n    function addToStake(uint256 amount, address addr) external; // onlyStakingLogicContract\\n    function triggerUnstake(address addr) external; // onlyStakingLogicContract\\n    function removeFromStake(uint256 amount, address addr) external; // onlyStakingLogicContract\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewarderAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"radarTokenContractAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"radarStakeContractAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"restake\",\"type\":\"bool\"}],\"name\":\"TokensHarvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"TokensUnstakingTriggered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"calculateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"restake\",\"type\":\"bool\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"radarStakeContract\",\"outputs\":[{\"internalType\":\"contract iRadarStake\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"radarTokenContract\",\"outputs\":[{\"internalType\":\"contract iRadarToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewarderAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setRewarderAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"setStakeForDappRadarPro\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeForDappRadarPro\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RadarStakingLogic", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "000000000000000000000000a4961150fd7fb67c19f8ba7344180c2941128a83000000000000000000000000489580eb70a50515296ef31e8179ff3e77e24965000000000000000000000000718bad5717932fd30bf37804332c4db69c840a8e", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}