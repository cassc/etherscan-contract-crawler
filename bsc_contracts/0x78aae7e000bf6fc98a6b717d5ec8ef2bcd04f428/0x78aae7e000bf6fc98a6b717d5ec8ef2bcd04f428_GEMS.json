{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/GEMS.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.13;\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ninterface IStake {   \\r\\n    function depositReward(uint256 amount) external returns (uint256) ;\\r\\n}\\r\\n\\r\\ninterface IPancakeRouter01 {\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256 amountA,\\r\\n            uint256 amountB,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (\\r\\n            uint256 amountToken,\\r\\n            uint256 amountETH,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactETH(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapETHForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function quote(\\r\\n        uint256 amountA,\\r\\n        uint256 reserveA,\\r\\n        uint256 reserveB\\r\\n    ) external pure returns (uint256 amountB);\\r\\n\\r\\n    function getAmountOut(\\r\\n        uint256 amountIn,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountOut);\\r\\n\\r\\n    function getAmountIn(\\r\\n        uint256 amountOut,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountIn);\\r\\n\\r\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory amounts);\\r\\n\\r\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory amounts);\\r\\n}\\r\\n\\r\\ninterface IPancakeRouter02 is IPancakeRouter01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IPancakePair {\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n\\r\\n    function symbol() external pure returns (string memory);\\r\\n\\r\\n    function decimals() external pure returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\r\\n    event Burn(\\r\\n        address indexed sender,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint256 amount0In,\\r\\n        uint256 amount1In,\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    function getReserves()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint112 reserve0,\\r\\n            uint112 reserve1,\\r\\n            uint32 blockTimestampLast\\r\\n        );\\r\\n\\r\\n    function price0CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function price1CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function kLast() external view returns (uint256);\\r\\n\\r\\n    function mint(address to) external returns (uint256 liquidity);\\r\\n\\r\\n    function burn(address to)\\r\\n        external\\r\\n        returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function swap(\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address to,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    function skim(address to) external;\\r\\n\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\\r\\n\\r\\ninterface IPancakeFactory {\\r\\n    event PairCreated(\\r\\n        address indexed token0,\\r\\n        address indexed token1,\\r\\n        address pair,\\r\\n        uint256\\r\\n    );\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB)\\r\\n        external\\r\\n        view\\r\\n        returns (address pair);\\r\\n\\r\\n    function allPairs(uint256) external view returns (address pair);\\r\\n\\r\\n    function allPairsLength() external view returns (uint256);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB)\\r\\n        external\\r\\n        returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n\\r\\n    function setFeeToSetter(address) external;\\r\\n\\r\\n    function INIT_CODE_PAIR_HASH() external view returns (bytes32);\\r\\n}\\r\\ncontract GEMS is\\r\\n    ERC20,\\r\\n    Ownable\\r\\n{\\r\\n    using SafeMath for uint256;\\r\\n    address public treasuryAddress; // treasury CA\\r\\n    bool public isTreasuryContract;\\r\\n    address payable public marketingFeeAddress; // Marketing Address\\r\\n    address payable public liquidityAddress; // Liquidity Address\\r\\n    uint16 constant maxFeeLimit = 300;\\r\\n    uint8 constant maxProtectBlockLimit = 10;\\r\\n\\r\\n    //anti sniper storages\\r\\n    uint256 private _tradingActiveBlock;\\r\\n    uint256 private _protectBlockCount;\\r\\n    uint256 private _gasPriceLimit;\\r\\n    uint16 private _protectBlockLiquidityFee;\\r\\n    uint16 private _protectBlockRewardFee;\\r\\n    uint16 private _protectBlockMarketingFee;\\r\\n    bool public tradingActive;\\r\\n\\r\\n    mapping(address => bool) public isExcludedFromFee;\\r\\n\\r\\n    uint8 private constant BUY = 1;\\r\\n    uint8 private constant SELL = 2;\\r\\n    uint8 private constant TRANSFER = 3;\\r\\n    uint8 private constant PROTECT = 4;\\r\\n    uint8 private buyOrSellSwitch;\\r\\n\\r\\n    // these values are pretty much arbitrary since they get overwritten for every txn, but the placeholders make it easier to work with current contract.\\r\\n    uint256 private _rewardFee;\\r\\n    uint256 private _previousRewardFee;\\r\\n\\r\\n    uint256 private _liquidityFee;\\r\\n    uint256 private _previousLiquidityFee;\\r\\n\\r\\n    uint256 private _marketingFee;\\r\\n    uint256 private _previousMarketingFee;\\r\\n\\r\\n    uint16 public buyRewardFee;\\r\\n    uint16 public buyLiquidityFee;\\r\\n    uint16 public buyMarketingFee;\\r\\n\\r\\n    uint16 public sellRewardFee;\\r\\n    uint16 public sellLiquidityFee;\\r\\n    uint16 public sellMarketingFee;\\r\\n\\r\\n    uint16 public transferRewardFee;\\r\\n    uint16 public transferLiquidityFee;\\r\\n    uint16 public transferMarketingFee;\\r\\n\\r\\n    mapping(address => bool) public isExcludedMaxTransactionAmount;\\r\\n\\r\\n    // Anti-bot and anti-whale mappings and variables\\r\\n    mapping(address => uint256) private _holderLastTransferTimestamp; // to hold last Transfers temporarily during launch\\r\\n    bool private _transferDelayEnabled;\\r\\n\\r\\n    uint256 private _liquidityTokensToSwap;\\r\\n    uint256 private _marketingFeeTokensToSwap;\\r\\n    uint256 private _rewardFeeTokens;\\r\\n\\r\\n    // store addresses that a automatic market maker pairs. Any transfer *to* these addresses\\r\\n    // could be subject to a maximum transfer amount\\r\\n    mapping(address => bool) public automatedMarketMakerPairs;\\r\\n\\r\\n    uint256 public minimumFeeTokensToTake;\\r\\n    uint256 public maxTransactionAmount;\\r\\n    uint256 public maxWallet;\\r\\n\\r\\n    IPancakeRouter02 public pancakeRouter;\\r\\n    address public pancakePair;\\r\\n\\r\\n    bool inSwapAndLiquify;\\r\\n\\r\\n    event TradingActivated();\\r\\n    event UpdateMaxTransactionAmount(uint256 maxTransactionAmount);\\r\\n    event UpdateMaxWallet(uint256 maxWallet);\\r\\n    event UpdateMinimumTokensBeforeFeeTaken(uint256 minimumFeeTokensToTake);\\r\\n    event SetAutomatedMarketMakerPair(address pair, bool value);\\r\\n    event ExcludedMaxTransactionAmount(\\r\\n        address indexed account,\\r\\n        bool isExcluded\\r\\n    );\\r\\n    event ExcludedFromFee(address account, bool isExcludedFromFee);\\r\\n    event UpdateBuyFee(\\r\\n        uint256 buyRewardFee,\\r\\n        uint256 buyLiquidityFee,\\r\\n        uint256 buyMarketingFee\\r\\n    );\\r\\n    event UpdateSellFee(\\r\\n        uint256 sellRewardFee,\\r\\n        uint256 sellLiquidityFee,\\r\\n        uint256 sellMarketingFee\\r\\n    );\\r\\n    event UpdateTransferFee(\\r\\n        uint256 transferRewardFee,\\r\\n        uint256 transferLiquidityFee,\\r\\n        uint256 transferMarketingFee\\r\\n    );\\r\\n    event UpdateTreasuryAddress(address treasuryAddress, bool isTreasuryContract);\\r\\n    event UpdateMarketingFeeAddress(address marketingFeeAddress);\\r\\n    event UpdateLiquidityAddress(address _liquidityAddress);\\r\\n    event SwapAndLiquify(\\r\\n        uint256 tokensAutoLiq,\\r\\n        uint256 ethAutoLiq\\r\\n    );\\r\\n    event RewardTaken(uint256 rewardFeeTokens);\\r\\n    event MarketingFeeTaken(uint256 marketingFeeTokens, uint256 marketingFeeBNBSwapped);\\r\\n    modifier lockTheSwap() {\\r\\n        inSwapAndLiquify = true;\\r\\n        _;\\r\\n        inSwapAndLiquify = false;\\r\\n    }\\r\\n    constructor(\\r\\n        address _pancakeV2RouterAddress,\\r\\n        address _treasuryAddress,\\r\\n        address _liquidityAddress,\\r\\n        address _marketingFeeAddress,\\r\\n        uint256[5] memory _uint_params,\\r\\n        uint16[12] memory _uint16_params\\r\\n    ) ERC20(\\\"GemPad\\\", \\\"GEMS\\\") {\\r\\n        _mint(msg.sender, 100000000 * 10**decimals());\\r\\n        tradingActive = false;\\r\\n        _transferDelayEnabled = false;\\r\\n        liquidityAddress = payable(_liquidityAddress);\\r\\n        marketingFeeAddress = payable(_marketingFeeAddress);\\r\\n        treasuryAddress = _treasuryAddress;   \\r\\n        isTreasuryContract = false;     \\r\\n        _protectBlockCount = _uint_params[0];\\r\\n        require(_protectBlockCount<=maxProtectBlockLimit,\\\"Exceeds max protect block limit\\\");\\r\\n        _gasPriceLimit = _uint_params[1] * 1 gwei;\\r\\n        require(10000000<_gasPriceLimit,\\\"gasPricelimit > 10000000\\\");\\r\\n        _protectBlockLiquidityFee = _uint16_params[0];\\r\\n        _protectBlockRewardFee = _uint16_params[1];\\r\\n        _protectBlockMarketingFee = _uint16_params[2];\\r\\n        require(1000>_protectBlockLiquidityFee+_protectBlockRewardFee+_protectBlockMarketingFee,\\\"protect fee < 100%\\\");\\r\\n\\r\\n        \\r\\n        buyLiquidityFee = _uint16_params[3];\\r\\n        buyRewardFee = _uint16_params[4];\\r\\n        buyMarketingFee = _uint16_params[5];\\r\\n        require(maxFeeLimit>buyLiquidityFee+buyRewardFee+buyMarketingFee,\\\"buy fee < 30%\\\");\\r\\n        \\r\\n        sellLiquidityFee = _uint16_params[6];\\r\\n        sellRewardFee = _uint16_params[7];\\r\\n        sellMarketingFee = _uint16_params[8];        \\r\\n        require(maxFeeLimit>sellLiquidityFee+sellRewardFee+sellMarketingFee,\\\"sell fee < 30%\\\");\\r\\n\\r\\n        minimumFeeTokensToTake = _uint_params[2]*(10**decimals());\\r\\n        maxTransactionAmount = _uint_params[3]*(10**decimals());\\r\\n        maxWallet = _uint_params[4]*(10**decimals());\\r\\n        require(maxWallet>0,\\\"max wallet > 0\\\");\\r\\n        require(maxTransactionAmount>0,\\\"maxTransactionAmount > 0\\\");\\r\\n        require(minimumFeeTokensToTake>0,\\\"minimumFeeTokensToTake > 0\\\");\\r\\n\\r\\n        transferLiquidityFee = _uint16_params[9];\\r\\n        transferRewardFee = _uint16_params[10];\\r\\n        transferMarketingFee = _uint16_params[11];\\r\\n        require(maxFeeLimit>transferLiquidityFee+transferRewardFee+transferMarketingFee,\\\"transfer fee < 30%\\\");\\r\\n\\r\\n        pancakeRouter = IPancakeRouter02(_pancakeV2RouterAddress);\\r\\n\\r\\n        pancakePair = IPancakeFactory(pancakeRouter.factory()).createPair(\\r\\n            address(this),\\r\\n            pancakeRouter.WETH()\\r\\n        );\\r\\n\\r\\n        isExcludedFromFee[_msgSender()] = true;\\r\\n        isExcludedFromFee[address(this)] = true;\\r\\n        isExcludedFromFee[_treasuryAddress] = true;\\r\\n        isExcludedFromFee[marketingFeeAddress] = true;\\r\\n        excludeFromMaxTransaction(_msgSender(), true);\\r\\n        excludeFromMaxTransaction(address(this), true);\\r\\n        excludeFromMaxTransaction(_treasuryAddress, true);\\r\\n        excludeFromMaxTransaction(marketingFeeAddress, true);\\r\\n        _setAutomatedMarketMakerPair(pancakePair, true);\\r\\n    }\\r\\n    function decimals() public pure override returns (uint8) {\\r\\n        return 9;\\r\\n    }\\r\\n    function enableTrading() external onlyOwner {\\r\\n        require(!tradingActive, \\\"already enabled\\\");\\r\\n        tradingActive = true;\\r\\n        _tradingActiveBlock = block.number;\\r\\n        _transferDelayEnabled = true;\\r\\n        emit TradingActivated();\\r\\n    }\\r\\n\\r\\n    function updateMaxTransactionAmount(uint256 _maxTransactionAmount)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        maxTransactionAmount = _maxTransactionAmount*(10**decimals());\\r\\n        require(maxTransactionAmount>0,\\\"maxTransactionAmount > 0\\\");\\r\\n        emit UpdateMaxTransactionAmount(_maxTransactionAmount);\\r\\n    }\\r\\n\\r\\n    function updateMaxWallet(uint256 _maxWallet) external onlyOwner {\\r\\n        maxWallet = _maxWallet*(10**decimals());\\r\\n        require(maxWallet>0,\\\"maxTransactionAmount > 0\\\");\\r\\n        emit UpdateMaxWallet(_maxWallet);\\r\\n    }\\r\\n\\r\\n    function updateMinimumTokensBeforeFeeTaken(uint256 _minimumFeeTokensToTake)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        minimumFeeTokensToTake = _minimumFeeTokensToTake*(10**decimals());\\r\\n        require(minimumFeeTokensToTake>0,\\\"maxTransactionAmount > 0\\\");\\r\\n        emit UpdateMinimumTokensBeforeFeeTaken(_minimumFeeTokensToTake);\\r\\n    }\\r\\n\\r\\n    function updateProtectBlockCount(uint256 protectBlockCount)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        _protectBlockCount = protectBlockCount;\\r\\n        require(_protectBlockCount<=maxProtectBlockLimit,\\\"Exceeds max protect block\\\");\\r\\n    }\\r\\n\\r\\n    function setAutomatedMarketMakerPair(address pair, bool value)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(\\r\\n            pair != pancakePair,\\r\\n            \\\"The pair cannot be removed\\\"\\r\\n        );\\r\\n\\r\\n        _setAutomatedMarketMakerPair(pair, value);\\r\\n    }\\r\\n\\r\\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\\r\\n        automatedMarketMakerPairs[pair] = value;\\r\\n\\r\\n        excludeFromMaxTransaction(pair, value);\\r\\n\\r\\n        emit SetAutomatedMarketMakerPair(pair, value);\\r\\n    }\\r\\n\\r\\n    function updateGasPriceLimit(uint256 gas) external onlyOwner {\\r\\n        _gasPriceLimit = gas * 1 gwei;\\r\\n        require(10000000<_gasPriceLimit,\\\"gasPricelimit > 10000000\\\");\\r\\n    }\\r\\n\\r\\n    // disable Transfer delay\\r\\n    function disableTransferDelay() external onlyOwner {\\r\\n        _transferDelayEnabled = false;\\r\\n    }\\r\\n\\r\\n    function excludeFromMaxTransaction(address updAds, bool isEx)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        isExcludedMaxTransactionAmount[updAds] = isEx;\\r\\n        emit ExcludedMaxTransactionAmount(updAds, isEx);\\r\\n    }\\r\\n\\r\\n    function excludeFromFee(address account) external onlyOwner {\\r\\n        isExcludedFromFee[account] = true;\\r\\n        emit ExcludedFromFee(account, true);\\r\\n    }\\r\\n\\r\\n    function includeInFee(address account) external onlyOwner {\\r\\n        isExcludedFromFee[account] = false;\\r\\n        emit ExcludedFromFee(account, false);\\r\\n    }\\r\\n\\r\\n    function updateBuyFee(\\r\\n        uint16 _buyRewardFee,\\r\\n        uint16 _buyLiquidityFee,\\r\\n        uint16 _buyMarketingFee\\r\\n    ) external onlyOwner {\\r\\n        buyRewardFee = _buyRewardFee;\\r\\n        buyLiquidityFee = _buyLiquidityFee;\\r\\n        buyMarketingFee = _buyMarketingFee;\\r\\n        require(\\r\\n            _buyRewardFee + _buyLiquidityFee + _buyMarketingFee <= maxFeeLimit,\\r\\n            \\\"Must keep fees below 30%\\\"\\r\\n        );\\r\\n        emit UpdateBuyFee(_buyRewardFee, _buyLiquidityFee, _buyMarketingFee);\\r\\n    }\\r\\n\\r\\n    function updateSellFee(\\r\\n        uint16 _sellRewardFee,\\r\\n        uint16 _sellLiquidityFee,\\r\\n        uint16 _sellMarketingFee\\r\\n    ) external onlyOwner {\\r\\n        sellRewardFee = _sellRewardFee;\\r\\n        sellLiquidityFee = _sellLiquidityFee;\\r\\n        sellMarketingFee = _sellMarketingFee;\\r\\n        require(\\r\\n            _sellRewardFee + _sellLiquidityFee + _sellMarketingFee <= maxFeeLimit,\\r\\n            \\\"Must keep fees <= 30%\\\"\\r\\n        );\\r\\n        emit UpdateSellFee(sellRewardFee, sellLiquidityFee, sellMarketingFee);\\r\\n    }\\r\\n\\r\\n    function updateTransferFee(\\r\\n        uint16 _transferRewardFee,\\r\\n        uint16 _transferLiquidityFee,\\r\\n        uint16 _transferMarketingFee\\r\\n    ) external onlyOwner {\\r\\n        transferRewardFee = _transferRewardFee;\\r\\n        transferLiquidityFee = _transferLiquidityFee;\\r\\n        transferMarketingFee = _transferMarketingFee;\\r\\n        require(\\r\\n            _transferRewardFee + _transferLiquidityFee + _transferMarketingFee <= maxFeeLimit,\\r\\n            \\\"Must keep fees <= 30%\\\"\\r\\n        );\\r\\n        emit UpdateTransferFee(_transferRewardFee, _transferLiquidityFee, _transferMarketingFee);\\r\\n    }\\r\\n\\r\\n    function setProtectBlockFee(\\r\\n        uint16 protectBlockRewardFee,\\r\\n        uint16 protectBlockLiquidityFee,\\r\\n        uint16 protectBlockMarketingFee\\r\\n    ) external onlyOwner {\\r\\n        _protectBlockRewardFee = protectBlockRewardFee;\\r\\n        _protectBlockLiquidityFee = protectBlockLiquidityFee;\\r\\n        _protectBlockMarketingFee = protectBlockMarketingFee;\\r\\n        require(\\r\\n            _protectBlockRewardFee +\\r\\n                _protectBlockLiquidityFee +\\r\\n                _protectBlockMarketingFee <\\r\\n                1000,\\r\\n            \\\"Must keep fees below 100%\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function updateTreasuryAddress(address _treasuryAddress, bool _isTreasuryContract) external onlyOwner {\\r\\n        treasuryAddress = _treasuryAddress;\\r\\n        isExcludedFromFee[_treasuryAddress] = true;\\r\\n        excludeFromMaxTransaction(_treasuryAddress, true);\\r\\n        isTreasuryContract=_isTreasuryContract;\\r\\n        emit UpdateTreasuryAddress(_treasuryAddress, _isTreasuryContract);\\r\\n    }\\r\\n\\r\\n    function updateMarketingFeeAddress(address _marketingFeeAddress)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        marketingFeeAddress = payable(_marketingFeeAddress);\\r\\n        isExcludedFromFee[_marketingFeeAddress] = true;\\r\\n        excludeFromMaxTransaction(_marketingFeeAddress, true);\\r\\n        emit UpdateMarketingFeeAddress(_marketingFeeAddress);\\r\\n    }\\r\\n\\r\\n    function updateLiquidityAddress(address _liquidityAddress)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        liquidityAddress = payable(_liquidityAddress);\\r\\n        emit UpdateLiquidityAddress(_liquidityAddress);\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal override {\\r\\n        if (!tradingActive) {\\r\\n            require(\\r\\n                isExcludedFromFee[from] || isExcludedFromFee[to],\\r\\n                \\\"Trading is not active yet.\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        if (\\r\\n            tradingActive &&\\r\\n            _protectBlockCount > block.number.sub(_tradingActiveBlock) &&\\r\\n            !inSwapAndLiquify\\r\\n        ) {\\r\\n            //anti sniper\\r\\n            if (automatedMarketMakerPairs[from]) {\\r\\n                require(\\r\\n                    tx.gasprice <= _gasPriceLimit,\\r\\n                    \\\"Gas price exceeds limit.\\\"\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n        if (!inSwapAndLiquify) {\\r\\n            // at launch if the transfer delay is enabled, ensure the block timestamps for purchasers is set -- during launch.\\r\\n            if (_transferDelayEnabled) {\\r\\n                if (\\r\\n                    to != address(pancakeRouter) && to != address(pancakePair)\\r\\n                ) {\\r\\n                    require(\\r\\n                        _holderLastTransferTimestamp[tx.origin] < block.number,\\r\\n                        \\\"One purchase per block\\\"\\r\\n                    );\\r\\n                    _holderLastTransferTimestamp[tx.origin] = block.number;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            //when buy\\r\\n            if (\\r\\n                automatedMarketMakerPairs[from] &&\\r\\n                !isExcludedMaxTransactionAmount[to]\\r\\n            ) {\\r\\n                require(\\r\\n                    amount <= maxTransactionAmount,\\r\\n                    \\\"Buy transfer over max amount\\\"\\r\\n                );\\r\\n                require(\\r\\n                    amount + balanceOf(to) <= maxWallet,\\r\\n                    \\\"Cannot exceed max wallet\\\"\\r\\n                );\\r\\n            }\\r\\n            //when sell\\r\\n            else if (\\r\\n                automatedMarketMakerPairs[to] &&\\r\\n                !isExcludedMaxTransactionAmount[from]\\r\\n            ) {\\r\\n                require(\\r\\n                    amount <= maxTransactionAmount,\\r\\n                    \\\"Sell transfer over max amount\\\"\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n        uint256 contractTokenBalance = balanceOf(address(this));\\r\\n        bool overMinimumTokenBalance = contractTokenBalance >=\\r\\n            minimumFeeTokensToTake;\\r\\n\\r\\n        // Take Fee\\r\\n        if (\\r\\n            !inSwapAndLiquify &&\\r\\n            overMinimumTokenBalance &&\\r\\n            automatedMarketMakerPairs[to]\\r\\n        ) {\\r\\n            takeFee();\\r\\n        }\\r\\n\\r\\n        removeAllFee();\\r\\n\\r\\n        buyOrSellSwitch = TRANSFER;\\r\\n\\r\\n        // If any account belongs to isExcludedFromFee account then remove the fee\\r\\n        if (!isExcludedFromFee[from] && !isExcludedFromFee[to]) {\\r\\n            //protect block\\r\\n            if (\\r\\n                _protectBlockCount > block.number.sub(_tradingActiveBlock) &&\\r\\n                (automatedMarketMakerPairs[from] ||\\r\\n                    automatedMarketMakerPairs[to])\\r\\n            ) {\\r\\n                _rewardFee = amount.mul(_protectBlockRewardFee).div(1000);\\r\\n                _liquidityFee = amount.mul(_protectBlockLiquidityFee).div(1000);\\r\\n                _marketingFee = amount.mul(_protectBlockMarketingFee).div(1000);\\r\\n                buyOrSellSwitch = PROTECT;\\r\\n            }\\r\\n            // Buy\\r\\n            else if (automatedMarketMakerPairs[from]) {\\r\\n                _rewardFee = amount.mul(buyRewardFee).div(1000);\\r\\n                _liquidityFee = amount.mul(buyLiquidityFee).div(1000);\\r\\n                _marketingFee = amount.mul(buyMarketingFee).div(1000);\\r\\n                buyOrSellSwitch = BUY;\\r\\n            }\\r\\n            // Sell\\r\\n            else if (automatedMarketMakerPairs[to]) {\\r\\n                _rewardFee = amount.mul(sellRewardFee).div(1000);\\r\\n                _liquidityFee = amount.mul(sellLiquidityFee).div(1000);\\r\\n                _marketingFee = amount.mul(sellMarketingFee).div(1000);\\r\\n                buyOrSellSwitch = SELL;\\r\\n            }else{\\r\\n                _rewardFee = amount.mul(transferRewardFee).div(1000);\\r\\n                _liquidityFee = amount.mul(transferLiquidityFee).div(1000);\\r\\n                _marketingFee = amount.mul(transferMarketingFee).div(1000);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 _transferAmount = amount.sub(_rewardFee).sub(_liquidityFee).sub(\\r\\n            _marketingFee\\r\\n        );\\r\\n        super._transfer(from, to, _transferAmount);\\r\\n        uint256 _feeTotal = _rewardFee.add(_liquidityFee).add(_marketingFee);\\r\\n        if (_feeTotal > 0) {\\r\\n            super._transfer(\\r\\n                from,\\r\\n                address(this),\\r\\n                _feeTotal\\r\\n            );\\r\\n            _liquidityTokensToSwap=_liquidityTokensToSwap.add(_liquidityFee);\\r\\n            _marketingFeeTokensToSwap=_marketingFeeTokensToSwap.add(_marketingFee);\\r\\n            _rewardFeeTokens=_rewardFeeTokens.add(_rewardFee);\\r\\n        }\\r\\n\\r\\n        restoreAllFee();\\r\\n    }\\r\\n\\r\\n    function removeAllFee() private {\\r\\n        if (_rewardFee == 0 && _liquidityFee == 0 && _marketingFee==0) return;\\r\\n\\r\\n        _previousRewardFee = _rewardFee;\\r\\n        _previousLiquidityFee = _liquidityFee;\\r\\n        _previousMarketingFee = _marketingFee;\\r\\n        _rewardFee = 0;\\r\\n        _liquidityFee = 0;\\r\\n        _marketingFee = 0;\\r\\n    }\\r\\n\\r\\n    function restoreAllFee() private {\\r\\n        _rewardFee = _previousRewardFee;\\r\\n        _liquidityFee = _previousLiquidityFee;\\r\\n        _marketingFee = _previousMarketingFee;\\r\\n    }\\r\\n\\r\\n\\r\\n    function takeFee() private lockTheSwap {\\r\\n        uint256 contractBalance = balanceOf(address(this));\\r\\n        bool success;\\r\\n        uint256 totalTokensTaken=_liquidityTokensToSwap.add(_marketingFeeTokensToSwap).add(_rewardFeeTokens);\\r\\n        if (totalTokensTaken == 0 || contractBalance <totalTokensTaken) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // Halve the amount of liquidity tokens\\r\\n        uint256 tokensForLiquidity = _liquidityTokensToSwap / 2;\\r\\n        uint256 initialBNBBalance = address(this).balance;\\r\\n        swapTokensForBNB(tokensForLiquidity.add(_marketingFeeTokensToSwap));\\r\\n        uint256 bnbBalance = address(this).balance.sub(initialBNBBalance);\\r\\n        uint256 bnbForMarketing = bnbBalance.mul(_marketingFeeTokensToSwap).div(\\r\\n            tokensForLiquidity.add(_marketingFeeTokensToSwap)\\r\\n        );\\r\\n        uint256 bnbForLiquidity = bnbBalance - bnbForMarketing;\\r\\n        if (tokensForLiquidity > 0 && bnbForLiquidity > 0) {\\r\\n            addLiquidity(tokensForLiquidity, bnbForLiquidity);\\r\\n            emit SwapAndLiquify(\\r\\n                tokensForLiquidity,\\r\\n                bnbForLiquidity\\r\\n            );\\r\\n        }\\r\\n        if(isTreasuryContract){\\r\\n            IStake stake=IStake(treasuryAddress);\\r\\n            _approve(address(this), address(stake), _rewardFeeTokens);\\r\\n            stake.depositReward(_rewardFeeTokens);\\r\\n        }else{\\r\\n            _transfer(address(this), treasuryAddress, _rewardFeeTokens);\\r\\n        }\\r\\n        \\r\\n        emit RewardTaken(_rewardFeeTokens);\\r\\n\\r\\n        (success, ) = address(marketingFeeAddress).call{\\r\\n            value: bnbForMarketing\\r\\n        }(\\\"\\\");\\r\\n        emit MarketingFeeTaken(_marketingFeeTokensToSwap, bnbForMarketing);\\r\\n        \\r\\n\\r\\n        _liquidityTokensToSwap = 0;\\r\\n        _marketingFeeTokensToSwap = 0;\\r\\n        _rewardFeeTokens=0;\\r\\n    }\\r\\n\\r\\n    function swapTokensForBNB(uint256 tokenAmount) private {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = pancakeRouter.WETH();\\r\\n        _approve(address(this), address(pancakeRouter), tokenAmount);\\r\\n        pancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0, // accept any amount of ETH\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\\r\\n        _approve(address(this), address(pancakeRouter), tokenAmount);\\r\\n        pancakeRouter.addLiquidityETH{value: ethAmount}(\\r\\n            address(this),\\r\\n            tokenAmount,\\r\\n            0, // slippage is unavoidable\\r\\n            0, // slippage is unavoidable\\r\\n            liquidityAddress,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n    receive() external payable {}\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pancakeV2RouterAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingFeeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[5]\",\"name\":\"_uint_params\",\"type\":\"uint256[5]\"},{\"internalType\":\"uint16[12]\",\"name\":\"_uint16_params\",\"type\":\"uint16[12]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcludedFromFee\",\"type\":\"bool\"}],\"name\":\"ExcludedFromFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludedMaxTransactionAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketingFeeTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketingFeeBNBSwapped\",\"type\":\"uint256\"}],\"name\":\"MarketingFeeTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardFeeTokens\",\"type\":\"uint256\"}],\"name\":\"RewardTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensAutoLiq\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAutoLiq\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TradingActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyRewardFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyLiquidityFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyMarketingFee\",\"type\":\"uint256\"}],\"name\":\"UpdateBuyFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_liquidityAddress\",\"type\":\"address\"}],\"name\":\"UpdateLiquidityAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"marketingFeeAddress\",\"type\":\"address\"}],\"name\":\"UpdateMarketingFeeAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTransactionAmount\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxTransactionAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxWallet\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumFeeTokensToTake\",\"type\":\"uint256\"}],\"name\":\"UpdateMinimumTokensBeforeFeeTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellRewardFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellLiquidityFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellMarketingFee\",\"type\":\"uint256\"}],\"name\":\"UpdateSellFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferRewardFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferLiquidityFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferMarketingFee\",\"type\":\"uint256\"}],\"name\":\"UpdateTransferFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasuryAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isTreasuryContract\",\"type\":\"bool\"}],\"name\":\"UpdateTreasuryAddress\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyRewardFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableTransferDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"updAds\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEx\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedMaxTransactionAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTreasuryContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumFeeTokensToTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakePair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeRouter\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellRewardFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"protectBlockRewardFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"protectBlockLiquidityFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"protectBlockMarketingFee\",\"type\":\"uint16\"}],\"name\":\"setProtectBlockFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferLiquidityFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferMarketingFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferRewardFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_buyRewardFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_buyLiquidityFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_buyMarketingFee\",\"type\":\"uint16\"}],\"name\":\"updateBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"updateGasPriceLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityAddress\",\"type\":\"address\"}],\"name\":\"updateLiquidityAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingFeeAddress\",\"type\":\"address\"}],\"name\":\"updateMarketingFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTransactionAmount\",\"type\":\"uint256\"}],\"name\":\"updateMaxTransactionAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxWallet\",\"type\":\"uint256\"}],\"name\":\"updateMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumFeeTokensToTake\",\"type\":\"uint256\"}],\"name\":\"updateMinimumTokensBeforeFeeTaken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"protectBlockCount\",\"type\":\"uint256\"}],\"name\":\"updateProtectBlockCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_sellRewardFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_sellLiquidityFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_sellMarketingFee\",\"type\":\"uint16\"}],\"name\":\"updateSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_transferRewardFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_transferLiquidityFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_transferMarketingFee\",\"type\":\"uint16\"}],\"name\":\"updateTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isTreasuryContract\",\"type\":\"bool\"}],\"name\":\"updateTreasuryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "GEMS", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e000000000000000000000000df47f618a94eec71c2ed8cfad256942787e0d9510000000000000000000000005e416ed4599b6ee0dc83389316b0e838296744760000000000000000000000008c01d3a4b0f2f89c327a9d3b447e9c67992392670000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000004d0000000000000000000000000000000000000000000000000000000000004e20000000000000000000000000000000000000000000000000000000000007a12000000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000000000000000014a000000000000000000000000000000000000000000000000000000000000014a000000000000000000000000000000000000000000000000000000000000014a000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000003c000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000005a000000000000000000000000000000000000000000000000000000000000005a0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000002100000000000000000000000000000000000000000000000000000000000000210000000000000000000000000000000000000000000000000000000000000021", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}