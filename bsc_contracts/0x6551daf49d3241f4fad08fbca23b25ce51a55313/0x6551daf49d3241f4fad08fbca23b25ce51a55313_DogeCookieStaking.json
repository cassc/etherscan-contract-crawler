{"SourceCode": "// SPDX-License-Identifier:  MIT\r\n\r\npragma solidity ^0.8.17;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    // Set original owner\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    // Return current owner\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    // Restrict function to contract owner only\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    // Renounce ownership of the contract\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    // Transfer the contract to to a new owner\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ncontract DogeCookieStaking is Ownable {\r\n    struct StakingOption {\r\n        uint256 minUnlockPeriod;\r\n        uint256 minStakingAmount;\r\n        uint256 apy;\r\n        bool accepting;\r\n    }\r\n\r\n    struct Staking {\r\n        uint256 amount;\r\n        uint256 unlockTime;\r\n        uint256 optionIndex;\r\n        bool isActive;\r\n    }\r\n\r\n    mapping(address => Staking[]) public stakings;\r\n    mapping(address => uint256) public totalStakings;\r\n    mapping(address => uint256) public rewards;\r\n\r\n    IERC20 public token;\r\n    StakingOption[] public stakingOptions;\r\n\r\n    uint256 public totalAllowance = 0;\r\n    uint256 public totalAvailable = 0;\r\n    uint256 public totalStaked = 0;\r\n\r\n    constructor() {\r\n        token = IERC20(0x21D5AF064600f06F45B05A68FddC2464A5dDaF87);\r\n\r\n        stakingOptions.push(\r\n            StakingOption(5 * 2630000, 100000 * 1000000000, 15, true)\r\n        );\r\n        stakingOptions.push(\r\n            StakingOption(10 * 2630000, 100000 * 1000000000, 30, true)\r\n        );\r\n        stakingOptions.push(\r\n            StakingOption(12 * 2630000, 100000 * 1000000000, 35, true)\r\n        );\r\n\r\n        stakingOptions.push(\r\n            StakingOption(5 * 2630000, 500000 * 1000000000, 20, true)\r\n        );\r\n        stakingOptions.push(\r\n            StakingOption(10 * 2630000, 500000 * 1000000000, 40, true)\r\n        );\r\n        stakingOptions.push(\r\n            StakingOption(12 * 2630000, 500000 * 1000000000, 50, true)\r\n        );\r\n        totalAvailable = 1000000000 * 1000000000;\r\n    }\r\n\r\n    function addStakingOption(\r\n        uint256 minUnlockPeriod,\r\n        uint256 apy,\r\n        uint256 minStakingAmount\r\n    ) external onlyOwner {\r\n        stakingOptions.push(\r\n            StakingOption(minUnlockPeriod, minStakingAmount, apy, true)\r\n        );\r\n    }\r\n\r\n    function modifyStaking(uint256 index, bool value) external onlyOwner {\r\n        stakingOptions[index].accepting = value;\r\n    }\r\n\r\n    function stake(uint256 amount, uint256 optionIndex) external {\r\n        require(optionIndex < stakingOptions.length, \"Invalid option index\");\r\n        StakingOption storage option = stakingOptions[optionIndex];\r\n        require(amount >= option.minStakingAmount);\r\n        require(option.accepting, \"Not Active\");\r\n        uint256 issuing = (amount * option.apy) / 100;\r\n        require(\r\n            (totalAvailable - totalAllowance) >= issuing,\r\n            \"Not enough tokens to stake\"\r\n        );\r\n        totalStakings[msg.sender]++;\r\n        // Transfer tokens from the user to the contract\r\n        token.transferFrom(msg.sender, address(this), amount);\r\n        totalAllowance += issuing;\r\n        totalStaked += amount;\r\n        // Add a new staking for the user\r\n        stakings[msg.sender].push(\r\n            Staking(\r\n                amount,\r\n                block.timestamp + stakingOptions[optionIndex].minUnlockPeriod,\r\n                optionIndex,\r\n                true\r\n            )\r\n        );\r\n    }\r\n\r\n    function unstake(uint256 stakingIndex) external {\r\n        require(\r\n            stakingIndex < stakings[msg.sender].length,\r\n            \"Invalid staking index\"\r\n        );\r\n        Staking storage staking = stakings[msg.sender][stakingIndex];\r\n        require(staking.isActive, \"Staking is not active\");\r\n        require(\r\n            block.timestamp >= staking.unlockTime,\r\n            \"Minimum unlock period not completed\"\r\n        );\r\n\r\n        // Calculate the rewards based on the staking period, APY, and staked amount\r\n        //staking period in days rounded down to floor value\r\n        uint256 reward = (staking.amount *\r\n            stakingOptions[staking.optionIndex].apy) / 100;\r\n\r\n        // Update the user's rewards\r\n        rewards[msg.sender] += reward;\r\n\r\n        totalAllowance -= reward;\r\n        totalAvailable -= reward;\r\n        totalStaked -= staking.amount;\r\n\r\n        // Deactivate the staking\r\n        staking.isActive = false;\r\n\r\n        // Transfer the staked tokens and rewards back to the user\r\n        token.transfer(msg.sender, staking.amount + reward);\r\n    }\r\n\r\n    function withDrawTokens() external onlyOwner {\r\n        token.transfer(msg.sender, token.balanceOf(address(this)));\r\n    }\r\n\r\n    function updateAvailable(uint256 _available) external onlyOwner {\r\n        totalAvailable = _available;\r\n    }\r\n\r\n    function withdrawNativeToken() external onlyOwner {\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minUnlockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minStakingAmount\",\"type\":\"uint256\"}],\"name\":\"addStakingOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"modifyStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"optionIndex\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingOptions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minUnlockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minStakingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"accepting\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"optionIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalStakings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakingIndex\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_available\",\"type\":\"uint256\"}],\"name\":\"updateAvailable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withDrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawNativeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DogeCookieStaking", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b603fe40bed3d06724cfa8dc947a851471fc792d8b696a1ae00f59dd097c5b3e"}