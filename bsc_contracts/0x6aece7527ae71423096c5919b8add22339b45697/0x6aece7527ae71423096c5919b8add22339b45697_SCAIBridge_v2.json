{"SourceCode": "//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.23; \r\n\r\ninterface ERC20Essential \r\n{\r\n\r\n    function balanceOf(address user) external view returns(uint256);\r\n    function transfer(address _to, uint256 _amount) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _amount) external returns (bool);\r\n\r\n}\r\n\r\n\r\n//USDT contract in Ethereum does not follow ERC20 standard so it needs different interface\r\ninterface usdtContract\r\n{\r\n    function transferFrom(address _from, address _to, uint256 _amount) external;\r\n}\r\n\r\n\r\n\r\ninterface IRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function swapExactETHForTokens(\r\n        uint amountOutMin, \r\n        address[] calldata path, \r\n        address to, uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IRouter02 is IRouter01 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n\r\n\r\n//*******************************************************************//\r\n//------------------ Contract to Manage Ownership -------------------//\r\n//*******************************************************************//\r\ncontract owned\r\n{\r\n    address public owner;\r\n    mapping(address => bool) public signer;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n    event SignerUpdated(address indexed signer, bool indexed status);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        //owner does not become signer automatically.\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    modifier onlySigner {\r\n        require(signer[msg.sender], 'caller must be signer');\r\n        _;\r\n    }\r\n\r\n\r\n    function changeSigner(address _signer, bool _status) public onlyOwner {\r\n        signer[_signer] = _status;\r\n        emit SignerUpdated(_signer, _status);\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n    \r\n//****************************************************************************//\r\n//---------------------        MAIN CODE STARTS HERE     ---------------------//\r\n//****************************************************************************//\r\n    \r\ncontract SCAIBridge_v2 is owned {\r\n    \r\n    uint256 public orderID;\r\n    uint256 public exraCoinRewards;   // if we give users extra coins to cover gas cost of some initial transactions.\r\n    bool public bridgeStatus = true;\r\n    IRouter02 public swapRouter;\r\n    address public lpPair;\r\n    address public scaiToken;\r\n    \r\n\r\n    // This generates a public event of coin received by contract\r\n    event CoinIn(uint256 indexed orderID, address indexed user, uint256 value, address outputCurrency);\r\n    event CoinOut(uint256 indexed orderID, address indexed user, uint256 value);\r\n    event CoinOutFailed(uint256 indexed orderID, address indexed user, uint256 value);\r\n    event TokenIn(uint256 indexed orderID, address indexed tokenAddress, address indexed user, uint256 value, uint256 chainID, address outputCurrency);\r\n    event TokenOut(uint256 indexed orderID, address indexed tokenAddress, address indexed user, uint256 value, uint256 chainID);\r\n    event TokenOutFailed(uint256 indexed orderID, address indexed tokenAddress, address indexed user, uint256 value, uint256 chainID);\r\n\r\n   \r\n\r\n    constructor () {\r\n\r\n        if (block.chainid == 56) {\r\n            swapRouter = IRouter02(0x10ED43C718714eb63d5aA57B78B54704E256024E); // BSC - Pancakeswap V2\r\n            lpPair = 0x19bF763d477834094280f0e82CC37A0fb1E696Cf;    // SCAI - BNB pair \r\n            scaiToken = 0x051A66a7750098fB1EC6548D36E275bb23749A78; // SCAI contract address in BSC\r\n        } else if (block.chainid == 1 || block.chainid == 4 || block.chainid == 3) {\r\n            swapRouter = IRouter02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); // Ethereum uniswap v2\r\n            lpPair = 0x5A9B096dcA1A78D1d323D5cFF7Ff7415969dB90b;    // SCAI - ETH pair\r\n            scaiToken = 0xE35009059cb55ded065027e9832A2c564AFF7512; // SCAI contract address in ethereum\r\n        } else if (block.chainid == 43114) {\r\n            swapRouter = IRouter02(0x60aE616a2155Ee3d9A68541Ba4544862310933d4); // Avalance C-chain\r\n        } else if (block.chainid == 250) {\r\n            swapRouter = IRouter02(0xF491e7B69E4244ad4002BC14e878a34207E38c29); // Fantom\r\n        } else if (block.chainid == 137) {\r\n            swapRouter = IRouter02(0xa5E0829CaCEd8fFDD4De3c43696c57F7D7A678ff); // Polygon - Quickswap v2\r\n        } else if (block.chainid == 34) {\r\n            swapRouter = IRouter02(0xf6E7129F427aE7E78E870574f16aD4eA36B19d8b); // SCAI Mainnet\r\n        } else if (block.chainid == 3434) {\r\n            swapRouter = IRouter02(0x1852B91c4A2d817e8a479e91c1c2607E46FEE414); // SCAI Testnet\r\n        } else {\r\n            revert(\"Chain not valid\");\r\n        }\r\n\r\n\r\n\r\n    }\r\n    \r\n    receive () external payable {\r\n        //nothing happens for incoming fund\r\n    }\r\n    \r\n    //the coins will remains in this smart contract\r\n    function coinIn(address outputCurrency) external payable returns(bool){\r\n        require(bridgeStatus, \"Bridge is inactive\");\r\n        orderID++;\r\n        emit CoinIn(orderID, msg.sender, msg.value, outputCurrency);\r\n        return true;\r\n    }\r\n    \r\n    function coinOut(address user, uint256 amount, uint256 _orderID) external onlySigner returns(bool){\r\n        require(bridgeStatus, \"Bridge is inactive\");\r\n        payable(user).transfer(amount);\r\n        emit CoinOut(_orderID, user, amount);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    //fund remains in this smart contract\r\n    function tokenIn(address tokenAddress, uint256 tokenAmount, uint256 chainID, address outputCurrency) external returns(bool){\r\n        require(bridgeStatus, \"Bridge is inactive\");\r\n        orderID++;\r\n        \r\n        if(tokenAddress == address(0xdAC17F958D2ee523a2206206994597C13D831ec7)){\r\n            //There should be different interface for the USDT Ethereum contract\r\n            usdtContract(tokenAddress).transferFrom(msg.sender, address(this), tokenAmount);\r\n        }else{\r\n            ERC20Essential(tokenAddress).transferFrom(msg.sender, address(this), tokenAmount);\r\n        }\r\n        emit TokenIn(orderID, tokenAddress, msg.sender, tokenAmount, chainID, outputCurrency);\r\n        return true;\r\n    }\r\n    \r\n    \r\n    function tokenOut(address tokenAddress, address user, uint256 tokenAmount, uint256 _orderID, uint256 chainID) external onlySigner returns(bool){\r\n            require(bridgeStatus, \"Bridge is inactive\");\r\n            ERC20Essential(tokenAddress).transfer(user, tokenAmount);\r\n\r\n            if(exraCoinRewards > 0 && address(this).balance >= exraCoinRewards){\r\n                payable(user).transfer(exraCoinRewards);\r\n            }\r\n            emit TokenOut(_orderID, tokenAddress, user, tokenAmount, chainID);\r\n        \r\n        return true;\r\n    }\r\n\r\n\r\n    function setExraCoinsRewards(uint256 _exraCoinRewards) external onlyOwner returns( string memory){\r\n        exraCoinRewards = _exraCoinRewards;\r\n        return \"Extra coins rewards updated\";\r\n    }\r\n\r\n    // This function coverts coins into tokens.\r\n    // The reason for this is that bridge only give out tokens and not the coins.\r\n    function swapCoinsToTokens(uint256 amount) external onlySigner returns(bool){\r\n        require (amount <= address(this).balance, \"Insufficient balance\");\r\n        \r\n        address[] memory path = new address[](2);\r\n        path[0] = swapRouter.WETH();\r\n        path[1] = scaiToken;\r\n\r\n        swapRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(\r\n            0,\r\n            path,\r\n            address(this),  // tokens remains in this smart contract\r\n            block.timestamp\r\n        );\r\n        return true;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"outputCurrency\",\"type\":\"address\"}],\"name\":\"CoinIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"CoinOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"CoinOutFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SignerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"outputCurrency\",\"type\":\"address\"}],\"name\":\"TokenIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"TokenOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"TokenOutFailed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bridgeStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"changeSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"outputCurrency\",\"type\":\"address\"}],\"name\":\"coinIn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_orderID\",\"type\":\"uint256\"}],\"name\":\"coinOut\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exraCoinRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orderID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scaiToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_exraCoinRewards\",\"type\":\"uint256\"}],\"name\":\"setExraCoinsRewards\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"signer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swapCoinsToTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract IRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"outputCurrency\",\"type\":\"address\"}],\"name\":\"tokenIn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_orderID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"tokenOut\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SCAIBridge_v2", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7ccc6b9dd39d847c164309a74d413a271f7adb7054949bda39ffc632c9879c0a"}