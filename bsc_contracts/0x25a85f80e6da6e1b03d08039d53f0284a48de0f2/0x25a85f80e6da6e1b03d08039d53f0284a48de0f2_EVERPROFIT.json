{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n /*  [INTRODUCTION]\r\n *   EVERPROFIT is a 100% decentralized ROI program with full transparency and high security that available to everyone.\r\n *\r\n *   Website: https://everprofit.io  \r\n * \t                                                                       \r\n *\t 1% Daily ROI + 1% PERSONAL HOLD-BONUS \t\t\t\t\t\t       \t \r\n *\t                                                                       \r\n *   Smart Contract Sourcec Code Audited and verified with No Backdoor.       \t\t \r\n *                                                                    \t\t \r\n *   \r\n *\r\n *   [USAGE INSTRUCTION]\r\n *   1) Connect Metamask, trust wallet or wallet connect\r\n *   2) Get Referral link from your sponsor and contribute to the contract.\r\n *\r\n *\r\n * \r\n *   [AFFILIATE PROGRAM]\r\n *\r\n *   11 level affiliate commission: Level 1 - 10% -  Level 2 - 4%  -  Level 3 - 2%  -  Level 4 - 1%  -  Level 5 - 1% \r\n *                                  Level 6 - 0.5% - Level 7 - 0.5% - Level 8 - 0.4% - Level 9 - 0.3% - Level 10 - 0.2% - Level 11 - 0.1% \r\n *   \r\n */\r\n\r\npragma solidity 0.8.7;\r\n\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\ncontract EVERPROFIT {\r\n    using SafeMath for uint;\r\n    using Address for address;\r\n\r\n    uint public totalInvested;\r\n    address payable public martFeeAddress;\r\n    address payable public adminFeeAddress;\r\n    uint public totalDeposits;\r\n    uint public totalWithdrawn;\r\n    uint public contractPercent;\r\n    uint public contractCreationTime;\r\n    uint public totalRefBonus;\r\n    uint constant public investLimit = 500;\r\n    uint constant public minDeposit = 0.01 ether;\r\n    uint constant public maxDeposit = 500 ether;\r\n    uint constant public basePercent = 100;\r\n\r\n    struct Deposit {\r\n        uint64 amount;\r\n        uint64 withdrawn;\r\n        uint32 start;\r\n    }\r\n\r\n    uint[] public referralPercents = [1000, 400, 200, 100, 100, 50, 50, 40, 30, 20, 10];\r\n    uint constant public marketingFee = 1000; \r\n    uint constant public adminFee = 1000;\r\n    uint constant public maxContractPercent = 100;\r\n    uint constant public maxLeaderPercent = 50;\r\n    uint constant public maxHoldPercent = 100;\r\n    uint constant public maxCommunityPercent = 50;\r\n    uint constant public percentsDivider = 10000;\r\n    uint constant public contractBalStep = 50000 ether;\r\n    uint constant public leaderBonusStep = 250000  ether;\r\n    uint constant public communityBonusStep = 1000000;\r\n    uint constant public timeStep = 1 days;\r\n    \r\n    struct User {\r\n        Deposit[] deposits;\r\n        uint32 checkpoint;\r\n        address referrer;\r\n        uint64 bonus;\r\n        uint24[11] refs;\r\n    }\r\n\r\n    mapping (address => User) internal users;\r\n    mapping (uint => uint) internal turnover;\r\n\r\n    event Welcome(address user);\r\n    event Invest(address indexed user, uint amount);\r\n    event Withdrawn(address indexed user, uint amount);\r\n    event RefBonus(address indexed referrer, address indexed referral, uint indexed level, uint amount);\r\n    event RefBack(address indexed referrer, address indexed referral, uint amount);\r\n    event FeePaid(address indexed user, uint totalAmount);\r\n\r\n    constructor(address payable martAddr, address payable adminAddr) {\r\n        require(!Address.isContract(martAddr) && !Address.isContract(adminAddr) );\r\n        martFeeAddress = martAddr;\r\n        adminFeeAddress = adminAddr;\r\n        contractCreationTime = block.timestamp;\r\n        contractPercent = getContractBalanceRate();\r\n    }\r\n\r\n    function getContractBalance() public view returns (uint) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getContractBalanceRate() public view returns (uint) {\r\n        uint contractBalance = address(this).balance;\r\n        uint contractBalancePercent = basePercent.add(contractBalance.div(contractBalStep).mul(20));\r\n\r\n        if (contractBalancePercent < basePercent.add(maxContractPercent)) {\r\n            return contractBalancePercent;\r\n        } else {\r\n            return basePercent.add(maxContractPercent);\r\n        }\r\n    }\r\n    \r\n    function getLeaderBonusRate() public view returns (uint) {\r\n        uint leaderBonusPercent = totalRefBonus.div(leaderBonusStep).mul(10);\r\n\r\n        if (leaderBonusPercent < maxLeaderPercent) {\r\n            return leaderBonusPercent;\r\n        } else {\r\n            return maxLeaderPercent;\r\n        }\r\n    }\r\n    \r\n    function getCommunityBonusRate() public view returns (uint) {\r\n        uint communityBonusRate = totalDeposits.div(communityBonusStep).mul(10);\r\n\r\n        if (communityBonusRate < maxCommunityPercent) {\r\n            return communityBonusRate;\r\n        } else {\r\n            return maxCommunityPercent;\r\n        }\r\n    }\r\n    \r\n    function withdraw() public {\r\n        User storage user = users[msg.sender];\r\n\r\n        uint userPercentRate = getUserPercentRate(msg.sender);\r\n\t\tuint communityBonus = getCommunityBonusRate();\r\n\t\tuint leaderbonus = getLeaderBonusRate();\r\n\r\n        uint totalAmount;\r\n        uint dividends;\r\n\r\n        for (uint i = 0; i < user.deposits.length; i++) {\r\n\r\n            if (uint(user.deposits[i].withdrawn) < uint(user.deposits[i].amount).mul(2)) {\r\n\r\n                if (user.deposits[i].start > user.checkpoint) {\r\n\r\n                    dividends = (uint(user.deposits[i].amount).mul(userPercentRate+communityBonus+leaderbonus).div(percentsDivider))\r\n                        .mul(block.timestamp.sub(uint(user.deposits[i].start)))\r\n                        .div(timeStep);\r\n\r\n                } else {\r\n\r\n                    dividends = (uint(user.deposits[i].amount).mul(userPercentRate+communityBonus+leaderbonus).div(percentsDivider))\r\n                        .mul(block.timestamp.sub(uint(user.checkpoint)))\r\n                        .div(timeStep);\r\n\r\n                }\r\n\r\n                if (uint(user.deposits[i].withdrawn).add(dividends) > uint(user.deposits[i].amount).mul(2)) {\r\n                    dividends = (uint(user.deposits[i].amount).mul(2)).sub(uint(user.deposits[i].withdrawn));\r\n                }\r\n\r\n                user.deposits[i].withdrawn = uint64(uint(user.deposits[i].withdrawn).add(dividends)); /// changing of storage data\r\n                totalAmount = totalAmount.add(dividends);\r\n\r\n            }\r\n        }\r\n\r\n        require(totalAmount > 0, \"User has no dividends\");\r\n\r\n        uint contractBalance = address(this).balance;\r\n        if (contractBalance < totalAmount) {\r\n            totalAmount = contractBalance;\r\n        }\r\n\r\n        user.checkpoint = uint32(block.timestamp);\r\n\r\n        payable(msg.sender).transfer(totalAmount);\r\n\r\n        totalWithdrawn = totalWithdrawn.add(totalAmount);\r\n\r\n\r\n        emit Withdrawn(msg.sender, totalAmount);\r\n    }\r\n\r\n    function getUserPercentRate(address userAddress) public view returns (uint) {\r\n        User storage user = users[userAddress];\r\n\r\n        if (isActive(userAddress)) {\r\n            uint timeMultiplier = (block.timestamp.sub(uint(user.checkpoint))).div(timeStep.div(2)).mul(5);\r\n            if (timeMultiplier > maxHoldPercent) {\r\n                timeMultiplier = maxHoldPercent;\r\n            }\r\n            return contractPercent.add(timeMultiplier);\r\n        } else {\r\n            return contractPercent;\r\n        }\r\n    }\r\n\r\n    function getUserAvailable(address userAddress) public view returns (uint) {\r\n        User storage user = users[userAddress];\r\n\r\n        uint userPercentRate = getUserPercentRate(userAddress);\r\n\t\tuint communityBonus = getCommunityBonusRate();\r\n\t\tuint leaderbonus = getLeaderBonusRate();\r\n\r\n        uint totalDividends;\r\n        uint dividends;\r\n\r\n        for (uint i = 0; i < user.deposits.length; i++) {\r\n\r\n            if (uint(user.deposits[i].withdrawn) < uint(user.deposits[i].amount).mul(2)) {\r\n\r\n                if (user.deposits[i].start > user.checkpoint) {\r\n\r\n                    dividends = (uint(user.deposits[i].amount).mul(userPercentRate+communityBonus+leaderbonus).div(percentsDivider))\r\n                        .mul(block.timestamp.sub(uint(user.deposits[i].start)))\r\n                        .div(timeStep);\r\n\r\n                } else {\r\n\r\n                    dividends = (uint(user.deposits[i].amount).mul(userPercentRate+communityBonus+leaderbonus).div(percentsDivider))\r\n                        .mul(block.timestamp.sub(uint(user.checkpoint)))\r\n                        .div(timeStep);\r\n\r\n                }\r\n\r\n                if (uint(user.deposits[i].withdrawn).add(dividends) > uint(user.deposits[i].amount).mul(2)) {\r\n                    dividends = (uint(user.deposits[i].amount).mul(2)).sub(uint(user.deposits[i].withdrawn));\r\n                }\r\n\r\n                totalDividends = totalDividends.add(dividends);\r\n\r\n                /// no update of withdrawn because that is view function\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return totalDividends;\r\n    }\r\n    \r\n    function invest(address referrer) public payable {\r\n        require(!Address.isContract(msg.sender) && msg.sender == tx.origin);\r\n\r\n        require(msg.value >= minDeposit && msg.value <= maxDeposit, \"Bad Deposit\");\r\n\r\n        User storage user = users[msg.sender];\r\n\r\n        require(user.deposits.length < investLimit, \"Maximum 300 deposits from address\");\r\n\r\n        uint msgValue = msg.value;\r\n\r\n        uint _marketingFee = msgValue.mul(marketingFee).div(percentsDivider);\r\n\t\tuint _adminFee = msgValue.mul(adminFee).div(percentsDivider);\r\n\r\n        martFeeAddress.transfer(_marketingFee);\r\n\t\tadminFeeAddress.transfer(_adminFee);\r\n\r\n        emit FeePaid(msg.sender, _marketingFee);\r\n\r\n        if (user.referrer == address(0) && users[referrer].deposits.length > 0 && referrer != msg.sender) {\r\n            user.referrer = referrer;\r\n        }\r\n        \r\n        // uint refbackAmount;\r\n        if (user.referrer != address(0)) {\r\n\r\n            address upline = user.referrer;\r\n            for (uint i = 0; i < 11; i++) {\r\n                if (upline != address(0)) {\r\n                    uint amount = msgValue.mul(referralPercents[i]).div(percentsDivider);\r\n\r\n                    // }\r\n\r\n                    if (amount > 0) {\r\n                        payable(address(uint160(upline))).transfer(amount);\r\n                        users[upline].bonus = uint64(uint(users[upline].bonus).add(amount));\r\n                        \r\n                        totalRefBonus = totalRefBonus.add(amount);\r\n                        emit RefBonus(upline, msg.sender, i, amount);\r\n                    }\r\n\r\n                    users[upline].refs[i]++;\r\n                    upline = users[upline].referrer;\r\n                } else break;\r\n            }\r\n\r\n        }\r\n\r\n        if (user.deposits.length == 0) {\r\n            user.checkpoint = uint32(block.timestamp);\r\n            emit Welcome(msg.sender);\r\n        }\r\n\r\n        user.deposits.push(Deposit(uint64(msgValue), 0, uint32(block.timestamp)));\r\n\r\n        totalInvested = totalInvested.add(msgValue);\r\n        totalDeposits++;\r\n\r\n        if (contractPercent < basePercent.add(maxContractPercent)) {\r\n            uint contractPercentNew = getContractBalanceRate();\r\n            if (contractPercentNew > contractPercent) {\r\n                contractPercent = contractPercentNew;\r\n            }\r\n        }\r\n\r\n        emit Invest(msg.sender, msgValue);\r\n    }\r\n\r\n    function isActive(address userAddress) public view returns (bool) {\r\n        User storage user = users[userAddress];\r\n\r\n        return (user.deposits.length > 0) && uint(user.deposits[user.deposits.length-1].withdrawn) < uint(user.deposits[user.deposits.length-1].amount).mul(2);\r\n    }\r\n\r\n    function getUserTotalDeposits(address userAddress) public view returns (uint) {\r\n        User storage user = users[userAddress];\r\n\r\n        uint amount;\r\n\r\n        for (uint i = 0; i < user.deposits.length; i++) {\r\n            amount = amount.add(uint(user.deposits[i].amount));\r\n        }\r\n\r\n        return amount;\r\n    }\r\n\r\n    function getUserAmountOfDeposits(address userAddress) public view returns (uint) {\r\n        return users[userAddress].deposits.length;\r\n    }\r\n\r\n    function getUserTotalWithdrawn(address userAddress) public view returns (uint) {\r\n        User storage user = users[userAddress];\r\n\r\n        uint amount = user.bonus;\r\n\r\n        for (uint i = 0; i < user.deposits.length; i++) {\r\n            amount = amount.add(uint(user.deposits[i].withdrawn));\r\n        }\r\n\r\n        return amount;\r\n    }\r\n    \r\n    function getUserLastDeposit(address userAddress) public view returns (uint) {\r\n        User storage user = users[userAddress];\r\n        return user.checkpoint;\r\n    }\r\n\r\n    function getCurrentHalfDayTurnover() public view returns (uint) {\r\n        return turnover[getCurrentHalfDay()];\r\n    }\r\n\r\n    function getCurrentHalfDay() public view returns (uint) {\r\n        return (block.timestamp.sub(contractCreationTime)).div(timeStep.div(2));\r\n    }\r\n\r\n    function getUserDeposits(address userAddress, uint last, uint first) public view returns (uint[] memory, uint[] memory, uint[] memory, uint[] memory) {\r\n        User storage user = users[userAddress];\r\n\r\n        uint count = first.sub(last);\r\n        if (count > user.deposits.length) {\r\n            count = user.deposits.length;\r\n        }\r\n\r\n        uint[] memory amount = new uint[](count);\r\n        uint[] memory withdrawn = new uint[](count);\r\n        uint[] memory refback = new uint[](count);\r\n        uint[] memory start = new uint[](count);\r\n\r\n        uint index = 0;\r\n        for (uint i = first; i > last; i--) {\r\n            amount[index] = uint(user.deposits[i-1].amount);\r\n            withdrawn[index] = uint(user.deposits[i-1].withdrawn);\r\n            // refback[index] = uint(user.deposits[i-1].refback);\r\n            start[index] = uint(user.deposits[i-1].start);\r\n            index++;\r\n        }\r\n\r\n        return (amount, withdrawn, refback, start);\r\n    }\r\n\r\n    function getUserStats(address userAddress) public view returns (uint, uint, uint, uint, uint) {\r\n        uint userW = getUserTotalWithdrawn(userAddress);\r\n        uint userP = getUserPercentRate(userAddress);\r\n        uint userA = getUserAvailable(userAddress);\r\n        uint userD = getUserAmountOfDeposits(userAddress);\r\n        uint userDT = getUserTotalDeposits(userAddress);\r\n\r\n        return (userP, userA, userDT, userD, userW);\r\n    }\r\n\r\n    function getUserReferralsStats(address userAddress) public view returns (address, uint64, uint24[11] memory) {\r\n        User storage user = users[userAddress];\r\n\r\n        return (user.referrer, user.bonus, user.refs);\r\n    }\r\n\r\n    function getSiteStats() public view returns (uint, uint, uint, uint) {\r\n        return (totalInvested, totalDeposits, address(this).balance, contractPercent);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"martAddr\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"adminAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"FeePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Invest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Welcome\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"adminFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminFeeAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityBonusStep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractBalStep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractCreationTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommunityBonusRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalanceRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentHalfDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentHalfDayTurnover\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLeaderBonusRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSiteStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAmountOfDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"last\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"first\",\"type\":\"uint256\"}],\"name\":\"getUserDeposits\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserLastDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserPercentRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralsStats\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint24[11]\",\"name\":\"\",\"type\":\"uint24[11]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leaderBonusStep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"martFeeAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxCommunityPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxContractPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxHoldPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLeaderPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentsDivider\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referralPercents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeStep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRefBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EVERPROFIT", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000089381148853c21a00b51b20e9c0d606edacaa6f00000000000000000000000044eceb03bde61d9b23ae8c828eaf74cbf116cc85", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8296bf90cbd96e056316601c56f3d00684af7419ca6eaff3b4318d18e63b01aa"}