{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Exchange.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { Address } from './libraries/Address.sol';\\r\\nimport {\\r\\n  SafeMath as SafeMath256\\r\\n} from './libraries/SafeMath.sol';\\r\\n\\r\\nimport { AssetRegistry } from './libraries/AssetRegistry.sol';\\r\\nimport { AssetTransfers } from './libraries/AssetTransfers.sol';\\r\\nimport { AssetUnitConversions } from './libraries/AssetUnitConversions.sol';\\r\\nimport { Owned } from './Owned.sol';\\r\\nimport { SafeMath64 } from './libraries/SafeMath64.sol';\\r\\nimport { Signatures } from './libraries/Signatures.sol';\\r\\nimport {\\r\\n  Enums,\\r\\n  ICustodian,\\r\\n  IBEP20,\\r\\n  IExchange,\\r\\n  Structs\\r\\n} from './libraries/Interfaces.sol';\\r\\nimport { UUID } from './libraries/UUID.sol';\\r\\nimport { IterableMapping } from './libraries/IterableMapping.sol';\\r\\n// import 'hardhat/console.sol';\\r\\n\\r\\n\\r\\n/**\\r\\n * @notice The Exchange contract. Implements all deposit, trade, and withdrawal logic and associated balance tracking\\r\\n *\\r\\n * @dev The term `asset` refers collectively to BNB and BEP-20 tokens, the term `token` refers only to the latter\\r\\n * @dev Events with indexed string parameters (Deposited and TradeExecuted) only log the hash values for those\\r\\n * parameters, from which the original raw string values cannot be retrieved. For convenience these events contain\\r\\n * the un-indexed string parameter values in addition to the indexed values\\r\\n */\\r\\ncontract Exchange is IExchange, Owned {\\r\\n  using SafeMath64 for uint64;\\r\\n  using SafeMath256 for uint256;\\r\\n  using AssetRegistry for AssetRegistry.Storage;\\r\\n  using IterableMapping for IterableMapping.Map;\\r\\n\\r\\n  // Events //\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when an admin changes the Chain Propagation Period tunable parameter with `setChainPropagationPeriod`\\r\\n   */\\r\\n  event ChainPropagationPeriodChanged(uint256 previousValue, uint256 newValue);\\r\\n  /**\\r\\n   * @notice Emitted when a user deposits BNB with `depositBNB` or a token with `depositAsset` or `depositAssetBySymbol`\\r\\n   */\\r\\n  event Deposited(\\r\\n    uint64 index,\\r\\n    address indexed wallet,\\r\\n    address indexed assetAddress,\\r\\n    string indexed assetSymbolIndex,\\r\\n    string assetSymbol,\\r\\n    uint64 quantityInPips,\\r\\n    uint64 newExchangeBalanceInPips,\\r\\n    uint256 newExchangeBalanceInAssetUnits\\r\\n  );\\r\\n  /**\\r\\n   * @notice Emitted when an admin changes the Dispatch Wallet tunable parameter with `setDispatcher`\\r\\n   */\\r\\n  event AddDispatcher(address newValue);\\r\\n  event RemoveDispatcher(address value);\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when an admin changes the Fee Wallet tunable parameter with `setFeeWallet`\\r\\n   */\\r\\n  event FeeWalletChanged(address previousValue, address newValue);\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when a user invalidates an order nonce with `invalidateOrderNonce`\\r\\n   */\\r\\n  event OrderNonceInvalidated(\\r\\n    address indexed wallet,\\r\\n    uint128 nonce,\\r\\n    uint128 timestampInMs,\\r\\n    uint256 effectiveBlockNumber\\r\\n  );\\r\\n  /**\\r\\n   * @notice Emitted when an admin initiates the token registration process with `registerToken`\\r\\n   */\\r\\n  event TokenRegistered(\\r\\n    IBEP20 indexed assetAddress,\\r\\n    string assetSymbol,\\r\\n    uint8 decimals\\r\\n  );\\r\\n  /**\\r\\n   * @notice Emitted when an admin finalizes the token registration process with `confirmAssetRegistration`, after\\r\\n   * which it can be deposited, traded, or withdrawn\\r\\n   */\\r\\n  event TokenRegistrationConfirmed(\\r\\n    IBEP20 indexed assetAddress,\\r\\n    string assetSymbol,\\r\\n    uint8 decimals\\r\\n  );\\r\\n  /**\\r\\n   * @notice Emitted when an admin adds a symbol to a previously registered and confirmed token\\r\\n   * via `addTokenSymbol`\\r\\n   */\\r\\n  event TokenSymbolAdded(IBEP20 indexed assetAddress, string assetSymbol);\\r\\n  /**\\r\\n   * @notice Emitted when the Dispatcher Wallet submits a trade for execution with `executeTrade`\\r\\n   */\\r\\n  event TradeExecuted(\\r\\n    address buyWallet,\\r\\n    address sellWallet,\\r\\n    string indexed baseAssetSymbolIndex,\\r\\n    string indexed quoteAssetSymbolIndex,\\r\\n    string baseAssetSymbol,\\r\\n    string quoteAssetSymbol,\\r\\n    uint64 baseQuantityInPips,\\r\\n    uint64 quoteQuantityInPips,\\r\\n    uint64 tradePriceInPips,\\r\\n    bytes32 buyOrderHash,\\r\\n    bytes32 sellOrderHash\\r\\n  );\\r\\n  /**\\r\\n   * @notice Emitted when the Dispatcher Wallet submits trades for execution with `executeTrades`\\r\\n   */\\r\\n  // event TradesExecuted(Structs.ExecRet[] vals);\\r\\n  /**\\r\\n   * @notice Emitted when a user invokes the Exit Wallet mechanism with `exitWallet`\\r\\n   */\\r\\n  event WalletExited(address indexed wallet, uint256 effectiveBlockNumber);\\r\\n  /**\\r\\n   * @notice Emitted when a user withdraws an asset balance through the Exit Wallet mechanism with `withdrawExit`\\r\\n   */\\r\\n  event WalletExitWithdrawn(\\r\\n    address indexed wallet,\\r\\n    address indexed assetAddress,\\r\\n    string assetSymbol,\\r\\n    uint64 quantityInPips,\\r\\n    uint64 newExchangeBalanceInPips,\\r\\n    uint256 newExchangeBalanceInAssetUnits\\r\\n  );\\r\\n  /**\\r\\n   * @notice Emitted when a user clears the exited status of a wallet previously exited with `exitWallet`\\r\\n   */\\r\\n  event WalletExitCleared(address indexed wallet);\\r\\n  /**\\r\\n   * @notice Emitted when the Dispatcher Wallet submits a withdrawal with `withdraw`\\r\\n   */\\r\\n  event Withdrawn(\\r\\n    address indexed wallet,\\r\\n    address indexed assetAddress,\\r\\n    string assetSymbol,\\r\\n    uint64 quantityInPips,\\r\\n    uint64 newExchangeBalanceInPips,\\r\\n    uint256 newExchangeBalanceInAssetUnits\\r\\n  );\\r\\n\\r\\n  // Internally used structs //\\r\\n\\r\\n  struct NonceInvalidation {\\r\\n    bool exists;\\r\\n    uint64 timestampInMs;\\r\\n    uint256 effectiveBlockNumber;\\r\\n  }\\r\\n\\r\\n  struct WalletExit {\\r\\n    bool exists;\\r\\n    uint256 effectiveBlockNumber;\\r\\n  }\\r\\n\\r\\n  // Storage //\\r\\n\\r\\n  // Asset registry data\\r\\n  AssetRegistry.Storage _assetRegistry;\\r\\n  // Mapping of order wallet hash => isComplete\\r\\n  mapping(bytes32 => bool) _completedOrderHashes;\\r\\n  // Mapping of withdrawal wallet hash => isComplete\\r\\n  mapping(bytes32 => bool) _completedWithdrawalHashes;\\r\\n  address payable _custodian;\\r\\n  uint64 _depositIndex;\\r\\n  // Mapping of wallet => IterableMapping.Map\\r\\n  mapping(address => IterableMapping.Map) _balancesInPips;\\r\\n  // Mapping of wallet => last invalidated timestampInMs\\r\\n  mapping(address => NonceInvalidation) _nonceInvalidations;\\r\\n  // Mapping of order hash => filled quantity in pips\\r\\n  mapping(bytes32 => uint64) _partiallyFilledOrderQuantitiesInPips;\\r\\n  mapping(address => WalletExit) _walletExits;\\r\\n  // Tunable parameters\\r\\n  uint256 _chainPropagationPeriod;\\r\\n  mapping (address => bool) _dispatcherWallet;\\r\\n  address _feeWallet;\\r\\n\\r\\n  // Constant values //\\r\\n\\r\\n  uint256 constant _maxChainPropagationPeriod = 201600; //(7 * 24 * 60 * 60) / 3; 1 week at 3s/block\\r\\n  uint64 constant _maxTradeFeeBasisPoints = 2000; // 20 * 100; 20%;\\r\\n  uint64 constant _maxWithdrawalFeeBasisPoints = 2000; // 20 * 100; // 20%;\\r\\n\\r\\n  /**\\r\\n   * @notice Instantiate a new `Exchange` contract\\r\\n   *\\r\\n   * @dev Sets `_owner` and `_admin` to `msg.sender` */\\r\\n  constructor() Owned() {}\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the address of the `Custodian` contract\\r\\n   *\\r\\n   * @dev The `Custodian` accepts `Exchange` and `Governance` addresses in its constructor, after\\r\\n   * which they can only be changed by the `Governance` contract itself. Therefore the `Custodian`\\r\\n   * must be deployed last and its address set here on an existing `Exchange` contract. This value\\r\\n   * is immutable once set and cannot be changed again\\r\\n   *\\r\\n   * @param newCustodian The address of the `Custodian` contract deployed against this `Exchange`\\r\\n   * contract's address\\r\\n   */\\r\\n  function setCustodian(address payable newCustodian) external onlyAdmin {\\r\\n    require(_custodian == address(0x0), 'already set');\\r\\n    require(Address.isContract(newCustodian), 'Invalid address');\\r\\n\\r\\n    _custodian = newCustodian;\\r\\n  }\\r\\n\\r\\n  /*** Tunable parameters ***/\\r\\n\\r\\n  /**\\r\\n   * @notice Sets a new Chain Propagation Period - the block delay after which order nonce invalidations\\r\\n   * are respected by `executeTrade` and wallet exits are respected by `executeTrade` and `withdraw`\\r\\n   *\\r\\n   * @param newChainPropagationPeriod The new Chain Propagation Period expressed as a number of blocks. Must\\r\\n   * be less than `_maxChainPropagationPeriod`\\r\\n   */\\r\\n  function setChainPropagationPeriod(uint256 newChainPropagationPeriod)\\r\\n    external\\r\\n    onlyAdmin\\r\\n  {\\r\\n    require(\\r\\n      newChainPropagationPeriod < _maxChainPropagationPeriod,\\r\\n      'Bigger than 1 week'\\r\\n    );\\r\\n\\r\\n    uint256 oldChainPropagationPeriod = _chainPropagationPeriod;\\r\\n    _chainPropagationPeriod = newChainPropagationPeriod;\\r\\n\\r\\n    emit ChainPropagationPeriodChanged(\\r\\n      oldChainPropagationPeriod,\\r\\n      newChainPropagationPeriod\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the address of the Fee wallet\\r\\n   *\\r\\n   * @dev Trade and Withdraw fees will accrue in the `_balancesInPips` mappings for this wallet\\r\\n   *\\r\\n   * @param newFeeWallet The new Fee wallet. Must be different from the current one\\r\\n   */\\r\\n  function setFeeWallet(address newFeeWallet) external onlyAdmin {\\r\\n    require(newFeeWallet != address(0x0), 'Invalid address');\\r\\n    require(\\r\\n      newFeeWallet != _feeWallet,\\r\\n      'Same fee wallet'\\r\\n    );\\r\\n\\r\\n    address oldFeeWallet = _feeWallet;\\r\\n    _feeWallet = newFeeWallet;\\r\\n\\r\\n    emit FeeWalletChanged(oldFeeWallet, newFeeWallet);\\r\\n  }\\r\\n\\r\\n  // Accessors //\\r\\n\\r\\n  /**\\r\\n   * @notice Load a wallet's balance by asset address, in asset units\\r\\n   *\\r\\n   * @param wallet The wallet address to load the balance for. Can be different from `msg.sender`\\r\\n   * @param assetAddress The asset address to load the wallet's balance for\\r\\n   *\\r\\n   * @return The quantity denominated in asset units of asset at `assetAddress` currently\\r\\n   * deposited by `wallet`\\r\\n   */\\r\\n  function loadBalanceInAssetUnitsByAddress(\\r\\n    address wallet,\\r\\n    address assetAddress\\r\\n  ) external view returns (uint256) {\\r\\n    require(wallet != address(0x0), 'Invalid address');\\r\\n\\r\\n    Structs.Asset memory asset = _assetRegistry.loadAssetByAddress(\\r\\n      assetAddress\\r\\n    );\\r\\n    return\\r\\n      AssetUnitConversions.pipsToAssetUnits(\\r\\n        _balancesInPips[wallet].get(assetAddress),\\r\\n        asset.decimals\\r\\n      );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Load a wallet's balance by asset address, in asset units\\r\\n   *\\r\\n   * @param wallet The wallet address to load the balance for. Can be different from `msg.sender`\\r\\n   * @param assetSymbol The asset symbol to load the wallet's balance for\\r\\n   *\\r\\n   * @return The quantity denominated in asset units of asset `assetSymbol` currently deposited\\r\\n   * by `wallet`\\r\\n   */\\r\\n  function loadBalanceInAssetUnitsBySymbol(\\r\\n    address wallet,\\r\\n    string calldata assetSymbol\\r\\n  ) external view returns (uint256) {\\r\\n    require(wallet != address(0x0), 'Invalid address');\\r\\n\\r\\n    Structs.Asset memory asset = _assetRegistry.loadAssetBySymbol(\\r\\n      assetSymbol,\\r\\n      getCurrentTimestampInMs()\\r\\n    );\\r\\n    return\\r\\n      AssetUnitConversions.pipsToAssetUnits(\\r\\n        _balancesInPips[wallet].get(asset.assetAddress),\\r\\n        asset.decimals\\r\\n      );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Load a wallet's balance by asset address, in pips\\r\\n   *\\r\\n   * @param wallet The wallet address to load the balance for. Can be different from `msg.sender`\\r\\n   * @param assetAddress The asset address to load the wallet's balance for\\r\\n   *\\r\\n   * @return The quantity denominated in pips of asset at `assetAddress` currently deposited by `wallet`\\r\\n   */\\r\\n  function loadBalanceInPipsByAddress(address wallet, address assetAddress)\\r\\n    external\\r\\n    view\\r\\n    returns (uint64)\\r\\n  {\\r\\n    require(wallet != address(0x0), 'Invalid address');\\r\\n\\r\\n    return _balancesInPips[wallet].get(assetAddress);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Load a wallet's balance by asset symbol, in pips\\r\\n   *\\r\\n   * @param wallet The wallet address to load the balance for. Can be different from `msg.sender`\\r\\n   * @param assetSymbol The asset symbol to load the wallet's balance for\\r\\n   *\\r\\n   * @return The quantity denominated in pips of asset with `assetSymbol` currently deposited by `wallet`\\r\\n   */\\r\\n  function loadBalanceInPipsBySymbol(\\r\\n    address wallet,\\r\\n    string calldata assetSymbol\\r\\n  ) external view returns (uint64) {\\r\\n    require(wallet != address(0x0), 'Invalid address');\\r\\n\\r\\n    address assetAddress = _assetRegistry\\r\\n      .loadAssetBySymbol(assetSymbol, getCurrentTimestampInMs())\\r\\n      .assetAddress;\\r\\n    return _balancesInPips[wallet].get(assetAddress);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Load a wallet's asset address of balance\\r\\n   *\\r\\n   * @param wallet The wallet address to load the balance asset address for.\\r\\n   *\\r\\n   * @return All assets address of a wallet's balance\\r\\n   */\\r\\n  function loadBalanceAssetAddress(address wallet) external view returns (address[] memory) {\\r\\n    address[] memory assetsAddress = new address[](_balancesInPips[wallet].size());\\r\\n    for (uint i = 0; i < _balancesInPips[wallet].size(); i++) {\\r\\n        address key = _balancesInPips[wallet].getKeyAtIndex(i);\\r\\n        assetsAddress[i] = key;\\r\\n    }\\r\\n    return assetsAddress;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Load the address of the Fee wallet\\r\\n   *\\r\\n   * @return The address of the Fee wallet\\r\\n   */\\r\\n  function loadFeeWallet() external view returns (address) {\\r\\n    return _feeWallet;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Load the quantity filled so far for a partially filled orders\\r\\n\\r\\n   * @dev Invalidating an order nonce will not clear partial fill quantities for earlier orders because\\r\\n   * the gas cost would potentially be unbound\\r\\n   *\\r\\n   * @param orderHash The order hash as originally signed by placing wallet that uniquely identifies an order\\r\\n   *\\r\\n   * @return For partially filled orders, the amount filled so far in pips. For orders in all other states, 0\\r\\n   */\\r\\n  function loadPartiallyFilledOrderQuantityInPips(bytes32 orderHash)\\r\\n    external\\r\\n    view\\r\\n    returns (uint64)\\r\\n  {\\r\\n    return _partiallyFilledOrderQuantitiesInPips[orderHash];\\r\\n  }\\r\\n\\r\\n  // Depositing //\\r\\n\\r\\n  /**\\r\\n   * @notice Deposit BNB\\r\\n   */\\r\\n  function depositBNB() external payable {\\r\\n    require(msg.value%uint256(10000000000)==0, \\\"dust value\\\");\\r\\n    deposit(msg.sender, address(0x0), msg.value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Deposit `IBEP20` compliant tokens\\r\\n   *\\r\\n   * @param tokenAddress The token contract address\\r\\n   * @param quantityInAssetUnits The quantity to deposit. The sending wallet must first call the `approve` method on\\r\\n   * the token contract for at least this quantity first\\r\\n   */\\r\\n  function depositTokenByAddress(\\r\\n    IBEP20 tokenAddress,\\r\\n    uint256 quantityInAssetUnits\\r\\n  ) external {\\r\\n    require(\\r\\n      address(tokenAddress) != address(0x0),\\r\\n      'Invalid address'\\r\\n    );\\r\\n    deposit(msg.sender, address(tokenAddress), quantityInAssetUnits);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Deposit `IBEP20` compliant tokens\\r\\n   *\\r\\n   * @param assetSymbol The case-sensitive symbol string for the token\\r\\n   * @param quantityInAssetUnits The quantity to deposit. The sending wallet must first call the `approve` method on\\r\\n   * the token contract for at least this quantity first\\r\\n   */\\r\\n  function depositTokenBySymbol(\\r\\n    string calldata assetSymbol,\\r\\n    uint256 quantityInAssetUnits\\r\\n  ) external {\\r\\n    IBEP20 tokenAddress = IBEP20(\\r\\n      _assetRegistry\\r\\n        .loadAssetBySymbol(assetSymbol, getCurrentTimestampInMs())\\r\\n        .assetAddress\\r\\n    );\\r\\n    require(\\r\\n      address(tokenAddress) != address(0x0),\\r\\n      'Invalid address'\\r\\n    );\\r\\n\\r\\n    deposit(msg.sender, address(tokenAddress), quantityInAssetUnits);\\r\\n  }\\r\\n\\r\\n  function deposit(\\r\\n    address wallet,\\r\\n    address assetAddress,\\r\\n    uint256 quantityInAssetUnits\\r\\n  ) private {\\r\\n    // Calling exitWallet disables deposits immediately on mining, in contrast to withdrawals and\\r\\n    // trades which respect the Chain Propagation Period given by `effectiveBlockNumber` via\\r\\n    // `isWalletExitFinalized`\\r\\n    require(!_walletExits[wallet].exists, 'Wallet exited');\\r\\n\\r\\n    Structs.Asset memory asset = _assetRegistry.loadAssetByAddress(\\r\\n      assetAddress\\r\\n    );\\r\\n    uint64 quantityInPips = AssetUnitConversions.assetUnitsToPips(\\r\\n      quantityInAssetUnits,\\r\\n      asset.decimals\\r\\n    );\\r\\n    require(quantityInPips > 0, 'Quantity is too low');\\r\\n\\r\\n    // Convert from pips back into asset units to remove any fractional amount that is too small\\r\\n    // to express in pips. If the asset is BNB, this leftover fractional amount accumulates as dust\\r\\n    // in the `Exchange` contract. If the asset is a token the `Exchange` will call `transferFrom`\\r\\n    // without this fractional amount and there will be no dust\\r\\n    uint256 quantityInAssetUnitsWithoutFractionalPips = AssetUnitConversions\\r\\n      .pipsToAssetUnits(quantityInPips, asset.decimals);\\r\\n\\r\\n    // If the asset is BNB then the funds were already assigned to this contract via msg.value. If\\r\\n    // the asset is a token, additionally call the transferFrom function on the token contract for\\r\\n    // the pre-approved asset quantity\\r\\n    if (assetAddress != address(0x0)) {\\r\\n      AssetTransfers.transferFrom(\\r\\n        wallet,\\r\\n        IBEP20(assetAddress),\\r\\n        quantityInAssetUnitsWithoutFractionalPips\\r\\n      );\\r\\n    }\\r\\n    // Forward the funds to the `Custodian`\\r\\n    AssetTransfers.transferTo(\\r\\n      _custodian,\\r\\n      assetAddress,\\r\\n      quantityInAssetUnitsWithoutFractionalPips\\r\\n    );\\r\\n\\r\\n    uint64 newExchangeBalanceInPips = _balancesInPips[wallet].get(assetAddress).add(\\r\\n      quantityInPips\\r\\n    );\\r\\n    uint256 newExchangeBalanceInAssetUnits = AssetUnitConversions\\r\\n      .pipsToAssetUnits(newExchangeBalanceInPips, asset.decimals);\\r\\n\\r\\n    // Update balance with actual transferred quantity\\r\\n    _balancesInPips[wallet].set(assetAddress, newExchangeBalanceInPips);\\r\\n    _depositIndex++;\\r\\n\\r\\n    emit Deposited(\\r\\n      _depositIndex,\\r\\n      wallet,\\r\\n      assetAddress,\\r\\n      asset.symbol,\\r\\n      asset.symbol,\\r\\n      quantityInPips,\\r\\n      newExchangeBalanceInPips,\\r\\n      newExchangeBalanceInAssetUnits\\r\\n    );\\r\\n  }\\r\\n\\r\\n  // Invalidation //\\r\\n\\r\\n  /**\\r\\n   * @notice Invalidate all order nonces with a timestampInMs lower than the one provided\\r\\n   *\\r\\n   * @param nonce A Version 1 UUID. After calling and once the Chain Propagation Period has elapsed,\\r\\n   * `executeTrade` will reject order nonces from this wallet with a timestampInMs component lower than\\r\\n   * the one provided\\r\\n   */\\r\\n  function invalidateOrderNonce(uint128 nonce) external {\\r\\n    uint64 timestampInMs = UUID.getTimestampInMsFromUuidV1(nonce);\\r\\n    // Enforce a maximum skew for invalidating nonce timestamps in the future so the user doesn't\\r\\n    // lock their wallet from trades indefinitely\\r\\n    require(\\r\\n      timestampInMs < getOneDayFromNowInMs(),\\r\\n      'Nonce too far in future'\\r\\n    );\\r\\n\\r\\n    if (_nonceInvalidations[msg.sender].exists) {\\r\\n      require(\\r\\n        _nonceInvalidations[msg.sender].timestampInMs < timestampInMs,\\r\\n        'Invalidated'\\r\\n      );\\r\\n      require(\\r\\n        _nonceInvalidations[msg.sender].effectiveBlockNumber <= block.number,\\r\\n        'Awaiting propagation'\\r\\n      );\\r\\n    }\\r\\n\\r\\n    // Changing the Chain Propagation Period will not affect the effectiveBlockNumber for this invalidation\\r\\n    uint256 effectiveBlockNumber = block.number + _chainPropagationPeriod;\\r\\n    _nonceInvalidations[msg.sender] = NonceInvalidation(\\r\\n      true,\\r\\n      timestampInMs,\\r\\n      effectiveBlockNumber\\r\\n    );\\r\\n\\r\\n    emit OrderNonceInvalidated(\\r\\n      msg.sender,\\r\\n      nonce,\\r\\n      timestampInMs,\\r\\n      effectiveBlockNumber\\r\\n    );\\r\\n  }\\r\\n\\r\\n  // Withdrawing //\\r\\n\\r\\n  /**\\r\\n   * @notice Settles a user withdrawal submitted off-chain. Calls restricted to currently whitelisted Dispatcher wallet\\r\\n   *\\r\\n   * @param withdrawal A `Structs.Withdrawal` struct encoding the parameters of the withdrawal\\r\\n   */\\r\\n  function withdraw(Structs.Withdrawal memory withdrawal)\\r\\n    public\\r\\n    override\\r\\n    onlyDispatcher\\r\\n  {\\r\\n    // Validations\\r\\n    require(!isWalletExitFinalized(withdrawal.walletAddress), 'Wallet exited');\\r\\n    require(\\r\\n      getFeeBasisPoints(withdrawal.gasFeeInPips, withdrawal.quantityInPips) <=\\r\\n        _maxWithdrawalFeeBasisPoints,\\r\\n      'Excessive fee'\\r\\n    );\\r\\n    bytes32 withdrawalHash = validateWithdrawalSignature(withdrawal);\\r\\n    require(\\r\\n      !_completedWithdrawalHashes[withdrawalHash],\\r\\n      'Withdrawn'\\r\\n    );\\r\\n\\r\\n    // If withdrawal is by asset symbol (most common) then resolve to asset address\\r\\n    Structs.Asset memory asset = withdrawal.withdrawalType ==\\r\\n      Enums.WithdrawalType.BySymbol\\r\\n      ? _assetRegistry.loadAssetBySymbol(\\r\\n        withdrawal.assetSymbol,\\r\\n        UUID.getTimestampInMsFromUuidV1(withdrawal.nonce)\\r\\n      )\\r\\n      : _assetRegistry.loadAssetByAddress(withdrawal.assetAddress);\\r\\n\\r\\n    // SafeMath reverts if balance is overdrawn\\r\\n    uint64 netAssetQuantityInPips = withdrawal.quantityInPips.sub(\\r\\n      withdrawal.gasFeeInPips\\r\\n    );\\r\\n    uint256 netAssetQuantityInAssetUnits = AssetUnitConversions\\r\\n      .pipsToAssetUnits(netAssetQuantityInPips, asset.decimals);\\r\\n    uint64 newExchangeBalanceInPips = _balancesInPips[withdrawal\\r\\n      .walletAddress].get(asset.assetAddress)\\r\\n      .sub(withdrawal.quantityInPips);\\r\\n    uint256 newExchangeBalanceInAssetUnits = AssetUnitConversions\\r\\n      .pipsToAssetUnits(newExchangeBalanceInPips, asset.decimals);\\r\\n\\r\\n    if (newExchangeBalanceInPips==0) {\\r\\n      _balancesInPips[withdrawal.walletAddress].remove(asset\\r\\n      .assetAddress);\\r\\n    } else {\\r\\n      _balancesInPips[withdrawal.walletAddress].set(asset\\r\\n      .assetAddress, newExchangeBalanceInPips);\\r\\n    }\\r\\n    _balancesInPips[_feeWallet].set(asset\\r\\n      .assetAddress, _balancesInPips[_feeWallet].get(asset.assetAddress).add(\\r\\n      withdrawal.gasFeeInPips\\r\\n    ));\\r\\n\\r\\n    ICustodian(_custodian).withdraw(\\r\\n      withdrawal.walletAddress,\\r\\n      asset.assetAddress,\\r\\n      netAssetQuantityInAssetUnits\\r\\n    );\\r\\n\\r\\n    _completedWithdrawalHashes[withdrawalHash] = true;\\r\\n\\r\\n    emit Withdrawn(\\r\\n      withdrawal.walletAddress,\\r\\n      asset.assetAddress,\\r\\n      asset.symbol,\\r\\n      withdrawal.quantityInPips,\\r\\n      newExchangeBalanceInPips,\\r\\n      newExchangeBalanceInAssetUnits\\r\\n    );\\r\\n  }\\r\\n\\r\\n  // Wallet exits //\\r\\n\\r\\n  /**\\r\\n   * @notice Flags the sending wallet as exited, immediately disabling deposits upon mining.\\r\\n   * After the Chain Propagation Period passes trades and withdrawals are also disabled for the wallet,\\r\\n   * and assets may then be withdrawn one at a time via `withdrawExit`\\r\\n   */\\r\\n  function exitWallet() external {\\r\\n    require(!_walletExits[msg.sender].exists, 'Wallet exited');\\r\\n\\r\\n    _walletExits[msg.sender] = WalletExit(\\r\\n      true,\\r\\n      block.number + _chainPropagationPeriod\\r\\n    );\\r\\n\\r\\n    emit WalletExited(msg.sender, block.number + _chainPropagationPeriod);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Withdraw the entire balance of an asset for an exited wallet. The Chain Propagation Period must\\r\\n   * have already passed since calling `exitWallet` on `assetAddress`\\r\\n   *\\r\\n   * @param assetAddress The address of the asset to withdraw\\r\\n   */\\r\\n  function withdrawExit(address assetAddress) external {\\r\\n    require(isWalletExitFinalized(msg.sender), 'Wallet not finalized');\\r\\n\\r\\n    Structs.Asset memory asset = _assetRegistry.loadAssetByAddress(\\r\\n      assetAddress\\r\\n    );\\r\\n    uint64 balanceInPips = _balancesInPips[msg.sender].get(assetAddress);\\r\\n    uint256 balanceInAssetUnits = AssetUnitConversions.pipsToAssetUnits(\\r\\n      balanceInPips,\\r\\n      asset.decimals\\r\\n    );\\r\\n\\r\\n    require(balanceInAssetUnits > 0, 'Balance is 0');\\r\\n    _balancesInPips[msg.sender].remove(assetAddress);\\r\\n    ICustodian(_custodian).withdraw(\\r\\n      payable(msg.sender),\\r\\n      assetAddress,\\r\\n      balanceInAssetUnits\\r\\n    );\\r\\n\\r\\n    emit WalletExitWithdrawn(\\r\\n      msg.sender,\\r\\n      assetAddress,\\r\\n      asset.symbol,\\r\\n      balanceInPips,\\r\\n      0,\\r\\n      0\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Withdraw the entire balance of all assets for an exited wallet. The Chain Propagation Period must\\r\\n   * have already passed since calling `exitWallet`\\r\\n   */\\r\\n  function withdrawAllExit() external {\\r\\n    require(isWalletExitFinalized(msg.sender), 'Wallet not finalized');\\r\\n    \\r\\n    address[] memory assetsAddress = new address[](_balancesInPips[msg.sender].size());\\r\\n    for (uint i = 0; i < _balancesInPips[msg.sender].size(); i++) {\\r\\n      address assetAddress = _balancesInPips[msg.sender].getKeyAtIndex(i);\\r\\n      assetsAddress[i] = assetAddress;\\r\\n      Structs.Asset memory asset = _assetRegistry.loadAssetByAddress(\\r\\n        assetAddress\\r\\n      );\\r\\n      uint64 balanceInPips = _balancesInPips[msg.sender].get(assetAddress);\\r\\n      uint256 balanceInAssetUnits = AssetUnitConversions.pipsToAssetUnits(\\r\\n        balanceInPips,\\r\\n        asset.decimals\\r\\n      );\\r\\n      if (balanceInAssetUnits == 0) {\\r\\n        continue;\\r\\n      }\\r\\n      ICustodian(_custodian).withdraw(\\r\\n        payable(msg.sender),\\r\\n        assetAddress,\\r\\n        balanceInAssetUnits\\r\\n      );\\r\\n\\r\\n      emit WalletExitWithdrawn(\\r\\n        msg.sender,\\r\\n        assetAddress,\\r\\n        asset.symbol,\\r\\n        balanceInPips,\\r\\n        0,\\r\\n        0\\r\\n      );\\r\\n    }\\r\\n    for (uint i = 0; i < assetsAddress.length; i++) {\\r\\n        _balancesInPips[msg.sender].remove(assetsAddress[i]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Clears exited status of sending wallet. Upon mining immediately enables\\r\\n   * deposits, trades, and withdrawals by sending wallet\\r\\n   */\\r\\n  function clearWalletExit() external {\\r\\n    require(_walletExits[msg.sender].exists, 'Wallet not exited');\\r\\n\\r\\n    delete _walletExits[msg.sender];\\r\\n\\r\\n    emit WalletExitCleared(msg.sender);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Check if the wallet is exited, regardless of whether it is finalized\\r\\n   *\\r\\n   * @param wallet The address of the wallet to check\\r\\n   *\\r\\n   * @return The exited status of wallet\\r\\n   */\\r\\n  function isWalletExit(address wallet) public view returns (bool) {\\r\\n    WalletExit storage exit = _walletExits[wallet];\\r\\n    return exit.exists;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Check if the wallet is exited and finalized\\r\\n   *\\r\\n   * @param wallet The address of the wallet to check\\r\\n   *\\r\\n   * @return The exited and finalized status of wallet\\r\\n   */\\r\\n  function isWalletExitFinalized(address wallet) public view returns (bool) {\\r\\n    WalletExit storage exit = _walletExits[wallet];\\r\\n    return exit.exists && exit.effectiveBlockNumber <= block.number;\\r\\n  }\\r\\n\\r\\n  // Trades //\\r\\n\\r\\n  /**\\r\\n   * @notice Execute multiple trades\\r\\n   *\\r\\n   * @param buys A `Structs.Order` struct array encoding the parameters of the buy-side orders (receiving base, giving quote)\\r\\n   * @param sells A `Structs.Order` struct array encoding the parameters of the sell-side order (giving base, receiving quote)\\r\\n   * @param trades A `Structs.Trade` struct array encoding the parameters of this trade execution of the counterparty orders\\r\\n   */\\r\\n  function executeTrades(\\r\\n    Structs.Order[] memory buys,\\r\\n    Structs.Order[] memory sells,\\r\\n    Structs.Trade[] memory trades\\r\\n  ) external override onlyDispatcher {\\r\\n    require(\\r\\n      buys.length==sells.length && sells.length==trades.length,\\r\\n      \\\"length mismatch\\\"\\r\\n    );\\r\\n    require(\\r\\n      buys.length!=0,\\r\\n      \\\"length is zero\\\"\\r\\n    );\\r\\n    // Structs.ExecRet[] memory rets = new Structs.ExecRet[](buys.length);\\r\\n    // for (uint i = 0; i < buys.length; i++) {\\r\\n    //   (bool success, bytes memory data) = address(this).delegatecall(\\r\\n    //     abi.encodeWithSignature(\\\"executeTrade((uint8,uint128,address,uint8,uint8,uint64,bool,uint64,uint64,string,uint8,uint8,uint64,bytes),(uint8,uint128,address,uint8,uint8,uint64,bool,uint64,uint64,string,uint8,uint8,uint64,bytes),(string,string,address,address,uint64,uint64,uint64,uint64,address,address,uint64,uint64,uint64,uint8))\\\", buys[i], sells[i], trades[i])\\r\\n    //   );\\r\\n    //   if (success) {\\r\\n    //     rets[i] = Structs.ExecRet(true, \\\"\\\");\\r\\n    //   } else {\\r\\n    //     rets[i] = Structs.ExecRet(false, extractRevertReason(data));\\r\\n    //   }\\r\\n    // }\\r\\n    // emit TradesExecuted(rets);\\r\\n    for (uint256 i = 0; i < buys.length; i++) {\\r\\n      // bytes32 orderHash = Signatures.getOrderWalletHash(\\r\\n      //   buys[i],\\r\\n      //   trades[i].baseAssetSymbol,\\r\\n      //   trades[i].quoteAssetSymbol\\r\\n      // );\\r\\n      // console.log(\\\"contractHash:\\\");\\r\\n      // console.logBytes32(orderHash);\\r\\n      // bytes32 orderHash2 = Signatures.getOrderWalletHash(\\r\\n      //   sells[i],\\r\\n      //   trades[i].baseAssetSymbol,\\r\\n      //   trades[i].quoteAssetSymbol\\r\\n      // );\\r\\n      // console.log(\\\"contractHash2:\\\");\\r\\n      // console.logBytes32(orderHash2);\\r\\n      _executeTrade(buys[i], sells[i], trades[i]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  // function extractRevertReason (bytes memory revertData) internal pure returns (string memory reason) {\\r\\n  //     uint l = revertData.length;\\r\\n  //     if (l < 68) return \\\"Silently reverted\\\";\\r\\n  //     uint t;\\r\\n  //     assembly {\\r\\n  //         revertData := add (revertData, 4)\\r\\n  //         t := mload (revertData) // Save the content of the length slot\\r\\n  //         mstore (revertData, sub (l, 4)) // Set proper length\\r\\n  //     }\\r\\n  //     reason = abi.decode (revertData, (string));\\r\\n  //     assembly {\\r\\n  //         mstore (revertData, t) // Restore the content of the length slot\\r\\n  //     }\\r\\n  // }\\r\\n  /**\\r\\n   * @notice Settles a trade between two orders submitted and matched off-chain\\r\\n   *\\r\\n   * @dev As a gas optimization, base and quote symbols are passed in separately and combined to verify\\r\\n   * the wallet hash, since this is cheaper than splitting the market symbol into its two constituent asset symbols\\r\\n   * @dev Stack level too deep if declared external\\r\\n   *\\r\\n   * @param buy A `Structs.Order` struct encoding the parameters of the buy-side order (receiving base, giving quote)\\r\\n   * @param sell A `Structs.Order` struct encoding the parameters of the sell-side order (giving base, receiving quote)\\r\\n   * @param trade A `Structs.Trade` struct encoding the parameters of this trade execution of the counterparty orders\\r\\n   */\\r\\n  function executeTrade(\\r\\n    Structs.Order memory buy,\\r\\n    Structs.Order memory sell,\\r\\n    Structs.Trade memory trade\\r\\n  ) public override onlyDispatcher {\\r\\n    _executeTrade(buy, sell, trade);\\r\\n  }\\r\\n\\r\\n  // Updates buyer, seller, and fee wallet balances for both assets in trade pair according to trade parameters\\r\\n  function updateBalancesForTrade(\\r\\n    Structs.Order memory buy,\\r\\n    Structs.Order memory sell,\\r\\n    Structs.Trade memory trade\\r\\n  ) private {\\r\\n    // Seller gives base asset including fees\\r\\n    uint64 sellerBaseQuantity = _balancesInPips[sell.walletAddress].get(trade\\r\\n      .baseAssetAddress)\\r\\n      .sub(trade.grossBaseQuantityInPips);\\r\\n    if (sellerBaseQuantity > 0) {\\r\\n      _balancesInPips[sell.walletAddress].set(trade\\r\\n      .baseAssetAddress, sellerBaseQuantity);\\r\\n    } else {\\r\\n      _balancesInPips[sell.walletAddress].remove(trade\\r\\n      .baseAssetAddress);\\r\\n    }\\r\\n    // Buyer receives base asset minus fees\\r\\n    uint64 buyerBaseQuantity = _balancesInPips[buy.walletAddress].get(trade\\r\\n      .baseAssetAddress)\\r\\n      .add(trade.netBaseQuantityInPips);\\r\\n    if (buyerBaseQuantity > 0) {\\r\\n      _balancesInPips[buy.walletAddress].set(trade\\r\\n      .baseAssetAddress, buyerBaseQuantity);\\r\\n    } else {\\r\\n      _balancesInPips[buy.walletAddress].remove(trade\\r\\n      .baseAssetAddress);\\r\\n    }\\r\\n\\r\\n    // Buyer gives quote asset including fees\\r\\n    uint64 buyerQuoteQuantity = _balancesInPips[buy.walletAddress].get(trade\\r\\n      .quoteAssetAddress)\\r\\n      .sub(trade.grossQuoteQuantityInPips);\\r\\n    if (buyerQuoteQuantity > 0) {\\r\\n      _balancesInPips[buy.walletAddress].set(trade\\r\\n      .quoteAssetAddress, buyerQuoteQuantity);\\r\\n    } else {\\r\\n       _balancesInPips[buy.walletAddress].remove(trade\\r\\n      .quoteAssetAddress);\\r\\n    }\\r\\n    // Seller receives quote asset minus fees\\r\\n    uint64 sellerQuoteQuantity = _balancesInPips[sell.walletAddress].get(trade\\r\\n      .quoteAssetAddress)\\r\\n      .add(trade.netQuoteQuantityInPips);\\r\\n    if (sellerQuoteQuantity > 0) {\\r\\n      _balancesInPips[sell.walletAddress].set(trade\\r\\n      .quoteAssetAddress, sellerQuoteQuantity);\\r\\n    } else {\\r\\n      _balancesInPips[sell.walletAddress].remove(trade\\r\\n      .quoteAssetAddress);\\r\\n    }\\r\\n\\r\\n    // Maker and taker fees to fee wallet\\r\\n    uint64 makerFeeQuantity = _balancesInPips[_feeWallet].get(trade\\r\\n      .makerFeeAssetAddress)\\r\\n      .add(trade.makerFeeQuantityInPips);\\r\\n    if (makerFeeQuantity > 0) {\\r\\n      _balancesInPips[_feeWallet].set(trade\\r\\n      .makerFeeAssetAddress, makerFeeQuantity);\\r\\n    } else {\\r\\n      _balancesInPips[_feeWallet].remove(trade\\r\\n      .makerFeeAssetAddress);\\r\\n    }\\r\\n    uint64 takerFeeQuantity = _balancesInPips[_feeWallet].get(trade\\r\\n      .takerFeeAssetAddress)\\r\\n      .add(trade.takerFeeQuantityInPips);\\r\\n    if (takerFeeQuantity > 0) {\\r\\n      _balancesInPips[_feeWallet].set(trade\\r\\n      .takerFeeAssetAddress, takerFeeQuantity);\\r\\n    } else {\\r\\n      _balancesInPips[_feeWallet].remove(trade\\r\\n      .takerFeeAssetAddress);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function updateOrderFilledQuantities(\\r\\n    Structs.Order memory buyOrder,\\r\\n    bytes32 buyOrderHash,\\r\\n    Structs.Order memory sellOrder,\\r\\n    bytes32 sellOrderHash,\\r\\n    Structs.Trade memory trade\\r\\n  ) private {\\r\\n    updateOrderFilledQuantity(buyOrder, buyOrderHash, trade);\\r\\n    updateOrderFilledQuantity(sellOrder, sellOrderHash, trade);\\r\\n  }\\r\\n\\r\\n  // Update filled quantities tracking for order to prevent over- or double-filling orders\\r\\n  function updateOrderFilledQuantity(\\r\\n    Structs.Order memory order,\\r\\n    bytes32 orderHash,\\r\\n    Structs.Trade memory trade\\r\\n  ) private {\\r\\n    require(!_completedOrderHashes[orderHash], 'Double filled');\\r\\n\\r\\n    // Total quantity of above filled as a result of all trade executions, including this one\\r\\n    uint64 newFilledQuantityInPips;\\r\\n\\r\\n    // Market orders can express quantity in quote terms, and can be partially filled by multiple\\r\\n    // limit maker orders necessitating tracking partially filled amounts in quote terms to\\r\\n    // determine completion\\r\\n    if (order.isQuantityInQuote) {\\r\\n      require(\\r\\n        isMarketOrderType(order.orderType),\\r\\n        'Not market orders'\\r\\n      );\\r\\n      newFilledQuantityInPips = trade.grossQuoteQuantityInPips.add(\\r\\n        _partiallyFilledOrderQuantitiesInPips[orderHash]\\r\\n      );\\r\\n    } else {\\r\\n      // All other orders track partially filled quantities in base terms\\r\\n      newFilledQuantityInPips = trade.grossBaseQuantityInPips.add(\\r\\n        _partiallyFilledOrderQuantitiesInPips[orderHash]\\r\\n      );\\r\\n    }\\r\\n\\r\\n    require(\\r\\n      newFilledQuantityInPips <= order.quantityInPips,\\r\\n      'Overfilled'\\r\\n    );\\r\\n\\r\\n    if (newFilledQuantityInPips < order.quantityInPips) {\\r\\n      // If the order was partially filled, track the new filled quantity\\r\\n      _partiallyFilledOrderQuantitiesInPips[orderHash] = newFilledQuantityInPips;\\r\\n    } else {\\r\\n      // If the order was completed, delete any partial fill tracking and instead track its completion\\r\\n      // to prevent future double fills\\r\\n      delete _partiallyFilledOrderQuantitiesInPips[orderHash];\\r\\n      _completedOrderHashes[orderHash] = true;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  // Validations //\\r\\n\\r\\n  function validateAssetPair(\\r\\n    Structs.Order memory buy,\\r\\n    Structs.Order memory sell,\\r\\n    Structs.Trade memory trade\\r\\n  ) private view {\\r\\n    require(\\r\\n      trade.baseAssetAddress != trade.quoteAssetAddress,\\r\\n      'Base/quote assets must be different'\\r\\n    );\\r\\n\\r\\n    // Buy order market pair\\r\\n    Structs.Asset memory buyBaseAsset = _assetRegistry.loadAssetBySymbol(\\r\\n      trade.baseAssetSymbol,\\r\\n      UUID.getTimestampInMsFromUuidV1(buy.nonce)\\r\\n    );\\r\\n    Structs.Asset memory buyQuoteAsset = _assetRegistry.loadAssetBySymbol(\\r\\n      trade.quoteAssetSymbol,\\r\\n      UUID.getTimestampInMsFromUuidV1(buy.nonce)\\r\\n    );\\r\\n    require(\\r\\n      buyBaseAsset.assetAddress == trade.baseAssetAddress &&\\r\\n        buyQuoteAsset.assetAddress == trade.quoteAssetAddress,\\r\\n      'Buy order symbol mismatch'\\r\\n    );\\r\\n\\r\\n    // Sell order market pair\\r\\n    Structs.Asset memory sellBaseAsset = _assetRegistry.loadAssetBySymbol(\\r\\n      trade.baseAssetSymbol,\\r\\n      UUID.getTimestampInMsFromUuidV1(sell.nonce)\\r\\n    );\\r\\n    Structs.Asset memory sellQuoteAsset = _assetRegistry.loadAssetBySymbol(\\r\\n      trade.quoteAssetSymbol,\\r\\n      UUID.getTimestampInMsFromUuidV1(sell.nonce)\\r\\n    );\\r\\n    require(\\r\\n      sellBaseAsset.assetAddress == trade.baseAssetAddress &&\\r\\n        sellQuoteAsset.assetAddress == trade.quoteAssetAddress,\\r\\n      'Sell order symbol mismatch'\\r\\n    );\\r\\n\\r\\n    // Fee asset validation\\r\\n    require(\\r\\n      trade.makerFeeAssetAddress == trade.baseAssetAddress ||\\r\\n        trade.makerFeeAssetAddress == trade.quoteAssetAddress,\\r\\n      'Maker fee asset is not in trade pair'\\r\\n    );\\r\\n    require(\\r\\n      trade.takerFeeAssetAddress == trade.baseAssetAddress ||\\r\\n        trade.takerFeeAssetAddress == trade.quoteAssetAddress,\\r\\n      'Taker fee asset is not in trade pair'\\r\\n    );\\r\\n    require(\\r\\n      trade.makerFeeAssetAddress != trade.takerFeeAssetAddress,\\r\\n      'Maker/taker fee assets must be different'\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function validateLimitPrices(\\r\\n    Structs.Order memory buy,\\r\\n    Structs.Order memory sell,\\r\\n    Structs.Trade memory trade\\r\\n  ) private pure {\\r\\n    require(\\r\\n      trade.grossBaseQuantityInPips > 0,\\r\\n      'Base quantity is 0'\\r\\n    );\\r\\n    require(\\r\\n      trade.grossQuoteQuantityInPips > 0,\\r\\n      'Quote quantity is 0'\\r\\n    );\\r\\n\\r\\n    if (isLimitOrderType(buy.orderType)) {\\r\\n      require(\\r\\n        getImpliedQuoteQuantityInPips(\\r\\n          trade.grossBaseQuantityInPips,\\r\\n          buy.limitPriceInPips\\r\\n        ) >= trade.grossQuoteQuantityInPips,\\r\\n        'Buy limit price exceeded'\\r\\n      );\\r\\n    }\\r\\n\\r\\n    if (isLimitOrderType(sell.orderType)) {\\r\\n      require(\\r\\n        getImpliedQuoteQuantityInPips(\\r\\n          trade.grossBaseQuantityInPips,\\r\\n          sell.limitPriceInPips\\r\\n        ) <= trade.grossQuoteQuantityInPips,\\r\\n        'Sell limit price exceeded'\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function validateTradeFees(Structs.Trade memory trade) private pure {\\r\\n    uint64 makerTotalQuantityInPips = trade.makerFeeAssetAddress ==\\r\\n      trade.baseAssetAddress\\r\\n      ? trade.grossBaseQuantityInPips\\r\\n      : trade.grossQuoteQuantityInPips;\\r\\n    require(\\r\\n      getFeeBasisPoints(\\r\\n        trade.makerFeeQuantityInPips,\\r\\n        makerTotalQuantityInPips\\r\\n      ) <= _maxTradeFeeBasisPoints,\\r\\n      'Excessive maker fee'\\r\\n    );\\r\\n\\r\\n    uint64 takerTotalQuantityInPips = trade.takerFeeAssetAddress ==\\r\\n      trade.baseAssetAddress\\r\\n      ? trade.grossBaseQuantityInPips\\r\\n      : trade.grossQuoteQuantityInPips;\\r\\n    require(\\r\\n      getFeeBasisPoints(\\r\\n        trade.takerFeeQuantityInPips,\\r\\n        takerTotalQuantityInPips\\r\\n      ) <= _maxTradeFeeBasisPoints,\\r\\n      'Excessive taker fee'\\r\\n    );\\r\\n\\r\\n    require(\\r\\n      trade.netBaseQuantityInPips.add(\\r\\n        trade.makerFeeAssetAddress == trade.baseAssetAddress\\r\\n          ? trade.makerFeeQuantityInPips\\r\\n          : trade.takerFeeQuantityInPips\\r\\n      ) == trade.grossBaseQuantityInPips,\\r\\n      'Base plus fee is not equal to gross'\\r\\n    );\\r\\n    require(\\r\\n      trade.netQuoteQuantityInPips.add(\\r\\n        trade.makerFeeAssetAddress == trade.quoteAssetAddress\\r\\n          ? trade.makerFeeQuantityInPips\\r\\n          : trade.takerFeeQuantityInPips\\r\\n      ) == trade.grossQuoteQuantityInPips,\\r\\n      'Quote plus fee is not equal to gross'\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function validateOrderSignatures(\\r\\n    Structs.Order memory buy,\\r\\n    Structs.Order memory sell,\\r\\n    Structs.Trade memory trade\\r\\n  ) private pure returns (bytes32, bytes32) {\\r\\n    bytes32 buyOrderHash = validateOrderSignature(buy, trade);\\r\\n    bytes32 sellOrderHash = validateOrderSignature(sell, trade);\\r\\n\\r\\n    return (buyOrderHash, sellOrderHash);\\r\\n  }\\r\\n\\r\\n  function validateOrderSignature(\\r\\n    Structs.Order memory order,\\r\\n    Structs.Trade memory trade\\r\\n  ) private pure returns (bytes32) {\\r\\n    bytes32 orderHash = Signatures.getOrderWalletHash(\\r\\n      order,\\r\\n      trade.baseAssetSymbol,\\r\\n      trade.quoteAssetSymbol\\r\\n    );\\r\\n\\r\\n    require(\\r\\n      Signatures.isSignatureValid(\\r\\n        orderHash,\\r\\n        order.walletSignature,\\r\\n        order.walletAddress\\r\\n      ),\\r\\n      order.side == Enums.OrderSide.Buy\\r\\n        ? 'Invalid buy order signature'\\r\\n        : 'Invalid sell order signature'\\r\\n    );\\r\\n\\r\\n    return orderHash;\\r\\n  }\\r\\n\\r\\n  function validateOrderNonces(\\r\\n    Structs.Order memory buy,\\r\\n    Structs.Order memory sell\\r\\n  ) private view {\\r\\n    require(\\r\\n      UUID.getTimestampInMsFromUuidV1(buy.nonce) >\\r\\n        getLastInvalidatedTimestamp(buy.walletAddress),\\r\\n      'Buy order nonce too low'\\r\\n    );\\r\\n    require(\\r\\n      UUID.getTimestampInMsFromUuidV1(sell.nonce) >\\r\\n        getLastInvalidatedTimestamp(sell.walletAddress),\\r\\n      'Sell order nonce too low'\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function validateWithdrawalSignature(Structs.Withdrawal memory withdrawal)\\r\\n    private\\r\\n    pure\\r\\n    returns (bytes32)\\r\\n  {\\r\\n    bytes32 withdrawalHash = Signatures.getWithdrawalWalletHash(withdrawal);\\r\\n\\r\\n    require(\\r\\n      Signatures.isSignatureValid(\\r\\n        withdrawalHash,\\r\\n        withdrawal.walletSignature,\\r\\n        withdrawal.walletAddress\\r\\n      ),\\r\\n      'Invalid signature'\\r\\n    );\\r\\n\\r\\n    return withdrawalHash;\\r\\n  }\\r\\n\\r\\n  // Asset registry //\\r\\n\\r\\n  /**\\r\\n   * @notice Initiate registration process for a token asset. Only `IBEP20` compliant tokens can be\\r\\n   * added - BNB is hardcoded in the registry\\r\\n   *\\r\\n   * @param tokenAddress The address of the `IBEP20` compliant token contract to add\\r\\n   * @param symbol The symbol identifying the token asset\\r\\n   * @param decimals The decimal precision of the token\\r\\n   */\\r\\n  function registerToken(\\r\\n    IBEP20 tokenAddress,\\r\\n    string calldata symbol,\\r\\n    uint8 decimals\\r\\n  ) external onlyAdmin {\\r\\n    _assetRegistry.registerToken(tokenAddress, symbol, decimals);\\r\\n    emit TokenRegistered(tokenAddress, symbol, decimals);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Finalize registration process for a token asset. All parameters must exactly match a previous\\r\\n   * call to `registerToken`\\r\\n   *\\r\\n   * @param tokenAddress The address of the `IBEP20` compliant token contract to add\\r\\n   * @param symbol The symbol identifying the token asset\\r\\n   * @param decimals The decimal precision of the token\\r\\n   */\\r\\n  function confirmTokenRegistration(\\r\\n    IBEP20 tokenAddress,\\r\\n    string calldata symbol,\\r\\n    uint8 decimals\\r\\n  ) external onlyAdmin {\\r\\n    _assetRegistry.confirmTokenRegistration(tokenAddress, symbol, decimals);\\r\\n    emit TokenRegistrationConfirmed(tokenAddress, symbol, decimals);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Add a symbol to a token that has already been registered and confirmed\\r\\n   *\\r\\n   * @param tokenAddress The address of the `IBEP20` compliant token contract the symbol will identify\\r\\n   * @param symbol The symbol identifying the token asset\\r\\n   */\\r\\n  function addTokenSymbol(IBEP20 tokenAddress, string calldata symbol)\\r\\n    external\\r\\n    onlyAdmin\\r\\n  {\\r\\n    _assetRegistry.addTokenSymbol(tokenAddress, symbol);\\r\\n    emit TokenSymbolAdded(tokenAddress, symbol);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Loads an asset descriptor struct by its symbol and timestamp\\r\\n   *\\r\\n   * @dev Since multiple token addresses can potentially share the same symbol (in case of a token\\r\\n   * swap/contract upgrade) the provided `timestampInMs` is compared against each asset's\\r\\n   * `confirmedTimestampInMs` to uniquely determine the newest asset for the symbol at that point in time\\r\\n   *\\r\\n   * @param assetSymbol The asset's symbol\\r\\n   * @param timestampInMs Point in time used to disambiguate multiple tokens with same symbol\\r\\n   *\\r\\n   * @return A `Structs.Asset` record describing the asset\\r\\n   */\\r\\n  function loadAssetBySymbol(string calldata assetSymbol, uint64 timestampInMs)\\r\\n    external\\r\\n    view\\r\\n    returns (Structs.Asset memory)\\r\\n  {\\r\\n    return _assetRegistry.loadAssetBySymbol(assetSymbol, timestampInMs);\\r\\n  }\\r\\n\\r\\n  // Dispatcher whitelisting //\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the wallet whitelisted to dispatch transactions calling the `executeTrade` and `withdraw` functions\\r\\n   *\\r\\n   * @param newDispatcherWallet The new whitelisted dispatcher wallet. Must be different from the current one\\r\\n   */\\r\\n  function addDispatcher(address newDispatcherWallet) external onlyAdmin {\\r\\n    require(newDispatcherWallet != address(0x0), 'Invalid address');\\r\\n    require(\\r\\n      !_dispatcherWallet[newDispatcherWallet],\\r\\n      'Same address'\\r\\n    );\\r\\n    _dispatcherWallet[newDispatcherWallet] = true;\\r\\n\\r\\n    emit AddDispatcher(newDispatcherWallet);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Clears the currently set whitelisted dispatcher wallet, effectively disabling calling the\\r\\n   * `executeTrade` and `withdraw` functions until a new wallet is set with `setDispatcher`\\r\\n   */\\r\\n  function removeDispatcher(address account) external onlyAdmin {\\r\\n    emit RemoveDispatcher(account);\\r\\n    _dispatcherWallet[account] = false;\\r\\n  }\\r\\n\\r\\n  function isDispatcher(address account) external view  returns (bool) {\\r\\n    return _dispatcherWallet[account];\\r\\n  }\\r\\n\\r\\n  modifier onlyDispatcher() {\\r\\n    require(_dispatcherWallet[msg.sender], 'Must be dispatcher');\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  // Utils //\\r\\n\\r\\n  function isLimitOrderType(Enums.OrderType orderType)\\r\\n    private\\r\\n    pure\\r\\n    returns (bool)\\r\\n  {\\r\\n    return\\r\\n      orderType == Enums.OrderType.Limit ||\\r\\n      orderType == Enums.OrderType.LimitMaker ||\\r\\n      orderType == Enums.OrderType.StopLossLimit ||\\r\\n      orderType == Enums.OrderType.TakeProfitLimit;\\r\\n  }\\r\\n\\r\\n  function isMarketOrderType(Enums.OrderType orderType)\\r\\n    private\\r\\n    pure\\r\\n    returns (bool)\\r\\n  {\\r\\n    return\\r\\n      orderType == Enums.OrderType.Market ||\\r\\n      orderType == Enums.OrderType.StopLoss ||\\r\\n      orderType == Enums.OrderType.TakeProfit;\\r\\n  }\\r\\n\\r\\n  function getCurrentTimestampInMs() private view returns (uint64) {\\r\\n    uint64 msInOneSecond = 1000;\\r\\n\\r\\n    return uint64(block.timestamp) * msInOneSecond;\\r\\n  }\\r\\n\\r\\n  function getFeeBasisPoints(uint64 fee, uint64 total)\\r\\n    private\\r\\n    pure\\r\\n    returns (uint64)\\r\\n  {\\r\\n    uint64 basisPointsInTotal = 100 * 100; // 100 basis points/percent * 100 percent/total\\r\\n    return fee.mul(basisPointsInTotal).div(total);\\r\\n  }\\r\\n\\r\\n  function getImpliedQuoteQuantityInPips(\\r\\n    uint64 baseQuantityInPips,\\r\\n    uint64 limitPriceInPips\\r\\n  ) private pure returns (uint64) {\\r\\n    // To convert a fractional price to integer pips, shift right by the pip precision of 8 decimals\\r\\n    uint256 pipsMultiplier = 10**8;\\r\\n\\r\\n    uint256 impliedQuoteQuantityInPips = uint256(baseQuantityInPips)\\r\\n      .mul(uint256(limitPriceInPips))\\r\\n      .div(pipsMultiplier);\\r\\n    require(\\r\\n      impliedQuoteQuantityInPips < 2**64,\\r\\n      'Implied quantity overflows'\\r\\n    );\\r\\n\\r\\n    return uint64(impliedQuoteQuantityInPips);\\r\\n  }\\r\\n\\r\\n  function getLastInvalidatedTimestamp(address walletAddress)\\r\\n    private\\r\\n    view\\r\\n    returns (uint64)\\r\\n  {\\r\\n    if (\\r\\n      _nonceInvalidations[walletAddress].exists &&\\r\\n      _nonceInvalidations[walletAddress].effectiveBlockNumber <= block.number\\r\\n    ) {\\r\\n      return _nonceInvalidations[walletAddress].timestampInMs;\\r\\n    }\\r\\n\\r\\n    return 0;\\r\\n  }\\r\\n\\r\\n  function getOneDayFromNowInMs() private view returns (uint64) {\\r\\n    uint64 secondsInOneDay = 24 * 60 * 60; // 24 hours/day * 60 min/hour * 60 seconds/min\\r\\n    uint64 msInOneSecond = 1000;\\r\\n\\r\\n    return (uint64(block.timestamp) + secondsInOneDay) * msInOneSecond;\\r\\n  }\\r\\n\\r\\n  function _executeTrade(\\r\\n    Structs.Order memory buy,\\r\\n    Structs.Order memory sell,\\r\\n    Structs.Trade memory trade\\r\\n  ) private {\\r\\n    require(\\r\\n      !isWalletExitFinalized(buy.walletAddress),\\r\\n      'Buy wallet finalized'\\r\\n    );\\r\\n    require(\\r\\n      !isWalletExitFinalized(sell.walletAddress),\\r\\n      'Sell wallet finalized'\\r\\n    );\\r\\n    require(\\r\\n      buy.walletAddress != sell.walletAddress,\\r\\n      'Self-trading not allowed'\\r\\n    );\\r\\n\\r\\n    validateAssetPair(buy, sell, trade);\\r\\n    validateLimitPrices(buy, sell, trade);\\r\\n    validateOrderNonces(buy, sell);\\r\\n    (bytes32 buyHash, bytes32 sellHash) = validateOrderSignatures(\\r\\n      buy,\\r\\n      sell,\\r\\n      trade\\r\\n    );\\r\\n    validateTradeFees(trade);\\r\\n\\r\\n    updateOrderFilledQuantities(buy, buyHash, sell, sellHash, trade);\\r\\n    updateBalancesForTrade(buy, sell, trade);\\r\\n\\r\\n    emit TradeExecuted(\\r\\n      buy.walletAddress,\\r\\n      sell.walletAddress,\\r\\n      trade.baseAssetSymbol,\\r\\n      trade.quoteAssetSymbol,\\r\\n      trade.baseAssetSymbol,\\r\\n      trade.quoteAssetSymbol,\\r\\n      trade.grossBaseQuantityInPips,\\r\\n      trade.grossQuoteQuantityInPips,\\r\\n      trade.priceInPips,\\r\\n      buyHash,\\r\\n      sellHash\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/libraries/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// CAUTION\\r\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\r\\n// because it relies on the compiler's built in overflow checks.\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations.\\r\\n *\\r\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\r\\n * now has built in overflow checking.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/libraries/AssetRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { Address } from './Address.sol';\\r\\n\\r\\nimport { IBEP20, Structs } from './Interfaces.sol';\\r\\n\\r\\n\\r\\n/**\\r\\n * @notice Library helper functions for managing a registry of asset descriptors indexed by address and symbol\\r\\n */\\r\\nlibrary AssetRegistry {\\r\\n  struct Storage {\\r\\n    mapping(address => Structs.Asset) assetsByAddress;\\r\\n    // Mapping value is array since the same symbol can be re-used for a different address\\r\\n    // (usually as a result of a token swap or upgrade)\\r\\n    mapping(string => Structs.Asset[]) assetsBySymbol;\\r\\n  }\\r\\n\\r\\n  function registerToken(\\r\\n    Storage storage self,\\r\\n    IBEP20 tokenAddress,\\r\\n    string memory symbol,\\r\\n    uint8 decimals\\r\\n  ) external {\\r\\n    require(decimals <= 32, 'More than 32 decimals');\\r\\n    require(\\r\\n      tokenAddress != IBEP20(address(0x0)) && Address.isContract(address(tokenAddress)),\\r\\n      'Invalid address'\\r\\n    );\\r\\n    // The string type does not have a length property so cast to bytes to check for empty string\\r\\n    require(bytes(symbol).length > 0, 'Invalid symbol');\\r\\n    require(\\r\\n      !self.assetsByAddress[address(tokenAddress)].isConfirmed,\\r\\n      'Aready finalized'\\r\\n    );\\r\\n\\r\\n    self.assetsByAddress[address(tokenAddress)] = Structs.Asset({\\r\\n      exists: true,\\r\\n      assetAddress: address(tokenAddress),\\r\\n      symbol: symbol,\\r\\n      decimals: decimals,\\r\\n      isConfirmed: false,\\r\\n      confirmedTimestampInMs: 0\\r\\n    });\\r\\n  }\\r\\n\\r\\n  function confirmTokenRegistration(\\r\\n    Storage storage self,\\r\\n    IBEP20 tokenAddress,\\r\\n    string memory symbol,\\r\\n    uint8 decimals\\r\\n  ) external {\\r\\n    Structs.Asset memory asset = self.assetsByAddress[address(tokenAddress)];\\r\\n    require(asset.exists, 'Unknown token');\\r\\n    require(!asset.isConfirmed, 'Already finalized');\\r\\n    require(isStringEqual(asset.symbol, symbol), 'Symbols do not match');\\r\\n    require(asset.decimals == decimals, 'Decimals do not match');\\r\\n\\r\\n    asset.isConfirmed = true;\\r\\n    asset.confirmedTimestampInMs = uint64(block.timestamp * 1000); // Block timestamp is in seconds, store ms\\r\\n    self.assetsByAddress[address(tokenAddress)] = asset;\\r\\n    self.assetsBySymbol[symbol].push(asset);\\r\\n  }\\r\\n\\r\\n  function addTokenSymbol(\\r\\n    Storage storage self,\\r\\n    IBEP20 tokenAddress,\\r\\n    string memory symbol\\r\\n  ) external {\\r\\n    Structs.Asset memory asset = self.assetsByAddress[address(tokenAddress)];\\r\\n    require(\\r\\n      asset.exists && asset.isConfirmed,\\r\\n      'Registration not finalized'\\r\\n    );\\r\\n    require(!isStringEqual(symbol, 'BNB'), 'Reserved symbol');\\r\\n\\r\\n    // This will prevent swapping assets for previously existing orders\\r\\n    uint64 msInOneSecond = 1000;\\r\\n    asset.confirmedTimestampInMs = uint64(block.timestamp * msInOneSecond);\\r\\n\\r\\n    self.assetsBySymbol[symbol].push(asset);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Resolves an asset address into corresponding Asset struct\\r\\n   *\\r\\n   * @param assetAddress BNB address of asset\\r\\n   */\\r\\n  function loadAssetByAddress(Storage storage self, address assetAddress)\\r\\n    external\\r\\n    view\\r\\n    returns (Structs.Asset memory)\\r\\n  {\\r\\n    if (assetAddress == address(0x0)) {\\r\\n      return getBnbAsset();\\r\\n    }\\r\\n\\r\\n    Structs.Asset memory asset = self.assetsByAddress[assetAddress];\\r\\n    require(\\r\\n      asset.exists && asset.isConfirmed,\\r\\n      'No confirmed asset found'\\r\\n    );\\r\\n\\r\\n    return asset;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Resolves a asset symbol into corresponding Asset struct\\r\\n   *\\r\\n   * @param symbol Asset symbol, e.g. 'IDEX'\\r\\n   * @param timestampInMs Milliseconds since Unix epoch, usually parsed from a UUID v1 order nonce.\\r\\n   * Constrains symbol resolution to the asset most recently confirmed prior to timestampInMs. Reverts\\r\\n   * if no such asset exists\\r\\n   */\\r\\n  function loadAssetBySymbol(\\r\\n    Storage storage self,\\r\\n    string memory symbol,\\r\\n    uint64 timestampInMs\\r\\n  ) external view returns (Structs.Asset memory) {\\r\\n    if (isStringEqual('BNB', symbol)) {\\r\\n      return getBnbAsset();\\r\\n    }\\r\\n\\r\\n    Structs.Asset memory asset;\\r\\n    if (self.assetsBySymbol[symbol].length > 0) {\\r\\n      for (uint8 i = 0; i < self.assetsBySymbol[symbol].length; i++) {\\r\\n        if (\\r\\n          self.assetsBySymbol[symbol][i].confirmedTimestampInMs <= timestampInMs\\r\\n        ) {\\r\\n          asset = self.assetsBySymbol[symbol][i];\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    require(\\r\\n      asset.exists && asset.isConfirmed,\\r\\n      'No confirmed asset found'\\r\\n    );\\r\\n\\r\\n    return asset;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev BNB is modeled as an always-confirmed Asset struct for programmatic consistency\\r\\n   */\\r\\n  function getBnbAsset() private pure returns (Structs.Asset memory) {\\r\\n    return Structs.Asset(true, address(0x0), 'BNB', 18, true, 0);\\r\\n  }\\r\\n\\r\\n  // See https://solidity.readthedocs.io/en/latest/types.html#bytes-and-strings-as-arrays\\r\\n  function isStringEqual(string memory a, string memory b)\\r\\n    private\\r\\n    pure\\r\\n    returns (bool)\\r\\n  {\\r\\n    return keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b));\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/AssetTransfers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {\\r\\n  SafeMath as SafeMath256\\r\\n} from './SafeMath.sol';\\r\\n\\r\\nimport { IBEP20 } from './Interfaces.sol';\\r\\n\\r\\n\\r\\n/**\\r\\n * @notice This library provides helper utilities for transfering assets in and out of contracts.\\r\\n * It further validates ERC-20 compliant balance updates in the case of token assets\\r\\n */\\r\\nlibrary AssetTransfers {\\r\\n  using SafeMath256 for uint256;\\r\\n\\r\\n  /**\\r\\n   * @dev Transfers tokens from a wallet into a contract during deposits. `wallet` must already\\r\\n   * have called `approve` on the token contract for at least `tokenQuantity`. Note this only\\r\\n   * applies to tokens since BNB is sent in the deposit transaction via `msg.value`\\r\\n   */\\r\\n  function transferFrom(\\r\\n    address wallet,\\r\\n    IBEP20 tokenAddress,\\r\\n    uint256 quantityInAssetUnits\\r\\n  ) external {\\r\\n    uint256 balanceBefore = tokenAddress.balanceOf(address(this));\\r\\n\\r\\n    // Because we check for the expected balance change we can safely ignore the return value of transferFrom\\r\\n    tokenAddress.transferFrom(wallet, address(this), quantityInAssetUnits);\\r\\n\\r\\n    uint256 balanceAfter = tokenAddress.balanceOf(address(this));\\r\\n    require(\\r\\n      balanceAfter.sub(balanceBefore) == quantityInAssetUnits,\\r\\n      'balance do not match'\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Transfers BNB or token assets from a contract to 1) another contract, when `Exchange`\\r\\n   * forwards funds to `Custodian` during deposit or 2) a wallet, when withdrawing\\r\\n   */\\r\\n  function transferTo(\\r\\n    address payable walletOrContract,\\r\\n    address asset,\\r\\n    uint256 quantityInAssetUnits\\r\\n  ) external {\\r\\n    if (asset == address(0x0)) {\\r\\n      require(\\r\\n        walletOrContract.send(quantityInAssetUnits),\\r\\n        'BNB transfer failed'\\r\\n      );\\r\\n    } else {\\r\\n      uint256 balanceBefore = IBEP20(asset).balanceOf(walletOrContract);\\r\\n\\r\\n      // Because we check for the expected balance change we can safely ignore the return value of transfer\\r\\n      IBEP20(asset).transfer(walletOrContract, quantityInAssetUnits);\\r\\n\\r\\n      uint256 balanceAfter = IBEP20(asset).balanceOf(walletOrContract);\\r\\n      require(\\r\\n        balanceAfter.sub(balanceBefore) == quantityInAssetUnits,\\r\\n        'balance do not match'\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/AssetUnitConversions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {\\r\\n  SafeMath as SafeMath256\\r\\n} from './SafeMath.sol';\\r\\n\\r\\n\\r\\n/**\\r\\n * @notice Library helpers for converting asset quantities between asset units and pips\\r\\n */\\r\\nlibrary AssetUnitConversions {\\r\\n  using SafeMath256 for uint256;\\r\\n\\r\\n  function pipsToAssetUnits(uint64 quantityInPips, uint8 assetDecimals)\\r\\n    internal\\r\\n    pure\\r\\n    returns (uint256)\\r\\n  {\\r\\n    require(assetDecimals <= 32, 'More than 32 decimals');\\r\\n\\r\\n    // Exponents cannot be negative, so divide or multiply based on exponent signedness\\r\\n    if (assetDecimals > 8) {\\r\\n      return uint256(quantityInPips).mul(uint256(10)**(assetDecimals - 8));\\r\\n    }\\r\\n    return uint256(quantityInPips).div(uint256(10)**(8 - assetDecimals));\\r\\n  }\\r\\n\\r\\n  function assetUnitsToPips(uint256 quantityInAssetUnits, uint8 assetDecimals)\\r\\n    internal\\r\\n    pure\\r\\n    returns (uint64)\\r\\n  {\\r\\n    require(assetDecimals <= 32, 'More than 32 decimals');\\r\\n\\r\\n    uint256 quantityInPips;\\r\\n    // Exponents cannot be negative, so divide or multiply based on exponent signedness\\r\\n    if (assetDecimals > 8) {\\r\\n      quantityInPips = quantityInAssetUnits.div(\\r\\n        uint256(10)**(assetDecimals - 8)\\r\\n      );\\r\\n    } else {\\r\\n      quantityInPips = quantityInAssetUnits.mul(\\r\\n        uint256(10)**(8 - assetDecimals)\\r\\n      );\\r\\n    }\\r\\n    require(quantityInPips < 2**64, 'Pip quantity overflows');\\r\\n\\r\\n    return uint64(quantityInPips);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Owned.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\n/**\\r\\n * @notice Mixin that provide separate owner and admin roles for RBAC\\r\\n */\\r\\nabstract contract Owned {\\r\\n  address immutable _owner;\\r\\n  address _admin;\\r\\n\\r\\n  modifier onlyOwner {\\r\\n    require(msg.sender == _owner, 'Caller must be owner');\\r\\n    _;\\r\\n  }\\r\\n  modifier onlyAdmin {\\r\\n    require(msg.sender == _admin, 'Caller must be admin');\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Sets both the owner and admin roles to the contract creator\\r\\n   */\\r\\n  constructor() {\\r\\n    _owner = msg.sender;\\r\\n    _admin = msg.sender;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Sets a new whitelisted admin wallet\\r\\n   *\\r\\n   * @param newAdmin The new whitelisted admin wallet. Must be different from the current one\\r\\n   */\\r\\n  function setAdmin(address newAdmin) external onlyOwner {\\r\\n    require(newAdmin != address(0x0), 'Invalid wallet address');\\r\\n    require(newAdmin != _admin, 'Must be different from current admin');\\r\\n\\r\\n    _admin = newAdmin;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Clears the currently whitelisted admin wallet, effectively disabling any functions requiring\\r\\n   * the admin role\\r\\n   */\\r\\n  function removeAdmin() external onlyOwner {\\r\\n    _admin = address(0x0);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/SafeMath64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath64 {\\r\\n  /**\\r\\n   * @dev Returns the addition of two unsigned integers, reverting on\\r\\n   * overflow.\\r\\n   *\\r\\n   * Counterpart to Solidity's `+` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   * - Addition cannot overflow.\\r\\n   */\\r\\n  function add(uint64 a, uint64 b) internal pure returns (uint64) {\\r\\n    uint64 c = a + b;\\r\\n    require(c >= a, 'SafeMath: addition overflow');\\r\\n\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n   * overflow (when the result is negative).\\r\\n   *\\r\\n   * Counterpart to Solidity's `-` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   * - Subtraction cannot overflow.\\r\\n   */\\r\\n  function sub(uint64 a, uint64 b) internal pure returns (uint64) {\\r\\n    return sub(a, b, 'SafeMath: subtraction overflow');\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n   * overflow (when the result is negative).\\r\\n   *\\r\\n   * Counterpart to Solidity's `-` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   * - Subtraction cannot overflow.\\r\\n   *\\r\\n   * _Available since v2.4.0._\\r\\n   */\\r\\n  function sub(\\r\\n    uint64 a,\\r\\n    uint64 b,\\r\\n    string memory errorMessage\\r\\n  ) internal pure returns (uint64) {\\r\\n    require(b <= a, errorMessage);\\r\\n    uint64 c = a - b;\\r\\n\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n   * overflow.\\r\\n   *\\r\\n   * Counterpart to Solidity's `*` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   * - Multiplication cannot overflow.\\r\\n   */\\r\\n  function mul(uint64 a, uint64 b) internal pure returns (uint64) {\\r\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n    // benefit is lost if 'b' is also tested.\\r\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n    if (a == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n\\r\\n    uint64 c = a * b;\\r\\n    require(c / a == b, 'SafeMath: multiplication overflow');\\r\\n\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n   * division by zero. The result is rounded towards zero.\\r\\n   *\\r\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n   *\\r\\n   * Requirements:\\r\\n   * - The divisor cannot be zero.\\r\\n   */\\r\\n  function div(uint64 a, uint64 b) internal pure returns (uint64) {\\r\\n    return div(a, b, 'SafeMath: division by zero');\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n   * division by zero. The result is rounded towards zero.\\r\\n   *\\r\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n   *\\r\\n   * Requirements:\\r\\n   * - The divisor cannot be zero.\\r\\n   *\\r\\n   * _Available since v2.4.0._\\r\\n   */\\r\\n  function div(\\r\\n    uint64 a,\\r\\n    uint64 b,\\r\\n    string memory errorMessage\\r\\n  ) internal pure returns (uint64) {\\r\\n    // Solidity only automatically asserts when dividing by 0\\r\\n    require(b > 0, errorMessage);\\r\\n    uint64 c = a / b;\\r\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n    return c;\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/Signatures.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { ECDSA } from './ECDSA.sol';\\r\\n\\r\\nimport { Enums, Structs } from './Interfaces.sol';\\r\\n\\r\\n\\r\\n/**\\r\\n * Library helpers for building hashes and verifying wallet signatures on `Order` and `Withdrawal` structs\\r\\n */\\r\\nlibrary Signatures {\\r\\n  function isSignatureValid(\\r\\n    bytes32 hash,\\r\\n    bytes memory signature,\\r\\n    address signer\\r\\n  ) external pure returns (bool) {\\r\\n    return\\r\\n      ECDSA.recover(ECDSA.toEthSignedMessageHash(hash), signature) == signer;\\r\\n  }\\r\\n\\r\\n  function getOrderWalletHash(\\r\\n    Structs.Order memory order,\\r\\n    string memory baseSymbol,\\r\\n    string memory quoteSymbol\\r\\n  ) external pure returns (bytes32) {\\r\\n    require(\\r\\n      order.signatureHashVersion == 1,\\r\\n      'Version must be 1'\\r\\n    );\\r\\n    return\\r\\n      keccak256(\\r\\n        // Placing all the fields in a single `abi.encodePacked` call causes a `stack too deep` error\\r\\n        abi.encodePacked(\\r\\n          abi.encodePacked(\\r\\n            order.signatureHashVersion,\\r\\n            order.nonce,\\r\\n            order.walletAddress,\\r\\n            getMarketSymbol(baseSymbol, quoteSymbol),\\r\\n            uint8(order.orderType),\\r\\n            uint8(order.side),\\r\\n            // Ledger qtys and prices are in pip, but order was signed by wallet owner with decimal values\\r\\n            pipToDecimal(order.quantityInPips)\\r\\n          ),\\r\\n          abi.encodePacked(\\r\\n            order.isQuantityInQuote,\\r\\n            order.limitPriceInPips > 0\\r\\n              ? pipToDecimal(order.limitPriceInPips)\\r\\n              : '',\\r\\n            order.stopPriceInPips > 0\\r\\n              ? pipToDecimal(order.stopPriceInPips)\\r\\n              : '',\\r\\n            order.clientOrderId,\\r\\n            uint8(order.timeInForce),\\r\\n            uint8(order.selfTradePrevention),\\r\\n            order.cancelAfter\\r\\n          )\\r\\n        )\\r\\n      );\\r\\n  }\\r\\n\\r\\n  function getWithdrawalWalletHash(Structs.Withdrawal memory withdrawal)\\r\\n    external\\r\\n    pure\\r\\n    returns (bytes32)\\r\\n  {\\r\\n    return\\r\\n      keccak256(\\r\\n        abi.encodePacked(\\r\\n          withdrawal.nonce,\\r\\n          withdrawal.walletAddress,\\r\\n          // Ternary branches must resolve to the same type, so wrap in idempotent encodePacked\\r\\n          withdrawal.withdrawalType == Enums.WithdrawalType.BySymbol\\r\\n            ? abi.encodePacked(withdrawal.assetSymbol)\\r\\n            : abi.encodePacked(withdrawal.assetAddress),\\r\\n          pipToDecimal(withdrawal.quantityInPips),\\r\\n          withdrawal.autoDispatchEnabled\\r\\n        )\\r\\n      );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Combines base and quote asset symbols into the market symbol originally signed by the\\r\\n   * wallet. For example if base is 'IDEX' and quote is 'ETH', the resulting market symbol is\\r\\n   * 'IDEX-ETH'. This approach is used rather than passing in the market symbol and splitting it\\r\\n   * since the latter incurs a higher gas cost\\r\\n   */\\r\\n  function getMarketSymbol(string memory baseSymbol, string memory quoteSymbol)\\r\\n    private\\r\\n    pure\\r\\n    returns (string memory)\\r\\n  {\\r\\n    bytes memory baseSymbolBytes = bytes(baseSymbol);\\r\\n    bytes memory hyphenBytes = bytes('-');\\r\\n    bytes memory quoteSymbolBytes = bytes(quoteSymbol);\\r\\n\\r\\n    bytes memory marketSymbolBytes = bytes(\\r\\n      new string(\\r\\n        baseSymbolBytes.length + quoteSymbolBytes.length + hyphenBytes.length\\r\\n      )\\r\\n    );\\r\\n\\r\\n    uint256 i;\\r\\n    uint256 j;\\r\\n\\r\\n    for (i = 0; i < baseSymbolBytes.length; i++) {\\r\\n      marketSymbolBytes[j++] = baseSymbolBytes[i];\\r\\n    }\\r\\n\\r\\n    // Hyphen is one byte\\r\\n    marketSymbolBytes[j++] = hyphenBytes[0];\\r\\n\\r\\n    for (i = 0; i < quoteSymbolBytes.length; i++) {\\r\\n      marketSymbolBytes[j++] = quoteSymbolBytes[i];\\r\\n    }\\r\\n\\r\\n    return string(marketSymbolBytes);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Converts an integer pip quantity back into the fixed-precision decimal pip string\\r\\n   * originally signed by the wallet. For example, 1234567890 becomes '12.34567890'\\r\\n   */\\r\\n  function pipToDecimal(uint256 pips) private pure returns (string memory) {\\r\\n    // Inspired by https://github.com/provable-things/ethereum-api/blob/831f4123816f7a3e57ebea171a3cdcf3b528e475/oraclizeAPI_0.5.sol#L1045-L1062\\r\\n    uint256 copy = pips;\\r\\n    uint256 length;\\r\\n    while (copy != 0) {\\r\\n      length++;\\r\\n      copy /= 10;\\r\\n    }\\r\\n    if (length < 9) {\\r\\n      length = 9; // a zero before the decimal point plus 8 decimals\\r\\n    }\\r\\n    length++; // for the decimal point\\r\\n\\r\\n    bytes memory decimal = new bytes(length);\\r\\n    for (uint256 i = length; i > 0; i--) {\\r\\n      if (length - i == 8) {\\r\\n        decimal[i - 1] = bytes1(uint8(46)); // period\\r\\n      } else {\\r\\n        decimal[i - 1] = bytes1(uint8(48 + (pips % 10)));\\r\\n        pips /= 10;\\r\\n      }\\r\\n    }\\r\\n    return string(decimal);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/Interfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\n/**\\r\\n * @notice Enums used in `Order` and `Withdrawal` structs\\r\\n */\\r\\ncontract Enums {\\r\\n  enum OrderSelfTradePrevention {\\r\\n    // Decrement and cancel\\r\\n    dc,\\r\\n    // Cancel oldest\\r\\n    co,\\r\\n    // Cancel newest\\r\\n    cn,\\r\\n    // Cancel both\\r\\n    cb\\r\\n  }\\r\\n  enum OrderSide { Buy, Sell }\\r\\n  enum OrderTimeInForce {\\r\\n    // Good until cancelled\\r\\n    gtc,\\r\\n    // Good until time\\r\\n    gtt,\\r\\n    // Immediate or cancel\\r\\n    ioc,\\r\\n    // Fill or kill\\r\\n    fok\\r\\n  }\\r\\n  enum OrderType {\\r\\n    Market,\\r\\n    Limit,\\r\\n    LimitMaker,\\r\\n    StopLoss,\\r\\n    StopLossLimit,\\r\\n    TakeProfit,\\r\\n    TakeProfitLimit\\r\\n  }\\r\\n  enum WithdrawalType { BySymbol, ByAddress }\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * @notice Struct definitions\\r\\n */\\r\\ncontract Structs {\\r\\n  /**\\r\\n   * @notice Argument type for `Exchange.executeTrade` and `Signatures.getOrderWalletHash`\\r\\n   */\\r\\n  struct Order {\\r\\n    // Not currently used but reserved for future use. Must be 1\\r\\n    uint8 signatureHashVersion;\\r\\n    // UUIDv1 unique to wallet\\r\\n    uint128 nonce;\\r\\n    // Wallet address that placed order and signed hash\\r\\n    address walletAddress;\\r\\n    // Type of order\\r\\n    Enums.OrderType orderType;\\r\\n    // Order side wallet is on\\r\\n    Enums.OrderSide side;\\r\\n    // Order quantity in base or quote asset terms depending on isQuantityInQuote flag\\r\\n    uint64 quantityInPips;\\r\\n    // Is quantityInPips in quote terms\\r\\n    bool isQuantityInQuote;\\r\\n    // For limit orders, price in decimal pips * 10^8 in quote terms\\r\\n    uint64 limitPriceInPips;\\r\\n    // For stop orders, stop loss or take profit price in decimal pips * 10^8 in quote terms\\r\\n    uint64 stopPriceInPips;\\r\\n    // Optional custom client order ID\\r\\n    string clientOrderId;\\r\\n    // TIF option specified by wallet for order\\r\\n    Enums.OrderTimeInForce timeInForce;\\r\\n    // STP behavior specified by wallet for order\\r\\n    Enums.OrderSelfTradePrevention selfTradePrevention;\\r\\n    // Cancellation time specified by wallet for GTT TIF order\\r\\n    uint64 cancelAfter;\\r\\n    // The ECDSA signature of the order hash as produced by Signatures.getOrderWalletHash\\r\\n    bytes walletSignature;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Return type for `Exchange.loadAssetBySymbol`, and `Exchange.loadAssetByAddress`; also\\r\\n   * used internally by `AssetRegistry`\\r\\n   */\\r\\n  struct Asset {\\r\\n    // Flag to distinguish from empty struct\\r\\n    bool exists;\\r\\n    // The asset's address\\r\\n    address assetAddress;\\r\\n    // The asset's symbol\\r\\n    string symbol;\\r\\n    // The asset's decimal precision\\r\\n    uint8 decimals;\\r\\n    // Flag set when asset registration confirmed. Asset deposits, trades, or withdrawals only allowed if true\\r\\n    bool isConfirmed;\\r\\n    // Timestamp as ms since Unix epoch when isConfirmed was asserted\\r\\n    uint64 confirmedTimestampInMs;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Argument type for `Exchange.executeTrade` specifying execution parameters for matching orders\\r\\n   */\\r\\n  struct Trade {\\r\\n    // Base asset symbol\\r\\n    string baseAssetSymbol;\\r\\n    // Quote asset symbol\\r\\n    string quoteAssetSymbol;\\r\\n    // Base asset address\\r\\n    address baseAssetAddress;\\r\\n    // Quote asset address\\r\\n    address quoteAssetAddress;\\r\\n    // Gross amount including fees of base asset executed\\r\\n    uint64 grossBaseQuantityInPips;\\r\\n    // Gross amount including fees of quote asset executed\\r\\n    uint64 grossQuoteQuantityInPips;\\r\\n    // Net amount of base asset received by buy side wallet after fees\\r\\n    uint64 netBaseQuantityInPips;\\r\\n    // Net amount of quote asset received by sell side wallet after fees\\r\\n    uint64 netQuoteQuantityInPips;\\r\\n    // Asset address for liquidity maker's fee\\r\\n    address makerFeeAssetAddress;\\r\\n    // Asset address for liquidity taker's fee\\r\\n    address takerFeeAssetAddress;\\r\\n    // Fee paid by liquidity maker\\r\\n    uint64 makerFeeQuantityInPips;\\r\\n    // Fee paid by liquidity taker\\r\\n    uint64 takerFeeQuantityInPips;\\r\\n    // Execution price of trade in decimal pips * 10^8 in quote terms\\r\\n    uint64 priceInPips;\\r\\n    // Which side of the order (buy or sell) the liquidity maker was on\\r\\n    Enums.OrderSide makerSide;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Argument type for `Exchange.withdraw` and `Signatures.getWithdrawalWalletHash`\\r\\n   */\\r\\n  struct Withdrawal {\\r\\n    // Distinguishes between withdrawals by asset symbol or address\\r\\n    Enums.WithdrawalType withdrawalType;\\r\\n    // UUIDv1 unique to wallet\\r\\n    uint128 nonce;\\r\\n    // Address of wallet to which funds will be returned\\r\\n    address payable walletAddress;\\r\\n    // Asset symbol\\r\\n    string assetSymbol;\\r\\n    // Asset address\\r\\n    address assetAddress; // Used when assetSymbol not specified\\r\\n    // Withdrawal quantity\\r\\n    uint64 quantityInPips;\\r\\n    // Gas fee deducted from withdrawn quantity to cover dispatcher tx costs\\r\\n    uint64 gasFeeInPips;\\r\\n    // Not currently used but reserved for future use. Must be true\\r\\n    bool autoDispatchEnabled;\\r\\n    // The ECDSA signature of the withdrawal hash as produced by Signatures.getWithdrawalWalletHash\\r\\n    bytes walletSignature;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice return type for `Exchange.executeTrades`\\r\\n   */\\r\\n  struct ExecRet {\\r\\n    bool success;\\r\\n    string err;\\r\\n  }\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * @notice Interface of the BEP-20, but with no return values for transfer and transferFrom.\\r\\n * By asserting expected balance changes when calling these two methods we can safely ignore \\r\\n * their return values. This allows support of non-compliant tokens that do not return a boolean. \\r\\n * See https://github.com/ethereum/solidity/issues/4116\\r\\n */\\r\\ninterface IBEP20 {\\r\\n  /**\\r\\n   * @notice Returns the amount of tokens in existence.\\r\\n   */\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the amount of tokens owned by `account`.\\r\\n   */\\r\\n  function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Moves `amount` tokens from the caller's account to `recipient`.\\r\\n   *\\r\\n   * Most implementing contracts return a boolean value indicating whether the operation succeeded, but\\r\\n   * we ignore this and rely on asserting balance changes instead\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transfer(address recipient, uint256 amount) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the remaining number of tokens that `spender` will be\\r\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n   * zero by default.\\r\\n   *\\r\\n   * This value changes when {approve} or {transferFrom} are called.\\r\\n   */\\r\\n  function allowance(address owner, address spender)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n   * that someone may use both the old and the new allowance by unfortunate\\r\\n   * transaction ordering. One possible solution to mitigate this race\\r\\n   * condition is to first reduce the spender's allowance to 0 and set the\\r\\n   * desired value afterwards:\\r\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n   *\\r\\n   * Emits an {Approval} event.\\r\\n   */\\r\\n  function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @notice Moves `amount` tokens from `sender` to `recipient` using the\\r\\n   * allowance mechanism. `amount` is then deducted from the caller's\\r\\n   * allowance.\\r\\n   *\\r\\n   * Most implementing contracts return a boolean value indicating whether the operation succeeded, but\\r\\n   * we ignore this and rely on asserting balance changes instead\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transferFrom(\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    uint256 amount\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when `value` tokens are moved from one account (`from`) to\\r\\n   * another (`to`).\\r\\n   *\\r\\n   * Note that `value` may be zero.\\r\\n   */\\r\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n   * a call to {approve}. `value` is the new allowance.\\r\\n   */\\r\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * @notice Interface to Custodian contract. Used by Exchange and Governance contracts for internal\\r\\n * delegate calls\\r\\n */\\r\\ninterface ICustodian {\\r\\n  /**\\r\\n   * @notice BNB can only be sent by the Exchange\\r\\n   */\\r\\n  receive() external payable;\\r\\n\\r\\n  /**\\r\\n   * @notice Withdraw any asset and amount to a target wallet\\r\\n   *\\r\\n   * @dev No balance checking performed\\r\\n   *\\r\\n   * @param wallet The wallet to which assets will be returned\\r\\n   * @param asset The address of the asset to withdraw (BNB or BEP20 contract)\\r\\n   * @param quantityInAssetUnits The quantity in asset units to withdraw\\r\\n   */\\r\\n  function withdraw(\\r\\n    address payable wallet,\\r\\n    address asset,\\r\\n    uint256 quantityInAssetUnits\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Load address of the currently whitelisted Exchange contract\\r\\n   *\\r\\n   * @return The address of the currently whitelisted Exchange contract\\r\\n   */\\r\\n  function loadExchange() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Sets a new Exchange contract address\\r\\n   *\\r\\n   * @param newExchange The address of the new whitelisted Exchange contract\\r\\n   */\\r\\n  function setExchange(address newExchange) external;\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * @notice Interface to Exchange contract. Provided only to document struct usage\\r\\n */\\r\\ninterface IExchange {\\r\\n  /**\\r\\n   * @notice Settles a trade between two orders submitted and matched off-chain\\r\\n   *\\r\\n   * @param buy A `Structs.Order` struct encoding the parameters of the buy-side order (receiving base, giving quote)\\r\\n   * @param sell A `Structs.Order` struct encoding the parameters of the sell-side order (giving base, receiving quote)\\r\\n   * @param trade A `Structs.Trade` struct encoding the parameters of this trade execution of the counterparty orders\\r\\n   */\\r\\n  function executeTrade(\\r\\n    Structs.Order calldata buy,\\r\\n    Structs.Order calldata sell,\\r\\n    Structs.Trade calldata trade\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Execute multiple trades\\r\\n   *\\r\\n   * @param buy A `Structs.Order` struct array encoding the parameters of the buy-side orders (receiving base, giving quote)\\r\\n   * @param sell A `Structs.Order` struct array encoding the parameters of the sell-side order (giving base, receiving quote)\\r\\n   * @param trade A `Structs.Trade` struct array encoding the parameters of this trade execution of the counterparty orders\\r\\n   */\\r\\n  function executeTrades(\\r\\n    Structs.Order[] memory buy,\\r\\n    Structs.Order[] memory sell,\\r\\n    Structs.Trade[] memory trade\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Settles a user withdrawal submitted off-chain. Calls restricted to currently whitelisted Dispatcher wallet\\r\\n   *\\r\\n   * @param withdrawal A `Structs.Withdrawal` struct encoding the parameters of the withdrawal\\r\\n   */\\r\\n  function withdraw(Structs.Withdrawal calldata withdrawal) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/UUID.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { SafeMath64 } from './SafeMath64.sol';\\r\\n\\r\\n\\r\\n/**\\r\\n * Library helper for extracting timestamp component of Version 1 UUIDs\\r\\n */\\r\\nlibrary UUID {\\r\\n  using SafeMath64 for uint64;\\r\\n\\r\\n  /**\\r\\n   * Extracts the timestamp component of a Version 1 UUID. Used to make time-based assertions\\r\\n   * against a wallet-privided nonce\\r\\n   */\\r\\n  function getTimestampInMsFromUuidV1(uint128 uuid)\\r\\n    internal\\r\\n    pure\\r\\n    returns (uint64 msSinceUnixEpoch)\\r\\n  {\\r\\n    // https://tools.ietf.org/html/rfc4122#section-4.1.2\\r\\n    uint128 version = (uuid >> 76) & 0x0000000000000000000000000000000F;\\r\\n    require(version == 1, 'Must be v1 UUID');\\r\\n\\r\\n    // Time components are in reverse order so shift+mask each to reassemble\\r\\n    uint128 timeHigh = (uuid >> 16) & 0x00000000000000000FFF000000000000;\\r\\n    uint128 timeMid = (uuid >> 48) & 0x00000000000000000000FFFF00000000;\\r\\n    uint128 timeLow = (uuid >> 96) & 0x000000000000000000000000FFFFFFFF;\\r\\n    uint128 nsSinceGregorianEpoch = (timeHigh | timeMid | timeLow);\\r\\n    // Gregorian offset given in seconds by https://www.wolframalpha.com/input/?i=convert+1582-10-15+UTC+to+unix+time\\r\\n    msSinceUnixEpoch = uint64(nsSinceGregorianEpoch / 10000).sub(\\r\\n      12219292800000\\r\\n    );\\r\\n\\r\\n    return msSinceUnixEpoch;\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/IterableMapping.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary IterableMapping {\\r\\n    // Iterable mapping from address to uint64;\\r\\n    struct Map {\\r\\n        address[] keys;\\r\\n        mapping(address => uint64) values;\\r\\n        mapping(address => uint) indexOf;\\r\\n        mapping(address => bool) inserted;\\r\\n    }\\r\\n\\r\\n    function get(Map storage map, address key) internal view returns (uint64) {\\r\\n        return map.values[key];\\r\\n    }\\r\\n\\r\\n    function getKeyAtIndex(Map storage map, uint index) internal view returns (address) {\\r\\n        return map.keys[index];\\r\\n    }\\r\\n\\r\\n    function size(Map storage map) internal view returns (uint) {\\r\\n        return map.keys.length;\\r\\n    }\\r\\n\\r\\n    function set(\\r\\n        Map storage map,\\r\\n        address key,\\r\\n        uint64 val\\r\\n    ) internal {\\r\\n        if (map.inserted[key]) {\\r\\n            map.values[key] = val;\\r\\n        } else {\\r\\n            map.inserted[key] = true;\\r\\n            map.values[key] = val;\\r\\n            map.indexOf[key] = map.keys.length;\\r\\n            map.keys.push(key);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function remove(Map storage map, address key) internal {\\r\\n        if (!map.inserted[key]) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        delete map.inserted[key];\\r\\n        delete map.values[key];\\r\\n\\r\\n        uint index = map.indexOf[key];\\r\\n        uint lastIndex = map.keys.length - 1;\\r\\n        address lastKey = map.keys[lastIndex];\\r\\n\\r\\n        map.indexOf[lastKey] = index;\\r\\n        delete map.indexOf[key];\\r\\n\\r\\n        map.keys[index] = lastKey;\\r\\n        map.keys.pop();\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/libraries/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\r\\n *\\r\\n * These functions can be used to verify that a message was signed by the holder\\r\\n * of the private keys of a given address.\\r\\n */\\r\\nlibrary ECDSA {\\r\\n    enum RecoverError {\\r\\n        NoError,\\r\\n        InvalidSignature,\\r\\n        InvalidSignatureLength,\\r\\n        InvalidSignatureS,\\r\\n        InvalidSignatureV\\r\\n    }\\r\\n\\r\\n    function _throwError(RecoverError error) private pure {\\r\\n        if (error == RecoverError.NoError) {\\r\\n            return; // no error: do nothing\\r\\n        } else if (error == RecoverError.InvalidSignature) {\\r\\n            revert(\\\"ECDSA: invalid signature\\\");\\r\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\r\\n            revert(\\\"ECDSA: invalid signature length\\\");\\r\\n        } else if (error == RecoverError.InvalidSignatureS) {\\r\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\r\\n        } else if (error == RecoverError.InvalidSignatureV) {\\r\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\r\\n     * `signature` or error string. This address can then be used for verification purposes.\\r\\n     *\\r\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\r\\n     * this function rejects them by requiring the `s` value to be in the lower\\r\\n     * half order, and the `v` value to be either 27 or 28.\\r\\n     *\\r\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\r\\n     * verification to be secure: it is possible to craft signatures that\\r\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\r\\n     * this is by receiving a hash of the original message (which may otherwise\\r\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\r\\n     *\\r\\n     * Documentation for signature generation:\\r\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\r\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\r\\n        // Check the signature length\\r\\n        // - case 65: r,s,v signature (standard)\\r\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\r\\n        if (signature.length == 65) {\\r\\n            bytes32 r;\\r\\n            bytes32 s;\\r\\n            uint8 v;\\r\\n            // ecrecover takes the signature parameters, and the only way to get them\\r\\n            // currently is to use assembly.\\r\\n            assembly {\\r\\n                r := mload(add(signature, 0x20))\\r\\n                s := mload(add(signature, 0x40))\\r\\n                v := byte(0, mload(add(signature, 0x60)))\\r\\n            }\\r\\n            return tryRecover(hash, v, r, s);\\r\\n        } else if (signature.length == 64) {\\r\\n            bytes32 r;\\r\\n            bytes32 vs;\\r\\n            // ecrecover takes the signature parameters, and the only way to get them\\r\\n            // currently is to use assembly.\\r\\n            assembly {\\r\\n                r := mload(add(signature, 0x20))\\r\\n                vs := mload(add(signature, 0x40))\\r\\n            }\\r\\n            return tryRecover(hash, r, vs);\\r\\n        } else {\\r\\n            return (address(0), RecoverError.InvalidSignatureLength);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\r\\n     * `signature`. This address can then be used for verification purposes.\\r\\n     *\\r\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\r\\n     * this function rejects them by requiring the `s` value to be in the lower\\r\\n     * half order, and the `v` value to be either 27 or 28.\\r\\n     *\\r\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\r\\n     * verification to be secure: it is possible to craft signatures that\\r\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\r\\n     * this is by receiving a hash of the original message (which may otherwise\\r\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\r\\n     */\\r\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\r\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\r\\n        _throwError(error);\\r\\n        return recovered;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\r\\n     *\\r\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function tryRecover(\\r\\n        bytes32 hash,\\r\\n        bytes32 r,\\r\\n        bytes32 vs\\r\\n    ) internal pure returns (address, RecoverError) {\\r\\n        bytes32 s;\\r\\n        uint8 v;\\r\\n        assembly {\\r\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\r\\n            v := add(shr(255, vs), 27)\\r\\n        }\\r\\n        return tryRecover(hash, v, r, s);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\r\\n     *\\r\\n     * _Available since v4.2._\\r\\n     */\\r\\n    function recover(\\r\\n        bytes32 hash,\\r\\n        bytes32 r,\\r\\n        bytes32 vs\\r\\n    ) internal pure returns (address) {\\r\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\r\\n        _throwError(error);\\r\\n        return recovered;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\r\\n     * `r` and `s` signature fields separately.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function tryRecover(\\r\\n        bytes32 hash,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) internal pure returns (address, RecoverError) {\\r\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\r\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\r\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\r\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\r\\n        //\\r\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\r\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\r\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\r\\n        // these malleable signatures as well.\\r\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\r\\n            return (address(0), RecoverError.InvalidSignatureS);\\r\\n        }\\r\\n        if (v != 27 && v != 28) {\\r\\n            return (address(0), RecoverError.InvalidSignatureV);\\r\\n        }\\r\\n\\r\\n        // If the signature is valid (and not malleable), return the signer address\\r\\n        address signer = ecrecover(hash, v, r, s);\\r\\n        if (signer == address(0)) {\\r\\n            return (address(0), RecoverError.InvalidSignature);\\r\\n        }\\r\\n\\r\\n        return (signer, RecoverError.NoError);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\r\\n     * `r` and `s` signature fields separately.\\r\\n     */\\r\\n    function recover(\\r\\n        bytes32 hash,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) internal pure returns (address) {\\r\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\r\\n        _throwError(error);\\r\\n        return recovered;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\r\\n     * produces hash corresponding to the one signed with the\\r\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\r\\n     * JSON-RPC method as part of EIP-191.\\r\\n     *\\r\\n     * See {recover}.\\r\\n     */\\r\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\r\\n        // 32 is the length in bytes of hash,\\r\\n        // enforced by the type signature above\\r\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\r\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\r\\n     * to the one signed with the\\r\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\r\\n     * JSON-RPC method as part of EIP-712.\\r\\n     *\\r\\n     * See {recover}.\\r\\n     */\\r\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 13\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/libraries/AssetRegistry.sol\": {\r\n        \"AssetRegistry\": \"0x2ae371fbb3d4a45ce174b5ca559974928133bd4c\"\r\n      },\r\n      \"contracts/libraries/AssetTransfers.sol\": {\r\n        \"AssetTransfers\": \"0x1af7b032e507fc235be7d3d5fe56f39ccb7dceca\"\r\n      },\r\n      \"contracts/libraries/Signatures.sol\": {\r\n        \"Signatures\": \"0xcb85f6b03ce6238786aeebca4581dd167fa6a110\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"AddDispatcher\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"ChainPropagationPeriodChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"assetSymbolIndex\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"assetSymbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"quantityInPips\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newExchangeBalanceInPips\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newExchangeBalanceInAssetUnits\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"FeeWalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"nonce\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"timestampInMs\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"effectiveBlockNumber\",\"type\":\"uint256\"}],\"name\":\"OrderNonceInvalidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"RemoveDispatcher\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IBEP20\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"assetSymbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"TokenRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IBEP20\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"assetSymbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"TokenRegistrationConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IBEP20\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"assetSymbol\",\"type\":\"string\"}],\"name\":\"TokenSymbolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sellWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"baseAssetSymbolIndex\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"quoteAssetSymbolIndex\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseAssetSymbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"quoteAssetSymbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"baseQuantityInPips\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"quoteQuantityInPips\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"tradePriceInPips\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"buyOrderHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sellOrderHash\",\"type\":\"bytes32\"}],\"name\":\"TradeExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"WalletExitCleared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"assetSymbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"quantityInPips\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newExchangeBalanceInPips\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newExchangeBalanceInAssetUnits\",\"type\":\"uint256\"}],\"name\":\"WalletExitWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"effectiveBlockNumber\",\"type\":\"uint256\"}],\"name\":\"WalletExited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"assetSymbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"quantityInPips\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newExchangeBalanceInPips\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newExchangeBalanceInAssetUnits\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDispatcherWallet\",\"type\":\"address\"}],\"name\":\"addDispatcher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"addTokenSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearWalletExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"confirmTokenRegistration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositBNB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantityInAssetUnits\",\"type\":\"uint256\"}],\"name\":\"depositTokenByAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"assetSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"quantityInAssetUnits\",\"type\":\"uint256\"}],\"name\":\"depositTokenBySymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"signatureHashVersion\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"nonce\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"enum Enums.OrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"internalType\":\"enum Enums.OrderSide\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"quantityInPips\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isQuantityInQuote\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"limitPriceInPips\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"stopPriceInPips\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"clientOrderId\",\"type\":\"string\"},{\"internalType\":\"enum Enums.OrderTimeInForce\",\"name\":\"timeInForce\",\"type\":\"uint8\"},{\"internalType\":\"enum Enums.OrderSelfTradePrevention\",\"name\":\"selfTradePrevention\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"cancelAfter\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"walletSignature\",\"type\":\"bytes\"}],\"internalType\":\"struct Structs.Order\",\"name\":\"buy\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"signatureHashVersion\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"nonce\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"enum Enums.OrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"internalType\":\"enum Enums.OrderSide\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"quantityInPips\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isQuantityInQuote\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"limitPriceInPips\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"stopPriceInPips\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"clientOrderId\",\"type\":\"string\"},{\"internalType\":\"enum Enums.OrderTimeInForce\",\"name\":\"timeInForce\",\"type\":\"uint8\"},{\"internalType\":\"enum Enums.OrderSelfTradePrevention\",\"name\":\"selfTradePrevention\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"cancelAfter\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"walletSignature\",\"type\":\"bytes\"}],\"internalType\":\"struct Structs.Order\",\"name\":\"sell\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"baseAssetSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"quoteAssetSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"baseAssetAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteAssetAddress\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"grossBaseQuantityInPips\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"grossQuoteQuantityInPips\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"netBaseQuantityInPips\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"netQuoteQuantityInPips\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"makerFeeAssetAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takerFeeAssetAddress\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"makerFeeQuantityInPips\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"takerFeeQuantityInPips\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"priceInPips\",\"type\":\"uint64\"},{\"internalType\":\"enum Enums.OrderSide\",\"name\":\"makerSide\",\"type\":\"uint8\"}],\"internalType\":\"struct Structs.Trade\",\"name\":\"trade\",\"type\":\"tuple\"}],\"name\":\"executeTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"signatureHashVersion\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"nonce\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"enum Enums.OrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"internalType\":\"enum Enums.OrderSide\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"quantityInPips\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isQuantityInQuote\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"limitPriceInPips\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"stopPriceInPips\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"clientOrderId\",\"type\":\"string\"},{\"internalType\":\"enum Enums.OrderTimeInForce\",\"name\":\"timeInForce\",\"type\":\"uint8\"},{\"internalType\":\"enum Enums.OrderSelfTradePrevention\",\"name\":\"selfTradePrevention\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"cancelAfter\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"walletSignature\",\"type\":\"bytes\"}],\"internalType\":\"struct Structs.Order[]\",\"name\":\"buys\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"signatureHashVersion\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"nonce\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"enum Enums.OrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"internalType\":\"enum Enums.OrderSide\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"quantityInPips\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isQuantityInQuote\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"limitPriceInPips\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"stopPriceInPips\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"clientOrderId\",\"type\":\"string\"},{\"internalType\":\"enum Enums.OrderTimeInForce\",\"name\":\"timeInForce\",\"type\":\"uint8\"},{\"internalType\":\"enum Enums.OrderSelfTradePrevention\",\"name\":\"selfTradePrevention\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"cancelAfter\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"walletSignature\",\"type\":\"bytes\"}],\"internalType\":\"struct Structs.Order[]\",\"name\":\"sells\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"baseAssetSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"quoteAssetSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"baseAssetAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteAssetAddress\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"grossBaseQuantityInPips\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"grossQuoteQuantityInPips\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"netBaseQuantityInPips\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"netQuoteQuantityInPips\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"makerFeeAssetAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takerFeeAssetAddress\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"makerFeeQuantityInPips\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"takerFeeQuantityInPips\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"priceInPips\",\"type\":\"uint64\"},{\"internalType\":\"enum Enums.OrderSide\",\"name\":\"makerSide\",\"type\":\"uint8\"}],\"internalType\":\"struct Structs.Trade[]\",\"name\":\"trades\",\"type\":\"tuple[]\"}],\"name\":\"executeTrades\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exitWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"nonce\",\"type\":\"uint128\"}],\"name\":\"invalidateOrderNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isDispatcher\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"isWalletExit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"isWalletExitFinalized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"assetSymbol\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"timestampInMs\",\"type\":\"uint64\"}],\"name\":\"loadAssetBySymbol\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isConfirmed\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"confirmedTimestampInMs\",\"type\":\"uint64\"}],\"internalType\":\"struct Structs.Asset\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"loadBalanceAssetAddress\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"name\":\"loadBalanceInAssetUnitsByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"assetSymbol\",\"type\":\"string\"}],\"name\":\"loadBalanceInAssetUnitsBySymbol\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"name\":\"loadBalanceInPipsByAddress\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"assetSymbol\",\"type\":\"string\"}],\"name\":\"loadBalanceInPipsBySymbol\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loadFeeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"loadPartiallyFilledOrderQuantityInPips\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"registerToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeDispatcher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newChainPropagationPeriod\",\"type\":\"uint256\"}],\"name\":\"setChainPropagationPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newCustodian\",\"type\":\"address\"}],\"name\":\"setCustodian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeWallet\",\"type\":\"address\"}],\"name\":\"setFeeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum Enums.WithdrawalType\",\"name\":\"withdrawalType\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"nonce\",\"type\":\"uint128\"},{\"internalType\":\"address payable\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"assetSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"quantityInPips\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"gasFeeInPips\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"autoDispatchEnabled\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"walletSignature\",\"type\":\"bytes\"}],\"internalType\":\"struct Structs.Withdrawal\",\"name\":\"withdrawal\",\"type\":\"tuple\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"name\":\"withdrawExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Exchange", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "13", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}