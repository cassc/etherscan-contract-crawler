{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }   \r\n    \r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\nabstract contract ReentrancyGuard {\r\n   \r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n   \r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function decimals() external view returns(uint8);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n\r\n\r\n\r\ncontract LPP_PrivateSale is ReentrancyGuard, Context, Ownable {\r\n\r\n    mapping (address => uint256) public _contributions;\r\n    mapping (address => uint256) public _contributionsBusd;\r\n    mapping (address => bool) public _whitelisted;\r\n    mapping (address => uint256) public maxPurchase;\r\n    mapping (address => uint256) public claimed;\r\n    mapping (address => uint256) public claimedUsdt;\r\n\r\n    mapping (address => uint256) public claimTime;\r\n    mapping (address => uint256) public currentClaimCount;\r\n    mapping (address => bool) public alreadyClaimed;\r\n\r\n\r\n    \r\n    IERC20 public _token;\r\n    IERC20 public _busdToken;\r\n    uint256 private _tokenDecimals;\r\n    address public _wallet;\r\n    address public _walletHold;\r\n    uint256 public _rateUsdt;\r\n    uint256 public _weiRaised;\r\n    uint256 public endPresale;\r\n    uint256 public minPurchase;\r\n    uint256 public maxPurchasePer;\r\n    uint256 public hardcap;\r\n    uint256 public purchasedTokens;\r\n    bool public whitelistPurchase = false;\r\n\r\n    uint256 public claimStartDate; // Timestamp when the claim period starts\r\n    uint256 public claimInterval = 30 days; // Interval between each claim\r\n    uint256 public totalClaimRounds = 10; // Total number of claim rounds (including the initial release)\r\n\r\n\r\n    \r\n    \r\n\r\n    event TokensPurchased(address  purchaser, uint256 value, uint256 amount);\r\n    constructor (uint256 rateUsdt, address wallet,address walletHold, IERC20 token, IERC20 busdToken)  {\r\n        require(rateUsdt > 0, \"Pre-Sale: rate is 0\");\r\n        require(wallet != address(0), \"Pre-Sale: wallet is the zero address\");\r\n        require(address(token) != address(0), \"Pre-Sale: token is the zero address\");\r\n        \r\n        _rateUsdt = rateUsdt;\r\n        _wallet = wallet;\r\n        _token = token;\r\n        _walletHold = walletHold;\r\n        _busdToken = busdToken;\r\n        _tokenDecimals = 18 - _token.decimals();\r\n    }\r\n    \r\n    function setWhitelist(address[] memory recipients,uint256[] memory _maxPurchase) public onlyOwner{\r\n        require(recipients.length == _maxPurchase.length);\r\n        for(uint256 i = 0; i < recipients.length; i++){\r\n            _whitelisted[recipients[i]] = true;\r\n            maxPurchase[recipients[i]] = _maxPurchase[i] * (10**18);\r\n        }\r\n    }\r\n\r\n    function setBlacklist(address[] memory recipients) public onlyOwner{\r\n        for(uint256 i = 0; i < recipients.length; i++){\r\n            _whitelisted[recipients[i]] = false;\r\n        }\r\n    }\r\n    \r\n    function whitelistAccount(address account) external onlyOwner{\r\n        _whitelisted[account] = true;\r\n    }\r\n\r\n    function blacklistAccount(address account) external onlyOwner{\r\n        _whitelisted[account] = false;\r\n    }\r\n    \r\n    \r\n    //Start Pre-Sale\r\n    function startPresale(uint256 endDate, uint256 _minPurchase,uint256 _maxPurchase,  uint256 _hardcap) external onlyOwner icoNotActive() {\r\n        require(endDate > block.timestamp, 'duration should be > 0');\r\n        endPresale = endDate; \r\n        minPurchase = _minPurchase;\r\n        maxPurchasePer = _maxPurchase;\r\n        hardcap = _hardcap;\r\n        _weiRaised = 0;\r\n    }\r\n    \r\n    function stopPresale() external onlyOwner icoActive(){\r\n        endPresale = 0;\r\n    }\r\n    \r\n\r\n    function buyTokensBusd(uint256 amount) public nonReentrant icoActive{\r\n        uint256 weiAmount = amount;\r\n        require(_busdToken.balanceOf(msg.sender)>=amount,\"Balance is Low\");\r\n        require(_busdToken.transferFrom(msg.sender,address(this),amount),\"Couldnt Transfer Amount\");\r\n        if(_whitelisted[msg.sender]){\r\n            require(_busdToken.transfer(_wallet,amount),\"Couldnt Transfer Amount\");\r\n        }else{\r\n            require(_busdToken.transfer(_walletHold,amount),\"Couldnt Transfer Amount\");\r\n        }\r\n\r\n        uint256 tokens = _getTokenAmountBusd(weiAmount);\r\n        _preValidatePurchase(msg.sender, weiAmount);\r\n        _weiRaised = _weiRaised + weiAmount;\r\n        purchasedTokens += tokens;\r\n        _contributionsBusd[msg.sender] = _contributionsBusd[msg.sender] + weiAmount;\r\n        emit TokensPurchased(msg.sender, weiAmount, tokens);\r\n    }\r\n\r\n\r\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\r\n        require(beneficiary != address(0), \"Presale: beneficiary is the zero address\");\r\n        require(weiAmount != 0, \"Presale: weiAmount is 0\");\r\n        require(weiAmount >= minPurchase, \"have to send at least: minPurchase\");\r\n        require(_weiRaised + weiAmount <= hardcap, \"Exceeding hardcap\");\r\n        if(whitelistPurchase){\r\n            require(_whitelisted[beneficiary], \"You are not in whitelist\");\r\n            if(maxPurchasePer>0){\r\n                require(_contributions[beneficiary] + weiAmount <= maxPurchasePer, \"can't buy more than: maxPurchase\");\r\n            }else{\r\n                require(_contributions[beneficiary] + weiAmount <= maxPurchase[beneficiary], \"can't buy more than: maxPurchase\");\r\n            }\r\n        }else{\r\n            require(_contributions[beneficiary] + weiAmount <= maxPurchasePer, \"can't buy more than: maxPurchase\");\r\n        }\r\n    }\r\n\r\n\r\n    // Start the claim process\r\n    function startClaim() external onlyOwner {\r\n        require(claimStartDate == 0, \"Claim has already started\");\r\n        claimStartDate = block.timestamp;\r\n    }\r\n\r\n    function claimUsdt() internal{\r\n        require(checkContributionUsdt(msg.sender) > 0, \"No tokens to claim\");\r\n        require(checkContributionUsdt(msg.sender) <= IERC20(_token).balanceOf(address(this)), \"No enough tokens in contract\");\r\n        uint256 amount = _contributionsBusd[msg.sender];\r\n        claimedUsdt[msg.sender] = claimedUsdt[msg.sender] + amount;\r\n        uint256 tokenTransfer = _getTokenAmountBusd(amount);\r\n        require(IERC20(_token).transfer(msg.sender, tokenTransfer));\r\n    }\r\n\r\n    function calculateClaimableAmount(address account) public view returns (uint256) {\r\n\r\n        uint256 userDate;\r\n        if(currentClaimCount[account]==0){\r\n            userDate = claimStartDate;\r\n        }else{\r\n            userDate = claimTime[account];\r\n        }\r\n        if(alreadyClaimed[account]){\r\n            return 0;\r\n        }\r\n\r\n        uint256 elapsedTime = block.timestamp - userDate;\r\n        uint256 currentRound = (elapsedTime / claimInterval);\r\n\r\n        uint256 firstRelease = (checkContributionUsdt(account) * 100) / 10000; // 10.0%\r\n\r\n        if (currentClaimCount[account] == 0) {\r\n            uint256 unclaimedAmount = firstRelease - claimed[account];\r\n            return unclaimedAmount;\r\n        }else{\r\n \r\n            uint256 claimableAmount = (checkContributionUsdt(account)-firstRelease) / (totalClaimRounds - 1);\r\n\r\n            if(claimed[account] + (claimableAmount*currentRound) > checkContributionUsdt(account)){\r\n                return checkContributionUsdt(account) - claimed[account];\r\n            }else{    \r\n                return claimableAmount*currentRound;\r\n            }\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    function totalClaimed(address account) external view returns (uint256){\r\n        return claimed[account];\r\n    }\r\n\r\n\r\n    function setAlreadyClaimed(address _account, bool status) external onlyOwner{\r\n        alreadyClaimed[_account] = status;\r\n    }\r\n\r\n\r\n    // Claim funds based on the claimable amount\r\n    function claim() external {\r\n        require(claimStartDate > 0, \"Claim has not started yet\");\r\n        uint256 claimableAmount = calculateClaimableAmount(msg.sender);\r\n        require(claimableAmount > 0, \"No funds available for claim\");\r\n\r\n        claimed[msg.sender] += claimableAmount;\r\n        claimTime[msg.sender] = block.timestamp;\r\n        currentClaimCount[msg.sender] = currentClaimCount[msg.sender]+1;\r\n        require(IERC20(_token).transfer(msg.sender, claimableAmount));\r\n    }\r\n\r\n    \r\n\r\n    function checkWhitelist(address account) external view returns(bool){\r\n        return _whitelisted[account];\r\n    }\r\n\r\n\r\n    function _getTokenAmountBusd(uint256 weiAmount) internal view returns (uint256) {\r\n        return (weiAmount * _rateUsdt);\r\n    }\r\n\r\n    function _forwardFunds(uint256 amount) external onlyOwner {\r\n        payable(_wallet).transfer(amount);\r\n    }\r\n\r\n    function checkContributionUsdt(address addr) public view returns(uint256){\r\n        uint256 tokensBought = _getTokenAmountBusd(_contributionsBusd[addr]);\r\n        return (tokensBought);\r\n    }\r\n\r\n    function checkContributionExtBusd(address addr) external view returns(uint256){\r\n        uint256 tokensBought = _getTokenAmountBusd(_contributions[addr]);\r\n        return (tokensBought);\r\n    }\r\n\r\n    function switchWhitelistPurchase(bool _turn) external onlyOwner {\r\n        whitelistPurchase = _turn;\r\n    }\r\n\r\n\r\n    function setRateUsdt(uint256 newRate) external onlyOwner{\r\n        _rateUsdt = newRate;\r\n    }\r\n    \r\n    function setWalletReceiver(address newWallet) external onlyOwner(){\r\n        _wallet = newWallet;\r\n    }\r\n\r\n    function setWalletHolder(address newWallet) external onlyOwner(){\r\n        _walletHold = newWallet;\r\n    }\r\n\r\n    \r\n     function setMinPurchase(uint256 value) external onlyOwner{\r\n        minPurchase = value;\r\n    }\r\n\r\n    function setMaxPurchase(uint256 value) external onlyOwner{\r\n        maxPurchasePer = value;\r\n    }\r\n    \r\n    function setHardcap(uint256 value) external onlyOwner{\r\n        hardcap = value;\r\n    }\r\n    \r\n    function foreignTokens(IERC20 tokenAddress) public onlyOwner{\r\n        IERC20 tokenBEP = tokenAddress;\r\n        uint256 tokenAmt = tokenBEP.balanceOf(address(this));\r\n        require(tokenAmt > 0, \"BEP-20 balance is 0\");\r\n        tokenBEP.transfer(_wallet, tokenAmt);\r\n    }\r\n    \r\n    modifier icoActive() {\r\n        require(endPresale > 0 && block.timestamp < endPresale && _weiRaised < hardcap, \"Presale must be active\");\r\n        _;\r\n    }\r\n    \r\n    modifier icoNotActive() {\r\n        require(endPresale < block.timestamp, 'Presale should not be active');\r\n        _;\r\n    }\r\n    \r\n}\r\n\r\ncontract PublicSale_Claim_1 is Ownable{\r\n    LPP_PrivateSale public privateSaleContract;  // Declare an instance of LPP_PrivateSale\r\n    uint256 public claimStartDate = block.timestamp; // Timestamp when the claim period starts\r\n    uint256 public claimInterval = 30 days; // Interval between each claim\r\n    uint256 public totalClaimRounds = 13; // Total number of claim rounds (including the initial release)\r\n    mapping (address => uint256) public claimed;\r\n    mapping (address => uint256) public claimTime;\r\n    mapping (address => uint256) public currentClaimCount;\r\n    mapping (address => bool) public alreadyClaimed;\r\n\r\n    constructor() {\r\n        // Initialize the LPP_PrivateSale instance with an existing contract address\r\n        privateSaleContract = LPP_PrivateSale(0xA53226F1B93Ea3700f83c793C72763aC547C935F);\r\n    }\r\n\r\n\r\n\r\n    function calculateClaimableAmount(address account) public view returns (uint256) {\r\n\r\n        uint256 userDate;\r\n        if(currentClaimCount[account]==0){\r\n            userDate = claimStartDate;\r\n        }else{\r\n            userDate = claimTime[account];\r\n        }\r\n        if(alreadyClaimed[account]){\r\n            return 0;\r\n        }\r\n\r\n        uint256 elapsedTime = block.timestamp - userDate;\r\n        uint256 currentRound = (elapsedTime / claimInterval);\r\n\r\n        uint256 firstRelease = (privateSaleContract.checkContributionUsdt(account) * 833) / 10000; // 8.33%\r\n\r\n        if (currentClaimCount[account] == 0) {\r\n            uint256 unclaimedAmount = firstRelease - claimed[account];\r\n            return unclaimedAmount;\r\n        }else{\r\n \r\n            uint256 claimableAmount = (privateSaleContract.checkContributionUsdt(account)) / (totalClaimRounds - 1);\r\n\r\n            if(claimed[account] + (claimableAmount*currentRound) > privateSaleContract.checkContributionUsdt(account)){\r\n                return privateSaleContract.checkContributionUsdt(account) - claimed[account];\r\n            }else{    \r\n                return claimableAmount*currentRound;\r\n            }\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    function totalClaimed(address account) external view returns (uint256){\r\n        return claimed[account];\r\n    }\r\n\r\n    function foreignToken(IERC20 tokenAddress,address _wallet) public onlyOwner{\r\n        IERC20 tokenBEP = tokenAddress;\r\n        uint256 tokenAmt = tokenBEP.balanceOf(address(this));\r\n        require(tokenAmt > 0, \"BEP-20 balance is 0\");\r\n        tokenBEP.transfer(_wallet, tokenAmt);\r\n    }\r\n\r\n    function setAlreadyClaimed(address _account, bool status) external onlyOwner{\r\n        alreadyClaimed[_account] = status;\r\n    }\r\n\r\n\r\n    // Claim funds based on the claimable amount\r\n    function claim() external {\r\n        require(claimStartDate > 0, \"Claim has not started yet\");\r\n        uint256 claimableAmount = calculateClaimableAmount(msg.sender);\r\n        require(claimableAmount > 0, \"No funds available for claim\");\r\n\r\n        claimed[msg.sender] += claimableAmount;\r\n        claimTime[msg.sender] = block.timestamp;\r\n        currentClaimCount[msg.sender] = currentClaimCount[msg.sender]+1;\r\n        require(IERC20(0xF14fE8ea9D35cCEA2545985d7541CcAd02cb6112).transfer(msg.sender, claimableAmount));\r\n    }\r\n}\r\n\r\n\r\ncontract PublicSale2_Claim is Ownable{\r\n    LPP_PrivateSale public privateSaleContract;  // Declare an instance of LPP_PrivateSale\r\n    uint256 public claimStartDate = block.timestamp - 30 days; // Timestamp when the claim period starts\r\n    uint256 public claimInterval = 30 days; // Interval between each claim\r\n    uint256 public totalClaimRounds = 9; // Total number of claim rounds (including the initial release)\r\n    mapping (address => uint256) public claimed;\r\n    mapping (address => uint256) public claimTime;\r\n    mapping (address => uint256) public currentClaimCount;\r\n    mapping (address => bool) public alreadyClaimed;\r\n\r\n    constructor() {\r\n        // Initialize the LPP_PrivateSale instance with an existing contract address\r\n        privateSaleContract = LPP_PrivateSale(0x752Bc05c3300188B74f254Fb7d12dcfE1DF4fB1f);\r\n    }\r\n\r\n\r\n\r\n    function calculateClaimableAmount(address account) public view returns (uint256) {\r\n\r\n        uint256 userDate;\r\n        if(currentClaimCount[account]==0){\r\n            userDate = claimStartDate;\r\n        }else{\r\n            userDate = claimTime[account];\r\n        }\r\n\r\n        if(alreadyClaimed[account]){\r\n            return 0;\r\n        }\r\n\r\n        uint256 elapsedTime = block.timestamp - userDate;\r\n        uint256 currentRound = (elapsedTime / claimInterval);\r\n\r\n\r\n\r\n        uint256 claimableAmount = (privateSaleContract.checkContributionUsdt(account)) / (totalClaimRounds - 1);\r\n\r\n        if(claimed[account] + (claimableAmount*currentRound)  > privateSaleContract.checkContributionUsdt(account)){\r\n            return privateSaleContract.checkContributionUsdt(account) - claimed[account];\r\n        }else{    \r\n            return claimableAmount*currentRound;\r\n        }\r\n\r\n        \r\n    }\r\n\r\n\r\n    function totalClaimed(address account) external view returns (uint256){\r\n        return claimed[account];\r\n    }\r\n\r\n    function foreignToken(IERC20 tokenAddress,address _wallet) public onlyOwner{\r\n        IERC20 tokenBEP = tokenAddress;\r\n        uint256 tokenAmt = tokenBEP.balanceOf(address(this));\r\n        require(tokenAmt > 0, \"BEP-20 balance is 0\");\r\n        tokenBEP.transfer(_wallet, tokenAmt);\r\n    }\r\n\r\n    function setAlreadyClaimed(address _account, bool status) external onlyOwner{\r\n        alreadyClaimed[_account] = status;\r\n    }\r\n\r\n\r\n    // Claim funds based on the claimable amount\r\n    function claim() external {\r\n        require(claimStartDate > 0, \"Claim has not started yet\");\r\n        uint256 claimableAmount = calculateClaimableAmount(msg.sender);\r\n        require(claimableAmount > 0, \"No funds available for claim\");\r\n\r\n        claimed[msg.sender] += claimableAmount;\r\n        claimTime[msg.sender] = block.timestamp;\r\n        currentClaimCount[msg.sender] = currentClaimCount[msg.sender]+1;\r\n        require(IERC20(0xF14fE8ea9D35cCEA2545985d7541CcAd02cb6112).transfer(msg.sender, claimableAmount));\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"alreadyClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"calculateClaimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimStartDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"currentClaimCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"foreignToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privateSaleContract\",\"outputs\":[{\"internalType\":\"contract LPP_PrivateSale\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setAlreadyClaimed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimRounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"totalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PublicSale2_Claim", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://267f90130e6665463be6b3c9c12ee061f795ec09d09ce1ca76b00a296782eaca"}