{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\npragma solidity ^0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract UltraStaking {\r\n    using SafeMath for uint256;\r\n\r\n    struct User {\r\n        address referrer;\r\n        uint256 referral_rewards;\r\n        bool largest_qualified;\r\n        uint256 deposit_time;\r\n        uint256 claim_time;\r\n        uint256 total_deposits;\r\n        uint256 total_withdraws;\r\n        uint256 total_withdraws_scaled;\r\n        uint256 last_distPoints;\r\n        uint256 lottery_winnings;\r\n        uint256 largest_winnings;\r\n        uint256 day_deposits;\r\n    }\r\n\r\n    address public glass;\r\n    address private dev;\r\n    \r\n    mapping(uint256 => mapping(uint256 => address)) public lotteryContestants;\r\n    mapping(uint256 => mapping(address => mapping(uint256 => mapping(uint256 => uint256)))) public lotteryTickets;\r\n    mapping(address => User) public users;\r\n    address[] public userIndices;\r\n\r\n    uint256 public total_users;\r\n    uint256 public total_deposited;\r\n    uint256 public total_withdrawn;\r\n    uint256 public total_rewards;\r\n    uint256 public largestTime;\r\n    uint256 public lastDripTime;\r\n    uint256 public ticketPrice;\r\n    uint256 public maxTickets;\r\n    uint256 public minReferrer;\r\n    uint256 public dripRate;\r\n    uint256 public largestRewardBP;\r\n    uint256 public randomRewardBP;\r\n    uint256 public totalDistributeRewards;\r\n    mapping(uint256 => address[]) public largestQualified;\r\n    mapping(uint256 => address[]) public randomWinners;\r\n    mapping(uint256 => uint256[]) public largestDeposits;\r\n    mapping(uint256 => address[]) public largestTicketWinners;\r\n    uint256 public totalDistributePoints;\r\n    uint256 public rolloverDistributePoints;\r\n    uint256 public unclaimedDistributeRewards;\r\n    uint256 public compoundFeePercent;\r\n    uint256 public depositFeePercent;\r\n    uint256 public claimFeePercent;\r\n    uint256 public lotteryId;\r\n    uint256 public ticketId;\r\n    uint256 public reductionWeigthPercent;\r\n    uint256 public weekDay;\r\n    uint256 public numRandomWinners;\r\n    uint256 public winningsClaimFeePercent;\r\n    uint256 public lotteryTime;\r\n    uint256 public depositInstantRewardPercent;\r\n    uint256 public rollInstantRewardPercent;\r\n    uint256 public maxLargestWinners;\r\n    uint256 public largestRewardTickets;\r\n    uint256 public devFeePercent;\r\n    uint256 public maxRandomWins;\r\n    uint256 public minLargestBPx10;\r\n    uint256 public dayTime; \r\n    uint256 public largestTimeIncrement;\r\n    uint256 public lotteryTimeIncrement;\r\n    uint256 public dayTimeIncrement;\r\n    uint256 public minLargestRewardRatio;\r\n    uint256 public compoundReferralFee;\r\n    bool public depositEnabled;\r\n    bool public claimEnabled;\r\n    uint256 public constant MULTIPLIER = 10e18;\r\n    uint256 public constant WEEKDAYS = 7;\r\n\r\n    event NewDeposit(address indexed addr, address indexed ref, uint256 amount);\r\n    event DirectPayout(\r\n        address indexed addr,\r\n        address indexed from,\r\n        uint256 amount\r\n    );\r\n    event Withdraw(address indexed addr, uint256 amount);\r\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\r\n\r\n    constructor(address _glass, uint256 _largestTime, uint256 _lotteryTime, uint256 _dayTime) public {\r\n        ticketPrice = SafeMath.mul(3e9, 1 gwei);\r\n        maxTickets = 50;\r\n        minReferrer = SafeMath.mul(27e8, 1 gwei); \r\n        largestTime = _largestTime;\r\n        lotteryTime = _lotteryTime;\r\n        dayTime = _dayTime;\r\n        largestTimeIncrement = 8 hours;\r\n        lotteryTimeIncrement = 7 days;\r\n        dayTimeIncrement = 1 days;\r\n\r\n        minLargestBPx10 = 25; // 0.025\r\n        largestRewardBP = 5; // 0.05%\r\n        randomRewardBP = 250; // 2.5%\r\n        dripRate = 4214634; // 2.05% daily\r\n        lastDripTime = block.timestamp;\r\n        compoundFeePercent = 20;\r\n        depositFeePercent = 10;\r\n        claimFeePercent = 10;\r\n        ticketId = 0;\r\n        lotteryId = 0;\r\n        reductionWeigthPercent = 40;\r\n        numRandomWinners = 100;\r\n        winningsClaimFeePercent = 33;\r\n        depositInstantRewardPercent = 8;\r\n        rollInstantRewardPercent = 0;\r\n        maxLargestWinners = 500;\r\n        maxRandomWins = 100;\r\n        largestRewardTickets = 10;\r\n        compoundReferralFee = 3;\r\n        minLargestRewardRatio = 6;\r\n        devFeePercent = 2;\r\n\r\n        dev = msg.sender;\r\n        glass = _glass;\r\n        depositEnabled = true;\r\n        claimEnabled = true;\r\n    }\r\n\r\n    receive() external payable {\r\n        revert(\"Do not send BNB.\");\r\n    }\r\n\r\n    modifier onlyDev() {\r\n        require(msg.sender == dev, \"Caller is not the dev!\");\r\n        _;\r\n    }\r\n\r\n    function changeDev(address payable newDev) external onlyDev {\r\n        require(newDev != address(0), \"Zero address\");\r\n        dev = newDev;\r\n    }\r\n    \r\n    function migrateGlobals(\r\n        uint256 _total_users,\r\n        uint256 _total_deposited,\r\n        uint256 _total_withdrawn,\r\n        uint256 _total_rewards,\r\n        uint256 _lastDripTime,\r\n        uint256 _totalDistributeRewards,\r\n        uint256 _totalDistributePoints,\r\n        uint256 _rolloverDistributePoints,\r\n        uint256 _unclaimedDistributeRewards\r\n    ) external onlyDev {\r\n        total_users = _total_users;\r\n        total_deposited = _total_deposited;\r\n        total_withdrawn = _total_withdrawn;\r\n        total_rewards = _total_rewards;\r\n        lastDripTime = _lastDripTime;\r\n        totalDistributeRewards = _totalDistributeRewards;\r\n        totalDistributePoints = _totalDistributePoints;\r\n        rolloverDistributePoints = _rolloverDistributePoints;\r\n        unclaimedDistributeRewards = _unclaimedDistributeRewards;\r\n    }\r\n    \r\n    function migrateUsers(address[] memory _addrs, User[] memory _users) external onlyDev {        \r\n        for (uint256 i = 0; i < _addrs.length; i++) { \r\n            address addr = _addrs[i];          \r\n            if (users[addr].total_deposits == 0) {\r\n                // if (_tickets[i] > 0) {\r\n                //     _buyTickets(_addr[i], _tickets[i]);\r\n                //     lotteryTickets[lotteryTime][_addr[i]][weekDay][1] = _tickets[i];\r\n                // }\r\n                // if (_user[i].deposit_time >= largestTime.sub(largestTimeIncrement) && _user[i].largest_qualified) {\r\n                //     largestQualified[largestTime].push(_addr[i]);\r\n                // }\r\n\r\n                userIndices.push(addr);\r\n                users[addr] = _users[i];\r\n            }      \r\n        }\r\n    }\r\n\r\n    function setUser(address _addr, User memory _user) external onlyDev {\r\n        require(users[_addr].deposit_time > 0, \"User does not exist\");        \r\n        users[_addr] = _user;\r\n    }\r\n\r\n    function setDepositEnabled(bool enabled) external onlyDev {\r\n        depositEnabled = enabled;\r\n    }\r\n    \r\n    function setClaimEnabled(bool enabled) external onlyDev {\r\n        claimEnabled = enabled;\r\n    }\r\n\r\n    function setLargestTime(uint256 time) external onlyDev {\r\n        largestTime = time;\r\n    }\r\n\r\n    function setLotteryTime(uint256 time) external onlyDev {\r\n        lotteryTime = time;\r\n    }\r\n    \r\n    function setDayTime(uint256 time) external onlyDev {\r\n        dayTime = time;\r\n    }\r\n\r\n    function setLargestTimeIncrement(uint256 incrementSeconds) external onlyDev {\r\n        largestTimeIncrement = incrementSeconds;\r\n    }\r\n    \r\n    function setLotteryTimeIncrement(uint256 incrementSeconds) external onlyDev {\r\n        lotteryTimeIncrement = incrementSeconds;\r\n    }\r\n    \r\n    function setDayTimeIncrement(uint256 incrementSeconds) external onlyDev {\r\n        dayTimeIncrement = incrementSeconds;\r\n    }\r\n\r\n    function setLargestRewardBP(uint256 bp) external onlyDev {\r\n        largestRewardBP = bp;\r\n    }\r\n    \r\n    function setRandomRewardBP(uint256 bp) external onlyDev {\r\n        randomRewardBP = bp;\r\n    }\r\n\r\n    function setTicketPrice(uint256 amnt) external onlyDev {\r\n        ticketPrice = amnt;\r\n    }\r\n    \r\n    function setMaxTickets(uint256 amnt) external onlyDev {\r\n        maxTickets = amnt;\r\n    }\r\n    \r\n    function setMinReferrer(uint256 amnt) external onlyDev {\r\n        minReferrer = amnt;\r\n    }\r\n    \r\n    function setDripRate(uint256 rate) external onlyDev {\r\n        dripRate = rate;\r\n    }\r\n    \r\n    function setCompoundFeePercent(uint256 percent) external onlyDev {\r\n        compoundFeePercent = percent;\r\n    }\r\n    \r\n    function setDepositFeePercent(uint256 percent) external onlyDev {\r\n        depositFeePercent = percent;\r\n    }\r\n    \r\n    function setClaimFeePercent(uint256 percent) external onlyDev {\r\n        claimFeePercent = percent;\r\n    }\r\n    \r\n    function setReductionWeigthPercent(uint256 percent) external onlyDev {\r\n        reductionWeigthPercent = percent;\r\n    }\r\n    \r\n    function setWeekDay(uint256 day) external onlyDev {\r\n        weekDay = day;\r\n    }\r\n    \r\n    function setNumRandomWinners(uint256 numWinners) external onlyDev {\r\n        numRandomWinners = numWinners;\r\n    }\r\n    \r\n    function setMinLargest(uint256 bpx10) external onlyDev {\r\n        minLargestBPx10 = bpx10;\r\n    }\r\n\r\n    function setwinningsClaimFeePercent(uint256 percent) external onlyDev {\r\n        winningsClaimFeePercent = percent;\r\n    }\r\n    \r\n    function setDepositInstantRewardPercent(uint256 percent) external onlyDev {\r\n        depositInstantRewardPercent = percent;\r\n    }\r\n    \r\n    function setRollInstantRewardPercent(uint256 percent) external onlyDev {\r\n        rollInstantRewardPercent = percent;\r\n    }\r\n    \r\n    function setMaxLargestWinners(uint256 max) external onlyDev {\r\n        maxLargestWinners = max;\r\n    }\r\n    \r\n    function setLargestRewardTickets(uint256 num) external onlyDev {\r\n        largestRewardTickets = num;\r\n    }\r\n    \r\n    function setDevFeePercent(uint256 percent) external onlyDev {\r\n        devFeePercent = percent;\r\n    }\r\n\r\n    function setLargestQualified(address[] calldata qualifiedLst) external onlyDev {\r\n        largestQualified[largestTime] = qualifiedLst;\r\n    }\r\n    \r\n    function setMinLargestRewardRatio(uint256 min) external onlyDev {\r\n        minLargestRewardRatio = min;\r\n    }\r\n    \r\n    function setMaxRandomWins(uint256 max) external onlyDev {\r\n        maxRandomWins = max;\r\n    }\r\n    \r\n    function setCompoundReferralFee(uint256 amnt) external onlyDev {\r\n        compoundReferralFee = amnt;\r\n    }\r\n\r\n    function emergencyWithdraw(uint256 amnt) external onlyDev {\r\n        IBEP20(glass).transfer(dev, amnt);\r\n    }\r\n\r\n    function timeToReward() external view returns (uint256) {\r\n        return block.timestamp < largestTime ? largestTime - block.timestamp : 0;\r\n    }\r\n\r\n    function random(uint256 _exlcusiveMax, uint256 _randInt) external view returns (uint256) {\r\n        return _random(_exlcusiveMax, _randInt);\r\n    }\r\n\r\n    function listLargestQualified(uint256 time) external view returns (address[] memory) {\r\n        return largestQualified[time];\r\n    }\r\n    \r\n    function listLargestDeposits(uint256 time) external view returns (uint256[] memory) {\r\n        if (time >= largestTime) {\r\n            uint256[] memory amounts = new uint256[](largestQualified[largestTime].length);\r\n            \r\n            for (uint256 i = 0; i < largestQualified[largestTime].length; i++) {\r\n                amounts[i] = users[largestQualified[largestTime][i]].day_deposits;\r\n            }\r\n\r\n            return amounts;\r\n        }\r\n\r\n        return largestDeposits[time];\r\n    }\r\n    \r\n    function listLargestTicketWinners(uint256 time) external view returns (address[] memory) {\r\n        return largestTicketWinners[time];\r\n    }\r\n    \r\n    function listRandomWinners(uint256 time) external view returns (address[] memory) {\r\n        return randomWinners[time];\r\n    }\r\n\r\n    function getLargestRatioRemaining() external view returns (uint256) {\r\n        uint256 totalQualified = getLargestQualifiedTotal(largestTime).mul(depositFeePercent.add(100)).div(100);\r\n        uint256 minTotal = _getGlassBalancePool().mul(largestRewardBP).div(10000).mul(minLargestRewardRatio);\r\n        \r\n        return totalQualified < minTotal ? minTotal.sub(totalQualified) : 0;\r\n    }\r\n\r\n    function getDayDeposits(address _addr) external view returns (uint256) {\r\n        return users[_addr].deposit_time >= largestTime.sub(largestTimeIncrement) ? users[_addr].day_deposits : 0;\r\n    }\r\n\r\n    function _random(uint256 _exlcusiveMax, uint256 _randInt) internal view returns (uint256) {\r\n        return\r\n            uint256(\r\n                keccak256(\r\n                    abi.encodePacked(\r\n                        block.timestamp,\r\n                        block.difficulty,\r\n                        _randInt\r\n                    )\r\n                )\r\n            ) % _exlcusiveMax;\r\n    }\r\n\r\n    function trySendReward() external {\r\n        return _trySendReward();\r\n    }\r\n\r\n    function _trySendReward() internal {\r\n        uint256 timestamp = block.timestamp;\r\n        if (timestamp >= dayTime) {\r\n            weekDay++;\r\n            dayTime = dayTime.add(dayTimeIncrement);\r\n        }\r\n\r\n        if (timestamp >= largestTime && timestamp < lotteryTime) {\r\n\r\n            uint256 reward1 = _getGlassBalancePool().mul(largestRewardBP).div(10000);\r\n            uint256 largestQualifiedTotal = getLargestQualifiedTotal(largestTime);\r\n            bool isMinRatio = largestQualifiedTotal.mul(depositFeePercent.add(100)).div(100).div(reward1) >= minLargestRewardRatio;\r\n            uint256 numQualified = largestQualified[largestTime].length;\r\n\r\n            if (numQualified > 0 && isMinRatio) {\r\n                \r\n                address[] memory ticketRewardContestants = new address[](100);\r\n                uint256 id = 0;\r\n                \r\n                for (uint256 i = 0; i < numQualified && i < maxLargestWinners; i++) {\r\n                    address addr = largestQualified[largestTime][i];\r\n                    uint256 dayDeposits = users[addr].day_deposits;\r\n                    uint256 sharePercentage = dayDeposits.mul(100).div(largestQualifiedTotal);\r\n                    \r\n                    if (sharePercentage > 0) {\r\n                        for (uint256 j = 0; j < sharePercentage; j++) {\r\n                            ticketRewardContestants[id++] = addr;\r\n                        }\r\n                    }\r\n\r\n                    uint256 shareAmount = reward1.mul(dayDeposits).div(largestQualifiedTotal);\r\n                    users[addr].largest_winnings = users[addr].largest_winnings.add(shareAmount);\r\n                    \r\n                    largestDeposits[largestTime].push(dayDeposits);\r\n                    total_rewards = total_rewards.add(shareAmount);\r\n                }\r\n\r\n                if (id > 0) {\r\n                    uint256 randInt = _random(largestRewardTickets, id);\r\n\r\n                    for (uint256 i = 0; i < largestRewardTickets; i++) {\r\n                        address ticketWinner = ticketRewardContestants[_random(id, randInt**randInt)];\r\n                        largestTicketWinners[largestTime].push(ticketWinner);\r\n\r\n                        if (ticketWinner != address(0)) {\r\n                            _buyTickets(ticketWinner, 1);\r\n                            lotteryTickets[lotteryTime][ticketWinner][weekDay][0] = lotteryTickets[lotteryTime][ticketWinner][weekDay][0].add(1);\r\n                        }\r\n\r\n                        randInt++;\r\n                    }\r\n                }\r\n            }\r\n\r\n            uint256 prevLargestTime = largestTime;\r\n            largestTime = largestTime.add(largestTimeIncrement);\r\n\r\n            if (numQualified > 0 && !isMinRatio) {\r\n                \r\n                largestQualified[largestTime] = largestQualified[prevLargestTime];\r\n                delete largestQualified[prevLargestTime];\r\n                uint256 newDepositTime = prevLargestTime.add(1 seconds);\r\n\r\n                for (uint256 i = 0; i < numQualified && i < maxLargestWinners; i++) {\r\n                    \r\n                    users[largestQualified[largestTime][i]].deposit_time = newDepositTime;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (timestamp >= lotteryTime) {\r\n            uint256 reward2 = _getGlassBalancePool().mul(randomRewardBP).div(10000).div(numRandomWinners);\r\n            uint256 randInt = _random(numRandomWinners, ticketId);\r\n            uint256 maxWinners = ticketId > numRandomWinners ? numRandomWinners : ticketId;\r\n            \r\n            for (uint256 i = 0; i < maxWinners; i++) {\r\n                    \r\n                address receiver2 = ticketId > 0 ? lotteryContestants[lotteryId][_random(ticketId, randInt**randInt)] : address(0);\r\n                randInt++;\r\n\r\n                if (receiver2 != address(0)) {\r\n                        \r\n                    if (maxRandomWins < numRandomWinners) {\r\n                        uint256 numWins = 1;\r\n                        \r\n                        for (uint256 j = 0; j < i; j++) {\r\n                            if (randomWinners[lotteryTime][j] == receiver2) {\r\n                                numWins++;\r\n                            }\r\n                        }\r\n\r\n                        if (numWins > maxRandomWins) {\r\n                            i--;\r\n                            continue;\r\n                        }\r\n                    }\r\n\r\n                    users[receiver2].lottery_winnings = users[receiver2].lottery_winnings.add(reward2);\r\n                    total_rewards = total_rewards.add(reward2);\r\n                }\r\n                    \r\n                randomWinners[lotteryTime].push(receiver2);\r\n            }\r\n\r\n            rolloverDistributePoints = totalDistributePoints;\r\n            total_rewards = total_rewards.sub(unclaimedDistributeRewards);\r\n            unclaimedDistributeRewards = 0;\r\n            lastDripTime = timestamp;\r\n\r\n            ticketId = 0;\r\n            lotteryId++;\r\n            lotteryTime = lotteryTime.add(lotteryTimeIncrement);\r\n            weekDay = 0;\r\n        }\r\n    }\r\n\r\n    function _buyTickets(address to, uint256 numTix) internal {\r\n        for (uint256 i = 0; i < numTix; i++) {\r\n            lotteryContestants[lotteryId][ticketId++] = to;\r\n        }\r\n    }\r\n\r\n    function _deposit(\r\n        address _addr,\r\n        uint256 _amount,\r\n        address _referrer\r\n    ) internal {\r\n        require(depositEnabled, \"Disabled.\");\r\n        if (_referrer != address(0)) {\r\n            require(_referrer != _addr, \"Cannot refer self.\");\r\n            require(\r\n                users[_referrer].total_deposits > minReferrer,\r\n                \"Referrer has not depositted enough GLASS.\"\r\n            );\r\n        }\r\n        require(_amount >= 1 gwei, \"You must deposit a minimum of 1 GLASS.\");\r\n        require(\r\n            IBEP20(glass).balanceOf(_addr) >= _amount,\r\n            \"Insufficient GLASS balance.\"\r\n        );\r\n        require(\r\n            IBEP20(glass).allowance(_addr, address(this)) >= _amount,\r\n            \"Insufficient GLASS allowance.\"\r\n        );\r\n\r\n        /////////////////\r\n        _trySendReward();\r\n        /////////////////\r\n\r\n        if (users[_addr].deposit_time > 0) {\r\n\r\n            if (users[_addr].deposit_time < SafeMath.sub(largestTime, largestTimeIncrement)) {\r\n                if (users[_addr].day_deposits != 0)\r\n                    users[_addr].day_deposits = 0;\r\n                if (users[_addr].largest_qualified)\r\n                    users[_addr].largest_qualified = false;\r\n            }\r\n        } else {\r\n            userIndices.push(_addr); // New user\r\n            users[_addr].last_distPoints = totalDistributePoints;\r\n            total_users++;\r\n        }\r\n\r\n        uint256 minLargest = _getGlassBalancePool().mul(minLargestBPx10).div(100000);\r\n        uint256 balanceBefore = _getGlassBalance();\r\n        IBEP20(glass).transferFrom(_addr, address(this), _amount);\r\n\r\n        uint256 amountWithFee = _getGlassBalance().sub(balanceBefore);\r\n        amountWithFee = amountWithFee.mul(SafeMath.sub(100, depositFeePercent)).div(100);\r\n\r\n        users[_addr].referrer = _referrer;\r\n        users[_addr].deposit_time = block.timestamp;\r\n        users[_addr].total_deposits = users[_addr].total_deposits.add(amountWithFee);\r\n        users[_addr].day_deposits = users[_addr].day_deposits.add(amountWithFee);\r\n\r\n        total_deposited = total_deposited.add(amountWithFee);\r\n\r\n        if (_referrer != address(0)) {\r\n            users[_referrer].referral_rewards = users[_referrer].referral_rewards.add( // 3% (ref)\r\n                amountWithFee.mul(3).div(100)\r\n            );\r\n\r\n            total_rewards = total_rewards.add(amountWithFee.mul(3).div(100));\r\n        }\r\n\r\n        IBEP20(glass).transfer(dev, amountWithFee.mul(devFeePercent).div(100)); // 2% (dev)\r\n        _disperse(amountWithFee.mul(depositInstantRewardPercent).div(100)); // 8% (users)\r\n\r\n        if (users[_addr].day_deposits >= minLargest.mul(SafeMath.sub(100, depositFeePercent)).div(100)) {\r\n            \r\n            if (!users[_addr].largest_qualified) {\r\n                users[_addr].largest_qualified = true;\r\n                largestQualified[largestTime].push(_addr);\r\n            }\r\n        }\r\n        if (_amount >= ticketPrice) {\r\n\r\n            uint256 numTix = (_amount.add(1)).div(ticketPrice);\r\n            uint256 currentTix = lotteryTickets[lotteryTime][_addr][weekDay][0];\r\n\r\n            if (currentTix < maxTickets) {\r\n                if (numTix > maxTickets)\r\n                    numTix = maxTickets;\r\n                if (numTix.add(currentTix) > maxTickets)\r\n                    numTix = maxTickets.sub(currentTix);\r\n\r\n                _buyTickets(_addr, numTix);\r\n                lotteryTickets[lotteryTime][_addr][weekDay][0] = currentTix.add(numTix);\r\n            }\r\n        }\r\n\r\n        emit NewDeposit(_addr, _referrer, amountWithFee);\r\n    }\r\n\r\n    function deposit(uint256 amount) external {\r\n        _deposit(msg.sender, amount, address(0));\r\n    }\r\n\r\n    function deposit(uint256 amount, address referrer) external {\r\n        _deposit(msg.sender, amount, referrer);\r\n    }\r\n\r\n    function roll() public {\r\n        _roll(msg.sender);\r\n    }\r\n\r\n    function _roll(address _sender) public {\r\n        require(depositEnabled, \"Disabled.\");\r\n        require(claimEnabled, \"Disabled.\");\r\n\r\n        _dripRewards();\r\n\r\n        uint256 _rewards = getRewards(_sender);\r\n        require(_rewards > 0, \"No rewards.\");\r\n\r\n        unclaimedDistributeRewards = unclaimedDistributeRewards.sub(getDistributionRewards(_sender));\r\n\r\n        users[_sender].claim_time = block.timestamp;\r\n        users[_sender].total_withdraws = users[_sender].total_withdraws.add(_rewards);\r\n        users[_sender].total_withdraws_scaled = users[_sender].total_withdraws_scaled.add(_rewards.sub(users[_sender].largest_winnings).sub(users[_sender].lottery_winnings));\r\n        total_withdrawn = total_withdrawn.add(_rewards);\r\n\r\n        total_rewards = total_rewards.sub(_rewards);\r\n        users[_sender].referral_rewards = 0;\r\n        users[_sender].lottery_winnings = 0;\r\n        users[_sender].largest_winnings = 0;\r\n\r\n        users[_sender].last_distPoints = totalDistributePoints;\r\n\r\n        emit Withdraw(_sender, _rewards);\r\n\r\n        /////////////////\r\n        _trySendReward();\r\n        /////////////////\r\n            \r\n        if (users[_sender].deposit_time < SafeMath.sub(largestTime, largestTimeIncrement)) {\r\n            if (users[_sender].day_deposits != 0)\r\n                users[_sender].day_deposits = 0;\r\n            if (users[_sender].largest_qualified)\r\n                users[_sender].largest_qualified = false;\r\n        }\r\n\r\n        uint256 minLargest = _getGlassBalancePool().mul(minLargestBPx10).div(100000);\r\n        uint256 rewardsPostClaim = _rewards.mul(SafeMath.sub(100, claimFeePercent)).div(100);\r\n        _rewards = _rewards.mul(SafeMath.sub(100, compoundFeePercent)).div(100);\r\n\r\n        users[_sender].deposit_time = block.timestamp;\r\n        users[_sender].total_deposits = users[_sender].total_deposits.add(_rewards);\r\n        users[_sender].day_deposits = users[_sender].day_deposits.add(_rewards);\r\n\r\n        total_deposited = total_deposited.add(_rewards);\r\n\r\n        address referrer = users[_sender].referrer;\r\n        if (compoundReferralFee > 0 && referrer != address(0)) {\r\n            users[referrer].referral_rewards = users[referrer].referral_rewards.add( // 3% (ref)\r\n                _rewards.mul(compoundReferralFee).div(100)\r\n            );\r\n\r\n            total_rewards = total_rewards.add(_rewards.mul(3).div(100));\r\n        }\r\n\r\n        IBEP20(glass).transfer(dev, _rewards.mul(devFeePercent).div(100)); // 2% (dev)\r\n        _disperse(_rewards.mul(rollInstantRewardPercent).div(100)); // 8% (users)\r\n\r\n        if (users[_sender].day_deposits >= minLargest.mul(SafeMath.sub(100, depositFeePercent)).div(100)) {\r\n\r\n            if (!users[_sender].largest_qualified) {\r\n                users[_sender].largest_qualified = true;\r\n                largestQualified[largestTime].push(_sender);\r\n            }\r\n        }\r\n        if (rewardsPostClaim >= ticketPrice) {\r\n\r\n            uint256 numTix = (rewardsPostClaim.add(1)).div(ticketPrice);\r\n            uint256 currentTix = lotteryTickets[lotteryTime][_sender][weekDay][1];\r\n\r\n            if (currentTix < maxTickets) {\r\n                if (numTix > maxTickets)\r\n                    numTix = maxTickets;\r\n                if (numTix.add(currentTix) > maxTickets)\r\n                    numTix = maxTickets.sub(currentTix);\r\n\r\n                _buyTickets(_sender, numTix);\r\n                lotteryTickets[lotteryTime][_sender][weekDay][1] = currentTix.add(numTix);\r\n            }\r\n        }\r\n\r\n        emit NewDeposit(_sender, referrer, _rewards);\r\n    }\r\n    \r\n    function _disperse(uint256 amount) internal {\r\n        if (amount > 0 && total_deposited > 0) {\r\n            totalDistributePoints = totalDistributePoints.add(amount.mul(MULTIPLIER).div(total_deposited));\r\n            totalDistributeRewards = totalDistributeRewards.add(amount);\r\n            total_rewards = total_rewards.add(amount);\r\n            unclaimedDistributeRewards = unclaimedDistributeRewards.add(amount);\r\n        }\r\n    }\r\n\r\n    function getDistributionRewards(address account) public view returns (uint256) {\r\n        uint256 newDividendPoints;\r\n        if (users[account].last_distPoints >= rolloverDistributePoints) { // last_DistPoints updated today\r\n            newDividendPoints = totalDistributePoints.sub(users[account].last_distPoints);\r\n        } else {\r\n            newDividendPoints = totalDistributePoints.sub(rolloverDistributePoints);\r\n        }\r\n\r\n        uint256 factor = poolShareReductionFactor(account);\r\n        \r\n        if (factor > MULTIPLIER)\r\n            factor = MULTIPLIER;\r\n\r\n        uint256 distribute = users[account].total_deposits.mul(newDividendPoints).div(MULTIPLIER).mul(factor).div(MULTIPLIER);\r\n        return distribute > unclaimedDistributeRewards ? unclaimedDistributeRewards : distribute;\r\n    }\r\n\r\n    function poolShareReductionFactor(address account) public view returns (uint256) {\r\n        uint256 userWithdraws = users[account].total_withdraws_scaled.mul(SafeMath.sub(100, claimFeePercent)).div(100);\r\n        uint256 userDeposits = users[account].total_deposits.mul(SafeMath.add(100, depositFeePercent)).div(100);\r\n        \r\n        if (userWithdraws >= userDeposits) {\r\n            uint256 taperRatio = (userWithdraws.sub(userDeposits)).mul(MULTIPLIER).div(userDeposits).mul(8);\r\n            \r\n            if (taperRatio > MULTIPLIER.mul(975).div(1000))\r\n                return MULTIPLIER.div(100);\r\n            \r\n            taperRatio = SafeMath.sub(MULTIPLIER, taperRatio);\r\n\r\n            return taperRatio.mul(reductionWeigthPercent).div(100);\r\n        }\r\n\r\n        uint256 dcRatio = SafeMath.sub(MULTIPLIER, userWithdraws\r\n            .mul(MULTIPLIER)\r\n            .div(userDeposits));\r\n        \r\n        return ((((MULTIPLIER.sub(dcRatio)).mul(reductionWeigthPercent)).div(100)).add(dcRatio));\r\n    }\r\n\r\n    function getRewards(address _user) public view returns (uint256) {\r\n        return users[_user].referral_rewards.add(users[_user].lottery_winnings).add(users[_user].largest_winnings).add(getDistributionRewards(_user));\r\n    }\r\n    \r\n    function getTotalRewards(address _user) public view returns (uint256) {\r\n        return\r\n            users[_user].total_deposits > 0\r\n                ? getRewards(_user).add(\r\n                    _getRewardDrip()\r\n                        .mul(users[_user].total_deposits)\r\n                        .mul(poolShareReductionFactor(_user))\r\n                        .div(total_deposited)\r\n                        .div(MULTIPLIER)\r\n                )\r\n                : 0;\r\n    }\r\n\r\n    function claim() public {\r\n        require(claimEnabled, \"Disabled.\");\r\n        _dripRewards();\r\n\r\n        address _sender = msg.sender;\r\n        uint256 _rewards = getRewards(_sender);\r\n        require(_rewards > 0, \"No rewards.\");\r\n\r\n        unclaimedDistributeRewards = unclaimedDistributeRewards.sub(getDistributionRewards(_sender));\r\n\r\n        uint256 payout = _rewards;\r\n        uint256 lotteryWinnings = users[_sender].lottery_winnings;\r\n        \r\n        if (lotteryWinnings > 0) {\r\n            payout = payout.sub(lotteryWinnings);\r\n            lotteryWinnings = lotteryWinnings.mul(SafeMath.sub(100, winningsClaimFeePercent)).div(100);\r\n            payout = payout.add(lotteryWinnings);\r\n        }\r\n\r\n        users[_sender].claim_time = block.timestamp;\r\n        users[_sender].total_withdraws = users[_sender].total_withdraws.add(_rewards);\r\n        users[_sender].total_withdraws_scaled = users[_sender].total_withdraws_scaled.add(payout.sub(users[_sender].largest_winnings).sub(lotteryWinnings));\r\n        total_withdrawn = total_withdrawn.add(_rewards);\r\n\r\n        IBEP20(glass).transfer(_sender, payout.mul(SafeMath.sub(100, claimFeePercent)).div(100));\r\n        total_rewards = total_rewards.sub(_rewards);\r\n        users[_sender].referral_rewards = 0;\r\n        users[_sender].lottery_winnings = 0;\r\n        users[_sender].largest_winnings = 0;\r\n\r\n        users[_sender].last_distPoints = totalDistributePoints;\r\n\r\n        _trySendReward();\r\n\r\n        emit Withdraw(_sender, _rewards);\r\n    }\r\n\r\n    function dripRewards() external {\r\n        _dripRewards();\r\n    }\r\n\r\n    function _dripRewards() internal {\r\n        uint256 drip = _getRewardDrip();\r\n\r\n        if (drip > 0) {\r\n            _disperse(drip);\r\n            lastDripTime = block.timestamp;\r\n        }\r\n    }\r\n\r\n    function _getRewardDrip() internal view returns (uint256) {\r\n        if (lastDripTime < block.timestamp) {\r\n            uint256 poolBalance = _getGlassBalancePool();\r\n            uint256 secondsPassed = block.timestamp.sub(lastDripTime);\r\n            uint256 drip = secondsPassed.mul(poolBalance).div(dripRate);\r\n\r\n            if (drip > poolBalance) {\r\n                drip = poolBalance;\r\n            }\r\n\r\n            return drip;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getRewardDrip() external view returns (uint256) {\r\n        return _getRewardDrip();\r\n    }\r\n\r\n    function getDayDripEstimate(address _user) external view returns (uint256) {\r\n        return\r\n            users[_user].total_deposits > 0\r\n                ? _getGlassBalancePool()\r\n                    .mul(86400)\r\n                    .mul(users[_user].total_deposits)\r\n                    .mul(poolShareReductionFactor(_user))\r\n                    .div(total_deposited)\r\n                    .div(dripRate)\r\n                    .div(MULTIPLIER)\r\n                : 0;\r\n    }\r\n\r\n    function numTicketsTotal(address _addr) external view returns (uint256) {\r\n        uint256 totalTickets = 0;\r\n\r\n        for (uint256 i = 0; i < WEEKDAYS; i++) {\r\n            if (lotteryTickets[lotteryTime][_addr][i][0] != 0)\r\n                totalTickets = totalTickets.add(lotteryTickets[lotteryTime][_addr][i][0]);\r\n            if (lotteryTickets[lotteryTime][_addr][i][1] != 0)\r\n                totalTickets = totalTickets.add(lotteryTickets[lotteryTime][_addr][i][1]);\r\n        }\r\n\r\n        return totalTickets;\r\n    }\r\n    \r\n    function numTicketsDay(address _addr) external view returns (uint256) {\r\n        return lotteryTickets[lotteryTime][_addr][weekDay][0].add(lotteryTickets[lotteryTime][_addr][weekDay][1]);\r\n    }\r\n    \r\n    function numDepositTicketsRemaining(address _addr) external view returns (uint256) {\r\n        return maxTickets.sub(lotteryTickets[lotteryTime][_addr][weekDay][0]);\r\n    }\r\n    \r\n    function numRollTicketsRemaining(address _addr) external view returns (uint256) {\r\n        return maxTickets.sub(lotteryTickets[lotteryTime][_addr][weekDay][1]);\r\n    }\r\n\r\n    function isLargestQualified(address _addr) external view returns (bool) {\r\n        return users[_addr].deposit_time >= SafeMath.sub(largestTime, largestTimeIncrement) && users[_addr].largest_qualified;\r\n    }\r\n\r\n    function numLargestQualified(uint256 time) external view returns (uint256) {\r\n        return largestQualified[time].length;\r\n    }\r\n\r\n    function getLargestQualifiedTotal(uint256 time) public view returns (uint256) {\r\n        uint256 largestQualifiedTotal = 0;\r\n        if (time == largestTime) {\r\n            for (uint256 i = 0; i < largestQualified[time].length && i < maxLargestWinners; i++) {\r\n                largestQualifiedTotal = largestQualifiedTotal.add(users[largestQualified[time][i]].day_deposits);\r\n            }\r\n        } else {\r\n            for (uint256 i = 0; i < largestQualified[time].length && i < maxLargestWinners; i++) {\r\n                largestQualifiedTotal = largestQualifiedTotal.add(largestDeposits[time][i]);\r\n            }\r\n        }\r\n        return largestQualifiedTotal;\r\n    }\r\n\r\n    function getLargestDepositor() external view returns (address user, uint256 amount) {\r\n        address _user = address(0);\r\n        uint256 _amount = 0;\r\n        for (uint256 i = 0; i < largestQualified[largestTime].length; i++) {\r\n            \r\n            address qualified = largestQualified[largestTime][i];\r\n            \r\n            if (users[qualified].deposit_time >= largestTime.sub(largestTimeIncrement) && users[qualified].day_deposits > _amount) {\r\n                _amount = users[qualified].day_deposits;\r\n                _user = qualified;\r\n            }\r\n        }\r\n\r\n        return (_user, _amount);\r\n    }\r\n\r\n    function userInfo(address _addr)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 deposit_time,\r\n            uint256 referral_rewards,\r\n            uint256 lottery_winnings,\r\n            uint256 largest_winnings,\r\n            address referrer\r\n        )\r\n    {\r\n        return (\r\n            users[_addr].deposit_time,\r\n            users[_addr].referral_rewards,\r\n            users[_addr].lottery_winnings,\r\n            users[_addr].largest_winnings,\r\n            users[_addr].referrer\r\n        );\r\n    }\r\n\r\n    function userInfoTotals(address _addr)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 total_withdraws,\r\n            uint256 total_withdraws_scaled,\r\n            uint256 total_deposits,\r\n            uint256 last_distPoints,\r\n            uint256 day_deposits\r\n        )\r\n    {\r\n        return (\r\n            users[_addr].total_withdraws,\r\n            users[_addr].total_withdraws_scaled,\r\n            users[_addr].total_deposits,\r\n            users[_addr].last_distPoints,\r\n            users[_addr].day_deposits\r\n        );\r\n    }\r\n\r\n    function contractInfo()\r\n        external\r\n        view\r\n        returns (\r\n            uint256 _total_users,\r\n            uint256 _total_deposited,\r\n            uint256 _total_withdrawn,\r\n            uint256 _total_rewards,\r\n            uint256 _totalDistributeRewards\r\n        )\r\n    {\r\n        return (total_users, total_deposited, total_withdrawn, total_rewards, totalDistributeRewards);\r\n    }\r\n\r\n    function getGlassBalancePool() external view returns (uint256) {\r\n        return _getGlassBalancePool();\r\n    }\r\n\r\n    function _getGlassBalancePool() internal view returns (uint256) {\r\n        return _getGlassBalance().sub(total_rewards);\r\n    }\r\n\r\n    function _getGlassBalance() internal view returns (uint256) {\r\n        return IBEP20(glass).balanceOf(address(this));\r\n    }\r\n\r\n    function getGlassBalance() external view returns (uint256) {\r\n        return _getGlassBalance();\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_glass\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_largestTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lotteryTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dayTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DirectPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WEEKDAYS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"_roll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newDev\",\"type\":\"address\"}],\"name\":\"changeDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compoundFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compoundReferralFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_total_users\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_deposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_rewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDistributeRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dayTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dayTimeIncrement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositInstantRewardPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dripRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dripRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amnt\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getDayDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getDayDripEstimate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getDistributionRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGlassBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGlassBalancePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLargestDepositor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"getLargestQualifiedTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLargestRatioRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardDrip\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"glass\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isLargestQualified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"largestDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"largestQualified\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"largestRewardBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"largestRewardTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"largestTicketWinners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"largestTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"largestTimeIncrement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastDripTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"listLargestDeposits\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"listLargestQualified\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"listLargestTicketWinners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"listRandomWinners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lotteryContestants\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lotteryTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryTimeIncrement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLargestWinners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRandomWins\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_total_users\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_deposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_rewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastDripTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDistributeRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDistributePoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rolloverDistributePoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unclaimedDistributeRewards\",\"type\":\"uint256\"}],\"name\":\"migrateGlobals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addrs\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referral_rewards\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"largest_qualified\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"deposit_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claim_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_deposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_withdraws\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_withdraws_scaled\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"last_distPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lottery_winnings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"largest_winnings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"day_deposits\",\"type\":\"uint256\"}],\"internalType\":\"struct UltraStaking.User[]\",\"name\":\"_users\",\"type\":\"tuple[]\"}],\"name\":\"migrateUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLargestBPx10\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLargestRewardRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minReferrer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"numDepositTicketsRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"numLargestQualified\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numRandomWinners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"numRollTicketsRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"numTicketsDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"numTicketsTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"poolShareReductionFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_exlcusiveMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_randInt\",\"type\":\"uint256\"}],\"name\":\"random\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomRewardBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"randomWinners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reductionWeigthPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollInstantRewardPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rolloverDistributePoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setClaimEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setClaimFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setCompoundFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amnt\",\"type\":\"uint256\"}],\"name\":\"setCompoundReferralFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setDayTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"incrementSeconds\",\"type\":\"uint256\"}],\"name\":\"setDayTimeIncrement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setDepositEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setDepositFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setDepositInstantRewardPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setDevFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setDripRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"qualifiedLst\",\"type\":\"address[]\"}],\"name\":\"setLargestQualified\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bp\",\"type\":\"uint256\"}],\"name\":\"setLargestRewardBP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"setLargestRewardTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setLargestTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"incrementSeconds\",\"type\":\"uint256\"}],\"name\":\"setLargestTimeIncrement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setLotteryTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"incrementSeconds\",\"type\":\"uint256\"}],\"name\":\"setLotteryTimeIncrement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"setMaxLargestWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"setMaxRandomWins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amnt\",\"type\":\"uint256\"}],\"name\":\"setMaxTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bpx10\",\"type\":\"uint256\"}],\"name\":\"setMinLargest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"}],\"name\":\"setMinLargestRewardRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amnt\",\"type\":\"uint256\"}],\"name\":\"setMinReferrer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numWinners\",\"type\":\"uint256\"}],\"name\":\"setNumRandomWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bp\",\"type\":\"uint256\"}],\"name\":\"setRandomRewardBP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setReductionWeigthPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setRollInstantRewardPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amnt\",\"type\":\"uint256\"}],\"name\":\"setTicketPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referral_rewards\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"largest_qualified\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"deposit_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claim_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_deposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_withdraws\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_withdraws_scaled\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"last_distPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lottery_winnings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"largest_winnings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"day_deposits\",\"type\":\"uint256\"}],\"internalType\":\"struct UltraStaking.User\",\"name\":\"_user\",\"type\":\"tuple\"}],\"name\":\"setUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"setWeekDay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setwinningsClaimFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeToReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDistributePoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDistributeRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_deposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_withdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trySendReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unclaimedDistributeRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userIndices\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deposit_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referral_rewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lottery_winnings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"largest_winnings\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"userInfoTotals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total_withdraws\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_withdraws_scaled\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_deposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"last_distPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"day_deposits\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referral_rewards\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"largest_qualified\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"deposit_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claim_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_deposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_withdraws\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_withdraws_scaled\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"last_distPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lottery_winnings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"largest_winnings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"day_deposits\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weekDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winningsClaimFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "UltraStaking", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000dda8b8e973060215d1aee3839189cd42eaea82300000000000000000000000000000000000000000000000000000000063531660000000000000000000000000000000000000000000000000000000006355b9600000000000000000000000000000000000000000000000000000000063531660", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://174fca4fa083fa856a063398e89d7c82e2d908bd577ec8602e637e768fa4d541"}