{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IFactory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\nlibrary Address {\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n}\r\n\r\ncontract ALTFILAUNCHER is IERC20, Context, Ownable {\r\n    using Address for address payable;\r\n\r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => bool) private _isExcluded;\r\n    mapping(address => bool) public allowedTransfer;\r\n    mapping(address => bool) private _isBlacklisted;\r\n\r\n    address[] private _excluded;\r\n\r\n    bool private tradingEnabled = true;\r\n    bool private swapEnabled = true;\r\n    bool private swapping;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint256 private _tTotal;\r\n\r\n    mapping(address => uint256) private _lastSell;\r\n\r\n    uint256 private coolDownTime = 0 seconds;\r\n    bool private coolDownEnabled = false;\r\n\r\n    modifier antiBot(address account) {\r\n        require(\r\n            tradingEnabled || allowedTransfer[account],\r\n            \"Trading not enabled yet\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    IRouter public router;\r\n    address public pair;\r\n\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant MAX = ~uint256(0);\r\n\r\n    uint256 private _rTotal;\r\n\r\n    uint256 private genesis_block;\r\n\r\n    uint256 public Max_Buy_Size;\r\n    uint256 public Max_Sell_Size;\r\n    uint256 public Max_Wallet_Size;\r\n    uint256 public swapTokensAtAmount;\r\n\r\n    address public Marketing_Wallet;\r\n    \r\n    // 1% of tax goes to AltFi Chart and Development.\r\n    address private AltFi_Launcher =\r\n        0x04d82839211EFfC9C7a395b165FbDEb0eF664aE8;\r\n\r\n    struct Taxes {\r\n        uint256 rfi;\r\n        uint256 marketing;\r\n        uint256 liquidity;\r\n        uint256 team;\r\n    }\r\n\r\n    Taxes private sellTaxes = Taxes(0, 4, 1, 1);\r\n    Taxes private taxes = Taxes(0, 4, 1, 1);\r\n\r\n    struct TotFeesPaidStruct {\r\n        uint256 rfi;\r\n        uint256 marketing;\r\n        uint256 liquidity;\r\n        uint256 team;\r\n    }\r\n\r\n    TotFeesPaidStruct private totFeesPaid;\r\n\r\n    struct valuesFromGetValues {\r\n        uint256 rAmount;\r\n        uint256 rTransferAmount;\r\n        uint256 rRfi;\r\n        uint256 rMarketing;\r\n        uint256 rLiquidity;\r\n        uint256 rTeam;\r\n        uint256 tTransferAmount;\r\n        uint256 tRfi;\r\n        uint256 tMarketing;\r\n        uint256 tLiquidity;\r\n        uint256 tTeam;\r\n    }\r\n\r\n    event FeesChanged();\r\n    event UpdatedRouter(address oldRouter, address newRouter);\r\n\r\n    modifier lockTheSwap() {\r\n        swapping = true;\r\n        _;\r\n        swapping = false;\r\n    }\r\n\r\n    constructor(\r\n        uint256 userinput_totalsupply,\r\n        string memory userinput_token_name,\r\n        string memory userinput_token_symbol,\r\n        uint256 userinput_swaptokenatamount,\r\n        uint256 userinput_max_buy,\r\n        uint256 userinput_max_sell,\r\n        uint256 userinput_walletMax,\r\n        address user_input_marketingwallet\r\n    ) {\r\n        _name = userinput_token_name;\r\n        _symbol = userinput_token_symbol;\r\n        _tTotal = userinput_totalsupply * 10**9;\r\n        Max_Buy_Size = userinput_max_buy * 10**9;\r\n        Max_Sell_Size = userinput_max_sell * 10**9;\r\n        Max_Wallet_Size = userinput_walletMax * 10**9;\r\n        swapTokensAtAmount = userinput_swaptokenatamount * 10**9;\r\n        Marketing_Wallet = user_input_marketingwallet;\r\n        _rTotal = (MAX - (MAX % _tTotal));\r\n\r\n        IRouter _router = IRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        address _pair = IFactory(_router.factory()).createPair(\r\n            address(this),\r\n            _router.WETH()\r\n        );\r\n\r\n        router = _router;\r\n        pair = _pair;\r\n\r\n        excludeFromReward(pair);\r\n\r\n        _rOwned[owner()] = _rTotal;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[Marketing_Wallet] = true;\r\n        _isExcludedFromFee[AltFi_Launcher] = true;\r\n\r\n        allowedTransfer[address(this)] = true;\r\n        allowedTransfer[owner()] = true;\r\n        allowedTransfer[pair] = true;\r\n        allowedTransfer[Marketing_Wallet] = true;\r\n        allowedTransfer[AltFi_Launcher] = true;\r\n\r\n        emit Transfer(address(0), owner(), _tTotal);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        antiBot(msg.sender)\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override antiBot(sender) returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(\r\n            currentAllowance >= amount,\r\n            \"ERC20: transfer amount exceeds allowance\"\r\n        );\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        antiBot(msg.sender)\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender] + addedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        antiBot(msg.sender)\r\n        returns (bool)\r\n    {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        antiBot(msg.sender)\r\n        returns (bool)\r\n    {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function isExcludedFromReward(address account) private view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferRfi)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n        if (!deductTransferRfi) {\r\n            valuesFromGetValues memory s = _getValues(tAmount, true, false);\r\n            return s.rAmount;\r\n        } else {\r\n            valuesFromGetValues memory s = _getValues(tAmount, true, false);\r\n            return s.rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            rAmount <= _rTotal,\r\n            \"Amount must be less than total reflections\"\r\n        );\r\n        uint256 currentRate = _getRate();\r\n        return rAmount / currentRate;\r\n    }\r\n\r\n    function excludeFromReward(address account) private onlyOwner {\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n        if (_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    function includeInReward(address account) external onlyOwner {\r\n        require(_isExcluded[account], \"Account is not excluded\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n\r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function setBuyTaxes(uint256 _marketing, uint256 _liquidity)\r\n        public\r\n        onlyOwner\r\n    {\r\n        taxes = Taxes(0, _marketing, _liquidity, 1);\r\n        emit FeesChanged();\r\n    }\r\n\r\n    function setSellTaxes(uint256 _marketing, uint256 _liquidity)\r\n        public\r\n        onlyOwner\r\n    {\r\n        sellTaxes = Taxes(0, _marketing, _liquidity, 1);\r\n        emit FeesChanged();\r\n    }\r\n\r\n    function _reflectRfi(uint256 rRfi, uint256 tRfi) private {\r\n        _rTotal -= rRfi;\r\n        totFeesPaid.rfi += tRfi;\r\n    }\r\n\r\n    function _takeLiquidity(uint256 rLiquidity, uint256 tLiquidity) private {\r\n        totFeesPaid.liquidity += tLiquidity;\r\n\r\n        if (_isExcluded[address(this)]) {\r\n            _tOwned[address(this)] += tLiquidity;\r\n        }\r\n        _rOwned[address(this)] += rLiquidity;\r\n    }\r\n\r\n    function _takeMarketing(uint256 rMarketing, uint256 tMarketing) private {\r\n        totFeesPaid.marketing += tMarketing;\r\n\r\n        if (_isExcluded[address(this)]) {\r\n            _tOwned[address(this)] += tMarketing;\r\n        }\r\n        _rOwned[address(this)] += rMarketing;\r\n    }\r\n\r\n    function _takeTeam(uint256 rTeam, uint256 tTeam) private {\r\n        totFeesPaid.team += tTeam;\r\n\r\n        if (_isExcluded[address(this)]) {\r\n            _tOwned[address(this)] += tTeam;\r\n        }\r\n        _rOwned[address(this)] += rTeam;\r\n    }\r\n\r\n    function _getValues(\r\n        uint256 tAmount,\r\n        bool takeFee,\r\n        bool isSell\r\n    ) private view returns (valuesFromGetValues memory to_return) {\r\n        to_return = _getTValues(tAmount, takeFee, isSell);\r\n        (\r\n            to_return.rAmount,\r\n            to_return.rTransferAmount,\r\n            to_return.rRfi,\r\n            to_return.rMarketing,\r\n            to_return.rLiquidity\r\n        ) = _getRValues1(to_return, tAmount, takeFee, _getRate());\r\n        (to_return.rTeam) = _getRValues2(to_return, takeFee, _getRate());\r\n        return to_return;\r\n    }\r\n\r\n    function _getTValues(\r\n        uint256 tAmount,\r\n        bool takeFee,\r\n        bool isSell\r\n    ) private view returns (valuesFromGetValues memory s) {\r\n        if (!takeFee) {\r\n            s.tTransferAmount = tAmount;\r\n            return s;\r\n        }\r\n        Taxes memory temp;\r\n        if (isSell) temp = sellTaxes;\r\n        else temp = taxes;\r\n\r\n        s.tRfi = (tAmount * temp.rfi) / 100;\r\n        s.tMarketing = (tAmount * temp.marketing) / 100;\r\n        s.tLiquidity = (tAmount * temp.liquidity) / 100;\r\n        s.tTeam = (tAmount * temp.team) / 100;\r\n        s.tTransferAmount =\r\n            tAmount -\r\n            s.tRfi -\r\n            s.tMarketing -\r\n            s.tLiquidity -\r\n            s.tTeam;\r\n        return s;\r\n    }\r\n\r\n    function _getRValues1(\r\n        valuesFromGetValues memory s,\r\n        uint256 tAmount,\r\n        bool takeFee,\r\n        uint256 currentRate\r\n    )\r\n        private\r\n        pure\r\n        returns (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rRfi,\r\n            uint256 rMarketing,\r\n            uint256 rLiquidity\r\n        )\r\n    {\r\n        rAmount = tAmount * currentRate;\r\n\r\n        if (!takeFee) {\r\n            return (rAmount, rAmount, 0, 0, 0);\r\n        }\r\n\r\n        rRfi = s.tRfi * currentRate;\r\n        rMarketing = s.tMarketing * currentRate;\r\n        rLiquidity = s.tLiquidity * currentRate;\r\n        uint256 rTeam = s.tTeam * currentRate;\r\n        rTransferAmount = rAmount - rRfi - rMarketing - rLiquidity - rTeam;\r\n        return (rAmount, rTransferAmount, rRfi, rMarketing, rLiquidity);\r\n    }\r\n\r\n    function _getRValues2(\r\n        valuesFromGetValues memory s,\r\n        bool takeFee,\r\n        uint256 currentRate\r\n    ) private pure returns (uint256 rTeam) {\r\n        if (!takeFee) {\r\n            return (0);\r\n        }\r\n\r\n        rTeam = s.tTeam * currentRate;\r\n        return (rTeam);\r\n    }\r\n\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply / tSupply;\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (\r\n                _rOwned[_excluded[i]] > rSupply ||\r\n                _tOwned[_excluded[i]] > tSupply\r\n            ) return (_rTotal, _tTotal);\r\n            rSupply = rSupply - _rOwned[_excluded[i]];\r\n            tSupply = tSupply - _tOwned[_excluded[i]];\r\n        }\r\n        if (rSupply < _rTotal / _tTotal) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(\r\n            amount <= balanceOf(from),\r\n            \"You are trying to transfer more than your balance\"\r\n        );\r\n        require(!_isBlacklisted[from] && !_isBlacklisted[to], \"You are a bot\");\r\n\r\n        if (!_isExcludedFromFee[from] && !_isExcludedFromFee[to]) {\r\n            require(tradingEnabled, \"Trading not active\");\r\n        }\r\n\r\n        if (\r\n            !_isExcludedFromFee[from] &&\r\n            !_isExcludedFromFee[to] &&\r\n            block.number <= genesis_block + 3\r\n        ) {\r\n            require(to != pair, \"Sells not allowed for first 3 blocks\");\r\n        }\r\n\r\n        if (from == pair && !_isExcludedFromFee[to] && !swapping) {\r\n            require(amount <= Max_Buy_Size, \"You are exceeding Max_Buy_Size\");\r\n            require(\r\n                balanceOf(to) + amount <= Max_Wallet_Size,\r\n                \"You are exceeding Max_Wallet_Size\"\r\n            );\r\n        }\r\n\r\n        if (\r\n            from != pair &&\r\n            !_isExcludedFromFee[to] &&\r\n            !_isExcludedFromFee[from] &&\r\n            !swapping\r\n        ) {\r\n            require(\r\n                amount <= Max_Sell_Size,\r\n                \"You are exceeding Max_Sell_Size\"\r\n            );\r\n            if (to != pair) {\r\n                require(\r\n                    balanceOf(to) + amount <= Max_Wallet_Size,\r\n                    \"You are exceeding Max_Wallet_Size\"\r\n                );\r\n            }\r\n            if (coolDownEnabled) {\r\n                uint256 timePassed = block.timestamp - _lastSell[from];\r\n                require(timePassed >= coolDownTime, \"Cooldown enabled\");\r\n                _lastSell[from] = block.timestamp;\r\n            }\r\n        }\r\n\r\n        if (balanceOf(from) - amount <= 10 * 10**decimals())\r\n            amount -= (10 * 10**decimals() + amount - balanceOf(from));\r\n\r\n        bool canSwap = balanceOf(address(this)) >= swapTokensAtAmount;\r\n        if (\r\n            !swapping &&\r\n            swapEnabled &&\r\n            canSwap &&\r\n            from != pair &&\r\n            !_isExcludedFromFee[from] &&\r\n            !_isExcludedFromFee[to]\r\n        ) {\r\n            if (to == pair) swapAndLiquify(swapTokensAtAmount, sellTaxes);\r\n            else swapAndLiquify(swapTokensAtAmount, taxes);\r\n        }\r\n        bool takeFee = true;\r\n        bool isSell = false;\r\n        if (swapping || _isExcludedFromFee[from] || _isExcludedFromFee[to])\r\n            takeFee = false;\r\n        if (to == pair) isSell = true;\r\n\r\n        _tokenTransfer(from, to, amount, takeFee, isSell);\r\n    }\r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee,\r\n        bool isSell\r\n    ) private {\r\n        valuesFromGetValues memory s = _getValues(tAmount, takeFee, isSell);\r\n\r\n        if (_isExcluded[sender]) {\r\n            //from excluded\r\n            _tOwned[sender] = _tOwned[sender] - tAmount;\r\n        }\r\n        if (_isExcluded[recipient]) {\r\n            //to excluded\r\n            _tOwned[recipient] = _tOwned[recipient] + s.tTransferAmount;\r\n        }\r\n\r\n        _rOwned[sender] = _rOwned[sender] - s.rAmount;\r\n        _rOwned[recipient] = _rOwned[recipient] + s.rTransferAmount;\r\n\r\n        if (s.rRfi > 0 || s.tRfi > 0) _reflectRfi(s.rRfi, s.tRfi);\r\n        if (s.rLiquidity > 0 || s.tLiquidity > 0) {\r\n            _takeLiquidity(s.rLiquidity, s.tLiquidity);\r\n            emit Transfer(\r\n                sender,\r\n                address(this),\r\n                s.tLiquidity + s.tMarketing + s.tTeam\r\n            );\r\n        }\r\n        if (s.rMarketing > 0 || s.tMarketing > 0)\r\n            _takeMarketing(s.rMarketing, s.tMarketing);\r\n        if (s.rTeam > 0 || s.tTeam > 0) _takeTeam(s.rTeam, s.tTeam);\r\n        emit Transfer(sender, recipient, s.tTransferAmount);\r\n    }\r\n\r\n    function swapAndLiquify(uint256 contractBalance, Taxes memory temp)\r\n        private\r\n        lockTheSwap\r\n    {\r\n        uint256 denominator = (temp.liquidity + temp.marketing + temp.team) * 2;\r\n        uint256 tokensToAddLiquidityWith = (contractBalance * temp.liquidity) /\r\n            denominator;\r\n        uint256 toSwap = contractBalance - tokensToAddLiquidityWith;\r\n\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        swapTokensForBNB(toSwap);\r\n\r\n        uint256 deltaBalance = address(this).balance - initialBalance;\r\n        uint256 unitBalance = deltaBalance / (denominator - temp.liquidity);\r\n        uint256 bnbToAddLiquidityWith = unitBalance * temp.liquidity;\r\n\r\n        if (bnbToAddLiquidityWith > 0) {\r\n            // Add liquidity to pancake\r\n            addLiquidity(tokensToAddLiquidityWith, bnbToAddLiquidityWith);\r\n        }\r\n\r\n        uint256 marketingAmt = unitBalance * 2 * temp.marketing;\r\n        if (marketingAmt > 0) {\r\n            payable(Marketing_Wallet).sendValue(marketingAmt);\r\n        }\r\n        uint256 teamAmt = unitBalance * 2 * temp.team;\r\n        if (teamAmt > 0) {\r\n            payable(AltFi_Launcher).sendValue(teamAmt);\r\n        }\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 bnbAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        router.addLiquidityETH{value: bnbAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapTokensForBNB(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        _approve(address(this), address(router), tokenAmount);\r\n\r\n        // make the swap\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function bulkExcludeFee(address[] memory accounts, bool state)\r\n        external\r\n        onlyOwner\r\n    {\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            _isExcludedFromFee[accounts[i]] = state;\r\n        }\r\n    }\r\n\r\n    function __Update_MarketingWallet(address newWallet) external onlyOwner {\r\n        Marketing_Wallet = newWallet;\r\n    }\r\n\r\n    function updateSwapTokensAtAmount(uint256 amount) external onlyOwner {\r\n        swapTokensAtAmount = amount * 10**_decimals;\r\n    }\r\n\r\n    function updateAllowedTransfer(address account, bool state)\r\n        external\r\n        onlyOwner\r\n    {\r\n        allowedTransfer[account] = state;\r\n    }\r\n\r\n    function updateMaxTxLimit(uint256 maxBuy, uint256 maxSell)\r\n        external\r\n        onlyOwner\r\n    {\r\n        Max_Buy_Size = maxBuy * 10**decimals();\r\n        Max_Sell_Size = maxSell * 10**decimals();\r\n    }\r\n\r\n    function update_Max_Wallet_Size(uint256 amount) external onlyOwner {\r\n        Max_Wallet_Size = amount * 10**decimals();\r\n    }\r\n\r\n    function updateRouterAndPair(address newRouter, address newPair)\r\n        external\r\n        onlyOwner\r\n    {\r\n        router = IRouter(newRouter);\r\n        pair = newPair;\r\n    }\r\n\r\n    //Use this in case BNB are sent to the contract by mistake\r\n    function rescueBNB(uint256 weiAmount) external onlyOwner {\r\n        require(address(this).balance >= weiAmount, \"insufficient BNB balance\");\r\n        payable(msg.sender).transfer(weiAmount);\r\n    }\r\n\r\n    function rescueAnyBEP20Tokens(\r\n        address _tokenAddr,\r\n        address _to,\r\n        uint256 _amount\r\n    ) public onlyOwner {\r\n        IERC20(_tokenAddr).transfer(_to, _amount);\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userinput_totalsupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"userinput_token_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"userinput_token_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"userinput_swaptokenatamount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userinput_max_buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userinput_max_sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userinput_walletMax\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user_input_marketingwallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FeesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"UpdatedRouter\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Marketing_Wallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Max_Buy_Size\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Max_Sell_Size\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Max_Wallet_Size\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"__Update_MarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"bulkExcludeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rescueAnyBEP20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"rescueBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"}],\"name\":\"setBuyTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"}],\"name\":\"setSellTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"updateAllowedTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSell\",\"type\":\"uint256\"}],\"name\":\"updateMaxTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newPair\",\"type\":\"address\"}],\"name\":\"updateRouterAndPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"update_Max_Wallet_Size\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ALTFILAUNCHER", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000989680000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000004e200000000000000000000000000000000000000000000000000000000000030d400000000000000000000000000000000000000000000000000000000000030d400000000000000000000000000000000000000000000000000000000000030d4000000000000000000000000004d82839211effc9c7a395b165fbdeb0ef664ae80000000000000000000000000000000000000000000000000000000000000002544500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025445000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://21773750a879b11079ef6e69522c6a63da96a127baec963c0aa29fce006f68f2"}