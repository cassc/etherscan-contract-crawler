{"SourceCode": "//                                                                        .:.     .::...                                                          \r\n//                                                                      .-:    .:----:.                                                          \r\n//                                      .-=+++==-:.                    .-.    .----:              .:-=+++=-.                                     \r\n//                                     -**#******#*+=-.               .:.   .:----.          .....-===+**#*#-                                    \r\n//                                    :#**=:::::::-+*+:              .:.   .:---:.      .:::-----::-:::::-**#:                                   \r\n//                                    *#*:.-======: .               .:. . .----:.    .::---::...     .-==.:*##.                                  \r\n//                                   =#*-.====+==:.                 :.  ..----:    .:--::..            .-=.-*#=                                  \r\n//                                  .*#+ -==+=-.                   :.    :---:.  .:--:.          ....:::.:- +##.                                 \r\n//                                  :##-.===-.                    .:    :----. .:-:.        ..:::-------:::.:*%-                                 \r\n//                                  =%*.:=:.                      .. . .----: .--.       ..:--------::..    .*%=                                 \r\n//                                  :**.:.          ......        .    :-:-:.:-:       .::--::::-::.        .+#+                                 \r\n//                                 ...-          .:=+****+++++=====----==-----:......:-========-:.    .      -%*                                 \r\n//                                  .         .:=************************************************+=-.         #*                                 \r\n//                                          :=*******************************************************+:.    . =*                                 \r\n//                                        :+************************************************************-.    .-                                 \r\n//                                       -****************************************************************-                                      \r\n//                                      .*****************************************************************#-                                     \r\n//                                      -*****************#@@@@%********************#%@@@#******************                                     \r\n//                                      =******************@@@@@@#****************#@@@@@@#******************-                                    \r\n//                                      +*******************#%@@@#****************#@@@%#*********************+:                                  \r\n//                                     -******************:.  :+**********************=. ..-******************+                                  \r\n//                                  :=+******************:  .*- +********************- ++   -******************:                                 \r\n//                                  +********************.. :@% .*******************+ :@#.. :******************+.                                \r\n//                                 *@%#******************-   .. .*******************+  ..   +****************#%@*                                \r\n//                                -@@@@@#*****************-.   .+**+=-:-=====:-=+****-.   .+***************#@@@@@-                               \r\n//                                #@@@@@@%******************==+#%%=    -=++=-    =%###*==+****************%@@@@@@%                               \r\n//                               :@@@@@@@@@#***************#%@@@@@=  ..      ..  =@@@@@%#***************#@@@@@@@@@:                              \r\n//                               -@@@@@@@@@@%##********##%@@@@@@@@@+:    ..    .+@@@@@@@@@%##********##%@@@@@@@@@@-                              \r\n//                               -@@@@@@@@@@@@@@@@@@@@@@@%-@@@@@@@@@@#+=.  .=+#@@@@@@@@@@-%@@@@@@@@@@@@@@@@@@@@@@@-                              \r\n//                               :@@@@@@@@@@@@@@@@@@@@@@@@-.*@@@@@@@@@%+.  .+%@@@@@@@@@#.-@@@@@@@@@@@@@@@@@@@@@@@@:                              \r\n//                                *@@@@@@@@@@@@@@@@@@@@@@@@+::-++**+=:        :=+***+=::+@@@@@@@@@@@@@@@@@@@@@@@@#                               \r\n//                                :@@@@@@@@@@@@@@@@@@@@@@@@@@=                        =@@@@@@@@@@@@@@@@@@@@@@@@@@:                               \r\n//                                 -@@@@@@@@@@@@@@@@@@@@@@@@@@: ..   ..::::::..   .. :%@@@@@@@@@@@@@@@@@@@@@@@@@=                                \r\n//                                  -%@@@@@@@@@@@@@@@@@@@@@@@@#. ..:=++++++++++=:.   #@@@@@@@@@@@@@@@@@@@@@@@@@-                                 \r\n//                                   .*@@@@@@@@@@@@@@@@@@@@@@@@#. =++++++++++++++=  *@@@@@@@@@@@@@@@@@@@@@@@@#:                                  \r\n//                                     -#@@@@@@@@@@@@@@@@@@@@@@@%: :=+++++++++++- :#@@@@@@@@@@@@@@@@@@@@@@@#-                                    \r\n//                                       -*%@@@@@@@@@@@@@@@@@@@@@@+. :-==++==-:..+@@@@@@@@@@@@@@@@@@@@@@%*-                                      \r\n//                                         .=*%@@@@@@@@@@@@@@@@@@@@@*=:......:=*@@@@@@@@@@@@@@@@@@@@@%*=.                                        \r\n//                                            .-+#%@@@@@@@@@@@@@@@@@@@@@%%%%@@@@@@@@@@@@@@@@@@@@@%#+-.                                           \r\n//                                                .:=+#%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%#+=-.                                               \r\n//                                                    ..::-=+**##%%%@@@@@@@@@@@@%%%%#**+=-::....                                                 \r\n//                                                    .---:::......:::::::::::::........::--==-.                                                 \r\n//                                                      .-=========-=***********+-==========-.                                                   \r\n//                                                        .-=======-*###########*-========-.                                                     \r\n//                                                           :-====-+###########*-====--:                                                        \r\n//                                                               .::+###########*=-:.                                                            \r\n//                                                             .-*%%*###########*%@#+-.                                                          \r\n//                                                          .=#@@@@@@%%%%%%%%%%%@@@@@@@#=.                                                       \r\n//                                                        .*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@+.                                                     \r\n//                                                       +@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@=                                                    \r\n//                                                     .%@@@@@@@@@@%%+-=----=+#%@@@@@@@@@@@@@#.                                                  \r\n//                                                    :@@@@@@@@@@#=::.:....:...::#@@@@@@@@@@@@%.                                                 \r\n//                                                   .%@@@@@@@@@+...:::::........:--*@@@@@@@@@@%                                                 \r\n//                                                   #@@@@@@@@%-...+#########**:..:::%@@@@@@@@@@*                                                \r\n//                                                  :@@@@@@@@@%-..*%%%%%%%%%%%%#:.:.-@@@@@@@@@@@@.                                               \r\n//                                                  +@@@@@@@@@@+ -%%%%%%%%%%%%%%-.. =@@@@@@@@@@@@=                                               \r\n//                                                  *@@@@@@@@@@%.+####%%%%#####%*-..%@@@@@@@@@@@@+                                               \r\n//                                                  +@@@@@@@@@@@-+#*++##%#*++*#%#=.=@@@@@@@@@@@@@=                                               \r\n//                                                  -@@@@@@@@@@@==%#**########%%#-=*%@@@@@@@@@@@@:                                               \r\n//                                                   %@@@@@@@@@@%+%%%%##%##%%%%%#++#@@@@@@@@@@@@#                                                \r\n//                                                   :@@@@@@@@@@@##%%%#######%%%#**@@@@@@@@@@@@@.                                                \r\n//                                                    -@@@@@@@@@@#*%%##########%#=@@@@@@@@@@@@@-                                                 \r\n//                                                     -@@@@@@@@@@*#%#*****#%%%#++#@@@@@@@@@@%:                                                  \r\n//                                                      .#@@@@@@@@@**%%%%%%%%#*+##=-#@@@@@@@*.                                                   \r\n//                                                        -#@@@@%#+:++**##**++*##*#..-+#%@#:                                                     \r\n//                                                          :=-:.. :@+*****##%%##@#.:.....                                                       \r\n//                                                              ...-##*##%%%%#*#%@+ ..                                                           \r\n//                                                                 .=*##+#%%**%*=-.      \r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.10;\r\n\r\ninterface IBEP20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner can't be the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function geUnlockTime() public view returns (uint256) {\r\n        return _lockTime;\r\n    }\r\n\r\n    function lock(uint256 time) public virtual onlyOwner {\r\n        _previousOwner = _owner;\r\n        _owner = address(0);\r\n        _lockTime = block.timestamp + time;\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n\r\n    function unlock() public virtual {\r\n        require(_previousOwner == msg.sender, \"You don't have permission to unlock\");\r\n        require(block.timestamp > _lockTime , \"It's too early to unlock\");\r\n        emit OwnershipTransferred(_owner, _previousOwner);\r\n        _owner = _previousOwner;\r\n    }\r\n}\r\n\r\ninterface IPancakeswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IPancakeswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IPancakeswapV2Router02 is IPancakeswapV2Router01 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface LockerUnit{\r\n    function withdraw(address token, address recipient) external;\r\n}\r\n\r\n\r\ncontract DogeManiaToken is Context, IBEP20, Ownable {\r\n    string public constant name = \"DogeMania\";\r\n    string public constant symbol = \"DOGEMania\";\r\n    string public WebSite;\r\n    string public Telegram;\r\n    string public Twitter;\r\n    string public Instagram;\r\n    uint8 public constant decimals = 9;\r\n\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _rOwned;\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => mapping (address => uint256)) public lockerUnitsTimer;\r\n    mapping (address => address) public lockerUnitsTokens;\r\n\r\n    mapping (address => bool) public isExcludedFromFee;\r\n    mapping (address => bool) public isExcludedFromReward;\r\n    address[] private _excluded;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private constant _tTotal = 420 * 10**9 * 10**9;\r\n    uint256 private constant numTokensSellToAddToLiquidity = 420 * 10**9;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n\r\n    struct TData {\r\n        uint8 _taxFee;\r\n        uint8 _liquidityFee;\r\n        uint8 _charityFee;\r\n    }\r\n    TData public Fees = TData(5,3,2);\r\n    struct FeesVaules {\r\n        uint256 rAmount;\r\n        uint256 rTransferAmount;\r\n        uint256 rFee;\r\n        uint256 rCharity;\r\n    }\r\n\r\n    address payable public marketingAddress;\r\n    address payable public charityWallet;\r\n    address public constant deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n    IPancakeswapV2Router02 public immutable pancakeswapV2Router;\r\n    address public immutable pancakeswapV2Pair;\r\n    bool inSwapAndLiquify;\r\n    bytes LockerUnitCode;\r\n\r\n    event Burn(address indexed from, uint256 value);\r\n    event NewLockDeployed(address lockerUnit, address token, address lockerOwner, uint256 unitreleaseTimestamp, uint256 amount);\r\n    event SuccessfullUnlock(address lockerUnit, address token);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n\r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    constructor (address _Router, address _marketingAddress, address _charityWallet, string memory _webSite, string memory _telegram, string memory _twitter, string memory _instagram) {\r\n        _rOwned[_msgSender()] = _rTotal;\r\n        IPancakeswapV2Router02 _pancakeswapV2Router = IPancakeswapV2Router02(_Router);\r\n        \r\n        marketingAddress = payable(_marketingAddress);\r\n        charityWallet = payable(_charityWallet);\r\n        \r\n        pancakeswapV2Pair = IPancakeswapV2Factory(_pancakeswapV2Router.factory()).createPair(address(this), _pancakeswapV2Router.WETH());\r\n\r\n        pancakeswapV2Router = _pancakeswapV2Router;\r\n        WebSite = _webSite;\r\n        Telegram = _telegram;\r\n        Twitter = _twitter;\r\n        Instagram = _instagram;\r\n        isExcludedFromFee[owner()] = true;\r\n        isExcludedFromFee[address(this)] = true;\r\n        isExcludedFromReward[deadAddress] = true;\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal.sub(balanceOf(deadAddress));\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (isExcludedFromReward[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\"));\r\n        // 4:20\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function totalFees() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n        (uint256 rAmount, uint256 rTransferAmount,,,,) = _getValues(tAmount);\r\n        if (!deductTransferFee) {\r\n            return rAmount;\r\n        } else {\r\n            return rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate =  _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function excludeFromReward(address account) public onlyOwner() {\r\n        require(!isExcludedFromReward[account], \"Account is already excluded\");\r\n        if(_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        isExcludedFromReward[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    function includeInReward(address account) external onlyOwner() {\r\n        require(isExcludedFromReward[account], \"Account doesn't excluded\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tOwned[account] = 0;\r\n                isExcludedFromReward[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        isExcludedFromFee[account] = true;\r\n    }\r\n\r\n    function includeInFee(address account) public onlyOwner {\r\n        isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n    }\r\n    \r\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\r\n        FeesVaules memory rFees;\r\n        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTValues(tAmount);\r\n        (rFees.rAmount, rFees.rTransferAmount, rFees.rFee) = _getRValues(tAmount, tFee, tLiquidity, _getRate());\r\n        return (rFees.rAmount, rFees.rTransferAmount, rFees.rFee, tTransferAmount, tFee, tLiquidity);\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256) {\r\n        uint256 tFee = calculateTaxFee(tAmount);\r\n        uint256 tLiquidity = calculateLiquidityFee(tAmount);\r\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity);\r\n        return (tTransferAmount, tFee, tLiquidity);\r\n    }\r\n\r\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity);\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n    function _getRate() private view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\r\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\r\n        }\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function _takeLiquidity(uint256 tLiquidity) private {\r\n        uint256 currentRate =  _getRate();\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\r\n        if(isExcludedFromReward[address(this)])\r\n            _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\r\n    }\r\n\r\n    function calculateTaxFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(Fees._taxFee).div(100);\r\n    }\r\n\r\n    function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(Fees._liquidityFee).div(100);\r\n    }\r\n    \r\n    function removeAllFee() private {\r\n        if(Fees._taxFee == 0 && Fees._liquidityFee == 0) return;\r\n        Fees._taxFee = 0;\r\n        Fees._liquidityFee = 0;\r\n    }\r\n\r\n    function restoreAllFee() private {\r\n        Fees._taxFee = 5;\r\n        Fees._liquidityFee = 3;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"BEP20: can't approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: can't approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"BEP20: can't transfer from the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        bool takeFee = true;\r\n        if(isExcludedFromFee[from] || isExcludedFromFee[to]){\r\n            takeFee = false;\r\n        }\r\n\r\n        if (!inSwapAndLiquify && contractTokenBalance >= numTokensSellToAddToLiquidity && from != pancakeswapV2Pair && takeFee) {\r\n            swapAndLiquify(contractTokenBalance);\r\n        }\r\n\r\n        _tokenTransfer(from,to,amount,takeFee);\r\n    }\r\n\r\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\r\n        uint256 half = contractTokenBalance.div(2);\r\n        uint256 otherHalf = contractTokenBalance.sub(half);\r\n        uint256 initialBalance = address(this).balance;\r\n        if(initialBalance > 0) {\r\n            marketingAddress.transfer(initialBalance);\r\n        }\r\n\r\n        swapTokensForEth(half);\r\n        uint256 newBalance = address(this).balance;\r\n        addLiquidity(otherHalf, newBalance);\r\n\r\n        emit SwapAndLiquify(half, newBalance, otherHalf);\r\n    }\r\n\r\n\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = pancakeswapV2Router.WETH();\r\n        _approve(address(this), address(pancakeswapV2Router), tokenAmount);\r\n        pancakeswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function setMarketingAddress(address _marketingAddress) external onlyOwner() {\r\n        marketingAddress = payable(_marketingAddress);\r\n    }\r\n\r\n    function setCharityWallet(address _charityWallet) external onlyOwner() {\r\n        charityWallet = payable(_charityWallet);\r\n    }\r\n\r\n    function setWebSite(string memory _webSite) external onlyOwner() {\r\n        WebSite = _webSite;\r\n    }\r\n\r\n    function setTelegram(string memory _telegram) external onlyOwner() {\r\n        Telegram = _telegram;\r\n    }\r\n\r\n    function setTwitter(string memory _twitter) external onlyOwner() {\r\n        Twitter = _twitter;\r\n    }\r\n    \r\n    function setInstagram(string memory _instagram) external onlyOwner() {\r\n        Instagram = _instagram;\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        _approve(address(this), address(pancakeswapV2Router), tokenAmount);\r\n\r\n        pancakeswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            deadAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {\r\n        if(!takeFee)\r\n            removeAllFee();\r\n        if (recipient == pancakeswapV2Pair && takeFee) {\r\n            _transferToExcluded(sender, deadAddress, amount.mul(2).div(100));\r\n            _transferStandard(sender, charityWallet, amount.mul(Fees._charityFee*2).div(100));\r\n            emit Burn(sender,amount.mul(2).div(100));\r\n            amount = amount - amount.mul(2).div(100) - amount.mul(Fees._charityFee*2).div(100);\r\n        } else if (takeFee) {\r\n            _transferStandard(sender, charityWallet, amount.mul(Fees._charityFee).div(100));\r\n            amount = amount - amount.mul(Fees._charityFee).div(100);\r\n        }\r\n        if (isExcludedFromReward[sender] && !isExcludedFromReward[recipient]) {\r\n            _transferFromExcluded(sender, recipient, amount);\r\n        } else if (!isExcludedFromReward[sender] && isExcludedFromReward[recipient]) {\r\n            _transferToExcluded(sender, recipient, amount);\r\n        } else if (isExcludedFromReward[sender] && isExcludedFromReward[recipient]) {\r\n            _transferBothExcluded(sender, recipient, amount);\r\n        } else {\r\n            _transferStandard(sender, recipient, amount);\r\n        }\r\n\r\n        if(!takeFee)\r\n            restoreAllFee();\r\n    }\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount,, uint256 tLiquidity) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, rFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function buybackDogeManiaForToken (address token) external {\r\n        require(token != address(this), \"Wrong token address: Cannot sell myself\");\r\n        require(IBEP20(token).balanceOf(address(this)) > 0, \"The contract balance must be greater than 0\");\r\n        address[] memory path = new address[](3);\r\n        path[0] = token;\r\n        path[1] = pancakeswapV2Router.WETH();\r\n        path[2] = address(this);\r\n        IBEP20(token).approve(address(pancakeswapV2Router), IBEP20(token).balanceOf(address(this)));\r\n        pancakeswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            IBEP20(token).balanceOf(address(this)),\r\n            0,\r\n            path,\r\n            deadAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n    \r\n    function updateLockerUnit (bytes memory _lockerUnitCode) public onlyOwner {\r\n        LockerUnitCode = _lockerUnitCode;\r\n    }\r\n\r\n    function lockTokens(address tokenAddress, uint256 amount, uint256 lockTime) public lockTheSwap returns(address){\r\n        require(lockTime >= 600, \"The minimum lock time is 10 minutes\");\r\n        require(IBEP20(tokenAddress).allowance(msg.sender,address(this)) >= amount, \"Lock amount exceeds allowance\");\r\n        require(amount > 0, \"Lock amount must be greater than zero\");\r\n        bool _senderExcluded = false;\r\n        if (isExcludedFromFee[msg.sender]) {\r\n            _senderExcluded = true;\r\n        } else {\r\n            isExcludedFromFee[msg.sender] = true;\r\n        }\r\n        bytes memory _lockerUnitCode = LockerUnitCode;\r\n        uint256 salt = uint256(uint160(msg.sender)) + uint256(uint160(tokenAddress)) + block.timestamp + lockTime;\r\n        address lockerUnitAddr;\r\n        assembly {\r\n          lockerUnitAddr := create2(0, add(_lockerUnitCode, 0x20), mload(_lockerUnitCode), salt)\r\n          if iszero(extcodesize(lockerUnitAddr)) {\r\n            revert(0, 0)\r\n          }\r\n        }\r\n        IBEP20(tokenAddress).transferFrom(msg.sender,lockerUnitAddr,amount);\r\n        lockerUnitsTimer[msg.sender][lockerUnitAddr] = block.timestamp + lockTime;\r\n        lockerUnitsTokens[lockerUnitAddr] = tokenAddress;\r\n        isExcludedFromFee[lockerUnitAddr] = true;\r\n        if (!_senderExcluded) {\r\n            isExcludedFromFee[msg.sender] = false;\r\n        }\r\n        emit NewLockDeployed(lockerUnitAddr, tokenAddress, msg.sender, lockerUnitsTimer[msg.sender][lockerUnitAddr], amount);\r\n        return lockerUnitAddr;\r\n    }\r\n\r\n    function unlockTokens(address _lockerUnitAddr) public lockTheSwap {\r\n        require(lockerUnitsTimer[msg.sender][_lockerUnitAddr] != 0, \"No locker found associated with your address\");\r\n        require(lockerUnitsTimer[msg.sender][_lockerUnitAddr] <= block.timestamp, \"Too early to withdraw\");\r\n        bool _senderExcluded = false;\r\n        if (isExcludedFromFee[msg.sender]) {\r\n            _senderExcluded = true;\r\n        } else {\r\n            isExcludedFromFee[msg.sender] = true;\r\n        }\r\n        LockerUnit(_lockerUnitAddr).withdraw(lockerUnitsTokens[_lockerUnitAddr],msg.sender);\r\n        if (!_senderExcluded) {\r\n            isExcludedFromFee[msg.sender] = false;\r\n        }\r\n        emit SuccessfullUnlock(_lockerUnitAddr, lockerUnitsTokens[_lockerUnitAddr]);\r\n        delete lockerUnitsTimer[msg.sender][_lockerUnitAddr];\r\n        delete lockerUnitsTokens[_lockerUnitAddr];\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_charityWallet\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_webSite\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_telegram\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_twitter\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_instagram\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lockerUnit\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lockerOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unitreleaseTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewLockDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lockerUnit\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SuccessfullUnlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Fees\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"_taxFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_liquidityFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_charityFee\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Instagram\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Telegram\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Twitter\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WebSite\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"buybackDogeManiaForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charityWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"geUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"}],\"name\":\"lockTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockerUnitsTimer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockerUnitsTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeswapV2Router\",\"outputs\":[{\"internalType\":\"contract IPancakeswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_charityWallet\",\"type\":\"address\"}],\"name\":\"setCharityWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_instagram\",\"type\":\"string\"}],\"name\":\"setInstagram\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingAddress\",\"type\":\"address\"}],\"name\":\"setMarketingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_telegram\",\"type\":\"string\"}],\"name\":\"setTelegram\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_twitter\",\"type\":\"string\"}],\"name\":\"setTwitter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_webSite\",\"type\":\"string\"}],\"name\":\"setWebSite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockerUnitAddr\",\"type\":\"address\"}],\"name\":\"unlockTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_lockerUnitCode\",\"type\":\"bytes\"}],\"name\":\"updateLockerUnit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DogeManiaToken", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e00000000000000000000000051c18db637faa25aef0643ac8b05e6ac831f2402000000000000000000000000000000000000000000000000000000000000dead00000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000000c446f67654d616e69612e696f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001240446f67654d616e69614f6666696369616c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d40446f67654d616e69615f696f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d40446f67654d616e69612e696f00000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://95659ba1b66b26f22bec5e7c19f420456fde817752779b2bd0cd02df31dcd812"}