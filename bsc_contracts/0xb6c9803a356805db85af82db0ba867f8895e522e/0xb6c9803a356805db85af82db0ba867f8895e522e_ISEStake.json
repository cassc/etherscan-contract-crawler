{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/ISquadNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\ninterface ISquadNFT is IERC721 {\\r\\n    function maxSupply() external view returns(uint256);\\r\\n    function totalSupply() external view returns(uint256);\\r\\n}\"\r\n    },\r\n    \"contracts/ISE.sol\": {\r\n      \"content\": \"/**\\r\\n *Submitted for verification at bscscan.com on 2020-09-22\\r\\n */\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./interface/ISquadNFT.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract ISEStake is Ownable {\\r\\n    struct StakerInfo {\\r\\n        uint256 cakeAmount;\\r\\n        bool claimed;\\r\\n        uint256 lastKey;\\r\\n        bool squadNFTBonusClaimed;\\r\\n        uint256 userNFTbalance;\\r\\n    }\\r\\n\\r\\n    struct GainsInfo {\\r\\n        uint256 cakeAmount;\\r\\n        bool claimed;\\r\\n        address[] referrers;\\r\\n    }\\r\\n\\r\\n    IERC20 public immutable CAKE;\\r\\n    IERC20 public immutable SQUAD;\\r\\n    ISquadNFT public immutable SquadNFT;\\r\\n\\r\\n    address public cakeWallet;\\r\\n    address public squadNFTWallet;\\r\\n    address public devWallet;\\r\\n\\r\\n    mapping(address => StakerInfo) public stakerInfo;\\r\\n    mapping(uint256 => address) registerInfo;\\r\\n    mapping(address => GainsInfo) public gainsInfo;\\r\\n\\r\\n    uint256 public totalStakedCake;\\r\\n    uint256 public ISEbalance;\\r\\n    uint256 public referralBalance;\\r\\n    uint256 public squadNFTBonus;\\r\\n    uint256 nounce;\\r\\n    uint256 public totalNFTHolds;\\r\\n\\r\\n    uint256 public startTime;\\r\\n    uint256 public period = 8 days;\\r\\n    uint256 public claimStartTime;\\r\\n    uint256 public claimPeriod = 30 days;\\r\\n\\r\\n    uint256 public claimedAmountForISE;\\r\\n    uint256 public claimedAmountForReferral;\\r\\n    uint256 public claimedAmountForNFTHolders;\\r\\n\\r\\n    uint256 public threshold = 10 ** 18;\\r\\n\\r\\n    event Stake(address indexed user, uint256 key, uint256 amount);\\r\\n    event Claim(address indexed user, uint256 amount);\\r\\n    event AirDrop(address indexed user, uint256 amount);\\r\\n    event ClaimForNFTHoldBonus(address indexed user, uint256 amount);\\r\\n\\r\\n    constructor(address _CAKE, address _SQUAD, address _SquadNFT) {\\r\\n        CAKE = IERC20(_CAKE);\\r\\n        SQUAD = IERC20(_SQUAD);\\r\\n        SquadNFT = ISquadNFT(_SquadNFT);\\r\\n        ISEbalance = 50_000_000 * (10 ** 18);       // 5% of total amount\\r\\n        referralBalance = 5_000_000 * (10 ** 18);   // 0.5% of total amount\\r\\n        squadNFTBonus = 10_000_000 * (10 ** 18);    // 1%\\r\\n    }\\r\\n\\r\\n    function stake(uint256 key, uint256 _amount) external returns(uint256) {\\r\\n        require(startTime > 0, \\\"not started\\\");\\r\\n\\r\\n        // update staking info\\r\\n        stakerInfo[msg.sender].cakeAmount += _amount;\\r\\n        totalStakedCake += _amount;\\r\\n        uint256 referalCode;\\r\\n\\r\\n        if (isValidUser(key, msg.sender)) {\\r\\n            address referrer = registerInfo[key];\\r\\n            gainsInfo[referrer].cakeAmount += _amount;\\r\\n            gainsInfo[referrer].referrers.push(referrer);\\r\\n        }\\r\\n\\r\\n        // generate referral code (12 digits) when the amount is more than threshold\\r\\n        if (stakerInfo[msg.sender].cakeAmount >= threshold && stakerInfo[msg.sender].lastKey == 0) {\\r\\n            referalCode = (nounce % 100) * (10 ** 10) + block.timestamp;\\r\\n            nounce++;\\r\\n            registerInfo[referalCode] = msg.sender;\\r\\n            stakerInfo[msg.sender].lastKey = referalCode;\\r\\n            stakerInfo[msg.sender].userNFTbalance = SquadNFT.balanceOf(msg.sender);\\r\\n            totalNFTHolds += stakerInfo[msg.sender].userNFTbalance;\\r\\n        }\\r\\n        CAKE.transferFrom(msg.sender, cakeWallet, _amount);\\r\\n\\r\\n        emit Stake(msg.sender, referalCode, _amount);\\r\\n        return referalCode;\\r\\n    }\\r\\n\\r\\n    function claim() external {\\r\\n        require(isOver(), \\\"still ISE\\\");\\r\\n        require(claimStartTime + claimPeriod > block.timestamp, \\\"is over claim\\\");\\r\\n        require(!stakerInfo[msg.sender].claimed, \\\"claimed\\\");\\r\\n\\r\\n        (uint256 claimAmount, ) = getClaimAmount(msg.sender);\\r\\n        require(claimAmount > 0, \\\"no claim\\\");\\r\\n        stakerInfo[msg.sender].claimed = true;\\r\\n        claimedAmountForISE = claimedAmountForISE + claimAmount;\\r\\n\\r\\n        SQUAD.transfer(msg.sender, claimAmount);\\r\\n\\r\\n        emit Claim(msg.sender, claimAmount);\\r\\n    }\\r\\n\\r\\n    function airDropForReferral() external {\\r\\n        require(isOver(), \\\"still ISE\\\");\\r\\n        require(claimStartTime + claimPeriod > block.timestamp, \\\"is over claim\\\");\\r\\n        require(!gainsInfo[msg.sender].claimed, \\\"claimed\\\");\\r\\n\\r\\n        (, uint256 claimAmount) = getClaimAmount(msg.sender);\\r\\n        require(claimAmount > 0, \\\"no claim\\\");\\r\\n        gainsInfo[msg.sender].claimed = true;\\r\\n        claimedAmountForReferral += claimAmount;\\r\\n\\r\\n        SQUAD.transfer(msg.sender, claimAmount);\\r\\n\\r\\n        emit AirDrop(msg.sender, claimAmount);\\r\\n    }\\r\\n\\r\\n    function claimForNFTHoldBonus() external {\\r\\n        require(isOver(), \\\"still ISE\\\");\\r\\n        require(claimStartTime + claimPeriod > block.timestamp, \\\"is over claim\\\");\\r\\n        uint256 claimAmount = getClaimForNFTBonus(msg.sender);\\r\\n        require(claimAmount > 0, \\\"no claim\\\");\\r\\n        stakerInfo[msg.sender].squadNFTBonusClaimed = true;\\r\\n        claimedAmountForNFTHolders += claimAmount;\\r\\n        SQUAD.transfer(msg.sender, claimAmount);\\r\\n\\r\\n        emit ClaimForNFTHoldBonus(msg.sender, claimAmount);\\r\\n    }\\r\\n\\r\\n    function getClaimAmount(\\r\\n        address user\\r\\n    ) public view returns (uint256 stakedAmount, uint256 referralAmount) {\\r\\n        if (totalStakedCake == 0) return (0, 0);\\r\\n        stakedAmount = stakerInfo[user].cakeAmount * ISEbalance / totalStakedCake;\\r\\n        referralAmount = gainsInfo[user].cakeAmount * referralBalance / totalStakedCake;\\r\\n    }\\r\\n\\r\\n    function getClaimForNFTBonus(address user) public view returns (uint256 reward) {\\r\\n        if (stakerInfo[user].squadNFTBonusClaimed == true || totalNFTHolds == 0) return 0;\\r\\n        reward = squadNFTBonus * stakerInfo[user].userNFTbalance / totalNFTHolds;\\r\\n    }\\r\\n\\r\\n    function isOver() public view returns (bool) {\\r\\n        return startTime + period < block.timestamp;\\r\\n    }\\r\\n\\r\\n    function getReferrerInfo(address user) external view returns(address[] memory) {\\r\\n        return gainsInfo[user].referrers;\\r\\n    }\\r\\n\\r\\n    function recoverISERewardToken() external onlyOwner {\\r\\n        require(claimStartTime + claimPeriod < block.timestamp, \\\"still claiming\\\");\\r\\n        uint256 balance = ISEbalance - claimedAmountForISE;\\r\\n        claimedAmountForISE = ISEbalance;\\r\\n        SQUAD.transfer(squadNFTWallet, balance / 2);\\r\\n        SQUAD.transfer(devWallet, (balance - balance / 2));\\r\\n    }\\r\\n\\r\\n    function recoverReferralToken() external onlyOwner {\\r\\n        require(claimStartTime + claimPeriod < block.timestamp, \\\"still claiming\\\");\\r\\n        uint256 balance = referralBalance - claimedAmountForReferral;\\r\\n        claimedAmountForReferral = referralBalance;\\r\\n        SQUAD.transfer(squadNFTWallet, balance / 2);\\r\\n        SQUAD.transfer(devWallet, balance - balance / 2);\\r\\n    }\\r\\n\\r\\n    function recoverSquadNFTBonusToken() external onlyOwner {\\r\\n        require(claimStartTime + claimPeriod < block.timestamp, \\\"still claiming\\\");\\r\\n        uint256 balance = squadNFTBonus - claimedAmountForNFTHolders;\\r\\n        claimedAmountForNFTHolders = squadNFTBonus;\\r\\n        SQUAD.transfer(squadNFTWallet, balance / 2);\\r\\n        SQUAD.transfer(devWallet, balance - balance / 2);\\r\\n    }\\r\\n\\r\\n    function start() external onlyOwner {\\r\\n        require(startTime == 0);\\r\\n        startTime = block.timestamp;\\r\\n        claimStartTime = block.timestamp + period;\\r\\n    }\\r\\n\\r\\n    function end() external onlyOwner {\\r\\n        startTime = 0;\\r\\n        claimStartTime = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function setCakeWallet(address _wallet) external onlyOwner {\\r\\n        cakeWallet = _wallet;\\r\\n    }\\r\\n\\r\\n    function setSquadNFTWallet(address _wallet) external onlyOwner {\\r\\n        squadNFTWallet = _wallet;\\r\\n    }\\r\\n\\r\\n    function setDevWallet(address _wallet) external onlyOwner {\\r\\n        devWallet = _wallet;\\r\\n    }\\r\\n\\r\\n    function setThreshold(uint256 _amount) external onlyOwner {\\r\\n        threshold = _amount;\\r\\n    }\\r\\n\\r\\n    function updateClaimPeriod(uint256 _time) external onlyOwner {\\r\\n        claimPeriod = _time;\\r\\n    }\\r\\n\\r\\n    function isValidUser(uint256 key, address user) public view returns (bool) {\\r\\n        return registerInfo[key] != address(0) && registerInfo[key] != user;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_CAKE\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_SQUAD\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_SquadNFT\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AirDrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimForNFTHoldBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CAKE\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ISEbalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SQUAD\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SquadNFT\",\"outputs\":[{\"internalType\":\"contract ISquadNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airDropForReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cakeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimForNFTHoldBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimedAmountForISE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimedAmountForNFTHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimedAmountForReferral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"end\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gainsInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getClaimAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getClaimForNFTBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getReferrerInfo\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isValidUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverISERewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverReferralToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverSquadNFTBonusToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setCakeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setDevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setSquadNFTWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"squadNFTBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"squadNFTWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakerInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lastKey\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"squadNFTBonusClaimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"userNFTbalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"threshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalNFTHolds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedCake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"updateClaimPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ISEStake", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000e09fabb73bd3ade0a17ecc321fd13a19e81ce820000000000000000000000006d2d8ad6f7c044fbf7bbd3677d40fbba732f8ae10000000000000000000000000a8901b0e25deb55a87524f0cc164e9644020eba", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}