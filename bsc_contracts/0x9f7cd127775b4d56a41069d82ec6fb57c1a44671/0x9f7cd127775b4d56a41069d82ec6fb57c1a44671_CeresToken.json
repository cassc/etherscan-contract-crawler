{"SourceCode": "pragma solidity 0.5.16;\r\n\r\ninterface IBEP20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the token decimals.\r\n   */\r\n  function decimals() external view returns (uint8);\r\n\r\n  /**\r\n   * @dev Returns the token symbol.\r\n   */\r\n  function symbol() external view returns (string memory);\r\n\r\n  /**\r\n  * @dev Returns the token name.\r\n  */\r\n  function name() external view returns (string memory);\r\n\r\n  /**\r\n   * @dev Returns the bep token owner.\r\n   */\r\n  function getOwner() external view returns (address);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n  // Empty internal constructor, to prevent people from mistakenly deploying\r\n  // an instance of this contract, which should be used via inheritance.\r\n  constructor () internal { }\r\n\r\n  function _msgSender() internal view returns (address payable) {\r\n    return msg.sender;\r\n  }\r\n\r\n  function _msgData() internal view returns (bytes memory) {\r\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n    return msg.data;\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n   * @dev Returns the addition of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `+` operator.\r\n   *\r\n   * Requirements:\r\n   * - Addition cannot overflow.\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, \"SafeMath: subtraction overflow\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the multiplication of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `*` operator.\r\n   *\r\n   * Requirements:\r\n   * - Multiplication cannot overflow.\r\n   */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, \"SafeMath: division by zero\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0, errorMessage);\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return mod(a, b, \"SafeMath: modulo by zero\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts with custom message when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b != 0, errorMessage);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev Initializes the contract setting the deployer as the initial owner.\r\n   */\r\n  constructor () internal {\r\n    address msgSender = _msgSender();\r\n    _owner = msgSender;\r\n    emit OwnershipTransferred(address(0), msgSender);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the current owner.\r\n   */\r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Leaves the contract without owner. It will not be possible to call\r\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n   *\r\n   * NOTE: Renouncing ownership will leave the contract without an owner,\r\n   * thereby removing any functionality that is only available to the owner.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n\r\n// interface IUniswapV2Factory {\r\n//     // event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n//     // function feeTo() external view returns (address);\r\n//     // function feeToSetter() external view returns (address);\r\n\r\n//     // function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n//     // function allPairs(uint) external view returns (address pair);\r\n//     // function allPairsLength() external view returns (uint);\r\n\r\n//     function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n//     // function setFeeTo(address) external;\r\n//     // function setFeeToSetter(address) external;\r\n// }\r\n\r\n// // interface IUniswapV2Pair {\r\n// //     event Approval(address indexed owner, address indexed spender, uint value);\r\n// //     event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n// //     function name() external pure returns (string memory);\r\n// //     function symbol() external pure returns (string memory);\r\n// //     function decimals() external pure returns (uint8);\r\n// //     function totalSupply() external view returns (uint);\r\n// //     function balanceOf(address owner) external view returns (uint);\r\n// //     function allowance(address owner, address spender) external view returns (uint);\r\n\r\n// //     function approve(address spender, uint value) external returns (bool);\r\n// //     function transfer(address to, uint value) external returns (bool);\r\n// //     function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n// //     function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n// //     function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n// //     function nonces(address owner) external view returns (uint);\r\n\r\n// //     function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n// //     event Mint(address indexed sender, uint amount0, uint amount1);\r\n// //     event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n// //     event Swap(\r\n// //         address indexed sender,\r\n// //         uint amount0In,\r\n// //         uint amount1In,\r\n// //         uint amount0Out,\r\n// //         uint amount1Out,\r\n// //         address indexed to\r\n// //     );\r\n// //     event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n// //     function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n// //     function factory() external view returns (address);\r\n// //     function token0() external view returns (address);\r\n// //     function token1() external view returns (address);\r\n// //     function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n// //     function price0CumulativeLast() external view returns (uint);\r\n// //     function price1CumulativeLast() external view returns (uint);\r\n// //     function kLast() external view returns (uint);\r\n\r\n// //     function mint(address to) external returns (uint liquidity);\r\n// //     function burn(address to) external returns (uint amount0, uint amount1);\r\n// //     function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n// //     function skim(address to) external;\r\n// //     function sync() external;\r\n\r\n// //     function initialize(address, address) external;\r\n// // }\r\n\r\n// interface IUniswapV2Router01 {\r\n//     function factory() external pure returns (address);\r\n//     function WETH() external pure returns (address);\r\n\r\n//     function addLiquidity(\r\n//         address tokenA,\r\n//         address tokenB,\r\n//         uint amountADesired,\r\n//         uint amountBDesired,\r\n//         uint amountAMin,\r\n//         uint amountBMin,\r\n//         address to,\r\n//         uint deadline\r\n//     ) external returns (uint amountA, uint amountB, uint liquidity);\r\n//     // function addLiquidityETH(\r\n//     //     address token,\r\n//     //     uint amountTokenDesired,\r\n//     //     uint amountTokenMin,\r\n//     //     uint amountETHMin,\r\n//     //     address to,\r\n//     //     uint deadline\r\n//     // ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n//     // function removeLiquidity(\r\n//     //     address tokenA,\r\n//     //     address tokenB,\r\n//     //     uint liquidity,\r\n//     //     uint amountAMin,\r\n//     //     uint amountBMin,\r\n//     //     address to,\r\n//     //     uint deadline\r\n//     // ) external returns (uint amountA, uint amountB);\r\n//     // function removeLiquidityETH(\r\n//     //     address token,\r\n//     //     uint liquidity,\r\n//     //     uint amountTokenMin,\r\n//     //     uint amountETHMin,\r\n//     //     address to,\r\n//     //     uint deadline\r\n//     // ) external returns (uint amountToken, uint amountETH);\r\n//     // function removeLiquidityWithPermit(\r\n//     //     address tokenA,\r\n//     //     address tokenB,\r\n//     //     uint liquidity,\r\n//     //     uint amountAMin,\r\n//     //     uint amountBMin,\r\n//     //     address to,\r\n//     //     uint deadline,\r\n//     //     bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n//     // ) external returns (uint amountA, uint amountB);\r\n//     // function removeLiquidityETHWithPermit(\r\n//     //     address token,\r\n//     //     uint liquidity,\r\n//     //     uint amountTokenMin,\r\n//     //     uint amountETHMin,\r\n//     //     address to,\r\n//     //     uint deadline,\r\n//     //     bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n//     // ) external returns (uint amountToken, uint amountETH);\r\n//     // function swapExactTokensForTokens(\r\n//     //     uint amountIn,\r\n//     //     uint amountOutMin,\r\n//     //     address[] calldata path,\r\n//     //     address to,\r\n//     //     uint deadline\r\n//     // ) external returns (uint[] memory amounts);\r\n//     // function swapTokensForExactTokens(\r\n//     //     uint amountOut,\r\n//     //     uint amountInMax,\r\n//     //     address[] calldata path,\r\n//     //     address to,\r\n//     //     uint deadline\r\n//     // ) external returns (uint[] memory amounts);\r\n//     // function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n//     //     external\r\n//     //     payable\r\n//     //     returns (uint[] memory amounts);\r\n//     // function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n//     //     external\r\n//     //     returns (uint[] memory amounts);\r\n//     // function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n//     //     external\r\n//     //     returns (uint[] memory amounts);\r\n//     // function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n//     //     external\r\n//     //     payable\r\n//     //     returns (uint[] memory amounts);\r\n\r\n//     // function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n//     // function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n//     // function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n//     // function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n//     // function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n// }\r\n\r\n// contract IUniswapV2Router02 is IUniswapV2Router01 {\r\n//     // function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n//     //     address token,\r\n//     //     uint liquidity,\r\n//     //     uint amountTokenMin,\r\n//     //     uint amountETHMin,\r\n//     //     address to,\r\n//     //     uint deadline\r\n//     // ) external returns (uint amountETH);\r\n//     // function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n//     //     address token,\r\n//     //     uint liquidity,\r\n//     //     uint amountTokenMin,\r\n//     //     uint amountETHMin,\r\n//     //     address to,\r\n//     //     uint deadline,\r\n//     //     bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n//     // ) external returns (uint amountETH);\r\n\r\n//     // function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n//     //     uint amountIn,\r\n//     //     uint amountOutMin,\r\n//     //     address[] calldata path,\r\n//     //     address to,\r\n//     //     uint deadline\r\n//     // ) external;\r\n//     // function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n//     //     uint amountOutMin,\r\n//     //     address[] calldata path,\r\n//     //     address to,\r\n//     //     uint deadline\r\n//     // ) external payable;\r\n//     // function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n//     //     uint amountIn,\r\n//     //     uint amountOutMin,\r\n//     //     address[] calldata path,\r\n//     //     address to,\r\n//     //     uint deadline\r\n//     // ) external;\r\n// }\r\n\r\n\r\n\r\ncontract CeresToken is Context, IBEP20, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  mapping (address => uint256) private _balances;\r\n\r\n  mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n  mapping(address => address) public inviter;\r\n\r\n  uint256 private _totalSupply;\r\n  uint8 private _decimals;\r\n  string private _symbol;\r\n  string private _name;\r\n\r\n  address private destroyAddress = address(0x000000000000000000000000000000000000dEaD);\r\n  address private inviterAddress = address(0x112310A7aAd69cb49686a019a2e6302cED79a19B);\r\n  address public fundAddress = address(0xD17D4D2C99187Bd0F6819618376A46beeb0c7205);\r\n\r\n  bool public _paused = true; \r\n\r\n  mapping(address => bool) public limitExcluded;\r\n\r\n  // IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n    // address public uniswapV2BNBPair;\r\n    // address public usdt = 0x55d398326f99059fF775485246999027B3197955;\r\n\r\n  constructor() public {\r\n\r\n    // if (block.chainid == 56) {\r\n            // uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        // }\r\n        // Create a pancake pair for this new token\r\n\r\n        // uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\r\n        //         address(this),\r\n        //         usdt);\r\n\r\n        // uniswapV2BNBPair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\r\n        //         address(this),\r\n        //         uniswapV2Router.WETH());\r\n\r\n    _name = \"CERES\";\r\n    _symbol = \"CERES\";\r\n    _decimals = 18;\r\n    _totalSupply = 130000000 * 10**18;\r\n    _balances[msg.sender] = _totalSupply;\r\n\r\n    limitExcluded[msg.sender] = true;\r\n    limitExcluded[fundAddress] = true;\r\n    limitExcluded[inviterAddress] = true;\r\n    \r\n    emit Transfer(address(0), msg.sender, _totalSupply);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the bep token owner.\r\n   */\r\n  function getOwner() external view returns (address) {\r\n    return owner();\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the token decimals.\r\n   */\r\n  function decimals() external view returns (uint8) {\r\n    return _decimals;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the token symbol.\r\n   */\r\n  function symbol() external view returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  /**\r\n  * @dev Returns the token name.\r\n  */\r\n  function name() external view returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  /**\r\n   * @dev See {BEP20-totalSupply}.\r\n   */\r\n  function totalSupply() external view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  /**\r\n   * @dev See {BEP20-balanceOf}.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256) {\r\n    return _balances[account];\r\n  }\r\n\r\n  function getInviter(address account) public view returns (address) {\r\n        return inviter[account];\r\n    }\r\n\r\n  /**\r\n   * @dev See {BEP20-transfer}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `recipient` cannot be the zero address.\r\n   * - the caller must have a balance of at least `amount`.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool) {\r\n    _transfer(_msgSender(), recipient, amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev See {BEP20-allowance}.\r\n   */\r\n  function allowance(address owner, address spender) external view returns (uint256) {\r\n    return _allowances[owner][spender];\r\n  }\r\n\r\n  /**\r\n   * @dev See {BEP20-approve}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool) {\r\n    _approve(_msgSender(), spender, amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev See {BEP20-transferFrom}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance. This is not\r\n   * required by the EIP. See the note at the beginning of {BEP20};\r\n   *\r\n   * Requirements:\r\n   * - `sender` and `recipient` cannot be the zero address.\r\n   * - `sender` must have a balance of at least `amount`.\r\n   * - the caller must have allowance for `sender`'s tokens of at least\r\n   * `amount`.\r\n   */\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {\r\n    _transfer(sender, recipient, amount);\r\n    _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\"));\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n   *\r\n   * This is an alternative to {approve} that can be used as a mitigation for\r\n   * problems described in {BEP20-approve}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n   *\r\n   * This is an alternative to {approve} that can be used as a mitigation for\r\n   * problems described in {BEP20-approve}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   * - `spender` must have allowance for the caller of at least\r\n   * `subtractedValue`.\r\n   */\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\"));\r\n    return true;\r\n  }\r\n\r\n \r\n  /**\r\n   * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n   *\r\n   * This is internal function is equivalent to {transfer}, and can be used to\r\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `sender` cannot be the zero address.\r\n   * - `recipient` cannot be the zero address.\r\n   * - `sender` must have a balance of at least `amount`.\r\n   */\r\n  function _transfer(address sender, address recipient, uint256 amount) internal {\r\n    require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n    require(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n    require(_balances[sender] >= amount, \"BEP20: transfer amount exceeds balance\");\r\n    _balances[sender] = _balances[sender].sub(amount, \"BEP20: transfer amount exceeds balance\");\r\n    if(limitExcluded[recipient] || limitExcluded[sender] || recipient == destroyAddress){\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }else{\r\n        if(sender == uniswapV2Pair || recipient == uniswapV2Pair){\r\n          if(_paused){\r\n            _balances[destroyAddress] = _balances[destroyAddress].add(amount); \r\n            emit Transfer(sender, destroyAddress, amount);   \r\n          }else{\r\n            address cur;\r\n            uint256 inviterFree;\r\n            if(sender == uniswapV2Pair){\r\n                cur = recipient;\r\n            }else{\r\n                cur = sender;\r\n            }\r\n            for (uint256 i = 1; i <= 3; i++) {\r\n                cur = inviter[cur];\r\n                if (cur == address(0)) {\r\n                    // break;\r\n                    cur = inviterAddress;\r\n                }\r\n                if(i == 1){\r\n                    inviterFree = 2;\r\n                }else{\r\n                    inviterFree = 1;\r\n                }\r\n                uint256 inviterAmount = amount.mul(inviterFree).div(100);\r\n                _balances[cur] = _balances[cur].add(inviterAmount);\r\n                emit Transfer(sender, cur, inviterAmount);\r\n            }\r\n\r\n            uint256 rAmount=amount.mul(93).div(100);\r\n            uint256 fundAmount=amount.mul(2).div(100);\r\n            uint256 destroyAmount=amount.mul(1).div(100);\r\n            _balances[recipient] = _balances[recipient].add(rAmount);\r\n            _balances[fundAddress] = _balances[fundAddress].add(fundAmount);\r\n            _balances[destroyAddress] = _balances[destroyAddress].add(destroyAmount); \r\n            emit Transfer(sender, recipient, rAmount);\r\n            emit Transfer(sender, fundAddress, fundAmount);\r\n            emit Transfer(sender, destroyAddress, destroyAmount); \r\n          }\r\n\r\n        }else{\r\n            uint256 rAmount=amount.mul(93).div(100);\r\n            uint256 destroyAmount=amount.mul(7).div(100);\r\n            _balances[recipient] = _balances[recipient].add(rAmount);  \r\n            _balances[destroyAddress] = _balances[destroyAddress].add(destroyAmount); \r\n            emit Transfer(sender, recipient, rAmount);\r\n            emit Transfer(sender, destroyAddress, destroyAmount);      \r\n        }\r\n\r\n    }\r\n\r\n    \r\n  }\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n   *\r\n   * This is internal function is equivalent to `approve`, and can be used to\r\n   * e.g. set automatic allowances for certain subsystems, etc.\r\n   *\r\n   * Emits an {Approval} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `owner` cannot be the zero address.\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n  function _approve(address owner, address spender, uint256 amount) internal {\r\n    require(owner != address(0), \"BEP20: approve from the zero address\");\r\n    require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n  }\r\n\r\n  function changeV2pairs(address router) public onlyOwner {\r\n        uniswapV2Pair = router;\r\n  }\r\n\r\n  function _pause() public onlyOwner { _paused = true;} \r\n  \r\n  function _unpause() public onlyOwner { _paused = false; }\r\n\r\n  function updateLimitedall(address[] memory _account, bool enabled) public  onlyOwner {\r\n         for (uint i=0; i<_account.length; i++) {\r\n            limitExcluded[_account[i]] = enabled;\r\n         }\r\n  }\r\n\r\n  function inviterSet(address paddr) public {\r\n        require(inviter[msg.sender] == address(0),\"Address bound\");\r\n        require(msg.sender != paddr,\"Address erro\");\r\n        inviter[msg.sender] = paddr; \r\n        // shareNum[paddr] += 1;      \r\n    }\r\n\r\n  function setallInviter(address[] memory _a, address[] memory _pa) public onlyOwner {\r\n      require(_a.length == _pa.length, \"account neq paccount\");\r\n      for (uint i=0; i<_a.length; i++) {\r\n          inviter[_a[i]] = _pa[i];\r\n          // shareNum[_pa[i]] += 1; \r\n        }\r\n  }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"_pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"_unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"changeV2pairs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getInviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"paddr\",\"type\":\"address\"}],\"name\":\"inviterSet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_a\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_pa\",\"type\":\"address[]\"}],\"name\":\"setallInviter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_account\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"updateLimitedall\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CeresToken", "CompilerVersion": "v0.5.16+commit.9c3226ce", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://b3d32b584c8f5378edcf11485852938bac224875f1db830dcfa310b0ffa23b0a"}