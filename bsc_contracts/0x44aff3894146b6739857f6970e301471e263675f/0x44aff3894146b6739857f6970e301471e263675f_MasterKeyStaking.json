{"SourceCode": "//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.0;\r\npragma abicoder v2;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IPORTAL {\r\n    function getListingPrice() external view returns (uint256);\r\n    function tokenWhitelist(address _tokenAddress) external view returns (bool);\r\n    function pricingEnabled() external view returns (bool);\r\n    function feeCollector() external view returns (address);\r\n    function dailyBountyMAX() external view returns (address);\r\n    function listingCost() external view returns (address);\r\n    function MSFY() external view returns (address);\r\n    function userTokenManifest(address _address, address _token) external view returns (bool);\r\n}\r\n\r\ninterface IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ncontract Ownable is Context {\r\n    address payable public owner;\r\n    bool _enabled;\r\n    bool _disabled;\r\n    event TransferredOwnership(address _previous, address _next, uint256 _time);\r\n    event AddedPlatformAddress(address _platformAddress, uint256 _time);\r\n    event RemovedPlatformAddress(address _platformAddress, uint256 _time);\r\n    modifier onlyOwner() {\r\n        require(_msgSender() == owner, \"Owner only\");\r\n        _;\r\n    }\r\n    modifier onlyPlatform() {\r\n        require(platformAddress[_msgSender()] == true, \"Only Platform\");\r\n        _;\r\n    }\r\n    modifier enabled() {\r\n        require(_enabled == true, \"Currently Disabled\");\r\n        _;\r\n    }\r\n    modifier disable() {\r\n        require(_disabled == false, \"Currently Disabled\");\r\n        _;\r\n    }\r\n    mapping(address => bool) platformAddress;\r\n    constructor() {\r\n        owner = _msgSender();\r\n    }\r\n    function transferOwnership(address payable _owner) public onlyOwner() {\r\n        address previousOwner = owner;\r\n        owner = _owner;\r\n        emit TransferredOwnership(previousOwner, owner, block.timestamp);\r\n    }\r\n    function addPlatformAddress(address _platformAddress) public onlyOwner() {\r\n        require(platformAddress[_platformAddress] == false, \"already platform address\");\r\n        platformAddress[_platformAddress] = true;\r\n\r\n        emit AddedPlatformAddress(_platformAddress, block.timestamp);\r\n    }\r\n    function removePlatformAddress(address _platformAddress) public onlyOwner() {\r\n        require(platformAddress[_platformAddress] == true, \"not platform address\");\r\n        platformAddress[_platformAddress] = false;\r\n\r\n        emit RemovedPlatformAddress(_platformAddress, block.timestamp);\r\n    }\r\n}\r\nlibrary SafeMath {\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\nlibrary Strings {\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        uint256 index = digits - 1;\r\n        temp = value;\r\n        while (temp != 0) {\r\n            buffer[index--] = bytes1(uint8(48 + temp % 10));\r\n            temp /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\nlibrary EnumerableSet {\r\n\r\n    struct Set {\r\n        bytes32[] _values;\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastvalue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastvalue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n    uint256 private _status;\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ncontract MasterKeyStaking is Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    using EnumerableSet for EnumerableSet.UintSet;\r\n    IERC20 public MSFY;\r\n    IPORTAL public Portal;\r\n    address public BBB; //Change this to the BBB Wallet\r\n\r\n    uint256 public listingCost = 10 * (10 ** 18); //Listing cost for the market and to access is 10M Master Tokens\r\n\r\n    struct stakeListing {\r\n        address listingAddress;\r\n        address tokenAddress;\r\n        uint256 tokenAmount;\r\n        uint256 bountyRate; \r\n        uint256 dateListed;\r\n        bool enabled;\r\n    }\r\n    mapping(address => uint256) public userTotalStakes;   \r\n\r\n    mapping(address => mapping(address => bool)) public userTokenManifest; //Mapping from user address to token address to make sure they have one listing    \r\n    mapping(uint256 => stakeListing) public stakeId; //Public Stakign ID information for all Stake Listings.\r\n    mapping(address => EnumerableSet.UintSet) userStakingManifest; //Listing manifest for User ID Stakings\r\n    mapping(address => mapping(address => uint256)) public userCurrentStakeID; //Mapping from useraddress to token address gives ID of current listing\r\n    address public feeCollector; //listing fees are sent here\r\n\r\n    uint256 public stakeIdCounter; //Count alltime individual stake\r\n    uint256 public activeStakes; //Count individual active stake listings\r\n    uint256 public dailyBountyMAX =  10 * (10 ** 18); //Max reward for staking per pay period\r\n    \r\n    //uint256 public listingRewardTimeframe =  86400; //Timeframe for earning listing rewards\r\n    uint256 public stakingRewardTimeframe =  86400; //Timeframe/payperiod for earning staking rewards\r\n    uint256 public BNBListingFee = 25000000000000;\r\n    bool public pricingEnabled = true;\r\n\r\n    constructor() {\r\n        MSFY = IERC20(address(0xa10E3590c4373C3Cc5d871776EF90ca1F1DD12D2)); //Token Contract\r\n        BBB = address(0xFCF2549976D112cd29b6A52c735A3E2FD15f0367);\r\n        Portal = IPORTAL(address(0x91413988633f071975e103C6F492C4823f660C66)); //Marketplace Address\r\n        addPlatformAddress(msg.sender);\r\n        feeCollector = address(0xFCF2549976D112cd29b6A52c735A3E2FD15f0367);\r\n    }\r\n\r\n    receive() external payable{}\r\n    fallback() external payable {}\r\n\r\n    modifier isHoldingXMSFY(uint256 _value) {\r\n        require(MSFY.balanceOf(msg.sender) >= _value, \"Must be holding MSFY Tokens.\");\r\n        _;\r\n    }\r\n\r\n    modifier BNBFeeEnabled() {\r\n        if (pricingEnabled == true)   {\r\n            uint256 requiredBNBBalance = Portal.getListingPrice();\r\n            require(msg.value >= requiredBNBBalance, \"Insufficient BNB Balance\"); \r\n            _;\r\n        } else {\r\n            _;\r\n        }\r\n    }\r\n\r\n    function setBNBFeeEnabled(bool _value) public onlyPlatform() {\r\n        pricingEnabled = _value;\r\n    }\r\n\r\n    function setBBBAddress(address _value) public onlyPlatform() {\r\n        BBB = address(_value);\r\n    }\r\n\r\n    function setBNBListingFee(uint256 _value) public onlyPlatform() {\r\n        BNBListingFee = _value;\r\n    }\r\n    \r\n    function setMSFYAddress(address _value) public onlyPlatform() {\r\n        MSFY = IERC20(_value);\r\n    }\r\n    function setPortalAddress(address _value) public onlyPlatform() {\r\n        Portal = IPORTAL(_value);\r\n    }\r\n    \r\n    function setStakingRewardTimeframe(uint256 _value) public onlyPlatform() {\r\n        stakingRewardTimeframe = _value;\r\n    }\r\n\r\n    function setFeeCollectorAddress(address _value) public onlyPlatform() {\r\n        feeCollector = address(_value);\r\n    }\r\n\r\n    function getListingPrice() public view returns (uint256)  {\r\n        return Portal.getListingPrice();\r\n    }\r\n\r\n    function stakeTokens(address _tokenAddress, uint256 _amount) public payable nonReentrant() isHoldingXMSFY(listingCost) BNBFeeEnabled() {\r\n        require(userTokenManifest[msg.sender][_tokenAddress] == false, \"!IsListed\");\r\n        \r\n        IERC20 tokenContract;\r\n        tokenContract = IERC20(_tokenAddress);\r\n        require(Portal.tokenWhitelist(_tokenAddress) == true, \"!=Whitelisted\");\r\n        require(_amount > 0, \">0\");\r\n\r\n        MSFY.transferFrom(msg.sender, BBB, listingCost);\r\n        tokenContract.transferFrom(msg.sender, address(this), _amount);\r\n        stakeIdCounter = stakeIdCounter.add(1);\r\n        stakeListing memory Stake;\r\n        uint256 bountyRate = convertDecimals(_tokenAddress, address(MSFY), _amount);\r\n        if (bountyRate > dailyBountyMAX)   {\r\n            bountyRate = dailyBountyMAX;\r\n        }\r\n        Stake = stakeListing( msg.sender, _tokenAddress, _amount, bountyRate, block.timestamp, true);\r\n        stakeId[stakeIdCounter] = Stake;\r\n        activeStakes = activeStakes + 1;\r\n        userStakingManifest[msg.sender].add(stakeIdCounter);\r\n        userCurrentStakeID[msg.sender][_tokenAddress] = stakeIdCounter;\r\n        userTotalStakes[msg.sender] = userTotalStakes[msg.sender].add(1);\r\n        userTokenManifest[msg.sender][_tokenAddress] = true;\r\n        if (pricingEnabled == true)   {\r\n            (bool success, ) = feeCollector.call{value: address(this).balance}(\"\");\r\n        }\r\n    }\r\n\r\n    function unstakeTokens(uint256 _stakeId) public payable nonReentrant() isHoldingXMSFY(listingCost) BNBFeeEnabled() {\r\n        require(stakeId[_stakeId].listingAddress == msg.sender, \"!Ownership\");\r\n        require(stakeId[_stakeId].enabled == true, \"!Enabled\");\r\n\r\n        uint256 stakeReward = getStakeRewards(_stakeId);\r\n        IERC20 tokenContract;\r\n        tokenContract = IERC20(stakeId[_stakeId].tokenAddress);\r\n\r\n        stakeListing memory Stake = stakeId[_stakeId];\r\n        Stake.enabled = false;\r\n\r\n        stakeId[_stakeId].enabled = false;\r\n\r\n        //tokenContract.transferFrom(address(this), msg.sender, stakeId[_stakeId].tokenAmount);\r\n        tokenContract.transfer(msg.sender, stakeId[_stakeId].tokenAmount);\r\n        MSFY.transfer(msg.sender, stakeReward);\r\n        MSFY.transferFrom(msg.sender, address(this), listingCost);  \r\n\t\t\r\n        activeStakes = activeStakes - 1;    \r\n        userStakingManifest[msg.sender].remove(_stakeId);  \r\n        userTotalStakes[msg.sender] = userTotalStakes[msg.sender].sub(1);\r\n        userTokenManifest[msg.sender][stakeId[_stakeId].tokenAddress] = false;\r\n        if (pricingEnabled == true)   {\r\n            (bool success , ) = feeCollector.call{value: address(this).balance}(\"\");\r\n        }\r\n        stakeId[_stakeId] = Stake;\r\n    }\r\n\r\n    function getStakeRewards(uint256 _tokenId) public view returns (uint256) {\r\n\r\n        uint256 datelisted = stakeId[_tokenId].dateListed;\r\n        uint256 currenttime = block.timestamp;\r\n        uint256 dayselapsed = ((currenttime - datelisted) / stakingRewardTimeframe);\r\n        \r\n        uint256 stakeReward = stakeId[_tokenId].bountyRate * dayselapsed;\r\n\r\n        return stakeReward;\r\n    }\r\n    function getUserStakingManifest(address _address, uint256 cursor, uint256 size) public view returns (uint256[] memory stakeIds, uint256) {\r\n        uint256 length = size;\r\n        if (length > userStakingManifest[_address].length() - cursor) {\r\n            length = userStakingManifest[_address].length() - cursor;\r\n        }\r\n        stakeIds = new uint[](length);\r\n        for (uint256 i = 0; i < length; i++) {\r\n            stakeIds[i] = userStakingManifest[_address].at(cursor + i);\r\n        }\r\n        return (stakeIds, cursor + length);\r\n    }\r\n\r\n    function convertDecimals(address _fromToken, address _toToken, uint256 _amount) public view returns (uint256) {\r\n        return convertDecimal(_amount, getDecimals(_fromToken), getDecimals(_toToken));\r\n    }\r\n\r\n    function getDecimals(address _token) internal view returns (uint256) {\r\n        return IERC20(_token).decimals();\r\n    }\r\n\r\n    function convertDecimal(uint256 _tokenAmount, uint256 _token1decimals, uint256 _token2decimals) internal pure returns (uint256) {\r\n        if (_token1decimals > _token2decimals)\r\n            return _tokenAmount / (10**(_token1decimals - _token2decimals));\r\n        else\r\n            return _tokenAmount * (10**(_token2decimals - _token1decimals));\r\n    }\r\n\r\n    function emergencyWithdrawNative(uint256 _value) public onlyPlatform() nonReentrant() {\r\n        (bool success, ) = owner.call{value: _value}(\"\");\r\n        require(success, \"Failed to send\");\r\n    }\r\n\r\n    function emergencyWithdrawERC20(uint256 _value, address tokenAddress) public onlyPlatform() nonReentrant()  {\r\n        IERC20 tokenContract;\r\n        tokenContract = IERC20(tokenAddress);\r\n        tokenContract.transfer(msg.sender, _value);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_platformAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"AddedPlatformAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_platformAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"RemovedPlatformAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_previous\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_next\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"TransferredOwnership\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"BBB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BNBListingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MSFY\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Portal\",\"outputs\":[{\"internalType\":\"contract IPORTAL\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platformAddress\",\"type\":\"address\"}],\"name\":\"addPlatformAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convertDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dailyBountyMAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"emergencyWithdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getListingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getStakeRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cursor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"getUserStakingManifest\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"stakeIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listingCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platformAddress\",\"type\":\"address\"}],\"name\":\"removePlatformAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setBBBAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setBNBFeeEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setBNBListingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setFeeCollectorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setMSFYAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setPortalAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setStakingRewardTimeframe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"listingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bountyRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dateListed\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeIdCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingRewardTimeframe\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"unstakeTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userCurrentStakeID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTokenManifest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTotalStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MasterKeyStaking", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7699ad5cf827a1cd6afb76029f8a65647b72b0e752b29601b146070118cd58e2"}