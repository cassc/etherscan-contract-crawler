{"SourceCode": "// SPDX-License-Identifier: Unlicensed \r\n// Not open source - Custom Contract Created for HYLAL Token by Gen t.me/GenTokens_GEN TokensByGen.com\r\n\r\n\r\npragma solidity 0.8.19;\r\n\r\ninterface IERC20 {\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IDividendDistributor {\r\n\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external;\r\n    function setShare(address shareholder, uint256 amount) external;\r\n    function deposit() external payable;\r\n    function process(uint256 gas) external;\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function factory() external view returns (address);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n}\r\n\r\ncontract DividendDistributor is IDividendDistributor {\r\n\r\n    address _token;\r\n\r\n    struct Share {\r\n        uint256 amount;\r\n        uint256 totalExcluded;\r\n        uint256 totalRealised;\r\n    }\r\n\r\n    // Reward Token BUSD\r\n    IERC20 RWDTOKEN = IERC20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);\r\n    \r\n    // WBNB (BSC)\r\n    address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n\r\n    IUniswapV2Router02 public DivRouter;\r\n\r\n    address[] shareholders;\r\n    mapping (address => uint256) shareholderIndexes;\r\n    mapping (address => uint256) shareholderClaims;\r\n\r\n    mapping (address => Share) public shares;\r\n\r\n    uint256 public totalShares;\r\n    uint256 public totalDividends;\r\n    uint256 public totalDistributed;\r\n    uint256 public dividendsPerShare;\r\n    uint256 public dividendsPerShareAccuracyFactor = 10 ** 36;\r\n\r\n    uint256 public minPeriod = 900; // 15 minutes (900 Seconds)\r\n    uint256 public minDistribution = 1 * (10 ** 17); // $0.10 required for payout\r\n\r\n    uint256 currentIndex;\r\n\r\n    modifier onlyToken() {\r\n        \r\n        require(msg.sender == _token);\r\n        _;\r\n    }\r\n\r\n    constructor () {\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E); \r\n        DivRouter = _uniswapV2Router;\r\n        _token = msg.sender;\r\n    }\r\n\r\n\r\n\r\n    function Claim_Rewards() external {\r\n        distributeDividend(msg.sender);\r\n    }\r\n\r\n\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external override onlyToken {\r\n        minPeriod = _minPeriod;\r\n        minDistribution = _minDistribution;\r\n    }\r\n\r\n    function setShare(address shareholder, uint256 amount) external override onlyToken {\r\n        if(shares[shareholder].amount > 0){\r\n            distributeDividend(shareholder);\r\n        }\r\n\r\n        if(amount > 0 && shares[shareholder].amount == 0){\r\n            addShareholder(shareholder);\r\n        }else if(amount == 0 && shares[shareholder].amount > 0){\r\n            removeShareholder(shareholder);\r\n        }\r\n\r\n        totalShares = totalShares + amount - shares[shareholder].amount;\r\n        shares[shareholder].amount = amount;\r\n        shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n    }\r\n\r\n    function deposit() external payable override onlyToken {\r\n\r\n        uint256 balanceBefore = RWDTOKEN.balanceOf(address(this));\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = WBNB;\r\n        path[1] = address(RWDTOKEN);\r\n\r\n        DivRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amount = RWDTOKEN.balanceOf(address(this)) - balanceBefore;\r\n        totalDividends += amount;\r\n        dividendsPerShare = dividendsPerShare + (dividendsPerShareAccuracyFactor * amount / totalShares);\r\n\r\n    }\r\n\r\n    function process(uint256 gas) external override onlyToken {\r\n\r\n        if (RWDTOKEN.balanceOf(address(this)) == 0) { return; }\r\n       \r\n        uint256 shareholderCount = shareholders.length;\r\n\r\n        if(shareholderCount == 0) { return; }\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        uint256 iterations = 0;\r\n\r\n        while(gasUsed < gas && iterations < shareholderCount) {\r\n            if(currentIndex >= shareholderCount){\r\n                currentIndex = 0;\r\n            }\r\n\r\n            if(shouldDistribute(shareholders[currentIndex])){\r\n                distributeDividend(shareholders[currentIndex]);\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n    \r\n    function shouldDistribute(address shareholder) internal view returns (bool) {\r\n        return shareholderClaims[shareholder] + minPeriod < block.timestamp\r\n                && getUnpaidEarnings(shareholder) > minDistribution;\r\n    }\r\n\r\n    function distributeDividend(address shareholder) internal {\r\n\r\n        if(shares[shareholder].amount == 0){\r\n\r\n            return;\r\n        }\r\n\r\n        uint256 amount = getUnpaidEarnings(shareholder);\r\n\r\n        if(amount > 0){\r\n\r\n            totalDistributed += amount;\r\n            shareholderClaims[shareholder] = block.timestamp;\r\n            shares[shareholder].totalRealised += amount;\r\n            shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n            RWDTOKEN.transfer(shareholder, amount);\r\n        }\r\n    }\r\n\r\n    function getUnpaidEarnings(address shareholder) public view returns (uint256) {\r\n\r\n\r\n        if(shares[shareholder].amount == 0){ return 0; }\r\n\r\n        uint256 shareholderTotalDividends = getCumulativeDividends(shares[shareholder].amount);\r\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\r\n\r\n        if(shareholderTotalDividends <= shareholderTotalExcluded){ return 0; }\r\n\r\n        return shareholderTotalDividends - shareholderTotalExcluded;\r\n    }\r\n\r\n    function getCumulativeDividends(uint256 share) internal view returns (uint256) {\r\n        return share * dividendsPerShare / dividendsPerShareAccuracyFactor;\r\n    }\r\n\r\n    function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n\r\n    function removeShareholder(address shareholder) internal {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];\r\n        shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract HYLAL is Context, IERC20 { \r\n\r\n    // Contract Wallets\r\n    address private _owner = 0x90F8C0f25Cbd826B3a80d945fe58BD00c55e4c72;  \r\n    address public Wallet_Liquidity = 0x90F8C0f25Cbd826B3a80d945fe58BD00c55e4c72; \r\n    address public Wallet_Tokens = 0x90F8C0f25Cbd826B3a80d945fe58BD00c55e4c72;\r\n    address payable public Wallet_Marketing = payable(0x90F8C0f25Cbd826B3a80d945fe58BD00c55e4c72); \r\n    address payable public Wallet_Charity = payable(0x90F8C0f25Cbd826B3a80d945fe58BD00c55e4c72); \r\n\r\n    // Burn Wallet\r\n    address private constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    // Token Info\r\n    string private  constant _name = \"HYLAL\";\r\n    string private  constant _symbol = \"HYLAL\";\r\n    uint256 private constant _decimals = 18;\r\n    uint256 private constant _tTotal = 200_000_000_000 * 10 ** _decimals;\r\n\r\n    // Project Links\r\n    string private _Website;\r\n    string private _Telegram;\r\n    string private _LP_Lock;\r\n\r\n    // Limits\r\n    uint256 private max_Hold = _tTotal;\r\n    uint256 private max_Tran = _tTotal;\r\n\r\n    // Fees\r\n    uint8 public _Fee__Buy_Charity;\r\n    uint8 public _Fee__Buy_Liquidity;\r\n    uint8 public _Fee__Buy_Marketing;\r\n    uint8 public _Fee__Buy_Rewards;\r\n    uint8 public _Fee__Buy_Tokens;\r\n\r\n    uint8 public _Fee__Sell_Charity;\r\n    uint8 public _Fee__Sell_Liquidity;\r\n    uint8 public _Fee__Sell_Marketing;\r\n    uint8 public _Fee__Sell_Rewards;\r\n    uint8 public _Fee__Sell_Tokens;\r\n\r\n    // Total Fee for Swap\r\n    uint8 private _SwapFeeTotal_Buy;\r\n    uint8 private _SwapFeeTotal_Sell;\r\n\r\n    // Gas Amount\r\n    uint256 distributorGas = 500000;\r\n\r\n    // Factory\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n\r\n\r\n\r\n\r\n    constructor () {\r\n\r\n        // Set PancakeSwap Router Address\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\r\n        // Create Initial Pair With BNB\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        // Create Reward Tracker Contract\r\n        distributor = new DividendDistributor();\r\n\r\n        // Set Initial LP Pair\r\n        _isPair[uniswapV2Pair] = true;   \r\n\r\n        // Wallets Excluded From Limits\r\n        _isLimitExempt[address(this)] = true;\r\n        _isLimitExempt[DEAD] = true;\r\n        _isLimitExempt[uniswapV2Pair] = true;\r\n        _isLimitExempt[_owner] = true;\r\n\r\n        // Wallets With Pre-Launch Access\r\n        _isWhitelisted[_owner] = true;\r\n\r\n        // Wallets Excluded From Fees\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[DEAD] = true;\r\n        _isExcludedFromFee[_owner] = true;\r\n\r\n        // Wallets Excluded From Rewards\r\n        _isExcludedFromRewards[uniswapV2Pair] = true;\r\n        _isExcludedFromRewards[address(this)] = true;\r\n        _isExcludedFromRewards[_owner] = true;\r\n        _isExcludedFromRewards[DEAD] = true;\r\n\r\n        // Transfer Supply To Owner\r\n        _tOwned[_owner] = _tTotal;\r\n\r\n        // Emit token transfer to owner\r\n        emit Transfer(address(0), _owner, _tTotal);\r\n\r\n        // Emit Ownership Transfer\r\n        emit OwnershipTransferred(address(0), _owner);\r\n\r\n    }\r\n\r\n    \r\n    // Events\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event updated_Wallet_Limits(uint256 max_Tran, uint256 max_Hold);\r\n    event updated_Buy_fees(uint8 Marketing, uint8 Liquidity, uint8 Rewards, uint8 Charity, uint8 Tokens);\r\n    event updated_Sell_fees(uint8 Marketing, uint8 Liquidity, uint8 Rewards, uint8 Charity, uint8 Tokens);\r\n    event updated_SwapAndLiquify_Enabled(bool Swap_and_Liquify_Enabled);\r\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity);\r\n\r\n\r\n    // Restrict Function to Current Owner\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    // Mappings\r\n    mapping (address => uint256) private _tOwned;                               // Tokens Owned\r\n    mapping (address => mapping (address => uint256)) private _allowances;      // Allowance to spend another wallets tokens\r\n    mapping (address => bool) public _isExcludedFromFee;                        // Wallets that do not pay fees\r\n    mapping (address => bool) public _isLimitExempt;                            // Wallets that are excluded from HOLD and TRANSFER limits\r\n    mapping (address => bool) public _isPair;                                   // Address is liquidity pair\r\n    mapping (address => bool) public _isWhitelisted;                            // Pre-Launch Access\r\n    mapping (address => bool) public _isExcludedFromRewards;                    // Excluded from Rewards\r\n    mapping (address => bool) public _isExcludedFromProcess;                    // Excluded from triggering reward processing (Used during airdrops!)\r\n\r\n    // Set Distributor\r\n    DividendDistributor public distributor;\r\n\r\n\r\n    // Public Token Info\r\n    function Token_Information() external view returns(address Owner_Wallet,\r\n                                                       uint256 Transaction_Limit,\r\n                                                       uint256 Max_Wallet,\r\n                                                       uint256 Fee_When_Buying,\r\n                                                       uint256 Fee_When_Selling,\r\n                                                       string memory Website,\r\n                                                       string memory Telegram,\r\n                                                       string memory Liquidity_Lock,\r\n                                                       string memory Custom_Contract_Created_By) {\r\n\r\n                                                           \r\n        string memory Creator = \"https://tokensbygen.com\";\r\n\r\n        uint256 Total_buy =  _Fee__Buy_Charity      +\r\n                             _Fee__Buy_Liquidity    +\r\n                             _Fee__Buy_Marketing    +\r\n                             _Fee__Buy_Rewards      +\r\n                             _Fee__Buy_Tokens       ;\r\n\r\n        uint256 Total_sell = _Fee__Sell_Charity     +   \r\n                             _Fee__Sell_Liquidity   +\r\n                             _Fee__Sell_Marketing   +\r\n                             _Fee__Sell_Rewards     +\r\n                             _Fee__Sell_Tokens      ;\r\n\r\n\r\n        uint256 _max_Hold = max_Hold / 10 ** _decimals;\r\n        uint256 _max_Tran = max_Tran / 10 ** _decimals;\r\n\r\n        if (_max_Tran > _max_Hold) {\r\n\r\n            _max_Tran = _max_Hold;\r\n        }\r\n\r\n\r\n        // Return Token Data\r\n        return (_owner,\r\n                _max_Tran,\r\n                _max_Hold,\r\n                Total_buy,\r\n                Total_sell,\r\n                _Website,\r\n                _Telegram,\r\n                _LP_Lock,\r\n                Creator);\r\n\r\n    }\r\n    \r\n\r\n    // Fee Processing Triggers\r\n    uint8 private swapTrigger = 11;\r\n    uint8 private swapCounter = 1;    \r\n    \r\n    // SwapAndLiquify Switch                  \r\n    bool public inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled; \r\n\r\n    // Launch Settings\r\n    bool private Trade_Open;\r\n    bool private No_Fee_Transfers = true;\r\n\r\n    // Fee Tracker\r\n    bool private takeFee;\r\n\r\n    /*\r\n    \r\n    -----------------\r\n    BUY AND SELL FEES\r\n    -----------------\r\n\r\n    */\r\n\r\n\r\n    // Buy Fees\r\n    function Set_Fees_on_Buy(\r\n\r\n        uint8 Marketing_on_BUY,\r\n        uint8 Charity_on_BUY,\r\n        uint8 Liquidity_on_BUY, \r\n        uint8 Rewards_on_BUY, \r\n        uint8 Tokens_on_BUY\r\n\r\n        ) external onlyOwner {\r\n\r\n        require (Marketing_on_BUY    +\r\n                 Charity_on_BUY      +\r\n                 Liquidity_on_BUY    + \r\n                 Rewards_on_BUY      +\r\n                 Tokens_on_BUY       <= 9, \"F1\"); // Buy fees are limited to 9%\r\n\r\n        // Update Fees\r\n        _Fee__Buy_Marketing  = Marketing_on_BUY;\r\n        _Fee__Buy_Charity    = Charity_on_BUY;\r\n        _Fee__Buy_Liquidity  = Liquidity_on_BUY;\r\n        _Fee__Buy_Rewards    = Rewards_on_BUY;\r\n        _Fee__Buy_Tokens     = Tokens_on_BUY;\r\n\r\n        // Fees For Processing\r\n        _SwapFeeTotal_Buy    = _Fee__Buy_Marketing + _Fee__Buy_Liquidity + _Fee__Buy_Rewards + _Fee__Buy_Charity;\r\n        emit updated_Buy_fees(_Fee__Buy_Marketing, _Fee__Buy_Liquidity, _Fee__Buy_Rewards, _Fee__Buy_Charity, _Fee__Buy_Tokens);\r\n    }\r\n\r\n    // Sell Fees\r\n    function Set_Fees_on_Sell(\r\n\r\n        uint8 Marketing_on_SELL,\r\n        uint8 Charity_on_SELL,\r\n        uint8 Liquidity_on_SELL, \r\n        uint8 Rewards_on_SELL, \r\n        uint8 Tokens_on_SELL\r\n\r\n        ) external onlyOwner {\r\n\r\n        require (Marketing_on_SELL  +\r\n                 Charity_on_SELL    +\r\n                 Liquidity_on_SELL  + \r\n                 Rewards_on_SELL    +\r\n                 Tokens_on_SELL     <= 9, \"F2\");  // Sell fees are limited to 9%\r\n\r\n        // Update Fees\r\n        _Fee__Sell_Marketing  = Marketing_on_SELL;\r\n        _Fee__Sell_Charity    = Charity_on_SELL;\r\n        _Fee__Sell_Liquidity  = Liquidity_on_SELL;\r\n        _Fee__Sell_Rewards    = Rewards_on_SELL;\r\n        _Fee__Sell_Tokens     = Tokens_on_SELL;\r\n\r\n\r\n        // Fees For Processing\r\n        _SwapFeeTotal_Sell    = _Fee__Sell_Marketing + _Fee__Sell_Liquidity + _Fee__Sell_Rewards + _Fee__Sell_Charity;\r\n        emit updated_Sell_fees(_Fee__Sell_Marketing, _Fee__Sell_Liquidity, _Fee__Sell_Rewards,  _Fee__Sell_Charity, _Fee__Sell_Tokens);\r\n    }\r\n\r\n\r\n    /*\r\n    \r\n    ------------------------------------------\r\n    SET MAX TRANSACTION AND MAX HOLDING LIMITS\r\n    ------------------------------------------\r\n\r\n    To protect buyers, these values must be set to a minimum of 0.5% of the total supply\r\n\r\n    Total Supply = 300_000_000_000_000\r\n\r\n    Common Percentages \r\n\r\n    0.5% = 1_000_000_000\r\n    1.0% = 2_000_000_000\r\n    1.5% = 3_000_000_000\r\n    2.0% = 4_000_000_000\r\n    2.5% = 5_000_000_000\r\n    3.0% = 6_000_000_000\r\n    100% = 200_000_000_000\r\n    \r\n    */\r\n\r\n    function Set_Wallet_Limits(\r\n\r\n        uint256 Max_Tokens_Each_Transaction,\r\n        uint256 Max_Total_Tokens_Per_Wallet \r\n\r\n        ) external onlyOwner {\r\n\r\n            require(Max_Tokens_Each_Transaction >= 1_000_000_000, \"W1\"); // Max Transaction must be greater than 0.5% of supply\r\n            require(Max_Total_Tokens_Per_Wallet >= 1_000_000_000, \"W2\"); // Max Wallet must be greater than 0.5% of supply\r\n\r\n            max_Tran = Max_Tokens_Each_Transaction * 10**_decimals;\r\n            max_Hold = Max_Total_Tokens_Per_Wallet * 10**_decimals;\r\n\r\n            emit updated_Wallet_Limits(max_Tran, max_Hold);\r\n\r\n    }\r\n\r\n\r\n    // Open Trade\r\n    function Open_Trade() external onlyOwner {\r\n\r\n        // Can Only Use Once!\r\n        require(!Trade_Open);\r\n\r\n        swapAndLiquifyEnabled = true;\r\n        Trade_Open = true;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    /*\r\n    \r\n    ---------------------------------\r\n    No FEE WALLET TO WALLET TRANSFERS\r\n    ---------------------------------\r\n\r\n    Default = true\r\n\r\n    Having no fee on wallet-to-wallet transfers means that people can move tokens between wallets, \r\n    or send them to friends etc without incurring a fee. \r\n\r\n    If false, the 'Buy' fee will apply to all wallet to wallet transfers.\r\n\r\n    */\r\n\r\n    function No_Fee_Wallet_Transfers(bool true_or_false) public onlyOwner {\r\n\r\n        No_Fee_Transfers = true_or_false;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    /*\r\n\r\n    -------------\r\n    REWARD TOKENS\r\n    -------------\r\n\r\n    */\r\n\r\n    function Rewards__Exclude_From_Rewards(address Wallet_Address, bool true_or_false) external onlyOwner {\r\n\r\n        require(Wallet_Address != address(this) && Wallet_Address != uniswapV2Pair);\r\n        _isExcludedFromRewards[Wallet_Address] = true_or_false;\r\n\r\n        if(true_or_false){\r\n\r\n            distributor.setShare(Wallet_Address, 0);\r\n\r\n            } else {\r\n\r\n            distributor.setShare(Wallet_Address, _tOwned[Wallet_Address]);\r\n        }\r\n    }\r\n\r\n    /*\r\n\r\n\r\n        IMPORTANT: Remember the Decimals - BUSD has 18 decimals!\r\n        100000000000000000 (17 zeroes) = $0.10\r\n\r\n    */\r\n\r\n    function Rewards__Distribution_Triggers(uint256 Minutes_Between_Payments, uint256 Required_Reward_Balance) external onlyOwner {\r\n\r\n        // Max Wait is 2 Days\r\n        require(Minutes_Between_Payments <= 2880,\"R1\"); // Can not set wait time to longer than 2 days!\r\n\r\n        // Convert minutes to seconds\r\n        uint256 _minPeriod = Minutes_Between_Payments * 60;\r\n\r\n        distributor.setDistributionCriteria(_minPeriod, Required_Reward_Balance);\r\n\r\n    }\r\n\r\n\r\n    function Rewards__Set_Gas(uint256 Gas_Amount) external onlyOwner {\r\n\r\n        require(Gas_Amount < 750000);\r\n        distributorGas = Gas_Amount;\r\n\r\n    }\r\n    \r\n\r\n    /*\r\n\r\n    ----------------------\r\n    UPDATE PROJECT WALLETS\r\n    ----------------------\r\n\r\n    */\r\n\r\n\r\n    function Update_Wallet_Charity(\r\n\r\n        address payable Charity_Wallet\r\n\r\n        ) external onlyOwner {\r\n\r\n        // Update Charity Fee Wallet\r\n        require(Charity_Wallet != address(0), \"W1\"); // Enter a valid BSC Address\r\n        Wallet_Charity = payable(Charity_Wallet);\r\n        \r\n    }\r\n\r\n    function Update_Wallet_Liquidity(\r\n\r\n        address Liquidity_Collection_Wallet\r\n\r\n        ) external onlyOwner {\r\n\r\n        // Update LP Collection Wallet\r\n        require(Liquidity_Collection_Wallet != address(0), \"W2\"); // Enter a valid BSC Address\r\n        Wallet_Liquidity = Liquidity_Collection_Wallet;\r\n\r\n    }\r\n\r\n    function Update_Wallet_Marketing(\r\n\r\n        address payable Marketing_Wallet\r\n\r\n        ) external onlyOwner {\r\n\r\n        // Update Marketing Fee Wallet\r\n        require(Marketing_Wallet != address(0), \"W3\"); // Enter a valid BSC Address\r\n        Wallet_Marketing = payable(Marketing_Wallet);\r\n\r\n    }\r\n\r\n    function Update_Wallet_Tokens(\r\n\r\n        address Token_Wallet\r\n\r\n        ) external onlyOwner {\r\n\r\n        // Update Token Fee Wallet\r\n        require(Token_Wallet != address(0), \"W4\"); // Enter a valid BSC Address\r\n        Wallet_Tokens = Token_Wallet;\r\n\r\n    }\r\n\r\n    /*\r\n\r\n    --------------------\r\n    UPDATE PROJECT LINKS\r\n    --------------------\r\n\r\n    */\r\n\r\n    function Update_Links_Website(\r\n\r\n        string memory Website_URL\r\n\r\n        ) external onlyOwner{\r\n\r\n        _Website = Website_URL;\r\n\r\n    }\r\n\r\n\r\n    function Update_Links_Telegram(\r\n\r\n        string memory Telegram_URL\r\n\r\n        ) external onlyOwner{\r\n\r\n        _Telegram = Telegram_URL;\r\n\r\n    }\r\n\r\n\r\n    function Update_Links_Liquidity_Lock(\r\n\r\n        string memory LP_Lock_URL\r\n\r\n        ) external onlyOwner{\r\n\r\n        _LP_Lock = LP_Lock_URL;\r\n\r\n    }\r\n\r\n\r\n \r\n    /*\r\n    \r\n    ----------------------\r\n    ADD NEW LIQUIDITY PAIR\r\n    ----------------------\r\n\r\n    */\r\n\r\n    // Add Liquidity Pair\r\n    function Maintenance__Add_Liquidity_Pair(\r\n\r\n        address Wallet_Address,\r\n        bool true_or_false)\r\n\r\n         external onlyOwner {\r\n        _isPair[Wallet_Address] = true_or_false;\r\n        _isLimitExempt[Wallet_Address] = true_or_false;\r\n    } \r\n\r\n\r\n\r\n    /* \r\n\r\n    ----------------------------\r\n    CONTRACT OWNERSHIP FUNCTIONS\r\n    ----------------------------\r\n\r\n    */\r\n\r\n\r\n    // Transfer to New Owner\r\n    function Ownership_TRANSFER(address payable newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"O1\"); // Enter a valid BSC Address\r\n\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n\r\n        // Remove old owner status \r\n        _isLimitExempt[owner()]     = false;\r\n        _isExcludedFromFee[owner()] = false;\r\n        _isWhitelisted[owner()]     = false;\r\n\r\n        _owner = newOwner;\r\n\r\n        // Add new owner status\r\n        _isLimitExempt[owner()]     = true;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isWhitelisted[owner()]     = true;\r\n\r\n    }\r\n\r\n  \r\n    // Renounce Ownership\r\n    function Ownership_RENOUNCE() public virtual onlyOwner {\r\n\r\n        emit OwnershipTransferred(_owner, address(0));\r\n\r\n        // Remove old owner status \r\n        _isLimitExempt[owner()]     = false;\r\n        _isExcludedFromFee[owner()] = false;\r\n        _isWhitelisted[owner()]     = false;\r\n\r\n        _owner = address(0);\r\n    }\r\n\r\n\r\n\r\n\r\n    /*\r\n\r\n    --------------\r\n    FEE PROCESSING\r\n    --------------\r\n\r\n    */\r\n\r\n\r\n    // Auto Fee Processing Switch\r\n    function Process__Auto(bool true_or_false) external onlyOwner {\r\n        swapAndLiquifyEnabled = true_or_false;\r\n        emit updated_SwapAndLiquify_Enabled(true_or_false);\r\n    }\r\n\r\n    // Manually Process Fees\r\n    function Process__Manual(uint256 Percent_of_Tokens_to_Process) external onlyOwner {\r\n        require(!inSwapAndLiquify, \"P1\"); // Already processing fees!\r\n        if (Percent_of_Tokens_to_Process > 100){Percent_of_Tokens_to_Process == 100;}\r\n        uint256 tokensOnContract = balanceOf(address(this));\r\n        uint256 sendTokens = tokensOnContract * Percent_of_Tokens_to_Process / 100;\r\n        swapAndLiquify(sendTokens);\r\n\r\n    }\r\n\r\n    // Remove Random Tokens - number_of_Tokens must include the decimals too!\r\n    function Process__Rescue_Tokens(\r\n\r\n        address random_Token_Address,\r\n        uint256 number_of_Tokens\r\n\r\n        ) external onlyOwner {\r\n\r\n            // Can Not Remove Native Token\r\n            require (random_Token_Address != address(this), \"P2\"); // Can not purge the native token - Must be processed as fees!\r\n            IERC20(random_Token_Address).transfer(msg.sender, number_of_Tokens);\r\n            \r\n    }\r\n\r\n    // Update Swap Count Trigger\r\n    function Process__Trigger_Count(uint8 Transaction_Count) external onlyOwner {\r\n\r\n        // To Save Gas, Start At 1 Not 0\r\n        swapTrigger = Transaction_Count + 1;\r\n    }\r\n\r\n\r\n\r\n\r\n    /*\r\n\r\n    ---------------\r\n    WALLET SETTINGS\r\n    ---------------\r\n\r\n    */\r\n\r\n\r\n    // Exclude From Fees\r\n    function Wallet__Exclude_From_Fees(\r\n\r\n        address Wallet_Address,\r\n        bool true_or_false\r\n\r\n        ) external onlyOwner {\r\n        _isExcludedFromFee[Wallet_Address] = true_or_false;\r\n\r\n    }\r\n\r\n    // When the 'from' wallet is excluded from processing token transfers will not trigger reward contract processing\r\n    function Wallet__Exclude_From_Processing(\r\n\r\n        address Wallet_Address,\r\n        bool true_or_false\r\n\r\n        ) external onlyOwner {\r\n        _isExcludedFromProcess[Wallet_Address] = true_or_false;\r\n\r\n    }\r\n\r\n    // Exclude From Transaction and Holding Limits\r\n    function Wallet__Exempt_From_Limits(\r\n\r\n        address Wallet_Address,\r\n        bool true_or_false\r\n\r\n        ) external onlyOwner {  \r\n        _isLimitExempt[Wallet_Address] = true_or_false;\r\n    }\r\n\r\n    // Grant Pre-Launch Access (Whitelist)\r\n    function Wallet__Pre_Launch_Access(\r\n\r\n        address Wallet_Address,\r\n        bool true_or_false\r\n\r\n        ) external onlyOwner {    \r\n        _isWhitelisted[Wallet_Address] = true_or_false;\r\n    }\r\n\r\n\r\n    \r\n\r\n  \r\n\r\n\r\n\r\n\r\n    /*\r\n\r\n    -----------------------------\r\n    BEP20 STANDARD AND COMPLIANCE\r\n    -----------------------------\r\n\r\n    */\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _tOwned[account];\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function send_BNB(address _to, uint256 _amount) internal returns (bool SendSuccess) {\r\n        (SendSuccess,) = payable(_to).call{value: _amount}(\"\");\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return (_tTotal - balanceOf(address(DEAD)));\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n   \r\n\r\n\r\n    /*\r\n\r\n    ---------------\r\n    TOKEN TRANSFERS\r\n    ---------------\r\n\r\n    */\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n      ) private {\r\n\r\n\r\n\r\n        require(balanceOf(from) >= amount, \"T1\"); // Sender does not have enough tokens!\r\n\r\n        if (!Trade_Open){\r\n        require(_isWhitelisted[from] || _isWhitelisted[to], \"T2\"); // Trade is not open - Only whitelisted wallets can interact with tokens\r\n        }\r\n\r\n        // Wallet Limit\r\n        if (!_isLimitExempt[to]) {\r\n\r\n            uint256 heldTokens = balanceOf(to);\r\n            require((heldTokens + amount) <= max_Hold, \"T3\"); // Purchase would take balance of max permitted\r\n            \r\n        }\r\n\r\n        // Transaction limit - To send over the transaction limit the sender AND the recipient must be limit exempt\r\n        if (!_isLimitExempt[to] || !_isLimitExempt[from]) {\r\n\r\n            require(amount <= max_Tran, \"T4\"); // Exceeds max permitted transaction amount\r\n        \r\n        }\r\n\r\n\r\n        // Compliance and Safety Checks\r\n        require(from != address(0), \"T5\"); // Enter a valid BSC Address\r\n        require(to != address(0), \"T6\"); // Enter a valid BSC Address\r\n        require(amount > 0, \"T7\"); // Amount of tokens can not be 0\r\n\r\n\r\n        // Check Fee Status\r\n        if(!takeFee){\r\n            \r\n            takeFee = true;\r\n        }\r\n\r\n\r\n        // Trigger Fee Processing\r\n        if (_isPair[to] && !inSwapAndLiquify && swapAndLiquifyEnabled) {\r\n\r\n            // Check Transaction Count\r\n            if(swapCounter >= swapTrigger){\r\n\r\n                // Check Contract Tokens\r\n                uint256 contractTokens = balanceOf(address(this));\r\n\r\n                if (contractTokens > 0) {\r\n\r\n                    // Remove the fee for wallet that triggers processing to avoid inflated sell gas on charts\r\n                    takeFee = false;\r\n\r\n                    // Limit Swap to Max Transaction\r\n                    if (contractTokens <= max_Tran) {\r\n\r\n                        swapAndLiquify (contractTokens);\r\n\r\n                        } else {\r\n\r\n                        swapAndLiquify (max_Tran);\r\n\r\n                    }\r\n                }\r\n            }  \r\n        }\r\n\r\n\r\n\r\n        if(takeFee){\r\n            \r\n            if(_isExcludedFromFee[from] || _isExcludedFromFee[to] || (No_Fee_Transfers && !_isPair[to] && !_isPair[from])){\r\n                takeFee = false;\r\n            }\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n\r\n\r\n            // Distribute Rewards\r\n            if(!_isExcludedFromRewards[from]) {\r\n                try distributor.setShare(from, _tOwned[from]) {} catch {}\r\n            }\r\n\r\n            if(!_isExcludedFromRewards[to]) {\r\n                try distributor.setShare(to, _tOwned[to]) {} catch {} \r\n            }\r\n\r\n            if(!_isExcludedFromProcess[from]) {\r\n                try distributor.process(distributorGas) {} catch {}\r\n            }\r\n\r\n    }\r\n\r\n\r\n    /*\r\n    \r\n    ------------\r\n    PROCESS FEES\r\n    ------------\r\n\r\n    */\r\n\r\n    function swapAndLiquify(uint256 Tokens) private {\r\n\r\n        // Lock Swap\r\n        inSwapAndLiquify        = true;  \r\n\r\n        // Calculate Tokens for Swap\r\n        uint256 _FeesTotal      = _SwapFeeTotal_Buy + _SwapFeeTotal_Sell;\r\n        uint256 LP_Tokens       = Tokens * (_Fee__Buy_Liquidity + _Fee__Sell_Liquidity) / _FeesTotal / 2;\r\n        uint256 Swap_Tokens     = Tokens - LP_Tokens;\r\n\r\n        // Swap Tokens\r\n        uint256 contract_BNB    = address(this).balance;\r\n        swapTokensForBNB(Swap_Tokens);\r\n        uint256 returned_BNB    = address(this).balance - contract_BNB;\r\n\r\n        // Avoid Rounding Errors on LP Fee if Odd Number\r\n        uint256 fee_Split       = _FeesTotal * 2 - (_Fee__Buy_Liquidity + _Fee__Sell_Liquidity);\r\n\r\n        // Calculate BNB Values\r\n        uint256 BNB_Liquidity   = returned_BNB * (_Fee__Buy_Liquidity   + _Fee__Sell_Liquidity)       / fee_Split;\r\n        uint256 BNB_Rewards     = returned_BNB * (_Fee__Buy_Rewards     + _Fee__Sell_Rewards)     * 2 / fee_Split; \r\n        uint256 BNB_Charity     = returned_BNB * (_Fee__Buy_Charity     + _Fee__Sell_Charity)     * 2 / fee_Split; \r\n\r\n        // Add Liquidity \r\n        if (BNB_Liquidity > 0){\r\n            addLiquidity(LP_Tokens, BNB_Liquidity);\r\n            emit SwapAndLiquify(LP_Tokens, BNB_Liquidity, LP_Tokens);\r\n        }\r\n\r\n        // Deposit Rewards\r\n        if(BNB_Rewards > 0){\r\n\r\n            try distributor.deposit{value: BNB_Rewards}() {} catch {}\r\n\r\n        }\r\n\r\n        // Deposit Charity \r\n        if (BNB_Charity > 0){\r\n\r\n            send_BNB(Wallet_Charity, BNB_Charity);\r\n        }\r\n        \r\n\r\n        \r\n        // Deposit Marketing\r\n        contract_BNB = address(this).balance;\r\n\r\n        if (contract_BNB > 0){\r\n\r\n            send_BNB(Wallet_Marketing, contract_BNB);\r\n        }\r\n\r\n\r\n        // Reset Counter\r\n        swapCounter = 1;\r\n\r\n        // Unlock Swap\r\n        inSwapAndLiquify = false;\r\n\r\n\r\n    }\r\n\r\n    // Swap Tokens\r\n    function swapTokensForBNB(uint256 tokenAmount) private {\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, \r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    // Add Liquidity\r\n    function addLiquidity(uint256 tokenAmount, uint256 BNBAmount) private {\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.addLiquidityETH{value: BNBAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, \r\n            0,\r\n            Wallet_Liquidity, \r\n            block.timestamp\r\n        );\r\n    } \r\n\r\n\r\n\r\n    /*\r\n    \r\n    ----------------------------------\r\n    TRANSFER TOKENS AND CALCULATE FEES\r\n    ----------------------------------\r\n\r\n    */\r\n\r\n    uint256 private tSwapFeeTotal;\r\n    uint256 private tTransferAmount;\r\n    uint256 private tTokenFeeAmount;\r\n\r\n    // Transfer Tokens and Calculate Fees\r\n    function _tokenTransfer(address sender, address recipient, uint256 tAmount, bool Fee) private {\r\n\r\n        \r\n        if (Fee){\r\n\r\n            if(_isPair[recipient]){\r\n\r\n                // Sell Fees\r\n                tSwapFeeTotal   = tAmount * _SwapFeeTotal_Sell / 100;\r\n                tTokenFeeAmount = tAmount * _Fee__Sell_Tokens / 100;\r\n\r\n\r\n            } else {\r\n\r\n                // Buy Fees\r\n                tSwapFeeTotal   = tAmount * _SwapFeeTotal_Buy / 100;\r\n                tTokenFeeAmount = tAmount * _Fee__Buy_Tokens / 100;\r\n\r\n            }\r\n\r\n        } else {\r\n\r\n                // No Fees\r\n                tSwapFeeTotal   = 0;\r\n                tTokenFeeAmount = 0;\r\n\r\n        }\r\n\r\n        tTransferAmount = tAmount - (tSwapFeeTotal + tTokenFeeAmount);\r\n\r\n        // Remove Tokens from Sender\r\n        _tOwned[sender] -= tAmount;\r\n\r\n        // Send tokens to recipient\r\n        _tOwned[recipient] += tTransferAmount;\r\n\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n\r\n        // Take the token fee and send to token fee collection wallet\r\n        if(tTokenFeeAmount > 0){\r\n\r\n            _tOwned[Wallet_Tokens] += tTokenFeeAmount;\r\n            emit Transfer(sender, Wallet_Tokens, tTokenFeeAmount);\r\n        }\r\n\r\n        // Take Fees for BNB Processing\r\n        if(tSwapFeeTotal > 0){\r\n\r\n            _tOwned[address(this)] += tSwapFeeTotal;\r\n            emit Transfer(sender, address(this), tSwapFeeTotal);\r\n\r\n            // Increase Transaction Counter\r\n            if (swapCounter < swapTrigger){\r\n                unchecked{swapCounter++;}\r\n            }\r\n                \r\n        }\r\n\r\n    }\r\n\r\n    // This function is required so that the contract can receive BNB during fee processing\r\n    receive() external payable {}\r\n\r\n}\r\n\r\n// Custom contract by GEN https://TokensByGEN.com TG: https://t.me/GenTokens_GEN\r\n// Not open source - Can not be used or forked without permission.", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"Marketing\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"Liquidity\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"Rewards\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"Charity\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"Tokens\",\"type\":\"uint8\"}],\"name\":\"updated_Buy_fees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"Marketing\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"Liquidity\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"Rewards\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"Charity\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"Tokens\",\"type\":\"uint8\"}],\"name\":\"updated_Sell_fees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"Swap_and_Liquify_Enabled\",\"type\":\"bool\"}],\"name\":\"updated_SwapAndLiquify_Enabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"max_Tran\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"max_Hold\",\"type\":\"uint256\"}],\"name\":\"updated_Wallet_Limits\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Wallet_Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"Maintenance__Add_Liquidity_Pair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"No_Fee_Wallet_Transfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Open_Trade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Ownership_RENOUNCE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"Ownership_TRANSFER\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"Process__Auto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Percent_of_Tokens_to_Process\",\"type\":\"uint256\"}],\"name\":\"Process__Manual\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"random_Token_Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"number_of_Tokens\",\"type\":\"uint256\"}],\"name\":\"Process__Rescue_Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"Transaction_Count\",\"type\":\"uint8\"}],\"name\":\"Process__Trigger_Count\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Minutes_Between_Payments\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Required_Reward_Balance\",\"type\":\"uint256\"}],\"name\":\"Rewards__Distribution_Triggers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Wallet_Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"Rewards__Exclude_From_Rewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Gas_Amount\",\"type\":\"uint256\"}],\"name\":\"Rewards__Set_Gas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"Marketing_on_BUY\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"Charity_on_BUY\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"Liquidity_on_BUY\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"Rewards_on_BUY\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"Tokens_on_BUY\",\"type\":\"uint8\"}],\"name\":\"Set_Fees_on_Buy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"Marketing_on_SELL\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"Charity_on_SELL\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"Liquidity_on_SELL\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"Rewards_on_SELL\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"Tokens_on_SELL\",\"type\":\"uint8\"}],\"name\":\"Set_Fees_on_Sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Max_Tokens_Each_Transaction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Max_Total_Tokens_Per_Wallet\",\"type\":\"uint256\"}],\"name\":\"Set_Wallet_Limits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Token_Information\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"Owner_Wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"Transaction_Limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Max_Wallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Fee_When_Buying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Fee_When_Selling\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"Website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"Telegram\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"Liquidity_Lock\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"Custom_Contract_Created_By\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"LP_Lock_URL\",\"type\":\"string\"}],\"name\":\"Update_Links_Liquidity_Lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"Telegram_URL\",\"type\":\"string\"}],\"name\":\"Update_Links_Telegram\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"Website_URL\",\"type\":\"string\"}],\"name\":\"Update_Links_Website\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"Charity_Wallet\",\"type\":\"address\"}],\"name\":\"Update_Wallet_Charity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Liquidity_Collection_Wallet\",\"type\":\"address\"}],\"name\":\"Update_Wallet_Liquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"Marketing_Wallet\",\"type\":\"address\"}],\"name\":\"Update_Wallet_Marketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Token_Wallet\",\"type\":\"address\"}],\"name\":\"Update_Wallet_Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Wallet_Charity\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Wallet_Liquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Wallet_Marketing\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Wallet_Tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Wallet_Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"Wallet__Exclude_From_Fees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Wallet_Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"Wallet__Exclude_From_Processing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Wallet_Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"Wallet__Exempt_From_Limits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Wallet_Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"Wallet__Pre_Launch_Access\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Fee__Buy_Charity\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Fee__Buy_Liquidity\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Fee__Buy_Marketing\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Fee__Buy_Rewards\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Fee__Buy_Tokens\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Fee__Sell_Charity\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Fee__Sell_Liquidity\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Fee__Sell_Marketing\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Fee__Sell_Rewards\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Fee__Sell_Tokens\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromProcess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"contract DividendDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inSwapAndLiquify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "HYLAL", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://165e9134226909682e736edd54b26cac63927c31701b811f75905c3c5942b246"}