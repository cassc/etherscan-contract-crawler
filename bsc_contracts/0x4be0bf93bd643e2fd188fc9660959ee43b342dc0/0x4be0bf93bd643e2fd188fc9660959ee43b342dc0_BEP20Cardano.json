{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-03-05\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-03-02\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-03-02\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2021-10-17\r\n*/\r\n\r\n// SPDX-License-Identifier: GPL-3.0\r\npragma solidity 0.5.16;\r\n\r\ninterface IBEP20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the token decimals.\r\n   */\r\n  function decimals() external view returns (uint8);\r\n\r\n  /**\r\n   * @dev Returns the token symbol.\r\n   */\r\n  function symbol() external view returns (string memory);\r\n\r\n  /**\r\n  * @dev Returns the token name.\r\n  */\r\n  function name() external view returns (string memory);\r\n\r\n  /**\r\n   * @dev Returns the bep token owner.\r\n   */\r\n  function getOwner() external view returns (address);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n  // Empty internal constructor, to prevent people from mistakenly deploying\r\n  // an instance of this contract, which should be used via inheritance.\r\n  constructor () internal { }\r\n\r\n  function _msgSender() internal view returns (address payable) {\r\n    return msg.sender;\r\n  }\r\n\r\n  function _msgData() internal view returns (bytes memory) {\r\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n    return msg.data;\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n   * @dev Returns the addition of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `+` operator.\r\n   *\r\n   * Requirements:\r\n   * - Addition cannot overflow.\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, \"SafeMath: subtraction overflow\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the multiplication of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `*` operator.\r\n   *\r\n   * Requirements:\r\n   * - Multiplication cannot overflow.\r\n   */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, \"SafeMath: division by zero\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0, errorMessage);\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return mod(a, b, \"SafeMath: modulo by zero\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts with custom message when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b != 0, errorMessage);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev Initializes the contract setting the deployer as the initial owner.\r\n   */\r\n  constructor () internal {\r\n    address msgSender = _msgSender();\r\n    _owner = msgSender;\r\n    emit OwnershipTransferred(address(0), msgSender);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the current owner.\r\n   */\r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Leaves the contract without owner. It will not be possible to call\r\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n   *\r\n   * NOTE: Renouncing ownership will leave the contract without an owner,\r\n   * thereby removing any functionality that is only available to the owner.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract BEP20Cardano is Context, IBEP20, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  mapping (address => uint256) private _balances;\r\n\r\n  mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n  uint256 private _totalSupply;\r\n  uint8 public _decimals;\r\n  string public _symbol;\r\n  string public _name;\r\n\r\n  //\u63a8\u8350\u5173\u7cfb\r\n  uint public maxuid;//\u6700\u5927\u7528\u6237id\r\n  mapping(address => uint) public uids;//address=>uid\r\n  mapping(uint => address) public uids_;//uid=>address\r\n  mapping(uint => uint) public pids; //uid=>pid\r\n\r\n  //lp\u77ff\u6c60\u624b\u7eed\u8d39\r\n  uint public uniswapbuyfee=15;\r\n  uint public uniswapsalefee=15;\r\n\r\n  address public uniswapV2Pair;\r\n\r\n  mapping(address=>bool) private _whitearr;\r\n  uint public fee = 3;\r\n\r\n  //\u9ed1\u6d1e\u94b1\u5305\r\n  address public burnacc = address(0x000000000000000000000000000000000000dEaD);\r\n  //\u6148\u5584\u94b1\u5305\r\n  address public csacc = address(0x0F1ee55359620E81aB531C8D85BD0097e7BB8Df7);\r\n  //\u8425\u9500\u94b1\u5305\r\n  address public yxacc = address(0xA8567B50460E295c0d8CB587125Cb702FFcB9559);\r\n  //\u5956\u52b1\u94b1\u5305\r\n  address public jlacc = address(0x5Bf4d340aa84246BA472E05AC616bbF7a05cC867);\r\n  //\u56de\u6d41\u94b1\u5305\r\n  address public hlacc = address(0x29c7C0BffA4A49Bdb698FbBB95A6c1E2373a45F6);\r\n\r\n  //\u9501\u4ed3\u5b9e\u73b0\r\n  uint256 public startTime;//\u65f6\u95f4\u57fa\u6570\r\n  address private _locker1;\r\n  address private _locker2;\r\n  address private _locker3;\r\n  address private _locker4;\r\n\r\n  constructor() public {\r\n    _name = \"worldnft\";\r\n    _symbol = \"WNFT\";\r\n    _decimals = 8;\r\n    _totalSupply = 2200000000 * 10**8;\r\n    maxuid=0;\r\n    // _balances[msg.sender] = _totalSupply;\r\n    _locker1 = 0x64D8CEc90A58a0aE57Ae6C44b5c52E631C2D0447;\r\n    _locker2 = 0x4e3B6D8e773B7066c5604434b807E375B6430E4c;\r\n    _locker3 = 0x272b9B628e25a658754F8f3150C075B5926DE472;\r\n    _locker4 = 0x3e817228d1b83B7999C342c10A98ACED993bcB0c;\r\n\r\n    //\u767d\u540d\u5355\u5730\u5740\r\n    _whitearr[_locker1] = true;\r\n    _whitearr[_locker2] = true;\r\n    _whitearr[_locker3] = true;\r\n    _whitearr[_locker4] = true;\r\n    _whitearr[0x855A2A4D8C79e74CA3Bc1B1664B9911E7F04486D] = true;\r\n    _whitearr[0xaD84d04b7d83F215064a97A74b31D3709aD9D75E] = true;\r\n    _whitearr[0x5Ec61A82b807F56d46E3130139D2Ec88b933E123] = true;\r\n    _whitearr[0x0DDf6c0335CC899E713F8eB9e87169DedFa9c945] = true;\r\n    _whitearr[0x098afee29E144121c551b4C76A8f228208b3966c] = true;\r\n    _whitearr[0x5218ab445cDaE200754A9daAF8c35D2F64FB3bD3] = true;\r\n    _whitearr[0x776f2bC8D4dd259047CA78012627d2cc5cE7631D] = true;\r\n    _whitearr[0x27fD1f85C5352EAC95cF4215636baAF1978Cc211] = true;\r\n    _whitearr[0x5Bf4d340aa84246BA472E05AC616bbF7a05cC867] = true;\r\n    _whitearr[0x4701a84EBED61A2132fF882Ba89026f49E27FD77] = true;\r\n    _whitearr[0xa073d97c108593Aa382F0624f98fB97dF98E2F07] = true;\r\n    _whitearr[0x36Be0d9c4173Ad63f833Bea42164214f8eb8a918] = true;\r\n    _whitearr[0x68Ea723e651ed12b83024D503A95c6ff4D9385c9] = true;\r\n    _whitearr[0x7735f963303D3dDBA983F0DBa042a353A08C188e] = true;\r\n    _whitearr[0x7a945A04d06Ffa24DA5897e67C6867E613A22892] = true;\r\n    _whitearr[0x22f14806573d01872D3cB7380D972d5A335248bf] = true;\r\n    _whitearr[0x129f542843AF0ed078580C245e67B07f2B998b76] = true;\r\n    _whitearr[0x0F318f3273889125e6c51Eaa2eC0682ee539B3F7] = true;\r\n    _whitearr[0x71752D5912625c669B9C04Dc9af87036827Af8D1] = true;\r\n    _whitearr[0xA8567B50460E295c0d8CB587125Cb702FFcB9559] = true;\r\n    _whitearr[0xc0bA592E7b8ab20dB13fEB00158a3b17D2Ae86e2] = true;\r\n    _whitearr[0xa8103F5d1A07961696c2b0fEd65d77Bb4A03Cf9e] = true;\r\n    _whitearr[0xEeE3410f3Be0C4712D1C5F2033AcC13434B8F4f6] = true;\r\n\r\n    _balances[_locker1] = _totalSupply.div(100).mul(30);\r\n    _balances[_locker2] = 150786997 * 10**8;\r\n    _balances[_locker3] = _totalSupply.div(100).mul(15);\r\n    _balances[_locker4] = _totalSupply.div(100).mul(10);\r\n    _balances[0x000000000000000000000000000000000000dEaD] = _totalSupply.div(100).mul(25);\r\n    _balances[0x27fD1f85C5352EAC95cF4215636baAF1978Cc211] = 289213003 * 10**8;\r\n    // _balances[0xEeE3410f3Be0C4712D1C5F2033AcC13434B8F4f6] = 289213003 * 10**8;\r\n\r\n    // emit Transfer(address(0), msg.sender, _totalSupply);\r\n    emit Transfer(address(0),_locker1, _totalSupply.div(100).mul(30));\r\n    emit Transfer(address(0),_locker2, 150786997 * 10**8);\r\n    emit Transfer(address(0),_locker3, _totalSupply.div(100).mul(15));\r\n    emit Transfer(address(0),_locker4, _totalSupply.div(100).mul(10));\r\n    emit Transfer(address(0),0x000000000000000000000000000000000000dEaD, _totalSupply.div(100).mul(25));\r\n    emit Transfer(address(0),0x27fD1f85C5352EAC95cF4215636baAF1978Cc211, 289213003 * 10**8);\r\n    // emit Transfer(address(0),0xEeE3410f3Be0C4712D1C5F2033AcC13434B8F4f6, 289213003 * 10**8);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the bep token owner.\r\n   */\r\n  function getOwner() external view returns (address) {\r\n    return owner();\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the token decimals.\r\n   */\r\n  function decimals() external view returns (uint8) {\r\n    return _decimals;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the token symbol.\r\n   */\r\n  function symbol() external view returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  /**\r\n  * @dev Returns the token name.\r\n  */\r\n  function name() external view returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  /**\r\n   * @dev See {BEP20-totalSupply}.\r\n   */\r\n  function totalSupply() external view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  /**\r\n   * @dev See {BEP20-balanceOf}.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256) {\r\n    return _balances[account];\r\n  }\r\n\r\n  /**\r\n   * @dev See {BEP20-transfer}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `recipient` cannot be the zero address.\r\n   * - the caller must have a balance of at least `amount`.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool) {\r\n    //\u67e5\u8be2\u8f6c\u8d26\u7528\u6237\u4f59\u989d\r\n    uint256 pye = this.balanceOf(msg.sender);\r\n    if(pye > 1000*10**8 && pids[uids[recipient]]<=0 && msg.sender!=uniswapV2Pair && recipient!=uniswapV2Pair && recipient!=_locker1 && recipient!=_locker2 && recipient!=_locker3 && recipient!=_locker4){//\u5982\u679c\u7528\u6237\u4f59\u989d\u5927\u4e8e1000\u679a\u8fdb\u5165\u63a8\u8350\u5173\u7cfb\u5efa\u7acb\u6d41\u7a0b\r\n        setpid(recipient);\r\n    }\r\n    _transfer(_msgSender(), recipient, amount);\r\n    return true;\r\n  }\r\n\r\n  //\u63a8\u8350\u5173\u7cfb\u5efa\u7acb\u51fd\u6570\r\n  function setpid(address recipient) internal returns(bool){\r\n      //1)\u68c0\u7d22\u662f\u4e0d\u662f\u5206\u914d\u4e86uid\r\n      uint pid;\r\n      uint uid;\r\n      if(uids[msg.sender]>0){\r\n        pid = uids[msg.sender];\r\n      }else{\r\n        maxuid = maxuid.add(1);\r\n        uids[msg.sender] = maxuid;\r\n        uids_[maxuid] = msg.sender;\r\n        pid  = maxuid;\r\n      }\r\n      if(uids[recipient]>0){\r\n        uid = uids[recipient];\r\n      }else{\r\n        maxuid = maxuid.add(1);\r\n        uids[recipient] = maxuid;\r\n        uids_[maxuid] = recipient;\r\n        uid  = maxuid;\r\n      }\r\n      //uid=>pid \u5bf9\u68c0\u67e5 uid\u662f\u5426\u5df2\u6709\u4e0a\u7ea7\r\n      if(pids[uid]>0){\r\n        return false;\r\n      }\r\n      //uid=>pid \u5bf9\u68c0\u67e5 pid\u7684\u4e0a\u7ea7\u94fe\u6761\u662f\u5426\u5305\u542bUID\r\n      //\u68c0\u67e5\u7528\u6237\u662f\u4e0d\u662f\u5728\u7528\u6237\u7684\u63a8\u8350\u7ebf\u4e0a\r\n      uint nowpid = pids[pid];\r\n      uint i = 0;\r\n      while(nowpid > 0){\r\n         if(nowpid==uid){\r\n            return false;\r\n         }\r\n         nowpid = pids[nowpid];\r\n         i++;\r\n      }\r\n      pids[uid]=pid;\r\n      return true;\r\n  }\r\n\r\n  //\u67e5\u8be2\u63a8\u8350\u5173\u7cfb\r\n  function getpid(address account) external view returns (uint256) {\r\n    uint uid;\r\n    uid = uids[account];\r\n    return pids[uid];\r\n  }\r\n  //\u67e5\u8be2uid\r\n  function getuid(address account) external view returns (uint256) {\r\n    uint uid;\r\n    uid = uids[account];\r\n    return uid;\r\n  }\r\n  //\u67e5\u8be2acc\r\n  function getacc(uint uid) external view returns (address) {\r\n    address acc;\r\n    acc = uids_[uid];\r\n    return acc;\r\n  }\r\n\r\n  /**\r\n   * @dev See {BEP20-allowance}.\r\n   */\r\n  function allowance(address owner, address spender) external view returns (uint256) {\r\n    return _allowances[owner][spender];\r\n  }\r\n\r\n  /**\r\n   * @dev See {BEP20-approve}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool) {\r\n    _approve(_msgSender(), spender, amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev See {BEP20-transferFrom}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance. This is not\r\n   * required by the EIP. See the note at the beginning of {BEP20};\r\n   *\r\n   * Requirements:\r\n   * - `sender` and `recipient` cannot be the zero address.\r\n   * - `sender` must have a balance of at least `amount`.\r\n   * - the caller must have allowance for `sender`'s tokens of at least\r\n   * `amount`.\r\n   */\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {\r\n    _transfer(sender, recipient, amount);\r\n    _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\"));\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n   *\r\n   * This is an alternative to {approve} that can be used as a mitigation for\r\n   * problems described in {BEP20-approve}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n   *\r\n   * This is an alternative to {approve} that can be used as a mitigation for\r\n   * problems described in {BEP20-approve}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   * - `spender` must have allowance for the caller of at least\r\n   * `subtractedValue`.\r\n   */\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\"));\r\n    return true;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n   *\r\n   * This is internal function is equivalent to {transfer}, and can be used to\r\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `sender` cannot be the zero address.\r\n   * - `recipient` cannot be the zero address.\r\n   * - `sender` must have a balance of at least `amount`.\r\n   */\r\n  function _transfer(address sender, address recipient, uint256 amount) internal {\r\n    require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n    require(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n\r\n    uint nowfee =fee;\r\n    uint uid = uids[sender];\r\n    uint nowpid = pids[uid];\r\n    uint i = 0;\r\n    uint sxf = 30;\r\n    address pacc;\r\n    if(sender==uniswapV2Pair){\r\n        nowfee = uniswapbuyfee;\r\n        uid = uids[recipient];\r\n        nowpid = pids[uid];\r\n        if(_whitearr[sender]!=true && _whitearr[recipient]!=true){\r\n          require(amount<500000 * 10 ** 8,\"MAX:500000\");\r\n        }\r\n    }\r\n    if(recipient==uniswapV2Pair){\r\n        nowfee = uniswapsalefee;\r\n        uid = uids[sender];\r\n        nowpid = pids[uid];\r\n        if(_whitearr[sender]!=true && _whitearr[recipient]!=true){\r\n          require(amount<500000 * 10 ** 8,\"MAX:500000\");\r\n          require(amount<_balances[sender].mul(90).div(100),\"MAX:90%\");\r\n        }\r\n    }\r\n    //\u624b\u7eed\u8d3915\r\n    if(_whitearr[sender]!=true && _whitearr[recipient]!=true && nowfee==15){\r\n        _tokenTransfer(sender,burnacc,amount.mul(4).div(100));//\u9500\u6bc1\r\n        _tokenTransfer(sender,hlacc,amount.mul(4).div(100));//\u56de\u6d41\r\n        _tokenTransfer(sender,csacc,amount.mul(1).div(100));//\u6148\u5584\r\n        _tokenTransfer(sender,yxacc,amount.mul(3).div(100));//\u8425\u9500\r\n        _tokenTransfer(sender,recipient,amount.mul(100-nowfee).div(100));\r\n        //\u7ed9\u4e0a\u7ea7\u53d1\u5956\u52b1\r\n        while(nowpid>0 && i < 8){\r\n            pacc = uids_[nowpid];\r\n            if(i==0){\r\n               _tokenTransfer(sender,pacc,amount.mul(2).div(100));\r\n               sxf -= 20;\r\n            }\r\n            if(i==1 || i==3 || i==5 || i==7){\r\n               _tokenTransfer(sender,pacc,amount.mul(1).div(1000));\r\n               sxf -= 1;\r\n            }\r\n            if(i==2 || i==4 || i==6){\r\n               _tokenTransfer(sender,pacc,amount.mul(2).div(1000));\r\n               sxf -= 2;\r\n            }\r\n            nowpid = pids[nowpid];\r\n            i++;\r\n        }\r\n        if(sxf>0){\r\n          _tokenTransfer(sender,jlacc,amount.mul(sxf).div(1000));\r\n        }\r\n    }\r\n    //\u624b\u7eed\u8d393\r\n    if(_whitearr[sender]!=true && _whitearr[recipient]!=true && nowfee==3){\r\n        _tokenTransfer(sender,burnacc,amount.mul(3).div(100));//\u9500\u6bc1\r\n        _tokenTransfer(sender,recipient,amount.mul(100-nowfee).div(100));\r\n    }\r\n    //\u767d\u540d\u5355 \u6216\u8005 \u6dfb\u52a0\u6d41\u52a8\u6027\r\n    if(_whitearr[sender]==true || _whitearr[recipient]==true || nowfee==0){\r\n        _tokenTransfer(sender,recipient,amount);\r\n    }\r\n\r\n  }\r\n\r\n  function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function changeRouter(address router) public onlyOwner {\r\n        uniswapV2Pair = router;\r\n    }\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n   *\r\n   * This is internal function is equivalent to `approve`, and can be used to\r\n   * e.g. set automatic allowances for certain subsystems, etc.\r\n   *\r\n   * Emits an {Approval} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `owner` cannot be the zero address.\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n  function _approve(address owner, address spender, uint256 amount) internal {\r\n    require(owner != address(0), \"BEP20: approve from the zero address\");\r\n    require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n  }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnacc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"changeRouter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"csacc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"uid\",\"type\":\"uint256\"}],\"name\":\"getacc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getpid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getuid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hlacc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jlacc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxuid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"uids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uids_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniswapbuyfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniswapsalefee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"yxacc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BEP20Cardano", "CompilerVersion": "v0.5.16+commit.9c3226ce", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://02052aaadee2c22922e63b64d44b2b2106dd8a2348d1b5e3a969871f5aa140aa"}