{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/getBalance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface ITOKEN {\\r\\n    function balanceOf(address) external view returns (uint256);\\r\\n}\\r\\n\\r\\ninterface ILPPAIR {\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function totalSupply() external view returns (uint256);\\r\\n}\\r\\n\\r\\ncontract Tracker {\\r\\n    address public stakingContractAddress = 0xCC808545C74910572fdF17cdccEE399c2BC75BfD;\\r\\n    address public userWalletAddress = 0xcdB3D3642FB4d48D2B5E4fb4a014448A2761C063;\\r\\n    address public lpStakingAddress = 0x788BFBCee5C82E9426696343C41164da8037a859;  // LP Staking address\\r\\n    address public lpPairAddress = 0x5bc37Ae740Ec995360731f876E63085B1057c4B2;  // LP Pair address\\r\\n\\r\\n    \\r\\n    function balanceOf(address _user) external view returns (uint256 totalBalance) {\\r\\n        ITOKEN stakingToken = ITOKEN(stakingContractAddress);\\r\\n        ITOKEN userWalletToken = ITOKEN(userWalletAddress);\\r\\n        ITOKEN lpStakingToken = ITOKEN(lpStakingAddress);\\r\\n\\r\\n        // 1. Staking contract balance\\r\\n        totalBalance += stakingToken.balanceOf(_user);\\r\\n\\r\\n        // 2. User's wallet balance\\r\\n        totalBalance += userWalletToken.balanceOf(_user);\\r\\n\\r\\n        // 3. User's LP tokens in the LP Staking contract\\r\\n        uint256 lpBalanceInStaking = lpStakingToken.balanceOf(_user);\\r\\n\\r\\n        // 4. LP pair balance in the wallet\\r\\n        ILPPAIR lpPair = ILPPAIR(lpPairAddress);\\r\\n        uint256 lpBalanceInWallet = lpPair.balanceOf(_user);\\r\\n\\r\\n        // Total LP tokens\\r\\n        uint256 totalLpTokens = lpBalanceInWallet + lpBalanceInStaking;\\r\\n\\r\\n        // Calculate the user's share of token1 in the LP pair based on LP balance and reserves\\r\\n        if (totalLpTokens > 0) {\\r\\n            ( , uint112 reserveToken2, ) = lpPair.getReserves();\\r\\n\\r\\n            uint256 userShareToken1 = totalLpTokens * reserveToken2 / lpPair.totalSupply();\\r\\n\\r\\n            totalBalance += userShareToken1;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpStakingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userWalletAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Tracker", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}