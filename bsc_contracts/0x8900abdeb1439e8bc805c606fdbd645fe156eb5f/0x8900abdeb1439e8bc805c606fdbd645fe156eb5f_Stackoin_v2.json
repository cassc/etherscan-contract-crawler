{"SourceCode": "// Welcome to StaCkoin 2 \r\n// Site owner Chokinfo.com \r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-08-03\r\n*/\r\n\r\npragma solidity 0.5.10;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n\r\ncontract Stackoin_v2 {\r\n\tusing SafeMath for uint256; \r\n   // IERC20 public token = IERC20(0x1D89E635c136E7429069b6551D995C7f764688FB); Testnet Kovan\r\n    IERC20 public token = IERC20(0x36d1eBFd2f37CF03b7DE8074436bfdCCE9E43203); // Main BSC\r\n\tuint256 constant public INVEST_MIN_AMOUNT = 1 ether; // 1 CKIO\r\n\tuint256[] public REFERRAL_PERCENTS \t= [300, 100, 50, 50, 25, 25, 25, 25, 50, 100]; // 3%, 1%, 0.5%..\r\n\tuint256[] public SEED_PERCENTS \t\t= [300, 100, 50, 50, 25, 25, 25, 25, 50, 100]; // 3%, 1%, 0.5%..\r\n\tuint256 constant public PROJECT_FEE = 50; // 0.5%\r\n\tuint256 constant public PERCENT_STEP = 0;\r\n\tuint256 constant public PERCENTS_DIVIDER = 10000; // 100% = 10 000\r\n\tuint256 constant public PLANPER_DIVIDER = 10000; // 100% = 10 000\r\n\tuint256 constant public TIME_STEP = 1 days;\r\n\r\n\tuint256 public totalInvested;\r\n\tuint256 public totalRefBonus;\r\n\t\r\n\t\r\n\taddress chkLv2;\r\n    address chkLv3;\r\n    address chkLv4;\r\n    address chkLv5;\r\n    address chkLv6;\r\n    address chkLv7;\r\n    address chkLv8;\r\n    address chkLv9;\r\n    address chkLv10;\r\n\r\n\t\r\n    \r\n    struct RefUserDetail {\r\n        address refUserAddress;\r\n        uint256 refLevel;\r\n    }\r\n\r\n    mapping(address => mapping (uint => RefUserDetail)) public RefUser;\r\n    mapping(address => uint256) public referralCount_;\r\n    \r\n\t\r\n\tmapping(address => address) internal referralLevel1Address;\r\n    mapping(address => address) internal referralLevel2Address;\r\n    mapping(address => address) internal referralLevel3Address;\r\n    mapping(address => address) internal referralLevel4Address;\r\n    mapping(address => address) internal referralLevel5Address;\r\n    mapping(address => address) internal referralLevel6Address;\r\n    mapping(address => address) internal referralLevel7Address;\r\n    mapping(address => address) internal referralLevel8Address;\r\n    mapping(address => address) internal referralLevel9Address;\r\n    mapping(address => address) internal referralLevel10Address;\r\n\t\r\n    \r\n\t\r\n\r\n    struct Plan {\r\n        uint256 time;\r\n        uint256 percent;\r\n    }\r\n\r\n    Plan[] internal plans;\r\n\r\n\tstruct Deposit {\r\n        uint8 plan;\r\n\t\tuint256 amount;\r\n\t\tuint256 start;\r\n\t}\r\n\r\n\tstruct User {\r\n\t\tDeposit[] deposits;\r\n\t\tuint256 checkpoint;\r\n\t\taddress referrer;\r\n\t\tuint256[10] levels;\r\n\t\tuint256 bonus;\r\n\t\tuint256 totalBonus;\r\n\t\tuint256 seedincome;\r\n\t\tuint256 withdrawn;\r\n\t\tuint256 withdrawnseed;\r\n\t}\r\n\t\r\n\t\r\n\tmapping (address => User) internal users;\r\n\r\n\tbool public started;\r\n\taddress payable public commissionWallet;\r\n\r\n\tevent Newbie(address user);\r\n\tevent NewDeposit(address indexed user, uint8 plan, uint256 amount);\r\n\tevent Withdrawn(address indexed user, uint256 amount);\r\n\tevent RefBonus(address indexed referrer, address indexed referral, uint256 indexed level, uint256 amount);\r\n\tevent SeedIncome(address indexed referrer, address indexed referral, uint256 indexed level, uint256 amount);\r\n\tevent FeePayed(address indexed user, uint256 totalAmount);\r\n\r\n\tconstructor(address payable wallet) public {\r\n\t\trequire(!isContract(wallet));\r\n\t\tcommissionWallet = wallet;\r\n\r\n        plans.push(Plan(2190, 10)); // 365 * 6 = 2190j avec du 0.1/j        \r\n\t}\r\n\t\r\n\tfunction getDownlineRef(address senderAddress, uint dataId) public view returns (address,uint) { \r\n        return (RefUser[senderAddress][dataId].refUserAddress,RefUser[senderAddress][dataId].refLevel);\r\n    }\r\n    \r\n    function addDownlineRef(address senderAddress, address refUserAddress, uint refLevel) internal {\r\n        referralCount_[senderAddress]++;\r\n        uint dataId = referralCount_[senderAddress];\r\n        RefUser[senderAddress][dataId].refUserAddress = refUserAddress;\r\n        RefUser[senderAddress][dataId].refLevel = refLevel;\r\n    }\r\n\r\n    \r\n\t\r\n\t\r\n\t function distributeRef(address _referredBy,address _sender, bool _newReferral) internal {\r\n       \r\n          address _customerAddress        = _sender;\r\n        // Level 1\r\n        referralLevel1Address[_customerAddress]                     = _referredBy;\r\n        if(_newReferral == true) {\r\n            addDownlineRef(_referredBy, _customerAddress, 1);\r\n        }\r\n        \r\n        chkLv2                          = referralLevel1Address[_referredBy];\r\n        chkLv3                          = referralLevel2Address[_referredBy];\r\n        chkLv4                          = referralLevel3Address[_referredBy];\r\n        chkLv5                          = referralLevel4Address[_referredBy];\r\n        chkLv6                          = referralLevel5Address[_referredBy];\r\n        chkLv7                          = referralLevel6Address[_referredBy];\r\n        chkLv8                          = referralLevel7Address[_referredBy];\r\n        chkLv9                          = referralLevel8Address[_referredBy];\r\n        chkLv10                         = referralLevel9Address[_referredBy];\r\n\t\t\t\t\r\n        // Level 2\r\n        if(chkLv2 != 0x0000000000000000000000000000000000000000) {\r\n            referralLevel2Address[_customerAddress]                     = referralLevel1Address[_referredBy];\r\n            if(_newReferral == true) {\r\n                addDownlineRef(referralLevel1Address[_referredBy], _customerAddress, 2);\r\n            }\r\n        }\r\n        \r\n        // Level 3\r\n        if(chkLv3 != 0x0000000000000000000000000000000000000000) {\r\n            referralLevel3Address[_customerAddress]                     = referralLevel2Address[_referredBy];\r\n            if(_newReferral == true) {\r\n                addDownlineRef(referralLevel2Address[_referredBy], _customerAddress, 3);\r\n            }\r\n        }\r\n        \r\n        // Level 4\r\n        if(chkLv4 != 0x0000000000000000000000000000000000000000) {\r\n            referralLevel4Address[_customerAddress]                     = referralLevel3Address[_referredBy];\r\n            if(_newReferral == true) {\r\n                addDownlineRef(referralLevel3Address[_referredBy], _customerAddress, 4);\r\n            }\r\n        }\r\n        \r\n        // Level 5\r\n        if(chkLv5 != 0x0000000000000000000000000000000000000000) {\r\n            referralLevel5Address[_customerAddress]                     = referralLevel4Address[_referredBy];\r\n            if(_newReferral == true) {\r\n                addDownlineRef(referralLevel4Address[_referredBy], _customerAddress, 5);\r\n            }\r\n        }\r\n        \r\n        // Level 6\r\n        if(chkLv6 != 0x0000000000000000000000000000000000000000) {\r\n            referralLevel6Address[_customerAddress]                     = referralLevel5Address[_referredBy];\r\n            if(_newReferral == true) {\r\n                addDownlineRef(referralLevel5Address[_referredBy], _customerAddress, 6);\r\n            }\r\n        }\r\n        \r\n        // Level 7\r\n        if(chkLv7 != 0x0000000000000000000000000000000000000000) {\r\n            referralLevel7Address[_customerAddress]                     = referralLevel6Address[_referredBy];\r\n           if(_newReferral == true) {\r\n                addDownlineRef(referralLevel6Address[_referredBy], _customerAddress, 7);\r\n            }\r\n        }\r\n        \r\n        // Level 8\r\n        if(chkLv8 != 0x0000000000000000000000000000000000000000) {\r\n            referralLevel8Address[_customerAddress]                     = referralLevel7Address[_referredBy];\r\n            if(_newReferral == true) {\r\n                addDownlineRef(referralLevel7Address[_referredBy], _customerAddress, 8);\r\n            }\r\n        }\r\n        \r\n        // Level 9\r\n        if(chkLv9 != 0x0000000000000000000000000000000000000000) {\r\n            referralLevel9Address[_customerAddress]                     = referralLevel8Address[_referredBy];\r\n            if(_newReferral == true) {\r\n                addDownlineRef(referralLevel8Address[_referredBy], _customerAddress, 9);\r\n            }\r\n        }\r\n        \r\n        // Level 10\r\n        if(chkLv10 != 0x0000000000000000000000000000000000000000) {\r\n            referralLevel10Address[_customerAddress]                    = referralLevel9Address[_referredBy];\r\n            if(_newReferral == true) {\r\n                addDownlineRef(referralLevel9Address[_referredBy], _customerAddress, 10);\r\n            }\r\n        }\r\n       \r\n}\r\n\t\r\n\tfunction invest(address referrer, uint8 plan, uint256 amounts) public  {\r\n\t\r\n\t\tif (!started) {\r\n\t\t\tif (msg.sender == commissionWallet) {\r\n\t\t\t\tstarted = true;\r\n\t\t\t} else revert(\"Not started yet\");\r\n\t\t}\r\n\r\n\t\trequire(amounts >= INVEST_MIN_AMOUNT);\r\n        require(plan < 3, \"Invalid plan\");\r\n        token.transferFrom(msg.sender, address(this), amounts);\r\n\t\tuint256 fee = amounts.mul(PROJECT_FEE).div(PERCENTS_DIVIDER);\r\n        token.transfer(commissionWallet,fee);\r\n\t\t//commissionWallet.transfer(fee);\r\n\t\temit FeePayed(msg.sender, fee);\r\n\r\n\t\tUser storage user = users[msg.sender];\r\n\t\t\r\n\t\t\r\n\t\tif (user.referrer == address(0)) {\r\n\t\t\tif (users[referrer].deposits.length > 0 && referrer != msg.sender) {\r\n\t\t\t\tuser.referrer = referrer;\r\n\t\t\t}\r\n\r\n\t\t\taddress upline = user.referrer;\r\n\t\t\tfor (uint256 i = 0; i < 10; i++) {\r\n\t\t\t\tif (upline != address(0)) {\r\n\t\t\t\t\tusers[upline].levels[i] = users[upline].levels[i].add(1);\r\n\t\t\t\t\tupline = users[upline].referrer;\r\n\t\t\t\t} else break;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t\t bool    _newReferral                = true;\r\n        if(referralLevel1Address[msg.sender] != 0x0000000000000000000000000000000000000000) {\r\n            referrer                     = referralLevel1Address[msg.sender];\r\n            _newReferral                    = false;\r\n        }\r\n\t\t\r\n\t\tdistributeRef(referrer, msg.sender, _newReferral);\r\n\r\n\t\tif (user.referrer != address(0)) {\r\n\t\t\taddress upline = user.referrer;\r\n\t\t\tfor (uint256 i = 0; i < 10; i++) {\r\n\t\t\t\tif (upline != address(0)) {\r\n\t\t\t\t\tuint256 amount = amounts.mul(REFERRAL_PERCENTS[i]).div(PERCENTS_DIVIDER);\r\n\t\t\t\t\tusers[upline].bonus = users[upline].bonus.add(amount);\r\n\t\t\t\t\tusers[upline].totalBonus = users[upline].totalBonus.add(amount);\r\n\t\t\t\t\temit RefBonus(upline, msg.sender, i, amount);\r\n\t\t\t\t\tupline = users[upline].referrer;\r\n\t\t\t\t} else break;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (user.deposits.length == 0) {\r\n\t\t\tuser.checkpoint = block.timestamp;\r\n\t\t\temit Newbie(msg.sender);\r\n\t\t}\r\n\r\n\t\tuser.deposits.push(Deposit(plan, amounts, block.timestamp));\r\n\r\n\t\ttotalInvested = totalInvested.add(amounts);\r\n\r\n\t\temit NewDeposit(msg.sender, plan, amounts);\r\n\t}\r\n\r\n\r\n\tfunction withdraw() public {\r\n\t\tUser storage user = users[msg.sender];\r\n\r\n\t\tuint256 totalAmount = getUserDividends(msg.sender);\r\n\t\tuint256 seedAmount = getcurrentseedincome(msg.sender);\r\n\r\n\t\tuint256 referralBonus = getUserReferralBonus(msg.sender);\r\n\t\tif (referralBonus > 0) {\r\n\t\t\tuser.bonus = 0;\r\n\t\t\ttotalAmount = totalAmount.add(referralBonus);\r\n\t\t}\r\n\t\ttotalAmount = totalAmount.add(seedAmount);\r\n\t\tuser.withdrawnseed = user.withdrawnseed.add(seedAmount);\r\n\t\t\r\n\t\trequire(totalAmount > 0, \"User has no dividends\");\r\n\t\tuint256 contractBalance = token.balanceOf(address(this));\r\n\t\t//uint256 contractBalance = address(this).balance;\r\n\t\tif (contractBalance < totalAmount) {\r\n\t\t\tuser.bonus = totalAmount.sub(contractBalance);\r\n\t\t\tuser.totalBonus = user.totalBonus.add(user.bonus);\r\n\t\t\ttotalAmount = contractBalance;\r\n\t\t}\r\n\r\n\t\tuser.checkpoint = block.timestamp;\r\n\t\tuser.withdrawn = user.withdrawn.add(totalAmount);\r\n        token.transfer(msg.sender,totalAmount);\r\n\t\t//msg.sender.transfer(totalAmount);\r\n\r\n\t\temit Withdrawn(msg.sender, totalAmount);\r\n\t}\r\n\r\n\tfunction getContractBalance() public view returns (uint256) {\r\n\t\treturn token.balanceOf(address(this));\r\n\t}\r\n\t\r\n\r\n\tfunction getPlanInfo(uint8 plan) public view returns(uint256 time, uint256 percent) {\r\n\t\ttime = plans[plan].time;\r\n\t\tpercent = plans[plan].percent;\r\n\t}\r\n\r\n\tfunction getUserDividends(address userAddress) public view returns (uint256) {\r\n\t\tUser storage user = users[userAddress];\r\n\r\n\t\tuint256 totalAmount;\r\n\r\n\t\tfor (uint256 i = 0; i < user.deposits.length; i++) {\r\n\t\t\tuint256 finish = user.deposits[i].start.add(plans[user.deposits[i].plan].time.mul(1 days));\r\n\t\t\tif (user.checkpoint < finish) {\r\n\t\t\t\tuint256 share = user.deposits[i].amount.mul(plans[user.deposits[i].plan].percent).div(PLANPER_DIVIDER);\r\n\t\t\t\tuint256 from = user.deposits[i].start > user.checkpoint ? user.deposits[i].start : user.checkpoint;\r\n\t\t\t\tuint256 to = finish < block.timestamp ? finish : block.timestamp;\r\n\t\t\t\tif (from < to) {\r\n\t\t\t\t\ttotalAmount = totalAmount.add(share.mul(to.sub(from)).div(TIME_STEP));\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn totalAmount;\r\n\t}\r\n\t\r\n\tfunction getUserSeedIncome(address userAddress) public view returns (uint256){\r\n\t\r\n\t\tuint256 totalSeedAmount;\r\n\t\tuint256 seedshare;\r\n\t\t\r\n\t\tuint256 count = getUserTotalReferrals(userAddress);\r\n\t\t\r\n\t\tfor\t(uint256 y=1; y<= count; y++)\r\n\t\t{\r\n\t\t    uint256 level;\r\n\t\t    address addressdownline;\r\n\t\t    \r\n\t\t    (addressdownline,level) = getDownlineRef(userAddress, y);\r\n\t\t\r\n\t\t\tUser storage downline =users[addressdownline];\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tfor (uint256 i = 0; i < downline.deposits.length; i++) {\r\n\t\t\t\tuint256 finish = downline.deposits[i].start.add(plans[downline.deposits[i].plan].time.mul(1 days));\r\n\t\t\t\tif (downline.deposits[i].start < finish) {\r\n\t\t\t\t\tuint256 share = downline.deposits[i].amount.mul(plans[downline.deposits[i].plan].percent).div(PLANPER_DIVIDER);\r\n\t\t\t\t\tuint256 from = downline.deposits[i].start;\r\n\t\t\t\t\tuint256 to = finish < block.timestamp ? finish : block.timestamp;\r\n\t\t\t\t\t//seed income\r\n                    seedshare = share.mul(SEED_PERCENTS[level-1]).div(PERCENTS_DIVIDER);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (from < to) {\r\n\t\t\t\t\t\r\n\t\t\t\t\t\t\ttotalSeedAmount = totalSeedAmount.add(seedshare.mul(to.sub(from)).div(TIME_STEP));\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\r\n\t\t}\r\n\t\t\r\n\t\treturn totalSeedAmount;\t\t\r\n\t\r\n\t} \r\n\t\r\n\t\r\n\tfunction getcurrentseedincome(address userAddress) public view returns (uint256){\r\n\t    User storage user = users[userAddress];\r\n\t    return (getUserSeedIncome(userAddress).sub(user.withdrawnseed));\r\n\t    \r\n\t}\r\n\t\r\n\tfunction getUserTotalSeedWithdrawn(address userAddress) public view returns (uint256) {\r\n\t\treturn users[userAddress].withdrawnseed;\r\n\t}\r\n\r\n\r\n\tfunction getUserTotalWithdrawn(address userAddress) public view returns (uint256) {\r\n\t\treturn users[userAddress].withdrawn;\r\n\t}\r\n\r\n\tfunction getUserCheckpoint(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].checkpoint;\r\n\t}\r\n\r\n\tfunction getUserReferrer(address userAddress) public view returns(address) {\r\n\t\treturn users[userAddress].referrer;\r\n\t}\r\n\r\n\tfunction getUserDownlineCount(address userAddress) public view returns(uint256[10] memory referrals) {\r\n\t\treturn (users[userAddress].levels);\r\n\t}\r\n\r\n\tfunction getUserTotalReferrals(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].levels[0]+users[userAddress].levels[1]+users[userAddress].levels[2]+users[userAddress].levels[3]+users[userAddress].levels[4]+users[userAddress].levels[5]+users[userAddress].levels[6]+users[userAddress].levels[7]+users[userAddress].levels[8]+users[userAddress].levels[9];\r\n\t}\r\n\r\n\tfunction getUserReferralBonus(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].bonus;\r\n\t}\r\n\r\n\tfunction getUserReferralTotalBonus(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].totalBonus;\r\n\t}\r\n\r\n\tfunction getUserReferralWithdrawn(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].totalBonus.sub(users[userAddress].bonus);\r\n\t}\r\n\r\n\tfunction getUserAvailable(address userAddress) public view returns(uint256) {\r\n\t\treturn getUserReferralBonus(userAddress).add(getUserDividends(userAddress));\r\n\t}\r\n\r\n\tfunction getUserAmountOfDeposits(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].deposits.length;\r\n\t}\r\n\r\n\tfunction getUserTotalDeposits(address userAddress) public view returns(uint256 amount) {\r\n\t\tfor (uint256 i = 0; i < users[userAddress].deposits.length; i++) {\r\n\t\t\tamount = amount.add(users[userAddress].deposits[i].amount);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getUserDepositInfo(address userAddress, uint256 index) public view returns(uint8 plan, uint256 percent, uint256 amount, uint256 start, uint256 finish) {\r\n\t    User storage user = users[userAddress];\r\n\r\n\t\tplan = user.deposits[index].plan;\r\n\t\tpercent = plans[plan].percent;\r\n\t\tamount = user.deposits[index].amount;\r\n\t\tstart = user.deposits[index].start;\r\n\t\tfinish = user.deposits[index].start.add(plans[user.deposits[index].plan].time.mul(1 days));\r\n\t}\r\n\r\n\tfunction getSiteInfo() public view returns(uint256 _totalInvested, uint256 _totalBonus) {\r\n\t\treturn(totalInvested, totalRefBonus);\r\n\t}\r\n\r\n\tfunction getUserInfo(address userAddress) public view returns(uint256 totalDeposit, uint256 totalWithdrawn, uint256 totalReferrals) {\r\n\t\treturn(getUserTotalDeposits(userAddress), getUserTotalWithdrawn(userAddress), getUserTotalReferrals(userAddress));\r\n\t}\r\n\r\n\tfunction isContract(address addr) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n// #StaCkoin", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDownlineCount\",\"outputs\":[{\"name\":\"referrals\",\"type\":\"uint256[10]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"started\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"senderAddress\",\"type\":\"address\"},{\"name\":\"dataId\",\"type\":\"uint256\"}],\"name\":\"getDownlineRef\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TIME_STEP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferrer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"RefUser\",\"outputs\":[{\"name\":\"refUserAddress\",\"type\":\"address\"},{\"name\":\"refLevel\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralTotalBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROJECT_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSiteInfo\",\"outputs\":[{\"name\":\"_totalInvested\",\"type\":\"uint256\"},{\"name\":\"_totalBonus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalSeedWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERCENT_STEP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"REFERRAL_PERCENTS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"name\":\"totalDeposit\",\"type\":\"uint256\"},{\"name\":\"totalWithdrawn\",\"type\":\"uint256\"},{\"name\":\"totalReferrals\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRefBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalDeposits\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commissionWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAmountOfDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"plan\",\"type\":\"uint8\"}],\"name\":\"getPlanInfo\",\"outputs\":[{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"percent\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserDepositInfo\",\"outputs\":[{\"name\":\"plan\",\"type\":\"uint8\"},{\"name\":\"percent\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"finish\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"SEED_PERCENTS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserCheckpoint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserSeedIncome\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INVEST_MIN_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralCount_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referrer\",\"type\":\"address\"},{\"name\":\"plan\",\"type\":\"uint8\"},{\"name\":\"amounts\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PLANPER_DIVIDER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getcurrentseedincome\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalReferrals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Newbie\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"plan\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SeedIncome\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"FeePayed\",\"type\":\"event\"}]", "ContractName": "Stackoin_v2", "CompilerVersion": "v0.5.10+commit.5a6ea5b1", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000002eff533324733cbe4b9ef5a64524abde98bba366", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://77761864c25b38e7dfa0035128f5748b1dea491e7253a3abff8f2f9b7356e227"}