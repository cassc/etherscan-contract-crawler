{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n \r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n  \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n \r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n   \r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    \r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n     function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n}\r\n\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function sync() external;\r\n}\r\n\r\nlibrary EnumerableSet {\r\n   \r\n    struct Set {\r\n        bytes32[] _values;\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        \r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            \r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n    \r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            set._values.pop();\r\n\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n  \r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    \r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   \r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    \r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    \r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n   \r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   \r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    \r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n   \r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n   \r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   \r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    \r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    \r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    \r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    \r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   \r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\ncontract BKingToken is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    EnumerableSet.AddressSet isExcludedAddress;\r\n\r\n    uint8 private _decimals = 9;\r\n    uint256 private _tTotal = 200000000000 * 10 ** 9;\r\n\r\n    string private _name = \"Beast king\";\r\n    string private _symbol = \"BKing\";\r\n    \r\n    struct Fee{\r\n        uint256  burnFee;\r\n        uint256  lQFee;\r\n        uint256  lPFee;\r\n        uint256  mkFee1;\r\n        uint256  mkFee2;\r\n        uint256  mkFee3;\r\n        uint256  luckyFee;\r\n        uint256  txFee;\r\n        uint256  totalFee;\r\n        uint256  sedimentRate;\r\n    }\r\n\r\n    Fee public fee = Fee(30,40,40,10,10,10,3,7,150,50);\r\n\r\n    address public mkAddress1;\r\n    address public mkAddress2;\r\n    address public mkAddress3;\r\n    address public mkAddress4;\r\n    address public mkAddress5;\r\n    address public constant burnAddress = address(0xdead);\r\n\r\n    uint public swapLimitRate = 90;\r\n    uint public swapLimitAmount = 35000000e9;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n\r\n    mapping(address => bool) public ammPairs;\r\n\r\n    bool inSwapAndLiquify;\r\n    uint public burnLimit = 199900000000e9;\r\n    \r\n    address public uniswapV2Pair;\r\n    address public wbnb;    \r\n    address public usdt;\r\n    address public holder;\r\n    uint256 public lQAmount;\r\n    uint256 public lPAmount;\r\n    uint256 public lkAmount;\r\n\r\n    uint public maxTxAmount = 1000e9;\r\n    uint public addLiquidityValue = 1e6;\r\n\r\n    uint256 public lastLuckyTime;\r\n    uint256[] internal txFeeConfig = [2,1,1,1,1,1,1];\r\n    uint256[] internal luckyFeeConfig = [1,1,1];\r\n    uint256 public luckyIntervalTime = 86400;\r\n\r\n    address[] lastTxArr;\r\n    address[] lastLuckyArr;\r\n\r\n    struct Interest{\r\n        uint256 index;\r\n        uint256 period;\r\n        uint256 lastSendTime;\r\n        uint minAward;\r\n        uint award;\r\n        uint sendCount;\r\n        IERC20  token;\r\n        EnumerableSet.AddressSet tokenHolder;\r\n    }\r\n    address  fromAddress;\r\n    address  toAddress;\r\n    Interest internal lpInterest;\r\n\r\n    constructor (\r\n        address _route,\r\n        address _usdt,\r\n        address _mk1,\r\n        address _mk2,\r\n        address _mk3,\r\n        address _mk4,\r\n        address _mk5,\r\n        address _holder) public {\r\n        \r\n         holder = _holder;\r\n         usdt = _usdt;\r\n         mkAddress1 = _mk1;\r\n         mkAddress2 = _mk2;\r\n         mkAddress3 = _mk3;\r\n         mkAddress4 = _mk4;\r\n         mkAddress5 = _mk5;\r\n       \r\n        _tOwned[holder] = _tTotal;\r\n        isExcludedAddress.add(holder);\r\n        isExcludedAddress.add(address(this));\r\n\r\n        uniswapV2Router = IUniswapV2Router02(_route);\r\n        wbnb = uniswapV2Router.WETH();\r\n        \r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), wbnb);\r\n        ammPairs[uniswapV2Pair] = true;\r\n        lpInterest.token = IERC20(uniswapV2Pair);\r\n\r\n        _owner = msg.sender;\r\n        lpInterest.lastSendTime = block.timestamp;\r\n        lpInterest.minAward = 1e3;\r\n        lpInterest.period = 86400;\r\n        lpInterest.sendCount = 30;\r\n        emit Transfer(address(0), _holder, _tTotal);\r\n    }\r\n\r\n     struct InterestInfo{\r\n        uint period;\r\n        uint lastSendTime;\r\n        uint award;\r\n        uint count;\r\n        uint sendCount;\r\n    }\r\n    function getInterestInfo()external view returns(InterestInfo memory lpI){\r\n        lpI.period = lpInterest.period;\r\n        lpI.lastSendTime = lpInterest.lastSendTime;\r\n        lpI.award = lpInterest.award;\r\n        lpI.sendCount = lpInterest.sendCount;\r\n        lpI.count = lpInterest.tokenHolder.length();\r\n    }\r\n\r\n    function setInterset(uint ma,uint pd,uint sc)external onlyOwner{\r\n        lpInterest.minAward = ma;\r\n        lpInterest.period = pd;\r\n        lpInterest.sendCount = sc;\r\n    }\r\n\r\n    function setAmmPair(address pair,bool hasPair)external onlyOwner{\r\n        ammPairs[pair] = hasPair;\r\n    }\r\n\r\n    function setMaxTx(uint256 maxTx,uint lit) external onlyOwner{\r\n        maxTxAmount = maxTx;\r\n        luckyIntervalTime = lit;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _tOwned[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function getWhiteList(uint start,uint end)external view returns(address[] memory addrs,uint count){\r\n\r\n        count = isExcludedAddress.length();\r\n\r\n        if( end >= count ){\r\n            end = count - 1;\r\n\r\n            if( end >= start){\r\n                uint size = end - start + 1;\r\n\r\n                addrs = new address[](size);\r\n\r\n                for( (uint i,uint k) = (start,0) ; i <= end && k < size; (i ++,k ++)){\r\n                    addrs[k] = isExcludedAddress.at(i);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    function excludeFromFee(address account) public onlyOwner {\r\n        isExcludedAddress.add(account);\r\n    }\r\n    \r\n    function includeInFee(address account) public onlyOwner {\r\n       isExcludedAddress.remove(account);\r\n    }\r\n\r\n     function isExcludedFromFee(address account) public view returns(bool) {\r\n        return isExcludedAddress.contains(account);\r\n    }\r\n    \r\n    receive() external payable {}\r\n\r\n    function _take(uint256 tValue,address from,address to) private {\r\n        _tOwned[to] = _tOwned[to].add(tValue);\r\n        emit Transfer(from, to, tValue);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    struct Param{\r\n        bool takeFee;\r\n        bool isBuy;\r\n        uint tTransferAmount;\r\n        uint tLQ;\r\n        uint tLP;\r\n        uint tBurn;\r\n        uint tMk1;\r\n        uint tMk2;\r\n        uint tMk3;\r\n        uint tLk;\r\n        uint tTx;\r\n    }\r\n\r\n     function _initParam(uint256 tAmount,Param memory param) private view  {\r\n\r\n        uint tFee = 0;\r\n        if( param.takeFee){\r\n            param.tLQ = tAmount * fee.lQFee / 1000;\r\n            param.tLP = tAmount * fee.lPFee / 1000;\r\n            param.tBurn = tAmount * fee.burnFee / 1000;\r\n            param.tMk1 = tAmount * fee.mkFee1 / 1000;\r\n            param.tMk2 = tAmount * fee.mkFee2 / 1000;\r\n            param.tMk3 = tAmount * fee.mkFee3 / 1000;\r\n            param.tLk = tAmount * fee.luckyFee / 1000;\r\n            param.tTx = tAmount * fee.txFee / 1000;\r\n            tFee = tAmount * fee.totalFee / 1000;\r\n        }\r\n        param.tTransferAmount = tAmount.sub(tFee);\r\n    }\r\n\r\n    function _takeFee(Param memory param,address from)private {\r\n        if( param.tLQ > 0 ){\r\n            _take(param.tLQ, from, address(this));\r\n            lQAmount += param.tLQ;\r\n        }\r\n        if( param.tLP > 0 ){\r\n            _take(param.tLP, from, address(this));\r\n            lPAmount += param.tLP;\r\n        }\r\n        if( param.tBurn > 0 ){\r\n            _take(param.tBurn, from, address(0xdead));\r\n        }\r\n        if( param.tMk1 > 0 ){\r\n            _take(param.tMk1, from, mkAddress1);\r\n        }\r\n        if( param.tMk2 > 0 ){\r\n            _take(param.tMk2, from, mkAddress2);\r\n        }\r\n        if( param.tMk3 > 0 ){\r\n            _take(param.tMk3, from, mkAddress3);\r\n        }\r\n\r\n         if( param.tTx > 0 ){\r\n            _takeLastTx(param.tTx, from);\r\n        }\r\n        if( param.tLk > 0 ){\r\n            lkAmount += param.tLk;\r\n            _take(param.tLk, from, address(this));\r\n            if( lastLuckyTime + luckyIntervalTime <= block.timestamp ){\r\n                lastLuckyTime = block.timestamp;\r\n                _takeLucky();\r\n            }   \r\n        }\r\n    }\r\n\r\n     function _takeLastTx(uint amount,address from)internal{\r\n\r\n        uint len = lastTxArr.length;\r\n        uint sended = 0;\r\n\r\n        uint total = fee.txFee;\r\n        uint kLeng = txFeeConfig.length;\r\n        for( (uint i,uint k) = ( len ,0); i > 0 && k < kLeng; (i--,k++) ){\r\n            address a = lastTxArr[i - 1];\r\n            uint v = txFeeConfig[k] * amount / total;\r\n            sended += v;\r\n            _take(v, from, a);\r\n        }\r\n\r\n        if( amount > sended ){\r\n            _take(amount - sended, from,burnAddress );\r\n        }\r\n    }\r\n\r\n    function _takeLucky()internal{\r\n\r\n        uint len = lastLuckyArr.length;\r\n        uint amount = lkAmount;\r\n\r\n        uint total = fee.luckyFee;\r\n        uint kLeng = luckyFeeConfig.length;\r\n        for( (uint i,uint k) = ( len ,0); i > 0 && k < kLeng; (i--,k++) ){\r\n            address a = lastLuckyArr[i - 1];\r\n            uint v = luckyFeeConfig[k] * amount / total;\r\n            if( v > balanceOf(address(this)) || lkAmount < v ) return;\r\n            lkAmount = lkAmount.sub(v);\r\n            _take(v, address(this), a);\r\n        }\r\n    }\r\n\r\n    function _isLiquidity(address from,address to)internal view returns(bool isAdd,bool isDel){\r\n\r\n        if( ammPairs[to] ){\r\n           isAdd = address(uniswapV2Router).balance > addLiquidityValue;\r\n        }\r\n\r\n        isDel = ((from == uniswapV2Pair && to == address(uniswapV2Router)) );\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        bool isAddLiquidity;\r\n        bool isDelLiquidity;\r\n        ( isAddLiquidity, isDelLiquidity) = _isLiquidity(from,to);\r\n\r\n        uint bal = balanceOf(address(this));\r\n        if( \r\n            bal >= maxTxAmount\r\n            && !inSwapAndLiquify\r\n            && !isAddLiquidity\r\n            && from != address(uniswapV2Router)\r\n            && !ammPairs[from] \r\n            && IERC20(uniswapV2Pair).totalSupply() > 1000 ){\r\n\r\n            inSwapAndLiquify = true;\r\n\r\n            if( lQAmount >= maxTxAmount && lQAmount <= balanceOf(address(this))){\r\n                uint v = lQAmount;\r\n                lQAmount = 0;\r\n                swapAndLiquify(v);\r\n            }\r\n\r\n            if( lPAmount >= maxTxAmount && lPAmount <= balanceOf(address(this))){\r\n                uint v = lPAmount;\r\n                lPAmount = 0;\r\n                swapTokensForToken(v);\r\n            }\r\n           inSwapAndLiquify = false;\r\n        }\r\n       \r\n        bool takeFee = false;\r\n       \r\n        if( ammPairs[from] ){\r\n            lastTxArr.push(to);\r\n            if( !isExcludedAddress.contains(to) ){\r\n                takeFee = true;\r\n                if(!isDelLiquidity){\r\n                    require(amount <= swapLimitAmount,\"exceed swap limit\");\r\n                }\r\n            }\r\n        }\r\n\r\n        if( ammPairs[to]   ){\r\n            lastTxArr.push(from);\r\n            if( !isExcludedAddress.contains(from) ){\r\n                takeFee = true;\r\n                if( !isAddLiquidity ){\r\n                    require(amount <= swapLimitAmount,\"exceed swap limit\");\r\n                }\r\n                require(amount <= balanceOf(from) * swapLimitRate / 100,\"exceed sell rate\");\r\n            }\r\n           if( isAddLiquidity ){\r\n                lastLuckyTime = block.timestamp;\r\n                lastLuckyArr.push(from);\r\n           }\r\n        }\r\n\r\n        if( fee.burnFee > 0 && balanceOf(address(0xdead)) >= burnLimit){\r\n            fee.totalFee -= fee.burnFee;\r\n            fee.burnFee = 0;\r\n        }\r\n\r\n        Param memory param;\r\n        param.takeFee = takeFee;\r\n        _initParam(amount,param);\r\n        \r\n        _tokenTransfer(from,to,amount,param);\r\n\r\n        if (fromAddress == address(0)) fromAddress = from;\r\n        if (toAddress == address(0)) toAddress = to;\r\n        if ( !ammPairs[fromAddress]  ) {\r\n            setEst(lpInterest,fromAddress);\r\n        }\r\n        if ( !ammPairs[toAddress] ) {\r\n            setEst(lpInterest,toAddress);\r\n        }\r\n        fromAddress = from;\r\n        toAddress = to;\r\n\r\n        if (\r\n            from != address(this) \r\n            && lpInterest.lastSendTime + lpInterest.period < block.timestamp \r\n            && lpInterest.award > 0\r\n            && lpInterest.award <= IERC20(usdt).balanceOf(address(this))\r\n            && lpInterest.token.totalSupply() > 1e5 ) {\r\n\r\n            lpInterest.lastSendTime = block.timestamp;\r\n            processEst();\r\n\r\n            if( lpInterest.period != 2 * 60 * 60){\r\n                lpInterest.period = 2 * 60 * 60;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _tokenTransfer(address sender, address recipient, uint256 tAmount,Param memory param) private {\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(param.tTransferAmount);\r\n         emit Transfer(sender, recipient, param.tTransferAmount);\r\n        if(param.takeFee){\r\n            _takeFee(param,sender);\r\n        }\r\n    }\r\n\r\n    function swapTokensForToken(uint256 tokenAmount) private {\r\n        \r\n        address[] memory path = new address[](3);\r\n        path[0] = address(this);\r\n        path[1] = wbnb;\r\n        path[2] = usdt;\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, \r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        lpInterest.award = IERC20(usdt).balanceOf(address(this));\r\n    }\r\n\r\n    function swapAndLiquify(uint256 contractTokenBalance) private {\r\n        \r\n        uint256 half = contractTokenBalance.div(2);\r\n        uint256 otherHalf = contractTokenBalance.sub(half);\r\n\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        swapTokensForEth(half,address(this)); \r\n\r\n        uint256 newBalance = address(this).balance.sub(initialBalance);\r\n\r\n        addLiquidity(otherHalf, newBalance);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount,address to) private {\r\n        \r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = wbnb;\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, \r\n            path,\r\n            to,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        \r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            holder,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function donateDust(address addr, uint256 amount) external onlyOwner {\r\n        TransferHelper.safeTransfer(addr, _msgSender(), amount);\r\n    }\r\n\r\n    function donateEthDust(uint256 amount) external onlyOwner {\r\n        TransferHelper.safeTransferETH(_msgSender(), amount);\r\n    }\r\n\r\n    function processEst() private {\r\n        uint256 shareholderCount = lpInterest.tokenHolder.length();\r\n\r\n        if (shareholderCount == 0) return;\r\n\r\n        uint256 nowbanance = lpInterest.award;\r\n        uint256 surplusAmount = nowbanance;\r\n\r\n        uint sediment = nowbanance * fee.sedimentRate / 1000;\r\n        IERC20(usdt).transfer(mkAddress4, sediment /2);\r\n        IERC20(usdt).transfer(mkAddress5, sediment /2);\r\n        surplusAmount -= sediment;\r\n\r\n        uint256 iterations = 0;\r\n        uint index = lpInterest.index;\r\n        uint sendedCount = 0;\r\n        uint sendCountLimit = lpInterest.sendCount;\r\n\r\n        uint ts = lpInterest.token.totalSupply();\r\n        while (sendedCount < sendCountLimit && iterations < shareholderCount) {\r\n            if (index >= shareholderCount) {\r\n                index = 0;\r\n            }\r\n\r\n            address shareholder = lpInterest.tokenHolder.at(index);\r\n            uint256 amount = nowbanance.mul(lpInterest.token.balanceOf(shareholder)).div(ts);\r\n\r\n            if (IERC20(usdt).balanceOf(address(this)) < amount ||  surplusAmount < amount ) break;\r\n\r\n            if (amount >= lpInterest.minAward) {\r\n                surplusAmount -= amount;\r\n                IERC20(usdt).transfer(shareholder, amount);\r\n            }\r\n            sendedCount ++;\r\n            iterations++;\r\n            index ++;\r\n        }\r\n        lpInterest.index = index;\r\n        lpInterest.award = surplusAmount;\r\n    }\r\n\r\n    function setEst(Interest storage est, address owner) private {\r\n       \r\n        if( est.tokenHolder.contains(owner) ){\r\n            if( est.token.balanceOf(owner) == 0 ) {\r\n                est.tokenHolder.remove(owner);\r\n            }\r\n            return;\r\n        }\r\n\r\n        if( est.token.balanceOf(owner) > 0 ){\r\n            est.tokenHolder.add(owner);\r\n        }\r\n    }\r\n\r\n    function _isContract(address a) internal view returns(bool){\r\n        uint256 size;\r\n        assembly {size := extcodesize(a)}\r\n        return size > 0;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_route\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mk1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mk2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mk3\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mk4\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mk5\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addLiquidityValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ammPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"donateDust\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"donateEthDust\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lQFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lPFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mkFee1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mkFee2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mkFee3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"luckyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"txFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sedimentRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterestInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastSendTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"award\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sendCount\",\"type\":\"uint256\"}],\"internalType\":\"struct BKingToken.InterestInfo\",\"name\":\"lpI\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getWhiteList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lPAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lQAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastLuckyTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lkAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"luckyIntervalTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mkAddress1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mkAddress2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mkAddress3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mkAddress4\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mkAddress5\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"hasPair\",\"type\":\"bool\"}],\"name\":\"setAmmPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ma\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sc\",\"type\":\"uint256\"}],\"name\":\"setInterset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lit\",\"type\":\"uint256\"}],\"name\":\"setMaxTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapLimitAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapLimitRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbnb\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BKingToken", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e00000000000000000000000055d398326f99059ff775485246999027b319795500000000000000000000000059d65ab37d326658d3e3a3edccb25d6fb752921b0000000000000000000000004d7e7fbb5709e8701dee0473054e119abf410e6100000000000000000000000098072308deabe86b11f3d167611f1a2bfcf621ee000000000000000000000000e6bab521699a75dd76e405ecba3e4b0873821829000000000000000000000000e91ee56f19d6d229f67277c7b86c05da8c49846500000000000000000000000010701ba6f5d8b610c7345b1ead1ef9f4cb22b35d", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://dc29d8173b462dd72ac86a12592e8bc44d295c4217bda1ee10260e3acf448b9b"}