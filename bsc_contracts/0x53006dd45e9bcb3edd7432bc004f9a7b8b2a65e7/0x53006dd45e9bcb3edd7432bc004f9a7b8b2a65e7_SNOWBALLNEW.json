{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/snowball_new.sol\": {\r\n      \"content\": \"\\npragma solidity ^0.8.6;\\n\\n// SPDX-License-Identifier: Unlicensed\\n\\nimport \\\"./libs/Ownable.sol\\\";\\nimport \\\"./libs/ERC20.sol\\\";\\nimport \\\"./libs/IERC20.sol\\\";\\nimport \\\"./libs/SafeMath.sol\\\";\\n// import \\\"hardhat/console.sol\\\";\\nimport \\\"./libs/TransferHelp.sol\\\";\\n\\ninterface INftMetaSMA {\\n    function getAnyInviter(address account) external view returns (address);\\n    function isBlocked(address account) external view returns (bool);\\n    function refreshNftRewards(uint256 curblock) external returns(bool);\\n    function autoSetInviter(address account, address newinviter) external returns(bool);\\n    function getUsrIdoAmount(address account) external view returns(uint256);\\n}\\n\\ninterface ISnowBPool {\\n    function getRepayFrontAddress() external view returns(address);\\n    function newReturnOrder(uint256 _amount,uint256 _value) external returns(bool);\\n    function newRepayOrder(address _account,uint256 _amount,uint256 _value) external returns(bool);\\n    function putinFomoPool(uint256 _amount,uint256 _value) external returns(bool);\\n    function putinRepayPool(uint256 _amount,uint256 _value) external returns(bool);\\n    function burstFomoPool(bool _istimeburst) external returns(bool);\\n    function getLastRepayOrderTime() external view returns(uint256); \\n    function isInRepayList(address account) external view returns(bool,uint256,uint256);\\n    function newSingleReturnOrderTransferValue(address _account,uint256 _amount,uint256 _value) external returns(bool);\\n}\\n\\n// pragma solidity >=0.5.0;\\n//lp contract\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n   \\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\\n// pragma solidity >=0.6.2;\\n//dex router contract\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\\n// pragma solidity >=0.6.2;\\n//dex router contract02\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n}\\n\\ncontract SNOWBALLNEW is IERC20, Ownable {\\n    using SafeMath for uint256;\\n\\n    mapping(address => uint256) private _rOwned;\\n    mapping(address => uint256) private _tOwned;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    mapping(address => bool) private _isExcludedFromFee;\\n\\n    bytes public fail;\\n    uint256 private constant MAX = ~uint256(0);\\n    uint256 private _tTotal;\\n\\t// uint256 private _tTotalMaxFee;\\n    uint256 private _rTotal;\\n    uint256 private _tFeeTotal;\\n    bool private _canSwap;\\n    bool private _canTransfer;\\n    bool private _canRepay;\\n\\n    address[] private _excluded; //white list\\n\\n    INftMetaSMA public idoContract;\\n    ISnowBPool public snowbPoolContract;\\n    address public uniswapV2Pair;\\n    IUniswapV2Router02 public routerAddress;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint256 private _decimals;\\n    \\n    uint256 private   feeLevels;\\n\\n    uint256 private devopsRate; \\n    \\n    uint256 private fomoRate;\\n    uint256 private swapRepayRate;\\n\\n    uint256 private repayRate;\\n    uint256 private repayInvitRate;\\n    uint256 private repayFomoRate;\\n    uint256 private nftRate;\\n\\n    uint256 private repayReturnRate;\\n    uint256 private transferRate;\\n\\n    uint256 public beginTime;\\n\\n    address private _destroyAddress = address(0x000000000000000000000000000000000000dEaD);\\n    address public _devopsAddress; \\n    \\n    constructor(address tokenOwner,address _routerAddress, address _devopsaddress, uint256 _devopsRate,uint256 _nftRate, \\n        uint256 _fomoRate, uint256 _swapRepayRate, uint256 _repayRate,uint256 _repayInvitRate, uint256 _repayFomoRate, uint256 _feeLevels) {\\n        _name = \\\"Shib Mutual Aid\\\";\\n        _symbol = \\\"SMA\\\";\\n        _decimals = 18;\\n        _tTotal = 1000000000 * 10 ** _decimals;\\n\\t\\t// _tTotalMaxFee = _tTotal.div(100).mul(99);\\n\\t\\t\\n        _rTotal = (MAX - (MAX % _tTotal));\\n        _rOwned[tokenOwner] = _rTotal;\\n        _isExcludedFromFee[msg.sender] = true; \\n        _isExcludedFromFee[tokenOwner] = true; \\n        _isExcludedFromFee[address(this)] = true;\\n        routerAddress = IUniswapV2Router02(_routerAddress);\\n        _devopsAddress = _devopsaddress;\\n        \\n        devopsRate = _devopsRate; //0.5%\\n        nftRate = _nftRate; //4%\\n        swapRepayRate = _swapRepayRate; //1.5%\\n        fomoRate = _fomoRate;   //1.0\\n        repayRate = _repayRate; //63%\\n        repayInvitRate = _repayInvitRate;   //32%\\n        repayFomoRate = _repayFomoRate; //5%\\n\\n        repayReturnRate = 500; //50%\\n        transferRate = 300;   //15%\\n\\n        feeLevels = _feeLevels;\\n\\n        _canSwap = false;\\n        _canTransfer = true;\\n        _canRepay = false;\\n        _owner = msg.sender;\\n        emit Transfer(address(0), tokenOwner, _tTotal);\\n    }\\n\\n    function getRepayRate() public view returns (uint256) {\\n        return repayRate;\\n    }\\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view returns (uint256) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _tTotal;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return tokenFromReflection(_rOwned[account]);\\n    }\\n\\n    function tokenFromReflection(uint256 rAmount)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        require(\\n            rAmount <= _rTotal,\\n            \\\"Amount must be less than total reflections\\\"\\n        );\\n        uint256 currentRate = _getRate();\\n        return rAmount.div(currentRate);\\n    }\\n\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            msg.sender,\\n            _allowances[sender][msg.sender].sub(amount,\\\"BEP20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            msg.sender,\\n            spender,\\n            _allowances[msg.sender][spender].add(addedValue)\\n        );\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            msg.sender,\\n            spender,\\n            _allowances[msg.sender][spender].sub(\\n                subtractedValue,\\n                \\\"BEP20: decreased allowance below zero\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    function totalFees() public view returns (uint256) {\\n        return _tFeeTotal;\\n    }\\n\\n    function excludeFromFee(address account) public onlyOwner {\\n        require(account != _owner && account != address(0),\\\"Can't set owner or zero\\\");\\n        require(!_isExcludedFromFee[account], \\\"Account is already excluded\\\");\\n\\n        _isExcludedFromFee[account] = true;\\n        _excluded.push(account);\\n    }\\n\\n    function includeInFee(address account) public onlyOwner {\\n        require(account !=_owner && account !=address(0),\\\"Can't set owner or zero\\\");\\n        require(_isExcludedFromFee[account], \\\"Account is not excluded\\\");\\n\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\n            if (_excluded[i] == account) {\\n                _excluded[i] = _excluded[_excluded.length - 1];\\n                _isExcludedFromFee[account] = false;\\n                _excluded.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    function getFeeArry() public view returns(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256){\\n        return (devopsRate , nftRate, swapRepayRate, fomoRate, \\n            repayRate, repayInvitRate, repayFomoRate, repayReturnRate, transferRate, feeLevels);\\n    }\\n\\n    function setFeeArry(uint256 _devopsRate,uint256 _nftRate, uint256 _fomoRate, uint256 _swapRepayRate, \\n        uint256 _repayRate,uint256 _repayInvitRate, uint256 _repayFomoRate, \\n        uint256 _repayReturnRate, uint256 _transferRate, uint256 _feeLevels) public onlyOwner {\\n\\n        devopsRate = _devopsRate; //5  0.5%\u8fd0\u7ef4\u57fa\u91d1\\n        nftRate = _nftRate; //40  4% \u4e92\u52a9\u6c60\u5206\u914dNFT\u6c60\\n        swapRepayRate = _swapRepayRate; //15  1.5%\u4ea4\u6613\u516c\u6392\u9996\u4f4d\\n        fomoRate = _fomoRate;   //10  1%\u4ea4\u6613\u8fdbFoMo\u6c60\\n        repayRate = _repayRate; //590 59%\u4e92\u52a9\u6c60\u5206\u914d\u6bd4\u4f8b\\n        repayInvitRate = _repayInvitRate;   //320  32%\u4e92\u52a9\u6c608\u4ee3\u6536\u76ca\\n        repayFomoRate = _repayFomoRate; //50  5%  \u4e92\u52a9\u6c60\u5206\u914d\u8fdbFoMo\u6c60\\n        feeLevels = _feeLevels; //\\b\u5206\u7ea2\u5c42\u7ea7  8 \u4e92\u52a9\u6c60\u5206\u914d\u5c42\u7ea7\u6570\\n        repayReturnRate = _repayReturnRate; //500  50% \u4e92\u52a9\u6c60\u507f\u8fd8\u9996\u4f4d\u6bd4\u4f8b\\n        transferRate = _transferRate;  //300  30% \u8f6c\u8d26\u507f\u8fd8\u9996\u4f4d\u6bd4\u4f8b\\n    }\\n\\n    //to recieve ETH from uniswapV2Router when swaping\\n    receive() external payable {}\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function _getRate() private view returns (uint256) {\\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\n        return rSupply.div(tSupply);\\n    }\\n\\n    function _getCurrentSupply() private view returns (uint256, uint256) {\\n        uint256 rSupply = _rTotal;\\n        uint256 tSupply = _tTotal;\\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\\n        return (rSupply, tSupply);\\n    }\\n\\n    function claimTokens() public onlyOwner {\\n        TransferHelper.safeTransferETH(_owner, address(this).balance);\\n    }\\n\\n    \\n    function claimOtherTokens(IERC20 token,address to, uint256 amount) public onlyOwner {\\n        require(to != address(this) && to != address(0) && address(token) != address(0), \\\"Error target address\\\");\\n        uint256 abalance;\\n        abalance = token.balanceOf(address(this));\\n        require(amount <= abalance && amount>0, \\\"Insufficient funds\\\");\\n\\n        TransferHelper.safeTransfer(address(token), to, amount);\\n    }\\n\\n    function isExcludedFromFee(address account) public view returns (bool) {\\n        return _isExcludedFromFee[account];\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) private {\\n        require(owner != address(0), \\\"BEP20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"BEP20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) private {\\n        require(from != address(0) && to != address(0), \\\"BEP20: transfer from or to the zero address\\\");\\n        require(_canTransfer, \\\"Transfer paused!\\\");\\n        require(!idoContract.isBlocked(from), \\\"Sender is Blocked!\\\");\\n        if (from != address(snowbPoolContract)){\\n            require(!idoContract.isBlocked(to), \\\"recipient is Blocked!\\\");\\n        }\\n        \\n        require(amount > 0 && amount<= balanceOf(from), \\\"Sender insufficient funds\\\");\\n        \\t\\t\\n        bool takeFee = true;\\n\\t\\tuint256 _value;\\n        uint256 _idoamount;\\n\\n        if(from != uniswapV2Pair && to != uniswapV2Pair && from != address(routerAddress)){\\n            takeFee = false;\\n        }else{\\n            if (!_canSwap){\\n                _value = _getAmountValue(amount);\\n                _idoamount = idoContract.getUsrIdoAmount(to);  //check nft amount\\n                \\n                if (from == _owner || to == _owner ||\\n                    (_idoamount>0 && _value<=(_idoamount.div(3)) && _value>=(_idoamount.div(4)))){\\n                }else{\\n                    require(_canSwap, \\\"Swap paused!\\\");\\n                }\\n            }\\n        }\\n\\n        if (to == address(routerAddress)){\\n            if (!_canSwap){\\n                _value = _getAmountValue(amount);\\n                _idoamount = idoContract.getUsrIdoAmount(to);\\n                \\n                if (from == _owner || from == uniswapV2Pair ||\\n                    (_idoamount>0 && _value<=(_idoamount.div(3)) && _value>=(_idoamount.div(4)))){\\n                        \\n                }else{\\n                    require(_canSwap, \\\"Swap paused!\\\");\\n                }\\n            }\\n            takeFee = false;\\n        }\\n        \\n        // console.log(from,to,amount,takeFee);\\n        _tokenTransfer(from, to, amount, takeFee);\\n\\n    }\\n\\n    function _getAmountValue(uint256 amount) public view returns(uint256 value){\\n        uint256 reserve0;\\n        uint256 reserve1;\\n\\n        if (amount==0){\\n            value =0;\\n            return value;\\n        }\\n        \\n        if (uniswapV2Pair!=address(0)){\\n            (reserve0,reserve1,) = IUniswapV2Pair(uniswapV2Pair).getReserves();\\n            if (reserve0>0 && reserve1>0){\\n                if (IUniswapV2Pair(uniswapV2Pair).token0()==address(this)){\\n                    value  = IUniswapV2Router02(routerAddress).getAmountOut(amount,reserve0,reserve1);\\n                }else{\\n                    value  = IUniswapV2Router02(routerAddress).getAmountOut(amount,reserve1,reserve0);\\n                }\\n            }else{\\n                value = 0;\\n            }\\n        }else{\\n            value = 0;\\n        }\\n        \\n        return value;\\n    }\\n    \\n    function _tokenTransfer(\\n        address sender,\\n        address recipient,\\n        uint256 tAmount,\\n        bool _isSwap\\n    ) private {\\n        uint256 currentRate = _getRate();\\n        uint256 rAmount = tAmount.mul(currentRate);\\n        uint256 rate = 0;\\n        uint256 _value;\\n\\n        // console.log(balanceOf(sender),balanceOf(recipient));\\n\\n        _value = _getAmountValue(tAmount);\\n        \\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\n        // console.log(_rOwned[sender],rAmount,currentRate);\\n        if (_isSwap) {\\n            if (!_isExcludedFromFee[sender] && !_isExcludedFromFee[recipient]){\\n                // if (feeLevels>0 && invitRate>0){  //0%\\n                //     _takeInviterFee(sender, recipient, tAmount, currentRate,false); \\n                // }\\n                \\n                if (devopsRate>0){  //0.5%\\n                    _takeTransfer(sender,_devopsAddress,tAmount.mul(devopsRate).div(1000),currentRate);\\n                }\\n\\n                if (swapRepayRate>0){ //1.5%\\n                    _takeTransfer(sender,address(snowbPoolContract),tAmount.mul(swapRepayRate).div(1000),currentRate);\\n                    snowbPoolContract.putinRepayPool(tAmount.mul(swapRepayRate).div(1000), _value.mul(swapRepayRate).div(1000));\\n                    snowbPoolContract.newReturnOrder(tAmount.mul(swapRepayRate).div(1000), _value.mul(swapRepayRate).div(1000));\\n                }\\n\\n                if (fomoRate>0){    //1%\\n                    _takeTransfer(sender,address(snowbPoolContract),tAmount.mul(fomoRate).div(1000),currentRate);\\n                    snowbPoolContract.putinFomoPool(tAmount.mul(fomoRate).div(1000), _value.mul(fomoRate).div(1000));\\n                }\\n                \\n                rate = devopsRate  + swapRepayRate + fomoRate;\\n            }else{\\n                rate = 0;\\n            }\\n\\n            if (rate>0){\\n                _rOwned[recipient] = _rOwned[recipient].add(\\n                    rAmount.mul(1000 - rate).div(1000));\\n                emit Transfer(sender, recipient, tAmount.mul(1000 - rate).div(1000));\\n            }else{\\n                _rOwned[recipient] = _rOwned[recipient].add(rAmount);\\n                emit Transfer(sender, recipient, tAmount);\\n            }\\n        }else{\\n            if (recipient == _destroyAddress){\\n                require(address(snowbPoolContract) != address(0) && \\n                        address(idoContract) != address(0) && _canRepay, \\\"repay paused\\\");\\n                    \\n                address firstaddress = snowbPoolContract.getRepayFrontAddress();\\n                if (idoContract.getAnyInviter(sender)==address(0) && firstaddress!=_destroyAddress &&\\n                        firstaddress!=address(0)){\\n                    idoContract.autoSetInviter(sender, firstaddress);\\n                }\\n\\n                if (nftRate>0){\\n                    _takeTransfer(sender,address(idoContract),tAmount.mul(nftRate).div(1000),currentRate); \\n                    idoContract.refreshNftRewards(block.number); //nft refresh rewards\\n                }\\n\\n                if (repayRate>0 && address(snowbPoolContract) != address(0)){ \\n                    _takeTransfer(sender,address(snowbPoolContract),tAmount.mul(repayRate+repayInvitRate+repayFomoRate).div(1000),currentRate); \\n                    snowbPoolContract.newRepayOrder(sender, tAmount, _value);\\n                    snowbPoolContract.newReturnOrder(tAmount.mul(repayReturnRate).div(1000), _value.div(1000).mul(repayReturnRate));\\n                }\\n\\n                if (repayInvitRate>0 && address(snowbPoolContract) != address(0)){\\n                    // _takeTransfer(sender,address(snowbPoolContract),tAmount.mul(repayInvitRate).div(1000),currentRate); \\n                    _takeInviterFee(sender, recipient, tAmount, currentRate); \\n                }\\n                \\n                if (repayFomoRate>0){\\n                    // _takeTransfer(sender,address(snowbPoolContract),tAmount.div(1000).mul(repayFomoRate),currentRate);\\n                    snowbPoolContract.putinFomoPool(tAmount.div(1000).mul(repayFomoRate), _value.div(1000).mul(repayFomoRate));\\n                }\\n\\n                rate = repayRate + repayInvitRate + repayFomoRate + nftRate;\\n                \\n                if ((1000 - rate)>0){\\n                    _rOwned[recipient] = _rOwned[recipient].add(\\n                        rAmount.div(1000).mul(1000 - rate));\\n                    emit Transfer(sender, recipient, tAmount.div(1000).mul(1000 - rate));\\n                }\\n                \\n            }else{\\n                if (_isExcludedFromFee[sender] || _isExcludedFromFee[recipient] ||\\n                    (recipient == address(routerAddress) && sender == uniswapV2Pair)) {\\n                    rate = 0;   \\n                }else{\\n                    rate = transferRate;\\n                }\\n\\n                if (rate>0){\\n                    _takeTransfer(sender,address(snowbPoolContract),tAmount.div(1000).mul(transferRate),currentRate); //to repaypool 30%\\n                    snowbPoolContract.putinRepayPool(tAmount.div(1000).mul(transferRate), _value.div(1000).mul(transferRate));    //pool process                \\n                    snowbPoolContract.newReturnOrder(tAmount.div(1000).mul(repayReturnRate), _value.div(1000).mul(repayReturnRate)); //return 50% to first address\\n                }\\n                \\n                if ((1000-rate)>0){\\n                    _rOwned[recipient] = _rOwned[recipient].add(\\n                        rAmount.div(1000).mul(1000 - rate));\\n                    emit Transfer(sender, recipient, tAmount.div(1000).mul(1000 - rate));                \\n                }\\n            }\\n        }\\n\\n        // console.log(balanceOf(sender),balanceOf(recipient),rate);\\n    }\\n\\n    function _takeTransfer(\\n        address sender,\\n        address to,\\n        uint256 tAmount,\\n        uint256 currentRate\\n    ) private {\\n        uint256 rAmount = tAmount.mul(currentRate);\\n        _rOwned[to] = _rOwned[to].add(rAmount);\\n        emit Transfer(sender, to, tAmount);\\n    }\\n\\n    function _takeInviterFee(\\n        address sender,\\n        address recipient,\\n        uint256 tAmount,\\n        uint256 currentRate\\n    ) private {\\n        address cur;\\n\\t\\taddress reciver;\\n        uint256 curTAmount;\\n        uint256 ttdevopsamount;\\n        uint256 curBalanceof;\\n        uint256 payedvalue;\\n        uint256 ttdevopsreturnamount;\\n\\n        ttdevopsamount = 0;\\n        ttdevopsreturnamount = 0;\\n        if (sender == uniswapV2Pair || sender == address(routerAddress)) {\\n            cur = recipient;\\n        } else {\\n            cur = sender;\\n        }\\n\\n        for (uint256 i = 0; i < feeLevels; i++) {\\n            curTAmount = tAmount.div(1000).mul(repayInvitRate).div(feeLevels);\\n            payedvalue = 0;\\n\\n            cur = idoContract.getAnyInviter(cur);\\n\\n            if (cur == address(0)) {    \\n                reciver = _devopsAddress;\\n            }else{\\n                reciver = cur;\\n            }\\n            \\n            curBalanceof = balanceOf(reciver);\\n            (,,payedvalue) = snowbPoolContract.isInRepayList(reciver);\\n            if (_getAmountValue(curBalanceof)>=(15*10**18) && \\n                    (payedvalue>=((i+1).mul(100*10**18)))){\\n                if (curTAmount>0){\\n                    if (reciver == _devopsAddress){\\n                        ttdevopsreturnamount = ttdevopsreturnamount.add(curTAmount);\\n                    }else{\\n                        snowbPoolContract.newSingleReturnOrderTransferValue(reciver,curTAmount,_getAmountValue(curTAmount));\\n                    }\\n                }\\n            }else{\\n                ttdevopsamount = ttdevopsamount.add(curTAmount);\\n            }\\n        }\\n        if (ttdevopsreturnamount>0){\\n            snowbPoolContract.newSingleReturnOrderTransferValue(_devopsAddress,ttdevopsreturnamount,_getAmountValue(ttdevopsreturnamount));\\n        }\\n\\n        if (ttdevopsamount>0){\\n            _rOwned[address(snowbPoolContract)] = _rOwned[address(snowbPoolContract)].sub(ttdevopsamount.mul(currentRate));\\n            _rOwned[_devopsAddress] = _rOwned[_devopsAddress].add(ttdevopsamount.mul(currentRate));\\n            emit Transfer(address(snowbPoolContract), _devopsAddress, ttdevopsamount); \\n        }            \\n    }\\n\\t\\n    function changeIDOAddress(address _idoAddress) public onlyOwner {\\n        require(_idoAddress != address(0) && isContract(_idoAddress),\\\"Error zero IDO address\\\");\\n        require(_idoAddress != address(idoContract),\\\"Error new IDO address can't be same to old\\\");\\n        \\n        idoContract = INftMetaSMA(_idoAddress);\\n    }\\n\\n    function changeSnowPoolAddress(address _snowPoolAddress) public onlyOwner {\\n        require(_snowPoolAddress != address(0) && isContract(_snowPoolAddress),\\\"Error zero Pool address\\\");\\n        require(_snowPoolAddress != address(snowbPoolContract),\\\"Error new Pool address can't be same to old\\\");\\n        \\n        snowbPoolContract = ISnowBPool(_snowPoolAddress);\\n    }\\n\\n    function changePairAddress(address _pair) public onlyOwner {\\n        require(_pair != address(0) && isContract(_pair),\\\"Error zero pair address\\\");\\n        require(_pair != _owner,\\\"Error pair address can't be owner\\\");\\n        require(_pair != uniswapV2Pair,\\\"Error new pair address can't be same to old\\\");\\n        \\n        uniswapV2Pair = _pair;\\n    }\\n\\n    function changeRouteAddress(address _router) public onlyOwner {\\n        require(_router != address(0) && isContract(_router),\\\"Error zero router address\\\");\\n        require(_router != _owner,\\\"Error router address can't be owner\\\");\\n        require(_router != address(routerAddress),\\\"Error new router address can't be same to old\\\");\\n        \\n        routerAddress = IUniswapV2Router02(_router);\\n    }\\n\\n    fallback () external {\\n        fail = msg.data;\\n    }\\n\\n    function getfail() public view returns(bytes memory){\\n        return fail;\\n    }\\n\\n    function setSwapEnable(bool enable) public onlyOwner {\\n        _canSwap = enable;\\n    }\\n\\n    function setTransferEnable(bool enable) public onlyOwner {\\n        _canTransfer = enable;\\n    }\\n\\n    function setRepayEnable(bool enable) public onlyOwner {\\n        _canRepay = enable;\\n    }\\n\\n    function getExcluded() public view onlyOwner returns (address[] memory) {\\n        return _excluded;\\n    }\\n}\"\r\n    },\r\n    \"/contracts/libs/TransferHelp.sol\": {\r\n      \"content\": \"\\npragma solidity >=0.6.12;\\n// SPDX-License-Identifier: Unlicensed\\n\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\"\r\n    },\r\n    \"/contracts/libs/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.12;\\n// SPDX-License-Identifier: Unlicensed\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\n\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\"\r\n    },\r\n    \"/contracts/libs/Ownable.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.12;\\n// SPDX-License-Identifier: Unlicensed\\n\\nimport \\\"./Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\n\\nabstract contract Ownable is Context {\\n    address internal _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/libs/IERC20.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.12;\\n// SPDX-License-Identifier: Unlicensed\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"\r\n    },\r\n    \"/contracts/libs/ERC20.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.12;\\n\\n// SPDX-License-Identifier: Unlicensed\\n\\nimport \\\"./Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\nabstract contract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory aname, string memory asymbol)  {\\n        _name = aname;\\n        _symbol = asymbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"/contracts/libs/Context.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.12;\\n// SPDX-License-Identifier: Unlicensed\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\"\r\n    },\r\n    \"/contracts/libs/Address.sol\": {\r\n      \"content\": \"\\n\\npragma solidity >=0.6.12;\\n// SPDX-License-Identifier: Unlicensed\\n\\n\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"byzantium\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_routerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devopsaddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_devopsRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nftRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fomoRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_swapRepayRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_repayRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_repayInvitRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_repayFomoRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeLevels\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"_devopsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_getAmountValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beginTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_idoAddress\",\"type\":\"address\"}],\"name\":\"changeIDOAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"changePairAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"changeRouteAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_snowPoolAddress\",\"type\":\"address\"}],\"name\":\"changeSnowPoolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimOtherTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fail\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExcluded\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeArry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRepayRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getfail\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"idoContract\",\"outputs\":[{\"internalType\":\"contract INftMetaSMA\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerAddress\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_devopsRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nftRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fomoRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_swapRepayRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_repayRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_repayInvitRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_repayFomoRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_repayReturnRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transferRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeLevels\",\"type\":\"uint256\"}],\"name\":\"setFeeArry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setRepayEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setTransferEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snowbPoolContract\",\"outputs\":[{\"internalType\":\"contract ISnowBPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SNOWBALLNEW", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000009020ff667df51fa04d4b691437fc61a34c90518600000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e000000000000000000000000ad2be658c5a80bab2cd3fc4ea77c8ecd21ea6c7800000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000f000000000000000000000000000000000000000000000000000000000000024e000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000008", "EVMVersion": "byzantium", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}