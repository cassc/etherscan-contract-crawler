{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBaseRewardPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBaseRewardPool {\\n    function stakingDecimals() external view returns (uint256);\\n\\n    function totalStaked() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function rewardPerToken(address token) external view returns (uint256);\\n\\n    function rewardTokenInfos()\\n        external\\n        view\\n        returns\\n        (\\n            address[] memory bonusTokenAddresses,\\n            string[] memory bonusTokenSymbols\\n        );\\n\\n    function earned(address account, address token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function allEarned(address account)\\n        external\\n        view\\n        returns (uint256[] memory pendingBonusRewards);\\n\\n    function queueNewRewards(uint256 _rewards, address token)\\n        external\\n        returns (bool);\\n\\n    function getReward(address _account, address _receiver) external returns (bool);\\n\\n    function getRewards(address _account, address _receiver, address[] memory _rewardTokens) external;\\n\\n    function updateFor(address account) external;\\n\\n    function updateManager(address _rewardManager, bool _allowed) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IMasterMagpie.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ninterface IMasterMagpie {\\n    function poolLength() external view returns (uint256);\\n\\n    function setPoolManagerStatus(address _address, bool _bool) external;\\n\\n    function add(uint256 _allocPoint, address _stakingTokenToken, address _rewarder, address _helper, bool _helperNeedsHarvest) external;\\n\\n    function set(address _stakingToken, uint256 _allocPoint, address _helper,\\n        address _rewarder, bool _helperNeedsHarvest) external;\\n\\n    function createRewarder(address _stakingTokenToken, address mainRewardToken) external\\n        returns (address);\\n\\n    // View function to see pending GMPs on frontend.\\n    function getPoolInfo(address token) external view\\n        returns (\\n            uint256 emission,\\n            uint256 allocpoint,\\n            uint256 sizeOfPool,\\n            uint256 totalPoint\\n        );\\n\\n    function rewarderBonusTokenInfo(address _stakingToken) external view\\n        returns (address[] memory bonusTokenAddresses, string[] memory bonusTokenSymbols);\\n\\n    function pendingTokens(address _stakingToken, address _user, address token) external view\\n        returns (\\n            uint256 _pendingGMP,\\n            address _bonusTokenAddress,\\n            string memory _bonusTokenSymbol,\\n            uint256 _pendingBonusToken\\n        );\\n\\n    function allPendingTokens(address _stakingToken, address _user)external view\\n        returns (\\n            uint256 pendingMGP,\\n            address[] memory bonusTokenAddresses,\\n            string[] memory bonusTokenSymbols,\\n            uint256[] memory pendingBonusRewards\\n        );\\n\\n    function massUpdatePools() external;\\n\\n    function updatePool(address _stakingToken) external;\\n\\n    function deposit(address _stakingToken, uint256 _amount) external;\\n\\n    function withdraw(address _stakingToken, uint256 _amount) external;\\n\\n    function depositFor(address _stakingToken, uint256 _amount, address sender) external;\\n\\n    function withdrawFor(address _stakingToken, uint256 _amount, address _sender ) external;\\n\\n    function depositVlMGPFor(uint256 _amount, address sender) external;\\n\\n    function withdrawVlMGPFor(uint256 _amount, address sender) external;\\n\\n    function depositMWomSVFor(uint256 _amount, address sender) external;\\n\\n    function withdrawMWomSVFor(uint256 _amount, address sender) external;    \\n\\n    function multiclaimFor(address[] calldata _stakingTokens, address[][] calldata _rewardTokens, address user_address) external;\\n\\n    function multiclaimOnBehalf(address[] memory _stakingTokens, address[][] calldata _rewardTokens, address user_address) external;\\n\\n    function emergencyWithdraw(address _stakingToken, address sender) external;\\n\\n    function updateEmissionRate(uint256 _gmpPerSec) external;\\n\\n    function stakingInfo(address _stakingToken, address _user)\\n        external\\n        view\\n        returns (uint256 depositAmount, uint256 availableAmount);\\n}\"\r\n    },\r\n    \"contracts/rewards/BaseRewardPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../interfaces/IMasterMagpie.sol\\\";\\nimport \\\"../interfaces/IBaseRewardPool.sol\\\";\\n\\n/// @title A contract for managing rewards for a pool\\n/// @author Magpie Team\\n/// @notice You can use this contract for getting informations about rewards for a specific pools\\ncontract BaseRewardPool is Ownable, IBaseRewardPool {\\n    using SafeERC20 for IERC20Metadata;\\n    using SafeERC20 for IERC20;\\n\\n    /* ============ State Variables ============ */\\n\\n    address public immutable stakingToken;\\n    address public immutable operator;          // master magpie\\n\\n    address[] public rewardTokens;\\n\\n    struct Reward {\\n        address rewardToken;\\n        uint256 rewardPerTokenStored;\\n        uint256 queuedRewards;\\n        uint256 historicalRewards;\\n    }\\n\\n    mapping(address => Reward) public rewards;                           // [rewardToken]\\n    // amount by [rewardToken][account], \\n    mapping(address => mapping(address => uint256)) public userRewardPerTokenPaid;                 \\n    mapping(address => mapping(address => uint256)) public userRewards;  // amount by [rewardToken][account]\\n    mapping(address => bool) public isRewardToken;\\n    mapping(address => bool) public managers;\\n\\n    /* ============ Events ============ */\\n\\n    event RewardAdded(uint256 _reward, address indexed _token);\\n    event Staked(address indexed _user, uint256 _amount);\\n    event Withdrawn(address indexed _user, uint256 _amount);\\n    event RewardPaid(address indexed _user, address indexed _receiver, uint256 _reward, address indexed _token);\\n    event ManagerUpdated(address indexed _manager, bool _allowed);\\n\\n    /* ============ Errors ============ */\\n\\n    error OnlyManager();\\n    error OnlyMasterMagpie();\\n    error NotAllowZeroAddress();\\n    error MustBeRewardToken();\\n\\n    /* ============ Constructor ============ */\\n\\n    constructor(\\n        address _stakingToken,\\n        address _rewardToken,\\n        address _masterMagpie,\\n        address _rewardManager\\n    ) {\\n        if(\\n            _stakingToken == address(0) ||\\n            _masterMagpie  == address(0) ||\\n            _rewardManager  == address(0)\\n        ) revert NotAllowZeroAddress();\\n\\n        stakingToken = _stakingToken;\\n        operator = _masterMagpie;\\n\\n        if (_rewardToken != address(0)) {\\n            rewards[_rewardToken] = Reward({\\n                rewardToken: _rewardToken,\\n                rewardPerTokenStored: 0,\\n                queuedRewards: 0,\\n                historicalRewards: 0\\n            });\\n            rewardTokens.push(_rewardToken);\\n        }\\n\\n        isRewardToken[_rewardToken] = true;\\n        managers[_rewardManager] = true;\\n    }\\n\\n    /* ============ Modifiers ============ */\\n\\n    modifier updateReward(address _account) {\\n        _updateFor(_account);\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        if (!managers[msg.sender])\\n            revert OnlyManager();\\n        _;\\n    }\\n\\n    modifier onlyMasterMagpie() {\\n        if (msg.sender != operator)\\n            revert OnlyMasterMagpie();\\n        _;\\n    }\\n\\n    /* ============ External Getters ============ */\\n\\n    /// @notice Returns decimals of reward token\\n    /// @param _rewardToken Address of reward token\\n    /// @return Returns decimals of reward token\\n    function rewardDecimals(address _rewardToken)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return IERC20Metadata(_rewardToken).decimals();\\n    }\\n\\n    /// @notice Returns decimals of staking token\\n    /// @return Returns decimals of staking token\\n    function stakingDecimals() public override view returns (uint256) {\\n        return IERC20Metadata(stakingToken).decimals();\\n    }\\n\\n    /// @notice Returns current amount of staked tokens\\n    /// @return Returns current amount of staked tokens\\n    function totalStaked() external override virtual view returns (uint256) {\\n        return IERC20(stakingToken).balanceOf(operator);\\n    }\\n\\n    /// @notice Returns amount of staked tokens in master magpie by account\\n    /// @param _account Address account\\n    /// @return Returns amount of staked tokens by account\\n    function balanceOf(address _account) public override virtual view returns (uint256) {\\n        (uint256 staked, ) =  IMasterMagpie(operator).stakingInfo(stakingToken, _account);\\n        return staked;\\n    }\\n\\n    /// @notice Returns amount of reward token per staking tokens in pool\\n    /// @param _rewardToken Address reward token\\n    /// @return Returns amount of reward token per staking tokens in pool\\n    function rewardPerToken(address _rewardToken)\\n        public\\n        override\\n        view\\n        returns (uint256)\\n    {\\n        return rewards[_rewardToken].rewardPerTokenStored;\\n    }\\n\\n    function rewardTokenInfos()\\n        override\\n        external\\n        view\\n        returns\\n        (\\n            address[] memory bonusTokenAddresses,\\n            string[] memory bonusTokenSymbols\\n        )\\n    {\\n        uint256 rewardTokensLength = rewardTokens.length;\\n        bonusTokenAddresses = new address[](rewardTokensLength);\\n        bonusTokenSymbols = new string[](rewardTokensLength);\\n        for (uint256 i; i < rewardTokensLength; i++) {\\n            bonusTokenAddresses[i] = rewardTokens[i];\\n            bonusTokenSymbols[i] = IERC20Metadata(address(bonusTokenAddresses[i])).symbol();\\n        }\\n    }\\n\\n    /// @notice Returns amount of reward token earned by a user\\n    /// @param _account Address account\\n    /// @param _rewardToken Address reward token\\n    /// @return Returns amount of reward token earned by a user\\n    function earned(address _account, address _rewardToken)\\n        public\\n        override\\n        view\\n        returns (uint256)\\n    {\\n        return (\\n            (((balanceOf(_account) *\\n                (rewardPerToken(_rewardToken) -\\n                    userRewardPerTokenPaid[_rewardToken][_account])) /\\n                (10**stakingDecimals())) + userRewards[_rewardToken][_account])\\n        );\\n    }\\n\\n    /// @notice Returns amount of all reward tokens\\n    /// @param _account Address account\\n    /// @return pendingBonusRewards as amounts of all rewards.\\n    function allEarned(address _account)\\n        external\\n        override\\n        view\\n        returns (\\n            uint256[] memory pendingBonusRewards\\n        )\\n    {\\n        uint256 length = rewardTokens.length;\\n        pendingBonusRewards = new uint256[](length);\\n        for (uint256 i = 0; i < length; i++) {\\n            pendingBonusRewards[i] = earned(_account, rewardTokens[i]);\\n        }\\n\\n        return pendingBonusRewards;\\n    }\\n\\n    function getStakingToken() external view returns (address) {\\n        return stakingToken;\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /// @notice Updates the reward information for one account\\n    /// @param _account Address account\\n    function updateFor(address _account) override external {\\n        _updateFor(_account);\\n    }\\n\\n    /// @notice Calculates and sends reward to user. Only callable by masterMagpie\\n    /// @param _account Address account\\n    function getReward(address _account, address _receiver)\\n        override\\n        public\\n        onlyMasterMagpie\\n        updateReward(_account)\\n        returns (bool)\\n    {\\n        uint256 length = rewardTokens.length;\\n        for (uint256 index = 0; index < length; ++index) {\\n            address rewardToken = rewardTokens[index];\\n            uint256 reward = userRewards[rewardToken][_account]; // updated during updateReward modifier\\n            if (reward > 0) {\\n                userRewards[rewardToken][_account] = 0;\\n                IERC20(rewardToken).safeTransfer(_receiver, reward);\\n                emit RewardPaid(_account, _receiver, reward, rewardToken);\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    function getRewards(address _account, address _receiver, address[] memory _rewardTokens) override external {\\n\\n    }\\n\\n    function getRewardLength() external view returns(uint256) {\\n        return rewardTokens.length;\\n    }\\n\\n    /* ============ Admin Functions ============ */\\n\\n    function updateManager(address _rewardManager, bool _allowed) external onlyOwner {\\n        managers[_rewardManager] = _allowed;\\n\\n        emit ManagerUpdated(_rewardManager, managers[_rewardManager]);\\n    }\\n\\n    /// @notice Sends new rewards to be distributed to the users staking. Only callable by manager\\n    /// @param _amountReward Amount of reward token to be distributed\\n    /// @param _rewardToken Address reward token\\n    function queueNewRewards(uint256 _amountReward, address _rewardToken)\\n        override\\n        external\\n        onlyManager\\n        returns (bool)\\n    {\\n        if (!isRewardToken[_rewardToken]) {\\n            rewardTokens.push(_rewardToken);\\n            isRewardToken[_rewardToken] = true;\\n        }\\n\\n        _provisionReward(_amountReward, _rewardToken);\\n        return true;\\n    }\\n\\n    /// @notice Sends new rewards to be distributed to the users staking. Only possible to donate already registered token\\n    /// @param _amountReward Amount of reward token to be distributed\\n    /// @param _rewardToken Address reward token\\n    function donateRewards(uint256 _amountReward, address _rewardToken) external {\\n        if (!isRewardToken[_rewardToken])\\n            revert MustBeRewardToken();\\n\\n        _provisionReward(_amountReward, _rewardToken);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _updateFor(address _account) internal {\\n        uint256 length = rewardTokens.length;\\n        for (uint256 index = 0; index < length; ++index) {\\n            address rewardToken = rewardTokens[index];\\n            userRewards[rewardToken][_account] = earned(_account, rewardToken);\\n            userRewardPerTokenPaid[rewardToken][_account] = rewardPerToken(rewardToken);\\n        }\\n    }\\n\\n    function _provisionReward(uint256 _amountReward, address _rewardToken) internal {\\n        IERC20(_rewardToken).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _amountReward\\n        );\\n        Reward storage rewardInfo = rewards[_rewardToken];\\n        rewardInfo.historicalRewards =\\n            rewardInfo.historicalRewards +\\n            _amountReward;\\n        if (this.totalStaked() == 0) {\\n            rewardInfo.queuedRewards += _amountReward;\\n        } else {\\n            if (rewardInfo.queuedRewards > 0) {\\n                _amountReward += rewardInfo.queuedRewards;\\n                rewardInfo.queuedRewards = 0;\\n            }\\n            rewardInfo.rewardPerTokenStored =\\n                rewardInfo.rewardPerTokenStored +\\n                (_amountReward * 10**stakingDecimals()) /\\n                this.totalStaked();\\n        }\\n        emit RewardAdded(_amountReward, _rewardToken);\\n    }\\n}\"\r\n    },\r\n    \"contracts/rewards/BaseRewardPoolV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../interfaces/IMasterMagpie.sol\\\";\\nimport \\\"../interfaces/IBaseRewardPool.sol\\\";\\n\\n/// @title A contract for managing rewards for a pool\\n/// @author Magpie Team\\n/// @notice You can use this contract for getting informations about rewards for a specific pools\\ncontract BaseRewardPoolV2 is Ownable, IBaseRewardPool {\\n    using SafeERC20 for IERC20Metadata;\\n    using SafeERC20 for IERC20;\\n\\n    /* ============ State Variables ============ */\\n\\n    address public immutable stakingToken;\\n    address public immutable operator;          // master magpie\\n    uint256 public immutable stakingTokenDecimals;\\n\\n    address[] public rewardTokens;\\n\\n    struct Reward {\\n        address rewardToken;\\n        uint256 rewardPerTokenStored;\\n        uint256 queuedRewards;\\n        uint256 historicalRewards;\\n    }\\n\\n    mapping(address => Reward) public rewards;                           // [rewardToken]\\n    // amount by [rewardToken][account], \\n    mapping(address => mapping(address => uint256)) public userRewardPerTokenPaid;                 \\n    mapping(address => mapping(address => uint256)) public userRewards;  // amount by [rewardToken][account]\\n    mapping(address => bool) public isRewardToken;\\n    mapping(address => bool) public managers;\\n\\n    /* ============ Events ============ */\\n\\n    event RewardAdded(uint256 _reward, address indexed _token);\\n    event Staked(address indexed _user, uint256 _amount);\\n    event Withdrawn(address indexed _user, uint256 _amount);\\n    event RewardPaid(address indexed _user, address indexed _receiver, uint256 _reward, address indexed _token);\\n    event ManagerUpdated(address indexed _manager, bool _allowed);\\n\\n    /* ============ Errors ============ */\\n\\n    error OnlyManager();\\n    error OnlyMasterMagpie();\\n    error NotAllowZeroAddress();\\n    error MustBeRewardToken();\\n\\n    /* ============ Constructor ============ */\\n\\n    constructor(\\n        address _stakingToken,\\n        address _rewardToken,\\n        address _masterMagpie,\\n        address _rewardManager\\n    ) {\\n        if(\\n            _stakingToken == address(0) ||\\n            _masterMagpie  == address(0) ||\\n            _rewardManager  == address(0)\\n        ) revert NotAllowZeroAddress();\\n\\n        stakingToken = _stakingToken;\\n        stakingTokenDecimals = IERC20Metadata(stakingToken).decimals();\\n        operator = _masterMagpie;\\n\\n        if (_rewardToken != address(0)) {\\n            rewards[_rewardToken] = Reward({\\n                rewardToken: _rewardToken,\\n                rewardPerTokenStored: 0,\\n                queuedRewards: 0,\\n                historicalRewards: 0\\n            });\\n            rewardTokens.push(_rewardToken);\\n        }\\n\\n        isRewardToken[_rewardToken] = true;\\n        managers[_rewardManager] = true;\\n    }\\n\\n    /* ============ Modifiers ============ */\\n\\n    modifier onlyManager() {\\n        if (!managers[msg.sender])\\n            revert OnlyManager();\\n        _;\\n    }\\n\\n    modifier onlyMasterMagpie() {\\n        if (msg.sender != operator)\\n            revert OnlyMasterMagpie();\\n        _;\\n    }\\n\\n    modifier updateReward(address _account) {\\n        _updateFor(_account);\\n        _;\\n    }\\n\\n    modifier updateRewards(address _account, address[] memory _rewards) {\\n        uint256 length = _rewards.length;\\n        uint256 userShare = balanceOf(_account);\\n        \\n        for (uint256 index = 0; index < length; ++index) {\\n            address rewardToken = _rewards[index];\\n            // if a reward stopped queuing, no need to recalculate to save gas fee\\n            if (userRewardPerTokenPaid[rewardToken][_account] == rewardPerToken(rewardToken))\\n                continue;\\n            userRewards[rewardToken][_account] = _earned(_account, rewardToken, userShare);\\n            userRewardPerTokenPaid[rewardToken][_account] = rewardPerToken(rewardToken);\\n        }\\n        _;\\n    }    \\n\\n    /* ============ External Getters ============ */\\n\\n    /// @notice Returns current amount of staked tokens\\n    /// @return Returns current amount of staked tokens\\n    function totalStaked() public override virtual view returns (uint256) {\\n        return IERC20(stakingToken).balanceOf(operator);\\n    }\\n\\n    /// @notice Returns amount of staked tokens in master magpie by account\\n    /// @param _account Address account\\n    /// @return Returns amount of staked tokens by account\\n    function balanceOf(address _account) public override virtual view returns (uint256) {\\n        (uint256 staked, ) =  IMasterMagpie(operator).stakingInfo(stakingToken, _account);\\n        return staked;\\n    }\\n\\n    function stakingDecimals() external override virtual view returns (uint256) {\\n        return stakingTokenDecimals;\\n    }\\n\\n    /// @notice Returns amount of reward token per staking tokens in pool\\n    /// @param _rewardToken Address reward token\\n    /// @return Returns amount of reward token per staking tokens in pool\\n    function rewardPerToken(address _rewardToken)\\n        public\\n        override\\n        view\\n        returns (uint256)\\n    {\\n        return rewards[_rewardToken].rewardPerTokenStored;\\n    }\\n\\n    function rewardTokenInfos()\\n        override\\n        external\\n        view\\n        returns\\n        (\\n            address[] memory bonusTokenAddresses,\\n            string[] memory bonusTokenSymbols\\n        )\\n    {\\n        uint256 rewardTokensLength = rewardTokens.length;\\n        bonusTokenAddresses = new address[](rewardTokensLength);\\n        bonusTokenSymbols = new string[](rewardTokensLength);\\n        for (uint256 i; i < rewardTokensLength; i++) {\\n            bonusTokenAddresses[i] = rewardTokens[i];\\n            bonusTokenSymbols[i] = IERC20Metadata(address(bonusTokenAddresses[i])).symbol();\\n        }\\n    }\\n\\n    /// @notice Returns amount of reward token earned by a user\\n    /// @param _account Address account\\n    /// @param _rewardToken Address reward token\\n    /// @return Returns amount of reward token earned by a user\\n    function earned(address _account, address _rewardToken)\\n        public\\n        override\\n        view\\n        returns (uint256)\\n    {\\n        return _earned(_account, _rewardToken, balanceOf(_account));\\n    }\\n\\n    /// @notice Returns amount of all reward tokens\\n    /// @param _account Address account\\n    /// @return pendingBonusRewards as amounts of all rewards.\\n    function allEarned(address _account)\\n        external\\n        override\\n        view\\n        returns (\\n            uint256[] memory pendingBonusRewards\\n        )\\n    {\\n        uint256 length = rewardTokens.length;\\n        pendingBonusRewards = new uint256[](length);\\n        for (uint256 i = 0; i < length; i++) {\\n            pendingBonusRewards[i] = earned(_account, rewardTokens[i]);\\n        }\\n\\n        return pendingBonusRewards;\\n    }\\n\\n    function getRewardLength() external view returns(uint256) {\\n        return rewardTokens.length;\\n    }    \\n\\n    /* ============ External Functions ============ */\\n\\n    /// @notice Updates the reward information for one account\\n    /// @param _account Address account\\n    function updateFor(address _account) override external {\\n        _updateFor(_account);\\n    }\\n\\n    function getReward(address _account, address _receiver)\\n        public\\n        onlyMasterMagpie\\n        updateReward(_account)\\n        returns (bool)\\n    {\\n        uint256 length = rewardTokens.length;\\n\\n        for (uint256 index = 0; index < length; ++index) {\\n            address rewardToken = rewardTokens[index];\\n            uint256 reward = userRewards[rewardToken][_account]; // updated during updateReward modifier\\n            if (reward > 0) {\\n                _sendReward(rewardToken, _account, _receiver, reward);\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    function getRewards(address _account, address _receiver, address[] memory _rewardTokens) override\\n        external\\n        onlyMasterMagpie\\n        updateRewards(_account, _rewardTokens)\\n    {\\n        uint256 length = _rewardTokens.length;\\n        for (uint256 index = 0; index < length; ++index) {\\n            address rewardToken = _rewardTokens[index];\\n            uint256 reward = userRewards[rewardToken][_account]; // updated during updateReward modifier\\n            if (reward > 0) {\\n                _sendReward(rewardToken, _account, _receiver, reward);\\n            }\\n        }\\n    }\\n\\n    /// @notice Sends new rewards to be distributed to the users staking. Only possible to donate already registered token\\n    /// @param _amountReward Amount of reward token to be distributed\\n    /// @param _rewardToken Address reward token\\n    function donateRewards(uint256 _amountReward, address _rewardToken) external {\\n        if (!isRewardToken[_rewardToken])\\n            revert MustBeRewardToken();\\n\\n        _provisionReward(_amountReward, _rewardToken);\\n    }\\n\\n    /* ============ Admin Functions ============ */\\n\\n    function updateManager(address _rewardManager, bool _allowed) external onlyOwner {\\n        managers[_rewardManager] = _allowed;\\n\\n        emit ManagerUpdated(_rewardManager, managers[_rewardManager]);\\n    }\\n\\n    /// @notice Sends new rewards to be distributed to the users staking. Only callable by manager\\n    /// @param _amountReward Amount of reward token to be distributed\\n    /// @param _rewardToken Address reward token\\n    function queueNewRewards(uint256 _amountReward, address _rewardToken)\\n        override\\n        external\\n        onlyManager\\n        returns (bool)\\n    {\\n        if (!isRewardToken[_rewardToken]) {\\n            rewardTokens.push(_rewardToken);\\n            isRewardToken[_rewardToken] = true;\\n        }\\n\\n        _provisionReward(_amountReward, _rewardToken);\\n        return true;\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _provisionReward(uint256 _amountReward, address _rewardToken) internal {\\n        IERC20(_rewardToken).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _amountReward\\n        );\\n        Reward storage rewardInfo = rewards[_rewardToken];\\n        rewardInfo.historicalRewards =\\n            rewardInfo.historicalRewards +\\n            _amountReward;\\n\\n        if (totalStaked() == 0) {\\n            rewardInfo.queuedRewards += _amountReward;\\n        } else {\\n            if (rewardInfo.queuedRewards > 0) {\\n                _amountReward += rewardInfo.queuedRewards;\\n                rewardInfo.queuedRewards = 0;\\n            }\\n            rewardInfo.rewardPerTokenStored =\\n                rewardInfo.rewardPerTokenStored +\\n                (_amountReward * 10**stakingTokenDecimals) /\\n                totalStaked();\\n        }\\n        emit RewardAdded(_amountReward, _rewardToken);\\n    }\\n\\n    function _earned(address _account, address _rewardToken, uint256 _userShare) internal view returns (uint256) {\\n        return ((_userShare *\\n                (rewardPerToken(_rewardToken) -\\n                    userRewardPerTokenPaid[_rewardToken][_account])) /\\n                10**stakingTokenDecimals) + userRewards[_rewardToken][_account];\\n    }\\n\\n    function _sendReward(address _rewardToken, address _account, address _receiver, uint256 _amount) internal {\\n        userRewards[_rewardToken][_account] = 0;\\n        IERC20(_rewardToken).safeTransfer(_receiver, _amount);\\n        emit RewardPaid(_account, _receiver, _amount, _rewardToken);\\n    }\\n\\n    function _updateFor(address _account) internal {\\n        uint256 length = rewardTokens.length;\\n        for (uint256 index = 0; index < length; ++index) {\\n            address rewardToken = rewardTokens[index];\\n            // if a reward stopped queuing, no need to recalculate to save gas fee\\n            if (userRewardPerTokenPaid[rewardToken][_account] == rewardPerToken(rewardToken))\\n                continue;\\n\\n            userRewards[rewardToken][_account] = earned(_account, rewardToken);\\n            userRewardPerTokenPaid[rewardToken][_account] = rewardPerToken(rewardToken);\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/rewards/BribeRewardPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./BaseRewardPool.sol\\\";\\nimport \\\"./BaseRewardPoolV2.sol\\\";\\n\\n/// @title A contract for managing rewards for a pool\\n/// @author Magpie Team\\n/// @notice You can use this contract for getting informations about rewards for a specific pools\\ncontract BribeRewardPool is BaseRewardPoolV2 {\\n    using SafeERC20 for IERC20;\\n\\n    /* ============ State Variables ============ */\\n\\n    uint256 public totalSupply;\\n    mapping(address => uint256) private _balances;\\n\\n    /* ========== Errors ========== */\\n\\n    error OnlyOperator();    \\n\\n    /* ============ Constructor ============ */\\n\\n    constructor(\\n        address _stakingToken,\\n        address _rewardToken,\\n        address _operator,\\n        address _rewardManager\\n    ) BaseRewardPoolV2(_stakingToken, _rewardToken, _operator, _rewardManager) {}\\n\\n    /* ============ Modifiers ============ */\\n\\n    modifier onlyOperator() {\\n        if (msg.sender != operator)\\n            revert OnlyOperator();\\n        _;\\n    }\\n\\n    /* ============ External Getters ============ */\\n\\n    function balanceOf(address _account) public override virtual view returns (uint256) {\\n        return _balances[_account];\\n    }\\n\\n    function totalStaked() public override virtual view returns (uint256) {\\n        return totalSupply;\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /// @notice Updates information for a user in case of staking. Can only be called by the Masterchief operator\\n    /// @param _for Address account\\n    /// @param _amount Amount of newly staked tokens by the user on masterchief\\n    function stakeFor(address _for, uint256 _amount)\\n        external\\n        virtual\\n        onlyOperator\\n        updateRewards(_for, rewardTokens)\\n    {\\n        totalSupply = totalSupply + _amount;\\n        _balances[_for] = _balances[_for] + _amount;\\n\\n        emit Staked(_for, _amount);\\n    }\\n\\n    /// @notice Updates informaiton for a user in case of a withdraw. Can only be called by the Masterchief operator\\n    /// @param _for Address account\\n    /// @param _amount Amount of withdrawed tokens by the user on masterchief\\n    function withdrawFor(\\n        address _for,\\n        uint256 _amount,\\n        bool claim\\n    ) external virtual onlyOperator updateRewards(_for, rewardTokens) {\\n        totalSupply = totalSupply - _amount;\\n        _balances[_for] = _balances[_for] - _amount;\\n\\n        emit Withdrawn(_for, _amount);\\n\\n        if (claim) {\\n            _getReward(_for);\\n        }\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _getReward(address _account) internal virtual {\\n        uint256 length = rewardTokens.length;\\n        for (uint256 index = 0; index < length; ++index) {\\n            address rewardToken = rewardTokens[index];\\n            uint256 reward = earned(_account, rewardToken);\\n            if (reward > 0) {\\n                userRewards[rewardToken][_account] = 0;\\n                IERC20(rewardToken).safeTransfer(_account, reward);\\n                emit RewardPaid(_account, _account, reward, rewardToken);\\n            }\\n        }\\n    }    \\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"MustBeRewardToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAllowZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyMasterMagpie\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyOperator\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"ManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"allEarned\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"pendingBonusRewards\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountReward\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"donateRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\"}],\"name\":\"getRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRewardToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"managers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountReward\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"queueNewRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokenInfos\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"bonusTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"bonusTokenSymbols\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerTokenStored\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"queuedRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"historicalRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_for\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingTokenDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"updateFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardManager\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"updateManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_for\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claim\",\"type\":\"bool\"}],\"name\":\"withdrawFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BribeRewardPool", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "0000000000000000000000009b69b06272980fa6bad9d88680a71e3c3beb32c6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016a55cf71fe04f4d2a441b5a742a7e2f73319d9a000000000000000000000000664cc2bcae1e057eb1ec379598c5b743ad9db6e7", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}