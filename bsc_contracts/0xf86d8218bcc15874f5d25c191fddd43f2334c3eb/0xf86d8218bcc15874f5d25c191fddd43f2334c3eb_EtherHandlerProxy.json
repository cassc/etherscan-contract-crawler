{"SourceCode": "// File: contracts/interfaces/marketManagerInterface.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @title BiFi's market manager interface\r\n * @author BiFi(seinmyung25, Miller-kk, tlatkdgus1, dongchangYoo)\r\n */\r\ninterface marketManagerInterface  {\r\n\tfunction setBreakerTable(address _target, bool _status) external returns (bool);\r\n\r\n\tfunction getCircuitBreaker() external view returns (bool);\r\n\tfunction setCircuitBreaker(bool _emergency) external returns (bool);\r\n\r\n\tfunction getTokenHandlerInfo(uint256 handlerID) external view returns (bool, address, string memory);\r\n\r\n\tfunction handlerRegister(uint256 handlerID, address tokenHandlerAddr) external returns (bool);\r\n\r\n\tfunction applyInterestHandlers(address payable userAddr, uint256 callerID, bool allFlag) external returns (uint256, uint256, uint256, uint256, uint256, uint256);\r\n\r\n\tfunction getTokenHandlerPrice(uint256 handlerID) external view returns (uint256);\r\n\tfunction getTokenHandlerBorrowLimit(uint256 handlerID) external view returns (uint256);\r\n\tfunction getTokenHandlerSupport(uint256 handlerID) external view returns (bool);\r\n\r\n\tfunction getTokenHandlersLength() external view returns (uint256);\r\n\tfunction setTokenHandlersLength(uint256 _tokenHandlerLength) external returns (bool);\r\n\r\n\tfunction getTokenHandlerID(uint256 index) external view returns (uint256);\r\n\tfunction getTokenHandlerMarginCallLimit(uint256 handlerID) external view returns (uint256);\r\n\r\n\tfunction getUserIntraHandlerAssetWithInterest(address payable userAddr, uint256 handlerID) external view returns (uint256, uint256);\r\n\r\n\tfunction getUserTotalIntraCreditAsset(address payable userAddr) external view returns (uint256, uint256);\r\n\r\n\tfunction getUserLimitIntraAsset(address payable userAddr) external view returns (uint256, uint256);\r\n\r\n\tfunction getUserCollateralizableAmount(address payable userAddr, uint256 handlerID) external view returns (uint256);\r\n\r\n\tfunction getUserExtraLiquidityAmount(address payable userAddr, uint256 handlerID) external view returns (uint256);\r\n\tfunction partialLiquidationUser(address payable delinquentBorrower, uint256 liquidateAmount, address payable liquidator, uint256 liquidateHandlerID, uint256 rewardHandlerID) external returns (uint256, uint256, uint256);\r\n\r\n\tfunction getMaxLiquidationReward(address payable delinquentBorrower, uint256 liquidateHandlerID, uint256 liquidateAmount, uint256 rewardHandlerID, uint256 rewardRatio) external view returns (uint256);\r\n\tfunction partialLiquidationUserReward(address payable delinquentBorrower, uint256 rewardAmount, address payable liquidator, uint256 handlerID) external returns (uint256);\r\n\r\n\tfunction setLiquidationManager(address liquidationManagerAddr) external returns (bool);\r\n\r\n\tfunction rewardClaimAll(address payable userAddr) external returns (uint256);\r\n\r\n\tfunction updateRewardParams(address payable userAddr) external returns (bool);\r\n\tfunction interestUpdateReward() external returns (bool);\r\n\tfunction getGlobalRewardInfo() external view returns (uint256, uint256, uint256);\r\n\r\n\tfunction setOracleProxy(address oracleProxyAddr) external returns (bool);\r\n\r\n\tfunction rewardUpdateOfInAction(address payable userAddr, uint256 callerID) external returns (bool);\r\n\tfunction ownerRewardTransfer(uint256 _amount) external returns (bool);\r\n}\r\n\r\n// File: contracts/interfaces/interestModelInterface.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @title BiFi's interest model interface\r\n * @author BiFi(seinmyung25, Miller-kk, tlatkdgus1, dongchangYoo)\r\n */\r\ninterface interestModelInterface {\r\n\tfunction getInterestAmount(address handlerDataStorageAddr, address payable userAddr, bool isView) external view returns (bool, uint256, uint256, bool, uint256, uint256);\r\n\tfunction viewInterestAmount(address handlerDataStorageAddr, address payable userAddr) external view returns (bool, uint256, uint256, bool, uint256, uint256);\r\n\tfunction getSIRandBIR(uint256 depositTotalAmount, uint256 borrowTotalAmount) external view returns (uint256, uint256);\r\n}\r\n\r\n// File: contracts/interfaces/marketHandlerDataStorageInterface.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @title BiFi's market handler data storage interface\r\n * @author BiFi(seinmyung25, Miller-kk, tlatkdgus1, dongchangYoo)\r\n */\r\ninterface marketHandlerDataStorageInterface  {\r\n\tfunction setCircuitBreaker(bool _emergency) external returns (bool);\r\n\r\n\tfunction setNewCustomer(address payable userAddr) external returns (bool);\r\n\r\n\tfunction getUserAccessed(address payable userAddr) external view returns (bool);\r\n\tfunction setUserAccessed(address payable userAddr, bool _accessed) external returns (bool);\r\n\r\n\tfunction getReservedAddr() external view returns (address payable);\r\n\tfunction setReservedAddr(address payable reservedAddress) external returns (bool);\r\n\r\n\tfunction getReservedAmount() external view returns (int256);\r\n\tfunction addReservedAmount(uint256 amount) external returns (int256);\r\n\tfunction subReservedAmount(uint256 amount) external returns (int256);\r\n\tfunction updateSignedReservedAmount(int256 amount) external returns (int256);\r\n\r\n\tfunction setTokenHandler(address _marketHandlerAddr, address _interestModelAddr) external returns (bool);\r\n\tfunction setCoinHandler(address _marketHandlerAddr, address _interestModelAddr) external returns (bool);\r\n\r\n\tfunction getDepositTotalAmount() external view returns (uint256);\r\n\tfunction addDepositTotalAmount(uint256 amount) external returns (uint256);\r\n\tfunction subDepositTotalAmount(uint256 amount) external returns (uint256);\r\n\r\n\tfunction getBorrowTotalAmount() external view returns (uint256);\r\n\tfunction addBorrowTotalAmount(uint256 amount) external returns (uint256);\r\n\tfunction subBorrowTotalAmount(uint256 amount) external returns (uint256);\r\n\r\n\tfunction getUserIntraDepositAmount(address payable userAddr) external view returns (uint256);\r\n\tfunction addUserIntraDepositAmount(address payable userAddr, uint256 amount) external returns (uint256);\r\n\tfunction subUserIntraDepositAmount(address payable userAddr, uint256 amount) external returns (uint256);\r\n\r\n\tfunction getUserIntraBorrowAmount(address payable userAddr) external view returns (uint256);\r\n\tfunction addUserIntraBorrowAmount(address payable userAddr, uint256 amount) external returns (uint256);\r\n\tfunction subUserIntraBorrowAmount(address payable userAddr, uint256 amount) external returns (uint256);\r\n\r\n\tfunction addDepositAmount(address payable userAddr, uint256 amount) external returns (bool);\r\n\tfunction subDepositAmount(address payable userAddr, uint256 amount) external returns (bool);\r\n\r\n\tfunction addBorrowAmount(address payable userAddr, uint256 amount) external returns (bool);\r\n\tfunction subBorrowAmount(address payable userAddr, uint256 amount) external returns (bool);\r\n\r\n\tfunction getUserAmount(address payable userAddr) external view returns (uint256, uint256);\r\n\tfunction getHandlerAmount() external view returns (uint256, uint256);\r\n\r\n\tfunction getAmount(address payable userAddr) external view returns (uint256, uint256, uint256, uint256);\r\n\tfunction setAmount(address payable userAddr, uint256 depositTotalAmount, uint256 borrowTotalAmount, uint256 depositAmount, uint256 borrowAmount) external returns (uint256);\r\n\r\n\tfunction setBlocks(uint256 lastUpdatedBlock, uint256 inactiveActionDelta) external returns (bool);\r\n\r\n\tfunction getLastUpdatedBlock() external view returns (uint256);\r\n\tfunction setLastUpdatedBlock(uint256 _lastUpdatedBlock) external returns (bool);\r\n\r\n\tfunction getInactiveActionDelta() external view returns (uint256);\r\n\tfunction setInactiveActionDelta(uint256 inactiveActionDelta) external returns (bool);\r\n\r\n\tfunction syncActionEXR() external returns (bool);\r\n\r\n\tfunction getActionEXR() external view returns (uint256, uint256);\r\n\tfunction setActionEXR(uint256 actionDepositExRate, uint256 actionBorrowExRate) external returns (bool);\r\n\r\n\tfunction getGlobalDepositEXR() external view returns (uint256);\r\n\tfunction getGlobalBorrowEXR() external view returns (uint256);\r\n\r\n\tfunction setEXR(address payable userAddr, uint256 globalDepositEXR, uint256 globalBorrowEXR) external returns (bool);\r\n\r\n\tfunction getUserEXR(address payable userAddr) external view returns (uint256, uint256);\r\n\tfunction setUserEXR(address payable userAddr, uint256 depositEXR, uint256 borrowEXR) external returns (bool);\r\n\r\n\tfunction getGlobalEXR() external view returns (uint256, uint256);\r\n\r\n\tfunction getMarketHandlerAddr() external view returns (address);\r\n\tfunction setMarketHandlerAddr(address marketHandlerAddr) external returns (bool);\r\n\r\n\tfunction getInterestModelAddr() external view returns (address);\r\n\tfunction setInterestModelAddr(address interestModelAddr) external returns (bool);\r\n\r\n\tfunction getMinimumInterestRate() external view returns (uint256);\r\n\tfunction setMinimumInterestRate(uint256 _minimumInterestRate) external returns (bool);\r\n\r\n\tfunction getLiquiditySensitivity() external view returns (uint256);\r\n\tfunction setLiquiditySensitivity(uint256 _liquiditySensitivity) external returns (bool);\r\n\r\n\tfunction getLimit() external view returns (uint256, uint256);\r\n\r\n\tfunction getBorrowLimit() external view returns (uint256);\r\n\tfunction setBorrowLimit(uint256 _borrowLimit) external returns (bool);\r\n\r\n\tfunction getMarginCallLimit() external view returns (uint256);\r\n\tfunction setMarginCallLimit(uint256 _marginCallLimit) external returns (bool);\r\n\r\n\tfunction getLimitOfAction() external view returns (uint256);\r\n\tfunction setLimitOfAction(uint256 limitOfAction) external returns (bool);\r\n\r\n\tfunction getLiquidityLimit() external view returns (uint256);\r\n\tfunction setLiquidityLimit(uint256 liquidityLimit) external returns (bool);\r\n}\r\n\r\n// File: contracts/interfaces/marketSIHandlerDataStorageInterface.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @title BiFi's market si handler data storage interface\r\n * @author BiFi(seinmyung25, Miller-kk, tlatkdgus1, dongchangYoo)\r\n */\r\ninterface marketSIHandlerDataStorageInterface  {\r\n\tfunction setCircuitBreaker(bool _emergency) external returns (bool);\r\n\r\n\tfunction updateRewardPerBlockStorage(uint256 _rewardPerBlock) external returns (bool);\r\n\r\n\tfunction getRewardInfo(address userAddr) external view returns (uint256, uint256, uint256, uint256, uint256, uint256);\r\n\r\n\tfunction getMarketRewardInfo() external view returns (uint256, uint256, uint256);\r\n\tfunction setMarketRewardInfo(uint256 _rewardLane, uint256 _rewardLaneUpdateAt, uint256 _rewardPerBlock) external returns (bool);\r\n\r\n\tfunction getUserRewardInfo(address userAddr) external view returns (uint256, uint256, uint256);\r\n\tfunction setUserRewardInfo(address userAddr, uint256 _rewardLane, uint256 _rewardLaneUpdateAt, uint256 _rewardAmount) external returns (bool);\r\n\r\n\tfunction getBetaRate() external view returns (uint256);\r\n\tfunction setBetaRate(uint256 _betaRate) external returns (bool);\r\n}\r\n\r\n// File: contracts/Errors.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract Modifier {\r\n    string internal constant ONLY_OWNER = \"O\";\r\n    string internal constant ONLY_MANAGER = \"M\";\r\n    string internal constant CIRCUIT_BREAKER = \"emergency\";\r\n}\r\n\r\ncontract ManagerModifier is Modifier {\r\n    string internal constant ONLY_HANDLER = \"H\";\r\n    string internal constant ONLY_LIQUIDATION_MANAGER = \"LM\";\r\n    string internal constant ONLY_BREAKER = \"B\";\r\n}\r\n\r\ncontract HandlerDataStorageModifier is Modifier {\r\n    string internal constant ONLY_BIFI_CONTRACT = \"BF\";\r\n}\r\n\r\ncontract SIDataStorageModifier is Modifier {\r\n    string internal constant ONLY_SI_HANDLER = \"SI\";\r\n}\r\n\r\ncontract HandlerErrors is Modifier {\r\n    string internal constant USE_VAULE = \"use value\";\r\n    string internal constant USE_ARG = \"use arg\";\r\n    string internal constant EXCEED_LIMIT = \"exceed limit\";\r\n    string internal constant NO_LIQUIDATION = \"no liquidation\";\r\n    string internal constant NO_LIQUIDATION_REWARD = \"no enough reward\";\r\n    string internal constant NO_EFFECTIVE_BALANCE = \"not enough balance\";\r\n    string internal constant TRANSFER = \"err transfer\";\r\n}\r\n\r\ncontract SIErrors is Modifier { }\r\n\r\ncontract InterestErrors is Modifier { }\r\n\r\ncontract LiquidationManagerErrors is Modifier {\r\n    string internal constant NO_DELINQUENT = \"not delinquent\";\r\n}\r\n\r\ncontract ManagerErrors is ManagerModifier {\r\n    string internal constant REWARD_TRANSFER = \"RT\";\r\n    string internal constant UNSUPPORTED_TOKEN = \"UT\";\r\n}\r\n\r\ncontract OracleProxyErrors is Modifier {\r\n    string internal constant ZERO_PRICE = \"price zero\";\r\n}\r\n\r\ncontract RequestProxyErrors is Modifier { }\r\n\r\ncontract ManagerDataStorageErrors is ManagerModifier {\r\n    string internal constant NULL_ADDRESS = \"err addr null\";\r\n}\r\n\r\n// File: contracts/reqCoinProxy.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @title Bifi user request proxy (navtive coin)\r\n * @notice access logic contracts via delegate calls.\r\n * @author BiFi(seinmyung25, Miller-kk, tlatkdgus1, dongchangYoo)\r\n */\r\ncontract coinProxy is RequestProxyErrors {\r\n\t/* handler storage */\r\n\taddress payable owner;\r\n\r\n\tuint256 handlerID;\r\n\r\n\tstring tokenName = \"ether\";\r\n\r\n\tuint256 constant unifiedPoint = 10 ** 18;\r\n\r\n\tmarketManagerInterface marketManager;\r\n\r\n\tinterestModelInterface interestModelInstance;\r\n\r\n\tmarketHandlerDataStorageInterface handlerDataStorage;\r\n\r\n\tmarketSIHandlerDataStorageInterface SIHandlerDataStorage;\r\n\r\n\t/* proxy storage */\r\n\taddress public handler;\r\n\r\n\taddress public SI;\r\n\r\n\tstring DEPOSIT = \"deposit(uint256,bool)\";\r\n\r\n\tstring REDEEM = \"withdraw(uint256,bool)\";\r\n\r\n\tstring BORROW = \"borrow(uint256,bool)\";\r\n\r\n\tstring REPAY = \"repay(uint256,bool)\";\r\n\r\n\tmodifier onlyOwner {\r\n\t\trequire(msg.sender == owner, ONLY_OWNER);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier onlyMarketManager {\r\n\t\taddress msgSender = msg.sender;\r\n\t\trequire((msgSender == address(marketManager)) || (msgSender == owner), ONLY_MANAGER);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Construct a new coinProxy which uses coinHandlerLogic\r\n\t*/\r\n\tconstructor () public\r\n\t{\r\n\t\towner = msg.sender;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Replace the owner of the handler\r\n\t* @param _owner the address of the new owner\r\n\t* @return true (TODO: validate results)\r\n\t*/\r\n\tfunction ownershipTransfer(address _owner) onlyOwner external returns (bool)\r\n\t{\r\n\t\towner = address(uint160(_owner));\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Initialize the contract\r\n\t* @param _handlerID ID of handler\r\n\t* @param marketManagerAddr The address of market manager\r\n\t* @param interestModelAddr The address of handler interest model contract address\r\n\t* @param marketDataStorageAddr The address of handler data storage\r\n\t* @param siHandlerAddr The address of service incentive contract\r\n\t* @param SIHandlerDataStorageAddr The address of service incentive data storage\r\n\t*/\r\n\tfunction initialize(uint256 _handlerID, address handlerAddr, address marketManagerAddr, address interestModelAddr, address marketDataStorageAddr, address siHandlerAddr, address SIHandlerDataStorageAddr) onlyOwner public returns (bool)\r\n\t{\r\n\t\thandlerID = _handlerID;\r\n\t\thandler = handlerAddr;\r\n\t\tSI = siHandlerAddr;\r\n\t\tmarketManager = marketManagerInterface(marketManagerAddr);\r\n\t\tinterestModelInstance = interestModelInterface(interestModelAddr);\r\n\t\thandlerDataStorage = marketHandlerDataStorageInterface(marketDataStorageAddr);\r\n\t\tSIHandlerDataStorage = marketSIHandlerDataStorageInterface(SIHandlerDataStorageAddr);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Set ID of handler\r\n\t * @param _handlerID The ID of handler\r\n\t * @return true (TODO: validate results)\r\n\t */\r\n\tfunction setHandlerID(uint256 _handlerID) onlyOwner public returns (bool)\r\n\t{\r\n\t\thandlerID = _handlerID;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Set the address of handler\r\n\t * @param handlerAddr The address of handler\r\n\t * @return true (TODO: validate results)\r\n\t */\r\n\tfunction setHandlerAddr(address handlerAddr) onlyOwner public returns (bool)\r\n\t{\r\n\t\thandler = handlerAddr;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Set the address of service incentive contract\r\n\t * @param siHandlerAddr The address of service incentive contract\r\n \t * @return true (TODO: validate results)\r\n\t */\r\n\tfunction setSiHandlerAddr(address siHandlerAddr) onlyOwner public returns (bool)\r\n\t{\r\n\t\tSI = siHandlerAddr;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Get ID of handler\r\n\t* @return The connected handler ID\r\n\t*/\r\n\tfunction getHandlerID() public view returns (uint256)\r\n\t{\r\n\t\treturn handlerID;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Get the address of handler\r\n\t* @return The handler address\r\n\t*/\r\n\tfunction getHandlerAddr() public view returns (address)\r\n\t{\r\n\t\treturn handler;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Get the address of service incentive contract\r\n\t* @return The service incentive contract address\r\n\t*/\r\n\tfunction getSiHandlerAddr() public view returns (address)\r\n\t{\r\n\t\treturn SI;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Move assets to sender for the migration event.\r\n\t*/\r\n\tfunction migration(address payable target) onlyOwner public returns (bool)\r\n\t{\r\n\t\ttarget.transfer(address(this).balance);\r\n\t\t/*ToDo: update selfDestruct function */\r\n\t}\r\n\r\n\t/**\r\n\t* @dev fallback function where handler can receive native coin\r\n\t*/\r\n\tfallback () external payable\r\n\t{\r\n\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Forward the request for deposit to the handler logic contract.\r\n\t* @param unifiedTokenAmount The amount of coins to deposit\r\n\t* @param flag Flag for the full calculation mode\r\n\t* @return whether the deposit has been made successfully or not.\r\n\t*/\r\n\tfunction deposit(uint256 unifiedTokenAmount, bool flag) public payable returns (bool)\r\n\t{\r\n\t\tbool result;\r\n\t\tbytes memory returnData;\r\n\t\tbytes memory data = abi.encodeWithSignature(DEPOSIT, unifiedTokenAmount, flag);\r\n\t\t(result, returnData) = handler.delegatecall(data);\r\n\t\trequire(result, string(returnData));\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Forward the request for withdraw to the handler logic contract.\r\n\t* @param unifiedTokenAmount The amount of coins to withdraw\r\n\t* @param flag Flag for the full calculation mode\r\n\t* @return whether the withdraw has been made successfully or not.\r\n\t*/\r\n\tfunction withdraw(uint256 unifiedTokenAmount, bool flag) public returns (bool)\r\n\t{\r\n\t\tbool result;\r\n\t\tbytes memory returnData;\r\n\t\tbytes memory data = abi.encodeWithSignature(REDEEM, unifiedTokenAmount, flag);\r\n\t\t(result, returnData) = handler.delegatecall(data);\r\n\t\trequire(result, string(returnData));\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Forward the request for borrow to the handler logic contract.\r\n\t* @param unifiedTokenAmount The amount of coins to borrow\r\n\t* @param flag Flag for the full calculation mode\r\n\t* @return whether the borrow has been made successfully or not.\r\n\t*/\r\n\tfunction borrow(uint256 unifiedTokenAmount, bool flag) public returns (bool)\r\n\t{\r\n\t\tbool result;\r\n\t\tbytes memory returnData;\r\n\t\tbytes memory data = abi.encodeWithSignature(BORROW, unifiedTokenAmount, flag);\r\n\t\t(result, returnData) = handler.delegatecall(data);\r\n\t\trequire(result, string(returnData));\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Forward the request for repay to the handler logic contract.\r\n\t* @param unifiedTokenAmount The amount of coins to repay\r\n\t* @param flag Flag for the full calculation mode\r\n\t* @return whether the repay has been made successfully or not.\r\n\t*/\r\n\tfunction repay(uint256 unifiedTokenAmount, bool flag) public payable returns (bool)\r\n\t{\r\n\t\tbool result;\r\n\t\tbytes memory returnData;\r\n\t\tbytes memory data = abi.encodeWithSignature(REPAY, unifiedTokenAmount, flag);\r\n\t\t(result, returnData) = handler.delegatecall(data);\r\n\t\trequire(result, string(returnData));\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Call other functions in handler logic contract.\r\n\t* @param data The encoded value of the function and argument\r\n\t* @return The result of the call\r\n\t*/\r\n\tfunction handlerProxy(bytes memory data) onlyMarketManager external returns (bool, bytes memory)\r\n\t{\r\n\t\tbool result;\r\n\t\tbytes memory returnData;\r\n\t\t(result, returnData) = handler.delegatecall(data);\r\n\t\trequire(result, string(returnData));\r\n\t\treturn (result, returnData);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Call other view functions in handler logic contract.\r\n\t* (delegatecall does not work for view functions)\r\n\t* @param data The encoded value of the function and argument\r\n\t* @return The result of the call\r\n\t*/\r\n\tfunction handlerViewProxy(bytes memory data) external returns (bool, bytes memory)\r\n\t{\r\n\t\tbool result;\r\n\t\tbytes memory returnData;\r\n\t\t(result, returnData) = handler.delegatecall(data);\r\n\t\trequire(result, string(returnData));\r\n\t\treturn (result, returnData);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Call other functions in service incentive logic contract.\r\n\t* @param data The encoded value of the function and argument\r\n\t* @return The result of the call\r\n\t*/\r\n\tfunction siProxy(bytes memory data) onlyMarketManager external returns (bool, bytes memory)\r\n\t{\r\n\t\tbool result;\r\n\t\tbytes memory returnData;\r\n\t\t(result, returnData) = SI.delegatecall(data);\r\n\t\trequire(result, string(returnData));\r\n\t\treturn (result, returnData);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Call other view functions in service incentive logic contract.\r\n\t* (delegatecall does not work for view functions)\r\n\t* @param data The encoded value of the function and argument\r\n\t* @return The result of the call\r\n\t*/\r\n\tfunction siViewProxy(bytes memory data) external returns (bool, bytes memory)\r\n\t{\r\n\t\tbool result;\r\n\t\tbytes memory returnData;\r\n\t\t(result, returnData) = SI.delegatecall(data);\r\n\t\trequire(result, string(returnData));\r\n\t\treturn (result, returnData);\r\n\t}\r\n}\r\n\r\n// File: contracts/interfaces/tokenInterface.sol\r\n\r\npragma solidity 0.6.12;\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external ;\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external ;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/reqTokenProxy.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @title Bifi user request proxy (ERC-20 token)\r\n * @notice access logic contracts via delegate calls.\r\n * @author BiFi(seinmyung25, Miller-kk, tlatkdgus1, dongchangYoo)\r\n */\r\ncontract tokenProxy is RequestProxyErrors {\r\n\taddress payable owner;\r\n\r\n\tuint256 handlerID;\r\n\r\n\tstring tokenName;\r\n\r\n\tuint256 constant unifiedPoint = 10 ** 18;\r\n\r\n\tuint256 unifiedTokenDecimal = 10 ** 18;\r\n\r\n\tuint256 underlyingTokenDecimal;\r\n\r\n\tmarketManagerInterface marketManager;\r\n\r\n\tinterestModelInterface interestModelInstance;\r\n\r\n\tmarketHandlerDataStorageInterface handlerDataStorage;\r\n\r\n\tmarketSIHandlerDataStorageInterface SIHandlerDataStorage;\r\n\r\n\tIERC20 erc20Instance;\r\n\r\n\taddress public handler;\r\n\r\n\taddress public SI;\r\n\r\n\tstring DEPOSIT = \"deposit(uint256,bool)\";\r\n\r\n\tstring REDEEM = \"withdraw(uint256,bool)\";\r\n\r\n\tstring BORROW = \"borrow(uint256,bool)\";\r\n\r\n\tstring REPAY = \"repay(uint256,bool)\";\r\n\r\n\tmodifier onlyOwner {\r\n\t\trequire(msg.sender == owner, ONLY_OWNER);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier onlyMarketManager {\r\n\t\taddress msgSender = msg.sender;\r\n\t\trequire((msgSender == address(marketManager)) || (msgSender == owner), ONLY_MANAGER);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Construct a new TokenProxy which uses tokenHandlerLogic\r\n\t*/\r\n\tconstructor () public\r\n\t{\r\n\t\towner = msg.sender;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Replace the owner of the handler\r\n\t* @param _owner the address of the new owner\r\n\t* @return true (TODO: validate results)\r\n\t*/\r\n\tfunction ownershipTransfer(address _owner) onlyOwner external returns (bool)\r\n\t{\r\n\t\towner = address(uint160(_owner));\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Initialize the contract\r\n\t* @param _handlerID ID of handler\r\n\t* @param marketManagerAddr The address of market manager\r\n\t* @param interestModelAddr The address of handler interest model contract address\r\n\t* @param marketDataStorageAddr The address of handler data storage\r\n\t* @param erc20Addr The address of target ERC-20 token (underlying asset)\r\n\t* @param _tokenName The name of target ERC-20 token\r\n\t* @param siHandlerAddr The address of service incentive contract\r\n\t* @param SIHandlerDataStorageAddr The address of service incentive data storage\r\n\t*/\r\n\tfunction initialize(uint256 _handlerID, address handlerAddr, address marketManagerAddr, address interestModelAddr, address marketDataStorageAddr, address erc20Addr, string memory _tokenName, address siHandlerAddr, address SIHandlerDataStorageAddr) onlyOwner public returns (bool)\r\n\t{\r\n\t\thandlerID = _handlerID;\r\n\t\thandler = handlerAddr;\r\n\t\tmarketManager = marketManagerInterface(marketManagerAddr);\r\n\t\tinterestModelInstance = interestModelInterface(interestModelAddr);\r\n\t\thandlerDataStorage = marketHandlerDataStorageInterface(marketDataStorageAddr);\r\n\t\terc20Instance = IERC20(erc20Addr);\r\n\t\ttokenName = _tokenName;\r\n\t\tSI = siHandlerAddr;\r\n\t\tSIHandlerDataStorage = marketSIHandlerDataStorageInterface(SIHandlerDataStorageAddr);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Set ID of handler\r\n\t* @param _handlerID The id of handler\r\n\t* @return true (TODO: validate results)\r\n\t*/\r\n\tfunction setHandlerID(uint256 _handlerID) onlyOwner public returns (bool)\r\n\t{\r\n\t\thandlerID = _handlerID;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Set the address of handler\r\n\t* @param handlerAddr The address of handler\r\n\t* @return true (TODO: validate results)\r\n\t*/\r\n\tfunction setHandlerAddr(address handlerAddr) onlyOwner public returns (bool)\r\n\t{\r\n\t\thandler = handlerAddr;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Set the address of service incentive contract\r\n\t* @param siHandlerAddr The address of service incentive contract\r\n\t* @return true (TODO: validate results)\r\n\t*/\r\n\tfunction setSiHandlerAddr(address siHandlerAddr) onlyOwner public returns (bool)\r\n\t{\r\n\t\tSI = siHandlerAddr;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Get ID of handler\r\n\t* @return The connected handler ID\r\n\t*/\r\n\tfunction getHandlerID() public view returns (uint256)\r\n\t{\r\n\t\treturn handlerID;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Get the address of handler\r\n\t* @return The handler address\r\n\t*/\r\n\tfunction getHandlerAddr() public view returns (address)\r\n\t{\r\n\t\treturn handler;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Get address of service incentive contract\r\n\t* @return The service incentive contract address\r\n\t*/\r\n\tfunction getSiHandlerAddr() public view returns (address)\r\n\t{\r\n\t\treturn SI;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Move assets to sender for the migration event\r\n\t*/\r\n\tfunction migration(address target) onlyOwner public returns (bool)\r\n\t{\r\n\t\tuint256 balance = erc20Instance.balanceOf(address(this));\r\n\t\terc20Instance.transfer(target, balance);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Forward the deposit request for deposit to the handler logic contract.\r\n\t* @param unifiedTokenAmount The amount of coins to deposit\r\n\t* @param flag Flag for the full calcuation mode\r\n\t* @return whether the deposit has been made successfully or not.\r\n\t*/\r\n\tfunction deposit(uint256 unifiedTokenAmount, bool flag) public payable returns (bool)\r\n\t{\r\n\t\tbool result;\r\n\t\tbytes memory returnData;\r\n\t\tbytes memory data = abi.encodeWithSignature(DEPOSIT, unifiedTokenAmount, flag);\r\n\t\t(result, returnData) = handler.delegatecall(data);\r\n\t\trequire(result, string(returnData));\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Forward the withdraw request for withdraw to the handler logic contract.\r\n\t* @param unifiedTokenAmount The amount of coins to withdraw\r\n\t* @param flag Flag for the full calcuation mode\r\n\t* @return whether the withdraw has been made successfully or not.\r\n\t*/\r\n\tfunction withdraw(uint256 unifiedTokenAmount, bool flag) public returns (bool)\r\n\t{\r\n\t\tbool result;\r\n\t\tbytes memory returnData;\r\n\t\tbytes memory data = abi.encodeWithSignature(REDEEM, unifiedTokenAmount, flag);\r\n\t\t(result, returnData) = handler.delegatecall(data);\r\n\t\trequire(result, string(returnData));\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Forward the borrow request for borrow to the handler logic contract.\r\n\t* @param unifiedTokenAmount The amount of coins to borrow\r\n\t* @param flag Flag for the full calcuation mode\r\n\t* @return whether the borrow has been made successfully or not.\r\n\t*/\r\n\tfunction borrow(uint256 unifiedTokenAmount, bool flag) public returns (bool)\r\n\t{\r\n\t\tbool result;\r\n\t\tbytes memory returnData;\r\n\t\tbytes memory data = abi.encodeWithSignature(BORROW, unifiedTokenAmount, flag);\r\n\t\t(result, returnData) = handler.delegatecall(data);\r\n\t\trequire(result, string(returnData));\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Forward the repay request for repay to the handler logic contract.\r\n\t* @param unifiedTokenAmount The amount of coins to repay\r\n\t* @param flag Flag for the full calcuation mode\r\n\t* @return whether the repay has been made successfully or not.\r\n\t*/\r\n\tfunction repay(uint256 unifiedTokenAmount, bool flag) public payable returns (bool)\r\n\t{\r\n\t\tbool result;\r\n\t\tbytes memory returnData;\r\n\t\tbytes memory data = abi.encodeWithSignature(REPAY, unifiedTokenAmount, flag);\r\n\t\t(result, returnData) = handler.delegatecall(data);\r\n\t\trequire(result, string(returnData));\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Call other functions in handler logic contract.\r\n\t* @param data The encoded value of the function and argument\r\n\t* @return The result of the call\r\n\t*/\r\n\tfunction handlerProxy(bytes memory data) onlyMarketManager external returns (bool, bytes memory)\r\n\t{\r\n\t\tbool result;\r\n\t\tbytes memory returnData;\r\n\t\t(result, returnData) = handler.delegatecall(data);\r\n\t\trequire(result, string(returnData));\r\n\t\treturn (result, returnData);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Call other view functions in handler logic contract.\r\n\t* (delegatecall does not work for view functions)\r\n\t* @param data The encoded value of the function and argument\r\n\t* @return The result of the call\r\n\t*/\r\n\tfunction handlerViewProxy(bytes memory data) external returns (bool, bytes memory)\r\n\t{\r\n\t\tbool result;\r\n\t\tbytes memory returnData;\r\n\t\t(result, returnData) = handler.delegatecall(data);\r\n\t\trequire(result, string(returnData));\r\n\t\treturn (result, returnData);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Call other functions in service incentive logic contract.\r\n\t* @param data The encoded value of the function and argument\r\n\t* @return The result of the call\r\n\t*/\r\n\tfunction siProxy(bytes memory data) onlyMarketManager external returns (bool, bytes memory)\r\n\t{\r\n\t\tbool result;\r\n\t\tbytes memory returnData;\r\n\t\t(result, returnData) = SI.delegatecall(data);\r\n\t\trequire(result, string(returnData));\r\n\t\treturn (result, returnData);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Call other view functions in service incentive logic contract.\r\n\t* (delegatecall does not work for view functions)\r\n\t* @param data The encoded value of the function and argument\r\n\t* @return The result of the call\r\n\t*/\r\n\tfunction siViewProxy(bytes memory data) external returns (bool, bytes memory)\r\n\t{\r\n\t\tbool result;\r\n\t\tbytes memory returnData;\r\n\t\t(result, returnData) = SI.delegatecall(data);\r\n\t\trequire(result, string(returnData));\r\n\t\treturn (result, returnData);\r\n\t}\r\n}\r\n\r\n// File: contracts/truffleKit/marketHandlerSide/marketHandlerProxys.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract EtherHandlerProxy is tokenProxy {\r\n    constructor()\r\n    tokenProxy() public {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"SI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unifiedTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"borrow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unifiedTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHandlerAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHandlerID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSiHandlerAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"handler\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"handlerProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"handlerViewProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_handlerID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"handlerAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketManagerAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"interestModelAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketDataStorageAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"erc20Addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"siHandlerAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"SIHandlerDataStorageAddr\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"migration\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"ownershipTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unifiedTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"repay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handlerAddr\",\"type\":\"address\"}],\"name\":\"setHandlerAddr\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_handlerID\",\"type\":\"uint256\"}],\"name\":\"setHandlerID\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"siHandlerAddr\",\"type\":\"address\"}],\"name\":\"setSiHandlerAddr\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"siProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"siViewProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unifiedTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EtherHandlerProxy", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "BSD-3-Clause", "Proxy": "1", "Implementation": "0x77c59ef81bcb6b5aa5efefa58b9914b2b115941b", "SwarmSource": "ipfs://3c3e964840fa4a946c3095dffa1cd8cfc3edea5992c5cefc444e5474766b186b"}