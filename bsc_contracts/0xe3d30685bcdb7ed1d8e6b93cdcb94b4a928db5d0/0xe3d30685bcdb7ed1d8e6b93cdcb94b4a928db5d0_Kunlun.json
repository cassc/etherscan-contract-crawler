{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n\r\npragma solidity 0.8.17;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint256 reserve0, uint256 reserve1, uint32 blockTimestampLast);\r\n    function sync() external;\r\n}\r\n\r\ninterface IDapp {\r\n    function klClearLp(address account) external;\r\n}\r\n\r\nlibrary EnumerableSet {\r\n   \r\n    struct Set {\r\n        bytes32[] _values;\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        \r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { \r\n            \r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n    \r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            \r\n            set._indexes[lastvalue] = toDeleteIndex + 1; \r\n\r\n            set._values.pop();\r\n\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    \r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    \r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   \r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    \r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    \r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n   \r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   \r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    \r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n   \r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n   \r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   \r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    \r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    \r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    \r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    \r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   \r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"new is 0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract TokenDistributor {\r\n    constructor (address token) {\r\n        IERC20(token).approve(msg.sender, ~uint256(0));\r\n    }\r\n}\r\n\r\nabstract contract BaseToken is IERC20, Ownable {\r\n    event ProcessLP(uint totalLpCount,uint processLpCount);\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    uint8 private _decimals;  \r\n    uint32 public _startTradeBlock;\r\n    uint32 public _currentIndex;\r\n    uint32 public _priceTime;\r\n    uint32 public _gasLimit;\r\n    uint256 private _totalSupply;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 public _waitForSwapAmount;\r\n    uint256 public _waitForSwapCutAmount;\r\n    uint256 public _limitAmount;\r\n    uint256 public _minAmountLpHolder;\r\n    uint256 public _addPriceTokenAmount; \r\n    uint256 public _lastPrice;\r\n\r\n\r\n    ISwapRouter private _swapRouter;\r\n    TokenDistributor public _tokenDistributor;\r\n    address public _dapp;\r\n    address private _marketAddress;\r\n    address private _usdtAddress;\r\n    address private _usdtPairAddress;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) public _feeWhiteList;\r\n    mapping(address => bool) private _swapPairMap;\r\n    mapping(address => bool) _excludeLpProvider;  \r\n    EnumerableSet.AddressSet _lpProviders;\r\n    \r\n    constructor (string memory Name, string memory Symbol, uint256 Supply, address RouterAddress, address UsdtAddress, address marketAddress){\r\n        _name = Name;\r\n        _symbol = Symbol;\r\n        _decimals = 18;\r\n        ISwapRouter swapRouter = ISwapRouter(RouterAddress);\r\n        _usdtAddress = UsdtAddress;\r\n        _swapRouter = swapRouter;\r\n        _allowances[address(this)][RouterAddress] = MAX;\r\n\r\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\r\n        _usdtPairAddress = swapFactory.createPair(address(this), UsdtAddress);\r\n        _swapPairMap[_usdtPairAddress] = true;\r\n\r\n        uint256 total = Supply * 1e18;\r\n        _totalSupply = total;\r\n\r\n        \r\n        _marketAddress = marketAddress;\r\n        _dapp = msg.sender;\r\n\r\n        _balances[msg.sender] = total; \r\n        emit Transfer(address(0), msg.sender, total);\r\n        _feeWhiteList[msg.sender] = true;\r\n\r\n        _feeWhiteList[marketAddress] = true;\r\n        _feeWhiteList[address(this)] = true;\r\n        _feeWhiteList[address(swapRouter)] = true;\r\n        _feeWhiteList[msg.sender] = true;\r\n        _feeWhiteList[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n\r\n        _excludeLpProvider[address(0)] = true;\r\n        _excludeLpProvider[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n\r\n        _limitAmount = 1e19;\r\n        _addPriceTokenAmount = 1e14;\r\n        _minAmountLpHolder = 1e16;\r\n        _gasLimit = 3000000;\r\n        _tokenDistributor = new TokenDistributor(UsdtAddress);\r\n        _startTradeBlock = 0;\r\n    }\r\n\r\n    function pairAddress() external view returns (address) {\r\n        return _usdtPairAddress;\r\n    }\r\n    \r\n    function routerAddress() external view returns (address) {\r\n        return address(_swapRouter);\r\n    }\r\n    \r\n    function usdtAddress() external view returns (address) {\r\n        return _usdtAddress;\r\n    }\r\n    \r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) external view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) external view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    \r\n    function _isLiquidity(address from,address to) internal view returns(bool isAdd,bool isDel){        \r\n        (uint r0,uint r1,) = IUniswapV2Pair(_usdtPairAddress).getReserves();\r\n        uint rUsdt = r0;  \r\n        uint bUsdt = IERC20(_usdtAddress).balanceOf(_usdtPairAddress);      \r\n        if(address(this)<_usdtAddress){ \r\n            rUsdt = r1; \r\n        }\r\n        if( _swapPairMap[to] ){ \r\n            if( bUsdt > rUsdt ){\r\n                isAdd = bUsdt - rUsdt > _addPriceTokenAmount; \r\n            }\r\n        }\r\n        if( _swapPairMap[from] ){   \r\n            isDel = bUsdt <= rUsdt;  \r\n        }\r\n    }\r\n\r\n    function updateLastPrice() public {\r\n        uint32 newTime = uint32(block.timestamp)/86400; \r\n        if(newTime > _priceTime){\r\n            _lastPrice = getNowPrice();\r\n            _priceTime = newTime;\r\n        }\r\n    }\r\n\r\n    function getNowPrice() internal view returns(uint256){\r\n        uint256 poolToken = _balances[_usdtPairAddress];\r\n        if(poolToken > 0){\r\n            return IERC20(_usdtAddress).balanceOf(_usdtPairAddress)*1e18/poolToken;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getDownRate() public view returns(uint256){ \r\n        if(_lastPrice > 0){\r\n            uint256 nowPrice = getNowPrice();\r\n            if(_lastPrice > nowPrice){\r\n                return (_lastPrice - nowPrice)*100/_lastPrice;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getCutRate() public view returns(uint256){\r\n        uint256 downRate = getDownRate();\r\n        if(downRate >= 50){\r\n            return 40;\r\n        }else if(downRate >= 30){\r\n            return 20;\r\n        }else{\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function getCurrentPrice() external view returns (uint256){\r\n        return getNowPrice();\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {       \r\n        require(amount > 0, \"KL: transfer amount must be >0\");\r\n        if(address(this)==from) {\r\n            _tokenTransfer(from, to, amount); \r\n            return;\r\n        }\r\n        bool isAddLiquidity;\r\n        bool isDelLiquidity;\r\n        ( isAddLiquidity, isDelLiquidity) = _isLiquidity(from,to);\r\n        \r\n        if (_feeWhiteList[from] || _feeWhiteList[to] || isAddLiquidity || isDelLiquidity){\r\n            \r\n            _tokenTransfer(from, to, amount);\r\n\r\n            if(!isAddLiquidity && !isDelLiquidity){\r\n                \r\n                swapUSDT();\r\n            }\r\n        }else if(_swapPairMap[from] || _swapPairMap[to]){\r\n            \r\n            require(_startTradeBlock > 0, \"KL: trade don't start\");   \r\n            updateLastPrice();    \r\n            if (_swapPairMap[to]) { \r\n                \r\n                require(amount <= (_balances[from])*99/100, \"KL: sell amount exceeds balance 99%\");  \r\n                \r\n                \r\n                swapUSDT();\r\n\r\n                uint256 cutRate = getCutRate();    \r\n                if(cutRate > 0) {\r\n                    _tokenTransfer(from, to, amount*(100-cutRate)/100); \r\n                    cutRate -= 6;\r\n                    _tokenTransfer(from, address(this), amount*cutRate/100) ; \r\n                    _waitForSwapCutAmount += amount*cutRate/100;\r\n                }else{\r\n                    _tokenTransfer(from, to, amount*94/100); \r\n                }\r\n                \r\n            }else{  \r\n                _tokenTransfer(from, to, amount*94/100); \r\n                 \r\n            }   \r\n            \r\n            \r\n            _tokenTransfer(from, address(this), amount*55/1000); \r\n            _tokenTransfer(from, address(0), amount/200); \r\n            _waitForSwapAmount += amount*55/1000; \r\n            \r\n             \r\n        }else{\r\n            \r\n            swapUSDT() ;\r\n            _tokenTransfer(from, to, amount/2);\r\n            _tokenTransfer(from, address(0), amount/2); \r\n        }\r\n        if (isAddLiquidity) { \r\n            _lpProviders.add(from);\r\n        }\r\n        if(isDelLiquidity){\r\n           _removeLpProvider(to);\r\n           IDapp(_dapp).klClearLp(to);\r\n        }\r\n        _processLP(_gasLimit);\r\n    }\r\n    \r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        _balances[recipient] = _balances[recipient] + tAmount;\r\n        emit Transfer(sender, recipient, tAmount);\r\n    }\r\n\r\n    function swapUSDT() internal  {\r\n        uint256 total = _waitForSwapAmount + _waitForSwapCutAmount;\r\n        if(total < _limitAmount) return;\r\n        address tokenDistributor = address(_tokenDistributor);\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _usdtAddress;\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            total,\r\n            0,\r\n            path,\r\n            tokenDistributor,\r\n            block.timestamp\r\n        );        \r\n        IERC20 USDT = IERC20(_usdtAddress);\r\n        uint256 usdtBalance = USDT.balanceOf(tokenDistributor);\r\n        uint256 cutAmount = usdtBalance * _waitForSwapCutAmount/total;\r\n        uint256 rewardAmount = usdtBalance - cutAmount;\r\n        _waitForSwapAmount = 0;\r\n        _waitForSwapCutAmount = 0;\r\n        USDT.transferFrom(tokenDistributor, _marketAddress, cutAmount + rewardAmount*15/55); \r\n        USDT.transferFrom(tokenDistributor, _dapp, rewardAmount*20/55); \r\n        USDT.transferFrom(tokenDistributor, address(this), rewardAmount*20/55); \r\n    }\r\n\r\n    function getLps() external view returns(address [] memory){\r\n        uint size = _lpProviders.length();\r\n        address[] memory addrs = new address[](size);\r\n        for(uint i=0;i<size;i++) addrs[i]= _lpProviders.at(i);\r\n        return addrs;\r\n    }\r\n\r\n    function processLP(uint256 gas) external onlyOwner{\r\n        _processLP(gas);\r\n    }\r\n\r\n    function _processLP(uint256 gas) internal {\r\n        IERC20 mainpair = IERC20(_usdtPairAddress);\r\n        uint totalPair = mainpair.totalSupply();\r\n        if (0 == totalPair) {\r\n            return;\r\n        }\r\n\r\n        IERC20 USDT = IERC20(_usdtAddress);\r\n        uint256 usdtTokenBalance = USDT.balanceOf(address(this));\r\n        if (usdtTokenBalance < _limitAmount) {\r\n            return;\r\n        }\r\n\r\n        address lpHolder;\r\n        uint256 pairBalance;\r\n        uint256 amount;\r\n\r\n        uint256 lpHolderCount = _lpProviders.length();\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n        \r\n\r\n        while (gasUsed < gas && iterations < lpHolderCount) {\r\n            if (_currentIndex >= lpHolderCount) {\r\n                _currentIndex = 0;\r\n            }\r\n            lpHolder = _lpProviders.at(_currentIndex);\r\n            pairBalance = mainpair.balanceOf(lpHolder);\r\n            if (pairBalance > 0 && !_excludeLpProvider[lpHolder]) {\r\n                amount = usdtTokenBalance * pairBalance / totalPair;\r\n                if (amount > 0) {\r\n                    USDT.transfer(lpHolder, amount);\r\n                }\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            _currentIndex++;\r\n            iterations++;\r\n        }\r\n        emit ProcessLP(lpHolderCount, iterations);\r\n    }\r\n\r\n    function _removeLpProvider(address addr) internal{\r\n        if(IERC20(_usdtPairAddress).balanceOf(addr)<_minAmountLpHolder){\r\n            _lpProviders.remove(addr);\r\n        }\r\n    }\r\n\r\n    function setLimitAmount(uint256 amount) external onlyOwner {\r\n        _limitAmount = amount;\r\n    }\r\n\r\n    function setGasLimit(uint32 limit) external onlyOwner {\r\n        _gasLimit = limit;\r\n    }\r\n\r\n    function setExcludeLPProvider(address addr, bool enable) external onlyOwner {\r\n        _excludeLpProvider[addr] = enable;\r\n    }\r\n\r\n    function manulAddLpProvider(address[] calldata addrs) external returns(bool){\r\n        require(msg.sender==owner()||msg.sender==_dapp,\"caller should be owner or dapp adderss\");\r\n        for(uint i=0;i<addrs.length;i++) _lpProviders.add(addrs[i]);\r\n        return true;\r\n    }\r\n\r\n    function manulRemoveLpProvider(address addr) external onlyOwner{\r\n         _lpProviders.remove(addr);\r\n    }\r\n\r\n    function setMarketAddress(address addr) external onlyOwner {\r\n        _marketAddress = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n\r\n    function getMarketAddress() external view returns(address) {\r\n        return _marketAddress;\r\n    }\r\n\r\n    function setDappAddress(address addr) external onlyOwner {\r\n        _dapp = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n\r\n    function startTrade() external onlyOwner {\r\n        require(0 == _startTradeBlock, \"trading\");\r\n        _startTradeBlock = uint32(block.number);\r\n    }\r\n\r\n    function closeTrade() external onlyOwner {\r\n        _startTradeBlock = 0;\r\n    }\r\n\r\n    function setFeeWhiteList(address addr, bool enable) external onlyOwner {\r\n        _feeWhiteList[addr] = enable;\r\n    }    \r\n\r\n    function setSwapPairMap(address addr, bool enable) external onlyOwner {\r\n        _swapPairMap[addr] = enable;\r\n    }\r\n\r\n    function setAddPriceTokenAmount(uint256 addPriceTokenAmount) external onlyOwner{\r\n        _addPriceTokenAmount = addPriceTokenAmount;\r\n    }\r\n\r\n    receive() external payable {}\r\n}\r\n\r\ncontract Kunlun is BaseToken {\r\n    constructor() BaseToken(\r\n        \"Kunlun coin\",\r\n        \"KL\",\r\n        21000000,\r\n        address(0x10ED43C718714eb63d5aA57B78B54704E256024E), \r\n        address(0x55d398326f99059fF775485246999027B3197955), \r\n        address(0x4B3cD1F638d3d3847a6cEBc0AE8C1288f767aF12) \r\n    ){\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalLpCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"processLpCount\",\"type\":\"uint256\"}],\"name\":\"ProcessLP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_addPriceTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_currentIndex\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_dapp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_feeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_gasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_limitAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minAmountLpHolder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_priceTime\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_startTradeBlock\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_waitForSwapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_waitForSwapCutAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCutRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDownRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLps\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"manulAddLpProvider\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"manulRemoveLpProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"processLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"addPriceTokenAmount\",\"type\":\"uint256\"}],\"name\":\"setAddPriceTokenAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setDappAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeLPProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"limit\",\"type\":\"uint32\"}],\"name\":\"setGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setLimitAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setMarketAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairMap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateLastPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Kunlun", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6e775fec10bf5062441e987fb27df689d87f86e90fdf549c3c9fc90978bce745"}