{"SourceCode": "pragma solidity ^0.8.0;\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function decimals() external view returns (uint8);\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    //uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor ()  {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }   \r\n    \r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        \r\n        _owner = newOwner;\r\n    }\r\n    \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        uint swapN,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        uint swapN,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ncontract PeTestTokenFee is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    address public usdt = 0x55d398326f99059fF775485246999027B3197955;\r\n    IERC20 private USDT = IERC20(0x55d398326f99059fF775485246999027B3197955);\r\n    address public usdc = 0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d;\r\n    IERC20 private USDC = IERC20(0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d);\r\n    address private nftAddress = 0xc2452DB583AFB353cB44Ac6edC2f61Da7C23A8bB;\r\n    address private projectAddress = 0x0A4AE85C1C8418a86e965d98173577A37592FaDa;\r\n    address public community = 0x77EF477c4E3F0B92BaD3e2F0c6763db1a7Fe13c0;\r\n\r\n    string private _name = \"People Equity Token\";\r\n    string private _symbol = \"PV\";\r\n    uint8 private _decimals = 18;\r\n\r\n    uint256 public bacisFee = 50;\r\n    uint256 private  AMount;\r\n    uint256 public rewardtotal;//Bookkeeping quantity\r\n    uint256 private _tTotal = 500 * 10 ** 9 * 10 ** _decimals;\r\n    uint256 public maxHold = _tTotal * 2 / 10000;\r\n    uint8 public setMaxHold; //owner can set 5 round\r\n    //mapping(address => uint) public haveBuy;\r\n\r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n    address public  peUsdtPair;  \r\n    address public  peUsdcPair;\r\n\r\n    mapping(address => bool) public _isBlack;\r\n\r\n    mapping(address => bool) public _isWhite;\r\n    mapping(address => uint256) public _reward;\r\n    mapping(address => bool) public _inarr;\r\n    address[] public rewardarr;\r\n\r\n    mapping(address => int256) public _arrearage; //Record the number of user swaps used to repay the equity income due to superiors when there are no transaction fees\r\n\r\n    mapping(address => mapping(address => bool)) private _advance;//Used to determine who is the first transferor between two addresses\r\n    mapping(address => address) public inviter; //The superior address of an address\r\n    mapping(address => uint256) public advalueUsdc; //Record the number of user dividend USDT\r\n\r\n    uint256 public startBlockNumber;\r\n    uint8 public setBlockNumber = 1;\r\n    uint64 public blackTime = 2;\r\n\r\n    bool inSwapAndLiquify;\r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n    \r\n    constructor() {\r\n        _tOwned[projectAddress] = _tTotal;\r\n       \r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\r\n            0x85C47Fe0aD03e09E87fe1987b04aff01861e6e04\r\n        );\r\n        // set the rest of the contract variables\r\n        uniswapV2Router = _uniswapV2Router;\r\n        \r\n        emit Transfer(address(0), projectAddress, _tTotal);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view  returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _tOwned[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n      \r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n       if(sender == address(this)){\r\n           bacisTransfer(sender, recipient, amount);\r\n       }else{\r\n            _transfer(sender, recipient, amount);\r\n       }\r\n       \r\n        _approve(\r\n            sender,\r\n            msg.sender,\r\n            _allowances[sender][msg.sender].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(!_isBlack[from], \"you are black\");\r\n        if(rewardarr.length >= 10){\r\n            if(from != peUsdtPair && from != peUsdcPair && !inSwapAndLiquify){\r\n                swapAndReward();\r\n            }\r\n        }\r\n\r\n        if(_isWhite[from]) {\r\n            bacisTransfer(from,to,amount);\r\n            handle(from,to);\r\n            return;\r\n        }\r\n\r\n        if(to != peUsdtPair && to != peUsdcPair && !_isWhite[to]){\r\n            uint balance = _tOwned[to];\r\n            balance += amount;\r\n            require(balance <= maxHold, \"not allow hold\");\r\n        }\r\n\r\n        if(block.number >= startBlockNumber && block.number <= startBlockNumber + blackTime){\r\n            if(from == peUsdtPair || from == peUsdcPair)_isBlack[to] = true;\r\n        }\r\n\r\n        //When the accounting quantity has not been opened, trading is prohibited and transfer is allowed\r\n        if(block.number < startBlockNumber){\r\n            require(!isContract(from) && !isContract(to),\"not time yet\");\r\n            if(amount < 1000000 * 10**_decimals){\r\n                bacisTransfer(from,to,amount);\r\n                if(amount >= 1000 * 10**_decimals) handle(from,to);\r\n            }else {\r\n                beforeTransfer(from,to,amount);\r\n                handle(from,to);\r\n            }\r\n        }else{\r\n            calcTotalFee();  //Accounting fees\r\n            if(bacisFee == 0 ){\r\n              bacisTransfer(from,to,amount);\r\n              handle(from,to);\r\n            }else{\r\n                _transferStandard(from, to, amount);\r\n                handle(from,to); \r\n            } \r\n        }\r\n    \r\n    }\r\n\r\n   //\u5982\u679c\u4ee3\u5e01\u6ca1\u6709\u624b\u7eed\u8d39\uff0c\u7528\u4e8e\u507f\u8fd8\u4e0a\u7ea7\u5206\u7ea2\r\n    function unarrearage(\r\n        address add ,\r\n        uint amount\r\n    ) private  {\r\n        uint t1 = amount * 80 / 100;\r\n        if(inviter[inviter[add]] == address(0)){\r\n            _tOwned[inviter[add]] = _tOwned[inviter[add]].add(t1);\r\n            _tOwned[community]  = _tOwned[community].add(amount - t1);\r\n        }else {\r\n            _tOwned[inviter[add]] = _tOwned[inviter[add]].add(t1);\r\n            _tOwned[inviter[inviter[add]]]  = _tOwned[inviter[inviter[add]]].add(amount - t1);\r\n        }\r\n        \r\n    } \r\n\r\n    //\u8bb0\u5f55\u5730\u5740\u5f85\u5206\u7ea2\u4ee3\u5e01\u6570\u91cf\uff1a\u8d2d\u4e70\u52a0\uff0c\u5356\u6216\u8f6c\u51fa\u51cf\r\n    function arrearage(address addr ,uint8 ty,uint amount) private  {\r\n        if(inviter[addr] != address(0)){\r\n            if(ty == 0){\r\n                _arrearage[addr] = _arrearage[addr] + int(amount);\r\n            }else{\r\n                if(_arrearage[addr] > 0)_arrearage[addr] = _arrearage[addr] - int(amount);\r\n            }\r\n        }\r\n    } \r\n\r\n    //opening transfertion\r\n    function _transferStandard(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        //require(!inSwapAndLiquify,\"transfer or swap later\");\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        address cur = getTaddress(sender,recipient);       //Which party to choose to monitor whether there are superiors\r\n        \r\n        uint256 fee;\r\n        uint256 t1;\r\n        //No secondary\r\n        if(inviter[inviter[cur]] == address(0)){\r\n            //No first level\r\n            if(inviter[cur] == address(0)){\r\n                fee = tAmount.mul(bacisFee).div(1000);\r\n                //Escrow the contract first\r\n                _tOwned[address(this)] = _tOwned[address(this)].add(fee);\r\n\r\n                _reward[community] = _reward[community].add(fee);\r\n                rewardtotal = rewardtotal.add(fee);\r\n\r\n                _tOwned[recipient] = _tOwned[recipient].add(tAmount - fee);\r\n                emit Transfer(sender, recipient, tAmount - fee);\r\n                \r\n            }else{\r\n                //60% off handling fee\r\n                fee = tAmount.mul(bacisFee).div(1000).mul(60).div(100);\r\n                t1 = fee.mul(40).div(100);\r\n                _tOwned[address(this)] = _tOwned[address(this)].add(fee);\r\n                \r\n                _reward[inviter[cur]] = _reward[inviter[cur]].add(t1);\r\n                _reward[community] = _reward[community].add(fee.sub(t1));\r\n                rewardtotal = rewardtotal.add(fee);\r\n                if(!_inarr[inviter[cur]]) {\r\n                    rewardarr.push(inviter[cur]);\r\n                    _inarr[inviter[cur]] = true;\r\n                }\r\n\r\n                _tOwned[recipient] = _tOwned[recipient].add(tAmount - fee);\r\n                emit Transfer(sender, recipient, tAmount - fee);\r\n            }\r\n        }else{\r\n            \r\n                 //60% off handling fee\r\n                fee = tAmount.mul(bacisFee).div(1000).mul(60).div(100);\r\n                t1 = fee.mul(40).div(100);\r\n                uint256 t2 = fee.mul(10).div(100);\r\n                uint256 overFee = fee.sub(t1).sub(t2);\r\n                _tOwned[address(this)] = _tOwned[address(this)].add(fee);\r\n                \r\n                _reward[inviter[cur]] = _reward[inviter[cur]].add(t1);\r\n                _reward[inviter[inviter[cur]]] = _reward[inviter[inviter[cur]]].add(t2);\r\n                _reward[community] = _reward[community].add(overFee);\r\n\r\n                rewardtotal = rewardtotal.add(fee);\r\n                if(!_inarr[inviter[cur]]) {\r\n                    rewardarr.push(inviter[cur]);\r\n                    _inarr[inviter[cur]] = true;\r\n                }\r\n\r\n                if(!_inarr[inviter[inviter[cur]]]) {\r\n                    rewardarr.push(inviter[inviter[cur]]);\r\n                    _inarr[inviter[inviter[cur]]] = true;\r\n                }\r\n                \r\n                _tOwned[recipient] = _tOwned[recipient].add(tAmount - fee);\r\n                emit Transfer(sender, recipient, tAmount - fee);\r\n        }  \r\n        if(bacisFee > 0 && !isContract(cur)){\r\n            if(sender == peUsdtPair || sender == peUsdcPair){\r\n                arrearage(cur,0,(tAmount-fee) * 10 /10000);\r\n            }else if(sender == cur){\r\n                arrearage(cur,1,tAmount * 10 /10000);\r\n            }\r\n        }           \r\n    }\r\n\r\n    function bacisTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 Amount\r\n    ) private {\r\n        uint fee;\r\n        if(_arrearage[sender] > 0){\r\n            fee = Amount / 1000;\r\n            if(_arrearage[sender] > int(fee)){\r\n                unarrearage(sender,fee);\r\n                _arrearage[sender] = _arrearage[sender] - int(fee);\r\n            }else{\r\n                fee = uint(_arrearage[sender]);\r\n                unarrearage(sender,fee);\r\n                _arrearage[sender] = 0;\r\n            }\r\n        }\r\n        _tOwned[sender] = _tOwned[sender].sub(Amount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(Amount - fee);\r\n        emit Transfer(sender, recipient, Amount);\r\n    }\r\n\r\n    //Before opening, there are procedures for transferring large transactions\r\n    function beforeTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 Amount\r\n    ) private {\r\n        _tOwned[sender] = _tOwned[sender].sub(Amount);\r\n        //No secondary\r\n        if(inviter[inviter[sender]] == address(0)){\r\n            //No first level\r\n            if(inviter[sender] == address(0)){\r\n                uint256 fee = Amount.mul(bacisFee).div(1000);\r\n                _tOwned[recipient] = _tOwned[recipient].add(Amount - fee);\r\n                \r\n                _tOwned[community] = _tOwned[community].add(fee);\r\n                emit Transfer(sender, recipient, Amount - fee);\r\n            }else{\r\n                //60% off handling fee\r\n                uint256 fee = Amount.mul(bacisFee).div(1000).mul(60).div(100);\r\n                _tOwned[recipient] = _tOwned[recipient].add(Amount - fee);\r\n                uint256 t1 = fee.mul(40).div(100);\r\n                _tOwned[inviter[sender]] = _tOwned[inviter[sender]].add(t1);\r\n    \r\n                _tOwned[community] = _tOwned[community].add(fee.sub(t1));\r\n                emit Transfer(sender, recipient, Amount - fee);\r\n            }\r\n        }else{\r\n                //60% off handling fee\r\n                uint256 fee = Amount.mul(bacisFee).div(1000).mul(60).div(100);\r\n                _tOwned[recipient] = _tOwned[recipient].add(Amount - fee);\r\n                uint256 t1 = fee.mul(40).div(100);\r\n                uint256 t2 = fee.mul(10).div(100);\r\n                _tOwned[inviter[sender]] = _tOwned[inviter[sender]].add(t1);\r\n                _tOwned[inviter[inviter[sender]]] = _tOwned[inviter[inviter[sender]]].add(t2);\r\n                uint256 overFee = fee.sub(t1).sub(t2);\r\n                _tOwned[community] = _tOwned[community].add(overFee);\r\n                emit Transfer(sender, recipient, Amount - fee);\r\n        }\r\n        \r\n    }\r\n\r\n \r\n    function  handle(\r\n        address sender,\r\n        address recipient\r\n    ) public {\r\n        if(sender == recipient) return;\r\n        if(isContract(sender) || isContract(recipient))return;\r\n        if(!_advance[recipient][sender]) _advance[sender][recipient] = true;\r\n        if(_advance[recipient][sender] && inviter[sender] == address(0) ) inviter[sender] = recipient;\r\n    }\r\n\r\n    function  nftHandle(\r\n        address user,\r\n        address minter\r\n    ) public {\r\n        require(msg.sender == nftAddress, \"not allow\");\r\n       inviter[user] = minter;\r\n    }\r\n\r\n    function swapTokensForUSDT(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> usdt\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = usdt;\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of USDT\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    \r\n    }\r\n\r\n    function swapAndReward() public lockTheSwap{\r\n        require(rewardtotal > 0,\"no need swapAndReward\");\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        require(rewardtotal <= contractTokenBalance,\"no enough balance\");\r\n\r\n        uint256 initialBalance = USDT.balanceOf(address(this));\r\n        \r\n        swapTokensForUSDT(rewardtotal);\r\n        uint256 newBalance =USDT.balanceOf(address(this)).sub(initialBalance);\r\n        uint256 amount;\r\n       \r\n        if(_reward[community] > 0){\r\n            amount = newBalance.mul(_reward[community]).div(rewardtotal);\r\n            _reward[community] = 0;\r\n            USDT.transfer(community, amount);\r\n        }\r\n        \r\n        uint len = rewardarr.length;\r\n        for (uint i = 0; i < len; i++) {\r\n            if(_reward[rewardarr[0]] > 0){\r\n                amount = newBalance.mul(_reward[rewardarr[0]]).div(rewardtotal);\r\n                _inarr[rewardarr[0]] = false;\r\n                _reward[rewardarr[0]] = 0;\r\n                advalueUsdc[rewardarr[0]] = advalueUsdc[rewardarr[0]].add(amount);\r\n                USDT.transfer(rewardarr[0],amount); \r\n\r\n                rewardarr[0]=rewardarr[rewardarr.length-1];\r\n                rewardarr.pop();\r\n            }\r\n              \r\n        }\r\n        \r\n        rewardtotal = 0;\r\n    }\r\n\r\n    function getTaddress(address from ,address to) private view returns(address cur){\r\n        if (isContract(from)) {\r\n            cur = to;\r\n        } else  {\r\n            cur = from;\r\n        } \r\n    } \r\n\r\n    function getLiquidUAmount() public view returns (uint){     //Obtain the number of tokens for U in the fund pool\r\n        (uint112 r0, uint112 r1, ) = IUniswapV2Pair(peUsdcPair).getReserves();\r\n        uint amountUsdc;\r\n        if(IUniswapV2Pair(peUsdcPair).token0() == usdc){\r\n            amountUsdc =  uint(r0);\r\n        }else{\r\n            amountUsdc = uint(r1);\r\n        }\r\n        uint amountUsdt;\r\n        (r0, r1, ) = IUniswapV2Pair(peUsdtPair).getReserves();\r\n        if(IUniswapV2Pair(peUsdtPair).token0() == usdt){\r\n            amountUsdt =  uint(r0);\r\n        }else{\r\n            amountUsdt = uint(r1);\r\n        }\r\n        return amountUsdc / 10 ** USDC.decimals() + amountUsdt / 10 ** USDT.decimals();\r\n    }\r\n\r\n    function calcTotalFee() private { \r\n        AMount = getLiquidUAmount();\r\n        if(AMount <= 200000){\r\n             bacisFee = 50;\r\n        } else if( AMount <= 500000){\r\n            bacisFee = 40;\r\n        }else if( AMount <= 1000000){\r\n            bacisFee = 30;\r\n        }else if( AMount <= 3000000){\r\n            bacisFee = 20;\r\n        }else if( AMount <= 5000000){\r\n            bacisFee = 10;\r\n        }else if(AMount <= 10000000){\r\n            bacisFee = 8;\r\n        }else if(AMount <= 50000000){\r\n            bacisFee = 6;\r\n        }else if(AMount <= 100000000){\r\n            bacisFee = 4;\r\n        }else if(AMount <= 1000000000){\r\n            bacisFee = 2;\r\n        }else if(AMount <= 10000000000){\r\n            bacisFee = 1;\r\n        }else if(AMount > 10000000000){\r\n            bacisFee = 0;\r\n        }\r\n    } \r\n\r\n    function setOpenBlockNumber(uint256 blockNumber) public onlyOwner {\r\n        require(setBlockNumber == 1,\"not allowed\");                   \r\n        startBlockNumber = blockNumber;   //Set the height of the opening block\r\n        setBlockNumber--;\r\n    }\r\n\r\n    function setmaxHold(uint8 hold) public onlyOwner {\r\n        require(setMaxHold < 5, \"not allow\");           \r\n        maxHold = _tTotal * hold / 10000;\r\n        setMaxHold++;\r\n    }\r\n\r\n    \r\n    function setNftAddress(address _nftAddress) public onlyOwner {\r\n        nftAddress = _nftAddress;\r\n    }\r\n\r\n    function setCommunity(address _community) public onlyOwner {\r\n        community = _community;\r\n    }\r\n\r\n    function setpeUsdtPair(address pair) public onlyOwner{\r\n        peUsdtPair = pair;\r\n    }\r\n\r\n    function setpeUsdcPair(address pair) public onlyOwner{\r\n        peUsdcPair = pair;\r\n    }\r\n\r\n    function setWhite(address[] memory arr) public onlyOwner{\r\n        for (uint i = 0; i < arr.length; i++) {\r\n            _isWhite[arr[i]] = true;\r\n        }\r\n    }\r\n\r\n    function setBlackTime(uint64 blockNum) public onlyOwner{\r\n       \r\n       blackTime = blockNum;\r\n    }\r\n\r\n    function setBlack(address[] memory arr) public onlyOwner{\r\n        for (uint i = 0; i < arr.length; i++) {\r\n            _isBlack[arr[i]] = true;\r\n        }\r\n    }\r\n\r\n    function outBlack(address add) public onlyOwner{\r\n        _isBlack[add] = false;\r\n    }   \r\n\r\n     function isContract(address addr) internal view returns (bool) {\r\n\r\n       uint size;\r\n\r\n       assembly { size := extcodesize(addr) }\r\n\r\n       return size > 0;\r\n\r\n    }\r\n\r\n    function getFee()  public view returns(uint,uint){\r\n        return (bacisFee,1000);\r\n    } \r\n\r\n    function getFeeAvg() public  pure returns(uint8,uint8){\r\n        return (40,10);\r\n    }     \r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_arrearage\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_inarr\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isBlack\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isWhite\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"advalueUsdc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bacisFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blackTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"community\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeAvg\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidUAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"handle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxHold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"nftHandle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"outBlack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"peUsdcPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"peUsdtPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardarr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardtotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"arr\",\"type\":\"address[]\"}],\"name\":\"setBlack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"blockNum\",\"type\":\"uint64\"}],\"name\":\"setBlackTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setBlockNumber\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_community\",\"type\":\"address\"}],\"name\":\"setCommunity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setMaxHold\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"}],\"name\":\"setNftAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"setOpenBlockNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"arr\",\"type\":\"address[]\"}],\"name\":\"setWhite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"hold\",\"type\":\"uint8\"}],\"name\":\"setmaxHold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"setpeUsdcPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"setpeUsdtPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PeTestTokenFee", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5b338e833302175b41bb476bdb096cbb39895e022bc05f5f8062e92f14d5abb5"}