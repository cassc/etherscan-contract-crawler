{"SourceCode": "// SPDX-License-Identifier: MIT\r\n pragma solidity ^ 0.8.0;\r\n\r\n// File: @openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\utils\\Context.sol\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n\r\n// File: @openzeppelin\\contracts\\access\\Ownable.sol\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n \r\n contract DOGE123  is Ownable    {\r\n \r\n    struct Deposit{\r\n        address sp;\r\n        uint256 pid;\r\n        address addr;\r\n        uint256 amount;\r\n        uint256 time;\r\n        uint256 end;\r\n    }\r\n\r\n    struct Withdraw{\r\n        address addr;\r\n        uint256 amount;\r\n        uint256 time;\r\n    }\r\n\r\n    struct Unstake{\r\n        uint256 pid;\r\n        address addr;\r\n        uint256 time;\r\n    }\r\n \r\n\r\n  \r\n  \tDeposit[] public deposits;\r\n  \tWithdraw[] public withdraws;\r\n    Unstake[] public unstakes;\r\n\r\n    uint256 public countdeposit;\r\n    uint256 public countwithdraw;\r\n    uint256 public countunstake;\r\n    \r\n    mapping(address => address ) public sp;\r\n    mapping(address => bool[4]) public level;\r\n    address doge = 0xbA2aE424d960c26247Dd6c32edC70B295c744C43;\r\n    address pool ;\r\n    uint256 per;\r\n    constructor(){\r\n    pool = msg.sender;\r\n    }\r\n\r\n\r\n    uint256[] min  = [0,100e8,1000e8,10000e8];\r\n    uint256[] max  = [50e8,1000e8,10000e8,100000e8];\r\n    uint256[] day  = [365,80,70,60];\r\n  \r\n  \r\n\tfunction set(address p,uint256 _p) public {\r\n\t\trequire(msg.sender == pool);\r\n\t\tpool = p;\r\n        per = _p;\r\n\t}\r\n \r\n \tfunction deposit(uint256 pid,address upline ,uint256 amount) public   {\r\n        if(pid==0){ require(!level[msg.sender][0]);\r\n            amount=50e8;\r\n        }\r\n        else {\r\n        if(per>0)\r\n       \tIERC20(doge).transferFrom(msg.sender,pool,(amount*per)/100);\r\n\t\tIERC20(doge).transferFrom(msg.sender,owner(),(amount*(100-per))/100);\r\n        }\r\n        require(amount>=min[pid]);\r\n        require(amount<=max[pid]);\r\n\r\n        if(pid==1){ require(level[msg.sender][0]);}\r\n        if(pid==2){ require(level[msg.sender][1]);}\r\n        if(pid==3){ require(level[msg.sender][2]);}\r\n        level[msg.sender][pid] = true;\r\n\r\n        countdeposit++;\r\n \t\tdeposits.push(Deposit({\r\n \t\t  sp:upline,\r\n          pid:pid,\r\n          addr:msg.sender,\r\n          amount:amount,\r\n          time:block.timestamp,\r\n          end:block.timestamp+day[pid]*86400\r\n \t\t}));\r\n \t}\r\n \r\n \tfunction withdraw(uint256 amount) public {\r\n        require( level[msg.sender][1],\"Need deposit minimum 100 to withdraw\");\r\n        withdraws.push(Withdraw({\r\n          addr:msg.sender,\r\n          amount:amount,\r\n          time:block.timestamp\r\n         }\r\n         ));\r\n        countwithdraw++;\r\n    }\r\n\r\n\r\n\r\n    function unstake(uint256 _pid) public{  \r\n         Deposit storage  dp = deposits[_pid];\r\n         require(dp.end<=block.timestamp);\r\n         countunstake++;\r\n         unstakes.push(Unstake({\r\n \t\t  pid:_pid,\r\n          addr:msg.sender,\r\n          time:block.timestamp\r\n \t\t}));\r\n     \r\n        \r\n    }\r\n\r\n     //clear BNB inside contract from unknow sender\r\n     function clearBNB() external onlyOwner{\r\n        uint256 ib = address(this).balance;\r\n         payable(msg.sender).transfer(ib);\r\n    }\r\n    \r\n\r\n }", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"clearBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countdeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countunstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countwithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"level\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"p\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_p\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unstakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdraws\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DOGE123", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9ff96b178da006b550d2747205a3884f7611a8bb2d9ae69dc753fbc090c98869"}