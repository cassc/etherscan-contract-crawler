{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// https://minibridge.chaineye.tools\r\npragma solidity 0.8.19;\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external;\r\n    function approve(address spender, uint256 amount) external;\r\n    function transferFrom(address sender, address recipient, uint256 amount) external;\r\n}\r\ncontract MiniBridge_Helper{\r\n    address payable constant BRIDGE = payable(0x00000000000007736e2F9aA5630B8c812E1F3fc9);\r\n    event MiniBridge_Request(address token, bool trusted, address from, uint256 to, uint256 amount);\r\n    // This event is not trusted for ERC20 tokens, Bridge should check ERC20.Transfer event frist\r\n\r\n    function transferETH(uint256 to) external payable{\r\n        // This is used to transfer from a contract to Bridge\r\n        (bool success, )=BRIDGE.call{value:msg.value}('');\r\n        require(success, \"transfer failed\");\r\n        emit MiniBridge_Request(address(0), true, msg.sender, to, msg.value);\r\n    }\r\n    function transferERC20(IERC20 token, uint256 to, uint256 amount) external {\r\n        // This is used by a contract to transfer ERC20 token to Bridge\r\n        // Caller need to approve token first\r\n        uint256 balance_before = token.balanceOf(BRIDGE);\r\n        token.transferFrom(msg.sender, BRIDGE, amount);\r\n        amount = token.balanceOf(BRIDGE) - balance_before;\r\n        emit MiniBridge_Request(address(token), true, msg.sender, to, amount);\r\n    }\r\n    function logTransferERC20(address token, uint256 to, uint256 amount) external {\r\n        // This is used by a contract to emit the bridge request\r\n        // Caller need to transfer the token normally and call this function in the same tx\r\n        // Bridge will search for this event and then validate via searching the ERC20 Transfer event\r\n        // This do not require approve, but requires the caller supporting multiple calls in one tx\r\n        emit MiniBridge_Request(token, false, msg.sender, to, amount);\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"trusted\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MiniBridge_Request\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"logTransferERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"transferETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "MiniBridge_Helper", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://620c4d83cf8c28ef9da398f98e7ff4ae2d82035d4d83179ec65287e4c8a9538a"}