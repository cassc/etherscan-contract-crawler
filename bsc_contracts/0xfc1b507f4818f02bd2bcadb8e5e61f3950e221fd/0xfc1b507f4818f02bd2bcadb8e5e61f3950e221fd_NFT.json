{"SourceCode": "pragma solidity ^0.6.0;\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\n    library SafeMath {//konwnsec//IERC20 \u63a5\u53e3\r\n        function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            if (a == 0) {\r\n                return 0; \r\n            }\r\n            uint256 c = a * b;\r\n            assert(c / a == b);\r\n            return c; \r\n        }\r\n        function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b > 0); // Solidity automatically throws when dividing by 0\r\n            uint256 c = a / b;\r\n        assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n            return c; \r\n        }\r\n        function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            assert(b <= a);\r\n            return a - b; \r\n        }\r\n\r\n        function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            uint256 c = a + b;\r\n            assert(c >= a);\r\n            return c; \r\n        }\r\n    }\r\n\r\n\r\n    interface IERC165 {\r\n\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n \r\n\r\ninterface IERC1155 is IERC165 {\r\n  \r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n   \r\n    event TransferBatch(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256[] ids,\r\n        uint256[] values\r\n    );\r\n\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata amounts,\r\n        bytes calldata data\r\n    ) external;\r\nfunction mintBatch2(\r\n        address[] memory accounts,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts\r\n    ) external;\r\nfunction mint(\r\n        address account,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) external;\r\n}\r\n\r\n    interface Erc20Token {//konwnsec//ERC20 \u63a5\u53e3\r\n        function totalSupply() external view returns (uint256);\r\n        function balanceOf(address _who) external view returns (uint256);\r\n        function transfer(address _to, uint256 _value) external;\r\n        function allowance(address _owner, address _spender) external view returns (uint256);\r\n        function transferFrom(address _from, address _to, uint256 _value) external;\r\n        function approve(address _spender, uint256 _value) external; \r\n        function burnFrom(address _from, uint256 _value) external; \r\n        event Transfer(address indexed from, address indexed to, uint256 value);\r\n        event Approval(address indexed owner, address indexed spender, uint256 value);\r\n        \r\n\r\n    }\r\n    \r\n \r\n// \u57fa\u7c7b\u5408\u7ea6\r\n    contract Base {\r\n        using SafeMath for uint;\r\n        Erc20Token   public USDT    = Erc20Token(0x55d398326f99059fF775485246999027B3197955);\r\n        IERC1155     public NFT     = IERC1155  (0xF567681527CF371D78e2FBA81c2d60aAD560732c);\r\n\r\n        address public _owner;\r\n \r\n        modifier onlyOwner() {\r\n            require(msg.sender == _owner, \"Permission denied\"); _;\r\n        }\r\n    \r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        _owner = newOwner;\r\n    }\r\n\r\n    receive() external payable {}  \r\n}\r\n  \r\ncontract NFT  is Base{\r\n\r\n    mapping(uint256 => uint256) public  IDToNFT;\r\n\r\n    function AddBankCard(uint256 ID) public  {\r\n    }\r\n\r\n    function AddEditShippingAddress(uint256 ID) public  {\r\n    }\r\n\r\n    function Placeanorderfortheproduct(uint256 ID,uint256   FID) public  {\r\n        NFT.safeTransferFrom(address(msg.sender), address(1),IDToNFT[ID],1,\"0x00\");\r\n    }\r\n\r\n    function setPrice(uint256 tokenID,uint256 NFTID) public  onlyOwner{\r\n        IDToNFT[tokenID] = NFTID;\r\n    }\r\n\r\n    constructor()\r\n    public {\r\n        _owner = 0x94fD3817270F368D563D477B917F5769eABbBd97; \r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ID\",\"type\":\"uint256\"}],\"name\":\"AddBankCard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ID\",\"type\":\"uint256\"}],\"name\":\"AddEditShippingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"IDToNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NFT\",\"outputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"FID\",\"type\":\"uint256\"}],\"name\":\"Placeanorderfortheproduct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract Erc20Token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"NFTID\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "NFT", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://39aa706681320380036a23017a62ea0db3ddcf745c66095416d04b96ff1a0767"}