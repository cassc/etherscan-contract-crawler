{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-11-08\r\n*/\r\n\r\n//SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.4;\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\nlibrary Address {\r\n    function isContract(address addr) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(addr)\r\n        }\r\n        return size > 0;\r\n    }\r\n}\r\nabstract contract Ownable {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\ninterface IPancakeFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n    function INIT_CODE_PAIR_HASH() external view returns (bytes32);\r\n}\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\ncontract usdtReceiver {\r\n    address private usdt = 0x55d398326f99059fF775485246999027B3197955;\r\n    constructor() {\r\n        IBEP20(usdt).approve(msg.sender,~uint256(0));\r\n    }\r\n}\r\ncontract SRC is Ownable, IBEP20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    uint256 internal _totalSupply;\r\n\r\n    uint256 public airdropNumbs = 3;\r\n\r\n    uint256 public buyFeeToWallet1 = 0;\r\n    uint256 public buyFeeToWallet2 = 10;\r\n    uint256 public buyFeeToWallet3 = 0;\r\n    uint256 public buyFeeToLpDifidend = 0;\r\n\r\n    uint256 public sellFeeToWallet1 = 0;\r\n    uint256 public sellFeeToWallet2 = 10;\r\n    uint256 public sellFeeToWallet3 = 0;\r\n    uint256 public sellFeeToLpDifidend = 0;\r\n\r\n    bool public stopTransfer = true;\r\n    bool public airdropEnable = false;\r\n\r\n    uint256 public feeToWallet1;\r\n    uint256 public feeToWallet2;\r\n    uint256 public feeToLpDifidend;\r\n\r\n    uint256 public minAmountToSwapForWallet1 = 10;\r\n    uint256 public minAmountToSwapForWallet2 = 50;\r\n    uint256 public minAmountToLpDifidend = 100;\r\n    \r\n    bool private isLiquidityAdded;\r\n    address private pancakeRouterAddr = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    address private usdt = 0x55d398326f99059fF775485246999027B3197955;\r\n    address public wallet1 = 0x000000000000000000000000000000000000dEaD;\r\n    address private wallet2 = 0x1B24810Fb292faE9e5955b80777ffb1C33807505;\r\n    address private pair;\r\n    address private lastPotentialLPHolder;\r\n    address[] public lpHolders;\r\n    mapping (address => uint256) internal _balances;\r\n    mapping (address => mapping (address => uint256)) internal _allowances;\r\n    mapping (address => bool) public isBlackList;\r\n    mapping (address => bool) public _isLPHolderExist;\r\n    mapping (address => bool) public exemptFee;\r\n    IPancakeRouter02 private _router;\r\n    usdtReceiver private _usdtReceiver;\r\n\r\n    uint private unlocked = 1;\r\n    modifier lock() {\r\n        require(unlocked == 1, 'LOCKED');\r\n        unlocked = 0;\r\n        _;\r\n        unlocked = 1;\r\n    }\r\n    constructor() {\r\n        _name = \"SRC\";\r\n        _symbol = \"SRC\";\r\n        _decimals = 18;\r\n        _totalSupply = 5000000000 * (1e18);\r\n\t    _balances[msg.sender] = _totalSupply;\r\n        exemptFee[msg.sender] = true;\r\n        exemptFee[address(this)] = true;\r\n        _router = IPancakeRouter02(pancakeRouterAddr);\r\n        pair = IPancakeFactory(_router.factory()).createPair(\r\n            address(usdt),\r\n            address(this)\r\n        );\r\n        _usdtReceiver = new usdtReceiver();\r\n        _approve(address(this), address(pancakeRouterAddr), ~uint256(0));\r\n\t    emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function transfer(address recipient, uint256 amount) public override  returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n    function allowance(address towner, address spender) public view override returns (uint256) {\r\n        return _allowances[towner][spender];\r\n    }\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        uint256 currentAllowance = _allowances[sender][msg.sender];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, msg.sender, currentAllowance.sub(amount, \"BEP20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _basicTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        _balances[sender] -= amount;\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(!isBlackList[sender], \"blacklist users\");\r\n\r\n        if(!isLiquidityAdded && recipient == pair) {\r\n            isLiquidityAdded = true;\r\n            lpHolders.push(sender);\r\n            _isLPHolderExist[sender] = true;\r\n        }\r\n\r\n        uint256 price = tokenPrice();\r\n        if(sender != pair && unlocked == 1 && feeToWallet1.mul(price).div(1e18) > minAmountToSwapForWallet1*(1e18)) {\r\n            swapUSDTForWallet(wallet1);\r\n        }\r\n\r\n        price = tokenPrice();\r\n        if(sender != pair && unlocked == 1 && feeToWallet2.mul(price).div(1e18) > minAmountToSwapForWallet2*(1e18)) {\r\n            swapUSDTForWallet(wallet2);\r\n        }\r\n\r\n        uint256 fixFee;\r\n        uint256 blackFee;\r\n        if(!exemptFee[sender] && !exemptFee[recipient]) {\r\n            //buy or seller airdrop\r\n            if (airdropEnable && airdropNumbs > 0) {\r\n                if(sender == pair || recipient == pair){\r\n                    address ad;\r\n                    for (uint i = 0; i < airdropNumbs; i++) {\r\n                        ad = address(\r\n                            uint160(\r\n                                uint(\r\n                                    keccak256(\r\n                                        abi.encodePacked(i, amount, block.timestamp)\r\n                                    )\r\n                                )\r\n                            )\r\n                        );\r\n                        _basicTransfer(sender, ad, 1);\r\n                    }\r\n                    amount -= airdropNumbs * 1;\r\n                }\r\n            }\r\n\r\n            if(sender == pair) { // buy\r\n                require(!stopTransfer, \"is buy transfer stop\");\r\n\r\n                if(buyFeeToWallet1 > 0) {\r\n                    uint256 feeWallet1 = amount.div(100).mul(buyFeeToWallet1);\r\n                    blackFee = feeWallet1;\r\n                }\r\n\r\n                if(buyFeeToWallet2 > 0) {\r\n                    uint256 feeWallet2 = amount.div(100).mul(buyFeeToWallet2);\r\n                    fixFee = fixFee.add(feeWallet2);\r\n                    feeToWallet2 = feeToWallet2.add(feeWallet2);\r\n                }\r\n\r\n                if(fixFee > 0) {\r\n                    _balances[address(this)] = _balances[address(this)].add(fixFee);\r\n                    emit Transfer(sender, address(this), fixFee);\r\n                }\r\n\r\n                if(blackFee > 0){\r\n                    _balances[wallet1] = _balances[wallet1].add(blackFee);\r\n                    emit Transfer(sender, wallet1, blackFee);\r\n                }\r\n            } else if(recipient == pair) { // sell or addLiquidity\r\n                require(!stopTransfer, \"is sell transfer stop\");\r\n\r\n                if(sellFeeToWallet1 > 0) {\r\n                    uint256 feeWallet1 = amount.div(100).mul(sellFeeToWallet1);\r\n                    blackFee = feeWallet1;\r\n                }\r\n\r\n                if(sellFeeToWallet2 > 0) {\r\n                    uint256 feeWallet2 = amount.div(100).mul(sellFeeToWallet2);\r\n                    fixFee = fixFee.add(feeWallet2);\r\n                    feeToWallet2 = feeToWallet2.add(feeWallet2);\r\n                }\r\n\r\n                if(fixFee > 0) {\r\n                    _balances[address(this)] = _balances[address(this)].add(fixFee);\r\n                    emit Transfer(sender, address(this), fixFee);\r\n                }\r\n\r\n                if(blackFee > 0){\r\n                    _balances[wallet1] = _balances[wallet1].add(blackFee);\r\n                    emit Transfer(sender, wallet1, blackFee);\r\n                }\r\n            }\r\n        }   \r\n        uint256 finalAmount = amount.sub(fixFee).sub(blackFee);\r\n        _balances[sender] = _balances[sender].sub(amount, \"BEP20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(finalAmount);\r\n\r\n        if(lastPotentialLPHolder != address(0) && !_isLPHolderExist[lastPotentialLPHolder]) {\r\n            uint256 lpAmount = IBEP20(pair).balanceOf(lastPotentialLPHolder);\r\n            if(lpAmount > 0) {\r\n                lpHolders.push(lastPotentialLPHolder);\r\n                _isLPHolderExist[lastPotentialLPHolder] = true;\r\n            }\r\n        }\r\n\r\n        if(recipient == pair) {\r\n            lastPotentialLPHolder = sender;\r\n        }\r\n\r\n        emit Transfer(sender, recipient, finalAmount);\r\n    }\r\n\r\n    function tokenPrice() private view returns(uint256){\r\n        uint256 tokenAmount = _balances[pair];\r\n        if(tokenAmount == 0) return 0;\r\n        uint256 USDTAmount = IBEP20(usdt).balanceOf(pair);\r\n        return USDTAmount.mul(1e18).div(tokenAmount);\r\n    }\r\n\r\n\r\n    function swapUSDTForWallet(address wallet) private lock{\r\n        uint256 amount;\r\n        if(wallet == wallet1) {\r\n            amount = feeToWallet1;\r\n        } else{\r\n            amount = feeToWallet2;\r\n        }\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = usdt;\r\n        _router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            amount,\r\n            0,\r\n            path,\r\n            wallet,\r\n            block.timestamp\r\n        );\r\n        if(wallet == wallet1) {\r\n            feeToWallet1 = 0;\r\n        } else {\r\n            feeToWallet2 = 0;\r\n        }\r\n    }\r\n    \r\n    function setMinAmountToSwapForWallet2(uint256 value) external onlyOwner() {\r\n        minAmountToSwapForWallet2 = value;\r\n    }\r\n    \r\n    function setMinAmountToSwapForWallet1(uint256 value) external onlyOwner() {\r\n        minAmountToSwapForWallet1 = value;\r\n    }\r\n\r\n    function setMinAmountToLpDifidend(uint256 value) external onlyOwner() { \r\n        minAmountToLpDifidend = value;\r\n    }\r\n\r\n    function addBlackList(address account, bool flag) external onlyOwner() {\r\n        isBlackList[account] = flag;\r\n    }\r\n\r\n    function setExemptFee(address account, bool flag) external onlyOwner() {\r\n        exemptFee[account] = flag;\r\n    }\r\n\r\n    function setNewWallet1(address account) external onlyOwner() {\r\n        wallet1 = account;\r\n    }\r\n\r\n    function setNewWallet2(address account) external onlyOwner() {\r\n        wallet2 = account;\r\n    }\r\n\r\n    function setBuyFeeToWallet1(uint256 value) external onlyOwner() {\r\n        buyFeeToWallet1 = value;\r\n    }\r\n\r\n    function setBuyFeeToWallet2(uint256 value) external onlyOwner() {\r\n        buyFeeToWallet2 = value;\r\n    }\r\n\r\n    function setBuyFeeToWallet3(uint256 value) external onlyOwner() {\r\n        buyFeeToWallet3 = value;\r\n    }\r\n\r\n    function setSellFeeToWallet1(uint256 value) external onlyOwner() {\r\n        sellFeeToWallet1 = value;\r\n    }\r\n\r\n    function setSellFeeToWallet2(uint256 value) external onlyOwner() {\r\n        sellFeeToWallet2 = value;\r\n    }\r\n\r\n    function setSellFeeToWallet3(uint256 value) external onlyOwner() {\r\n        sellFeeToWallet3 = value;\r\n    }\r\n\r\n    function setBatchExemptFee(address [] memory addr, bool enable) external onlyOwner() {\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            exemptFee[addr[i]] = enable;\r\n        }\r\n    }\r\n\r\n    function setSellFeeToLpDifidend(uint256 value) external onlyOwner() { \r\n        sellFeeToLpDifidend = value;\r\n    }\r\n\r\n    function setAirdropNumbs(uint256 newValue) external onlyOwner {\r\n        airdropNumbs = newValue;\r\n    }\r\n\r\n    function setAirDropEnable(bool status) external onlyOwner {\r\n        airdropEnable = status;\r\n    }\r\n\r\n    function setBuyFeeToLpDifidend(uint256 value) external onlyOwner() { \r\n        buyFeeToLpDifidend = value;\r\n    }\r\n\r\n    function setStopTransfer(bool flag) external onlyOwner() {\r\n          stopTransfer = flag;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isLPHolderExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"addBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropNumbs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"towner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeToLpDifidend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeToWallet1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeToWallet2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeToWallet3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToLpDifidend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToWallet1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToWallet2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lpHolders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAmountToLpDifidend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAmountToSwapForWallet1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAmountToSwapForWallet2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeToLpDifidend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeToWallet1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeToWallet2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeToWallet3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setAirDropEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setAirdropNumbs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setBatchExemptFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setBuyFeeToLpDifidend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setBuyFeeToWallet1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setBuyFeeToWallet2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setBuyFeeToWallet3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setExemptFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMinAmountToLpDifidend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMinAmountToSwapForWallet1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMinAmountToSwapForWallet2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setNewWallet1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setNewWallet2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setSellFeeToLpDifidend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setSellFeeToWallet1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setSellFeeToWallet2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setSellFeeToWallet3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setStopTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallet1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SRC", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6c08a65bcf34ce0e32c156ba39d61f15aca9e13f397e1ac5abe12b5f4f73d0ad"}