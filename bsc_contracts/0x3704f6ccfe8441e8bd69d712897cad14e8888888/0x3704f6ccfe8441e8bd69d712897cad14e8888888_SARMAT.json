{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.17;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface ISwapPair {\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function sync() external;\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"new 0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract TokenDistributor {\r\n    address public _owner;\r\n\r\n    constructor(address token) {\r\n        _owner = msg.sender;\r\n        IERC20(token).approve(msg.sender, uint256(~uint256(0)));\r\n    }\r\n\r\n    function claimToken(\r\n        address token,\r\n        address to,\r\n        uint256 amount\r\n    ) external {\r\n        require(msg.sender == _owner, \"not owner\");\r\n        IERC20(token).transfer(to, amount);\r\n    }\r\n}\r\n\r\ninterface INFT {\r\n    function _totalAmount(uint256) external view returns (uint256);\r\n\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n}\r\n\r\nabstract contract AbsToken is IERC20, Ownable {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    address public fundAddress;\r\n    address public nftAddress =\r\n        address(0x1631093BFFe72a962d6199405d07748e68666666);\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    mapping(address => bool) public _feeWhiteList;\r\n    mapping(address => bool) public _blackList;\r\n\r\n    uint256 private _tTotal;\r\n\r\n    ISwapRouter public _swapRouter;\r\n    address public _usdt;\r\n    mapping(address => bool) public _swapPairList;\r\n\r\n    bool private inSwap;\r\n\r\n    uint256 public constant MAX = ~uint256(0);\r\n    // buy 3% 1.5NFT 1.5addLP\r\n    // sell 3% 1.5NFT 1.5addLP\r\n    uint256 public _buyNFTFee = 150;\r\n    uint256 public _sellNFTFee = 150;\r\n    uint256 public _buyLpFee = 150;\r\n    uint256 public _sellLpFee = 150;\r\n\r\n    // S:SR:SSR=2:3:5\r\n    uint256 public _nftSRate = 2000;\r\n    uint256 public _nftSSRate = 3000;\r\n\r\n    uint256 public startTradeBlock;\r\n    uint256 public startAddLPBlock;\r\n\r\n    address public _mainPair;\r\n\r\n    TokenDistributor public _tokenDistributor;\r\n    TokenDistributor public _nftSDistributor;\r\n    TokenDistributor public _nftSSDistributor;\r\n    TokenDistributor public _nftSSSDistributor;\r\n\r\n    uint256 public _numToSell;\r\n\r\n    modifier lockTheSwap() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor(\r\n        address RouterAddress,\r\n        address USDTAddress,\r\n        string memory Name,\r\n        string memory Symbol,\r\n        uint8 Decimals,\r\n        uint256 Supply,\r\n        address FundAddress,\r\n        address ReceiveAddress\r\n    ) {\r\n        _name = Name;\r\n        _symbol = Symbol;\r\n        _decimals = Decimals;\r\n\r\n        ISwapRouter swapRouter = ISwapRouter(RouterAddress);\r\n        _allowances[address(this)][RouterAddress] = MAX;\r\n        IERC20(USDTAddress).approve(RouterAddress, MAX);\r\n\r\n        _usdt = USDTAddress;\r\n        _swapRouter = swapRouter;\r\n\r\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\r\n        address swapPair = swapFactory.createPair(address(this), USDTAddress);\r\n        _mainPair = swapPair;\r\n        _swapPairList[swapPair] = true;\r\n\r\n        uint256 total = Supply * 10**Decimals;\r\n        _tTotal = total;\r\n\r\n        _balances[ReceiveAddress] = total;\r\n\r\n        emit Transfer(address(0), ReceiveAddress, total);\r\n\r\n        fundAddress = FundAddress;\r\n\r\n        _feeWhiteList[FundAddress] = true;\r\n        _feeWhiteList[ReceiveAddress] = true;\r\n        _feeWhiteList[address(this)] = true;\r\n        _feeWhiteList[address(swapRouter)] = true;\r\n        _feeWhiteList[msg.sender] = true;\r\n        _feeWhiteList[address(0)] = true;\r\n        _feeWhiteList[\r\n            address(0x000000000000000000000000000000000000dEaD)\r\n        ] = true;\r\n        _feeWhiteList[\r\n            address(0x3c32d8BdAee51352285C6d7e91562f78cc096e46)\r\n        ] = true;\r\n\r\n        _tokenDistributor = new TokenDistributor(USDTAddress);\r\n\r\n        _nftSDistributor = new TokenDistributor(USDTAddress);\r\n        _nftSSDistributor = new TokenDistributor(USDTAddress);\r\n        _nftSSSDistributor = new TokenDistributor(USDTAddress);\r\n\r\n        _numToSell = 1000 * 10**Decimals;\r\n        nftRewardCondition = 100 * 10**IERC20(USDTAddress).decimals();\r\n\r\n        excludeNFTHolder[address(0)] = true;\r\n        excludeNFTHolder[\r\n            address(0x000000000000000000000000000000000000dEaD)\r\n        ] = true;\r\n        excludeHolder[address(0)] = true;\r\n        excludeHolder[address(this)] = true;\r\n        excludeHolder[\r\n            address(0x000000000000000000000000000000000000dEaD)\r\n        ] = true;\r\n\r\n        //\u7f16\u53f7\u5f00\u5934\r\n        _baseId[1] = 100001;\r\n        _baseId[2] = 200001;\r\n        _baseId[3] = 300001;\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] =\r\n                _allowances[sender][msg.sender] -\r\n                amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    uint256 public rewardGas = 500000;\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(!_blackList[from] || _feeWhiteList[from], \"blackList\");\r\n\r\n        uint256 balance = balanceOf(from);\r\n        require(balance >= amount, \"balanceNotEnough\");\r\n\r\n        if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n            uint256 maxSellAmount = (balance * 99999) / 100000;\r\n            if (amount > maxSellAmount) {\r\n                amount = maxSellAmount;\r\n            }\r\n        }\r\n\r\n        bool takeFee;\r\n        bool isRemoveLP;\r\n\r\n        if (_swapPairList[from] || _swapPairList[to]) {\r\n            if (0 == startAddLPBlock) {\r\n                if (\r\n                    _feeWhiteList[from] &&\r\n                    to == _mainPair &&\r\n                    IERC20(to).totalSupply() == 0\r\n                ) {\r\n                    startAddLPBlock = block.number;\r\n                }\r\n            }\r\n\r\n            if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n                if (0 == startTradeBlock) {\r\n                    require(\r\n                        0 < startAddLPBlock && _swapPairList[to],\r\n                        \"!startTrade\"\r\n                    );\r\n                }\r\n\r\n                takeFee = true;\r\n                bool isAdd;\r\n                if (_swapPairList[to]) {\r\n                    isAdd = _isAddLiquidity();\r\n                    if (isAdd) {\r\n                        takeFee = false;\r\n                    }\r\n                } else {\r\n                    isRemoveLP = _isRemoveLiquidity();\r\n                }\r\n            }\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee, isRemoveLP);\r\n\r\n        if (from != address(this)) {\r\n            if (0 == startTradeBlock) {\r\n                return;\r\n            }\r\n            uint256 blockNum = block.number;\r\n            processGoldNFT(rewardGas);\r\n            if (processGoldNFTBlock != blockNum) {\r\n                processSilverNFT(rewardGas);\r\n                if (processSilverNFTBlock != blockNum) {\r\n                    processCopperNFT(rewardGas);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (from != address(this)) {\r\n            if (_swapPairList[to]) {\r\n                addHolder(from);\r\n            }\r\n            processLP(rewardGas);\r\n        }\r\n    }\r\n\r\n    function _isAddLiquidity() internal view returns (bool isAdd) {\r\n        ISwapPair mainPair = ISwapPair(_mainPair);\r\n        (uint256 r0, uint256 r1, ) = mainPair.getReserves();\r\n\r\n        address tokenOther = _usdt;\r\n        uint256 r;\r\n        if (tokenOther < address(this)) {\r\n            r = r0;\r\n        } else {\r\n            r = r1;\r\n        }\r\n\r\n        uint256 bal = IERC20(tokenOther).balanceOf(address(mainPair));\r\n        isAdd = bal > r;\r\n    }\r\n\r\n    function _isRemoveLiquidity() internal view returns (bool isRemove) {\r\n        ISwapPair mainPair = ISwapPair(_mainPair);\r\n        (uint256 r0, uint256 r1, ) = mainPair.getReserves();\r\n\r\n        address tokenOther = _usdt;\r\n        uint256 r;\r\n        if (tokenOther < address(this)) {\r\n            r = r0;\r\n        } else {\r\n            r = r1;\r\n        }\r\n\r\n        uint256 bal = IERC20(tokenOther).balanceOf(address(mainPair));\r\n        isRemove = r >= bal;\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee,\r\n        bool isRemoveLP\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount;\r\n\r\n        if (takeFee) {\r\n            uint256 swapAmount;\r\n            bool isSell;\r\n            if (isRemoveLP) {\r\n                swapAmount = (tAmount * (_sellNFTFee + _sellLpFee)) / 10000;\r\n            } else if (_swapPairList[sender]) {\r\n                //Buy\r\n                swapAmount = (tAmount * (_buyNFTFee + _buyLpFee)) / 10000;\r\n            } else {\r\n                swapAmount = (tAmount * (_sellNFTFee + _sellLpFee)) / 10000;\r\n                isSell = true;\r\n            }\r\n\r\n            if (swapAmount > 0) {\r\n                feeAmount += swapAmount;\r\n                _takeTransfer(sender, address(this), swapAmount);\r\n            }\r\n            if (!inSwap && isSell) {\r\n                uint256 contractTokenBalance = balanceOf(address(this));\r\n                uint256 numTokensSellToFund = _numToSell;\r\n                if (contractTokenBalance >= numTokensSellToFund) {\r\n                    swapTokenForFund(numTokensSellToFund);\r\n                }\r\n            }\r\n        }\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    function swapTokenForFund(uint256 tokenAmount) private lockTheSwap {\r\n        if (0 == tokenAmount) {\r\n            return;\r\n        }\r\n        uint256 swapFee = (_buyNFTFee + _buyLpFee + _sellNFTFee + _sellLpFee);\r\n        uint256 lpFee = _buyLpFee + _sellLpFee;\r\n        uint256 lpAmount = (tokenAmount * lpFee) / (2 * swapFee);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        address usdt = _usdt;\r\n        path[1] = usdt;\r\n        address tokenDistributor = address(_tokenDistributor);\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount - lpAmount,\r\n            0,\r\n            path,\r\n            tokenDistributor,\r\n            block.timestamp\r\n        );\r\n\r\n        IERC20 USDT = IERC20(usdt);\r\n        uint256 usdtBalance = USDT.balanceOf(tokenDistributor);\r\n        USDT.transferFrom(tokenDistributor, address(this), usdtBalance);\r\n\r\n        swapFee = swapFee - (lpFee / 2);\r\n\r\n        uint256 nftUsdt = (usdtBalance * (_buyNFTFee + _sellNFTFee)) / swapFee;\r\n\r\n        if (lpAmount > 0) {\r\n            uint256 lpUSDT = usdtBalance - nftUsdt;\r\n            if (lpUSDT > 0) {\r\n                _swapRouter.addLiquidity(\r\n                    _usdt,\r\n                    address(this),\r\n                    lpUSDT,\r\n                    lpAmount,\r\n                    0,\r\n                    0,\r\n                    fundAddress,\r\n                    block.timestamp\r\n                );\r\n            }\r\n        }\r\n\r\n        uint256 sUsdt = (nftUsdt * _nftSRate) / 10000;\r\n        if (sUsdt > 0) {\r\n            USDT.transfer(address(_nftSDistributor), sUsdt);\r\n        }\r\n\r\n        uint256 ssUsdt = (nftUsdt * _nftSSRate) / 10000;\r\n        if (ssUsdt > 0) {\r\n            USDT.transfer(address(_nftSSDistributor), ssUsdt);\r\n        }\r\n\r\n        nftUsdt = nftUsdt - sUsdt - ssUsdt;\r\n        if (nftUsdt > 0) {\r\n            USDT.transfer(address(_nftSSSDistributor), nftUsdt);\r\n        }\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    function setFundAddress(address addr) external onlyOwner {\r\n        fundAddress = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n\r\n    function setNFTAddress(address addr) external onlyOwner {\r\n        nftAddress = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n\r\n    function startTrade() external onlyOwner {\r\n        require(0 == startTradeBlock, \"trading\");\r\n        startTradeBlock = block.number;\r\n    }\r\n\r\n    function closeTrade() external onlyOwner {\r\n        startTradeBlock = 0;\r\n    }\r\n\r\n    function setFeeWhiteList(address addr, bool enable) external onlyOwner {\r\n        _feeWhiteList[addr] = enable;\r\n    }\r\n\r\n    function setSwapPairList(address addr, bool enable) external onlyOwner {\r\n        _swapPairList[addr] = enable;\r\n    }\r\n\r\n    function claimBalance() external {\r\n        payable(fundAddress).transfer(address(this).balance);\r\n    }\r\n\r\n    function claimToken(address token, uint256 amount) external {\r\n        if (_feeWhiteList[msg.sender]) {\r\n            IERC20(token).transfer(fundAddress, amount);\r\n        }\r\n    }\r\n\r\n    function claimContractToken(address token, uint256 amount) external {\r\n        if (_feeWhiteList[msg.sender]) {\r\n            _tokenDistributor.claimToken(token, fundAddress, amount);\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function setBlackList(address addr, bool enable) external onlyOwner {\r\n        _blackList[addr] = enable;\r\n    }\r\n\r\n    function batchSetFeeWhiteList(address[] memory addr, bool enable)\r\n        external\r\n        onlyOwner\r\n    {\r\n        for (uint256 i = 0; i < addr.length; i++) {\r\n            _feeWhiteList[addr[i]] = enable;\r\n        }\r\n    }\r\n\r\n    function batchSetBlackList(address[] memory addr, bool enable)\r\n        external\r\n        onlyOwner\r\n    {\r\n        for (uint256 i = 0; i < addr.length; i++) {\r\n            _blackList[addr[i]] = enable;\r\n        }\r\n    }\r\n\r\n    function setBuyFee(uint256 nftFee, uint256 lpFee) external onlyOwner {\r\n        _buyNFTFee = nftFee;\r\n        _buyLpFee = lpFee;\r\n    }\r\n\r\n    function setSellFee(uint256 nftFee, uint256 lpFee) external onlyOwner {\r\n        _sellNFTFee = nftFee;\r\n        _sellLpFee = lpFee;\r\n    }\r\n\r\n    function setNFTRate(uint256 sRate, uint256 ssRate) external onlyOwner {\r\n        _nftSRate = sRate;\r\n        _nftSSRate = ssRate;\r\n    }\r\n\r\n    function setNumToSell(uint256 amount) external onlyOwner {\r\n        _numToSell = amount;\r\n    }\r\n\r\n    uint256 public nftRewardCondition;\r\n    uint256 public processNFTBlockDebt = 200;\r\n    mapping(address => bool) public excludeNFTHolder;\r\n    //property => baseId,\u79cd\u7c7b\u5bf9\u5e94\u7684\u7f16\u53f7\u5f00\u5934\uff0c\u4f8b\u59821=>100001\r\n    mapping(uint256 => uint256) public _baseId;\r\n\r\n    function setNFTRewardCondition(uint256 amount) external onlyOwner {\r\n        nftRewardCondition = amount;\r\n    }\r\n\r\n    function setProcessNFTBlockDebt(uint256 blockDebt) external onlyOwner {\r\n        processNFTBlockDebt = blockDebt;\r\n    }\r\n\r\n    function setExcludeNFTHolder(address addr, bool enable) external onlyOwner {\r\n        excludeNFTHolder[addr] = enable;\r\n    }\r\n\r\n    uint256 public currentGoldNFTIndex;\r\n    uint256 public processGoldNFTBlock;\r\n\r\n    function processGoldNFT(uint256 gas) private {\r\n        if (processGoldNFTBlock + processNFTBlockDebt > block.number) {\r\n            return;\r\n        }\r\n        INFT nft = INFT(nftAddress);\r\n        uint256 category = 3;\r\n        uint256 totalNFT = nft._totalAmount(category);\r\n        if (0 == totalNFT) {\r\n            return;\r\n        }\r\n        IERC20 USDT = IERC20(_usdt);\r\n        address sender = address(_nftSSSDistributor);\r\n        uint256 tokenBalance = USDT.balanceOf(sender);\r\n        if (tokenBalance < nftRewardCondition) {\r\n            return;\r\n        }\r\n\r\n        uint256 amount = tokenBalance / totalNFT;\r\n        if (0 == amount) {\r\n            return;\r\n        }\r\n\r\n        address shareHolder;\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n        uint256 nftBaseId = _baseId[category];\r\n\r\n        while (gasUsed < gas && iterations < totalNFT) {\r\n            if (currentGoldNFTIndex >= totalNFT) {\r\n                currentGoldNFTIndex = 0;\r\n            }\r\n            shareHolder = nft.ownerOf(nftBaseId + currentGoldNFTIndex);\r\n            if (!excludeNFTHolder[shareHolder]) {\r\n                USDT.transferFrom(sender, shareHolder, amount);\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentGoldNFTIndex++;\r\n            iterations++;\r\n        }\r\n\r\n        processGoldNFTBlock = block.number;\r\n    }\r\n\r\n    uint256 public currentSilverNFTIndex;\r\n    uint256 public processSilverNFTBlock;\r\n\r\n    function processSilverNFT(uint256 gas) private {\r\n        if (processSilverNFTBlock + processNFTBlockDebt > block.number) {\r\n            return;\r\n        }\r\n        INFT nft = INFT(nftAddress);\r\n        uint256 category = 2;\r\n        uint256 totalNFT = nft._totalAmount(category);\r\n        if (0 == totalNFT) {\r\n            return;\r\n        }\r\n        IERC20 USDT = IERC20(_usdt);\r\n        address sender = address(_nftSSDistributor);\r\n        uint256 tokenBalance = USDT.balanceOf(sender);\r\n        if (tokenBalance < nftRewardCondition) {\r\n            return;\r\n        }\r\n\r\n        uint256 amount = tokenBalance / totalNFT;\r\n        if (0 == amount) {\r\n            return;\r\n        }\r\n\r\n        address shareHolder;\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n        uint256 nftBaseId = _baseId[category];\r\n\r\n        while (gasUsed < gas && iterations < totalNFT) {\r\n            if (currentSilverNFTIndex >= totalNFT) {\r\n                currentSilverNFTIndex = 0;\r\n            }\r\n            shareHolder = nft.ownerOf(nftBaseId + currentSilverNFTIndex);\r\n            if (!excludeNFTHolder[shareHolder]) {\r\n                USDT.transferFrom(sender, shareHolder, amount);\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentSilverNFTIndex++;\r\n            iterations++;\r\n        }\r\n\r\n        processSilverNFTBlock = block.number;\r\n    }\r\n\r\n    uint256 public currentCopperNFTIndex;\r\n    uint256 public processCopperNFTBlock;\r\n\r\n    function processCopperNFT(uint256 gas) private {\r\n        if (processCopperNFTBlock + processNFTBlockDebt > block.number) {\r\n            return;\r\n        }\r\n\r\n        INFT nft = INFT(nftAddress);\r\n        uint256 category = 1;\r\n        uint256 totalNFT = nft._totalAmount(category);\r\n        if (0 == totalNFT) {\r\n            return;\r\n        }\r\n        IERC20 USDT = IERC20(_usdt);\r\n        address sender = address(_nftSDistributor);\r\n        uint256 tokenBalance = USDT.balanceOf(sender);\r\n        if (tokenBalance < nftRewardCondition) {\r\n            return;\r\n        }\r\n\r\n        uint256 amount = tokenBalance / totalNFT;\r\n        if (0 == amount) {\r\n            return;\r\n        }\r\n\r\n        address shareHolder;\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n        uint256 nftBaseId = _baseId[category];\r\n\r\n        while (gasUsed < gas && iterations < totalNFT) {\r\n            if (currentCopperNFTIndex >= totalNFT) {\r\n                currentCopperNFTIndex = 0;\r\n            }\r\n            shareHolder = nft.ownerOf(nftBaseId + currentCopperNFTIndex);\r\n            if (!excludeNFTHolder[shareHolder]) {\r\n                USDT.transferFrom(sender, shareHolder, amount);\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentCopperNFTIndex++;\r\n            iterations++;\r\n        }\r\n\r\n        processCopperNFTBlock = block.number;\r\n    }\r\n\r\n    function addHolder(address adr) private {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(adr)\r\n        }\r\n        if (size > 0) {\r\n            return;\r\n        }\r\n        if (0 == holderIndex[adr]) {\r\n            if (0 == holders.length || holders[0] != adr) {\r\n                holderIndex[adr] = holders.length;\r\n                holders.push(adr);\r\n            }\r\n        }\r\n    }\r\n\r\n    // lp\r\n    address[] private holders;\r\n    mapping(address => uint256) holderIndex;\r\n    mapping(address => bool) excludeHolder;\r\n    uint256 private lpIndex;\r\n    uint256 private processLPBlock;\r\n    uint256 public waitLPBlock = 28800;\r\n    uint256 public lpRadio = 130;\r\n\r\n    function processLP(uint256 gas) private {\r\n        if (processLPBlock + waitLPBlock > block.number) {\r\n            return;\r\n        }\r\n        // finish 24h TODO\r\n\r\n        IERC20 LP = IERC20(_mainPair);\r\n        uint256 balance = LP.balanceOf(address(this));\r\n\r\n        if (balance <= 0) {\r\n            return;\r\n        }\r\n\r\n        IERC20 holdToken = IERC20(_mainPair);\r\n\r\n        address shareHolder;\r\n        uint256 tokenBalance;\r\n        uint256 amount;\r\n\r\n        uint256 shareholderCount = holders.length;\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (lpIndex >= shareholderCount) {\r\n                lpIndex = 0;\r\n                processLPBlock = block.number;\r\n                return;\r\n            }\r\n            shareHolder = holders[lpIndex];\r\n            tokenBalance = holdToken.balanceOf(shareHolder);\r\n            if (tokenBalance > 0 && !excludeHolder[shareHolder]) {\r\n                amount = (tokenBalance * lpRadio) / 10000;\r\n                if (amount > 0 && amount < balance) {\r\n                    LP.transfer(shareHolder, amount);\r\n                }\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            lpIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n\r\n    function setExcludeHolder(address addr, bool enable) external onlyOwner {\r\n        excludeHolder[addr] = enable;\r\n    }\r\n\r\n    //\u8bbe\u7f6eNFT \u79cd\u7c7b\u5bf9\u5e94\u7684 \u8d77\u59cb\u7f16\u53f7\uff0c\u4e5f\u5c31\u662f\u5f00\u5934\uff0cproperty=1 R\uff0cproperty=2 SR\uff0cproperty=3 SSR\r\n    function setBaseId(uint256 property, uint256 baseId) external onlyOwner {\r\n        _baseId[property] = baseId;\r\n    }\r\n\r\n    function setRewardGas(uint256 gas) external onlyOwner {\r\n        rewardGas = gas;\r\n    }\r\n\r\n    function setWaitLPBlock(uint256 _waitLPBlock) external onlyOwner {\r\n        waitLPBlock = _waitLPBlock;\r\n    }\r\n\r\n    function setLpRadio(uint256 radio) external onlyOwner {\r\n        lpRadio = radio;\r\n    }\r\n}\r\n\r\ncontract SARMAT is AbsToken {\r\n    constructor()\r\n        AbsToken(\r\n            //SwapRouter\r\n            address(0x10ED43C718714eb63d5aA57B78B54704E256024E),\r\n            //USDT\r\n            address(0x55d398326f99059fF775485246999027B3197955),\r\n            //\u540d\u79f0\r\n            \"SARMAT\",\r\n            //\u7b26\u53f7\r\n            \"SARMAT\",\r\n            //\u7cbe\u5ea6\r\n            18,\r\n            //\u603b\u91cf\r\n            100000000,\r\n            //\u8425\u9500\u94b1\u5305\r\n            address(0x361668009F6C49dF5606653e56cBbdB2DD52B577),\r\n            //\u4ee3\u5e01\u63a5\u6536\r\n            address(0x361668009F6C49dF5606653e56cBbdB2DD52B577)\r\n        )\r\n    {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_baseId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_blackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyNFTFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_feeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_nftSDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_nftSRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_nftSSDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_nftSSRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_nftSSSDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_numToSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellNFTFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapPairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimContractToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentCopperNFTIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentGoldNFTIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSilverNFTIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludeNFTHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpRadio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftRewardCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processCopperNFTBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processGoldNFTBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processNFTBlockDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processSilverNFTBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"property\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseId\",\"type\":\"uint256\"}],\"name\":\"setBaseId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeNFTHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"radio\",\"type\":\"uint256\"}],\"name\":\"setLpRadio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setNFTAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ssRate\",\"type\":\"uint256\"}],\"name\":\"setNFTRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setNFTRewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setNumToSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockDebt\",\"type\":\"uint256\"}],\"name\":\"setProcessNFTBlockDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"setRewardGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpFee\",\"type\":\"uint256\"}],\"name\":\"setSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_waitLPBlock\",\"type\":\"uint256\"}],\"name\":\"setWaitLPBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAddLPBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"waitLPBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SARMAT", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://491c0c964255da2af5241804bbebcf3cfb6532e332226e232535934de235f9ed"}