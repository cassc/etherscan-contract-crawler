{"SourceCode": "// SPDX-License-Identifier:MIT\r\npragma solidity 0.8.17;\r\n\r\nlibrary SafeMath {\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual{\r\n        require(msg.sender == 0xd5c50F6E36b4b2b838c3DD8Cc91065696b5fDb92,\"not owner\");\r\n        require(newOwner != address(0), \"new is 0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external ;\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n}\r\n\r\ncontract Bank is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    address public cake_usdtPair = 0xA39Af17CE4a8eb807E076805Da1e2B8EA7D0755b;\r\n    address public cakeAddress = 0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82;\r\n    address public usdtAddress = 0x55d398326f99059fF775485246999027B3197955;\r\n\r\n    address private nftShareAddress = 0x1Ff12E2Fc792e5f4F8E1433937A0F239Ec8885F1;\r\n    address private fundAddress = 0x0E2C35baBe5D90F766C3160Cf8EAD553e61291C9;\r\n    address private techAddress = 0xE6DFb0251f835b45b51a05c3993b9327b3b30c25;\r\n    address private receiveAddress = 0xfA0ea96D0547245BdE6Dad34adC9867B1bEaFd5D;\r\n    address private buyTokenAndAddLpAddress = 0xE1916Cb943676fdAa234AA774ec9E7f558cb8Ea6;\r\n\r\n    struct IcoParam {\r\n        mapping (uint256 => address) tokenToAddress;\r\n        mapping (uint256 => uint256) tokenToAddressNum;\r\n        uint256 tokenToAddressCount;\r\n    }\r\n\r\n    struct TokenToAddressParam{\r\n        uint256 perCent;\r\n        address tokenReceiver;\r\n    }\r\n\r\n    mapping (uint256 => IcoParam) public IcoParams;\r\n    mapping(address => mapping(address => uint256)) public _userDepositToken;\r\n    mapping(uint256 => bool) public limitAmount;\r\n\r\n    event userDepositEvent(address indexed sender, uint256 indexed time,uint256 num0,uint256 num1,address tokenAddress);\r\n    event JoinLaunchpad(address indexed addr, uint256 indexed time,uint256  num); //\u8fdb\u884cICO\u7684\u5730\u5740\uff0c\u65f6\u95f4\uff0c\u4ee5\u53ca\u8d2d\u4e70\u6240\u7528usdt\u7684\u6570\u91cf\r\n    event userClaimBankEvent(address indexed addr,uint256 indexed amount,address indexed tokenAddr ,uint256  time);\r\n    event claimTokenEvent(address indexed to,uint256 amount,address rewardAddress,uint256 time);\r\n\r\n    constructor () {\r\n        IcoParam storage ip = IcoParams[0];\r\n        ip.tokenToAddressCount = 4; \r\n        ip.tokenToAddressNum[0] = 2;\r\n        ip.tokenToAddress[0] =  nftShareAddress; //nft\r\n        ip.tokenToAddressNum[1] = 1;\r\n        ip.tokenToAddress[1] =  techAddress; //\u6280\u672f\r\n        ip.tokenToAddressNum[2] = 2;\r\n        ip.tokenToAddress[2] =  fundAddress; //fund\r\n        ip.tokenToAddressNum[3] = 2;\r\n        ip.tokenToAddress[3] =  buyTokenAndAddLpAddress; //Lp\r\n\r\n        limitAmount[100 * 10**18] = true;\r\n        limitAmount[500 * 10**18] = true;\r\n        limitAmount[1000 * 10**18] = true;\r\n        limitAmount[3000 * 10**18] = true;\r\n        limitAmount[5000 * 10**18] = true;\r\n        limitAmount[10000 * 10**18] = true;\r\n    }\r\n\r\n    function changeLimitAmount(uint256 _amount,bool _bool) public onlyOwner{\r\n        limitAmount[_amount] = _bool;\r\n    }\r\n\r\n    function setBuyTokenAndAddLpAddress(address _addr) public onlyOwner{\r\n        buyTokenAndAddLpAddress = _addr;\r\n    }\r\n\r\n    function setIndexParam(address[] memory _tokenToAddress,uint256[] memory _tokenToAddressNum) public  onlyOwner(){\r\n        IcoParam storage ip = IcoParams[0];\r\n        ip.tokenToAddressCount = _tokenToAddress.length;\r\n\r\n        for(uint256 i = 0; i<_tokenToAddress.length;i++){\r\n                ip.tokenToAddressNum[i] = _tokenToAddressNum[i];\r\n                ip.tokenToAddress[i] = _tokenToAddress[i];\r\n        }\r\n    }\r\n\r\n    function getCakePrice() public view returns(uint256,uint256){\r\n        return (IERC20(usdtAddress).balanceOf(cake_usdtPair),IERC20(cakeAddress).balanceOf(cake_usdtPair));\r\n    }\r\n\r\n    function userDepositCake(uint256 usdtAmount) public{\r\n        address tokenAddr = cakeAddress;\r\n        require(limitAmount[usdtAmount],\"have limitAmount\");\r\n        \r\n        (uint256 usdtAmountInPair,uint256 cakeAmountInPair) = getCakePrice();\r\n        uint256 cakeAmount = usdtAmount.mul(cakeAmountInPair).div(usdtAmountInPair); //\u7b49\u503c\u4e8e\u5145\u503c\u8fdb\u6765usdt\u6570\u91cf\u7684cake\r\n        uint256 fee = cakeAmount.mul(7).div(100);\r\n\r\n        IcoParam storage ip = IcoParams[0];\r\n        uint256 approved = IERC20(tokenAddr).allowance(msg.sender,address(this));\r\n        require(approved >= cakeAmount.add(fee),\"insufficient authorization limit amount!\");\r\n        _userDepositToken[tokenAddr][msg.sender] =  _userDepositToken[tokenAddr][msg.sender].add(cakeAmount);\r\n\r\n        IERC20(tokenAddr).transferFrom(msg.sender,receiveAddress,cakeAmount);\r\n\r\n        for(uint256 i;i<ip.tokenToAddressCount;i++){\r\n            IERC20(tokenAddr).transferFrom(msg.sender,ip.tokenToAddress[i],fee.mul(ip.tokenToAddressNum[i]).div(7));\r\n        }\r\n\r\n        emit userDepositEvent(msg.sender,block.timestamp,usdtAmount,cakeAmount,cakeAddress);\r\n    }\r\n\r\n    function userDepositUsdt(uint256 usdtAmount) public{\r\n        address tokenAddr = usdtAddress;\r\n        require(limitAmount[usdtAmount],\"have limitAmount\");\r\n        \r\n        uint256 fee = usdtAmount.mul(7).div(100);\r\n\r\n        IcoParam storage ip = IcoParams[0];\r\n        uint256 approved = IERC20(tokenAddr).allowance(msg.sender,address(this));\r\n        require(approved >= usdtAmount.add(fee),\"insufficient authorization limit amount!\");\r\n        _userDepositToken[tokenAddr][msg.sender] =  _userDepositToken[tokenAddr][msg.sender].add(usdtAmount);\r\n\r\n        IERC20(tokenAddr).transferFrom(msg.sender,receiveAddress,usdtAmount);\r\n\r\n        for(uint256 i;i<ip.tokenToAddressCount;i++){\r\n            IERC20(tokenAddr).transferFrom(msg.sender,ip.tokenToAddress[i],fee.mul(ip.tokenToAddressNum[i]).div(7));\r\n        }\r\n\r\n        emit userDepositEvent(msg.sender,block.timestamp,usdtAmount,0,usdtAddress);\r\n    }\r\n\r\n    function setUserToken(address[] memory _users,uint256[] memory _amount,address _rewardAddress ) public onlyOwner(){\r\n        require(_users.length > 0,\"null list!\");\r\n        require(_amount.length > 0,\"null list!\");\r\n        require(_rewardAddress != address(0),\"address(0)\");\r\n        for(uint256 i = 0; i<_users.length;i++){\r\n            _userDepositToken[_rewardAddress][_users[i]] =  (_amount[i]);\r\n        }\r\n    }\r\n\r\n    function withdrawETH() public onlyOwner{\r\n        (bool _bool,) = payable(msg.sender).call{value:address(this).balance}(\"\");\r\n        require(_bool,\"withdrawETH failed\");\r\n    }\r\n\r\n    function claimToken(address _to,uint256 _amount,address _rewardAddress) public onlyOwner(){\r\n        IERC20(_rewardAddress).transfer(_to,_amount);\r\n\r\n        emit claimTokenEvent(_to,_amount,_rewardAddress,block.timestamp);    \r\n    }\r\n\r\n    function multiClaimToken(address[] memory _to,uint256[] memory _amount,address _rewardAddress) public onlyOwner(){\r\n        IcoParam storage ip = IcoParams[0];\r\n        for(uint256 i;i<_to.length;i++){\r\n            uint256 fee = _amount[i].mul(7).div(100);\r\n            IERC20(_rewardAddress).transfer(_to[i],_amount[i].sub(fee));\r\n\r\n            for(uint256 y;y<ip.tokenToAddressCount;y++){\r\n                IERC20(_rewardAddress).transfer(ip.tokenToAddress[y],fee.mul(ip.tokenToAddressNum[y]).div(7));\r\n            }\r\n            emit claimTokenEvent(_to[i],_amount[i],_rewardAddress,block.timestamp);    \r\n        }\r\n    }\r\n\r\n    receive() external payable{}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"JoinLaunchpad\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"claimTokenEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"userClaimBankEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"num0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"num1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"userDepositEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"IcoParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenToAddressCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_userDepositToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cakeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cake_usdtPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"changeLimitAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rewardAddress\",\"type\":\"address\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCakePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"limitAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_rewardAddress\",\"type\":\"address\"}],\"name\":\"multiClaimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setBuyTokenAndAddLpAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokenToAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenToAddressNum\",\"type\":\"uint256[]\"}],\"name\":\"setIndexParam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_rewardAddress\",\"type\":\"address\"}],\"name\":\"setUserToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"userDepositCake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"userDepositUsdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Bank", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f2623914c46c11aa4b544ebe8a629806dc570306c6e93bc97c10a07f6accbf88"}