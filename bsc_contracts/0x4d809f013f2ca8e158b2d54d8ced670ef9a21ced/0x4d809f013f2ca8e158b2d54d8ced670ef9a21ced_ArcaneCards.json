{"SourceCode": "{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.15;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn\\u0027t rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\\u0027t, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"ArcaneCards.sol\":{\"content\":\"/**\\n * Develop by CPTRedHawk\\n * @ Esse contrato Foi desenvolvido por https://t.me/redhawknfts\\n * Caso queira ter uma plataforma similar, gentileza chamar no Telegram!\\n * SPDX-License-Identifier: MIT\\n * Entrega teu caminho ao senhor, e tudo ele o far\u00e1! Salmos 37\\n */\\npragma solidity ^0.8.15;\\n\\nimport \\\"./interfaceIBEP20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./interfaceIUniswapV2Factory.sol\\\";\\nimport \\\"./interfaceIUniswapV2Pair.sol\\\";\\nimport \\\"./interfaceIUniswapV2Router01.sol\\\";\\nimport \\\"./interfaceIUniswapV2Router02.sol\\\";\\n\\ncontract ArcaneCards is IBEP20, Ownable  {\\n    using SafeMath for uint256;\\n    using Address for address;\\n    /*\\n    ---------------------------------\\n    -       Endere\u00e7os               -\\n    ---------------------------------\\n    */\\n    address public burnAddress; // Endre\u00e7o de Burn\\n    address private addressDistribute; // Distribuidor de Taxas\\n    IUniswapV2Router02 public  uniswapV2Router; // Endere\u00e7o Router\\n    address public  uniswapV2Pair; // Par ARC/BNB\\n    /*\\n    ---------------------------------\\n    -         Modifier              -\\n    ---------------------------------\\n    */\\n    modifier lockTheSwap {\\n        inSwapAndLiquify = true;\\n        _;\\n        inSwapAndLiquify = false;\\n    }\\n    modifier blackList {\\n        blackUser = true;\\n        _;\\n        blackUser = false;\\n    }\\n    modifier lockCoolDown {\\n        coolDownUser = true;\\n        _;\\n        coolDownUser = false;\\n    }\\n    modifier activeAntiSniper {\\n        stopSniper = true;\\n        _;\\n        stopSniper = false;\\n    }\\n    /*\\n    ---------------------------------\\n    -       Mapeamento              -\\n    ---------------------------------\\n    */\\n    mapping (address =\\u003e uint256) private _balance; // Saldo do Usuario\\n    mapping (address =\\u003e mapping(address =\\u003e uint256)) private _allowances; // Subsidio\\n    mapping (address =\\u003e bool) public isExcludedFromFee; // True n\u00e3o paga Taxa\\n    mapping (address =\\u003e bool) public isTimelockExempt; // Nao tem Tempo de Espero\\n    mapping (address =\\u003e bool) public automatedMarketMakerPairs; // Armazena o Pair\\n    mapping (address =\\u003e bool) public _isBlackListAddress; // Adiciona na Lista Negra\\n    mapping (address =\\u003e uint) public cooldownTimerBuy; // Tempo de Compra\\n    mapping (address =\\u003e uint) public cooldownTimerSell; // Tempo de Venda\\n    /*\\n    ---------------------------------\\n    -       Booleano                -\\n    ---------------------------------\\n    */\\n    bool private inSwapAndLiquify;\\n    bool private coolDownUser;\\n    bool private stopSniper;\\n    bool public stateSniper;\\n    bool private blackUser;\\n    bool public tradingOpen;\\n    bool public launchPhase = true;\\n    bool private swapAndLiquifyEnabled = true;\\n    bool private blackEnabled = true;\\n    bool public buyCooldownEnabled = true;\\n    bool public sellCooldownEnabled = true;\\n    bool private stopMint = true;\\n    bool private isSendToken = true;\\n    /*\\n    ---------------------------------\\n    -       String                  -\\n    ---------------------------------\\n    */\\n    string private _name = \\\"Arcane Cards\\\";\\n    string private _symbol =  \\\"ARC\\\";\\n    /*\\n    ---------------------------------\\n    -       Numbers                 -\\n    ---------------------------------\\n    */\\n    uint256 public buyTax = 12; // Taxa de Compra\\n    uint256 public sellTax = 12; // Taxa de Venda\\n    uint256 private _previousBuyTax = buyTax; // Aramazena as Taxas de Compra\\n    uint256 private _previousSellTax = sellTax; // Aramazena as Taxas de Venda\\n    uint8 private _decimals = 18; //  Decimais\\n    uint8 public cooldownTimerInterval = 5; // Tempo de espera entre compra e venda\\n    uint8 public tBlockEnd = 40;\\n    uint256 private _decimalPlace = 10 ** _decimals; // Casas decimais 10 ** 18\\n    uint256 private _tTotal;\\n    uint256 private _maxTotalSupplyToken = 30000000 * _decimalPlace;\\n    uint256 public launchBlock;\\n    uint256 public maxSellLimit = 15000000 * 10 ** 18; // Controle a Quantidade de Tokens que podem ser Vendidos\\n    uint256 public maxBuyLimit = 15000000 * 10 ** 18; // Controle a Quantidade de Tokens que podem ser Vendidos\\n    uint256 public firstBuy = 15000000 * 10 ** 18; // Limita Primeira Compra\\n    uint256 public tokenLiquidityPercent = 10; // 10% Dos Tokens do Contrato vai para Liquidez\\n    uint256 public maxWalletBalance = 15000000 * 10 ** 18; // Limite de Wallet\\n    uint256 public numberOfTokensToSwapToLiquidity = 1000 * 10 ** 18; // Vende Tokens do ContratO\\n    /*\\n    ---------------------------------\\n    -       Construtor              -\\n    ---------------------------------\\n    */\\n    constructor (uint256 _fisrMint, address _addressDistribute) {\\n        // IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0xD99D1c33F9fC3444f8101754aBC46c52416550D1); // PancakeSwap Router Testnet\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E); // PancakeSwap Router Mainnet\\n        address pairCreated = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH()); // Gera o Par ARC/BNB\\n        uniswapV2Router = _uniswapV2Router; // Armazena Rota\\n        uniswapV2Pair = pairCreated; // Armazena Par\\n        addressDistribute = _addressDistribute; // Gera o Endere\u00e7o Distribuidor de Taxas\\n        _tTotal = _fisrMint * _decimalPlace; // Valor Pr\u00e9-Mintado\\n        _balance[owner()] = _tTotal; // Armazena Saldo de Mint para Owner\\n        isExcludedFromFee[owner()] = true; // Owner Livre de Taxas\\n        isExcludedFromFee[address(this)] = true; // Contrato Livre de Taxas\\n        isExcludedFromFee[addressDistribute] = true; // Distribuidor Livre de Taxas\\n        isTimelockExempt[owner()] = true; // Owner Nao tem tempo de espera para compra e venda\\n        isTimelockExempt[address(this)] = true; // Contrato Nao tem tempo de espera para compra e venda\\n        isTimelockExempt[addressDistribute] = true; // Distribuidor Nao tem tempo de espera para compra e venda\\n        burnAddress = address(0); // Define Burn Address\\n        _setAutomatedMarketMakerPair(pairCreated, true); // Pair \u00e9 o Automatizador de Transa\u00e7\u00f5es\\n        _approve(owner(), address(uniswapV2Router), ~uint256(0)); // Aprova Tokens para Add Liquidez\\n        emit Transfer(address(0), owner(), _tTotal); // Emite um Evento\\n    }\\n    /*\\n    ---------------------------------\\n    -         Eventos               -\\n    ---------------------------------\\n    */\\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiquidity);\\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\\n    event LiquidityAdded(uint256 tokenAmountSent, uint256 ethAmountSent, uint256 liquidity);\\n    event UpdatedBlackList(address indexed account, bool isExcluded);\\n    event SentBNB(address usr, uint256 amount);\\n    /*\\n    ---------------------------------\\n    -        receive                -\\n    ---------------------------------\\n    */\\n    receive() external payable {}\\n    /*\\n    ---------------------------------\\n    -         View                  -\\n    ---------------------------------\\n    */\\n    function name() public view override returns(string memory) { return _name; } // Nome do Token\\n    function symbol() public view override returns(string memory) { return _symbol; } // Simbolo do Token\\n    function decimals() public view override returns(uint8) { return _decimals; } // Decimais\\n    function totalSupply() public view override returns(uint256) { return _tTotal; } // Supply Total\\n    function balanceOf(address account) public view override returns(uint256) { return _balance[account]; } // Retorna o Saldo em Carteira\\n    function allowance(address owner, address spender) public view override returns(uint256) { return _allowances[owner][spender]; } // Subsidio Restante\\n    function maxTotalSupplyToken() public view returns(uint256) { return _maxTotalSupplyToken; } // Supply Maximo\\n    function viewBlock() public view returns(uint256) {\\n        uint256 currentBlock = block.number;\\n        uint256 sBlock = launchBlock.add(tBlockEnd);\\n        if(currentBlock \\u003e= sBlock) {\\n            return 0;\\n        }\\n        else {\\n            return sBlock.sub(currentBlock);\\n        }\\n    }\\n    function endBLockSniper() public view returns(uint256) {\\n        return launchBlock.add(tBlockEnd);\\n    }\\n    /*\\n    ---------------------------------\\n    -      Public/External          -\\n    ---------------------------------\\n    */\\n    function approve(address spender, uint256 amount) public override returns(bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n    function transfer(address to, uint256 amount) public override returns(bool) {\\n        _transfer(_msgSender(), to, amount);\\n        return true;\\n    }\\n    function transferFrom(address from, address to, uint256 amount) public override returns(bool) {\\n        _spendAllowance(from, _msgSender(), amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n    function increaseAllowance(address spender, uint256 addedValue) public returns(bool) {\\n        _approve(_msgSender(), spender, allowance(_msgSender(), spender) + addedValue);\\n        return true;\\n    }\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns(bool) {\\n        uint256 currentAllowance = allowance(_msgSender(), spender);\\n        require(currentAllowance \\u003e= subtractedValue, \\\"ARC: reducao do subsidio abaixo de zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        return true;\\n    }\\n    /*\\n    ---------------------------------\\n    -      Private/Internal         -\\n    ---------------------------------\\n    */\\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        require(owner != address(0), \\\"ARC:Owner nao pode ser Address 0\\\");\\n        require(spender != address(0), \\\"ARC:Owner nao pode ser Address 0\\\");\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if(currentAllowance != type(uint256).max) {\\n            require(currentAllowance \\u003e= amount, \\\"ARC: subsidio insuficiente\\\");\\n            _approve(owner, spender, currentAllowance - amount);\\n        }\\n    }\\n    function lockToBuyOrSellForTime(uint256 lastBuyOrSellTime, uint256 lockTime) private lockCoolDown returns (bool) {\\n        uint256 crashTime = lastBuyOrSellTime + lockTime;\\n        uint256 currentTime = block.timestamp;\\n        if(currentTime \\u003e= crashTime) {\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n    function getFromLastPurchaseBuy(address walletBuy) private view returns (uint) {\\n        return cooldownTimerBuy[walletBuy];\\n    }\\n    function getFromLastSell(address walletSell) private view returns (uint) {\\n        return cooldownTimerSell[walletSell];\\n    }\\n    function _beforeTokenTransfer( address from, address to, uint256 amount ) internal virtual {}\\n    function _afterTokenTransfer( address from, address to, uint256 amount ) internal virtual {}\\n    function _transfer(address from, address to, uint256 amount) internal {\\n        require(from != address(0), \\\"ARC:From nao pode ser Address 0\\\");\\n        require(amount \\u003e 0, \\\"ARC: Montante precisa ser maior do que 0\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balance[from];\\n        require(fromBalance \\u003e= amount,\\\"ARC: o valor da transferencia excede o saldo\\\" );\\n        _balance[from] = fromBalance - amount; \\n        \\n        if(!tradingOpen) {\\n            require(from == owner()); // Apenas Owner pode adicionar Liquidez\\n            openTrade(); // Libera o Trade para Todos\\n        }\\n\\n        if(blackEnabled \\u0026\\u0026 !blackUser) {\\n           require(!_isBlackFrom(from) \\u0026\\u0026 !_isBlackTo(to), \\\"ARC:Voce esta na Lista Negra\\\");\\n        }\\n\\n        uint256 contractTokenBalance = balanceOf(address(this));\\n        if (!automatedMarketMakerPairs[from] \\u0026\\u0026 automatedMarketMakerPairs[to]) {\\n            liquify( contractTokenBalance, from );\\n        }\\n\\n        \\n\\n        bool takeFee = true;\\n\\n        if(isExcludedFromFee[from] || isExcludedFromFee[to]){\\n            takeFee = false;\\n        }\\n\\n        if(!takeFee) removeAllFee(); // Remove todas as Taxa\\n            uint256 fees; // Define taxa de Transferencia do Pair[from] - Pair[to]\\n            \\n\\n            if(!automatedMarketMakerPairs[from] \\u0026\\u0026 !automatedMarketMakerPairs[to]) {\\n                fees = amount.mul(sellTax).div(100); // Define taxa de Venda\\n\\n                if (amount \\u003e maxSellLimit \\u0026\\u0026 !_isUnlimitedSender(from) \\u0026\\u0026 !_isUnlimitedRecipient(to)) {\\n                    revert(\\\"ARC: Montante de Venda nao pode ultrapassar limite\\\"); \\n                }\\n            }\\n\\n            if(automatedMarketMakerPairs[from]) {\\n                fees = amount.mul(buyTax).div(100); // Define taxa de Compra\\n\\n                if(buyCooldownEnabled \\u0026\\u0026 !isTimelockExempt[to] \\u0026\\u0026 !coolDownUser) {\\n                    require(lockToBuyOrSellForTime(getFromLastPurchaseBuy(to), cooldownTimerInterval), \\\"ARC:Por favor, aguarde o cooldown entre as compras\\\");\\n                    buyCoolDown(to);\\n                }\\n\\n                if (block.number \\u003e= launchBlock.add(tBlockEnd)) {\\n                    launchPhase = false; // Desativa o Anti-Sniper Automaticamente\\n                }   \\n                \\n                if(launchPhase \\u0026\\u0026 amount \\u003e firstBuy \\u0026\\u0026 !_isUnlimitedSender(from) \\u0026\\u0026 !_isUnlimitedRecipient(to)) {\\n                    revert(\\\"ARC: Montante de Compra nao pode ultrapassar limite\\\"); // Define o Valor de compra para o padr\u00e3o ap\u00f3s 1:30 Minutos\\n                }\\n\\n                if(!launchPhase \\u0026\\u0026 amount \\u003e maxBuyLimit \\u0026\\u0026 !_isUnlimitedSender(from) \\u0026\\u0026 !_isUnlimitedRecipient(to)) {\\n                    revert(\\\"ARC: Montante de Compra nao pode ultrapassar limite\\\"); // Define o Valor de compra para o padr\u00e3o ap\u00f3s 1:30 Minutos\\n                }\\n\\n            }\\n            else if(automatedMarketMakerPairs[to]) {\\n                fees = amount.mul(sellTax).div(100); // Define taxa de Compra\\n\\n\\n                if(sellCooldownEnabled \\u0026\\u0026 !isTimelockExempt[from] \\u0026\\u0026 !coolDownUser) {\\n                    require(lockToBuyOrSellForTime(getFromLastSell(from), cooldownTimerInterval), \\\"ARC:Por favor, aguarde o cooldown entre as vendas\\\");\\n                    sellCoolDown(from);\\n                }\\n\\n                if (amount \\u003e maxSellLimit \\u0026\\u0026 !_isUnlimitedSender(from) \\u0026\\u0026 !_isUnlimitedRecipient(to)) {\\n                    revert(\\\"ARC: Montante de Venda nao pode ultrapassar limite\\\"); \\n                }\\n\\n            }\\n\\n            if(maxWalletBalance \\u003e 0 \\u0026\\u0026 !_isUnlimitedSender(from) \\u0026\\u0026 !_isUnlimitedRecipient(to) \\u0026\\u0026 !automatedMarketMakerPairs[to]) {\\n                uint256 recipientBalance = balanceOf(to); // Define o Maximo por Wallet\\n                require(recipientBalance.add(amount) \\u003c= maxWalletBalance, \\\"ARC:Nao pode Ultrapassar o limite por Wallet\\\");\\n            }\\n\\n\\n            if(launchPhase \\u0026\\u0026 from != owner() \\u0026\\u0026 to != address(this) \\u0026\\u0026 to != owner() \\u0026\\u0026 automatedMarketMakerPairs[from] \\u0026\\u0026 !automatedMarketMakerPairs[to]) {\\n                \\n                if(!stopSniper) {\\n                    antiSniperBot();\\n                    bool isActive = stateSniper;\\n                    if(isActive) {\\n                       \\n                        if(launchBlock == block.number) {\\n                            require(block.number \\u003e launchBlock, \\\"ARC:Bad Bot\\\");\\n                        }\\n                        if(from == owner() || to == owner()) {\\n                            _balance[to] += amount;\\n                        }\\n                        else {\\n                            uint256 sniperFee = amount.mul(2).div(100);\\n                            _balance[to] += sniperFee; // Envia Saldo para To\\n                            stateSniper = false;\\n                        }\\n                    }\\n                }\\n            }\\n            else {\\n                if(fees != 0) {\\n                    amount = amount.sub(fees);\\n                    _balance[address(this)] += fees;\\n                    emit Transfer(from, address(this), fees); // Emite um Evento de Envio de Taxas\\n                }\\n                _balance[to] += amount; // Envia Saldo para To\\n            }\\n            \\n\\n   \\n            \\n            emit Transfer(from, to, amount); // Emite Evento de Envio de Amount\\n            _afterTokenTransfer(from, to, amount);\\n\\n        if(!takeFee) restoreAllFee(); // Retorna todas as Taxa\\n    } \\n    function antiSniperBot() private activeAntiSniper  {\\n        stateSniper = stopSniper; \\n    }\\n    function removeAllFee() private {\\n        if(buyTax == 0 || sellTax == 0) return;\\n        _previousBuyTax = buyTax; // Armazena Taxa Anterior\\n        _previousSellTax = sellTax; // Armazena Taxa Anterior\\n        buyTax = 0; // Taxa 0\\n        sellTax = 0; // Taxa 0\\n    }\\n    function restoreAllFee() private {\\n        buyTax = _previousBuyTax; // Restaura Taxas\\n        sellTax = _previousSellTax; // Restaura Taxas\\n    }  \\n    function liquify(uint256 contractTokenBalance, address sender) internal {\\n\\n        if (contractTokenBalance \\u003e= numberOfTokensToSwapToLiquidity) contractTokenBalance = numberOfTokensToSwapToLiquidity; // Define se a Quantidade de Tokens para\\n        \\n        bool isOverRequiredTokenBalance = ( contractTokenBalance \\u003e= numberOfTokensToSwapToLiquidity ); // Booleano\\n        \\n        if ( isOverRequiredTokenBalance \\u0026\\u0026 swapAndLiquifyEnabled \\u0026\\u0026 !inSwapAndLiquify \\u0026\\u0026 (!automatedMarketMakerPairs[sender]) ) {\\n            uint256 tokenLiquidity = contractTokenBalance.mul(tokenLiquidityPercent).div(100); // Quantidade de Tokens que vai para Liquidez\\n            uint256 toSwapBNB = contractTokenBalance.sub(tokenLiquidity); // Quantidade de Tokens para Venda\\n            _swapAndLiquify(tokenLiquidity); // Adiciona Liquidez\\n            _sendBNBToContract(toSwapBNB); // Troca Tokens por BNB\\n        }\\n\\n    }\\n    function _swapAndLiquify(uint256 amount) private lockTheSwap {\\n        uint256 half = amount.div(2); // Divide para Adicionar Liquidez\\n        uint256 otherHalf = amount.sub(half); // Divide para Adicionar Liquidez\\n        uint256 initialBalance = address(this).balance; // Armazena o Saldo Inicial em BNB\\n        _swapTokensForEth(half); // Efetua a troca de Token por BNB\\n        uint256 newBalance = address(this).balance.sub(initialBalance); // Saldo atual em BNB - Saldo Antigo\\n        _addLiquidity(otherHalf, newBalance); // Adiciona Liquidez\\n        emit SwapAndLiquify(half, newBalance, otherHalf); // Emite Evento de Swap\\n    }\\n    function _sendBNBToContract(uint256 tAmount) private lockTheSwap {\\n        _swapTokensForEth(tAmount); // Vende os Tokens por BNB e envia para o Contrato\\n        \\n        if(isSendToken) {\\n            uint256 bAmount = address(this).balance;\\n            if(bAmount \\u003e 0) {\\n                (bool sent, ) = addressDistribute.call{value: address(this).balance}(\\\"\\\");\\n                if(sent) {\\n                    emit SentBNB(addressDistribute, bAmount);\\n                    bAmount = 0;\\n                }\\n            }\\n        }\\n    }\\n    function _swapTokensForEth(uint256 tokenAmount) private {\\n        address[] memory path = new address[](2); // Path Memory para inicia a venda dos Tokens\\n        path[0] = address(this); // Endere\u00e7o do Contrato\\n        path[1] = uniswapV2Router.WETH(); // Par de Troca (BNB)\\n        _approve(address(this), address(uniswapV2Router), tokenAmount); // Aprova os Tokens para Troca\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount, // Saldo para Swap\\n            0, // Amount BNB\\n            path, // Path [address(this), uniswapV2Router.WETH()]\\n            address(this), // Endere\u00e7o de Taxa\\n            block.timestamp // Timestamp\\n        );\\n    }\\n    function _addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\n        (uint256 tokenAmountSent, uint256 ethAmountSent, uint256 liquidity) = uniswapV2Router.addLiquidityETH{value: ethAmount}(\\n            address(this),\\n            tokenAmount, // Saldo para Liquidez\\n            0, // Slippage 0\\n            0, // Slippage 0\\n            owner(), // Owner Adiciona Liquidez\\n            block.timestamp // Timestamp\\n        );\\n        emit LiquidityAdded(tokenAmountSent, ethAmountSent, liquidity); // Emite Evento de Liquidez\\n    }\\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\\n        require(automatedMarketMakerPairs[pair] != value, \\\"ARC: O par de AutomatedMarketMakerPair ja esta definido para esse valor\\\");\\n        automatedMarketMakerPairs[pair] = value; // Booleano\\n        emit SetAutomatedMarketMakerPair(pair, value); // Emite um Evento para um Novo Automatizador de Trocas\\n    }\\n    function _setRouterAddress(address router) private {\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(router); // PancakeSwap Router Testnet\\n        address pairCreated = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH()); // Gera o Par ARC/BNB\\n        uniswapV2Router = _uniswapV2Router; // Armazena Rota\\n        uniswapV2Pair = pairCreated; // Armazena Par\\n        _setAutomatedMarketMakerPair(uniswapV2Pair, true); // Armazena o novo Par como o Automatizador de Trocas\\n    }\\n    function _isBlackFrom(address from) private blackList returns(bool) {\\n       return _isBlackListAddress[from]; // Verifica se From esta na Blacklist\\n    }\\n    function _isBlackTo(address to) private blackList returns(bool) {\\n       return _isBlackListAddress[to]; // Verifica se To esta na Blacklist\\n    }\\n    function buyCoolDown(address to) private lockCoolDown {\\n        cooldownTimerBuy[to] = block.timestamp; // Ativa o Tempo de Compra\\n    }\\n    function sellCoolDown(address from) private lockCoolDown  {\\n        cooldownTimerSell[from] = block.timestamp; // Ativa o Tempo de Venda\\n    }\\n    function _isUnlimitedSender(address account) internal view returns(bool){\\n        return (account == owner()); // nao tem limites\\n    }\\n    function _isUnlimitedRecipient(address account) internal view returns(bool){\\n        return (account == owner() || account == burnAddress || account == addressDistribute); //  nao tem limites\\n    }\\n    function _mint(address account, uint256 amount) private {\\n        require(account != address(0), \\\"ARC: nao pode ser Address 0\\\");\\n        _beforeTokenTransfer(address(0), account, amount);\\n        _balance[account] += amount; // Adiciona os Tokens em uma Carteira\\n        emit Transfer(address(0), account, amount); // Emite um Evento\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n    function openTrade() private {\\n        tradingOpen = true;\\n        launchBlock = block.number;\\n    }\\n    /*\\n    ---------------------------------\\n    -        External/Admin         -\\n    ---------------------------------\\n    */\\n    function mint(address account, uint256 tAmount) external onlyOwner {\\n        require(stopMint, \\\"ARC: Mint Encerrado, Limite de 30M Atingido\\\");\\n        require(tAmount \\u003e 0, \\\"ARC:Amount nao pode ser Zero\\\");\\n        _tTotal = _tTotal.add(tAmount); // Aumenta Supply\\n        _mint(account, tAmount);\\n        if(_maxTotalSupplyToken.sub(_tTotal) == 0) {\\n            stopMint = false; // N\u00e3o pode Mintar mais do que 30M\\n        }\\n        if (_tTotal \\u003e _maxTotalSupplyToken) {\\n            revert(\\\"ARC:Limite Atingido\\\");\\n        }\\n    }\\n    function setExcludedAddress(address account, bool isVerify) external onlyOwner {\\n        isExcludedFromFee[account] = isVerify; // Define se est\u00e1 nas Taxas ou n\u00e3o\\n    }\\n    function setIsSwap(bool isTrue) external onlyOwner {\\n        swapAndLiquifyEnabled = isTrue; // Ativa e Desativa o Swap\\n        emit SwapAndLiquifyEnabledUpdated(swapAndLiquifyEnabled); // Emite Evento de Swap Ativo/Inativo\\n    }\\n    function setSwapAmount(uint256 tAmount) external onlyOwner {\\n        numberOfTokensToSwapToLiquidity = tAmount * 10 ** 18; // Define a quantidade de Tokens que o Contrato vai Vender\\n    }\\n    function setAutomatedMarketMakerPair(address pair, bool value) external onlyOwner {\\n        require(pair != uniswapV2Pair, \\\"ARC:uniswapV2Pair nao pode ser removido de AutomatedMarketMakerPair\\\");\\n        _setAutomatedMarketMakerPair(pair, value); // Define um Novo Automatizador de Trocas\\n    }\\n    function setWalletMarketing(address _addressDistribute) external onlyOwner {\\n        addressDistribute = _addressDistribute; // Define Endere\u00e7o de Taxas\\n    }\\n    function setRouter(address router) external onlyOwner {\\n        _setRouterAddress(router); // Define uma Nova Rota (Caso Pancakeswap migre para a RouterV3 e adiante)\\n    }\\n    function setTaxFee(uint256 _buyTax, uint256 _sellTax) external onlyOwner {\\n        buyTax = _buyTax; // Taxa de Compra\\n        sellTax = _sellTax; // Taxa de Venda\\n    }\\n    function setLimitsContract(uint256 _maxBuyLimit, uint256 _firstBuy, uint256 _maxSellLimit, uint256 _maxWalletBalance, uint256 _tokenLiquidityPercent) external onlyOwner {\\n        maxBuyLimit = _maxBuyLimit * 10**18; // Limite de Compra\\n        firstBuy = _firstBuy * 10**18; // Limite Primeira Compra\\n        maxSellLimit = _maxSellLimit * 10**18; // Limite de Venda\\n        maxWalletBalance = _maxWalletBalance * 10**18; // Limite por Wallet\\n        tokenLiquidityPercent = _tokenLiquidityPercent; // Tokens para Liquidez\\n    }\\n    function emergencialWithdrawFromContractBNB(address payable recipient) external onlyOwner {\\n        uint256 amount = address(this).balance; \\n        if(amount \\u003e 0) {\\n            (bool sent, ) = recipient.call{value: amount}(\\\"\\\");\\n            if(sent) {\\n                emit SentBNB(addressDistribute, amount);\\n            }\\n            amount = 0;\\n        }\\n    }\\n    function updateBlackList(address account, bool state) external onlyOwner {\\n        _isBlackListAddress[account] = state; // Adiciona ou Remove da Blacklist\\n        emit UpdatedBlackList(account, state); // Emite Evento de BlackList\\n    }\\n    function setEnableBlackAndSniper(bool _blackEnabled) external onlyOwner {\\n        blackEnabled = _blackEnabled; // Ativa Blacklist\\n    }\\n    function setActiveCoolDown(bool _buyCooldownEnabled, bool _sellCooldownEnabled, uint8 _cooldownTimerInterval) external onlyOwner {\\n        buyCooldownEnabled = _buyCooldownEnabled; // Ativa e Desativa Cooldown Buy\\n        sellCooldownEnabled = _sellCooldownEnabled; // Ativa e Desativa Cooldown Sell\\n        cooldownTimerInterval = _cooldownTimerInterval; // Define Segundos entre Compra e Venda\\n    }\\n    function setDeactiveSniperBot(bool _launchPhase) external onlyOwner {\\n        require(launchPhase, \\\"ARC:Anti-Bot ja esta desativado\\\");\\n        launchPhase = _launchPhase; // Desativa o Anti-Bot, s\u00f3 funciona nos 30 Primeiros bloco ap\u00f3s p lan\u00e7amento\\n    }\\n    function setBlockSniper(uint8 _tBlockEnd) external onlyOwner {\\n        tBlockEnd = _tBlockEnd; // Tempo Final Anti Bot\\n    }\\n    function initTrade(bool _tradingOpen) external onlyOwner {\\n        tradingOpen = _tradingOpen; // Inicia o Trade do Contrato\\n    }\\n    function activeSendDividends(bool _isSendToken) external onlyOwner {\\n        isSendToken = _isSendToken;\\n    }\\n    function burn(uint256 bAmount) external onlyOwner {\\n        _transfer(_msgSender(), burnAddress, bAmount);\\n    }\\n    function withdrawArcane(uint256 rAmount) external onlyOwner {\\n        _transfer(address(this), _msgSender(), rAmount);\\n    }\\n}\\n\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.15;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"interfaceIBEP20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.15;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IBEP20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the token decimals.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the token symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token name.\\n     */\\n    function name() external view returns (string memory);\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address _owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"interfaceIUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.15;\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\"},\"interfaceIUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.15;\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function balanceOf(address owner) external view returns (uint);\\n\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n\\n    function transfer(address to, uint value) external returns (bool);\\n\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n\\n    function price0CumulativeLast() external view returns (uint);\\n\\n    function price1CumulativeLast() external view returns (uint);\\n\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\"},\"interfaceIUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.15;\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\"},\"interfaceIUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.15;\\nimport \\\"./interfaceIUniswapV2Router01.sol\\\";\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.15;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler\\u0027s built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c \\u003c a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b \\u003e a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n            // benefit is lost if \\u0027b\\u0027 is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b \\u003c= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b \\u003e 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b \\u003e 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fisrMint\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_addressDistribute\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmountSent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmountSent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SentBNB\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"UpdatedBlackList\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isBlackListAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isSendToken\",\"type\":\"bool\"}],\"name\":\"activeSendDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyCooldownEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cooldownTimerBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldownTimerInterval\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cooldownTimerSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"emergencialWithdrawFromContractBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endBLockSniper\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_tradingOpen\",\"type\":\"bool\"}],\"name\":\"initTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTimelockExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchPhase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTotalSupplyToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfTokensToSwapToLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellCooldownEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_buyCooldownEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_sellCooldownEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"_cooldownTimerInterval\",\"type\":\"uint8\"}],\"name\":\"setActiveCoolDown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_tBlockEnd\",\"type\":\"uint8\"}],\"name\":\"setBlockSniper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_launchPhase\",\"type\":\"bool\"}],\"name\":\"setDeactiveSniperBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_blackEnabled\",\"type\":\"bool\"}],\"name\":\"setEnableBlackAndSniper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isVerify\",\"type\":\"bool\"}],\"name\":\"setExcludedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isTrue\",\"type\":\"bool\"}],\"name\":\"setIsSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxBuyLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_firstBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSellLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxWalletBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenLiquidityPercent\",\"type\":\"uint256\"}],\"name\":\"setLimitsContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"setSwapAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellTax\",\"type\":\"uint256\"}],\"name\":\"setTaxFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressDistribute\",\"type\":\"address\"}],\"name\":\"setWalletMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stateSniper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tBlockEnd\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenLiquidityPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"updateBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawArcane\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ArcaneCards", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000e04de00000000000000000000000003cbb829fbcc66623d7def13c718155d7b0b3f09c", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://683d60a3b43600e414a996ce284e13a459aa2739261a12e0b6f37bb9bdf44111"}