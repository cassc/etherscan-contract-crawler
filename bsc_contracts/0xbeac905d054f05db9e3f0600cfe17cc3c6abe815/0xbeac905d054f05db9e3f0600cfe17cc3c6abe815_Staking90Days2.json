{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`.\\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\\n        // This gives `2**k < a <= 2**(k+1)` \u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1;\\n        uint256 x = a;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = sqrt(a);\\n        if (rounding == Rounding.Up && result * result < a) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Staking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/*\\nMaturation Days \u2013 the number of days that must elapse after a deposit before an investor can unstake without penalty (e.g., 90 days) \\nStarting Burn Rate \u2013 the initial burn rate, which will decrease over time until Maturation (defaults to 20%) \\nReward Rate \u2013 a multiplier applied to the staking amount, used to calculate the reward tokens due to an investor at Maturation \\n*/\\n\\ncontract Staking is Ownable {\\n    address public immutable token; // Address of the token to be used for the stake\\n    uint256 public deploymentDate; // Date contract was deployed and activated\\n    uint256 public maturationPeriod; // The period of time (in seconds) that must elapse before an investor can unstake without penalty\\n    uint256 public maturationDate; // The date of maturation, after which investors can unstake without penalty\\n    uint32 public immutable stakingFeeRate; // A percentage of the staking amount that is charged as a fee\\n    uint32 public immutable startingBurnRate; // The initial burn rate percentage, which will decrease over time until maturation\\n    uint32 public immutable rewardRate; // The percentage of the staking amount due to an investor if they stake for the entire maturation period    uint32 public immutable stakingFeeRate; // A percentage of the staking amount that is charged as a fee\\n\\n    uint32 constant PRECISION = 1000; // Precision for percentage calculations\\n    uint32 constant DAY = 86_400; // Seconds in a day\\n\\n    event StakeDeposited(\\n        address indexed staker, // Address of the investor who deposited the stake\\n        uint256 stakeIndex, // Index of the stake that was deposited\\n        uint256 amount, // Net amount of stake tokens deposited after fees\\n        uint256 feesCharged // Fees charged\\n    );\\n\\n    event StakeWithdrawn(\\n        address indexed staker, // Address of the investor who withdrew the stake\\n        uint256 stakeIndex, // Index of the stake that was withdrawn\\n        uint256 stakeWithdrawn, // Amount of stake tokens withdrawn\\n        uint256 stakeBurnt // Amount of stake tokens burnt\\n    );\\n\\n    event StakeRefunded(\\n        address indexed staker, // Address of the investor who withdrew the stake\\n        uint256 stakeIndex, // Index of the stake that was withdrawn\\n        uint256 stakeRefunded // Amount of stake tokens refunded\\n    );\\n\\n    event RewardClaimed(\\n        address indexed staker, // Address of the investor who claimed the reward\\n        uint256 stakeIndex, // Index of the stake for which rewards were claimed\\n        uint256 amount // Amount of reward tokens claimed\\n    );\\n    \\n    struct Stake {\\n        uint256 amount; // Amount staked\\n        uint256 reward; // Total reward due at maturation\\n        address staker; // Address that made the stake\\n        uint256 startDate; // Date the stake was made\\n        uint256 dateWithdrawn; // Date the stake was withdrawn (0 if not withdrawn)\\n        uint256 totalRewardClaimed; // Total reward claimed so far\\n        uint256 stakeBurnt; // Total amount burnt on premature withdrawal\\n        uint256 stakingFee; // Amount of staking fee paid\\n    }\\n\\n    // Mapping of investor address to array of stakes. Each investor can have multiple stakes.\\n    mapping (address => Stake[]) internal stakes;\\n    \\n    // Array of all investor addresses\\n    address[] investors;\\n\\n    /*\\n    * @notice Constructor\\n    * @param token Address of the token to be used for the stake\\n    * @param maturationDays Number of days that must elapse after a deposit before an investor can unstake without penalty\\n    * @param startingBurnRate The initial burn rate, which will decrease over time until maturation. Precision 1000 (e.g., 2% = 2_000, 100% = 100_000)\\n    * @param rewardRate A multiplier applied to the staking amount, used to calculate the reward tokens due to an investor at maturation. Precision 1000 (e.g., 2% = 2_000, 100% = 100_000)\\n    */\\n    constructor(\\n        address token_,\\n        uint32 maturationDays_,\\n        uint32 startingBurnRate_,\\n        uint32 rewardRate_,\\n        uint32 stakingFeeRate_\\n    ) {\\n        require(startingBurnRate_ <= PRECISION * 100, \\\"Starting burn rate cannot be more than 100%\\\");\\n        require(stakingFeeRate_ <= PRECISION * 100, \\\"Staking fee rate cannot be more than 100%\\\");\\n        require(maturationDays_ > 0, \\\"Maturation days must be greater than 0\\\");\\n\\n        token = token_;\\n\\n        // Maturation date is now + maturationDays\\n        maturationPeriod = maturationDays_ * DAY;\\n        deploymentDate = block.timestamp;\\n        maturationDate = deploymentDate + maturationPeriod;\\n\\n        startingBurnRate = startingBurnRate_;\\n        rewardRate = rewardRate_;\\n        stakingFeeRate = stakingFeeRate_;\\n    }\\n\\n    /*\\n    * @notice Get the caller's stake by index\\n    * @param index Index of the stake\\n    * @return Stake struct\\n    */\\n    function getStake(uint256 index) public view returns (Stake memory) {\\n        require(getInvestorStakeCount(msg.sender) > index, \\\"Stake does not exist\\\");\\n        Stake memory stake = stakes[address(msg.sender)][index];\\n        return stake;\\n    }\\n\\n    /*\\n    * @notice Get the stake of an investor by index\\n    * @param investor Address of the investor\\n    * @param index Index of the stake\\n    * @return Stake struct\\n    */\\n    function getInvestorStake(address investor, uint256 index) public view returns (Stake memory) {\\n        Stake memory stake = stakes[investor][index];\\n        require(stake.startDate > 0, \\\"Stake does not exist\\\");\\n        return stake;\\n    }\\n\\n    /*\\n    * @notice Get the number of stakes deposited by the caller\\n    * @return Number of stakes\\n    */\\n    function getStakeCount() public view returns (uint256) {\\n        return stakes[address(msg.sender)].length;\\n    }\\n\\n    /*\\n    * @notice Get the number of stakes deposited by an investor\\n    * @param investor Address of the investor\\n    * @return Number of stakes\\n    */\\n    function getInvestorStakeCount(address investor) public view returns (uint256) {\\n        return stakes[investor].length;\\n    }\\n\\n    /*\\n    * @notice Get the number of investors\\n    * @return Number of investors\\n    */\\n    function getInvestorCount() public view returns (uint256) {\\n        return investors.length;\\n    }\\n\\n    /*\\n    * @notice Get an investor's address by index\\n    * @param index Index of the investor\\n    * @return Address of the investor\\n    */\\n    function getInvestor(uint256 index) public view returns (address) {\\n        return investors[index];\\n    }\\n\\n    /*\\n    * @notice Deposit a stake. The stake will be added to the caller's stakes array. It will include a maturation date which is the current date + maturationDays\\n    * @param amount Amount to stake\\n    */\\n    function depositStake(uint256 amount) public {\\n\\n        // If the maturation date has passed, revert\\n        require(maturationDate > block.timestamp, \\\"Staking period has ended\\\");\\n\\n        // Check that amount is not zero\\n        require(amount > 0, \\\"Amount must be greater than zero\\\");\\n\\n        // Deduct the staking fee\\n        uint256 fee = Math.mulDiv(amount, stakingFeeRate, PRECISION * 100, Math.Rounding.Zero);\\n        uint256 netStakeAmount = amount - fee;\\n     \\n        // Calculate reward\\n        // Time since deployment. The reward rate decreases linearly as this value increases\\n        uint256 timeToMaturation = maturationDate - block.timestamp;\\n\\n        uint256 maxReward = Math.mulDiv(netStakeAmount, rewardRate, PRECISION * 100, Math.Rounding.Zero);\\n        uint256 reward = Math.mulDiv(maxReward, timeToMaturation, maturationPeriod, Math.Rounding.Zero);\\n\\n        Stake memory stake = Stake(netStakeAmount, reward, address(msg.sender), block.timestamp, 0, 0, 0, fee);\\n\\n        // Add the investor to the investors array if they are not already in it\\n        if (stakes[address(msg.sender)].length == 0) {\\n            investors.push(address(msg.sender));\\n        }\\n        // Add the new Stake to the stakes array\\n        stakes[address(msg.sender)].push(stake);\\n\\n        // Transfer the amount from the staker to the contract\\n        IERC20(token).transferFrom(address(msg.sender), address(this), netStakeAmount);\\n\\n        // Transfer the fee to the owner address\\n        IERC20(token).transferFrom(address(msg.sender), owner(), fee);\\n\\n        // Emit the StakeDeposited event\\n        emit StakeDeposited(address(msg.sender), stakes[address(msg.sender)].length - 1, netStakeAmount, fee);\\n    }\\n\\n    /*\\n    * @notice Calculate the amount of tokens that could be returned on a stake. This function does not change the state of the contract.\\n    * @param investor Address of the investor\\n    * @param index Index of the stake\\n    * @return Amount of reward that would be claimed if the investor called claimReward(index)\\n    */\\n    function previewInvestorClaimReward(address investor, uint256 index) public view returns (uint256) {\\n        // Get the stake \\n        Stake memory stake = getInvestorStake(investor, index);\\n\\n        uint256 rewardDueNow = 0;      \\n        uint256 maximumRewardablePeriod = maturationDate - stake.startDate;\\n        uint256 rewardablePeriod;\\n\\n        // If the stake has been withdrawn, the rewardable period is:   \\n        // Time of stake deposit to time of withdrawal or maturation date, whichever is earlier\\n        if (stake.dateWithdrawn > 0) {\\n            rewardablePeriod = Math.min(stake.dateWithdrawn, maturationDate) - stake.startDate;     \\n        } \\n        // If the stake has not been withdrawn, the rewardable period is:\\n        // Time of stake deposit to current time or maturation date, whichever is earlier\\n        else {\\n            rewardablePeriod = Math.min(block.timestamp, maturationDate) - stake.startDate;\\n        } \\n\\n        // Protect against division by 0 if the stake was withdrawn immediately\\n        if (rewardablePeriod == 0) {\\n            return 0;\\n        }\\n          \\n        // Calculate the reward due now, assuming no previous rewards have been claimed\\n        // Starts at 0 and increases linearly to the total reward amount over the maturation period     \\n        rewardDueNow = Math.mulDiv(stake.reward, rewardablePeriod, maximumRewardablePeriod, Math.Rounding.Zero);\\n\\n        // Return the reward due now minus the reward already claimed\\n        return rewardDueNow - stake.totalRewardClaimed;\\n    }\\n\\n    /*\\n    * @notice Withdraw all rewards due on a stake. This function will calculate the amount of reward tokens due to the caller and transfer them to the caller's address.\\n    * @param index Index of the stake\\n    */\\n    function claimReward(uint256 index) public {\\n        // Get the stake  \\n        uint256 rewardAmount = previewInvestorClaimReward(address(msg.sender), index);\\n        require(rewardAmount > 0, \\\"No reward to claim\\\");\\n\\n        Stake storage stake = stakes[address(msg.sender)][index];\\n        stake.totalRewardClaimed += rewardAmount;\\n        IERC20(token).transfer(stake.staker, rewardAmount); \\n        emit RewardClaimed(stake.staker, index, rewardAmount);\\n    }\\n\\n    /*\\n    * @notice Calculate the amount of tokens that would be withdrawn and burned on a stake. This function does not change the state of the contract.\\n    * @param investor Address of the investor\\n    * @param index Index of the stake\\n    * @return Amounts of tokens that would be withdrawn and would be burned if the investor called withdrawStake(index)\\n    */\\n    function previewInvestorWithdrawStake(address investor, uint256 index) public view returns (uint256, uint256) {\\n        // Get the stake \\n        Stake memory stake = getInvestorStake(investor, index);\\n\\n        // Check that the stake has not already been withdrawn\\n        require(stake.dateWithdrawn == 0, \\\"Stake has already been withdrawn\\\");\\n     \\n        // Calculate the burn amount. Starting burn rate is 20% and decreases linearly to 0% at maturation\\n        uint256 burnAmount = 0;\\n        if (maturationDate > block.timestamp) {\\n            uint256 maxBurn = Math.mulDiv(stake.amount, startingBurnRate, PRECISION * 100, Math.Rounding.Zero);\\n            uint256 timeRemaining = maturationDate - block.timestamp;\\n            burnAmount = Math.mulDiv(maxBurn, timeRemaining, maturationPeriod, Math.Rounding.Zero);\\n        }\\n        // Calculate the amount to be withdrawn\\n        uint256 withdrawAmount = stake.amount - burnAmount;\\n\\n        return (withdrawAmount, burnAmount);\\n    }\\n\\n    /*\\n    * @notice Withdraw all tokens from a stake. Calculate the amount of tokens due to the caller and transfer them to the caller's address. It may also burn a percentage of the tokens, depending on how early the stake was withdrawn.\\n    * @param index Index of the stake\\n    */\\n    function withdrawStake(uint256 index) public {\\n        // Preview\\n        (uint256 withdrawAmount, uint256 burnAmount) = previewInvestorWithdrawStake(address(msg.sender), index);\\n        Stake storage stake = stakes[address(msg.sender)][index];\\n\\n        // Burn the burn amount by sending it to address 1\\n        if (burnAmount > 0) {\\n            stake.stakeBurnt = burnAmount;\\n            IERC20(token).transfer(address(1), burnAmount);\\n        }\\n        stake.dateWithdrawn = block.timestamp;\\n\\n        // Send the remaining amount to the staker\\n        IERC20(token).transfer(stake.staker, withdrawAmount);\\n\\n        emit StakeWithdrawn(stake.staker, index, withdrawAmount, burnAmount);\\n    }\\n\\n    function refundInvestorStake(address investor, uint256 index) public onlyOwner {\\n        // Get the stake \\n        Stake memory stake = getInvestorStake(investor, index);\\n\\n        // Check that the stake has not already been withdrawn\\n        require(stake.dateWithdrawn == 0, \\\"Stake has already been withdrawn\\\");\\n\\n        // Refund the stake\\n        IERC20(token).transfer(stake.staker, stake.amount);\\n\\n        // Mark the stake as withdrawn\\n        stake.dateWithdrawn = block.timestamp;\\n\\n        emit StakeRefunded(stake.staker, index, stake.amount);\\n    }\\n\\n    /*\\n    * @notice returns the number of seconds remaining until the maturation date\\n    * @return Number of seconds remaining until the maturation date\\n    */\\n    function getTimeRemaining() public view returns (uint256) {\\n        return maturationDate - block.timestamp;\\n    }\\n}\"\r\n    },\r\n    \"contracts/Staking90Days2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\nimport \\\"./Staking.sol\\\";\\n\\ncontract Staking90Days2 is Staking {\\n    uint32 constant MATURATION_DAYS = 90; // 90 days\\n    uint32 constant STARTING_BURN_RATE = 20_000; // 20% starting burn rate\\n    uint32 constant REWARD_RATE = 8_630; // 35% reward / 365 days = 8.630% reward / 90 days\\n    uint32 constant STAKING_FEE_RATE = 2_500; // 2.5% staking fee\\n    constructor(address _tokenAddress) Staking(_tokenAddress, MATURATION_DAYS, STARTING_BURN_RATE, REWARD_RATE, STAKING_FEE_RATE) {}\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feesCharged\",\"type\":\"uint256\"}],\"name\":\"StakeDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeRefunded\",\"type\":\"uint256\"}],\"name\":\"StakeRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeWithdrawn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeBurnt\",\"type\":\"uint256\"}],\"name\":\"StakeWithdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deploymentDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getInvestor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInvestorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getInvestorStake\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dateWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewardClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeBurnt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingFee\",\"type\":\"uint256\"}],\"internalType\":\"struct Staking.Stake\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"getInvestorStakeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getStake\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dateWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewardClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeBurnt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingFee\",\"type\":\"uint256\"}],\"internalType\":\"struct Staking.Stake\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimeRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maturationDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maturationPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"previewInvestorClaimReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"previewInvestorWithdrawStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"refundInvestorStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingFeeRate\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startingBurnRate\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Staking90Days2", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000cae3d82d63e2b0094bc959752993d3d3743b5d08", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}