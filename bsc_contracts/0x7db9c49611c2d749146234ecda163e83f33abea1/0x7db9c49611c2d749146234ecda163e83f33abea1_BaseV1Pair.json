{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.11;\r\n\r\ninterface erc20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function balanceOf(address) external view returns (uint);\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n    function approve(address spender, uint value) external returns (bool);\r\n}\r\n\r\nlibrary Math {\r\n    function min(uint a, uint b) internal pure returns (uint) {\r\n        return a < b ? a : b;\r\n    }\r\n    function sqrt(uint y) internal pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\ninterface IBaseV1Callee {\r\n    function hook(address sender, uint amount0, uint amount1, bytes calldata data) external;\r\n}\r\n\r\n// Base V1 Fees contract is used as a 1:1 pair relationship to split out fees, this ensures that the curve does not need to be modified for LP shares\r\ncontract BaseV1Fees {\r\n\r\n    address internal immutable pair; // The pair it is bonded to\r\n    address internal immutable token0; // token0 of pair, saved localy and statically for gas optimization\r\n    address internal immutable token1; // Token1 of pair, saved localy and statically for gas optimization\r\n\r\n    constructor(address _token0, address _token1) {\r\n        pair = msg.sender;\r\n        token0 = _token0;\r\n        token1 = _token1;\r\n    }\r\n\r\n    function _safeTransfer(address token,address to,uint256 value) internal {\r\n        require(token.code.length > 0, 'token err');\r\n        (bool success, bytes memory data) =\r\n        token.call(abi.encodeWithSelector(erc20.transfer.selector, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    // Allow the pair to transfer fees to users\r\n    function claimFeesFor(address recipient, uint amount0, uint amount1) external {\r\n        require(msg.sender == pair, '!pair');\r\n        if (amount0 > 0) _safeTransfer(token0, recipient, amount0);\r\n        if (amount1 > 0) _safeTransfer(token1, recipient, amount1);\r\n    }\r\n\r\n}\r\n\r\n// The base pair of pools, either stable or volatile\r\ncontract BaseV1Pair {\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public constant decimals = 18;\r\n\r\n    // Used to denote stable or volatile pair, not immutable since construction happens in the initialize method for CREATE2 deterministic addresses\r\n    bool public immutable stable;\r\n\r\n    uint public totalSupply = 0;\r\n\r\n    mapping(address => mapping (address => uint)) public allowance;\r\n    mapping(address => uint) public balanceOf;\r\n\r\n    bytes32 internal DOMAIN_SEPARATOR;\r\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n    bytes32 internal constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\r\n    mapping(address => uint) public nonces;\r\n\r\n    uint internal constant MINIMUM_LIQUIDITY = 10**3;\r\n\r\n    address public immutable token0;\r\n    address public immutable token1;\r\n    address public immutable fees;\r\n    address immutable factory;\r\n\r\n    // Structure to capture time period obervations every 30 minutes, used for local oracles\r\n    struct Observation {\r\n        uint timestamp;\r\n        uint reserve0Cumulative;\r\n        uint reserve1Cumulative;\r\n    }\r\n\r\n    // Capture oracle reading every 30 minutes\r\n    uint constant periodSize = 1800;\r\n\r\n    Observation[] public observations;\r\n\r\n    uint internal immutable decimals0;\r\n    uint internal immutable decimals1;\r\n\r\n    uint public reserve0;\r\n    uint public reserve1;\r\n    uint public blockTimestampLast;\r\n\r\n    uint public reserve0CumulativeLast;\r\n    uint public reserve1CumulativeLast;\r\n\r\n    // index0 and index1 are used to accumulate fees, this is split out from normal trades to keep the swap \"clean\"\r\n    // this further allows LP holders to easily claim fees for tokens they have/staked\r\n    uint public index0 = 0;\r\n    uint public index1 = 0;\r\n\r\n    // position assigned to each LP to track their current index0 & index1 vs the global position\r\n    mapping(address => uint) public supplyIndex0;\r\n    mapping(address => uint) public supplyIndex1;\r\n\r\n    // tracks the amount of unclaimed, but claimable tokens off of fees for token0 and token1\r\n    mapping(address => uint) public claimable0;\r\n    mapping(address => uint) public claimable1;\r\n\r\n    event Fees(address indexed sender, uint amount0, uint amount1);\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint reserve0, uint reserve1);\r\n    event Claim(address indexed sender, address indexed recipient, uint amount0, uint amount1);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint amount);\r\n    event Approval(address indexed owner, address indexed spender, uint amount);\r\n\r\n    constructor() {\r\n        factory = msg.sender;\r\n        (address _token0, address _token1, bool _stable) = BaseV1Factory(msg.sender).getInitializable();\r\n        (token0, token1, stable) = (_token0, _token1, _stable);\r\n        fees = address(new BaseV1Fees(_token0, _token1));\r\n        if (_stable) {\r\n            name = string(abi.encodePacked(\"StableV1 AMM - \", erc20(_token0).symbol(), \"/\", erc20(_token1).symbol()));\r\n            symbol = string(abi.encodePacked(\"sAMM-\", erc20(_token0).symbol(), \"/\", erc20(_token1).symbol()));\r\n        } else {\r\n            name = string(abi.encodePacked(\"VolatileV1 AMM - \", erc20(_token0).symbol(), \"/\", erc20(_token1).symbol()));\r\n            symbol = string(abi.encodePacked(\"vAMM-\", erc20(_token0).symbol(), \"/\", erc20(_token1).symbol()));\r\n        }\r\n\r\n        decimals0 = 10**erc20(_token0).decimals();\r\n        decimals1 = 10**erc20(_token1).decimals();\r\n\r\n        observations.push(Observation(block.timestamp, 0, 0));\r\n    }\r\n\r\n    // simple re-entrancy check\r\n    uint internal _unlocked = 1;\r\n    modifier lock() {\r\n        require(_unlocked == 1, 'lock');\r\n        _unlocked = 2;\r\n        _;\r\n        _unlocked = 1;\r\n    }\r\n\r\n    function observationLength() external view returns (uint) {\r\n        return observations.length;\r\n    }\r\n\r\n    function lastObservation() public view returns (Observation memory) {\r\n        return observations[observations.length-1];\r\n    }\r\n\r\n    function metadata() external view returns (uint dec0, uint dec1, uint r0, uint r1, bool st, address t0, address t1) {\r\n        return (decimals0, decimals1, reserve0, reserve1, stable, token0, token1);\r\n    }\r\n\r\n    function tokens() external view returns (address, address) {\r\n        return (token0, token1);\r\n    }\r\n\r\n    function getFees(address account) external view returns (uint claimed0, uint claimed1) {\r\n        claimed0 = claimable0[account];\r\n        claimed1 = claimable1[account];\r\n\r\n        uint _supplied = balanceOf[account];\r\n        if (_supplied > 0) {\r\n            uint _delta0 = index0 - supplyIndex0[account];\r\n            uint _delta1 = index1 - supplyIndex1[account];\r\n            if (_delta0 > 0) {\r\n                uint _share = _supplied * _delta0 / 1e18;\r\n                claimed0 += _share;\r\n            }\r\n            if (_delta1 > 0) {\r\n                uint _share = _supplied * _delta1 / 1e18;\r\n                claimed1 += _share;\r\n            }\r\n        }\r\n    }\r\n\r\n    // claim accumulated but unclaimed fees (viewable via claimable0 and claimable1)\r\n    function claimFees() external returns (uint claimed0, uint claimed1) {\r\n        _updateFor(msg.sender);\r\n\r\n        claimed0 = claimable0[msg.sender];\r\n        claimed1 = claimable1[msg.sender];\r\n\r\n        if (claimed0 > 0 || claimed1 > 0) {\r\n            claimable0[msg.sender] = 0;\r\n            claimable1[msg.sender] = 0;\r\n\r\n            BaseV1Fees(fees).claimFeesFor(msg.sender, claimed0, claimed1);\r\n\r\n            emit Claim(msg.sender, msg.sender, claimed0, claimed1);\r\n        }\r\n    }\r\n\r\n    // Accrue fees on token0\r\n    function _update0(uint amount) internal {\r\n        _safeTransfer(token0, fees, amount); // transfer the fees out to BaseV1Fees\r\n        uint256 _ratio = amount * 1e18 / totalSupply; // 1e18 adjustment is removed during claim\r\n        if (_ratio > 0) {\r\n            index0 += _ratio;\r\n        }\r\n        emit Fees(msg.sender, amount, 0);\r\n    }\r\n\r\n    // Accrue fees on token1\r\n    function _update1(uint amount) internal {\r\n        _safeTransfer(token1, fees, amount);\r\n        uint256 _ratio = amount * 1e18 / totalSupply;\r\n        if (_ratio > 0) {\r\n            index1 += _ratio;\r\n        }\r\n        emit Fees(msg.sender, 0, amount);\r\n    }\r\n\r\n    // this function MUST be called on any balance changes, otherwise can be used to infinitely claim fees\r\n    // Fees are segregated from core funds, so fees can never put liquidity at risk\r\n    function _updateFor(address recipient) internal {\r\n        uint _supplied = balanceOf[recipient]; // get LP balance of `recipient`\r\n        if (_supplied > 0) {\r\n            uint _supplyIndex0 = supplyIndex0[recipient]; // get last adjusted index0 for recipient\r\n            uint _supplyIndex1 = supplyIndex1[recipient];\r\n            uint _index0 = index0; // get global index0 for accumulated fees\r\n            uint _index1 = index1;\r\n            supplyIndex0[recipient] = _index0; // update user current position to global position\r\n            supplyIndex1[recipient] = _index1;\r\n            uint _delta0 = _index0 - _supplyIndex0; // see if there is any difference that need to be accrued\r\n            uint _delta1 = _index1 - _supplyIndex1;\r\n            if (_delta0 > 0) {\r\n                uint _share = _supplied * _delta0 / 1e18; // add accrued difference for each supplied token\r\n                claimable0[recipient] += _share;\r\n            }\r\n            if (_delta1 > 0) {\r\n                uint _share = _supplied * _delta1 / 1e18;\r\n                claimable1[recipient] += _share;\r\n            }\r\n        } else {\r\n            supplyIndex0[recipient] = index0; // new users are set to the default global state\r\n            supplyIndex1[recipient] = index1;\r\n        }\r\n    }\r\n\r\n    function getReserves() public view returns (uint _reserve0, uint _reserve1, uint _blockTimestampLast) {\r\n        _reserve0 = reserve0;\r\n        _reserve1 = reserve1;\r\n        _blockTimestampLast = blockTimestampLast;\r\n    }\r\n\r\n    // update reserves and, on the first call per block, price accumulators\r\n    function _update(uint balance0, uint balance1, uint _reserve0, uint _reserve1) internal {\r\n        uint blockTimestamp = block.timestamp;\r\n        uint timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\r\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\r\n            reserve0CumulativeLast += _reserve0 * timeElapsed;\r\n            reserve1CumulativeLast += _reserve1 * timeElapsed;\r\n        }\r\n\r\n        Observation memory _point = lastObservation();\r\n        timeElapsed = blockTimestamp - _point.timestamp; // compare the last observation with current timestamp, if greater than 30 minutes, record a new event\r\n        if (timeElapsed > periodSize) {\r\n            observations.push(Observation(blockTimestamp, reserve0CumulativeLast, reserve1CumulativeLast));\r\n        }\r\n        reserve0 = balance0;\r\n        reserve1 = balance1;\r\n        blockTimestampLast = blockTimestamp;\r\n        emit Sync(reserve0, reserve1);\r\n    }\r\n\r\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\r\n    function currentCumulativePrices() public view returns (uint reserve0Cumulative, uint reserve1Cumulative, uint blockTimestamp) {\r\n        blockTimestamp = block.timestamp;\r\n        reserve0Cumulative = reserve0CumulativeLast;\r\n        reserve1Cumulative = reserve1CumulativeLast;\r\n\r\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\r\n        (uint _reserve0, uint _reserve1, uint _blockTimestampLast) = getReserves();\r\n        if (_blockTimestampLast != blockTimestamp) {\r\n            // subtraction overflow is desired\r\n            uint timeElapsed = blockTimestamp - _blockTimestampLast;\r\n            reserve0Cumulative += _reserve0 * timeElapsed;\r\n            reserve1Cumulative += _reserve1 * timeElapsed;\r\n        }\r\n    }\r\n\r\n    // gives the current twap price measured from amountIn * tokenIn gives amountOut\r\n    function current(address tokenIn, uint amountIn) external view returns (uint amountOut) {\r\n        Observation memory _observation = lastObservation();\r\n        (uint reserve0Cumulative, uint reserve1Cumulative,) = currentCumulativePrices();\r\n        if (block.timestamp == _observation.timestamp) {\r\n            _observation = observations[observations.length-2];\r\n        }\r\n\r\n        uint timeElapsed = block.timestamp - _observation.timestamp;\r\n        uint _reserve0 = (reserve0Cumulative - _observation.reserve0Cumulative) / timeElapsed;\r\n        uint _reserve1 = (reserve1Cumulative - _observation.reserve1Cumulative) / timeElapsed;\r\n        amountOut = _getAmountOut(amountIn, tokenIn, _reserve0, _reserve1);\r\n    }\r\n\r\n    // as per `current`, however allows user configured granularity, up to the full window size\r\n    function quote(address tokenIn, uint amountIn, uint granularity) external view returns (uint amountOut) {\r\n        uint [] memory _prices = sample(tokenIn, amountIn, granularity, 1);\r\n        uint priceAverageCumulative;\r\n        for (uint i = 0; i < _prices.length; i++) {\r\n            priceAverageCumulative += _prices[i];\r\n        }\r\n        return priceAverageCumulative / granularity;\r\n    }\r\n\r\n    // returns a memory set of twap prices\r\n    function prices(address tokenIn, uint amountIn, uint points) external view returns (uint[] memory) {\r\n        return sample(tokenIn, amountIn, points, 1);\r\n    }\r\n\r\n    function sample(address tokenIn, uint amountIn, uint points, uint window) public view returns (uint[] memory) {\r\n        uint[] memory _prices = new uint[](points);\r\n\r\n        uint length = observations.length-1;\r\n        uint i = length - (points * window);\r\n        uint nextIndex = 0;\r\n        uint index = 0;\r\n\r\n        for (; i < length; i+=window) {\r\n            nextIndex = i + window;\r\n            uint timeElapsed = observations[nextIndex].timestamp - observations[i].timestamp;\r\n            uint _reserve0 = (observations[nextIndex].reserve0Cumulative - observations[i].reserve0Cumulative) / timeElapsed;\r\n            uint _reserve1 = (observations[nextIndex].reserve1Cumulative - observations[i].reserve1Cumulative) / timeElapsed;\r\n            _prices[index] = _getAmountOut(amountIn, tokenIn, _reserve0, _reserve1);\r\n            index = index + 1;\r\n        }\r\n        return _prices;\r\n    }\r\n\r\n    // this low-level function should be called from a contract which performs important safety checks\r\n    // standard uniswap v2 implementation\r\n    function mint(address to) external lock returns (uint liquidity) {\r\n        (uint _reserve0, uint _reserve1) = (reserve0, reserve1);\r\n        uint _balance0 = erc20(token0).balanceOf(address(this));\r\n        uint _balance1 = erc20(token1).balanceOf(address(this));\r\n        uint _amount0 = _balance0 - _reserve0;\r\n        uint _amount1 = _balance1 - _reserve1;\r\n\r\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\r\n        if (_totalSupply == 0) {\r\n            liquidity = Math.sqrt(_amount0 * _amount1) - MINIMUM_LIQUIDITY;\r\n            _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\r\n        } else {\r\n            liquidity = Math.min(_amount0 * _totalSupply / _reserve0, _amount1 * _totalSupply / _reserve1);\r\n        }\r\n        require(liquidity > 0, 'ILM'); // BaseV1: INSUFFICIENT_LIQUIDITY_MINTED\r\n        _mint(to, liquidity);\r\n\r\n        _update(_balance0, _balance1, _reserve0, _reserve1);\r\n        emit Mint(msg.sender, _amount0, _amount1);\r\n    }\r\n\r\n    // this low-level function should be called from a contract which performs important safety checks\r\n    // standard uniswap v2 implementation\r\n    function burn(address to) external lock returns (uint amount0, uint amount1) {\r\n        (uint _reserve0, uint _reserve1) = (reserve0, reserve1);\r\n        (address _token0, address _token1) = (token0, token1);\r\n        uint _balance0 = erc20(_token0).balanceOf(address(this));\r\n        uint _balance1 = erc20(_token1).balanceOf(address(this));\r\n        uint _liquidity = balanceOf[address(this)];\r\n\r\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\r\n        amount0 = _liquidity * _balance0 / _totalSupply; // using balances ensures pro-rata distribution\r\n        amount1 = _liquidity * _balance1 / _totalSupply; // using balances ensures pro-rata distribution\r\n        require(amount0 > 0 && amount1 > 0, 'ILB'); // BaseV1: INSUFFICIENT_LIQUIDITY_BURNED\r\n        _burn(address(this), _liquidity);\r\n        _safeTransfer(_token0, to, amount0);\r\n        _safeTransfer(_token1, to, amount1);\r\n        _balance0 = erc20(_token0).balanceOf(address(this));\r\n        _balance1 = erc20(_token1).balanceOf(address(this));\r\n\r\n        _update(_balance0, _balance1, _reserve0, _reserve1);\r\n        emit Burn(msg.sender, amount0, amount1, to);\r\n    }\r\n\r\n    // this low-level function should be called from a contract which performs important safety checks\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external lock {\r\n        require(!BaseV1Factory(factory).isPaused(), 'paused');\r\n        require(amount0Out > 0 || amount1Out > 0, 'IOA'); // BaseV1: INSUFFICIENT_OUTPUT_AMOUNT\r\n        (uint _reserve0, uint _reserve1) =  (reserve0, reserve1);\r\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'IL'); // BaseV1: INSUFFICIENT_LIQUIDITY\r\n\r\n        uint _balance0;\r\n        uint _balance1;\r\n        { // scope for _token{0,1}, avoids stack too deep errors\r\n        (address _token0, address _token1) = (token0, token1);\r\n        require(to != _token0 && to != _token1, 'IT'); // BaseV1: INVALID_TO\r\n        if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\r\n        if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\r\n        if (data.length > 0) IBaseV1Callee(to).hook(msg.sender, amount0Out, amount1Out, data); // callback, used for flash loans\r\n        _balance0 = erc20(_token0).balanceOf(address(this));\r\n        _balance1 = erc20(_token1).balanceOf(address(this));\r\n        }\r\n        uint amount0In = _balance0 > _reserve0 - amount0Out ? _balance0 - (_reserve0 - amount0Out) : 0;\r\n        uint amount1In = _balance1 > _reserve1 - amount1Out ? _balance1 - (_reserve1 - amount1Out) : 0;\r\n        require(amount0In > 0 || amount1In > 0, 'IIA'); // BaseV1: INSUFFICIENT_INPUT_AMOUNT\r\n        { // scope for reserve{0,1}Adjusted, avoids stack too deep errors\r\n            (address _token0, address _token1) = (token0, token1);\r\n            if (stable){\r\n                if (amount0In > 0) _update0(amount0In / 10000); // accrue fees for token0 and move them out of pool\r\n                if (amount1In > 0) _update1(amount1In / 10000); // accrue fees for token1 and move them out of pool\r\n            }else{\r\n                if (amount0In > 0) _update0(amount0In * 25 / 10000); // accrue fees for token0 and move them out of pool\r\n                if (amount1In > 0) _update1(amount1In * 25 / 10000); // accrue fees for token1 and move them out of pool\r\n            }\r\n            _balance0 = erc20(_token0).balanceOf(address(this)); // since we removed tokens, we need to reconfirm balances, can also simply use previous balance - amountIn/ 10000, but doing balanceOf again as safety check\r\n            _balance1 = erc20(_token1).balanceOf(address(this));\r\n            // The curve, either x3y+y3x for stable pools, or x*y for volatile pools\r\n            require(_k(_balance0, _balance1) >= _k(_reserve0, _reserve1), 'K'); // BaseV1: K\r\n        }\r\n\r\n        _update(_balance0, _balance1, _reserve0, _reserve1);\r\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\r\n    }\r\n\r\n    // force balances to match reserves\r\n    function skim(address to) external lock {\r\n        (address _token0, address _token1) = (token0, token1);\r\n        _safeTransfer(_token0, to, erc20(_token0).balanceOf(address(this)) - (reserve0));\r\n        _safeTransfer(_token1, to, erc20(_token1).balanceOf(address(this)) - (reserve1));\r\n    }\r\n\r\n    // force reserves to match balances\r\n    function sync() external lock {\r\n        _update(erc20(token0).balanceOf(address(this)), erc20(token1).balanceOf(address(this)), reserve0, reserve1);\r\n    }\r\n\r\n    function _f(uint x0, uint y) internal pure returns (uint) {\r\n        return x0*(y*y/1e18*y/1e18)/1e18+(x0*x0/1e18*x0/1e18)*y/1e18;\r\n    }\r\n\r\n    function _d(uint x0, uint y) internal pure returns (uint) {\r\n        return 3*x0*(y*y/1e18)/1e18+(x0*x0/1e18*x0/1e18);\r\n    }\r\n\r\n    function _get_y(uint x0, uint xy, uint y) internal pure returns (uint) {\r\n        for (uint i = 0; i < 255; i++) {\r\n            uint y_prev = y;\r\n            uint k = _f(x0, y);\r\n            if (k < xy) {\r\n                uint dy = (xy - k)*1e18/_d(x0, y);\r\n                y = y + dy;\r\n            } else {\r\n                uint dy = (k - xy)*1e18/_d(x0, y);\r\n                y = y - dy;\r\n            }\r\n            if (y > y_prev) {\r\n                if (y - y_prev <= 1) {\r\n                    return y;\r\n                }\r\n            } else {\r\n                if (y_prev - y <= 1) {\r\n                    return y;\r\n                }\r\n            }\r\n        }\r\n        return y;\r\n    }\r\n\r\n    function getAmountOut(uint amountIn, address tokenIn) external view returns (uint) {\r\n        (uint _reserve0, uint _reserve1) = (reserve0, reserve1);\r\n        if (stable){\r\n            amountIn -= amountIn / 10000; // remove fee from amount received\r\n        }else{\r\n            amountIn -= amountIn * 25 / 10000; // remove fee from amount received\r\n        }\r\n        return _getAmountOut(amountIn, tokenIn, _reserve0, _reserve1);\r\n    }\r\n\r\n    function _getAmountOut(uint amountIn, address tokenIn, uint _reserve0, uint _reserve1) internal view returns (uint) {\r\n        if (stable) {\r\n            uint xy =  _k(_reserve0, _reserve1);\r\n            _reserve0 = _reserve0 * 1e18 / decimals0;\r\n            _reserve1 = _reserve1 * 1e18 / decimals1;\r\n            (uint reserveA, uint reserveB) = tokenIn == token0 ? (_reserve0, _reserve1) : (_reserve1, _reserve0);\r\n            amountIn = tokenIn == token0 ? amountIn * 1e18 / decimals0 : amountIn * 1e18 / decimals1;\r\n            uint y = reserveB - _get_y(amountIn+reserveA, xy, reserveB);\r\n            return y * (tokenIn == token0 ? decimals1 : decimals0) / 1e18;\r\n        } else {\r\n            (uint reserveA, uint reserveB) = tokenIn == token0 ? (_reserve0, _reserve1) : (_reserve1, _reserve0);\r\n            return amountIn * reserveB / (reserveA + amountIn);\r\n        }\r\n    }\r\n\r\n    function _k(uint x, uint y) internal view returns (uint) {\r\n        if (stable) {\r\n            uint _x = x * 1e18 / decimals0;\r\n            uint _y = y * 1e18 / decimals1;\r\n            uint _a = (_x * _y) / 1e18;\r\n            uint _b = ((_x * _x) / 1e18 + (_y * _y) / 1e18);\r\n            return _a * _b / 1e18;  // x3y+y3x >= k\r\n        } else {\r\n            return x * y; // xy >= k\r\n        }\r\n    }\r\n\r\n    function _mint(address dst, uint amount) internal {\r\n        _updateFor(dst); // balances must be updated on mint/burn/transfer\r\n        totalSupply += amount;\r\n        balanceOf[dst] += amount;\r\n        emit Transfer(address(0), dst, amount);\r\n    }\r\n\r\n    function _burn(address dst, uint amount) internal {\r\n        _updateFor(dst);\r\n        totalSupply -= amount;\r\n        balanceOf[dst] -= amount;\r\n        emit Transfer(dst, address(0), amount);\r\n    }\r\n\r\n    function approve(address spender, uint amount) external returns (bool) {\r\n        allowance[msg.sender][spender] = amount;\r\n\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\r\n        require(deadline >= block.timestamp, 'BaseV1: EXPIRED');\r\n        DOMAIN_SEPARATOR = keccak256(\r\n            abi.encode(\r\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\r\n                keccak256(bytes(name)),\r\n                keccak256('1'),\r\n                block.chainid,\r\n                address(this)\r\n            )\r\n        );\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\r\n                '\\x19\\x01',\r\n                DOMAIN_SEPARATOR,\r\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\r\n            )\r\n        );\r\n        address recoveredAddress = ecrecover(digest, v, r, s);\r\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'BaseV1: INVALID_SIGNATURE');\r\n        allowance[owner][spender] = value;\r\n\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function transfer(address dst, uint amount) external returns (bool) {\r\n        _transferTokens(msg.sender, dst, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address src, address dst, uint amount) external returns (bool) {\r\n        address spender = msg.sender;\r\n        uint spenderAllowance = allowance[src][spender];\r\n\r\n        if (spender != src && spenderAllowance != type(uint).max) {\r\n            uint newAllowance = spenderAllowance - amount;\r\n            allowance[src][spender] = newAllowance;\r\n\r\n            emit Approval(src, spender, newAllowance);\r\n        }\r\n\r\n        _transferTokens(src, dst, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transferTokens(address src, address dst, uint amount) internal {\r\n        _updateFor(src); // update fee position for src\r\n        _updateFor(dst); // update fee position for dst\r\n\r\n        balanceOf[src] -= amount;\r\n        balanceOf[dst] += amount;\r\n\r\n        emit Transfer(src, dst, amount);\r\n    }\r\n\r\n    function _safeTransfer(address token,address to,uint256 value) internal {\r\n        require(token.code.length > 0, 'token err');\r\n        (bool success, bytes memory data) =\r\n        token.call(abi.encodeWithSelector(erc20.transfer.selector, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\ncontract BaseV1Factory {\r\n\r\n    bool public isPaused;\r\n    address public pauser;\r\n    address public pendingPauser;\r\n\r\n    mapping(address => mapping(address => mapping(bool => address))) public getPair;\r\n    address[] public allPairs;\r\n    mapping(address => bool) public isPair; // simplified check if its a pair, given that `stable` flag might not be available in peripherals\r\n\r\n    address internal _temp0;\r\n    address internal _temp1;\r\n    bool internal _temp;\r\n\r\n    event PairCreated(address indexed token0, address indexed token1, bool stable, address pair, uint);\r\n    event SetPauser(address indexed pendingPauser);\r\n    event AcceptPauser(address indexed pauser);\r\n\r\n    constructor() {\r\n        pauser = msg.sender;\r\n        isPaused = false;\r\n    }\r\n\r\n    function allPairsLength() external view returns (uint) {\r\n        return allPairs.length;\r\n    }\r\n\r\n    function setPauser(address _pauser) external {\r\n        require(msg.sender == pauser, '!pauser');\r\n        pendingPauser = _pauser;\r\n        emit SetPauser(pendingPauser);\r\n    }\r\n\r\n    function acceptPauser() external {\r\n        require(msg.sender == pendingPauser, '!pendingPauser');\r\n        pauser = pendingPauser;\r\n        emit AcceptPauser(pauser);\r\n    }\r\n\r\n    function setPause(bool _state) external {\r\n        require(msg.sender == pauser, '!pauser');\r\n        isPaused = _state;\r\n    }\r\n\r\n    function pairCodeHash() external pure returns (bytes32) {\r\n        return keccak256(type(BaseV1Pair).creationCode);\r\n    }\r\n\r\n    function getInitializable() external view returns (address, address, bool) {\r\n        return (_temp0, _temp1, _temp);\r\n    }\r\n\r\n    function createPair(address tokenA, address tokenB, bool stable) external returns (address pair) {\r\n        require(tokenA != tokenB, 'IA'); // BaseV1: IDENTICAL_ADDRESSES\r\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        require(token0 != address(0), 'ZA'); // BaseV1: ZERO_ADDRESS\r\n        require(getPair[token0][token1][stable] == address(0), 'PE'); // BaseV1: PAIR_EXISTS - single check is sufficient\r\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1, stable)); // notice salt includes stable as well, 3 parameters\r\n        (_temp0, _temp1, _temp) = (token0, token1, stable);\r\n        pair = address(new BaseV1Pair{salt:salt}());\r\n        getPair[token0][token1][stable] = pair;\r\n        getPair[token1][token0][stable] = pair; // populate mapping in the reverse direction\r\n        allPairs.push(pair);\r\n        isPair[pair] = true;\r\n        emit PairCreated(token0, token1, stable, pair, allPairs.length);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Fees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0Out\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1Out\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserve0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserve1\",\"type\":\"uint256\"}],\"name\":\"Sync\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockTimestampLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimed0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimable0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimable1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"current\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentCumulativePrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserve0Cumulative\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve1Cumulative\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimed0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed1\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_reserve0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reserve1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_blockTimestampLast\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"index0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"index1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastObservation\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve0Cumulative\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve1Cumulative\",\"type\":\"uint256\"}],\"internalType\":\"struct BaseV1Pair.Observation\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadata\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dec0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dec1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r1\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"st\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"t0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"t1\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"observationLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve0Cumulative\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve1Cumulative\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"granularity\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve0CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve1CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"window\",\"type\":\"uint256\"}],\"name\":\"sample\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"skim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supplyIndex0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supplyIndex1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0Out\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Out\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BaseV1Pair", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6deff0aebf18dc0c280f36eca2810908964385c3f9dee2892b8ad5cb479a8298"}