{"SourceCode": "pragma solidity ^0.8.0;\r\n// SPDX-License-Identifier: MIT\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * mul \r\n     * @dev Safe math multiply function\r\n     */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n  /**\r\n   * add\r\n   * @dev Safe math addition function\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev Ownable has an owner address to simplify \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  /**\r\n   * Ownable\r\n   * @dev Ownable constructor sets the `owner` of the contract to sender\r\n   */\r\n  constructor ()  {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * ownerOnly\r\n   * @dev Throws an error if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * transferOwnership\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\ninterface Token {\r\n  function transfer(address _to, uint256 _value) external  returns (bool);\r\n  function balanceOf(address _owner) external view returns (uint256 balance);\r\n}\r\n\r\ncontract System_Of_All_SALL_ICO is Ownable {\r\n  using SafeMath for uint256;\r\n  Token token;\r\n\r\n  uint256 public  RATE = 10000; // Number of tokens per 1 BNB\r\n  uint256 public  CAP = 1000; // Cap in BNB \r\n  uint256 public  START = 1657875600; // Tue Jul 15 2022 10:00:00 GMT+0000\r\n  uint256 public  DAYS = 90; // 90 Days \r\n  // The minimum amount of Wei you must pay to participate in the SALL_ICO\r\n  uint256 public  MinPurchase = 1 * 1e15; /** 0.001 BNB  **/\r\n\r\n  \r\n  uint256 public constant initialTokens = 10000000 * 10**18; // 10% of total tokens available\r\n  bool public initialized = false;\r\n  uint256 public raisedAmount = 0;\r\n  \r\n  /**\r\n   * BoughtTokens\r\n   * @dev Log tokens bought onto the blockchain\r\n   */\r\n  event BoughtTokens(address indexed to, uint256 value);\r\n\r\n  /**\r\n   * whenSaleIsActive\r\n   * @dev ensures that the contract is still active\r\n   **/\r\n  modifier whenSaleIsActive() {\r\n    // Check if sale is active\r\n    assert(isActive());\r\n    _;\r\n  }\r\n  \r\n  constructor(address _tokenAddr)  {\r\n      require(_tokenAddr != address(0));\r\n      token = Token(_tokenAddr);\r\n  }\r\n  \r\n  /**\r\n   * initialize\r\n   * @dev Initialize the contract\r\n   **/\r\n  function initialize() public onlyOwner {\r\n      require(initialized == false); // Can only be initialized once\r\n      require(tokensAvailable() == initialTokens); // Must have enough tokens allocated\r\n      initialized = true;\r\n  }\r\n\r\n  /**\r\n   * isActive\r\n   * @dev Determins if the contract is still active\r\n   **/\r\n  function isActive() public view returns (bool) {\r\n    return (\r\n        initialized == true &&\r\n        block.timestamp >= START && // Must be after the START date\r\n        block.timestamp <= START.add(DAYS * 1 days) && // Must be before the end date\r\n        goalReached() == false // Goal must not already be reached\r\n    );\r\n  }\r\n\r\n  /**\r\n   * goalReached\r\n   * @dev Function to determin is goal has been reached\r\n   **/\r\n  function goalReached() public view returns (bool) {\r\n    return (raisedAmount >= CAP * 1 ether);\r\n  }\r\n\r\n  /**\r\n   * @dev Fallback function if bnb is sent to address insted of buyTokens function\r\n   **/\r\n  receive () external payable {\r\n    buyTokens();\r\n  }\r\n\r\n  /**\r\n   * buyTokens\r\n   * @dev function that sells available tokens\r\n   **/\r\n  function buyTokens() public payable whenSaleIsActive {\r\n    \r\n    uint256 weiAmount = msg.value; // Calculate tokens to sell\r\n    uint256 tokens = weiAmount.mul(RATE);\r\n\r\n    require(msg.value > 0, \"Enter a Non-Zero amount.\");\r\n    require(msg.value >= MinPurchase, \"Please Enter the amount more than the minimum allowed investment.\" );\r\n    \r\n    emit BoughtTokens(msg.sender, tokens); // log event onto the blockchain\r\n    raisedAmount = raisedAmount.add(msg.value); // Increment raised amount\r\n    token.transfer(msg.sender, tokens); // Send tokens to buyer\r\n    \r\n    payable(owner).transfer(msg.value);// Send money to owner\r\n  }\r\n\r\n  function SetTokenRate (uint256 _rate) external onlyOwner {\r\n    RATE = _rate;\r\n  }\r\n\r\n  function SetCap (uint256 _cap) external onlyOwner {\r\n    CAP = _cap;\r\n  }\r\n\r\n  function SetDays (uint256 _days) external onlyOwner {\r\n    DAYS = _days;\r\n  }\r\n\r\n  function SetStartTime (uint256 _startTime) external onlyOwner {\r\n    START = _startTime;\r\n  }\r\n\r\n  function SetMinPurchase (uint256 _minimumInvestment) external onlyOwner {\r\n\r\n    MinPurchase = _minimumInvestment;\r\n  }\r\n\r\n\r\n\r\n\r\n  /**\r\n   * tokensAvailable\r\n   * @dev returns the number of tokens allocated to this contract\r\n   **/\r\n  function tokensAvailable() public view returns (uint256) {\r\n    return token.balanceOf(address(this));\r\n  }\r\n\r\n  /**\r\n   * destroy\r\n   * @notice Terminate contract and refund to owner\r\n   **/\r\n  function destroy() onlyOwner public {\r\n    // Transfer tokens back to owner\r\n    uint256 balance = token.balanceOf(address(this));\r\n    assert(balance > 0);\r\n    token.transfer(owner, balance);\r\n    // There should be no bnb in the contract but just in case\r\n    selfdestruct(payable(owner));\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BoughtTokens\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAYS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MinPurchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"START\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"}],\"name\":\"SetCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"SetDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumInvestment\",\"type\":\"uint256\"}],\"name\":\"SetMinPurchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"SetStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"SetTokenRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goalReached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"raisedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "System_Of_All_SALL_ICO", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000009aab6f0f8240590e6d973a8e84acd759a99cc08f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://14ef31c1124a40c47345953b6fc2f6b1796088350358fa908b961ddff0b3d5ef"}