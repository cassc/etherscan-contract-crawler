{"SourceCode": "/*\r\n\r\n _______          _            _             \r\n(_______)        | |      _   (_)            \r\n _____ _   _ ___ | |_   _| |_  _  ___  ____  \r\n|  ___) | | / _ \\| | | | |  _)| |/ _ \\|  _ \\ \r\n| |____\\ V / |_| | | |_| | |__| | |_| | | | |\r\n|_______)_/ \\___/|_|\\____|\\___)_|\\___/|_| |_|\r\n\r\n\r\nTelegram: https://t.me/TheEvolutionOfficial\r\nWebsite: https://evolutioncrypto.net/\r\nEvoSwap: https://app.evoswap.net/\r\n\r\nFunctions:\r\n\r\n- EvoBoost\r\n- Evoswap\r\n- NFT Marketplace\r\n- Staking\r\n- Unique Variable BuyBack System\r\n- 4% Reflection to holders\r\n\r\n\r\n\r\n*/\r\n// SPDX-License-Identifier:Unlicensed\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\ninterface IBEP20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable is Context {\r\n    address payable private _owner;\r\n    address payable private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        _owner = payable(_msgSender());\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = payable(address(0));\r\n    }\r\n\r\n    function transferOwnership(address payable newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function getUnlockTime() public view returns (uint256) {\r\n        return _lockTime;\r\n    }\r\n\r\n    //Locks the contract for owner for the amount of time provided\r\n    function lock(uint256 time) public virtual onlyOwner {\r\n        _previousOwner = _owner;\r\n        _owner = payable(address(0));\r\n        _lockTime = block.timestamp + time;\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n\r\n    //Unlocks the contract for owner when _lockTime is exceeds\r\n    function unlock() public virtual {\r\n        require(_previousOwner == msg.sender, \"You don't have permission to unlock\");\r\n        require(block.timestamp > _lockTime , \"Contract is locked until defined days\");\r\n        emit OwnershipTransferred(_owner, _previousOwner);\r\n        _owner = _previousOwner;\r\n        _previousOwner = payable(address(0));\r\n    }\r\n}\r\n\r\ninterface IPancakeFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IPancakePair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\nlibrary Utils {\r\n    using SafeMath for uint256;\r\n\r\n    function swapTokensForEth(\r\n        address routerAddress,\r\n        uint256 tokenAmount\r\n    ) internal {\r\n        IPancakeRouter02 pancakeRouter = IPancakeRouter02(routerAddress);\r\n\r\n        // generate the pancake pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = pancakeRouter.WETH();\r\n\r\n        // make the swap\r\n        pancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of BNB\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapETHForTokens(\r\n        address routerAddress,\r\n        address recipient,\r\n        uint256 ethAmount\r\n    ) internal {\r\n        IPancakeRouter02 pancakeRouter = IPancakeRouter02(routerAddress);\r\n\r\n        // generate the pancake pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = pancakeRouter.WETH();\r\n        path[1] = address(this);\r\n\r\n        // make the swap\r\n        pancakeRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: ethAmount}(\r\n            0, // accept any amount of BNB\r\n            path,\r\n            address(recipient),\r\n            block.timestamp + 360\r\n        );\r\n    }\r\n    \r\n    \r\n    function swapETHForBuyBackToken(\r\n        address buyBacktoken,\r\n        address routerAddress,\r\n        address recipient,\r\n        uint256 ethAmount\r\n    ) internal {\r\n        IPancakeRouter02 pancakeRouter = IPancakeRouter02(routerAddress);\r\n\r\n        // generate the pancake pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = pancakeRouter.WETH();\r\n        path[1] = buyBacktoken;\r\n\r\n        // make the swap\r\n        pancakeRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: ethAmount}(\r\n            0, // accept any amount of BNB\r\n            path,\r\n            address(recipient),\r\n            block.timestamp + 360\r\n        );\r\n    }\r\n    \r\n    \r\n    \r\n\r\n    function addLiquidity(\r\n        address routerAddress,\r\n        address owner,\r\n        uint256 tokenAmount,\r\n        uint256 ethAmount\r\n    ) internal {\r\n        IPancakeRouter02 pancakeRouter = IPancakeRouter02(routerAddress);\r\n\r\n        // add the liquidity\r\n        pancakeRouter.addLiquidityETH{value : ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            owner,\r\n            block.timestamp + 360\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier isHuman() {\r\n        require(tx.origin == msg.sender, \"sorry humans only\");\r\n        _;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract EVOLUTION is Context, IBEP20, Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => uint256) public winningAmount;\r\n    mapping(address => bool) public _isSniper;\r\n\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => bool) private _isExcludedFromBuyFee;\r\n    mapping(address => bool) private _isExcludedFromSellFee;\r\n    mapping(address => bool) private _isExcluded;\r\n    mapping(address => bool) private _isExcludedFromMaxTx;\r\n\r\n    address[] private _excluded;\r\n    address[] public pool1Winners;\r\n    address[] public pool2Winners;\r\n    address[] public pool3Winners;\r\n    address[] public pool4Winners;\r\n    address[] public pool5Winners;  \r\n    address[] public _confirmedSnipers;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal = 1 *1e9 * 1e18;\r\n    \r\n  \r\n    \r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n\r\n    string private _name = \"Evolution\";\r\n    string private _symbol = \"EVO\";\r\n    uint8 private _decimals = 18;\r\n\r\n    IPancakeRouter02 public pancakeRouter;\r\n    address public immutable pancakePair;\r\n    address payable public marketWallet;\r\n    address payable public developmentWallet;\r\n    address public burnAddress = 0x000000000000000000000000000000000000dEaD;\r\n    \r\n    // replace by default buyback for mainennet launch\r\n    address public buyBacktoken= 0x7ef95a0FEE0Dd31b22626fA2e10Ee6A223F8a684;\r\n    //\r\n\r\n    bool public swapAndLiquifyEnabled = false; // should be true to turn on to liquidate the pool\r\n    bool inSwapAndLiquify = false;\r\n    bool public reflectionFeesdisabled = false;\r\n    bool public buyBackEnabled = false;  // should be true to turn on to buy back from pool\r\n    uint256 public _launchTime; // can be set only once\r\n    uint256 public antiSnipingTime = 4 seconds; \r\n    bool public _tradingOpen = false; //once switched on, can never be switched off.\r\n    \r\n    bool public AllowContractTosell =true;\r\n    bool public marketingDevSwap = true;\r\n    \r\n    uint256 public _taxFee = 40; // 4% will be distributed among holder as EVO divideneds\r\n    uint256 private _previousTaxFee = _taxFee;\r\n\r\n    uint256 public _liquidityFee = 20; // 2% will be added to the liquidity pool\r\n    uint256 private _previousLiquidityFee = _liquidityFee;\r\n    \r\n    uint256 public _EvoBoostFee = 70;  // 7% will go to the EvoBoost pool \r\n    uint256 private _previousEvoBoostFee = _EvoBoostFee;\r\n    \r\n    uint256 public _marketFee = 40;  // 4% will go to the market address \r\n    uint256 private _previousMarketFee = _marketFee;\r\n    \r\n      uint256 public _devFee = 30;  // 3% will go to the market address \r\n    uint256 private _previousDevFee = _devFee;\r\n    \r\n    uint256 public _BuybackFee = 20;  // 2% will go to the buyBack Token \r\n    uint256 private _previousBuybackFee = _BuybackFee;\r\n    \r\n    uint256 public minTokenNumberToSell = _tTotal.div(100000); // 0.001% max tx amount will trigger swap and add liquidity\r\n    uint256 public _maxTxAmount = _tTotal.mul(2).div(1000); // should be 0.2% percent per transaction\r\n    \r\n    uint256 public _maxWalletAmount=_tTotal.mul(9).div(1000);\r\n    \r\n    uint256 public minBuy = 0; \r\n    uint256 buyBackLowerLimit = 0.1 ether;\r\n    uint256 buyBackUpperLimit = 1 ether;\r\n\r\n    //EvoBoost pools calculations\r\n    uint256 private pool1Count = 1;\r\n    uint256 private pool2Count = 1;\r\n    uint256 private pool3Count = 1;\r\n    uint256 private pool4Count = 1;\r\n    uint256 private pool5Count = 1;\r\n    uint256 private pool1Amount;\r\n    uint256 private pool2Amount;\r\n    uint256 private pool3Amount;\r\n    uint256 private pool4Amount;\r\n    uint256 private pool5Amount;\r\n    uint256 public pool1EvoBoost = 7;\r\n    uint256 public pool2EvoBoost = 47;\r\n    uint256 public pool3EvoBoost = 127;\r\n    uint256 public pool4EvoBoost = 547;\r\n    uint256 public pool5EvoBoost = 1027;\r\n    uint256 public pool1Percent = 30;\r\n    uint256 public pool2Percent = 10;\r\n    uint256 public pool3Percent = 10;\r\n    uint256 public pool4Percent = 10;\r\n    uint256 public pool5Percent = 10;\r\n    \r\n    mapping  (address => mapping (uint256 => uint256 ))  public countPerUserPerLevel ;\r\n\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n    \r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    constructor (address payable _marketWallet,address payable _devWallet) {\r\n        _rOwned[owner()] = _rTotal;\r\n        marketWallet = _marketWallet;\r\n        developmentWallet =_devWallet;\r\n        \r\n\r\n    IPancakeRouter02 _pancakeRouter = IPancakeRouter02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n    //Testnet IPancakeRouter02 _pancakeRouter = IPancakeRouter02(0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3);\r\n        // Create a pancake pair for this new token\r\n        pancakePair = IPancakeFactory(_pancakeRouter.factory())\r\n        .createPair(address(this), _pancakeRouter.WETH());\r\n    \r\n\r\n        // set the rest of the contract variables\r\n        pancakeRouter = _pancakeRouter;\r\n\r\n        //exclude owner and this contract from fee\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        \r\n\r\n        // exclude from max tx\r\n        _isExcludedFromMaxTx[owner()] = true;\r\n        _isExcludedFromMaxTx[address(this)] = true;\r\n        _isExcludedFromMaxTx[address(burnAddress)] = true;\r\n        \r\n        \r\n      \r\n        _isExcluded[buyBacktoken] = true;\r\n        //exclude from reward\r\n        _isExcluded[burnAddress] = true;\r\n\r\n        emit Transfer(address(0), owner(), _tTotal);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function isExcludedFromReward(address account) public view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    function totalFees() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n\r\n    function deliver(uint256 tAmount) public {\r\n        address sender = _msgSender();\r\n        require(!_isExcluded[sender], \"Excluded addresses cannot call this function\");\r\n        uint256 rAmount = tAmount.mul(_getRate());\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rTotal = _rTotal.sub(rAmount);\r\n        _tFeeTotal = _tFeeTotal.add(tAmount);\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns (uint256) {\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n        if (!deductTransferFee) {\r\n            uint256 rAmount = tAmount.mul(_getRate());\r\n            return rAmount;\r\n        } else {\r\n            uint256 rAmount = tAmount.mul(_getRate());\r\n            uint256 rTransferAmount = rAmount.sub(totalFeePerTx(tAmount).mul(_getRate()));\r\n            return rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns (uint256) {\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate = _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function excludeFromReward(address account) public onlyOwner {\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n        if (_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    function includeInReward(address account) external onlyOwner {\r\n        require(_isExcluded[account], \"Account is already excluded\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _rOwned[account] = _tOwned[account].mul(_getRate());\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    // admin setter functions\r\n    \r\n    // function setTradingOpen(bool value) external onlyOwner {\r\n    //     _tradingOpen = value;\r\n    // }\r\n\r\n    // for 1% input 100\r\n    function setMaxTxPercent(uint256 maxTxAmount) public onlyOwner {\r\n        _maxTxAmount = _tTotal.mul(maxTxAmount).div(10000);\r\n    }\r\n    \r\n     function setMaxWalletBalance(uint256 amount) external onlyOwner{\r\n        _maxWalletAmount = amount;\r\n    }\r\n    \r\n    function setMinTokenNumberToSell(uint256 _amount) public onlyOwner {\r\n        minTokenNumberToSell = _amount;\r\n    }\r\n\r\n    function setExcludeFromMaxTx(address _address, bool value) public onlyOwner {\r\n        _isExcludedFromMaxTx[_address] = value;\r\n    }\r\n    \r\n     function setBuyBackToken(address value) public onlyOwner {\r\n        buyBacktoken = value;\r\n        _isExcluded[buyBacktoken] = true;\r\n    }\r\n    \r\n      function setContractSell(bool value) public onlyOwner {\r\n        AllowContractTosell = value;\r\n    }\r\n    \r\n      function setMarketDevSwap(bool value) public onlyOwner {\r\n        marketingDevSwap = value;\r\n    }\r\n\r\n    function setBuyback(uint256 _upperAmount, uint256 _lowerAmount, bool _state) public onlyOwner {\r\n        buyBackEnabled = _state;\r\n        buyBackUpperLimit = _upperAmount;\r\n        buyBackLowerLimit = _lowerAmount;\r\n    }\r\n\r\n    function includeAndExcludeFromFee(address account, bool _state) public onlyOwner {\r\n        _isExcludedFromFee[account] = _state;\r\n    }\r\n\r\n    function includeAndExcludeFromBuyFee(address account, bool _state) public onlyOwner {\r\n        _isExcludedFromBuyFee[account] = _state;\r\n    }\r\n\r\n    function includeAndExcludeFromSellFee(address account, bool _state) public onlyOwner {\r\n        _isExcludedFromSellFee[account] = _state;\r\n    }\r\n\r\n    function setTaxFeePercent(uint256 taxFee) external onlyOwner {\r\n        _taxFee = taxFee;\r\n    }\r\n\r\n    function setLiquidityFeePercent(uint256 liquidityFee) external onlyOwner {\r\n        _liquidityFee = liquidityFee;\r\n    }\r\n    \r\n    function setEvoBoostFeePercent(uint256 EvoBoostFee) external onlyOwner {\r\n        _EvoBoostFee = EvoBoostFee;\r\n    }\r\n    \r\n    function setMarketFeePercent(uint256 marketFee) external onlyOwner {\r\n        _marketFee = marketFee;\r\n    }\r\n    \r\n    function setDevFeePercent(uint256 devFee) external onlyOwner {\r\n        _devFee  = devFee;\r\n    }\r\n    function setBuybackFeePercent(uint256 BuybackFee) external onlyOwner {\r\n        _BuybackFee = BuybackFee;\r\n    }\r\n\r\n    function setMinBuy(uint256 _minBuy) external onlyOwner {\r\n        minBuy = _minBuy;\r\n    }    \r\n    \r\n    function setTimeForSniping(uint256 _time) external onlyOwner {\r\n        antiSnipingTime = _time;\r\n    }\r\n\r\n    function startTrading() external onlyOwner {\r\n        _tradingOpen = true;\r\n        _launchTime = block.timestamp;\r\n       \r\n        swapAndLiquifyEnabled = true;\r\n        // approve contract\r\n        _approve(address(this), address(pancakeRouter), 2 ** 256 - 1);\r\n    }\r\n\r\n    function setSwapAndLiquifyEnabled(bool _state) public onlyOwner {\r\n        swapAndLiquifyEnabled = _state;\r\n        emit SwapAndLiquifyEnabledUpdated(_state);\r\n    }\r\n    \r\n    function setReflectionFees(bool _state) external onlyOwner {\r\n        reflectionFeesdisabled = _state;\r\n    }\r\n    \r\n    function setMarketAddress(address payable _marketAddress) external onlyOwner {\r\n        marketWallet = _marketAddress;\r\n    }\r\n    \r\n    function setDevlopmentAddress(address payable value) external onlyOwner {\r\n    developmentWallet = value;\r\n    }\r\n    \r\n    function setPancakeRouter(IPancakeRouter02 _pancakeRouter) external onlyOwner {\r\n        pancakeRouter = _pancakeRouter;\r\n    }\r\n\r\n    function setEvoBoostPools(uint256 _count1,uint256 _count2,uint256 _count3,uint256 _count4,uint256 _count5) external onlyOwner {\r\n        pool1EvoBoost = _count1;\r\n        pool2EvoBoost = _count2;\r\n        pool3EvoBoost = _count3;\r\n        pool4EvoBoost = _count4;\r\n        pool5EvoBoost = _count5;\r\n    }\r\n\r\n    function setEvoBoostPoolsPercent(uint256 _percent1,uint256 _percent2,uint256 _percent3,uint256 _percent4,uint256 _percent5) external onlyOwner {\r\n        pool1Percent = _percent1;\r\n        pool2Percent = _percent2;\r\n        pool3Percent = _percent3;\r\n        pool4Percent = _percent4;\r\n        pool5Percent = _percent5;\r\n    }\r\n\r\n    //to receive BNB from pancakeRouter when swapping\r\n    receive() external payable {}\r\n    \r\n    function totalFeePerTx(uint256 tAmount) internal view returns(uint256) {\r\n        uint256 percentage = tAmount.mul(_taxFee.add(_liquidityFee).add(_EvoBoostFee).add(_marketFee).add(_devFee).add(_BuybackFee)).div(1e3);\r\n        return percentage;\r\n    }\r\n    \r\n    // distribution to holders\r\n    function _reflectFee(uint256 tAmount) private {\r\n        uint256 tFee = tAmount.mul(_taxFee).div(1e3);\r\n        uint256 rFee = tFee.mul(_getRate());\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n    }\r\n\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\r\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\r\n        }\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function _takeBothPoolFee(uint256 tAmount, uint256 currentRate) internal {\r\n        uint256 tPoolFee = tAmount.mul(_liquidityFee.add(_EvoBoostFee).add(_marketFee).add(_BuybackFee).add(_devFee)).div(1e3);\r\n        uint256 rPoolFee = tPoolFee.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rPoolFee);\r\n        if (_isExcluded[address(this)])\r\n            _tOwned[address(this)] = _tOwned[address(this)].add(tPoolFee);\r\n        emit Transfer(_msgSender(), address(this), tPoolFee);\r\n    }\r\n    \r\n    // function _takeMarketFee(uint256 tAmount, uint256 currentRate) internal {\r\n    //     uint256 tMarketFee = tAmount.mul(_marketFee).div(1e3);\r\n    //     uint256 rMarketFee = tMarketFee.mul(currentRate);\r\n    //     _rOwned[marketWallet] = _rOwned[marketWallet].add(rMarketFee);\r\n    //     if (_isExcluded[burnAddress])\r\n    //         _tOwned[marketWallet] = _tOwned[marketWallet].add(tMarketFee);\r\n    //     emit Transfer(_msgSender(), marketWallet, tMarketFee);\r\n    // }\r\n    \r\n    // function _takeBuybackFee(uint256 tAmount, uint256 currentRate) internal {\r\n    //     uint256 BuybackFee = tAmount.mul(_BuybackFee).div(1e3);\r\n    //     uint256 rBuybackFee = BuybackFee.mul(currentRate);\r\n    //     _rOwned[burnAddress] = _rOwned[burnAddress].add(rBuybackFee);\r\n    //     if (_isExcluded[burnAddress])\r\n    //         _tOwned[burnAddress] = _tOwned[burnAddress].add(BuybackFee);\r\n    //     emit Transfer(_msgSender(), burnAddress, BuybackFee);\r\n    // }\r\n\r\n    function removeAllFee() private {\r\n        _previousTaxFee = _taxFee;\r\n        _previousLiquidityFee = _liquidityFee;\r\n        _previousEvoBoostFee = _EvoBoostFee;\r\n        _previousMarketFee = _marketFee;\r\n        _previousBuybackFee = _BuybackFee;\r\n         _previousDevFee =  _devFee ;\r\n\r\n        _taxFee = 0;\r\n        _liquidityFee = 0;\r\n        _EvoBoostFee = 0;\r\n        _marketFee = 0;\r\n        _BuybackFee = 0;\r\n        _devFee=0;\r\n    }\r\n    \r\n    function removeBuyFee() private {\r\n        _previousEvoBoostFee = _EvoBoostFee;\r\n\r\n        _EvoBoostFee = 0;\r\n    }\r\n    \r\n    function removeSellFee() private {\r\n        _previousTaxFee = _taxFee;\r\n        _previousDevFee  = _devFee ;\r\n\r\n        _taxFee = 0;\r\n        _devFee  = 0;\r\n    }\r\n\r\n    function restoreAllFee() private {\r\n        _taxFee = _previousTaxFee;\r\n        _liquidityFee = _previousLiquidityFee;\r\n        _EvoBoostFee = _previousEvoBoostFee;\r\n        _marketFee = _previousMarketFee;\r\n        _BuybackFee = _previousBuybackFee;\r\n         _devFee  = _previousDevFee ;\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function getContractBalance() public view returns(uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getCurrentPrice() public view returns(uint256){\r\n        (uint256 token, uint256 Wbnb,) = IPancakePair(pancakePair).getReserves();\r\n        uint256 currentRate = Wbnb.div(token.div(1e9));\r\n        return currentRate;\r\n    }\r\n\r\n    function _addSniperInList(address account) external onlyOwner() {\r\n        require(account != address(pancakeRouter), 'We can not blacklist pancakeRouter');\r\n        require(!_isSniper[account], \"Account is already blacklisted\");\r\n        _isSniper[account] = true;\r\n        _confirmedSnipers.push(account);\r\n    }\r\n\r\n    function _removeSniperFromList(address account) external onlyOwner() {\r\n        require(_isSniper[account], \"Account is not blacklisted\");\r\n        for (uint256 i = 0; i < _confirmedSnipers.length; i++) {\r\n            if (_confirmedSnipers[i] == account) {\r\n                _confirmedSnipers[i] = _confirmedSnipers[_confirmedSnipers.length - 1];\r\n                _isSniper[account] = false;\r\n                _confirmedSnipers.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"BEP20: transfer from the zero address\");\r\n        require(to != address(0), \"BEP20: transfer to the zero address\");\r\n        require(amount > 0, \"BEP20: amount must be greater than zero\");\r\n        require(!_isSniper[to], \"You shall not pass!\");\r\n        require(!_isSniper[from], \"You shall not pass!\");\r\n\r\n        if(from == pancakePair && to != address(this)){\r\n            require(amount >= minBuy,\"EVO: amount less than minimum buy\"); \r\n        }\r\n\r\n        if(_isExcludedFromMaxTx[from] == false && \r\n            _isExcludedFromMaxTx[to] == false   // by default false\r\n        ){\r\n            require(amount <= _maxTxAmount,\"BEP20: amount exceeded max limit\");\r\n            \r\n               if(!_isExcludedFromMaxTx[to] && to != pancakePair){\r\n            require(balanceOf(to).add(amount) <= _maxWalletAmount, 'Recipient balance is exceeding maxWalletBalance');\r\n        }    \r\n\r\n            if (!_tradingOpen){\r\n                    require(to != pancakePair, \"Trading is not enabled\");\r\n            }\r\n\r\n          if (block.timestamp < _launchTime + antiSnipingTime && from != address(pancakeRouter)) {\r\n                if (from == pancakePair) {\r\n                    _isSniper[to] = true;\r\n                    _confirmedSnipers.push(to);\r\n                }else if (to == pancakePair){\r\n                    _isSniper[from] = true;\r\n                    _confirmedSnipers.push(from);\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        // swap\r\n        if (AllowContractTosell == true)\r\n                 swaps(from, to);\r\n\r\n        //indicates if fee should be deducted from transfer\r\n        bool takeFee = true;\r\n\r\n        //if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to] || reflectionFeesdisabled) {\r\n            takeFee = false;\r\n        }\r\n\r\n        //transfer amount, it will take tax, burn, liquidity fee\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n    }\r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {\r\n        if (!takeFee)\r\n            removeAllFee();\r\n        else if(sender == pancakePair){\r\n            if(!_isExcludedFromBuyFee[recipient]){\r\n                removeSellFee();\r\n                checkEvoBoost(recipient, amount);\r\n            }else{\r\n                removeAllFee();\r\n            }\r\n            takeFee = false;\r\n        }\r\n        else{\r\n            if(!_isExcludedFromSellFee[recipient]){\r\n                removeBuyFee();\r\n            }else{\r\n                removeAllFee();\r\n            }\r\n            takeFee = false;\r\n        }\r\n\r\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferFromExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferToExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferStandard(sender, recipient, amount);\r\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferBothExcluded(sender, recipient, amount);\r\n        } else {\r\n            _transferStandard(sender, recipient, amount);\r\n        }\r\n\r\n        if (!takeFee)\r\n            restoreAllFee();\r\n    }\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 tTransferAmount = tAmount.sub(totalFeePerTx(tAmount));\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(totalFeePerTx(tAmount).mul(currentRate));\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeBothPoolFee(tAmount, currentRate);\r\n\r\n        _reflectFee(tAmount);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 tTransferAmount = tAmount.sub(totalFeePerTx(tAmount));\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(totalFeePerTx(tAmount).mul(currentRate));\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeBothPoolFee(tAmount, currentRate);\r\n    \r\n        _reflectFee(tAmount);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 tTransferAmount = tAmount.sub(totalFeePerTx(tAmount));\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(totalFeePerTx(tAmount).mul(currentRate));\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeBothPoolFee(tAmount, currentRate);\r\n\r\n        _reflectFee(tAmount);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n    \r\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 tTransferAmount = tAmount.sub(totalFeePerTx(tAmount));\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(totalFeePerTx(tAmount).mul(currentRate));\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeBothPoolFee(tAmount, currentRate);\r\n\r\n        _reflectFee(tAmount);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n    \r\n    function checkEvoBoost(address user, uint256 amount) internal{\r\n\r\n        if(pool1Count == pool1EvoBoost){\r\n            distributeEvoBoost(user, pool1Amount,1);\r\n            pool1Winners.push(user);\r\n            pool1Amount = 0;\r\n            pool1Count = 1;\r\n        }\r\n        if(pool2Count == pool2EvoBoost){\r\n            distributeEvoBoost(user, pool2Amount,2);\r\n            pool2Winners.push(user);\r\n            pool2Amount = 0;\r\n            pool2Count = 1;\r\n        }\r\n        if(pool3Count == pool3EvoBoost){\r\n            distributeEvoBoost(user, pool3Amount,3);\r\n            pool3Winners.push(user);\r\n            pool3Amount = 0;\r\n            pool3Count = 1;\r\n        }\r\n        if(pool4Count == pool4EvoBoost){\r\n            distributeEvoBoost(user, pool4Amount,4);\r\n            pool4Winners.push(user);\r\n            pool4Amount = 0;\r\n            pool4Count = 1;\r\n        }\r\n        if(pool5Count == pool5EvoBoost){\r\n            distributeEvoBoost(user, pool5Amount,5);\r\n            pool5Winners.push(user);\r\n            pool5Amount = 0;\r\n            pool5Count = 1;\r\n        }\r\n\r\n        pool1Count++;\r\n        pool2Count++;\r\n        pool3Count++;\r\n        pool4Count++;\r\n        pool5Count++;\r\n\r\n        pool1Amount = pool1Amount.add(amount.mul(pool1Percent).div(1000));\r\n        pool2Amount = pool2Amount.add(amount.mul(pool2Percent).div(1000));\r\n        pool3Amount = pool3Amount.add(amount.mul(pool3Percent).div(1000));\r\n        pool4Amount = pool4Amount.add(amount.mul(pool4Percent).div(1000));\r\n        pool5Amount = pool5Amount.add(amount.mul(pool5Percent).div(1000));\r\n    \r\n    }\r\n\r\n    function distributeEvoBoost(address user, uint256 amount ,uint256 level) internal{\r\n        winningAmount[user] = winningAmount[user].add(amount);\r\n        countPerUserPerLevel[user][level]++;\r\n        _rOwned[user] = _rOwned[user].add(amount.mul(_getRate()));\r\n        if (_isExcluded[user])\r\n            _tOwned[user] = _tOwned[user].add(amount);\r\n        emit Transfer(address(this), user, amount);\r\n    }\r\n\r\n    function swaps(address from, address to) private {\r\n        // is the token balance of this contract address over the min number of\r\n        // tokens that we need to initiate a swap + liquidity lock?\r\n        // also, don't get caught in a circular liquidity event.\r\n        // also, don't swap & liquify if sender is pancake pair.\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        uint256 swapAmount;\r\n        swapAmount = contractTokenBalance.sub(pool1Amount.add(pool2Amount).add(pool3Amount).add(pool4Amount).add(pool5Amount));\r\n        if (swapAmount >= _maxTxAmount) {\r\n            swapAmount = _maxTxAmount;\r\n        }\r\n\r\n        bool shouldSell = swapAmount >= minTokenNumberToSell;\r\n\r\n        // can not trigger on buy transactions\r\n        if (\r\n            !inSwapAndLiquify &&\r\n            shouldSell &&\r\n            from != pancakePair &&\r\n            swapAndLiquifyEnabled &&\r\n            !(from == address(this) && to == pancakePair) // swap 1 time \r\n        ) {\r\n            // only sell for minTokenNumberToSell, decouple from _maxTxAmount\r\n            // split the contract balance into 2 pieces\r\n            \r\n            swapAmount = minTokenNumberToSell;\r\n            \r\n            \r\n            uint256 liquidityAmtToken = swapAmount * _liquidityFee / (_liquidityFee + _marketFee + _devFee + _BuybackFee);\r\n             uint256 marketAmtToken;\r\n              uint256 devAmtToken;\r\n             \r\n            \r\n            \r\n            \r\n\r\n            // add liquidity\r\n            // split the contract balance into 2 pieces\r\n            \r\n            uint256 otherPiece = liquidityAmtToken.div(2);\r\n            uint256 tokenAmountToBeSwapped = liquidityAmtToken.sub(otherPiece);\r\n            \r\n            uint256 initialBalance = address(this).balance;\r\n\r\n            // now is to lock into staking pool\r\n            Utils.swapTokensForEth(address(pancakeRouter), tokenAmountToBeSwapped);\r\n\r\n            // how much BNB did we just swap into?\r\n\r\n            // capture the contract's current BNB balance.\r\n            // this is so that we can capture exactly the amount of BNB that the\r\n            // swap creates, and not make the liquidity event include any BNB that\r\n            // has been manually sent to the contract\r\n\r\n            uint256 bnbToBeAddedToLiquidity = address(this).balance.sub(initialBalance);\r\n\r\n            // add liquidity to pancake\r\n            Utils.addLiquidity(address(pancakeRouter), owner(), otherPiece, bnbToBeAddedToLiquidity);\r\n            \r\n            if(marketingDevSwap == true){\r\n                \r\n                 marketAmtToken = swapAmount * _marketFee / (_liquidityFee + _marketFee + _devFee + _BuybackFee);\r\n                 devAmtToken = swapAmount * _devFee / (_liquidityFee + _marketFee + _devFee + _BuybackFee);\r\n                \r\n                uint256 beforeBalance = address(this).balance;\r\n                 Utils.swapTokensForEth(address(pancakeRouter), marketAmtToken + devAmtToken );\r\n                    uint256 bnbForMarketDev = address(this).balance.sub(beforeBalance);\r\n                    uint256 bnbForMarket = bnbForMarketDev * _marketFee /(_marketFee + _devFee);\r\n                    uint256 bnbForDev = bnbForMarketDev - bnbForMarket;\r\n                   \r\n                    (bool successMark, ) = marketWallet.call{value:bnbForMarket}(\"\");\r\n                    require(successMark, \"Transfer failed.\");\r\n                    \r\n                     (bool successDev, ) = developmentWallet.call{value:bnbForDev}(\"\");\r\n                    require(successDev, \"Transfer failed.\");\r\n                \r\n                \r\n            }\r\n            \r\n            if(buyBackEnabled== true){\r\n            \r\n            uint256 remaininigTokens = swapAmount-liquidityAmtToken -marketAmtToken-devAmtToken;\r\n             Utils.swapTokensForEth(address(pancakeRouter), remaininigTokens );\r\n            \r\n            uint256 balanceBeforeBuyback = address(this).balance;\r\n            \r\n            // buy back if balance bnb is exceed upper limit\r\n            if ( balanceBeforeBuyback > uint256(buyBackLowerLimit)) {\r\n                \r\n                if (balanceBeforeBuyback > buyBackUpperLimit)\r\n                    balanceBeforeBuyback = buyBackUpperLimit;\r\n                \r\n                // buyBackTokens(initialBalance.mul(buyBackLowerLimit).div(100));\r\n                Utils.swapETHForBuyBackToken(buyBacktoken,address(pancakeRouter), burnAddress, balanceBeforeBuyback.div(10));\r\n            }\r\n            }\r\n            \r\n            emit SwapAndLiquify(tokenAmountToBeSwapped, bnbToBeAddedToLiquidity, otherPiece);\r\n        }\r\n    }\r\n    \r\n    \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_marketWallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_devWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AllowContractTosell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_BuybackFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_EvoBoostFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_addSniperInList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_confirmedSnipers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_devFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isSniper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_launchTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_removeSniperFromList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiSnipingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBacktoken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"countPerUserPerLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developmentWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"includeAndExcludeFromBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"includeAndExcludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"includeAndExcludeFromSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingDevSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTokenNumberToSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakePair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeRouter\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool1EvoBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool1Percent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool1Winners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool2EvoBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool2Percent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool2Winners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool3EvoBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool3Percent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool3Winners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool4EvoBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool4Percent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool4Winners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool5EvoBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool5Percent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool5Winners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reflectionFeesdisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setBuyBackToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_upperAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lowerAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setBuyback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"BuybackFee\",\"type\":\"uint256\"}],\"name\":\"setBuybackFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setContractSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"devFee\",\"type\":\"uint256\"}],\"name\":\"setDevFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setDevlopmentAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"EvoBoostFee\",\"type\":\"uint256\"}],\"name\":\"setEvoBoostFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_count2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_count3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_count4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_count5\",\"type\":\"uint256\"}],\"name\":\"setEvoBoostPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percent2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percent3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percent4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percent5\",\"type\":\"uint256\"}],\"name\":\"setEvoBoostPoolsPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setExcludeFromMaxTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"name\":\"setLiquidityFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_marketAddress\",\"type\":\"address\"}],\"name\":\"setMarketAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setMarketDevSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketFee\",\"type\":\"uint256\"}],\"name\":\"setMarketFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBuy\",\"type\":\"uint256\"}],\"name\":\"setMinBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMinTokenNumberToSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPancakeRouter02\",\"name\":\"_pancakeRouter\",\"type\":\"address\"}],\"name\":\"setPancakeRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setReflectionFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"}],\"name\":\"setTaxFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setTimeForSniping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"winningAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "EVOLUTION", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000e97de7574316703b232427ee5026735b1c68c7520000000000000000000000000db529abe164481502fa864975c3a498738dadfc", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4102e107027db7032a4608a2273313f734e38c3ff854062f7c1bd8e785b04356"}