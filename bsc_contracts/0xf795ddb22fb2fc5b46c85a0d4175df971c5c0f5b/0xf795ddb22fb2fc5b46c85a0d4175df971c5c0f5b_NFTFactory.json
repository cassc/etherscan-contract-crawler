{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n// Sources flattened with hardhat v2.9.3 https://hardhat.org\r\n\r\n// File contracts/utils/AccessControl.sol\r\n\r\n\r\npragma solidity 0.8.18;\r\n\r\n/**\r\n * @title Access Control List\r\n *\r\n * @notice Access control smart contract provides an API to check\r\n *      if specific operation is permitted globally and/or\r\n *      if particular user has a permission to execute it.\r\n *\r\n * @notice It deals with two main entities: features and roles.\r\n *\r\n * @notice Features are designed to be used to enable/disable specific\r\n *      functions (public functions) of the smart contract for everyone.\r\n * @notice User roles are designed to restrict access to specific\r\n *      functions (restricted functions) of the smart contract to some users.\r\n *\r\n * @notice Terms \"role\", \"permissions\" and \"set of permissions\" have equal meaning\r\n *      in the documentation text and may be used interchangeably.\r\n * @notice Terms \"permission\", \"single permission\" implies only one permission bit set.\r\n *\r\n * @notice Access manager is a special role which allows to grant/revoke other roles.\r\n *      Access managers can only grant/revoke permissions which they have themselves.\r\n *      As an example, access manager with no other roles set can only grant/revoke its own\r\n *      access manager permission and nothing else.\r\n *\r\n * @notice Access manager permission should be treated carefully, as a super admin permission:\r\n *      Access manager with even no other permission can interfere with another account by\r\n *      granting own access manager permission to it and effectively creating more powerful\r\n *      permission set than its own.\r\n *\r\n * @dev Both current and OpenZeppelin AccessControl implementations feature a similar API\r\n *      to check/know \"who is allowed to do this thing\".\r\n * @dev Zeppelin implementation is more flexible:\r\n *      - it allows setting unlimited number of roles, while current is limited to 256 different roles\r\n *      - it allows setting an admin for each role, while current allows having only one global admin\r\n * @dev Current implementation is more lightweight:\r\n *      - it uses only 1 bit per role, while Zeppelin uses 256 bits\r\n *      - it allows setting up to 256 roles at once, in a single transaction, while Zeppelin allows\r\n *        setting only one role in a single transaction\r\n *\r\n * @dev This smart contract is designed to be inherited by other\r\n *      smart contracts which require access control management capabilities.\r\n *\r\n * @dev Access manager permission has a bit 255 set.\r\n *      This bit must not be used by inheriting contracts for any other permissions/features.\r\n */\r\ncontract AccessControl {\r\n\t/**\r\n\t * @notice Access manager is responsible for assigning the roles to users,\r\n\t *      enabling/disabling global features of the smart contract\r\n\t * @notice Access manager can add, remove and update user roles,\r\n\t *      remove and update global features\r\n\t *\r\n\t * @dev Role ROLE_ACCESS_MANAGER allows modifying user roles and global features\r\n\t * @dev Role ROLE_ACCESS_MANAGER has single bit at position 255 enabled\r\n\t */\r\n\tuint256 public constant ROLE_ACCESS_MANAGER = 0x8000000000000000000000000000000000000000000000000000000000000000;\r\n\r\n\t/**\r\n\t * @dev Bitmask representing all the possible permissions (super admin role)\r\n\t * @dev Has all the bits are enabled (2^256 - 1 value)\r\n\t */\r\n\tuint256 private constant FULL_PRIVILEGES_MASK = type(uint256).max; // before 0.8.0: uint256(-1) overflows to 0xFFFF...\r\n\r\n\t/**\r\n\t * @notice Privileged addresses with defined roles/permissions\r\n\t * @notice In the context of ERC20/ERC721 tokens these can be permissions to\r\n\t *      allow minting or burning tokens, transferring on behalf and so on\r\n\t *\r\n\t * @dev Maps user address to the permissions bitmask (role), where each bit\r\n\t *      represents a permission\r\n\t * @dev Bitmask 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\r\n\t *      represents all possible permissions\r\n\t * @dev 'This' address mapping represents global features of the smart contract\r\n\t */\r\n\tmapping(address => uint256) public userRoles;\r\n\r\n\t/**\r\n\t * @dev Fired in updateRole() and updateFeatures()\r\n\t *\r\n\t * @param _by operator which called the function\r\n\t * @param _to address which was granted/revoked permissions\r\n\t * @param _requested permissions requested\r\n\t * @param _actual permissions effectively set\r\n\t */\r\n\tevent RoleUpdated(address indexed _by, address indexed _to, uint256 _requested, uint256 _actual);\r\n\r\n\t/**\r\n\t * @notice Creates an access control instance,\r\n\t *      setting contract creator to have full privileges\r\n\t */\r\n\tconstructor() {\r\n\t\t// contract creator has full privileges\r\n\t\tuserRoles[msg.sender] = FULL_PRIVILEGES_MASK;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Retrieves globally set of features enabled\r\n\t *\r\n\t * @dev Effectively reads userRoles role for the contract itself\r\n\t *\r\n\t * @return 256-bit bitmask of the features enabled\r\n\t */\r\n\tfunction features() public view returns(uint256) {\r\n\t\t// features are stored in 'this' address  mapping of `userRoles` structure\r\n\t\treturn userRoles[address(this)];\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Updates set of the globally enabled features (`features`),\r\n\t *      taking into account sender's permissions\r\n\t *\r\n\t * @dev Requires transaction sender to have `ROLE_ACCESS_MANAGER` permission\r\n\t * @dev Function is left for backward compatibility with older versions\r\n\t *\r\n\t * @param _mask bitmask representing a set of features to enable/disable\r\n\t */\r\n\tfunction updateFeatures(uint256 _mask) public {\r\n\t\t// delegate call to `updateRole`\r\n\t\tupdateRole(address(this), _mask);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Updates set of permissions (role) for a given user,\r\n\t *      taking into account sender's permissions.\r\n\t *\r\n\t * @dev Setting role to zero is equivalent to removing an all permissions\r\n\t * @dev Setting role to `FULL_PRIVILEGES_MASK` is equivalent to\r\n\t *      copying senders' permissions (role) to the user\r\n\t * @dev Requires transaction sender to have `ROLE_ACCESS_MANAGER` permission\r\n\t *\r\n\t * @param operator address of a user to alter permissions for or zero\r\n\t *      to alter global features of the smart contract\r\n\t * @param role bitmask representing a set of permissions to\r\n\t *      enable/disable for a user specified\r\n\t */\r\n\tfunction updateRole(address operator, uint256 role) public {\r\n\t\t// caller must have a permission to update user roles\r\n\t\trequire(isSenderInRole(ROLE_ACCESS_MANAGER), \"access denied\");\r\n\r\n\t\t// evaluate the role and reassign it\r\n\t\tuserRoles[operator] = evaluateBy(msg.sender, userRoles[operator], role);\r\n\r\n\t\t// fire an event\r\n\t\temit RoleUpdated(msg.sender, operator, role, userRoles[operator]);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Determines the permission bitmask an operator can set on the\r\n\t *      target permission set\r\n\t * @notice Used to calculate the permission bitmask to be set when requested\r\n\t *     in `updateRole` and `updateFeatures` functions\r\n\t *\r\n\t * @dev Calculated based on:\r\n\t *      1) operator's own permission set read from userRoles[operator]\r\n\t *      2) target permission set - what is already set on the target\r\n\t *      3) desired permission set - what do we want set target to\r\n\t *\r\n\t * @dev Corner cases:\r\n\t *      1) Operator is super admin and its permission set is `FULL_PRIVILEGES_MASK`:\r\n\t *        `desired` bitset is returned regardless of the `target` permission set value\r\n\t *        (what operator sets is what they get)\r\n\t *      2) Operator with no permissions (zero bitset):\r\n\t *        `target` bitset is returned regardless of the `desired` value\r\n\t *        (operator has no authority and cannot modify anything)\r\n\t *\r\n\t * @dev Example:\r\n\t *      Consider an operator with the permissions bitmask     00001111\r\n\t *      is about to modify the target permission set          01010101\r\n\t *      Operator wants to set that permission set to          00110011\r\n\t *      Based on their role, an operator has the permissions\r\n\t *      to update only lowest 4 bits on the target, meaning that\r\n\t *      high 4 bits of the target set in this example is left\r\n\t *      unchanged and low 4 bits get changed as desired:      01010011\r\n\t *\r\n\t * @param operator address of the contract operator which is about to set the permissions\r\n\t * @param target input set of permissions to operator is going to modify\r\n\t * @param desired desired set of permissions operator would like to set\r\n\t * @return resulting set of permissions given operator will set\r\n\t */\r\n\tfunction evaluateBy(address operator, uint256 target, uint256 desired) public view returns(uint256) {\r\n\t\t// read operator's permissions\r\n\t\tuint256 p = userRoles[operator];\r\n\r\n\t\t// taking into account operator's permissions,\r\n\t\t// 1) enable the permissions desired on the `target`\r\n\t\ttarget |= p & desired;\r\n\t\t// 2) disable the permissions desired on the `target`\r\n\t\ttarget &= FULL_PRIVILEGES_MASK ^ (p & (FULL_PRIVILEGES_MASK ^ desired));\r\n\r\n\t\t// return calculated result\r\n\t\treturn target;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Checks if requested set of features is enabled globally on the contract\r\n\t *\r\n\t * @param required set of features to check against\r\n\t * @return true if all the features requested are enabled, false otherwise\r\n\t */\r\n\tfunction isFeatureEnabled(uint256 required) public view returns(bool) {\r\n\t\t// delegate call to `__hasRole`, passing `features` property\r\n\t\treturn __hasRole(features(), required);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Checks if transaction sender `msg.sender` has all the permissions required\r\n\t *\r\n\t * @param required set of permissions (role) to check against\r\n\t * @return true if all the permissions requested are enabled, false otherwise\r\n\t */\r\n\tfunction isSenderInRole(uint256 required) public view returns(bool) {\r\n\t\t// delegate call to `isOperatorInRole`, passing transaction sender\r\n\t\treturn isOperatorInRole(msg.sender, required);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Checks if operator has all the permissions (role) required\r\n\t *\r\n\t * @param operator address of the user to check role for\r\n\t * @param required set of permissions (role) to check\r\n\t * @return true if all the permissions requested are enabled, false otherwise\r\n\t */\r\n\tfunction isOperatorInRole(address operator, uint256 required) public view returns(bool) {\r\n\t\t// delegate call to `__hasRole`, passing operator's permissions (role)\r\n\t\treturn __hasRole(userRoles[operator], required);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Checks if role `actual` contains all the permissions required `required`\r\n\t *\r\n\t * @param actual existent role\r\n\t * @param required required role\r\n\t * @return true if actual has required role (all permissions), false otherwise\r\n\t */\r\n\tfunction __hasRole(uint256 actual, uint256 required) internal pure returns(bool) {\r\n\t\t// check the bitmask for the role required and return the result\r\n\t\treturn actual & required == required;\r\n\t}\r\n}\r\n\r\n\r\n// File contracts/interfaces/MintableERC721.sol\r\n\r\n\r\npragma solidity 0.8.18;\r\n\r\n/**\r\n * @title Mintable ERC721\r\n *\r\n * @notice Defines mint capabilities for MemeCrafter ERC721 tokens.\r\n *      This interface should be treated as a definition of what mintable means for ERC721\r\n */\r\ninterface MintableERC721 {\r\n    /**\r\n\t * @dev Creates new token with token ID specified\r\n\t *      and assigns an ownership `_to` for this token\r\n\t *\r\n\t * @dev Should have a restricted access handled by the implementation\r\n\t *\r\n\t * @param to_ an address to mint token to\r\n\t * @param tokenId_ ID of the token to mint\r\n\t */\r\n\tfunction mint(address to_, uint256 tokenId_) external;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/math/Math.sol@v4.8.2\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    enum Rounding {\r\n        Down, // Toward negative infinity\r\n        Up, // Toward infinity\r\n        Zero // Toward zero\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow.\r\n        return (a & b) + (a ^ b) / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds up instead\r\n     * of rounding down.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a == 0 ? 0 : (a - 1) / b + 1;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\r\n     * with further edits by Uniswap Labs also under MIT license.\r\n     */\r\n    function mulDiv(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 denominator\r\n    ) internal pure returns (uint256 result) {\r\n        unchecked {\r\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\r\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\r\n            // variables such that product = prod1 * 2^256 + prod0.\r\n            uint256 prod0; // Least significant 256 bits of the product\r\n            uint256 prod1; // Most significant 256 bits of the product\r\n            assembly {\r\n                let mm := mulmod(x, y, not(0))\r\n                prod0 := mul(x, y)\r\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n            }\r\n\r\n            // Handle non-overflow cases, 256 by 256 division.\r\n            if (prod1 == 0) {\r\n                return prod0 / denominator;\r\n            }\r\n\r\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\r\n            require(denominator > prod1);\r\n\r\n            ///////////////////////////////////////////////\r\n            // 512 by 256 division.\r\n            ///////////////////////////////////////////////\r\n\r\n            // Make division exact by subtracting the remainder from [prod1 prod0].\r\n            uint256 remainder;\r\n            assembly {\r\n                // Compute remainder using mulmod.\r\n                remainder := mulmod(x, y, denominator)\r\n\r\n                // Subtract 256 bit number from 512 bit number.\r\n                prod1 := sub(prod1, gt(remainder, prod0))\r\n                prod0 := sub(prod0, remainder)\r\n            }\r\n\r\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\r\n            // See https://cs.stackexchange.com/q/138556/92363.\r\n\r\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\r\n            uint256 twos = denominator & (~denominator + 1);\r\n            assembly {\r\n                // Divide denominator by twos.\r\n                denominator := div(denominator, twos)\r\n\r\n                // Divide [prod1 prod0] by twos.\r\n                prod0 := div(prod0, twos)\r\n\r\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\r\n                twos := add(div(sub(0, twos), twos), 1)\r\n            }\r\n\r\n            // Shift in bits from prod1 into prod0.\r\n            prod0 |= prod1 * twos;\r\n\r\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\r\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\r\n            // four bits. That is, denominator * inv = 1 mod 2^4.\r\n            uint256 inverse = (3 * denominator) ^ 2;\r\n\r\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\r\n            // in modular arithmetic, doubling the correct bits in each step.\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\r\n\r\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\r\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\r\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\r\n            // is no longer required.\r\n            result = prod0 * inverse;\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\r\n     */\r\n    function mulDiv(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 denominator,\r\n        Rounding rounding\r\n    ) internal pure returns (uint256) {\r\n        uint256 result = mulDiv(x, y, denominator);\r\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\r\n            result += 1;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\r\n     *\r\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\r\n     */\r\n    function sqrt(uint256 a) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\r\n        //\r\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\r\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\r\n        //\r\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\r\n        // \u0393\u00e5\u00c6 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\r\n        // \u0393\u00e5\u00c6 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\r\n        //\r\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\r\n        uint256 result = 1 << (log2(a) >> 1);\r\n\r\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\r\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\r\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\r\n        // into the expected uint128 result.\r\n        unchecked {\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            return min(result, a / result);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates sqrt(a), following the selected rounding direction.\r\n     */\r\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = sqrt(a);\r\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 128;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 64;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 32;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 16;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                value >>= 8;\r\n                result += 8;\r\n            }\r\n            if (value >> 4 > 0) {\r\n                value >>= 4;\r\n                result += 4;\r\n            }\r\n            if (value >> 2 > 0) {\r\n                value >>= 2;\r\n                result += 2;\r\n            }\r\n            if (value >> 1 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log2(value);\r\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >= 10**64) {\r\n                value /= 10**64;\r\n                result += 64;\r\n            }\r\n            if (value >= 10**32) {\r\n                value /= 10**32;\r\n                result += 32;\r\n            }\r\n            if (value >= 10**16) {\r\n                value /= 10**16;\r\n                result += 16;\r\n            }\r\n            if (value >= 10**8) {\r\n                value /= 10**8;\r\n                result += 8;\r\n            }\r\n            if (value >= 10**4) {\r\n                value /= 10**4;\r\n                result += 4;\r\n            }\r\n            if (value >= 10**2) {\r\n                value /= 10**2;\r\n                result += 2;\r\n            }\r\n            if (value >= 10**1) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log10(value);\r\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     *\r\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\r\n     */\r\n    function log256(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 16;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 8;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 4;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 2;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log256(value);\r\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Strings.sol@v4.8.2\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\r\n    uint8 private constant _ADDRESS_LENGTH = 20;\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            uint256 length = Math.log10(value) + 1;\r\n            string memory buffer = new string(length);\r\n            uint256 ptr;\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                ptr := add(buffer, add(32, length))\r\n            }\r\n            while (true) {\r\n                ptr--;\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\r\n                }\r\n                value /= 10;\r\n                if (value == 0) break;\r\n            }\r\n            return buffer;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            return toHexString(value, Math.log256(value) + 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(address addr) internal pure returns (string memory) {\r\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/cryptography/ECDSA.sol@v4.8.2\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    enum RecoverError {\r\n        NoError,\r\n        InvalidSignature,\r\n        InvalidSignatureLength,\r\n        InvalidSignatureS,\r\n        InvalidSignatureV // Deprecated in v4.8\r\n    }\r\n\r\n    function _throwError(RecoverError error) private pure {\r\n        if (error == RecoverError.NoError) {\r\n            return; // no error: do nothing\r\n        } else if (error == RecoverError.InvalidSignature) {\r\n            revert(\"ECDSA: invalid signature\");\r\n        } else if (error == RecoverError.InvalidSignatureLength) {\r\n            revert(\"ECDSA: invalid signature length\");\r\n        } else if (error == RecoverError.InvalidSignatureS) {\r\n            revert(\"ECDSA: invalid signature 's' value\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature` or error string. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     *\r\n     * Documentation for signature generation:\r\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\r\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\r\n        if (signature.length == 65) {\r\n            bytes32 r;\r\n            bytes32 s;\r\n            uint8 v;\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                s := mload(add(signature, 0x40))\r\n                v := byte(0, mload(add(signature, 0x60)))\r\n            }\r\n            return tryRecover(hash, v, r, s);\r\n        } else {\r\n            return (address(0), RecoverError.InvalidSignatureLength);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\r\n     *\r\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address, RecoverError) {\r\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\r\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\r\n        return tryRecover(hash, v, r, s);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\r\n     *\r\n     * _Available since v4.2._\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address, RecoverError) {\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (301): 0 < s < secp256k1n \u251c\u2556 2 + 1, and for v in (302): v \u0393\u00ea\u00ea {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            return (address(0), RecoverError.InvalidSignatureS);\r\n        }\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        if (signer == address(0)) {\r\n            return (address(0), RecoverError.InvalidSignature);\r\n        }\r\n\r\n        return (signer, RecoverError.NoError);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * produces hash corresponding to the one signed with the\r\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n     * JSON-RPC method as part of EIP-191.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\r\n     * produces hash corresponding to the one signed with the\r\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n     * JSON-RPC method as part of EIP-191.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Typed Data, created from a\r\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\r\n     * to the one signed with the\r\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\r\n     * JSON-RPC method as part of EIP-712.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.8.2\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n\r\n// File contracts/protocol/MemeFactory.sol\r\n\r\n\r\npragma solidity 0.8.18;\r\n/**\r\n * @title MemeCrafter NFT Factory\r\n *\r\n * @notice NFT Factory is a helper smart contract responsible for minting arbitrary NFTs\r\n *\r\n * @notice It supports following mechanisms:\r\n *      - meta transaction minting or minting with an authorization: authorized address signs\r\n *        the minting authorization message and any address executes mint function on the helper\r\n *\r\n * @dev The signature is constructed via EIP-712 similar to EIP-2612, or EIP-3009\r\n *\r\n * @dev Target ERC721 contract(s) must allow helper to mint the tokens, this should be configured\r\n *      as part of the deployment or setup processes\r\n */\r\ncontract NFTFactory is AccessControl {\r\n\r\n    /**\r\n\t * @dev MCFT ERC20 smart contract to pay tokens of\r\n\t */\r\n\taddress public immutable mcftContract;\r\n\r\n    /**\r\n\t * @dev NFT smart contract to mint tokens of\r\n\t */\r\n\taddress public immutable targetContract;\r\n\r\n    /**\r\n\t * @dev Treasury wallet address\r\n\t */\r\n\taddress public treasury;\r\n\r\n    /**\r\n\t * @dev Next token ID to mint;\r\n\t *      initially this is the first \"free\" ID which can be minted;\r\n\t *      at any point in time this should point to a free, mintable ID\r\n\t *      for the token\r\n\t *\r\n\t * @dev `nextId` cannot be zero, we do not ever mint NFTs with zero IDs\r\n\t */\r\n\tuint96 public nextId = 1;\r\n\r\n\t/**\r\n\t * @dev A record of used nonces for EIP-712 transactions\r\n\t *\r\n\t * @dev A record of used nonces for signing/validating signatures\r\n\t *      in `mintWithAuthorization` for every mint\r\n\t *\r\n\t * @dev Maps authorizer address => nonce => true/false (used unused)\r\n\t */\r\n\tmapping(address => mapping(bytes32 => bool)) private usedNonces;\r\n\r\n\t/**\r\n\t * @notice EIP-712 contract's domain separator,\r\n\t *      see https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator\r\n\t */\r\n\tbytes32 public immutable DOMAIN_SEPARATOR;\r\n\r\n\t/**\r\n\t * @notice EIP-712 contract's domain typeHash,\r\n\t *      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash\r\n\t *\r\n\t * @dev Note: we do not include version into the domain typehash/separator,\r\n\t *      it is implied version is concatenated to the name field, like \"MemeFactory\"\r\n\t */\r\n\t// keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\")\r\n\tbytes32 public constant DOMAIN_TYPEHASH = 0x8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866;\r\n\r\n\t/**\r\n\t * @notice EIP-712 MintWithAuthorization struct typeHash,\r\n\t *      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash\r\n\t */\r\n\t// keccak256(\"MintWithAuthorization(address to,uint256 amount,uint256 validAfter,uint256 validBefore,bytes32 nonce)\")\r\n\tbytes32 public constant MINT_WITH_AUTHORIZATION_TYPEHASH = 0x6e1974b6061eed7c7de7daaa76a259c95fd1561be4886703d8241ca67cc2a6fb;\r\n\r\n\t/**\r\n\t * @notice EIP-712 CancelAuthorization struct typeHash,\r\n\t *      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash\r\n\t */\r\n\t// keccak256(\"CancelAuthorization(address authorizer,bytes32 nonce)\")\r\n\tbytes32 public constant CANCEL_AUTHORIZATION_TYPEHASH = 0x158b0a9edf7a828aad02f63cd515c68ef2f50ba807396f6d12842833a1597429;\r\n\r\n    /**\r\n\t * @notice Next ID manager is responsible for updating `nextId` variable,\r\n\t *      pointing to the next NFT ID free slot\r\n\t *\r\n\t * @dev Role ROLE_NEXT_ID_MANAGER allows `updateNextId` execution,\r\n\t *     and `nextId` modification\r\n\t */\r\n\tuint32 public constant ROLE_NEXT_ID_MANAGER = 0x0001_0000;\r\n\r\n    /**\r\n\t * @notice Treasury manager is responsible for updating `treasury` variable,\r\n\t *      pointing to the treasury wallet address\r\n\t *\r\n\t * @dev Role ROLE_TREASURY_MANAGER allows `updateTreasury` execution,\r\n\t *     and `treasury` modification\r\n\t */\r\n\tuint32 public constant ROLE_TREASURY_MANAGER = 0x0002_0000;\r\n\r\n    /**\r\n\t * @notice Factory minter is responsible for creating (minting)\r\n\t *      tokens to an arbitrary address\r\n\t * \r\n\t * @dev Role ROLE_FACTORY_MINTER allows minting tokens\r\n\t *      (executing `mint` function)\r\n\t */\r\n\tuint32 public constant ROLE_FACTORY_MINTER = 0x0004_0000;\r\n\r\n    /**\r\n\t * @dev Fired in updateNextId()\r\n\t *\r\n\t * @param by an address which executed the operation\r\n\t * @param oldVal old nextId value\r\n\t * @param newVal new nextId value\r\n\t */\r\n\tevent NextIdChanged(address indexed by, uint256 oldVal, uint256 newVal);\r\n\r\n    /**\r\n\t * @dev Fired in updateTreasury()\r\n\t *\r\n\t * @param by an address which executed the operation\r\n\t * @param oldVal old treasury address\r\n\t * @param newVal new treasury address\r\n\t */\r\n\tevent TreasuryChanged(address indexed by, address oldVal, address newVal);\r\n\r\n\t/**\r\n\t * @dev Fired in mintWithAuthorization() after an NFT is minted\r\n\t *\r\n\t * @param to an address NFT was minted to\r\n\t * @param tokenId NFT ID which was minted\r\n\t */\r\n\tevent Minted(address indexed to, uint256 indexed tokenId);\r\n\r\n\t/**\r\n\t * @dev Fired whenever the nonce gets used (ex.: `mintWithAuthorization`)\r\n\t *\r\n\t * @param authorizer an address which has used the nonce\r\n\t * @param nonce the nonce used\r\n\t */\r\n\tevent AuthorizationUsed(address indexed authorizer, bytes32 indexed nonce);\r\n\r\n\t/**\r\n\t * @dev Fired whenever the nonce gets cancelled (ex.: `cancelAuthorization`)\r\n\t *\r\n\t * @dev Both `AuthorizationUsed` and `AuthorizationCanceled` imply the nonce\r\n\t *      cannot be longer used, the only difference is that `AuthorizationCanceled`\r\n\t *      implies no smart contract state change made (except the nonce marked as cancelled)\r\n\t *\r\n\t * @param authorizer an address which has cancelled the nonce\r\n\t * @param nonce the nonce cancelled\r\n\t */\r\n\tevent AuthorizationCanceled(address indexed authorizer, bytes32 indexed nonce);\r\n\r\n\t/**\r\n\t * Deploys the helper contract bound to the target NFT ERC721 and MCFT smart contracts\r\n     * \r\n     * @param mcft_ address of the deployed MCFT smart contract instance\r\n     * @param treasury_ address of treasury wallet\r\n     * @param nft_ address of the deployed NFT smart contract instance\r\n\t */\r\n\tconstructor(address mcft_, address treasury_, address nft_) {\r\n\t\t// build the EIP-712 contract domain separator, see https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator\r\n\t\t// note: we specify contract version in its name\r\n\t\tDOMAIN_SEPARATOR = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(\"MemeFactory\")), block.chainid, address(this)));\r\n\r\n        // verify inputs are set\r\n\t\trequire(mcft_ != address(0), \"mcft contract is not set\");\r\n        require(treasury_ != address(0), \"treasury address is not set\");\r\n        require(nft_ != address(0), \"target contract is not set\");\r\n\t\t\r\n\t\t// setup smart contract internal state\r\n\t\tmcftContract = mcft_;\r\n        treasury = treasury_;\r\n        targetContract = nft_;\r\n    }\r\n\r\n    /**\r\n\t * @dev Restricted access function to modify next NFT ID `nextId`\r\n\t *\r\n\t * @param nextId_ new next NFT ID to be set\r\n\t */\r\n\tfunction updateNextId(uint96 nextId_) external {\r\n\t\t// verify the access permission\r\n\t\trequire(isSenderInRole(ROLE_NEXT_ID_MANAGER), \"access denied\");\r\n\r\n\t\t// emit an event\r\n\t\temit NextIdChanged(msg.sender, nextId, nextId_);\r\n\r\n\t\t// update next ID\r\n\t\tnextId = nextId_;\r\n\t}\r\n\r\n    /**\r\n\t * @dev Restricted access function to modify treasury wallet address\r\n\t *\r\n\t * @param treasury_ new treasury address to be set\r\n\t */\r\n\tfunction updateTreasury(address treasury_) external {\r\n\t\t// verify the access permission\r\n\t\trequire(isSenderInRole(ROLE_TREASURY_MANAGER), \"access denied\");\r\n\r\n\t\t// emit an event\r\n\t\temit TreasuryChanged(msg.sender, treasury, treasury_);\r\n\r\n\t\t// update new treasury address \r\n\t\ttreasury = treasury_;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Executes a mint function with a signed authorization\r\n\t *\r\n\t * @param to_ an address to mint token to\r\n\t * @param amount_ MCFT token amount required to mint NFT\r\n\t * @param validAfter_ signature valid after time (unix timestamp)\r\n\t * @param validBefore_ signature valid before time (unix timestamp)\r\n\t * @param nonce_ unique random nonce\r\n\t * @param v the recovery byte of the signature\r\n\t * @param r half of the ECDSA signature pair\r\n\t * @param s half of the ECDSA signature pair\r\n\t */\r\n\tfunction mintWithAuthorization(\r\n\t\taddress to_,\r\n        uint256 amount_,\r\n\t\tuint256 validAfter_,\r\n\t\tuint256 validBefore_,\r\n\t\tbytes32 nonce_,\r\n\t\tuint8 v,\r\n\t\tbytes32 r,\r\n\t\tbytes32 s\r\n\t) external {\r\n\t\t// derive signer of the EIP712 MintWithAuthorization message\r\n\t\taddress signer = __deriveSigner(\r\n\t\t\tabi.encode(MINT_WITH_AUTHORIZATION_TYPEHASH, to_, amount_, validAfter_, validBefore_, nonce_),\r\n\t\t\tv,\r\n\t\t\tr,\r\n\t\t\ts\r\n\t\t);\r\n\r\n\t\t// perform message integrity and security validations\r\n\t\trequire(block.timestamp > validAfter_, \"signature not yet valid\");\r\n\t\trequire(block.timestamp < validBefore_, \"signature expired\");\r\n\r\n\t\t// use the nonce supplied (verify, mark as used, emit event)\r\n\t\t__useNonce(signer, nonce_, false);\r\n\r\n        // if MCFT amount is set \r\n\t\tif (amount_ > 0) {\r\n            // transfer MCFT tokens to the treasury wallet\r\n            IERC20(mcftContract).transferFrom(to_, treasury, amount_);\r\n        }\r\n        \r\n        // delegate call to `_mint` - execute the logic required\r\n\t\t__mint(signer, to_, nextId);\r\n\r\n        // increment `nextId`\r\n\t\tnextId++;\r\n\t}\r\n\r\n    /**\r\n\t * @dev Auxiliary internally used function to mint an NFT\r\n\t *\r\n\t * @dev Unsafe: doesn't verify real tx executor (msg.sender) permissions, but the permissions of\r\n\t *      the address specified as an executor, must be kept private at all times\r\n\t *\r\n\t * @dev Doesn't allow minting the token with ID zero\r\n\t * @dev Requires an executor to have ROLE_MINTER permission\r\n\t * @dev Requires target ERC721 contract to be mintable (`MintableERC721`)\r\n\t * @dev Requires target ERC721 contract instance to allow minting via helper\r\n\t *\r\n\t * @param executor_ an address on which behalf the operation is executed,\r\n\t *      this is usually `msg.sender` but this can be different address for\r\n\t *      the EIP-712 like transactions (mint with authorization)\r\n\t * @param to_ an address to mint token to\r\n\t * @param tokenId_ target ERC721 token ID to mint\r\n\t */\r\n\tfunction __mint(address executor_, address to_, uint256 tokenId_) private {\r\n\t\t// verify the access permission\r\n\t\trequire(isOperatorInRole(executor_, ROLE_FACTORY_MINTER), \"access denied\");\r\n\r\n\t\t// verify the inputs\r\n\t\trequire(to_ != address(0), \"NFT receiver addr is not set\");\r\n\t\trequire(tokenId_ != 0, \"token ID is not set\");\r\n\r\n\t\t// delegate to the target ERC721 contract\r\n\t\tMintableERC721(targetContract).mint(to_, tokenId_);\r\n\r\n\t\t// emit an event\r\n\t\temit Minted(to_, tokenId_);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Returns the state of an authorization, more specifically\r\n\t *      if the specified nonce was already used by the address specified\r\n\t *\r\n\t * @dev Nonces are expected to be client-side randomly generated 32-byte data\r\n\t *      unique to the authorizer's address\r\n\t *\r\n\t * @param authorizer_ Authorizer's address\r\n\t * @param nonce_ Nonce of the authorization\r\n\t * @return true if the nonce is used\r\n\t */\r\n\tfunction authorizationState(\r\n\t\taddress authorizer_,\r\n\t\tbytes32 nonce_\r\n\t) public view returns (bool) {\r\n\t\t// simply return the value from the mapping\r\n\t\treturn usedNonces[authorizer_][nonce_];\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Cancels the authorization (using EIP-712 signature)\r\n\t *\r\n\t * @param authorizer_ transaction authorizer\r\n\t * @param nonce_ unique random nonce to cancel (mark as used)\r\n\t * @param v the recovery byte of the signature\r\n\t * @param r half of the ECDSA signature pair\r\n\t * @param s half of the ECDSA signature pair\r\n\t */\r\n\tfunction cancelAuthorization(\r\n\t\taddress authorizer_,\r\n\t\tbytes32 nonce_,\r\n\t\tuint8 v,\r\n\t\tbytes32 r,\r\n\t\tbytes32 s\r\n\t) external {\r\n\t\t// derive signer of the EIP712 CancelAuthorization message\r\n\t\taddress signer = __deriveSigner(abi.encode(CANCEL_AUTHORIZATION_TYPEHASH, authorizer_, nonce_), v, r, s);\r\n\r\n\t\t// perform message integrity and security validations\r\n\t\trequire(signer == authorizer_, \"invalid signature\");\r\n\r\n\t\t// cancel the nonce supplied (verify, mark as used, emit event)\r\n\t\t__useNonce(authorizer_, nonce_, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Cancels the authorization\r\n\t *\r\n\t * @param _nonce unique random nonce to cancel (mark as used)\r\n\t */\r\n\tfunction cancelAuthorization(bytes32 _nonce) external {\r\n\t\t// cancel the nonce supplied (verify, mark as used, emit event)\r\n\t\t__useNonce(msg.sender, _nonce, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Auxiliary function to verify structured EIP712 message signature and derive its signer\r\n\t *\r\n\t * @param abiEncodedTypehash abi.encode of the message typehash together with all its parameters\r\n\t * @param v the recovery byte of the signature\r\n\t * @param r half of the ECDSA signature pair\r\n\t * @param s half of the ECDSA signature pair\r\n\t */\r\n\tfunction __deriveSigner(bytes memory abiEncodedTypehash, uint8 v, bytes32 r, bytes32 s) private view returns(address) {\r\n\t\t// build the EIP-712 hashStruct of the message\r\n\t\tbytes32 hashStruct = keccak256(abiEncodedTypehash);\r\n\r\n\t\t// calculate the EIP-712 digest \"\\x19\\x01\" \u0393\u00c7\u00fb domainSeparator \u0393\u00c7\u00fb hashStruct(message)\r\n\t\tbytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", DOMAIN_SEPARATOR, hashStruct));\r\n\r\n\t\t// recover the address which signed the message with v, r, s\r\n\t\taddress signer = ECDSA.recover(digest, v, r, s);\r\n\r\n\t\t// return the signer address derived from the signature\r\n\t\treturn signer;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Auxiliary function to use/cancel the nonce supplied for a given authorizer:\r\n\t *      1. Verifies the nonce was not used before\r\n\t *      2. Marks the nonce as used\r\n\t *      3. Emits an event that the nonce was used/cancelled\r\n\t *\r\n\t * @dev Set `_cancellation` to false (default) to use nonce,\r\n\t *      set `_cancellation` to true to cancel nonce\r\n\t *\r\n\t * @dev It is expected that the nonce supplied is a randomly\r\n\t *      generated uint256 generated by the client\r\n\t *\r\n\t * @param authorizer_ an address to use/cancel nonce for\r\n\t * @param nonce_ random nonce to use\r\n\t * @param cancellation_ true to emit `AuthorizationCancelled`, false to emit `AuthorizationUsed` event\r\n\t */\r\n\tfunction __useNonce(address authorizer_, bytes32 nonce_, bool cancellation_) private {\r\n\t\t// verify nonce was not used before\r\n\t\trequire(!usedNonces[authorizer_][nonce_], \"invalid nonce\");\r\n\r\n\t\t// update the nonce state to \"used\" for that particular signer to avoid replay attack\r\n\t\tusedNonces[authorizer_][nonce_] = true;\r\n\r\n\t\t// depending on the usage type (use/cancel)\r\n\t\tif(cancellation_) {\r\n\t\t\t// emit an event regarding the nonce cancelled\r\n\t\t\temit AuthorizationCanceled(authorizer_, nonce_);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// emit an event regarding the nonce used\r\n\t\t\temit AuthorizationUsed(authorizer_, nonce_);\r\n\t\t}\r\n\t}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mcft_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nft_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"name\":\"AuthorizationCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"name\":\"AuthorizationUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldVal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVal\",\"type\":\"uint256\"}],\"name\":\"NextIdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_requested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_actual\",\"type\":\"uint256\"}],\"name\":\"RoleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldVal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newVal\",\"type\":\"address\"}],\"name\":\"TreasuryChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CANCEL_AUTHORIZATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_WITH_AUTHORIZATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_ACCESS_MANAGER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_FACTORY_MINTER\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_NEXT_ID_MANAGER\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_TREASURY_MANAGER\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authorizer_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"nonce_\",\"type\":\"bytes32\"}],\"name\":\"authorizationState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authorizer_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"nonce_\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"cancelAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"cancelAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"desired\",\"type\":\"uint256\"}],\"name\":\"evaluateBy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"features\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"isFeatureEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"isOperatorInRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"isSenderInRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mcftContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validAfter_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validBefore_\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nonce_\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"mintWithAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextId\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mask\",\"type\":\"uint256\"}],\"name\":\"updateFeatures\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"nextId_\",\"type\":\"uint96\"}],\"name\":\"updateNextId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"}],\"name\":\"updateRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"}],\"name\":\"updateTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRoles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "NFTFactory", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000be694091bf56d540f51f7e18afb0eaccd13190dc00000000000000000000000021e8440794938e7602ea03a81bb4cf7df2d16a22000000000000000000000000de0931e7fcfdde2e26d778363322cef0fe6cc26a", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://319ca728c461eda41209f5f188133fa8b6494880d047a8985ec5495f970fd2e3"}