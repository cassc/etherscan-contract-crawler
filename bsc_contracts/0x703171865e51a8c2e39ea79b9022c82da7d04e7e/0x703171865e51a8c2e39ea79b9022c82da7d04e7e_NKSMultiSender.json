{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity >=0.6.2 <0.9.0;\r\n\r\n\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal pure  returns (uint) {\r\n    uint c = a * b;\r\n    require(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint a, uint b) internal pure returns (uint) {\r\n    require(b > 0);\r\n    uint c = a / b;\r\n    require(a == b * c + a % b);\r\n    return c;\r\n  }\r\n  function sub(uint a, uint b) internal pure returns (uint) {\r\n    require(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a + b;\r\n    require(c >= a);\r\n    return c;\r\n  }\r\n  function max64(uint64 a, uint64 b) internal  pure returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n  function min64(uint64 a, uint64 b) internal  pure returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n  function max256(uint256 a, uint256 b) internal  pure returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n  function min256(uint256 a, uint256 b) internal  pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\nabstract contract ERC20Basic {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) public virtual view returns (uint);\r\n  function transfer(address to, uint value) virtual public;\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\nabstract contract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public virtual view returns (uint);\r\n  function transferFrom(address from, address to, uint value) virtual public;\r\n  function approve(address spender, uint value) virtual public;\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\ncontract BasicToken is ERC20Basic {\r\n\r\n  using SafeMath for uint;\r\n\r\n  mapping(address => uint) balances;\r\n\r\n  function transfer(address _to, uint _value) public override {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n  }\r\n\r\n  function balanceOf(address _owner) public view override returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n\r\n\r\ncontract StandardToken is BasicToken, ERC20 {\r\n  mapping (address => mapping (address => uint)) allowed;\r\n  using SafeMath for uint;\r\n  \r\n  function transferFrom(address _from, address _to, uint _value) public override {\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n  }\r\n\r\n  function approve(address _spender, uint _value) public override {\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0)) ;\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) public view override returns (uint remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n} \r\n\r\ncontract Ownable {\r\n     address payable public owner;\r\n\r\n    constructor () {\r\n        owner = payable(0x0a9836a155A549Fa50200412547F45a300DA2030); \r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n}\r\n\r\n\r\ncontract NKSMultiSender is Ownable , StandardToken {\r\n\r\n    using SafeMath for uint;\r\n\r\n    event LogTokenMultiSent(address token,uint256 total);\r\n    event LogGetToken(address token, address receiver, uint256 balance);\r\n   \r\n    address private receiverAddress;\r\n    uint public txFee = 0;\r\n    uint public VIPFee = 0 ;\r\n    address _tokenAddress;\r\n    StandardToken token = StandardToken(_tokenAddress);\r\n\r\n     receive() external payable {\r\n        \r\n    }\r\n\r\n    /* VIP List */\r\n    mapping(address => bool) private vipList;\r\n    \r\n    \r\n   /*\r\n  *  Register VIP\r\n  */\r\n  function registerVIP() payable public {\r\n      require(msg.value >= VIPFee);\r\n      require(owner.send(msg.value));\r\n      vipList[msg.sender] = true;\r\n  }\r\n\r\n  /*\r\n  *  VIP list\r\n  */\r\n  function addToVIPList(  address[] memory _vipList) onlyOwner public {\r\n    for (uint i =0;i<_vipList.length;i++){\r\n      vipList[_vipList[i]] = true;\r\n    }\r\n  }\r\n\r\n  /*\r\n    * Remove address from VIP List by Owner\r\n  */\r\n  function removeFromVIPList(address[] memory _vipList) onlyOwner public {\r\n    for (uint i =0;i<_vipList.length;i++){\r\n      vipList[_vipList[i]] = false;\r\n    }\r\n   }\r\n\r\n    /*\r\n        * Check isVIP\r\n    */\r\n    function isVIP(address _addr) public view returns (bool) {\r\n        return _addr == owner || vipList[_addr];\r\n    }\r\n\r\n  \r\n     /*\r\n        * set vip fee\r\n    */\r\n    function setVIPFee(uint _fee) onlyOwner public {\r\n        VIPFee = _fee;\r\n    }\r\n\r\n    /*\r\n        * set tx fee\r\n    */\r\n    function setTxFee(uint _fee) onlyOwner public {\r\n        txFee = _fee;\r\n    }\r\n\r\n\r\n   function ETHSendSameValue(address payable[]  memory  _to, uint _value) internal {\r\n\r\n        uint sendAmount = _to.length.mul(_value);\r\n        uint transferValue = msg.value;\r\n        bool vip = isVIP(msg.sender);\r\n        if(vip){\r\n            require(transferValue >= sendAmount);\r\n        }else{\r\n            require(transferValue >= sendAmount.add(txFee)) ;\r\n            \r\n        }\r\n\t\trequire(_to.length <= 255);\r\n\r\n\t\tfor (uint8 i = 0; i < _to.length; i++) {\r\n\t\t\ttransferValue = transferValue.sub(_value);\r\n\t\t\trequire(_to[i].send(_value));\r\n\t\t}\r\n\t\t\r\n\t\tif(!vip){\r\n            owner.transfer(txFee);\r\n        }\r\n\t\t\r\n\r\n\t    emit LogTokenMultiSent(0x000000000000000000000000000000000000bEEF,msg.value);\r\n    }\r\n\r\n    function ETHSendDifferentValue(address payable[] memory _to, uint[] memory _value) internal {\r\n\r\n        uint sendAmount =0;\r\n        \r\n        for (uint8 i=0;i<_to.length;i++ )\r\n        {\r\n            sendAmount+=_value[i];\r\n        }\r\n\t\tuint remainingValue = msg.value;\r\n\r\n\t    bool vip = isVIP(msg.sender);\r\n        if(vip){\r\n            require(remainingValue >= sendAmount);\r\n        }else{\r\n            require(remainingValue >= sendAmount.add(txFee)) ;\r\n            \r\n        }\r\n\r\n\t\trequire(_to.length == _value.length);\r\n\t\trequire(_to.length <= 255);\r\n\r\n\t\tfor (uint8 i = 0; i < _to.length; i++) {\r\n\t\t\tremainingValue = remainingValue.sub(_value[i]);\r\n\t\t\trequire(_to[i].send(_value[i]));\r\n\t\t}\r\n\t\t\r\n\t\tif(!vip){\r\n            owner.transfer(txFee);\r\n        }\r\n\t    emit LogTokenMultiSent(0x000000000000000000000000000000000000bEEF,msg.value);\r\n\r\n    }\r\n\r\n    function coinSendSameValue(address _tokenAddress, address[] memory _to, uint _value)  internal {\r\n\r\n\t\tuint sendValue = msg.value;\r\n\t    bool vip = isVIP(msg.sender);\r\n        if(!vip){\r\n\t\t    require(sendValue >= txFee);\r\n\t\t   \r\n        }\r\n\t\trequire(_to.length <= 255);\r\n\t\t\r\n\t\taddress from = msg.sender;\r\n\t\tuint256 sendAmount = _to.length.mul(_value);\r\n\r\n        StandardToken token = StandardToken(_tokenAddress);\t\t\r\n\t\tfor (uint8 i = 0; i < _to.length; i++) {\r\n\t\t\ttoken.transferFrom(from, _to[i], _value);\r\n\t\t}\r\n        if(!vip){\r\n            owner.transfer(txFee);\r\n        }\r\n\t    emit LogTokenMultiSent(_tokenAddress,sendAmount);\r\n\r\n\t}\r\n\tfunction coinSendDifferentValue(address _tokenAddress, address[] memory _to, uint[] memory _value)  internal  {\r\n\t\t\r\n\t  bool vip = isVIP(msg.sender);\r\n  \r\n    require(address(msg.sender).balance >= msg.value, \"Insufficient Balance\");    \r\n\t\trequire(_to.length == _value.length, \"Incorrect Value\");\r\n\t\trequire(_to.length <= 255, \"Crossed the Address length\");\r\n        \r\n    uint sendAmount = 0;\r\n        \r\n    for (uint8 i=0;i<_to.length;i++ )\r\n    {\r\n      sendAmount+=_value[i];\r\n    }\r\n        \r\n    StandardToken token = StandardToken(_tokenAddress);\r\n        \r\n\t\tfor (uint8 i = 0; i < _to.length; i++) {\r\n\t\t\ttoken.transferFrom(msg.sender, _to[i], _value[i]);\r\n\t\t}\r\n\r\n\t\tif(!vip){\r\n      (bool sent,) = owner.call{value: msg.value}(\"\");\r\n      require(sent, \"Failed to send BNB\"); \r\n    }\r\n    \r\n\r\n    emit LogTokenMultiSent(_tokenAddress,sendAmount);\r\n\r\n\t}\r\n\r\n  function ownerBalance() onlyOwner public view returns(uint){\r\n    return address(msg.sender).balance;\r\n  }\r\n    \r\n    function sendETH(address payable[] memory _to, uint _value) payable public {\r\n\t\tETHSendSameValue(_to,_value);\r\n\t}\r\n\r\n  function mutiSendETHWithDifferentValue(address payable[] memory _to, uint[] memory _value) payable public {\r\n        ETHSendDifferentValue(_to,_value);\r\n        \r\n\t}\r\n\r\n  function mutiSendETHWithSameValue(address payable[] memory _to, uint _value) payable public {\r\n\t\tETHSendSameValue(_to,_value);\r\n\t\t\r\n\t}\r\n\r\n\tfunction mutiSendCoinWithSameValue(address _tokenAddress, address[] memory _to, uint _value)  payable public {\r\n\t    coinSendSameValue(_tokenAddress, _to, _value);\r\n\t   \r\n\t}\r\n   \r\n\tfunction NKSMutiSendCoinWithDifferentValue(address _tokenAddress, address[] memory _to, uint[] memory _value) payable public {\r\n\t    coinSendDifferentValue(_tokenAddress, _to, _value);\r\n\t   \r\n\t}\r\n\r\n  function NKSMultisendToken(address _tokenAddress, address[] memory _to, uint[] memory _value) payable public {\r\n\t    coinSendDifferentValue(_tokenAddress, _to, _value);\r\n\t    \r\n    }\r\n\r\n\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"LogGetToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"LogTokenMultiSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"NKSMultisendToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"NKSMutiSendCoinWithDifferentValue\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VIPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_vipList\",\"type\":\"address[]\"}],\"name\":\"addToVIPList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isVIP\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mutiSendCoinWithSameValue\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"mutiSendETHWithDifferentValue\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mutiSendETHWithSameValue\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerVIP\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_vipList\",\"type\":\"address[]\"}],\"name\":\"removeFromVIPList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sendETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setTxFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setVIPFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "NKSMultiSender", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bd93ec3bb10bff91d6b876b7f798dd83fd662467d5eec732d85df45a3724055e"}