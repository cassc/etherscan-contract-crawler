{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.9;\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IUniswapV2Router {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n        function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDividendDistributor {\r\n    function setDistributionCriteria(\r\n        uint256 _minPeriod,\r\n        uint256 _minDistribution\r\n    ) external;\r\n    function setShare(address shareholder, uint256 amount) external;\r\n    function deposit() external payable;\r\n    function process(uint256 gas) external;\r\n}\r\n\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n    mapping(address => bool) private authorized;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        authorized[msgSender] = true;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    \r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n    \r\n    function authorize(address account, bool _authorize) public onlyOwner{\r\n        authorized[account] = _authorize;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyAuthorized() {\r\n        require(authorized[msg.sender], \"Ownable: caller is not authorized\");\r\n        _;\r\n    }\r\n    \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    \r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract ERC20 is IERC20 {\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    \r\n    constructor (string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n    }\r\n    \r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n    \r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    \r\n    function decimals() public view virtual returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    \r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    \r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n    \r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    \r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);\r\n        return true;\r\n    }\r\n    \r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] - subtractedValue);\r\n        return true;\r\n    }\r\n    \r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        \r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender] - amount;\r\n        _balances[recipient] = _balances[recipient] + amount;\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n    \r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply + amount;\r\n        _balances[account] = _balances[account] + amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n    \r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account] - amount;\r\n        _totalSupply = _totalSupply - amount;\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n    \r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    \r\n    function _setupDecimals(uint8 decimals_) internal virtual {\r\n        _decimals = decimals_;\r\n    }\r\n    \r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\ncontract ZuckDividendDistributor is IDividendDistributor {\r\n    \r\n    address _token;\r\n    address public _owner;\r\n\r\n    struct Share {\r\n        uint256 amount;\r\n        uint256 totalExcluded;\r\n        uint256 totalRealised;\r\n    }\r\n\r\n    // BSC Polkadot-PEG  \r\n    IERC20 REWARD = IERC20(0x7083609fCE4d1d8Dc0C979AAb8c869Ea2C873402); \r\n    \r\n    IUniswapV2Router _uniswapV2Router;\r\n    \r\n    address[] shareholders;\r\n    mapping(address => uint256) shareholderIndexes;\r\n    mapping(address => uint256) shareholderClaims;\r\n\r\n    mapping(address => Share) public shares;\r\n\r\n    uint256 public totalShares;             \r\n    uint256 public totalDividends;\r\n    uint256 public totalDistributed;\r\n    uint256 public dividendsPerShare;\r\n    uint256 public dividendsPerShareAccuracyFactor = 10**36;\r\n\r\n    \r\n    uint256 public minPeriod = 60 * 60;\r\n    \r\n    uint256 public minDistribution = 1 * (10**3);\r\n\r\n    uint256 currentIndex;\r\n\r\n    bool initialized;\r\n    \r\n    modifier initialization() {\r\n        require(!initialized);\r\n        _;\r\n        initialized = true;\r\n    }\r\n\r\n    modifier onlyToken() {\r\n        require(msg.sender == _token || msg.sender == _owner);\r\n        _;\r\n    }\r\n    \r\n    constructor(address _router, address owner_) {\r\n        _uniswapV2Router = IUniswapV2Router(_router);\r\n        _token = msg.sender;\r\n        _owner = owner_;\r\n    }\r\n\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external override onlyToken {\r\n        minPeriod = _minPeriod;\r\n        minDistribution = _minDistribution;\r\n    }\r\n\r\n    function setShare(address shareholder, uint256 amount) external override onlyToken\r\n    {\r\n        if (shares[shareholder].amount > 0) {\r\n            distributeDividend(shareholder);\r\n        }\r\n\r\n        if (amount > 0 && shares[shareholder].amount == 0) {\r\n            addShareholder(shareholder);\r\n        } else if (amount == 0 && shares[shareholder].amount > 0) {\r\n            removeShareholder(shareholder);\r\n        }\r\n\r\n        totalShares = totalShares - shares[shareholder].amount + amount;\r\n        shares[shareholder].amount = amount;\r\n        shares[shareholder].totalExcluded = getCumulativeDividends(\r\n            shares[shareholder].amount\r\n        );\r\n    }\r\n\r\n    function deposit() public payable  {\r\n        \r\n        address[] memory path =  new address[](2);\r\n        path[0] = _uniswapV2Router.WETH();\r\n        path[1] = address(REWARD);\r\n        _uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n            );\r\n        uint256 newBalance = REWARD.balanceOf(address(this));\r\n        \r\n        totalDividends = totalDividends + newBalance;\r\n        dividendsPerShare = dividendsPerShare + \r\n            dividendsPerShareAccuracyFactor * newBalance / totalShares;\r\n    }\r\n    \r\n    receive() external payable {\r\n        this.deposit{value: msg.value}();\r\n    }\r\n\r\n    function process(uint256 gas) external override {\r\n        uint256 shareholderCount = shareholders.length;\r\n\r\n        if (shareholderCount == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        uint256 iterations = 0;\r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex = 0;\r\n            }\r\n\r\n            if (shouldDistribute(shareholders[currentIndex])) {\r\n                distributeDividend(shareholders[currentIndex]);\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n\r\n    function shouldDistribute(address shareholder) internal view returns (bool)\r\n    {\r\n        return shareholderClaims[shareholder] + minPeriod < block.timestamp &&\r\n                getUnpaidEarnings(shareholder) > minDistribution;\r\n    }\r\n\r\n    function distributeDividend(address shareholder) internal {\r\n        if (shares[shareholder].amount == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 amount = getUnpaidEarnings(shareholder);\r\n        if (amount > 0) {\r\n            totalDistributed = totalDistributed + amount;\r\n            //(bool success, ) = shareholder.call{value: amount, gas: 3000}(\"\"); success; //Handle\r\n            REWARD.transfer(shareholder, amount);\r\n            shareholderClaims[shareholder] = block.timestamp;\r\n            shares[shareholder].totalRealised = shares[shareholder]\r\n                .totalRealised + amount;\r\n            shares[shareholder].totalExcluded = getCumulativeDividends(\r\n                shares[shareholder].amount);\r\n        }\r\n    }\r\n\r\n    function claimDividend() external {\r\n        distributeDividend(msg.sender);\r\n    }\r\n\r\n    function getUnpaidEarnings(address shareholder)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (shares[shareholder].amount == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 shareholderTotalDividends = getCumulativeDividends(\r\n            shares[shareholder].amount\r\n        );\r\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\r\n\r\n        if (shareholderTotalDividends <= shareholderTotalExcluded) {\r\n            return 0;\r\n        }\r\n\r\n        return shareholderTotalDividends - shareholderTotalExcluded;\r\n    }\r\n\r\n    function getCumulativeDividends(uint256 share)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return\r\n            share * dividendsPerShare / dividendsPerShareAccuracyFactor;\r\n    }\r\n\r\n    function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n\r\n    function removeShareholder(address shareholder) internal {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[\r\n            shareholders.length - 1\r\n        ];\r\n        shareholderIndexes[\r\n            shareholders[shareholders.length - 1]\r\n        ] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n}\r\n\r\ncontract MetaZuckZilla is ERC20, Ownable {\r\n   \r\n    IUniswapV2Router public uniswapV2Router;\r\n    address public immutable uniswapV2Pair;\r\n\r\n    \r\n\r\n    ZuckDividendDistributor public dividendDistributor;\r\n    \r\n    address public deadAddress = address(0x0000000000000000000000000000000000000000);\r\n    address public marketingAddress;\r\n    \r\n    \r\n    uint256 private constant TOTAL_SUPPLY = 1e12; // 1 T tokens\r\n    uint256 private constant DECIMALS = 1e18;\r\n    \r\n    uint256 public maxTx = 5 * TOTAL_SUPPLY / 1000 * (DECIMALS);               // 0.5%  of total supply, 5   B tokens\r\n    uint256 public swapTokensAtAmount = 5 * TOTAL_SUPPLY / 1e4 * (DECIMALS);   // 0.05% of total supply, 500 M tokens\r\n    uint256 public maxWallet = 20 * TOTAL_SUPPLY / 1000 * (DECIMALS);          // 2.0%  of total supply, 20  B tokens  \r\n\r\n    uint256 public rewardsFee;\r\n    uint256 public liquidityFee;  \r\n    uint256 public marketingFee; \r\n    uint256 public sellFeeIncrease;\r\n    uint256 public totalFees;   \r\n    \r\n    bool private swapping;\r\n    \r\n    uint256 private nAntiBotBlocks;\r\n    uint256 private antiBotDuration;\r\n    uint256 private launchBlock;\r\n    uint256 private tradeCooldown;\r\n    bool private antiBotActive = false;\r\n    mapping (address => uint256) timeLastTrade;\r\n    mapping (address => bool) launchSniper;\r\n    \r\n    bool private tradingIsEnabled = false;\r\n    bool private hasLaunched = false;\r\n    \r\n    bool public intensify = false;\r\n    bool public shouldBurnFee = false;\r\n    uint256 public intensifyDuration;\r\n    uint256 public intensifyStart;\r\n    \r\n    uint256 public burnAmount = 0;\r\n    bool public accumulatingForBurn = false;\r\n    bool private inBurn = false;\r\n    \r\n    // use by default 400,000 gas to process auto-claiming dividends\r\n    uint256 public gasForProcessing = 4e5;\r\n\r\n    mapping (address => bool) public isExcludedFromFees;\r\n    mapping (address => bool) public isExcludedFromDividends;\r\n\r\n    mapping (address => bool) public isPair;\r\n\r\n\r\n    event Launch(uint256 indexed nAntiBotBlocks);\r\n    event SetFees(uint256 indexed FTMRewardsFee, uint256 indexed marketingFee, uint256 indexed liquidityFee);\r\n    event SetTradeRestrictions(uint256 indexed maxTx, uint256 indexed maxWallet);\r\n    event SetSwapTokensAtAmount(uint256 indexed swapTokensAtAmount);  \r\n    \r\n    event UpdateDividendDistributor(address indexed newAddress, address indexed oldAddress);\r\n    event UpdateUniswapV2Router(address indexed newAddress, address indexed oldAddress);\r\n\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n    event ExcludeFromDividends(address indexed account, bool indexed shouldExclude);\r\n\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n    event LiquidityWalletUpdated(address indexed newLiquidityWallet, address indexed oldLiquidityWallet);\r\n    event GasForProcessingUpdated(uint256 indexed newValue, uint256 indexed oldValue);\r\n\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived\r\n    );\r\n\r\n    event SendDividends(\r\n    \tuint256 FTMRewards\r\n    );\r\n\r\n    event ProcessedDividendDistributor(\r\n    \tuint256 iterations,\r\n    \tuint256 claims,\r\n        uint256 lastProcessedIndex,\r\n    \tbool indexed automatic,\r\n    \tuint256 gas,\r\n    \taddress indexed processor\r\n    );\r\n\r\n    constructor() ERC20(\"MetaZuckZilla\", \"$META\") {\r\n        \r\n        uint256 _rewardsFee = 2;\r\n        uint256 _liquidityFee = 2;\r\n        uint256 _marketingFee = 2;\r\n        uint256 _sellFeeIncrease = 4;\r\n\r\n        rewardsFee = _rewardsFee;\r\n        liquidityFee = _liquidityFee;\r\n        marketingFee = _marketingFee;\r\n        sellFeeIncrease = _sellFeeIncrease;\r\n        totalFees = _rewardsFee + _liquidityFee + _marketingFee;\r\n\r\n    \t// BSC Mainnet PancakeSwap\r\n    \tIUniswapV2Router _uniswapV2Router = IUniswapV2Router(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n    \t\r\n        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n        uniswapV2Router = _uniswapV2Router;\r\n        uniswapV2Pair = _uniswapV2Pair;\r\n        \r\n        dividendDistributor = new ZuckDividendDistributor(address(_uniswapV2Router), owner());\r\n    \tmarketingAddress = address(0xCA4eA7B1523Bd1368caDb56192F1329435c7B262);\r\n        \r\n        _setAutomatedMarketMakerPair(_uniswapV2Pair, true);\r\n        \r\n        excludeFromDividends(address(this), true);\r\n        excludeFromDividends(address(dividendDistributor), true);\r\n        excludeFromDividends(address(_uniswapV2Router), true);\r\n\r\n        excludeFromFees(deadAddress, true);\r\n        excludeFromFees(address(this), true);\r\n        excludeFromFees(owner(), true);\r\n\r\n        /*\r\n            _mint is an internal function in that is only called here,\r\n            and CANNOT be called ever again.\r\n        */\r\n        _mint(owner(), TOTAL_SUPPLY * (DECIMALS));\r\n    }\r\n    \r\n    modifier inSwap {\r\n        swapping = true;\r\n        _;\r\n        swapping = false;\r\n    }\r\n    \r\n    modifier inburn{\r\n        inBurn = true;\r\n        _; \r\n        inBurn = false;\r\n    }\r\n    \r\n    function initiateAntiBot(uint256 _antiBotDuration) public onlyOwner{\r\n        require(!tradingIsEnabled, \"Project already launched.\");\r\n        antiBotDuration = _antiBotDuration;\r\n        antiBotActive = true;\r\n        tradingIsEnabled = true;\r\n    }\r\n    \r\n    function launch(uint256 _nAntiBotBlocks,uint256 _tradeCooldown) public onlyOwner{\r\n        require(!hasLaunched, \"Project already launched.\");\r\n        nAntiBotBlocks = _nAntiBotBlocks;\r\n        launchBlock = block.number;\r\n        tradeCooldown = _tradeCooldown;\r\n        hasLaunched = true;\r\n        \r\n        emit Launch(_tradeCooldown);\r\n    }\r\n\r\n    function updateDividendDistributor(address newAddress) public onlyOwner {\r\n        require(newAddress != address(dividendDistributor), \"Zuck: The dividend distributor already has that address\");\r\n\r\n        ZuckDividendDistributor newDividendDistributor = ZuckDividendDistributor(payable(newAddress));\r\n\r\n        require(newDividendDistributor._owner() == address(this), \"Zuck: The new dividend distributor must be owned by the Test token contract\");\r\n\r\n        excludeFromDividends(address(newDividendDistributor), true);\r\n        excludeFromDividends(address(this), true);\r\n        excludeFromDividends(address(uniswapV2Router), true);\r\n\r\n        emit UpdateDividendDistributor(newAddress, address(dividendDistributor));\r\n\r\n        dividendDistributor = newDividendDistributor;\r\n    }\r\n\r\n    function updateUniswapV2Router(address newAddress) public onlyOwner {\r\n        require(newAddress != address(uniswapV2Router), \"Test: The router already has that address\");\r\n        emit UpdateUniswapV2Router(newAddress, address(uniswapV2Router));\r\n        uniswapV2Router = IUniswapV2Router(newAddress);\r\n    }\r\n\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n        require(isExcludedFromFees[account] != excluded, \"Test: Account is already the value of 'excluded'\");\r\n        isExcludedFromFees[account] = excluded;\r\n\r\n        emit ExcludeFromFees(account, excluded);\r\n    }\r\n    \r\n    function excludeFromDividends(address account, bool shouldExclude) public onlyOwner {\r\n        isExcludedFromDividends[account] = shouldExclude;\r\n        emit ExcludeFromDividends(account, shouldExclude);\r\n    }\r\n\r\n    function setAutomatedMarketMakerPair(address pair, bool value) public onlyOwner {\r\n        require(pair != uniswapV2Pair, \"Test: The PancakeSwap pair cannot be removed from automatedMarketMakerPairs\");\r\n\r\n        _setAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        require(isPair[pair] != value, \"Test: Automated market maker pair is already set to that value\");\r\n        isPair[pair] = value;\r\n\r\n        if(value) {\r\n            excludeFromDividends(pair, true);\r\n        }\r\n\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function updateGasForProcessing(uint256 newValue) public onlyOwner {\r\n        require(newValue >= 200000 && newValue <= 800000, \"Test: gasForProcessing must be between 200,000 and 800,000\");\r\n        require(newValue != gasForProcessing, \"Test: Cannot update gasForProcessing to same value\");\r\n        emit GasForProcessingUpdated(newValue, gasForProcessing);\r\n        gasForProcessing = newValue;\r\n    }\r\n\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) public onlyOwner{\r\n        \r\n        dividendDistributor.setDistributionCriteria(_minPeriod, _minDistribution);\r\n    }\r\n    \r\n    function getClaimWait() external view returns(uint256) {\r\n        return dividendDistributor.minPeriod();\r\n    }\r\n\r\n    function getTotalDividendsDistributed() external view returns (uint256) {\r\n        return dividendDistributor.totalDistributed();\r\n    }\r\n   \r\n    function claim() external {\r\n\t\tdividendDistributor.claimDividend();\r\n    }\r\n\r\n    function getNumberOfDividendTokenHolders() external view returns(uint256) {\r\n        return dividendDistributor.totalShares();\r\n    }\r\n    \r\n    function setFees(uint256 _marketingFee, uint256 _liquidityFee, uint256 _rewardsFee, uint256 _sellFeeIncrease) public onlyOwner{\r\n        require(0 <= _rewardsFee && _rewardsFee <= 5, \"Requested rewardsFee fee not within acceptable range.\");\r\n        require(0 <= _liquidityFee && _liquidityFee <= 5 , \"Requested liquidity fee not within acceptable range.\");\r\n        require(0 <= _marketingFee && _marketingFee <= 5, \"Requested marketing fee not within acceptable range.\");\r\n        require(0 <= _sellFeeIncrease && _sellFeeIncrease <= 6, \"Requested sell fee increase not within acceptable range.\");\r\n        require(0 < _marketingFee + _liquidityFee, \"Total fee amount must be strictly positive.\");\r\n        \r\n        rewardsFee = _rewardsFee;\r\n        liquidityFee = _liquidityFee;\r\n        marketingFee = _marketingFee; \r\n        sellFeeIncrease = _sellFeeIncrease;\r\n        totalFees = _rewardsFee + _liquidityFee + _marketingFee;\r\n        \r\n        emit SetFees(liquidityFee, marketingFee, rewardsFee);  \r\n    }\r\n    \r\n    function setTradeRestrictions(uint256 _maxTx, uint256 _maxWallet) public onlyOwner{\r\n        require(_maxTx >= (5 * TOTAL_SUPPLY / 1000), \"Requested max transaction amount too low.\");\r\n        require(_maxWallet >= (20 * TOTAL_SUPPLY / 1000), \"Requested max allowable wallet amount too low.\");\r\n        \r\n        maxTx = _maxTx * DECIMALS;\r\n        maxWallet = _maxWallet * DECIMALS;\r\n        \r\n        emit SetTradeRestrictions(maxTx, maxWallet);\r\n    }\r\n\r\n    function setSwapTokensAtAmount(uint256 _swapTokensAtAmount) public onlyOwner{\r\n        require(5 * TOTAL_SUPPLY / 1000 <= _swapTokensAtAmount && _swapTokensAtAmount <= 2 * TOTAL_SUPPLY / 100,\r\n        \"Requested contract swap amount out of acceptable range.\");\r\n        \r\n        swapTokensAtAmount = _swapTokensAtAmount * DECIMALS;\r\n         \r\n         emit SetSwapTokensAtAmount(swapTokensAtAmount);  \r\n    }\r\n    \r\n    function checkValidTrade(address from, address to, uint256 amount) private view{\r\n        if (from != owner() && to != owner() && !isExcludedFromFees[from]) {\r\n            require(tradingIsEnabled, \"Project has yet to launch.\");\r\n            require(amount <= maxTx, \"Transfer amount exceeds the maxTxAmount.\"); \r\n            if (isPair[from]){\r\n                require(balanceOf(address(to)) + amount <= maxWallet, \"Token purchase implies maxWallet violation.\");\r\n            }\r\n        } \r\n    }\r\n    \r\n    function _transfer(address from, address to, uint256 amount) internal override {\r\n        if(amount == 0) {\r\n            super._transfer(from, to, 0);\r\n            return;\r\n        }\r\n    \r\n        checkValidTrade(from, to, amount);\r\n        bool takeFee = tradingIsEnabled && !swapping;\r\n        \r\n        if(isExcludedFromFees[from] || isExcludedFromFees[to]) {\r\n            takeFee = false;\r\n        }\r\n        \r\n        if(takeFee) {\r\n            uint256 fees;\r\n            bool _burnFees = false;\r\n           if(antiBotActive){\r\n               if(isPair[from]){\r\n                   require(!launchSniper[to], \"Do not buy before official launch.\");\r\n                   if(!hasLaunched){\r\n                       super._transfer(from, address(this), amount);\r\n                       launchSniper[to] = true;\r\n                       return;\r\n                   }\r\n                   if(timeLastTrade[to] != 0){\r\n                       require(block.number > timeLastTrade[to] + tradeCooldown, \"Trade too frequent.\");\r\n                   }\r\n                   timeLastTrade[to] = block.number;\r\n               }\r\n               \r\n                if(block.number < launchBlock + nAntiBotBlocks){\r\n                    fees = amount * 99 / 100;    \r\n                }\r\n                else{\r\n                    antiBotActive = block.number > launchBlock + antiBotDuration ? false : antiBotActive;\r\n                    (uint256 fee, bool burnFees) = calculateFee(from);\r\n                    _burnFees = burnFees;\r\n                    fees = amount * fee / 100;\r\n                }\r\n           }\r\n           else{\r\n            (uint256 fee, bool burnFees) = calculateFee(from);\r\n            _burnFees = burnFees;\r\n            fees = amount * fee / 100;   \r\n           }\r\n\r\n        \tamount = amount - fees;\r\n            super._transfer(from, (_burnFees ? deadAddress : address(this)), fees);\r\n        }\r\n        \r\n        if(accumulatingForBurn){\r\n            if(shouldBurn()){\r\n                doBurn(burnAmount);\r\n            }    \r\n        }\r\n        else if(shouldSwap(from)) { \r\n            swapTokens(swapTokensAtAmount);\r\n        }\r\n        \r\n        super._transfer(from, to, amount);\r\n\r\n        if(!isExcludedFromDividends[from])\r\n            try dividendDistributor.setShare(payable(from), balanceOf(from)) {} catch {}\r\n        if(!isExcludedFromDividends[to])\r\n            try dividendDistributor.setShare(payable(to), balanceOf(to)) {} catch {}\r\n        \r\n        if(tradingIsEnabled && !swapping && !antiBotActive) {\r\n\t    \ttry dividendDistributor.process(gasForProcessing) {\r\n\t    \t} catch {}\r\n        }\r\n    }\r\n    \r\n    function rush(bool _shouldBurn, uint256 _minutes) external onlyAuthorized{\r\n        require(_minutes <= 120, \"Rush may not last over two hours.\");\r\n        intensify = true;\r\n        shouldBurnFee = _shouldBurn;\r\n        intensifyDuration = _minutes * 1 minutes;\r\n        intensifyStart = block.timestamp;\r\n    }\r\n    \r\n    function calculateFee(address from) private returns (uint256, bool){\r\n        uint256 fee;\r\n        if(intensify){\r\n            uint256 halfTime = intensifyStart  + intensifyDuration / 2;\r\n            uint256 fullTime = intensifyStart  + intensifyDuration;\r\n            \r\n            if(block.timestamp < halfTime){\r\n                fee = isPair[from] ? 0 : 20;\r\n                return (fee, shouldBurnFee);\r\n            }\r\n            else if(block.timestamp < fullTime){\r\n                fee = isPair[from] ? 5 : 15;\r\n                return (fee, shouldBurnFee);\r\n            }\r\n            else{\r\n                fee = isPair[from] ? totalFees : totalFees + sellFeeIncrease;\r\n                intensify = false;\r\n                return (fee, false);\r\n            }\r\n        }\r\n        else{\r\n            fee = isPair[from] ? totalFees : totalFees + sellFeeIncrease;\r\n            return (fee, false);\r\n        }\r\n    }\r\n    \r\n    function shouldBurn() private view returns (bool){\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        bool canBurn = contractTokenBalance >= burnAmount;\r\n        return tradingIsEnabled && canBurn &&\r\n        !inBurn && !antiBotActive;\r\n    }\r\n    \r\n    function planBurn(uint256 _burnNumerator, uint256 _burnDenominator) public onlyAuthorized {\r\n        burnAmount = TOTAL_SUPPLY * DECIMALS * _burnNumerator / _burnDenominator;\r\n        accumulatingForBurn = true;\r\n    } \r\n    \r\n    function doBurn(uint256 _burnAmount) private inburn {\r\n        super._transfer(address(this), deadAddress, _burnAmount);\r\n        accumulatingForBurn = false;\r\n    }\r\n    \r\n    function shouldSwap(address from) private view returns (bool){\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\r\n        \r\n        return tradingIsEnabled && canSwap && !swapping &&\r\n        !isPair[from] && !isExcludedFromFees[from] && !antiBotActive;\r\n    }    \r\n        \r\n    function swapTokens(uint256 tokens) private inSwap {\r\n        uint256 LPtokens = tokens * liquidityFee / totalFees;\r\n        uint256 halfLPTokens = LPtokens / 2;\r\n        uint256 marketingtokens = tokens * marketingFee / totalFees;\r\n        uint256 rewardTokens = tokens - LPtokens - marketingtokens;\r\n        uint256 swapAmount = halfLPTokens + marketingtokens + rewardTokens;\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        swapTokensForEth(swapAmount); \r\n         \r\n        uint256 newBalance = address(this).balance - initialBalance;\r\n        \r\n        uint256 BNBForLP = newBalance * halfLPTokens / swapAmount;\r\n        uint256 BNBForMarketing = newBalance * marketingtokens / swapAmount;\r\n        \r\n        (bool temp,) = payable(marketingAddress).call{value: BNBForMarketing, gas: 30000}(\"\"); temp; //warning-suppresion \r\n        \r\n        if(halfLPTokens>0){\r\n            addLiquidity(halfLPTokens, BNBForLP);\r\n            emit SwapAndLiquify(halfLPTokens, BNBForLP);\r\n        }\r\n        uint256 BNBForRewards = address(this).balance;\r\n        try dividendDistributor.deposit{value: BNBForRewards}() {} catch{} //warning-suppresion \r\n        emit SendDividends(BNBForRewards);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n    \r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n       uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            deadAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n    \r\n    function buybackStuckBNB(uint256 percent) public onlyAuthorized {\r\n        uint256 amountToBuyBack = address(this).balance * percent / 100;\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = uniswapV2Router.WETH();\r\n        path[1] = address(this);\r\n\r\n        uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amountToBuyBack}(\r\n            0, // accept any amount of Tokens\r\n            path,\r\n            deadAddress, \r\n            block.timestamp\r\n        );\r\n    } \r\n    \r\n    function airdrop(address sender, address[] calldata recipients, uint256[] calldata values) external onlyOwner {\r\n        require(recipients.length == values.length, \"Mismatch between Address and token count\");\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            _transfer(sender, recipients[i], values[i] * DECIMALS);\r\n        }\r\n    }\r\n    \r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"shouldExclude\",\"type\":\"bool\"}],\"name\":\"ExcludeFromDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"GasForProcessingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nAntiBotBlocks\",\"type\":\"uint256\"}],\"name\":\"Launch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newLiquidityWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldLiquidityWallet\",\"type\":\"address\"}],\"name\":\"LiquidityWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claims\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastProcessedIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"automatic\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"processor\",\"type\":\"address\"}],\"name\":\"ProcessedDividendDistributor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"FTMRewards\",\"type\":\"uint256\"}],\"name\":\"SendDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"FTMRewardsFee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"name\":\"SetFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"swapTokensAtAmount\",\"type\":\"uint256\"}],\"name\":\"SetSwapTokensAtAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maxTx\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maxWallet\",\"type\":\"uint256\"}],\"name\":\"SetTradeRestrictions\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateDividendDistributor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accumulatingForBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_authorize\",\"type\":\"bool\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"buybackStuckBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendDistributor\",\"outputs\":[{\"internalType\":\"contract ZuckDividendDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"shouldExclude\",\"type\":\"bool\"}],\"name\":\"excludeFromDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasForProcessing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimWait\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfDividendTokenHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDividendsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_antiBotDuration\",\"type\":\"uint256\"}],\"name\":\"initiateAntiBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"intensify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"intensifyDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"intensifyStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromDividends\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nAntiBotBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tradeCooldown\",\"type\":\"uint256\"}],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnDenominator\",\"type\":\"uint256\"}],\"name\":\"planBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_shouldBurn\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_minutes\",\"type\":\"uint256\"}],\"name\":\"rush\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeIncrease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDistribution\",\"type\":\"uint256\"}],\"name\":\"setDistributionCriteria\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFeeIncrease\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapTokensAtAmount\",\"type\":\"uint256\"}],\"name\":\"setSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxWallet\",\"type\":\"uint256\"}],\"name\":\"setTradeRestrictions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldBurnFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateDividendDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateGasForProcessing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MetaZuckZilla", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "5", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1ac4ca1cf0bc2567953ea6b1bc323edb713160986787767b11654bba4c501f65"}