{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\n/// @title Contract Interface\r\n/// @dev This interface defines the functions for interacting with the contract.\r\ninterface contractInterface {\r\n    /// @notice Check if a token holder has a soul.\r\n    /// @param _tokenHolder The address of the token holder.\r\n    /// @return Whether the token holder has a soul.\r\n    function hasSoul(address _tokenHolder) external view returns (bool);\r\n\r\n    /// @notice Get the next token ID.\r\n    /// @return The next token ID.\r\n    function _nextTokenId() external view returns (uint);\r\n\r\n    /// @notice Mint a specified amount of tokens to an address.\r\n    /// @param to The recipient address.\r\n    /// @param amount The amount of tokens to mint.\r\n    /// @return Whether the minting was successful.\r\n    function mint(address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/// @title VotingForSolar\r\n/// @dev A smart contract for voting on solar-related proposals, with ownership management.\r\n\r\ncontract VotingForSolar is Ownable {\r\n    mapping(address => bool) public founder;\r\n    uint public totalFounders;\r\n\r\n    struct Proposal {\r\n        address tokenHolder;\r\n        uint powerInMW;\r\n        uint totalTokenToRelease;\r\n        uint founderVoteCount;\r\n        uint sbtVoteCount;\r\n        uint voteOpeningTime;\r\n        uint votingPeriodInSeconds;\r\n        bool released;\r\n    }\r\n\r\n    /// @dev An array of proposals.\r\n    Proposal[] public Proposals;\r\n\r\n    uint public requiredSBTPercent;\r\n    uint public requiredFounderPercent;\r\n    uint public requiredRescuePercent;\r\n\r\n    address public sbtAddress;\r\n    address public tokenAddress;\r\n    mapping(address => mapping(uint => bool)) voted;\r\n\r\n    /// @notice all required events\r\n    event SBTAddressChangedEv(address _sbtAddress);\r\n    event tokenAddressChangedEv(address _tokenAddress);\r\n    event founderVotepercentChanged(uint _requiredFounderPercent);\r\n    event SBTPercentChangedEv(uint _requiredSBTPercent);\r\n    event founderMadeEv(address _founder);\r\n    event proposalPostedEv(address _founder,uint _powerInMW,uint _totalTokenToRelease,address _tokenHolder,uint _voteOpeningTime,uint _votingPeriodInSeconds,uint _proposalIndex);\r\n    event founderVoteRecordedEv(uint _proposalIndex,address _voter);\r\n    event sbtVoteRecorded(uint _proposalIndex,address _voter);\r\n\r\n    /// @notice Initialize the contract with required parameters.\r\n    /// @param _sbtAddress The address of the SBT (Solar Token) contract.\r\n    /// @param _tokenAddress The address of the token contract.\r\n    /// @param _requiredSBTPercent The required percentage of SBT tokens for voting.\r\n    /// @param _requiredFounderPercent The required percentage of founder votes for proposal approval.\r\n    /// @param _requiredRescuePercent The required percentage of rescue votes for proposal approval.\r\n    function initialize(address _sbtAddress, address _tokenAddress, uint _requiredSBTPercent, uint _requiredFounderPercent, uint _requiredRescuePercent) public onlyOwner {\r\n        require(sbtAddress == address(0), \"Initialization can only occur once\");\r\n        sbtAddress = _sbtAddress;\r\n        tokenAddress = _tokenAddress;\r\n        requiredRescuePercent = _requiredRescuePercent;\r\n        requiredFounderPercent = _requiredFounderPercent;\r\n        requiredSBTPercent = _requiredSBTPercent;\r\n    }\r\n\r\n    /// @notice Change the address of the SBT contract.\r\n    /// @param _sbtAddress The new SBT contract address.\r\n    /// @return Whether the change was successful.\r\n    function ChangeSBTAddress(address _sbtAddress) public onlyOwner returns(bool) {\r\n        sbtAddress = _sbtAddress;\r\n        emit SBTAddressChangedEv(_sbtAddress);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Change the address of the token contract.\r\n    /// @param _tokenAddress The new token contract address.\r\n    /// @return Whether the change was successful.\r\n    function ChangeTokenAddress(address _tokenAddress) public onlyOwner returns(bool) {\r\n        tokenAddress = _tokenAddress;\r\n        emit tokenAddressChangedEv(_tokenAddress);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Change the required percentage of founder votes for proposal approval.\r\n    /// @param _requiredFounderPercent The new required founder vote percentage.\r\n    /// @return Whether the change was successful.\r\n    function ChangeRequiredFounderPercent(uint _requiredFounderPercent) public onlyOwner returns(bool) {\r\n        requiredFounderPercent = _requiredFounderPercent;\r\n        emit founderVotepercentChanged(_requiredFounderPercent);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Change the required percentage of SBT tokens for voting.\r\n    /// @param _requiredSBTPercent The new required SBT vote percentage.\r\n    /// @return Whether the change was successful.\r\n    function ChangeRequiredSBTPercent(uint _requiredSBTPercent) public onlyOwner returns(bool) {\r\n        requiredSBTPercent = _requiredSBTPercent;\r\n        emit SBTPercentChangedEv(_requiredSBTPercent);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Make an address a founder.\r\n    /// @param _founder The address to be granted founder status.\r\n    /// @return Whether the address was successfully made a founder.\r\n    function MakeFounder(address _founder) public onlyOwner returns(bool) {\r\n        require(founder[_founder] == false, \"Address is already a founder\");\r\n        founder[_founder] = true;\r\n        totalFounders++;\r\n        emit founderMadeEv(_founder);\r\n        return true;\r\n    }\r\n\r\n/// @notice Post a new proposal to be voted on.\r\n/// @param _powerInMW The power in megawatts for the proposal.\r\n/// @param _totalTokenToRelease The total number of tokens to release for the proposal.\r\n/// @param _tokenHolder The address of the token holder for the proposal.\r\n/// @param _voteOpeningTime The opening time for voting on the proposal (in seconds since the Unix epoch).\r\n/// @param _votingPeriodInSeconds The duration of the voting period in seconds.\r\n/// @return The index of the newly posted proposal.\r\nfunction PostProposal(uint _powerInMW, uint _totalTokenToRelease, address _tokenHolder, uint _voteOpeningTime, uint _votingPeriodInSeconds) public returns(bool) {\r\n    require(founder[msg.sender], \"Only founders can post proposals\");\r\n    require(_voteOpeningTime > block.timestamp, \"Opening time can't be in the past\");\r\n    Proposal memory temp;\r\n    temp.powerInMW = _powerInMW;\r\n    temp.tokenHolder = _tokenHolder;\r\n    temp.totalTokenToRelease = _totalTokenToRelease;\r\n    temp.voteOpeningTime = _voteOpeningTime;\r\n    temp.votingPeriodInSeconds = _votingPeriodInSeconds;\r\n\r\n    Proposals.push(temp);\r\n    emit proposalPostedEv(msg.sender, _powerInMW, _totalTokenToRelease, _tokenHolder, _voteOpeningTime,_votingPeriodInSeconds,Proposals.length - 1);\r\n    return true;\r\n}\r\n\r\n/// @notice Record a vote on a specific proposal.\r\n/// @param _proposalIndex The index of the proposal to vote on.\r\n/// @return Whether the vote was recorded successfully.\r\nfunction RecordMyVote(uint _proposalIndex) public returns(bool) {\r\n    require(!voted[msg.sender][_proposalIndex], \"Already voted\");\r\n    if (founder[msg.sender]) {\r\n        FounderVoteOnProposal(_proposalIndex);\r\n        emit founderVoteRecordedEv(_proposalIndex, msg.sender);\r\n    } else if (contractInterface(sbtAddress).hasSoul(msg.sender)) {\r\n        SbtVoteOnProposal(_proposalIndex);\r\n        emit sbtVoteRecorded(_proposalIndex, msg.sender);\r\n    } else {\r\n        revert(\"Invalid voter\");\r\n    }\r\n    return true;\r\n}\r\n\r\n/// @dev Handle a vote by an SBT holder on a specific proposal.\r\n/// @param _proposalIndex The index of the proposal to vote on.\r\n/// @return Whether the vote was recorded successfully.\r\nfunction SbtVoteOnProposal(uint _proposalIndex) internal returns(bool) {\r\n    uint ot = Proposals[_proposalIndex].voteOpeningTime;\r\n    require(ot < block.timestamp, \"Voting has not started yet\");\r\n    require(ot + Proposals[_proposalIndex].votingPeriodInSeconds > block.timestamp, \"Voting time is over\");\r\n    voted[msg.sender][_proposalIndex] = true;\r\n    Proposals[_proposalIndex].sbtVoteCount++;\r\n    return true;\r\n}\r\n\r\n/// @dev Handle a vote by a founder on a specific proposal.\r\n/// @param _proposalIndex The index of the proposal to vote on.\r\n/// @return Whether the vote was recorded successfully.\r\nfunction FounderVoteOnProposal(uint _proposalIndex) internal returns(bool) {\r\n    uint ot = Proposals[_proposalIndex].voteOpeningTime;\r\n    require(ot < block.timestamp, \"Voting has not started yet\");\r\n    require(ot + Proposals[_proposalIndex].votingPeriodInSeconds > block.timestamp, \"Voting time is over\");\r\n    voted[msg.sender][_proposalIndex] = true;\r\n    Proposals[_proposalIndex].founderVoteCount++;\r\n    return true;\r\n}\r\n\r\n\r\n/// @notice Check if a proposal has received enough votes to pass and retrieve the vote counts.\r\n/// @param _proposalIndex The index of the proposal to check.\r\n/// @return passed Whether the proposal has received enough votes to pass.\r\n/// @return sbtVoteCount The number of SBT (Solar Token) votes on the proposal.\r\n/// @return founderVoteCount The number of founder votes on the proposal.\r\nfunction IsVotePassed(uint _proposalIndex) public view returns(bool passed, uint sbtVoteCount, uint founderVoteCount) {\r\n    uint totalSBT = contractInterface(sbtAddress)._nextTokenId();\r\n    uint sVc = Proposals[_proposalIndex].sbtVoteCount;\r\n    uint fVc = Proposals[_proposalIndex].founderVoteCount;\r\n    uint countPercent = sVc * 100 / totalSBT;\r\n    uint countPercent2 = fVc * 100 / totalFounders;\r\n    if (countPercent >= requiredSBTPercent && countPercent2 >= requiredFounderPercent) {\r\n        return (true, sVc, fVc);\r\n    } else if (countPercent2 > requiredRescuePercent) {\r\n        return (true, sVc, fVc);\r\n    }\r\n    return (false, sVc, fVc);\r\n}\r\n\r\n\r\n/// @notice Release tokens for a passed proposal to the specified recipient.\r\n/// @param _proposalIndex The index of the proposal to release tokens for.\r\n/// @return Whether the tokens were successfully released.\r\nfunction ReleaseToken(uint _proposalIndex) public returns(bool) {\r\n    bool passed;\r\n    (passed,,) = IsVotePassed(_proposalIndex);\r\n    require(passed, \"Proposal index not passed\");\r\n    require(!Proposals[_proposalIndex].released, \"Proposal index already released\");\r\n    uint amount = Proposals[_proposalIndex].totalTokenToRelease;\r\n    address receiver = Proposals[_proposalIndex].tokenHolder;\r\n    Proposals[_proposalIndex].released = true;\r\n    contractInterface(tokenAddress).mint(receiver, amount);\r\n    return true;\r\n}\r\n\r\n/// @notice View the current timestamp (block timestamp).\r\n/// @return The current timestamp in seconds since the Unix epoch.\r\nfunction viewCurrentTime() public view returns(uint) {\r\n    return block.timestamp;\r\n}\r\n\r\n\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sbtAddress\",\"type\":\"address\"}],\"name\":\"SBTAddressChangedEv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_requiredSBTPercent\",\"type\":\"uint256\"}],\"name\":\"SBTPercentChangedEv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_founder\",\"type\":\"address\"}],\"name\":\"founderMadeEv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_proposalIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"founderVoteRecordedEv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_requiredFounderPercent\",\"type\":\"uint256\"}],\"name\":\"founderVotepercentChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_founder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_powerInMW\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalTokenToRelease\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenHolder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_voteOpeningTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_votingPeriodInSeconds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_proposalIndex\",\"type\":\"uint256\"}],\"name\":\"proposalPostedEv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_proposalIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"sbtVoteRecorded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"tokenAddressChangedEv\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requiredFounderPercent\",\"type\":\"uint256\"}],\"name\":\"ChangeRequiredFounderPercent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requiredSBTPercent\",\"type\":\"uint256\"}],\"name\":\"ChangeRequiredSBTPercent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sbtAddress\",\"type\":\"address\"}],\"name\":\"ChangeSBTAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"ChangeTokenAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalIndex\",\"type\":\"uint256\"}],\"name\":\"IsVotePassed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"passed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"sbtVoteCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"founderVoteCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_founder\",\"type\":\"address\"}],\"name\":\"MakeFounder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_powerInMW\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalTokenToRelease\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenHolder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_voteOpeningTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_votingPeriodInSeconds\",\"type\":\"uint256\"}],\"name\":\"PostProposal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Proposals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"powerInMW\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokenToRelease\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"founderVoteCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sbtVoteCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"voteOpeningTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPeriodInSeconds\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"released\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalIndex\",\"type\":\"uint256\"}],\"name\":\"RecordMyVote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalIndex\",\"type\":\"uint256\"}],\"name\":\"ReleaseToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"founder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sbtAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_requiredSBTPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_requiredFounderPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_requiredRescuePercent\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredFounderPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredRescuePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredSBTPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sbtAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFounders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewCurrentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "VotingForSolar", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c6b45a67b621638201447c22c1c0ffb6fbc2e7c75ef3b9d5765c6d27b499b6eb"}