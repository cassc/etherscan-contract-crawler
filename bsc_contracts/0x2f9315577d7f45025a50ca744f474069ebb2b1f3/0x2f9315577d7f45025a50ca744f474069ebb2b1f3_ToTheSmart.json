{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\r\n\r\n\r\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2003\u2003\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2003\u2003\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\r\n// \u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2003\u2003\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2003\u2003\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\r\n// \u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2003\u2003\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2003\u2003\u255a\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2554\u2588\u2588\u2588\u2588\u2554\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\r\n// \u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2003\u2003\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2003\u2003\u2591\u255a\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u255a\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\r\n// \u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2003\u2003\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2003\u2003\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u255a\u2550\u255d\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\r\n// \u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u2003\u2003\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u2003\u2003\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\r\n\r\n\r\npragma solidity ^0.4.26; // solhint-disable-line\r\n\r\ninterface ITimerPool {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function update(\r\n        uint256 _amount,\r\n        uint256 _time,\r\n        address _user\r\n    ) external;\r\n}\r\n\r\n\r\ncontract ERC20 {\r\n    function totalSupply() public constant returns (uint256);\r\n\r\n    function balanceOf(address tokenOwner) public constant returns (uint256 balance);\r\n\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint256 remaining);\r\n\r\n    function transfer(address to, uint256 tokens) public returns (bool success);\r\n\r\n    function approve(address spender, uint256 tokens) public returns (bool success);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokens\r\n    ) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\r\n}\r\n\r\ncontract ToTheSmart {\r\n    address busdt = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\r\n    uint256 public SECONDS_WORK_MINER = 1728000; \r\n    uint256 PSN = 10000;\r\n    uint256 PSNH = 5000;\r\n    uint256 BONUS_10_BUSD = 10000000000000000000; // bonus\r\n    uint256 private mDep = 50000000000000000000;  // min dep\r\n    uint256 public Dop = 500000000000000000000000; // tvl to 500000 \r\n    uint256 public countUsers = 0;  \r\n    uint256 public deals = 0; \r\n    uint256 public volume = 0; \r\n\r\n    uint256[] public REFERRAL_PERCENTS_BUY = [5, 4, 3, 2, 3, 4, 5]; \r\n    uint256[] public REFERRAL_PERCENTS_SELL = [0, 0, 0, 1, 1, 1, 1]; \r\n\r\n    uint256[] public REFERRAL_MINIMUM = [\r\n        100000000000000000000,\r\n        250000000000000000000,\r\n        500000000000000000000,\r\n        1000000000000000000000,\r\n        2500000000000000000000,\r\n        5000000000000000000000,\r\n        10000000000000000000000\r\n    ];\r\n    bool public initialized = false;\r\n    address public Delevoper; \r\n    \r\n    ITimerPool timer;\r\n\r\nstruct User {\r\n            address referrer;\r\n            uint256 referrals;\r\n            uint256 invest;\r\n            bool l2;\r\n            bool l3;\r\n            bool l4;\r\n            bool l5;\r\n            bool l6;\r\n            bool l7;\r\n        }\r\n\r\n    mapping(address => User) internal users;\r\n    mapping(address => uint256) public usersMiner;\r\n    mapping(address => uint256) public claimedTokens;\r\n    mapping(address => uint256) public lastHatch;\r\n    mapping(address => bool) public OneGetFree; \r\n    mapping(address => bool) public BUY_MINERS;\r\n\r\n    uint256 public marketTokens;\r\n    event Action(address user,address referrer,uint256 lvl, uint256 amount);\r\n\r\n    constructor(ITimerPool _timer) public {\r\n        Delevoper = msg.sender;\r\n        timer = _timer;\r\n    }    \r\n\r\n\r\n    function reinvest() public {\r\n        require(initialized);\r\n\r\n        uint256 tokensUsed = getMyTokens(msg.sender);\r\n        uint256 bonus = (getMyTokens(msg.sender) / 100) * 5; // bonus\r\n        uint256 newMiners = SafeMath.div((tokensUsed + bonus), SECONDS_WORK_MINER);\r\n        usersMiner[msg.sender] = SafeMath.add(usersMiner[msg.sender], newMiners);\r\n        claimedTokens[msg.sender] = 0;\r\n        lastHatch[msg.sender] = now;\r\n        deals +=1;\r\n\r\n        marketTokens = SafeMath.add(marketTokens, SafeMath.div(tokensUsed, 5));\r\n    }\r\n\r\n    function sellTokens(uint256 amountSell) public {\r\n        require(initialized);\r\n        User storage user = users[msg.sender];\r\n        require(user.invest >= mDep);\r\n        volume += amountSell;\r\n        amountSell = calculateTokensSell(getMyTokens(msg.sender));\r\n        uint256 fee = devFee(amountSell); // timer\r\n        uint256 fee2 = devFee2(amountSell); // team\r\n        claimedTokens[msg.sender] = 0;\r\n        lastHatch[msg.sender] = now;\r\n        marketTokens = SafeMath.add(marketTokens, getMyTokens(msg.sender));\r\n \r\n        if (user.referrer != address(0)) {\r\n            bool go = false;\r\n            address upline = user.referrer;\r\n            for (uint256 i = 0; i < 7; i++) {\r\n                if (upline != address(0)) {\r\n                    if (users[upline].invest >= REFERRAL_MINIMUM[i] || go == true) {\r\n                        uint256 amount4 = (amountSell / 100) * REFERRAL_PERCENTS_SELL[i];\r\n                        emit Action(msg.sender, upline, i, amount4);\r\n                        if (amount4 > 0) {\r\n                            ERC20(busdt).transfer(upline, amount4);\r\n                        }\r\n                    }\r\n                    upline = users[upline].referrer;\r\n                    go = false;\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        deals +=1;\r\n\r\n        ERC20(busdt).transfer(timer, fee);\r\n        ERC20(busdt).transfer(Delevoper, fee2);\r\n        ERC20(busdt).transfer(msg.sender, SafeMath.sub(amountSell, (fee + fee2)));\r\n        usersMiner[msg.sender] = SafeMath.mul(SafeMath.div(usersMiner[msg.sender],100),95);\r\n    }\r\n\r\n    function buyMiners(address ref, uint256 amount) public {\r\n        require(amount >= 50000000000000000000);\r\n        require(initialized);\r\n        countUsers += 1;\r\n        deals +=1;\r\n        volume += amount;\r\n        BUY_MINERS[msg.sender] = true;\r\n        \r\n        User storage user = users[msg.sender];\r\n        if (checkUser(msg.sender) == address(0)) {\r\n            if (ref == msg.sender || ref == address(0) || usersMiner[ref] == 0) {\r\n                user.referrer = Delevoper;\r\n            } else {\r\n                user.referrer = ref;\r\n            }\r\n\r\n        } else {\r\n            user.referrer = checkUser(msg.sender);\r\n        }\r\n\r\n\r\n        ERC20(busdt).transferFrom(address(msg.sender), address(this), amount);\r\n        uint256 balance = ERC20(busdt).balanceOf(address(this));\r\n        uint256 tokensBought = calculateTokensBuy(amount, SafeMath.sub((balance + Dop), amount));\r\n\r\n        user.invest += amount;\r\n\r\n        tokensBought = SafeMath.sub(tokensBought, SafeMath.add(devFee(tokensBought), devFee2(tokensBought)));\r\n        uint256 fee = devFee(amount);\r\n        uint256 fee2 = devFee2(amount);\r\n        ERC20(busdt).transfer(timer, fee);\r\n        timer.update(fee, block.timestamp, msg.sender);\r\n        ERC20(busdt).transfer(Delevoper, fee2);\r\n        claimedTokens[msg.sender] = SafeMath.add(claimedTokens[msg.sender], tokensBought);\r\n\r\n        if (user.referrer != address(0)) {\r\n            bool go = false;\r\n            address upline = user.referrer;\r\n            for (uint256 i = 0; i < 7; i++) {\r\n                if (upline != address(0)) {\r\n                    if (users[upline].invest >= REFERRAL_MINIMUM[i] || go == true) {\r\n                        uint256 amount4 = (amount / 100) * REFERRAL_PERCENTS_BUY[i];\r\n                        emit Action(msg.sender, upline, i, amount4);\r\n                        ERC20(busdt).transfer(upline, amount4);\r\n                    }\r\n                    upline = users[upline].referrer;\r\n                    go = false;\r\n                }\r\n            }\r\n\r\n        reinvest();\r\n \r\n\r\n        if (Dop <= amount) {\r\n            Dop = 0;\r\n        }\r\n        else {\r\n            Dop -= amount;    \r\n        }\r\n\r\n\r\n        }\r\n    }  \r\n\r\n    function getFreeMiners_10BUSD() public {    \r\n        require (initialized); \r\n        require (OneGetFree[msg.sender] == false);\r\n        lastHatch[msg.sender] = now; \r\n        usersMiner[msg.sender] = SafeMath.add(SafeMath.div(calculateTokensBuySimple(BONUS_10_BUSD),SECONDS_WORK_MINER),usersMiner[msg.sender]);\r\n        OneGetFree[msg.sender] = true;\r\n        deals +=1;\r\n\r\n        if (BUY_MINERS[msg.sender] == false) { \r\n            countUsers += 1;\r\n        }\r\n\r\n    } \r\n    \r\n\r\n    function calculateTrade(\r\n        uint256 rt,\r\n        uint256 rs,\r\n        uint256 bs\r\n    ) public view returns (uint256) {\r\n        return\r\n            SafeMath.div(\r\n                SafeMath.mul(PSN, bs),\r\n                SafeMath.add(PSNH, SafeMath.div(SafeMath.add(SafeMath.mul(PSN, rs), SafeMath.mul(PSNH, rt)), rt))\r\n            );\r\n    }\r\n\r\n    function calculateTokensSell(uint256 tokens) public view returns (uint256) {\r\n        return calculateTrade(tokens, marketTokens, ERC20(busdt).balanceOf(address(this)));\r\n    }\r\n\r\n    function calculateTokensBuy(uint256 eth, uint256 contractBalance) public view returns (uint256) {\r\n        return calculateTrade(eth, contractBalance, marketTokens);\r\n    }\r\n\r\n    function calculateTokensBuySimple(uint256 eth) public view returns (uint256) {\r\n        return calculateTokensBuy(eth, ERC20(busdt).balanceOf(address(this)));\r\n    }\r\n\r\n    function devFee(uint256 amount) public pure returns (uint256) {\r\n        return SafeMath.div(SafeMath.mul(amount, 1), 100); //timer\r\n    }\r\n\r\n    function devFee2(uint256 amount) public pure returns (uint256) { //Delevoper\r\n        return SafeMath.div(SafeMath.mul(amount, 5), 100);\r\n    }\r\n\r\n    function seedMarket() public payable {\r\n        require(msg.sender == Delevoper, \"invalid call\");\r\n        require(marketTokens == 0);\r\n        initialized = true;\r\n        marketTokens = 333000000000;\r\n    }\r\n\r\n    function getBalance() public view returns (uint256) {\r\n        return ERC20(busdt).balanceOf(address(this));\r\n    }\r\n\r\n    function getMyMiners(address user) public view returns (uint256) {\r\n        return usersMiner[user];\r\n    }\r\n\r\n    function MyReward(address user) public view returns (uint256) {\r\n        return calculateTokensSell(getMyTokens(user));\r\n    }\r\n\r\n    function getMyTokens(address user) public view returns (uint256) {\r\n        return SafeMath.add(claimedTokens[user], getTokensSinceLastHatch(user));\r\n    }\r\n\r\n    function getTokensSinceLastHatch(address adr) public view returns (uint256) {\r\n        uint256 secondsPassed = min(SECONDS_WORK_MINER, SafeMath.sub(now, lastHatch[adr]));\r\n        return SafeMath.mul(secondsPassed, usersMiner[adr]);\r\n    }\r\n\r\n    function checkUser(address userAddr) public view returns (address ref) {\r\n        return users[userAddr].referrer;\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two numbers, truncating the quotient.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two numbers, throws on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"deals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getMyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"checkUser\",\"outputs\":[{\"name\":\"ref\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"rt\",\"type\":\"uint256\"},{\"name\":\"rs\",\"type\":\"uint256\"},{\"name\":\"bs\",\"type\":\"uint256\"}],\"name\":\"calculateTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"REFERRAL_PERCENTS_SELL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyMiners\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateTokensBuySimple\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"devFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"seedMarket\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Dop\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastHatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getTokensSinceLastHatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getMyMiners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amountSell\",\"type\":\"uint256\"}],\"name\":\"sellTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"usersMiner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getFreeMiners_10BUSD\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"MyReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"OneGetFree\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateTokensBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Delevoper\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"REFERRAL_MINIMUM\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"REFERRAL_PERCENTS_BUY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"volume\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SECONDS_WORK_MINER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"devFee2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"calculateTokensSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"BUY_MINERS\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_timer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"lvl\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Action\",\"type\":\"event\"}]", "ContractName": "ToTheSmart", "CompilerVersion": "v0.4.26+commit.4563c3fc", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000cff03d61af4ef29a374b8aeef8bbedd6abc63b5", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://2d6c8519498228e00472cd517abe82ef90090c6e3e8fdde9d19cf449caaa6ceb"}