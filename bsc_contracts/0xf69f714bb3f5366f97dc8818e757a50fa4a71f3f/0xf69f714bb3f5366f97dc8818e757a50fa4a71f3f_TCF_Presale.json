{"SourceCode": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\nlibrary SafeMath {\r\n    function tryAdd(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract TCF_Presale {\r\n    using SafeMath for uint256;\r\n\r\n    IERC20 public token;\r\n    uint256 public tokensPerUSDT;\r\n    address public preSaleOwner;\r\n    IERC20 public USDT = IERC20(0x55d398326f99059fF775485246999027B3197955);\r\n\r\n    // New mapping to track whether an address has bought using referral\r\n    mapping(address => bool) public hasBoughtWithReferral;\r\n\r\n    constructor(\r\n        address _tokenAddress,\r\n        address _owner,\r\n        uint256 _tokensPerUSDT\r\n    ) {\r\n        token = IERC20(_tokenAddress);\r\n        preSaleOwner = _owner;\r\n        tokensPerUSDT = _tokensPerUSDT;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(\r\n            msg.sender == preSaleOwner,\r\n            \"ONLY_OWNER_CAN_ACCESS_THIS_FUNCTION\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function updateRate(uint256 newTokensPerUSDT) public onlyOwner {\r\n        tokensPerUSDT = newTokensPerUSDT;\r\n    }\r\n\r\n    function endPreSale() public onlyOwner {\r\n        uint256 contractTokenBalance = token.balanceOf(address(this));\r\n        token.transfer(msg.sender, contractTokenBalance);\r\n    }\r\n\r\n    function buyWithReferral(uint256 _USDTAmount, address _referralAddress)\r\n        public\r\n    {\r\n        \r\n        uint256 tokenAmount = _USDTAmount.mul(tokensPerUSDT);\r\n        uint256 referralBonus = _USDTAmount.mul(5).div(100);\r\n\r\n        if (\r\n            _referralAddress != address(0) &&\r\n            hasBoughtWithReferral[_referralAddress]\r\n        ) {\r\n            // Transfer 5% of USDT to the referral wallet\r\n            USDT.transfer(_referralAddress, referralBonus);\r\n        }\r\n\r\n        USDT.transferFrom(msg.sender, preSaleOwner, _USDTAmount);\r\n\r\n        require(\r\n            token.balanceOf(address(this)) >= tokenAmount,\r\n            \"INSUFFICIENT_BALANCE_IN_CONTRACT\"\r\n        );\r\n\r\n        bool sent = token.transfer(msg.sender, tokenAmount);\r\n        require(sent, \"FAILED_TO_TRANSFER_TOKENS_TO_BUYER\");\r\n\r\n        // Mark the buyer as having used referral\r\n        hasBoughtWithReferral[msg.sender] = true;\r\n    }\r\n\r\n    function recoverTokens(address tokenToRecover) public onlyOwner {\r\n        IERC20 tokenContract = IERC20(tokenToRecover);\r\n        uint256 contractTokenBalance = tokenContract.balanceOf(address(this));\r\n        require(contractTokenBalance > 0, \"No tokens to recover\");\r\n\r\n        bool sent = tokenContract.transfer(msg.sender, contractTokenBalance);\r\n        require(sent, \"Failed to recover tokens\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokensPerUSDT\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_USDTAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referralAddress\",\"type\":\"address\"}],\"name\":\"buyWithReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endPreSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasBoughtWithReferral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preSaleOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenToRecover\",\"type\":\"address\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensPerUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTokensPerUSDT\",\"type\":\"uint256\"}],\"name\":\"updateRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TCF_Presale", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000fa1c20fdd34a0e049bec6f271ef800a1a6675bcf0000000000000000000000007233d0b794ebd18a5ce86c65ea8fb61bc3ffae92000000000000000000000000000000000000000000000000000000000000038a", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://aade4716a080af2d2fc3ca53c76696bd21b3ef82a297dfc0a83dd0b93118c3b7"}