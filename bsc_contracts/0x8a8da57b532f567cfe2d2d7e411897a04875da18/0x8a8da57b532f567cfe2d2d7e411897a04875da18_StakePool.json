{"SourceCode": "pragma solidity ^0.6.12;\r\n// SPDX-License-Identifier: MIT\r\n// by FGD dev team\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {size := extcodesize(account)}\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success,) = recipient.call{value : amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value : weiValue}(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {// Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () public {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Adminable {\r\n    address private _admin;\r\n\r\n    event AdminTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () public {\r\n        address msgSender = msg.sender;\r\n        _admin = msgSender;\r\n        emit AdminTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function admin() public view returns (address) {\r\n        return _admin;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyAdmin() {\r\n        require(_admin == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferAdmin(address newOwner) public virtual onlyAdmin {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit AdminTransferred(_admin, newOwner);\r\n        _admin = newOwner;\r\n    }\r\n}\r\n\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ncontract USDTWrapper {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 public inToken;\r\n\r\n    uint256 private _totalSupply;\r\n    mapping(address => uint256) private _balances;\r\n    uint256 private _validCount;\r\n\r\n    function validCount() public view returns (uint256){\r\n        return _validCount;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function _stake(uint256 amount) internal {\r\n        _totalSupply = _totalSupply.add(amount);\r\n        if (_balances[msg.sender] == 0) {\r\n            _validCount = _validCount.add(1);\r\n        }\r\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\r\n        inToken.safeTransferFrom(msg.sender, address(this), amount);\r\n    }\r\n\r\n    function withdraw(uint256 amount) public virtual {\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\r\n        inToken.safeTransfer(msg.sender, amount);\r\n        if (_balances[msg.sender] == 0) {\r\n            _validCount = _validCount.sub(1);\r\n        }\r\n    }\r\n}\r\n\r\ncontract StakePool is USDTWrapper, Ownable, Adminable {\r\n    IERC20 public outToken;\r\n\r\n    uint256 public starttime;\r\n    uint256 public periodFinish = 0;\r\n    uint256 public lastUpdateTime;\r\n    uint256 public rewardPerTokenStored;\r\n    uint256 ONE_DAY = 60;\r\n    uint256 ONE_YEAR = ONE_DAY * 365;\r\n    uint256 limitDay = 7;\r\n    mapping(address => uint256) public userRewardPerTokenPaid;\r\n    mapping(address => uint256) public rewards;\r\n    mapping(address => uint256) public totalRewards;\r\n\r\n    event Staked(address indexed user, uint256 amount);\r\n    event Withdrawn(address indexed user, uint256 amount);\r\n    event RewardPaid(address indexed user, uint256 reward);\r\n    event Bind(address indexed fa, address indexed ca);\r\n    event UpdateMin(uint256 oldAmount, uint256 newAmount);\r\n    event UpdateMinUsdt(uint256 oldAmount, uint256 newAmount);\r\n    event AddRefRewardAmount(address indexed account, address indexed from, uint256 amount);\r\n    event ClaimRefRewardAmount(address indexed account, uint256 amount);\r\n\r\n\r\n    uint256[]public secondOutAmountArr;\r\n\r\n    mapping(address => address) refMap;\r\n    mapping(address => bool) public addressUsedMap;\r\n    mapping(address => address[]) teamMap;\r\n    mapping(address => bool) validMap;\r\n    mapping(address => uint256) refRewardMap;\r\n    mapping(address => uint256) refTotalMap;\r\n    //\r\n    mapping(address => uint256) exitTimeMap;\r\n    mapping(address => uint256) rewardTimeMap;\r\n    mapping(address => uint256) refRewardTimeMap;\r\n    //\r\n    uint256 public minLp;\r\n    uint256 public minUsdt;\r\n\r\n    //swap price\r\n    IUniswapV2Router02 router;\r\n    address wethAddress;\r\n    address usdtAddress;\r\n    IERC20 lpPriceTokenAddress;\r\n    uint256 onePriceToken;\r\n    address[] calcPath;\r\n\r\n\r\n    constructor(\r\n        address outToken_,\r\n        address inputLpToken_,\r\n        address calcPriceToken_,\r\n        address routerAddress_,\r\n        address usdtAddress_,\r\n        uint256 starttime_,\r\n        uint256 one_day_,\r\n        uint256 firstTotal,\r\n        uint256 secondTotal,\r\n        uint256 thirdTotal\r\n    ) public {\r\n        //\r\n        router = IUniswapV2Router02(routerAddress_);\r\n        wethAddress = router.WETH();\r\n        usdtAddress = usdtAddress_;\r\n        lpPriceTokenAddress = IERC20(calcPriceToken_);\r\n        uint8 cDecimals = IERC20(calcPriceToken_).decimals();\r\n        onePriceToken = 1 * 10 ** uint256(cDecimals);\r\n        calcPath.push(calcPriceToken_);\r\n        calcPath.push(wethAddress);\r\n        calcPath.push(usdtAddress);\r\n        //\r\n        outToken = IERC20(outToken_);\r\n        inToken = IERC20(inputLpToken_);\r\n        starttime = starttime_;\r\n        ONE_DAY = one_day_;\r\n        limitDay = ONE_DAY * 7;\r\n        ONE_YEAR = ONE_DAY * 365;\r\n        periodFinish = starttime_ + ONE_YEAR * 3;\r\n        lastUpdateTime = starttime;\r\n        secondOutAmountArr.push(firstTotal.div(ONE_YEAR));\r\n        secondOutAmountArr.push(secondTotal.div(ONE_YEAR));\r\n        secondOutAmountArr.push(thirdTotal.div(ONE_YEAR));\r\n        require(secondOutAmountArr.length == 3, \"len3\");\r\n    }\r\n\r\n    modifier onlyMaster() {\r\n        require(owner() == msg.sender || admin() == msg.sender, \"Ownable: caller is not the master\");\r\n        _;\r\n    }\r\n\r\n    function _bind(address f, address c) internal {\r\n        require(f != c, \"not allow yourself\");\r\n        require(!addressUsedMap[c], \"not allow\");\r\n        refMap[c] = f;\r\n        teamMap[f].push(c);\r\n        if (!addressUsedMap[f]) {\r\n            addressUsedMap[f] = true;\r\n        }\r\n        emit Bind(f, c);\r\n    }\r\n\r\n    function bind(address _ref) external {\r\n        if (refMap[msg.sender] == address(0)) {\r\n            _bind(_ref, msg.sender);\r\n        }\r\n    }\r\n\r\n    function updateMinLp(uint256 _lp) external onlyMaster {\r\n        emit UpdateMin(minLp, _lp);\r\n        minLp = _lp;\r\n    }\r\n\r\n    function updateMinUsdt(uint256 _usdt) external onlyMaster {\r\n        emit UpdateMinUsdt(minLp, _usdt);\r\n        minUsdt = _usdt;\r\n    }\r\n\r\n    function getOnePrice() public view returns (uint256){\r\n\r\n        return router.getAmountsOut(onePriceToken, calcPath)[2];\r\n    }\r\n\r\n    function getLpValue(uint256 lpAmount) public view returns (uint256){\r\n        if (lpAmount == 0) {\r\n            return 0;\r\n        }\r\n        uint price = getOnePrice();\r\n        require(price > 0, \"price0\");\r\n        uint256 totalLp = inToken.totalSupply();\r\n        uint256 priceTokenTotal = lpPriceTokenAddress.balanceOf(address(inToken));\r\n        //        uint tokenAmount = lpAmount.mul(priceTokenTotal).div(totalLp);\r\n        //        return tokenAmount.mul(price).mul(2).div(onePriceToken);\r\n        return lpAmount.mul(priceTokenTotal).mul(price).mul(2).div(onePriceToken).div(totalLp);\r\n\r\n    }\r\n\r\n\r\n    function _checkUserValid(bool isIn, address user) internal {\r\n        if (minLp != 0) {\r\n            if (isIn && !validMap[user] && balanceOf(user) >= minLp) {\r\n                validMap[user] = true;\r\n            } else if (!isIn && validMap[user] && balanceOf(user) < minLp) {\r\n                validMap[user] = false;\r\n            }\r\n        } else {\r\n            if (isIn && !validMap[user] && getLpValue(balanceOf(user)) >= minUsdt) {\r\n                validMap[user] = true;\r\n            } else if (!isIn && validMap[user] && getLpValue(balanceOf(user)) < minUsdt) {\r\n                validMap[user] = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    modifier checkStart() {\r\n        require(block.timestamp >= starttime, 'not start');\r\n        _;\r\n    }\r\n\r\n    modifier updateReward(address account) {\r\n        rewardPerTokenStored = rewardPerToken();\r\n        lastUpdateTime = lastTimeRewardApplicable();\r\n        if (account != address(0)) {\r\n            rewards[account] = earned(account);\r\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\r\n        }\r\n        _;\r\n    }\r\n\r\n    function _checkDayMoreThan7(uint256 _time) view internal {\r\n        require(block.timestamp.sub(_time) >= limitDay, \"more7\");\r\n    }\r\n\r\n    function lastTimeRewardApplicable() public view returns (uint256) {\r\n        return Math.min(block.timestamp, periodFinish);\r\n    }\r\n\r\n    function rewardPerToken() public view returns (uint256) {\r\n        if (totalSupply() == 0) {\r\n            return rewardPerTokenStored;\r\n        }\r\n        uint256 curTime = lastTimeRewardApplicable();\r\n        uint256 lastTime = lastUpdateTime;\r\n        uint256 curPer = getPeriod(curTime);\r\n        uint256 lastPer = getPeriod(lastTime);\r\n        if (curPer != lastPer) {\r\n\r\n            uint256 tempIndex = lastPer;\r\n            uint256 tempStored = rewardPerTokenStored;\r\n            for (; tempIndex <= curPer; tempIndex++) {\r\n                if (tempIndex == lastPer) {\r\n                    tempStored = tempStored.add(\r\n                        getPeriodTimestamp(tempIndex).sub(lastUpdateTime)\r\n                        .mul(getRewardRateByTime(getPeriodTimestamp(tempIndex)))\r\n                        .mul(1e18)\r\n                        .div(totalSupply()));\r\n                } else if (tempIndex == curPer) {\r\n                    tempStored = tempStored.add(\r\n                        curTime.sub(getPeriodTimestamp(tempIndex - 1))\r\n                        .mul(getRewardRateByTime(getPeriodTimestamp(tempIndex)))\r\n                        .mul(1e18)\r\n                        .div(totalSupply()));\r\n                } else {\r\n                    tempStored = tempStored.add(\r\n                        ONE_YEAR\r\n                        .mul(getRewardRateByTime(getPeriodTimestamp(tempIndex)))\r\n                        .mul(1e18)\r\n                        .div(totalSupply()));\r\n                }\r\n\r\n            }\r\n            return tempStored;\r\n        }\r\n        return\r\n        rewardPerTokenStored.add(\r\n            lastTimeRewardApplicable()\r\n            .sub(lastUpdateTime)\r\n            .mul(getRewardRateByTime(lastUpdateTime))\r\n            .mul(1e18)\r\n            .div(totalSupply()));\r\n\r\n    }\r\n\r\n    function earned(address account) public view returns (uint256) {\r\n        return\r\n        balanceOf(account)\r\n        .mul(rewardPerToken().sub(userRewardPerTokenPaid[account]))\r\n        .div(1e18)\r\n        .add(rewards[account]);\r\n    }\r\n\r\n\r\n    function claimRefReward() external {\r\n        uint256 amount = refRewardMap[msg.sender];\r\n        require(amount > 0, \"zero\");\r\n        //\r\n        _checkDayMoreThan7(refRewardTimeMap[msg.sender]);\r\n        refRewardTimeMap[msg.sender] = block.timestamp;\r\n        //\r\n\r\n        refRewardMap[msg.sender] = 0;\r\n        refTotalMap[msg.sender] += amount;\r\n        emit ClaimRefRewardAmount(msg.sender, amount);\r\n        outToken.safeTransfer(msg.sender, amount);\r\n    }\r\n\r\n    // stake visibility is public as overriding LPTokenWrapper's stake() function\r\n    function stake(uint256 amount)\r\n    external\r\n    updateReward(msg.sender)\r\n    checkStart\r\n    {\r\n        require(amount > 0, 'Cannot stake 0');\r\n        //\r\n        if (balanceOf(msg.sender) == 0) {\r\n            exitTimeMap[msg.sender] = block.timestamp;\r\n            rewardTimeMap[msg.sender] = block.timestamp;\r\n        }\r\n\r\n        _stake(amount);\r\n        emit Staked(msg.sender, amount);\r\n        _checkUserValid(true, msg.sender);\r\n    }\r\n\r\n    function withdraw(uint256 amount)\r\n    public\r\n    override\r\n    updateReward(msg.sender)\r\n    checkStart\r\n    {\r\n        require(amount > 0, 'Cannot withdraw 0');\r\n        _checkDayMoreThan7(exitTimeMap[msg.sender]);\r\n        exitTimeMap[msg.sender] = block.timestamp;\r\n\r\n        super.withdraw(amount);\r\n        emit Withdrawn(msg.sender, amount);\r\n        _checkUserValid(false, msg.sender);\r\n    }\r\n\r\n    function exit() external {\r\n        withdraw(balanceOf(msg.sender));\r\n        getReward();\r\n    }\r\n\r\n    function getReward() public updateReward(msg.sender) checkStart {\r\n        uint256 reward = earned(msg.sender);\r\n        if (reward > 0) {\r\n            _checkDayMoreThan7(rewardTimeMap[msg.sender]);\r\n            rewardTimeMap[msg.sender] = block.timestamp;\r\n\r\n            totalRewards[msg.sender] = totalRewards[msg.sender].add(reward);\r\n            rewards[msg.sender] = 0;\r\n            outToken.safeTransfer(msg.sender, reward);\r\n            emit RewardPaid(msg.sender, reward);\r\n            //\r\n            address up = refMap[msg.sender];\r\n            if (up != address(0) && validMap[up]) {\r\n                uint256 refAmount = reward.mul(2).div(10);\r\n                refRewardMap[up] = refRewardMap[up].add(refAmount);\r\n                emit AddRefRewardAmount(up, msg.sender, refAmount);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function getRewardRateByTime(uint256 _time) public view returns (uint256){\r\n        uint per = getPeriod(_time);\r\n        return secondOutAmountArr[per - 1];\r\n    }\r\n\r\n    function getPeriod(uint256 _time) public view returns (uint256){\r\n        uint256 per = _time.sub(starttime).div(ONE_YEAR);\r\n        uint256 rem = _time.sub(starttime).mod(ONE_YEAR);\r\n        if (rem == 0) {\r\n            if (per == 0) {\r\n                return 1;\r\n            }\r\n            if (per >= 3) {\r\n                return 3;\r\n            }\r\n            return per;\r\n        } else {\r\n            if (per >= 3) {\r\n                return 3;\r\n            } else {\r\n                return per + 1;}\r\n        }\r\n    }\r\n\r\n    function getPeriodTimestamp(uint256 _period) public view returns (uint256){\r\n        uint n = 1;\r\n        if (_period <= 1) {\r\n            n = 1;\r\n        } else if (_period >= 3) {\r\n            return lastTimeRewardApplicable();\r\n        } else {\r\n            n = _period;\r\n        }\r\n        return starttime.add(ONE_YEAR.mul(n));\r\n    }\r\n\r\n    function getSystemTime() external view returns (uint256, uint256){\r\n        return (starttime, periodFinish);\r\n    }\r\n\r\n    function userValid(address _addr) public view returns (bool){\r\n        return validMap[_addr];\r\n    }\r\n\r\n    function getUserTime(address _addr) public view returns (uint256, uint256, uint256){\r\n        return (exitTimeMap[_addr], rewardTimeMap[_addr], refRewardTimeMap[_addr]);\r\n    }\r\n\r\n    function getRewardInfo(address _addr) public view returns (uint256, uint256, uint256, uint256){\r\n        return (earned(_addr), totalRewards[_addr], refRewardMap[_addr], refTotalMap[_addr]);\r\n    }\r\n\r\n    function getReferrer(address _addr) public view returns (address){\r\n        return refMap[_addr];\r\n    }\r\n\r\n    function getTeamLength(address _addr) public view returns (uint256){\r\n        return teamMap[_addr].length;\r\n    }\r\n\r\n    function getTeam(address _addr, uint256 pageNo, uint256 pageSize) public view returns (address[]memory team){\r\n        uint256 max = teamMap[_addr].length;\r\n        if (max == 0 || pageSize == 0) {\r\n            return new address[](0);\r\n        }\r\n        uint start = 0;\r\n        uint end = 0;\r\n        if (max <= pageSize) {\r\n            end = max;\r\n        } else {\r\n            start = pageNo * pageSize;\r\n            end = start + pageSize;\r\n            if (end >= max) {\r\n                end = max;\r\n            }\r\n        }\r\n        team = new address[](end - start);\r\n        uint index;\r\n        for (; start < end; start++) {\r\n            team[index] = teamMap[_addr][start];\r\n            index++;\r\n        }\r\n    }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"outToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inputLpToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"calcPriceToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"routerAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdtAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"starttime_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"one_day_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thirdTotal\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddRefRewardAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"AdminTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fa\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ca\",\"type\":\"address\"}],\"name\":\"Bind\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimRefRewardAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"UpdateMin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"UpdateMinUsdt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressUsedMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ref\",\"type\":\"address\"}],\"name\":\"bind\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRefReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"getLpValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOnePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"getPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"getPeriodTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getRewardInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"getRewardRateByTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSystemTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pageNo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pageSize\",\"type\":\"uint256\"}],\"name\":\"getTeam\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"team\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getTeamLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getUserTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"secondOutAmountArr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"starttime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lp\",\"type\":\"uint256\"}],\"name\":\"updateMinLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdt\",\"type\":\"uint256\"}],\"name\":\"updateMinUsdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"userValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakePool", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000566b9a8ffb8908682796751eed00722da967be0000000000000000000000000ed2ec734193626282e105a4a44bf39c1f6b44d780000000000000000000000000566b9a8ffb8908682796751eed00722da967be000000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e00000000000000000000000055d398326f99059ff775485246999027b319795500000000000000000000000000000000000000000000000000000000625b73740000000000000000000000000000000000000000000000000000000000015180000000000000000000000000000000000000000000027b46536c66c8e3000000000000000000000000000000000000000000000000034f086f3b33b6840000000000000000000000000000000000000000000000000422ca8b0a00a425000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fdc4965daa398715224084402ccf5a0bb6ea47fd8cb7e442eaf41299875c6fd9"}