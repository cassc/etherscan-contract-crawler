{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity >0.4.0 <= 0.9.0;\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function getOwner() external view returns (address);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Context {\r\n    constructor () {}\r\n\r\n    function _msgSender() internal view returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor ()  {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IPancakeFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ninterface IPancakePair {\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function sync() external;\r\n}\r\n\r\ninterface IPancakeRouter {\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract AccountLiquidityPool {\r\n    using SafeMath for uint256;\r\n    IPancakeRouter internal constant _router = IPancakeRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E); //0xD99D1c33F9fC3444f8101754aBC46c52416550D1\r\n    address internal _factory;\r\n    uint256 private _balance;\r\n    uint256 private _pos;\r\n    uint256 private _current_pos_take_total_amount;\r\n    constructor(){\r\n        _factory = msg.sender;\r\n    }\r\n\r\n    function addLiquidity(address EDEAddress, address USDTAddress, uint256 EDEAmount, uint256 USDTAmount) external returns (uint256) {\r\n        require(msg.sender == _factory, \"is not factory\");\r\n        IBEP20(EDEAddress).approve(address(_router), type(uint256).max);\r\n        IBEP20 USDT = IBEP20(USDTAddress);\r\n        USDT.approve(address(_router), type(uint256).max);\r\n        uint256 before_balance = USDT.balanceOf(address(this));\r\n        _router.addLiquidity(EDEAddress, USDTAddress, EDEAmount, USDTAmount, 0, 0, address(this), block.timestamp + 1);\r\n        uint256 after_balance = USDT.balanceOf(address(this));\r\n        uint256 balance = before_balance.sub(after_balance);\r\n        _balance = _balance.add(balance);\r\n        return balance;\r\n    }\r\n\r\n    function removeLiquidity(address pair, address to) external {\r\n        require(msg.sender == _factory, \"is not factory\");\r\n        IPancakePair _pair = IPancakePair(pair);\r\n        _pair.approve(address(_router), type(uint256).max);\r\n        uint256 liquidity = _pair.balanceOf(address(this));\r\n        _router.removeLiquidity(_pair.token0(), _pair.token1(), liquidity, 0, 0, to, block.timestamp + 1);\r\n        _balance = 0;\r\n    }\r\n\r\n    function update(uint256 pos, uint256 pos_total_amount) external {\r\n        require(msg.sender == _factory, \"is not factory\");\r\n        _pos = pos;\r\n        _current_pos_take_total_amount = pos_total_amount;\r\n    }\r\n\r\n    function get() external view returns (uint256, uint256, uint256) {\r\n        return (_balance, _pos, _current_pos_take_total_amount);\r\n    }\r\n\r\n    function getFactory() external view returns (address) {\r\n        return _factory;\r\n    }\r\n}\r\n\r\ncontract InnerPool is AccountLiquidityPool {\r\n    using SafeMath for uint256;\r\n    address private _creator;\r\n    constructor (address creator) {\r\n        _creator = creator;\r\n    }\r\n\r\n    function swapExactTokensForTokens(address pair, address EDEAddress, address USDTAddress) external returns (bool) {\r\n        require(msg.sender == _factory, \"is not factory\");\r\n        IBEP20 ede = IBEP20(EDEAddress);\r\n        ede.approve(address(_router), type(uint256).max);\r\n        ede.approve(pair, type(uint256).max);\r\n        IBEP20 usdt = IBEP20(USDTAddress);\r\n        usdt.approve(address(_router), type(uint256).max);\r\n        usdt.approve(pair, type(uint256).max);\r\n        IPancakePair(pair).approve(address(_router), type(uint256).max);\r\n\r\n        uint256 balance = ede.balanceOf(address(this)).div(2);\r\n        address[] memory path = new address[](2);\r\n        path[0] = EDEAddress;\r\n        path[1] = USDTAddress;\r\n        _router.swapExactTokensForTokens(balance, 0, path, address(this), block.timestamp + 1);\r\n        return true;\r\n    }\r\n\r\n    function take(address _token) external {\r\n        IBEP20 token = IBEP20(_token);\r\n        uint256 balance = token.balanceOf(address(this));\r\n        require(balance > 0, \"balance is zero!\");\r\n        token.transfer(_creator, balance);\r\n    }\r\n}\r\n\r\ncontract EDE is IBEP20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => bool) private _ban;\r\n    mapping(address => bool) private _passTo;\r\n    mapping(address => bool) private _lp_pair;\r\n    mapping(address => bool) private _free_account_lp;\r\n    mapping(address => bool) private _inner_account;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => AccountLiquidityPool) private _account_lp_pool;\r\n    mapping(uint256 => PosTotal) private _pos_total;\r\n    address private _ecology;\r\n    address private constant _USDT = 0x55d398326f99059fF775485246999027B3197955; //0x04D768834C5D1711984b599559961f59b4E3835a\r\n    address private constant _FI = 0xFc3DE2f2cf23ea273472CBA8F9463BFA519F6b04; //0x3e68b58249C23aB02bdD730614C0CDB1431d73e4\r\n    InnerPool public _inner_pool;\r\n    IPancakeFactory private constant _factory = IPancakeFactory(0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73); //0x6725F303b657a9451d8BA641348b6761A6CC7a17\r\n    uint256 constant private _totalSupply = 69000 * 1e18;\r\n    uint8 constant private _decimals = 18;\r\n    string constant private _symbol = \"GG1\";\r\n    string constant private _name = \"GG1\";\r\n    uint256 private _pos;\r\n    bool public _enable = false;\r\n\r\n    bool private unlocked = true;\r\n    modifier lock() {\r\n        require(unlocked, 'LOCKED');\r\n        unlocked = false;\r\n        _;\r\n        unlocked = true;\r\n    }\r\n\r\n    bool private _enter_pool = false;\r\n    modifier enter_pool() {\r\n        require(!_enter_pool, 'ENTER POOL');\r\n        _enter_pool = true;\r\n        _;\r\n        _enter_pool = false;\r\n    }\r\n\r\n    struct PosTotal {\r\n        uint256 amount;\r\n        uint256 balance;\r\n    }\r\n\r\n    constructor() {\r\n        _balances[_msgSender()] = _totalSupply;\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n        _passTo[_msgSender()] = true;\r\n\r\n        _inner_pool = new InnerPool(_msgSender());\r\n        _free_account_lp[address(_inner_pool)] = true;\r\n\r\n        _lp_pair[_factory.createPair(address(this), _USDT)] = true;\r\n    }\r\n\r\n    function getOwner() external view returns (address) {\r\n        return owner();\r\n    }\r\n\r\n    function decimals() external pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function symbol() external pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function totalSupply() external pure returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) external view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private {\r\n        require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n        require(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n        if (!_enable) {\r\n            _innerTransfer(sender, recipient, amount);\r\n            return;\r\n        }\r\n        if (_ban[sender]) { //check bot\r\n            require(_passTo[recipient], \"BEP20: sender address baned\");\r\n        }\r\n        if (_free_account_lp[sender]) {\r\n            _freeTransfer(sender, recipient, amount);\r\n        } else if (_lp_pair[sender] || _lp_pair[recipient]) {\r\n//            if (_lp_pair[sender]) {//buy\r\n//            } else if (_lp_pair[recipient]) {//sell\r\n//            }\r\n//            if (_lp_pair[recipient] && !_enter_pool) {//sell enter liquidity test pass\r\n//                enterLiquidity();\r\n//            }\r\n            _feeTransfer(sender, recipient, amount);\r\n        } else {\r\n            _freeTransfer(sender, recipient, amount);\r\n        }\r\n    }\r\n\r\n    function _innerTransfer(address sender, address recipient, uint256 amount) private {\r\n        require(_inner_account[sender] && _inner_account[recipient], \"not inner account\");\r\n        _freeTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _freeTransfer(address sender, address recipient, uint256 amount) private {\r\n        _balances[sender] = _balances[sender].sub(amount, \"BEP20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _feeTransfer(address sender, address recipient, uint256 amount) private {\r\n        uint256 lp_share_fee = amount.mul(3).div(100); //3%\r\n        uint256 destroy_fee = amount.div(100); //1%\r\n        uint256 ecology_fee = amount.div(100); //1%\r\n        uint256 enter_lp_fee = amount.div(100); //1%\r\n\r\n        amount = amount.sub(lp_share_fee).sub(destroy_fee).sub(ecology_fee).sub(enter_lp_fee);\r\n        _freeTransfer(sender, recipient, amount);\r\n        _freeTransfer(sender, address(666), destroy_fee);\r\n        _freeTransfer(sender, _ecology, ecology_fee);\r\n\r\n        _freeTransfer(sender, address(this), lp_share_fee);\r\n        _pos_total[_pos].amount = _pos_total[_pos].amount.add(lp_share_fee);\r\n        _freeTransfer(sender, address(_inner_pool), enter_lp_fee);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function adds(uint8 _type, address[] calldata addr) external onlyOwner {\r\n        if (_type == 0) {\r\n            for (uint i = 0; i < addr.length; i++) {\r\n                _ban[addr[i]] = true;\r\n            }\r\n            return;\r\n        }\r\n        if (_type == 1) {\r\n            for (uint i = 0; i < addr.length; i++) {\r\n                _passTo[addr[i]] = true;\r\n            }\r\n            return;\r\n        }\r\n        if (_type == 2) {\r\n            for (uint i = 0; i < addr.length; i++) {\r\n                _lp_pair[addr[i]] = true;\r\n            }\r\n            return;\r\n        }\r\n        if (_type == 3) {\r\n            for (uint i = 0; i < addr.length; i++) {\r\n                _inner_account[addr[i]] = true;\r\n            }\r\n            return;\r\n        }\r\n        if (_type == 6) {\r\n            _ecology = addr[0];\r\n            return;\r\n        }\r\n        revert(\"adds type error\");\r\n    }\r\n\r\n    function removes(uint8 _type, address[] calldata addr) external onlyOwner {\r\n        if (_type == 0) {\r\n            for (uint i = 0; i < addr.length; i++) {\r\n                delete _ban[addr[i]];\r\n            }\r\n            return;\r\n        }\r\n        if (_type == 1) {\r\n            for (uint i = 0; i < addr.length; i++) {\r\n                delete _passTo[addr[i]];\r\n            }\r\n            return;\r\n        }\r\n        if (_type == 2) {\r\n            for (uint i = 0; i < addr.length; i++) {\r\n                delete _lp_pair[addr[i]];\r\n            }\r\n            return;\r\n        }\r\n        if (_type == 3) {\r\n            for (uint i = 0; i < addr.length; i++) {\r\n                delete _inner_account[addr[i]];\r\n            }\r\n            return;\r\n        }\r\n        revert(\"removes type error\");\r\n    }\r\n\r\n    function isAdded(uint8 _type, address account) external view returns (bool) {\r\n        if (_type == 0) {\r\n            return _ban[account];\r\n        }\r\n        if (_type == 1) {\r\n            return _passTo[account];\r\n        }\r\n        if (_type == 2) {\r\n            return _lp_pair[account];\r\n        }\r\n        if (_type == 3) {\r\n            return _inner_account[account];\r\n        }\r\n        revert(\"type err\");\r\n    }\r\n\r\n    function getAccountLPPool(address account) public view returns (address){\r\n        return address(_account_lp_pool[account]);\r\n    }\r\n\r\n    function addLiquidity(uint256 amount_USDT) external lock returns (uint256){\r\n        IBEP20 usdt = IBEP20(_USDT);\r\n        require(usdt.allowance(_msgSender(), address(this)) >= amount_USDT, \"not approve USDT\");\r\n\r\n        address pool_address = getAccountLPPool(_msgSender()); //000000000000000000\r\n        AccountLiquidityPool pool;\r\n        if (pool_address == address(0)) {\r\n            pool = new AccountLiquidityPool();\r\n            pool_address = address(pool);\r\n            _account_lp_pool[_msgSender()] = pool;\r\n            _free_account_lp[pool_address] = true;\r\n        } else {\r\n            pool = AccountLiquidityPool(pool_address);\r\n        }\r\n\r\n        _take(_msgSender());\r\n\r\n        usdt.transferFrom(_msgSender(), pool_address, amount_USDT);\r\n        address pair = _factory.getPair(address(this), _USDT);\r\n        uint256 amount_EDE = _balances[pair].mul(amount_USDT).div(usdt.balanceOf(pair));\r\n        _freeTransfer(_msgSender(), pool_address, amount_EDE);\r\n        uint256 balance = pool.addLiquidity(address(this), _USDT, amount_EDE, amount_USDT);\r\n\r\n        uint256 new_liquidity_balance = _pos_total[_pos].balance.add(balance);\r\n        _pos ++;\r\n        _pos_total[_pos].balance = new_liquidity_balance;\r\n        pool.update(_pos, _pos_total[_pos].amount);\r\n        return amount_EDE;\r\n    }\r\n\r\n    function getLiquidityTotal() external view returns (uint256) {\r\n        return _pos_total[_pos].balance;\r\n    }\r\n\r\n    function removeLiquidity() external lock {\r\n        require(getAccountLPPool(_msgSender()) != address(0), \"not add liquidity\");\r\n        AccountLiquidityPool pool = _account_lp_pool[_msgSender()];\r\n        (uint256 balance,,) = pool.get();\r\n        uint256 new_liquidity_balance = _pos_total[_pos].balance.sub(balance);\r\n        pool.removeLiquidity(_factory.getPair(address(this), _USDT), _msgSender());\r\n        _pos ++;\r\n        _pos_total[_pos].balance = new_liquidity_balance;\r\n    }\r\n\r\n    function enable() external onlyOwner {\r\n        _enable = true;\r\n    }\r\n\r\n    function _take(address account) private returns (uint256) {\r\n        if (getAccountLPPool(account) == address(0)) {\r\n            return 0;\r\n        }\r\n        AccountLiquidityPool pool = _account_lp_pool[account];\r\n        (uint256 balance, uint256 pos, uint256 amount) = pool.get();\r\n        uint256 value;\r\n        if (balance > 0) {\r\n            uint256 total = _pos_total[pos].amount;\r\n            if (amount < total) {\r\n                value = total.sub(amount).mul(balance).div(_pos_total[pos].balance);\r\n            }\r\n            if (pos != _pos) {\r\n                pos = pos + 1;\r\n                for (uint256 i = pos; i <= _pos; i++) {\r\n                    value = value.add(_pos_total[i].amount.mul(balance).div(_pos_total[i].balance));\r\n                }\r\n            }\r\n            pool.update(_pos, _pos_total[_pos].amount);\r\n            if (value > 0) {\r\n                _freeTransfer(address(this), account, value);\r\n            }\r\n        }\r\n        return value;\r\n    }\r\n\r\n    function take() external lock returns (uint256)  {\r\n        require(getAccountLPPool(_msgSender()) != address(0), \"not add liquidity\");\r\n        return _take(_msgSender());\r\n    }\r\n\r\n    function enterLiquidity() public enter_pool {\r\n        address pool_address = address(_inner_pool);\r\n        IBEP20(_FI).transfer(_msgSender(), _balances[pool_address].mul(5));\r\n        require(_balances[pool_address] >= 2 * 1e18, \"Less than minimum limit 2\");\r\n        address pair = _factory.getPair(address(this), _USDT);\r\n        if (_inner_pool.swapExactTokensForTokens(pair, address(this), _USDT)) {\r\n            IBEP20 usdt = IBEP20(_USDT);\r\n            uint256 amount_USDT = usdt.balanceOf(pool_address);\r\n            uint256 amount_EDE = _balances[pool_address];\r\n            _inner_pool.addLiquidity(address(this), _USDT, amount_EDE, amount_USDT);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_enable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_inner_pool\",\"outputs\":[{\"internalType\":\"contract InnerPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_USDT\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"}],\"name\":\"adds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountLPPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidityTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"}],\"name\":\"removes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"take\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EDE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Apache-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://91014824025a044660416c430e4f4fee537c069fbc3c3415895d5e8256ea0ecd"}