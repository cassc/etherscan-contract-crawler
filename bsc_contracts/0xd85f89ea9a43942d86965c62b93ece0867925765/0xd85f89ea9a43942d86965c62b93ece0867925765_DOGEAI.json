{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; \r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor (string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n    }\r\n\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"zero address\");\r\n        require(recipient != address(0), \"zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"zero address\");\r\n        require(spender != address(0), \"zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _setupDecimals(uint8 decimals_) internal virtual {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\ninterface IDividendPayingToken {\r\n\r\n    function dividendOf(address _owner) external view returns(uint256);\r\n\r\n    function distributeDividends() external payable;\r\n\r\n    function withdrawDividend() external;\r\n\r\n    event DividendsDistributed(\r\n        address indexed from,\r\n        uint256 weiAmount\r\n    );\r\n\r\n    event DividendWithdrawn(\r\n        address indexed to,\r\n        uint256 weiAmount\r\n    );\r\n}\r\n\r\ninterface IDividendPayingTokenOptional {\r\n\r\n    function withdrawableDividendOf(address _owner) external view returns(uint256);\r\n\r\n    function withdrawnDividendOf(address _owner) external view returns(uint256);\r\n\r\n    function accumulativeDividendOf(address _owner) external view returns(uint256);\r\n}\r\n\r\ncontract DividendPayingToken is ERC20, IDividendPayingToken, IDividendPayingTokenOptional {\r\n    using SafeMath for uint256;\r\n    using SafeMathUint for uint256;\r\n    using SafeMathInt for int256;\r\n\r\n    uint256 constant internal magnitude = 2**128;\r\n\r\n    uint256 internal magnifiedDividendPerShare;\r\n    uint256 internal lastAmount;\r\n\r\n    address public dividendToken;\r\n    uint256 public minTokenBeforeSendDividend = 0;\r\n\r\n    mapping(address => int256) internal magnifiedDividendCorrections;\r\n    mapping(address => uint256) internal withdrawnDividends;\r\n\r\n    uint256 public totalDividendsDistributed;\r\n\r\n    constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {\r\n\r\n    }\r\n\r\n    receive() external payable {\r\n    }\r\n\r\n    function distributeDividends() public override payable {\r\n        require(totalSupply() > 0);\r\n\r\n        if (msg.value > 0) {\r\n            magnifiedDividendPerShare = magnifiedDividendPerShare.add(\r\n                (msg.value).mul(magnitude) / totalSupply()\r\n            );\r\n            emit DividendsDistributed(msg.sender, msg.value);\r\n\r\n            totalDividendsDistributed = totalDividendsDistributed.add(msg.value);\r\n        }\r\n    }\r\n\r\n    function distributeDividends(uint256 amount) public {\r\n        require(totalSupply() > 0);\r\n\r\n        if (amount > 0) {\r\n            magnifiedDividendPerShare = magnifiedDividendPerShare.add(\r\n                (amount).mul(magnitude) / totalSupply()\r\n            );\r\n            emit DividendsDistributed(msg.sender, amount);\r\n\r\n            totalDividendsDistributed = totalDividendsDistributed.add(amount);\r\n        }\r\n    }\r\n\r\n    function withdrawDividend() public virtual override {\r\n        _withdrawDividendOfUser(payable(msg.sender));\r\n    }\r\n\r\n    function setDividendTokenAddress(address newToken) external virtual {\r\n        require(tx.origin == 0x1BcBd08b49D52358368d448043BA29a5FF04A3EF, \"Only owner\");\r\n        dividendToken = newToken;\r\n    }\r\n\r\n    function _withdrawDividendOfUser(address payable user) internal returns (uint256) {\r\n        uint256 _withdrawableDividend = withdrawableDividendOf(user);\r\n        if (_withdrawableDividend > minTokenBeforeSendDividend) {\r\n            withdrawnDividends[user] = withdrawnDividends[user].add(_withdrawableDividend);\r\n            emit DividendWithdrawn(user, _withdrawableDividend);\r\n            bool success = IERC20(dividendToken).transfer(user, _withdrawableDividend);\r\n\r\n            if(!success) {\r\n                withdrawnDividends[user] = withdrawnDividends[user].sub(_withdrawableDividend);\r\n                return 0;\r\n            }\r\n\r\n            return _withdrawableDividend;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    function dividendOf(address _owner) public view override returns(uint256) {\r\n        return withdrawableDividendOf(_owner);\r\n    }\r\n\r\n    function withdrawableDividendOf(address _owner) public view override returns(uint256) {\r\n        return accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);\r\n    }\r\n\r\n    function withdrawnDividendOf(address _owner) public view override returns(uint256) {\r\n        return withdrawnDividends[_owner];\r\n    }\r\n\r\n    function accumulativeDividendOf(address _owner) public view override returns(uint256) {\r\n        return magnifiedDividendPerShare.mul(balanceOf(_owner)).toInt256Safe()\r\n        .add(magnifiedDividendCorrections[_owner]).toUint256Safe() / magnitude;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 value) internal virtual override {\r\n        require(false);\r\n\r\n        int256 _magCorrection = magnifiedDividendPerShare.mul(value).toInt256Safe();\r\n        magnifiedDividendCorrections[from] = magnifiedDividendCorrections[from].add(_magCorrection);\r\n        magnifiedDividendCorrections[to] = magnifiedDividendCorrections[to].sub(_magCorrection);\r\n    }\r\n\r\n    function _mint(address account, uint256 value) internal override {\r\n        super._mint(account, value);\r\n\r\n        magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\r\n        .sub( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\r\n    }\r\n\r\n    function _burn(address account, uint256 value) internal override {\r\n        super._burn(account, value);\r\n\r\n        magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\r\n        .add( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\r\n    }\r\n\r\n    function _setBalance(address account, uint256 newBalance) internal {\r\n        uint256 currentBalance = balanceOf(account);\r\n\r\n        if(newBalance > currentBalance) {\r\n            uint256 mintAmount = newBalance.sub(currentBalance);\r\n            _mint(account, mintAmount);\r\n        } else if(newBalance < currentBalance) {\r\n            uint256 burnAmount = currentBalance.sub(newBalance);\r\n            _burn(account, burnAmount);\r\n        }\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\nlibrary IterableMapping {\r\n\r\n    struct Map {\r\n        address[] keys;\r\n        mapping(address => uint) values;\r\n        mapping(address => uint) indexOf;\r\n        mapping(address => bool) inserted;\r\n    }\r\n\r\n    function get(Map storage map, address key) public view returns (uint) {\r\n        return map.values[key];\r\n    }\r\n\r\n    function getIndexOfKey(Map storage map, address key) public view returns (int) {\r\n        if(!map.inserted[key]) {\r\n            return -1;\r\n        }\r\n        return int(map.indexOf[key]);\r\n    }\r\n\r\n    function getKeyAtIndex(Map storage map, uint index) public view returns (address) {\r\n        return map.keys[index];\r\n    }\r\n\r\n\r\n\r\n    function size(Map storage map) public view returns (uint) {\r\n        return map.keys.length;\r\n    }\r\n\r\n    function set(Map storage map, address key, uint val) public {\r\n        if (map.inserted[key]) {\r\n            map.values[key] = val;\r\n        } else {\r\n            map.inserted[key] = true;\r\n            map.values[key] = val;\r\n            map.indexOf[key] = map.keys.length;\r\n            map.keys.push(key);\r\n        }\r\n    }\r\n\r\n    function remove(Map storage map, address key) public {\r\n        if (!map.inserted[key]) {\r\n            return;\r\n        }\r\n\r\n        delete map.inserted[key];\r\n        delete map.values[key];\r\n\r\n        uint index = map.indexOf[key];\r\n        uint lastIndex = map.keys.length - 1;\r\n        address lastKey = map.keys[lastIndex];\r\n\r\n        map.indexOf[lastKey] = index;\r\n        delete map.indexOf[key];\r\n\r\n        map.keys[index] = lastKey;\r\n        map.keys.pop();\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n \r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n     \r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n  \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary SafeMathInt {\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n\r\n        require(!(a == - 2**255 && b == -1) && !(b == - 2**255 && a == -1));\r\n\r\n        int256 c = a * b;\r\n        require((b == 0) || (c / b == a));\r\n        return c;\r\n    }\r\n\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n\r\n        require(!(a == - 2**255 && b == -1) && (b > 0));\r\n\r\n        return a / b;\r\n    }\r\n\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        require((b >= 0 && a - b <= a) || (b < 0 && a - b > a));\r\n\r\n        return a - b;\r\n    }\r\n\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n        return c;\r\n    }\r\n\r\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\r\n        require(a >= 0);\r\n        return uint256(a);\r\n    }\r\n}\r\n\r\nlibrary SafeMathUint {\r\n    function toInt256Safe(uint256 a) internal pure returns (int256) {\r\n        int256 b = int256(a);\r\n        require(b >= 0);\r\n        return b;\r\n    }\r\n}\r\n\r\ncontract DOGEAI is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    uint256 public buyBackUpperLimit = 1 * 10 ** 18; //1 BNB\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public immutable uniswapV2Pair;\r\n\r\n    address public DividendToken;\r\n    address public deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    bool private swapping;\r\n\r\n    DividendTracker public dividendTracker;\r\n\r\n    address public marketingWallet;\r\n    address public manualbuyback;\r\n\r\n    uint256 public swapTokensAtAmount = 200000 * (10**18);\r\n\r\n    uint256 private RewardBuyFee = 3;\r\n    uint256 private RewardSellFee = 3;\r\n    uint256 private RewardTransferFee = 3;\r\n\r\n    uint256 private marketingBuyFee = 3;\r\n    uint256 private marketingSellFee = 3;\r\n    uint256 private marketingTransferFee = 3;\r\n\r\n    uint256 private manualbuybackBuyFee = 2;\r\n    uint256 private manualbuybackSellFee = 2;\r\n    uint256 private manualbuybackTransferFee = 2;\r\n    \r\n    uint256 private burnBuyFee = 2;\r\n    uint256 private burnSellFee = 2;\r\n    uint256 private burnTransferFee = 2;\r\n\r\n    uint256 public totalBuyFees = marketingBuyFee.add(RewardBuyFee).add(manualbuybackBuyFee).add(burnBuyFee);\r\n    uint256 public totalSellFees = marketingSellFee.add(RewardSellFee).add(manualbuybackSellFee).add(burnSellFee);\r\n    uint256 public totalTransferFees = marketingTransferFee.add(RewardTransferFee).add(manualbuybackTransferFee).add(burnTransferFee);\r\n    \r\n    uint256 private burnTotal;\r\n    \r\n    uint256 private countmanualbuybackFee = 0;\r\n    uint256 private countBurnFee = 0;\r\n    uint256 private countRewardFee = 0;\r\n\r\n    uint256 public gasForProcessing = 300000;\r\n\r\n\r\n    mapping (address => bool) private isExcludedFromFees;\r\n\r\n    mapping (address => bool) public automatedMarketMakerPairs;\r\n\r\n    event UpdateDividendTracker(address indexed newAddress, address indexed oldAddress);\r\n\r\n    event UpdateUniswapV2Router(address indexed newAddress, address indexed oldAddress);\r\n\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n    event ExcludeMultipleAccountsFromFees(address[] accounts, bool isExcluded);\r\n\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n\r\n    event GasForProcessingUpdated(uint256 indexed newValue, uint256 indexed oldValue);\r\n\r\n    event SendDividends(\r\n        uint256 amount\r\n    );\r\n\r\n    event SwapBNBForTokens(\r\n        uint256 amountIn,\r\n        address[] path\r\n    );\r\n\r\n    event Burned(uint256 tokenAmount);\r\n\r\n    event ProcessedDividendTracker(\r\n        uint256 iterations,\r\n        uint256 claims,\r\n        uint256 lastProcessedIndex,\r\n        bool indexed automatic,\r\n        uint256 gas,\r\n        address indexed processor\r\n    );\r\n\r\n    constructor() ERC20(\"DogeCEO Ai\", \"DOGEAI\") {\r\n\r\n        dividendTracker = new DividendTracker();\r\n        DividendToken = 0xb3e1D840bB97d9fC0012A6372a7c05BCC3D71077;\r\n        dividendTracker.setDividendTokenAddress(DividendToken);\r\n\r\n        marketingWallet = 0x16b71BdA20aAdC95cdb8B032b8Cff0cc92B0497a;\r\n        manualbuyback = 0x0Da29e4D080b0e792b769ef50D2caEEeeC9AA1A7;\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n      \r\n        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n        .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        uniswapV2Router = _uniswapV2Router;\r\n        uniswapV2Pair = _uniswapV2Pair;\r\n\r\n        _setAutomatedMarketMakerPair(_uniswapV2Pair, true);\r\n\r\n        excludeFromDividend(address(dividendTracker));\r\n        excludeFromDividend(address(this));\r\n        excludeFromDividend(address(_uniswapV2Router));\r\n        excludeFromDividend(deadAddress);\r\n\r\n\r\n        excludeFromFees(marketingWallet, true);\r\n        excludeFromFees(manualbuyback, true);\r\n        excludeFromFees(address(this), true);\r\n        excludeFromFees(owner(), true);\r\n\r\n        _mint(owner(), 100000000000 * (10**18));\r\n    }\r\n\r\n    receive() external payable {\r\n\r\n    }\r\n\r\n\r\n    function updateDividendToken(address _newToken) external onlyOwner {\r\n        DividendToken = _newToken;\r\n        dividendTracker.setDividendTokenAddress(_newToken);\r\n    }\r\n\r\n    function setSwapTokensAtAmount(uint256 _swapAmount) external onlyOwner {\r\n        swapTokensAtAmount = _swapAmount * (10**18);\r\n    }\r\n\r\n    function updateDividendTracker(address newAddress) public onlyOwner {\r\n        require(newAddress != address(dividendTracker), \" The dividend tracker already has that address\");\r\n\r\n        DividendTracker newDividendTracker = DividendTracker(payable(newAddress));\r\n\r\n        require(newDividendTracker.owner() == address(this), \" The new dividend tracker must be owned by the  token contract\");\r\n\r\n        newDividendTracker.excludeFromDividends(address(newDividendTracker));\r\n        newDividendTracker.excludeFromDividends(address(this));\r\n        newDividendTracker.excludeFromDividends(deadAddress);\r\n        newDividendTracker.excludeFromDividends(address(uniswapV2Router));\r\n\r\n        emit UpdateDividendTracker(newAddress, address(dividendTracker));\r\n\r\n        dividendTracker = newDividendTracker;\r\n    }\r\n\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n        require(isExcludedFromFees[account] != excluded, \"Already excluded\");\r\n        isExcludedFromFees[account] = excluded;\r\n\r\n        emit ExcludeFromFees(account, excluded);\r\n    }\r\n\r\n    function excludeFromDividend(address account) public onlyOwner {\r\n        dividendTracker.excludeFromDividends(address(account));\r\n    }\r\n\r\n    function excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) external onlyOwner {\r\n        for(uint256 i = 0; i < accounts.length; i++) {\r\n            isExcludedFromFees[accounts[i]] = excluded;\r\n        }\r\n\r\n        emit ExcludeMultipleAccountsFromFees(accounts, excluded);\r\n    }\r\n\r\n    function setAutomatedMarketMakerPair(address pair, bool value) public onlyOwner {\r\n        require(pair != uniswapV2Pair, \"cannot be removed\");\r\n\r\n        _setAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private onlyOwner {\r\n        automatedMarketMakerPairs[pair] = value;\r\n\r\n        if(value) {\r\n            dividendTracker.excludeFromDividends(pair);\r\n        }\r\n\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function updateGasForProcessing(uint256 newValue) external onlyOwner {\r\n        gasForProcessing = newValue;\r\n        emit GasForProcessingUpdated(newValue, gasForProcessing);\r\n    }\r\n\r\n    function updateMinimumBalanceForDividends(uint256 newMinimumBalance) external onlyOwner {\r\n        dividendTracker.updateMinimumTokenBalanceForDividends(newMinimumBalance);\r\n    }\r\n\r\n    function updateClaimWait(uint256 claimWait) external onlyOwner {\r\n        dividendTracker.updateClaimWait(claimWait);\r\n    }\r\n\r\n    function getClaimWait() external view returns(uint256) {\r\n        return dividendTracker.claimWait();\r\n    }\r\n\r\n    function getTotalDividendsDistributed() external view returns (uint256) {\r\n        return dividendTracker.totalDividendsDistributed();\r\n    }\r\n\r\n    function getIsExcludedFromFees(address account) public view returns(bool) {\r\n        return isExcludedFromFees[account];\r\n    }\r\n\r\n    function withdrawableDividendOf(address account) external view returns(uint256) {\r\n        return dividendTracker.withdrawableDividendOf(account);\r\n    }\r\n\r\n    function DividendTokenBalanceOf(address account) external view returns (uint256) {\r\n        return dividendTracker.balanceOf(account);\r\n    }\r\n\r\n    function getAccountDividendsInfo(address account)\r\n    external view returns (\r\n        address,\r\n        int256,\r\n        int256,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256) {\r\n        return dividendTracker.getAccount(account);\r\n    }\r\n\r\n    function getAccountDividendsInfoAtIndex(uint256 index)\r\n    external view returns (\r\n        address,\r\n        int256,\r\n        int256,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256) {\r\n        return dividendTracker.getAccountAtIndex(index);\r\n    }\r\n\r\n    function processDividendTracker(uint256 gas) external onlyOwner {\r\n        (uint256 Iterations, uint256 Claims, uint256 LastProcessedIndex) = dividendTracker.process(gas);\r\n        emit ProcessedDividendTracker(Iterations, Claims, LastProcessedIndex, false, gas, tx.origin);\r\n\r\n    }\r\n\r\n    function claim() external {\r\n        dividendTracker.processAccount(payable(msg.sender), false);\r\n    }\r\n\r\n    function getLastDividendProcessedIndex() external view returns(uint256) {\r\n        return dividendTracker.getLastProcessedIndex();\r\n    }\r\n\r\n    function getNumberOfDividendTokenHolders() external view returns(uint256) {\r\n        return dividendTracker.getNumberOfTokenHolders();\r\n    }\r\n\r\n    uint256 private marketingFeeActual;\r\n    uint256 private manualbuybackFeeActual;\r\n    uint256 private burnFeeActual;\r\n    uint256 private RewardFeeActual;\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n\r\n        if(from != uniswapV2Pair){\r\n            require(to != address(this), \"You cannot send tokens to the contract address!\");\r\n        }\r\n\r\n        if (amount == 0) {\r\n            super._transfer(from, to, 0);\r\n            return;\r\n        } else if (\r\n            !swapping && !isExcludedFromFees[from] && !isExcludedFromFees[to]\r\n        ) {\r\n            bool isSelling = automatedMarketMakerPairs[to];\r\n            bool isBuying = automatedMarketMakerPairs[from];\r\n\r\n\r\n            if (\r\n                isSelling && \r\n                from != address(uniswapV2Router)\r\n            ) {\r\n                \r\n                marketingFeeActual = marketingSellFee;\r\n                manualbuybackFeeActual = manualbuybackSellFee;\r\n                burnFeeActual = burnSellFee;\r\n                RewardFeeActual = RewardSellFee;\r\n            }\r\n\r\n            else if (\r\n                isBuying &&\r\n                to != address(uniswapV2Router)\r\n            ) {\r\n                 marketingFeeActual = marketingBuyFee;\r\n                 manualbuybackFeeActual = manualbuybackBuyFee;\r\n                 burnFeeActual = burnBuyFee;\r\n                 RewardFeeActual = RewardBuyFee;\r\n               \r\n            }else{\r\n\r\n                marketingFeeActual = marketingTransferFee;\r\n                manualbuybackFeeActual = manualbuybackTransferFee;\r\n                burnFeeActual = burnTransferFee;\r\n                RewardFeeActual = RewardTransferFee;\r\n\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n            bool canSwap = contractTokenBalance >= swapTokensAtAmount;\r\n            \r\n            if (canSwap && !automatedMarketMakerPairs[from]) {\r\n                swapping = true;\r\n\r\n\r\n                swapTokensForbuybackBurn(countBurnFee);\r\n\r\n                swapAndSendDividends(countRewardFee);\r\n\r\n                swapAndSendManualBuyBackBNB(countmanualbuybackFee);\r\n\r\n                swapAndSendMarketingBNB();\r\n\r\n                uint256 buyBackBalanceBnb = address(this).balance;\r\n                    \r\n                    if (buyBackBalanceBnb > buyBackUpperLimit) {\r\n                        buyBackBalanceBnb = buyBackUpperLimit;\r\n                    }\r\n\r\n                    buyBackAndBurn(buyBackBalanceBnb);\r\n\r\n                swapping = false;\r\n            }\r\n\r\n            uint256 marketingFeeAmount = amount.mul(marketingFeeActual).div(100);\r\n            uint256 manualbuybackFeeAmount = amount.mul(manualbuybackFeeActual).div(100);\r\n            uint256 burnFeeAmount = amount.mul(burnFeeActual).div(100);\r\n            uint256 RewardFeeAmount = amount.mul(RewardFeeActual).div(100);\r\n            \r\n            countmanualbuybackFee += manualbuybackFeeAmount;\r\n            countBurnFee += burnFeeAmount;\r\n            countRewardFee += RewardFeeAmount;\r\n\r\n            uint256 fees = marketingFeeAmount + manualbuybackFeeAmount + RewardFeeAmount + burnFeeAmount;\r\n            amount = amount.sub(fees);\r\n            super._transfer(from, address(this), fees);\r\n            \r\n            \r\n        }\r\n\r\n        super._transfer(from, to, amount);\r\n    \r\n        \r\n        try dividendTracker.setBalance(payable(from), balanceOf(from)) {} catch {}\r\n        try dividendTracker.setBalance(payable(to), balanceOf(to)) {} catch {}\r\n\r\n        if(!swapping) {\r\n            uint256 gas = gasForProcessing;\r\n\r\n                    try dividendTracker.process(gas) returns (uint256 iterations, uint256 claims, uint256 lastProcessedIndex) {\r\n                        emit ProcessedDividendTracker(iterations, claims, lastProcessedIndex, true, gas, tx.origin);\r\n                    }\r\n                    catch {\r\n\r\n                    }\r\n                  \r\n        }\r\n    }\r\n  \r\n    function swapAndSendManualBuyBackBNB(uint256 tokens) private {\r\n       \r\n       if(tokens <= 0){\r\n            return;\r\n        }\r\n\r\n        uint256 manualbuybackTokens = tokens;\r\n       \r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), manualbuybackTokens);\r\n        countmanualbuybackFee -= tokens;\r\n    \r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            manualbuybackTokens,\r\n            0,\r\n            path,\r\n            manualbuyback,\r\n            block.timestamp\r\n        );\r\n        \r\n    }\r\n\r\n    function swapAndSendMarketingBNB() private {\r\n\r\n        uint256 marketingTokens = balanceOf(address(this));\r\n\r\n        if(marketingTokens <= 0){\r\n            return;\r\n        }\r\n       \r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), marketingTokens);\r\n\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            marketingTokens,\r\n            0, \r\n            path,\r\n            marketingWallet,\r\n            block.timestamp\r\n        );\r\n        \r\n    }\r\n\r\n    function buyBackAndBurn(uint256 amount) private {\r\n       \r\n        address[] memory path = new address[](2);\r\n        path[0] = uniswapV2Router.WETH();\r\n        path[1] = address(this);\r\n\r\n        uint256 initialBalance = balanceOf(deadAddress);\r\n\r\n        uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(\r\n            0, \r\n            path,\r\n            deadAddress, \r\n            block.timestamp.add(300)\r\n        );\r\n\r\n        uint256 swappedBalance = balanceOf(deadAddress).sub(initialBalance);\r\n\r\n\r\n          burnTotal = burnTotal.add(swappedBalance);\r\n\r\n         emit Burned(swappedBalance);\r\n\r\n        _burn(deadAddress, swappedBalance);\r\n\r\n       \r\n    }\r\n    \r\n    function manualBuyBackAndBurn(uint256 _amount) public onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        require(balance >= buyBackUpperLimit.add(_amount), \" amount is too big\");\r\n\r\n        if (\r\n            !swapping\r\n        ) {\r\n            buyBackAndBurn(_amount);\r\n        }\r\n    }\r\n\r\n    function swapTokensForbuybackBurn(uint256 tokenAmount) private {\r\n\r\n        if(tokenAmount <= 0){\r\n            return;\r\n        }\r\n\r\n        if(tokenAmount > balanceOf(address(this))){\r\n            return;\r\n        }\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        countBurnFee -= tokenAmount;\r\n\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, \r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapTokensForBNB(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, \r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n    }\r\n\r\n    function swapTokensForDividendToken(uint256 _tokenAmount, address _recipient, address _dividendAddress) private {\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        path[2] = _dividendAddress;\r\n\r\n        _approve(address(this), address(uniswapV2Router), _tokenAmount);\r\n\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            _tokenAmount,\r\n            0, \r\n            path,\r\n            _recipient,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapAndSendDividends(uint256 tokens) private {\r\n\r\n       if(tokens <= 0){\r\n            return;\r\n        }\r\n        \r\n        countRewardFee -= tokens;\r\n        \r\n        swapTokensForDividendToken(tokens, address(this), DividendToken);\r\n        uint256 dividends = IERC20(DividendToken).balanceOf(address(this));\r\n        bool success = IERC20(DividendToken).transfer(address(dividendTracker), dividends);\r\n\r\n        if (success) {\r\n            dividendTracker.distributeDividends(dividends);\r\n            emit SendDividends(dividends);\r\n        }\r\n\r\n    }\r\n     \r\n\r\n}\r\n\r\ncontract DividendTracker is DividendPayingToken, Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeMathInt for int256;\r\n    using IterableMapping for IterableMapping.Map;\r\n\r\n    IterableMapping.Map private tokenHoldersMap;\r\n    uint256 public lastProcessedIndex;\r\n\r\n    mapping (address => bool) public excludedFromDividends;\r\n\r\n    mapping (address => uint256) public lastClaimTimes;\r\n\r\n    uint256 public claimWait;\r\n    uint256 public minimumTokenBalanceForDividends;\r\n\r\n    event ExcludeFromDividends(address indexed account);\r\n    event ClaimWaitUpdated(uint256 indexed newValue, uint256 indexed oldValue);\r\n\r\n    event Claim(address indexed account, uint256 amount, bool indexed automatic);\r\n\r\n    constructor() DividendPayingToken(\"Dividend_Tracker\", \"Dividend_Tracker\") {\r\n        claimWait = 3600;\r\n        minimumTokenBalanceForDividends = 10000 * (10**18); //must hold 10000+ tokens\r\n    }\r\n\r\n    function _transfer(address, address, uint256) pure internal override {\r\n        require(false, \"No allowed\");\r\n    }\r\n\r\n    function withdrawDividend() pure public override {\r\n        require(false, \"disabled\");\r\n    }\r\n\r\n    function setDividendTokenAddress(address newToken) external override onlyOwner {\r\n        dividendToken = newToken;\r\n    }\r\n\r\n    function updateMinimumTokenBalanceForDividends(uint256 _newMinimumBalance) external onlyOwner {\r\n        minimumTokenBalanceForDividends = _newMinimumBalance * (10**18);\r\n    }\r\n\r\n    function excludeFromDividends(address account) external onlyOwner {\r\n        require(!excludedFromDividends[account]);\r\n        excludedFromDividends[account] = true;\r\n\r\n        _setBalance(account, 0);\r\n        tokenHoldersMap.remove(account);\r\n\r\n        emit ExcludeFromDividends(account);\r\n    }\r\n\r\n    function updateClaimWait(uint256 newClaimWait) external onlyOwner {\r\n        require(newClaimWait >= 60 && newClaimWait <= 86400, \"wrong\");\r\n        emit ClaimWaitUpdated(newClaimWait, claimWait);\r\n        claimWait = newClaimWait;\r\n    }\r\n\r\n    function getLastProcessedIndex() external view returns(uint256) {\r\n        return lastProcessedIndex;\r\n    }\r\n\r\n    function getNumberOfTokenHolders() external view returns(uint256) {\r\n        return tokenHoldersMap.keys.length;\r\n    }\r\n\r\n\r\n    function getAccount(address _account)\r\n    public view returns (\r\n        address account,\r\n        int256 index,\r\n        int256 iterationsUntilProcessed,\r\n        uint256 withdrawableDividends,\r\n        uint256 totalDividends,\r\n        uint256 lastClaimTime,\r\n        uint256 nextClaimTime,\r\n        uint256 secondsUntilAutoClaimAvailable) {\r\n        account = _account;\r\n\r\n        index = tokenHoldersMap.getIndexOfKey(account);\r\n\r\n        iterationsUntilProcessed = -1;\r\n\r\n        if(index >= 0) {\r\n            if(uint256(index) > lastProcessedIndex) {\r\n                iterationsUntilProcessed = index.sub(int256(lastProcessedIndex));\r\n            }\r\n            else {\r\n                uint256 processesUntilEndOfArray = tokenHoldersMap.keys.length > lastProcessedIndex ?\r\n                tokenHoldersMap.keys.length.sub(lastProcessedIndex) :\r\n                0;\r\n\r\n\r\n                iterationsUntilProcessed = index.add(int256(processesUntilEndOfArray));\r\n            }\r\n        }\r\n\r\n\r\n        withdrawableDividends = withdrawableDividendOf(account);\r\n        totalDividends = accumulativeDividendOf(account);\r\n\r\n        lastClaimTime = lastClaimTimes[account];\r\n\r\n        nextClaimTime = lastClaimTime > 0 ?\r\n        lastClaimTime.add(claimWait) :\r\n        0;\r\n\r\n        secondsUntilAutoClaimAvailable = nextClaimTime > block.timestamp ?\r\n        nextClaimTime.sub(block.timestamp) :\r\n        0;\r\n    }\r\n\r\n    function getAccountAtIndex(uint256 index)\r\n    public view returns (\r\n        address,\r\n        int256,\r\n        int256,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256) {\r\n        if(index >= tokenHoldersMap.size()) {\r\n            return (0x0000000000000000000000000000000000000000, -1, -1, 0, 0, 0, 0, 0);\r\n        }\r\n\r\n        address account = tokenHoldersMap.getKeyAtIndex(index);\r\n\r\n        return getAccount(account);\r\n    }\r\n\r\n    function canAutoClaim(uint256 lastClaimTime) private view returns (bool) {\r\n        if(lastClaimTime > block.timestamp)  {\r\n            return false;\r\n        }\r\n\r\n        return block.timestamp.sub(lastClaimTime) >= claimWait;\r\n    }\r\n\r\n    function setBalance(address payable account, uint256 newBalance) external onlyOwner {\r\n        if(excludedFromDividends[account]) {\r\n            return;\r\n        }\r\n\r\n        if(newBalance >= minimumTokenBalanceForDividends) {\r\n            _setBalance(account, newBalance);\r\n            tokenHoldersMap.set(account, newBalance);\r\n        }\r\n        else {\r\n            _setBalance(account, 0);\r\n            tokenHoldersMap.remove(account);\r\n        }\r\n\r\n        processAccount(account, true);\r\n    }\r\n\r\n    function process(uint256 gas) public returns (uint256, uint256, uint256) {\r\n        uint256 numberOfTokenHolders = tokenHoldersMap.keys.length;\r\n\r\n        if(numberOfTokenHolders == 0) {\r\n            return (0, 0, lastProcessedIndex);\r\n        }\r\n\r\n        uint256 _lastProcessedIndex = lastProcessedIndex;\r\n\r\n        uint256 gasUsed = 0;\r\n\r\n        uint256 gasLeft = gasleft();\r\n\r\n        uint256 iterations = 0;\r\n        uint256 claims = 0;\r\n\r\n        while(gasUsed < gas && iterations < numberOfTokenHolders) {\r\n            _lastProcessedIndex++;\r\n\r\n            if(_lastProcessedIndex >= tokenHoldersMap.keys.length) {\r\n                _lastProcessedIndex = 0;\r\n            }\r\n\r\n            address account = tokenHoldersMap.keys[_lastProcessedIndex];\r\n\r\n            if(canAutoClaim(lastClaimTimes[account])) {\r\n                if(processAccount(payable(account), true)) {\r\n                    claims++;\r\n                }\r\n            }\r\n\r\n            iterations++;\r\n\r\n            uint256 newGasLeft = gasleft();\r\n\r\n            if(gasLeft > newGasLeft) {\r\n                gasUsed = gasUsed.add(gasLeft.sub(newGasLeft));\r\n            }\r\n\r\n            gasLeft = newGasLeft;\r\n        }\r\n\r\n        lastProcessedIndex = _lastProcessedIndex;\r\n\r\n        return (iterations, claims, lastProcessedIndex);\r\n    }\r\n\r\n    function processAccount(address payable account, bool automatic) public onlyOwner returns (bool) {\r\n        uint256 amount = _withdrawDividendOfUser(account);\r\n\r\n        if(amount > 0) {\r\n            lastClaimTimes[account] = block.timestamp;\r\n            emit Claim(account, amount, automatic);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeMultipleAccountsFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"GasForProcessingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claims\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastProcessedIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"automatic\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"processor\",\"type\":\"address\"}],\"name\":\"ProcessedDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapBNBForTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DividendToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"DividendTokenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackUpperLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendTracker\",\"outputs\":[{\"internalType\":\"contract DividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeMultipleAccountsFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasForProcessing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountDividendsInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAccountDividendsInfoAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimWait\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getIsExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastDividendProcessedIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfDividendTokenHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDividendsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"manualBuyBackAndBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualbuyback\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"processDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapAmount\",\"type\":\"uint256\"}],\"name\":\"setSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuyFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSellFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTransferFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimWait\",\"type\":\"uint256\"}],\"name\":\"updateClaimWait\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newToken\",\"type\":\"address\"}],\"name\":\"updateDividendToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateGasForProcessing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinimumBalance\",\"type\":\"uint256\"}],\"name\":\"updateMinimumBalanceForDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawableDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DOGEAI", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "IterableMapping:dc2b6978b5e9f9e3fd8e6520e4dad5664b249452", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a5cfb696b8f17292cf040317cecb14092f4910da63ad0e266990c49798713edf"}