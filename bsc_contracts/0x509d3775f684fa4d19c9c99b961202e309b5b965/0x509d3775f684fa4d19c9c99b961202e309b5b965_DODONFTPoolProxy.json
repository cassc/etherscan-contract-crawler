{"SourceCode": "// File: contracts/lib/SafeMath.sol\r\n\r\n/*\r\n\r\n    Copyright 2020 DODO ZOO.\r\n    SPDX-License-Identifier: Apache-2.0\r\n\r\n*/\r\n\r\npragma solidity 0.6.9;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @author DODO Breeder\r\n *\r\n * @notice Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"MUL_ERROR\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"DIVIDING_ERROR\");\r\n        return a / b;\r\n    }\r\n\r\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 quotient = div(a, b);\r\n        uint256 remainder = a - quotient * b;\r\n        if (remainder > 0) {\r\n            return quotient + 1;\r\n        } else {\r\n            return quotient;\r\n        }\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SUB_ERROR\");\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"ADD_ERROR\");\r\n        return c;\r\n    }\r\n\r\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\r\n        uint256 z = x / 2 + 1;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/lib/InitializableOwnable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @author DODO Breeder\r\n *\r\n * @notice Ownership related functions\r\n */\r\ncontract InitializableOwnable {\r\n    address public _OWNER_;\r\n    address public _NEW_OWNER_;\r\n    bool internal _INITIALIZED_;\r\n\r\n    // ============ Events ============\r\n\r\n    event OwnershipTransferPrepared(address indexed previousOwner, address indexed newOwner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    // ============ Modifiers ============\r\n\r\n    modifier notInitialized() {\r\n        require(!_INITIALIZED_, \"DODO_INITIALIZED\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _OWNER_, \"NOT_OWNER\");\r\n        _;\r\n    }\r\n\r\n    // ============ Functions ============\r\n\r\n    function initOwner(address newOwner) public notInitialized {\r\n        _INITIALIZED_ = true;\r\n        _OWNER_ = newOwner;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        emit OwnershipTransferPrepared(_OWNER_, newOwner);\r\n        _NEW_OWNER_ = newOwner;\r\n    }\r\n\r\n    function claimOwnership() public {\r\n        require(msg.sender == _NEW_OWNER_, \"INVALID_CLAIM\");\r\n        emit OwnershipTransferred(_OWNER_, _NEW_OWNER_);\r\n        _OWNER_ = _NEW_OWNER_;\r\n        _NEW_OWNER_ = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/lib/CloneFactory.sol\r\n\r\n\r\ninterface ICloneFactory {\r\n    function clone(address prototype) external returns (address proxy);\r\n}\r\n\r\n// File: contracts/lib/ReentrancyGuard.sol\r\n\r\n\r\n/**\r\n * @title ReentrancyGuard\r\n * @author DODO Breeder\r\n *\r\n * @notice Protect functions from Reentrancy Attack\r\n */\r\ncontract ReentrancyGuard {\r\n    // https://solidity.readthedocs.io/en/latest/control-structures.html?highlight=zero-state#scoping-and-declarations\r\n    // zero-state of _ENTERED_ is false\r\n    bool private _ENTERED_;\r\n\r\n    modifier preventReentrant() {\r\n        require(!_ENTERED_, \"REENTRANT\");\r\n        _ENTERED_ = true;\r\n        _;\r\n        _ENTERED_ = false;\r\n    }\r\n}\r\n\r\n// File: contracts/NFTPool/intf/IFilter.sol\r\n\r\n\r\ninterface IFilter {\r\n    function init(\r\n        address filterAdmin,\r\n        address nftCollection,\r\n        bool[] memory toggles,\r\n        string memory filterName,\r\n        uint256[] memory numParams,\r\n        uint256[] memory priceRules,\r\n        uint256[] memory spreadIds\r\n    ) external;\r\n\r\n    function isNFTValid(address nftCollectionAddress, uint256 nftId) external view returns (bool);\r\n\r\n    function _NFT_COLLECTION_() external view returns (address);\r\n\r\n    function queryNFTIn(uint256 NFTInAmount)\r\n        external\r\n        view\r\n        returns (uint256 rawReceive, uint256 received);\r\n\r\n    function queryNFTTargetOut(uint256 NFTOutAmount)\r\n        external\r\n        view\r\n        returns (uint256 rawPay, uint256 pay);\r\n\r\n    function queryNFTRandomOut(uint256 NFTOutAmount)\r\n        external\r\n        view\r\n        returns (uint256 rawPay, uint256 pay);\r\n\r\n    function ERC721In(uint256[] memory tokenIds, address to) external returns (uint256 received);\r\n\r\n    function ERC721TargetOut(uint256[] memory tokenIds, address to) external returns (uint256 paid);\r\n\r\n    function ERC721RandomOut(uint256 amount, address to) external returns (uint256 paid);\r\n\r\n    function ERC1155In(uint256[] memory tokenIds, address to) external returns (uint256 received);\r\n\r\n    function ERC1155TargetOut(\r\n        uint256[] memory tokenIds,\r\n        uint256[] memory amounts,\r\n        address to\r\n    ) external returns (uint256 paid);\r\n\r\n    function ERC1155RandomOut(uint256 amount, address to) external returns (uint256 paid);\r\n}\r\n\r\n// File: contracts/NFTPool/intf/IFilterAdmin.sol\r\n\r\n\r\ninterface IFilterAdmin {\r\n    function _OWNER_() external view returns (address);\r\n\r\n    function _CONTROLLER_() external view returns (address);\r\n\r\n    function init(\r\n        address owner,\r\n        uint256 initSupply,\r\n        string memory name,\r\n        string memory symbol,\r\n        uint256 feeRate,\r\n        address controller,\r\n        address maintainer,\r\n        address[] memory filters\r\n    ) external;\r\n\r\n    function mintFragTo(address to, uint256 rawAmount) external returns (uint256 received);\r\n\r\n    function burnFragFrom(address from, uint256 rawAmount) external returns (uint256 paid);\r\n\r\n    function queryMintFee(uint256 rawAmount)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 poolFee,\r\n            uint256 mtFee,\r\n            uint256 afterChargedAmount\r\n        );\r\n\r\n    function queryBurnFee(uint256 rawAmount)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 poolFee,\r\n            uint256 mtFee,\r\n            uint256 afterChargedAmount\r\n        );\r\n}\r\n\r\n// File: contracts/intf/IDODONFTApprove.sol\r\n\r\n\r\ninterface IDODONFTApprove {\r\n    function isAllowedProxy(address _proxy) external view returns (bool);\r\n\r\n    function claimERC721(address nftContract, address who, address dest, uint256 tokenId) external;\r\n\r\n    function claimERC1155(address nftContract, address who, address dest, uint256 tokenId, uint256 amount) external;\r\n\r\n    function claimERC1155Batch(address nftContract, address who, address dest, uint256[] memory tokenIds, uint256[] memory amounts) external;\r\n}\r\n\r\n// File: contracts/intf/IERC20.sol\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: contracts/lib/SafeERC20.sol\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/SmartRoute/proxies/DODONFTPoolProxy.sol\r\n\r\n\r\ncontract DODONFTPoolProxy is InitializableOwnable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    // ============ Storage ============\r\n    address constant _ETH_ADDRESS_ = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    mapping(uint256 => address) public _FILTER_TEMPLATES_;\r\n    address public _FILTER_ADMIN_TEMPLATE_;\r\n    address public _MAINTAINER_;\r\n    address public _CONTROLLER_;\r\n    address public immutable _CLONE_FACTORY_;\r\n    address public immutable _DODO_NFT_APPROVE_;\r\n    address public immutable _DODO_APPROVE_;\r\n\r\n    mapping (address => bool) public isWhiteListed;\r\n\r\n    // ============ Event ==============\r\n    event SetFilterTemplate(uint256 idx, address filterTemplate);\r\n    event Erc721In(address filter, address to, uint256 received);\r\n    event Erc1155In(address filter, address to, uint256 received);\r\n\r\n    event CreateLiteNFTPool(address newFilterAdmin, address filterAdminOwner);\r\n    event CreateNFTPool(address newFilterAdmin, address filterAdminOwner, address filter);\r\n    event CreateFilterV1(address newFilterAdmin, address newFilterV1, address nftCollection, uint256 filterTemplateKey);\r\n    event Erc721toErc20(address nftContract, uint256 tokenId, address toToken, uint256 returnAmount);\r\n\r\n    event ChangeMaintainer(address newMaintainer);\r\n    event ChangeContoller(address newController);\r\n    event ChangeFilterAdminTemplate(address newFilterAdminTemplate);\r\n    event ChangeWhiteList(address contractAddr, bool isAllowed);\r\n\r\n    constructor(\r\n        address cloneFactory,\r\n        address filterAdminTemplate,\r\n        address controllerModel,\r\n        address defaultMaintainer,\r\n        address dodoNftApprove,\r\n        address dodoApprove\r\n    ) public {\r\n        _CLONE_FACTORY_ = cloneFactory;\r\n        _FILTER_ADMIN_TEMPLATE_ = filterAdminTemplate;\r\n        _CONTROLLER_ = controllerModel;\r\n        _MAINTAINER_ = defaultMaintainer;\r\n        _DODO_NFT_APPROVE_ = dodoNftApprove;\r\n        _DODO_APPROVE_ = dodoApprove;\r\n    }\r\n\r\n    // ================ ERC721 In and Out ===================\r\n    function erc721In(\r\n        address filter,\r\n        address nftCollection,\r\n        uint256[] memory tokenIds,\r\n        address to,\r\n        uint256 minMintAmount\r\n    ) external {\r\n        for(uint256 i = 0; i < tokenIds.length; i++) {\r\n            require(IFilter(filter).isNFTValid(nftCollection,tokenIds[i]), \"NOT_REGISTRIED\");\r\n            IDODONFTApprove(_DODO_NFT_APPROVE_).claimERC721(nftCollection, msg.sender, filter, tokenIds[i]);\r\n        }\r\n        uint256 received = IFilter(filter).ERC721In(tokenIds, to);\r\n        require(received >= minMintAmount, \"MINT_AMOUNT_NOT_ENOUGH\");\r\n\r\n        emit Erc721In(filter, to, received);\r\n    }\r\n\r\n    // ================== ERC1155 In and Out ===================\r\n    function erc1155In(\r\n        address filter,\r\n        address nftCollection,\r\n        uint256[] memory tokenIds,\r\n        uint256[] memory amounts,\r\n        address to,\r\n        uint256 minMintAmount\r\n    ) external {\r\n        for(uint256 i = 0; i < tokenIds.length; i++) {\r\n            require(IFilter(filter).isNFTValid(nftCollection,tokenIds[i]), \"NOT_REGISTRIED\");\r\n        }\r\n        IDODONFTApprove(_DODO_NFT_APPROVE_).claimERC1155Batch(nftCollection, msg.sender, filter, tokenIds, amounts);\r\n        uint256 received = IFilter(filter).ERC1155In(tokenIds, to);\r\n        require(received >= minMintAmount, \"MINT_AMOUNT_NOT_ENOUGH\");\r\n\r\n        emit Erc1155In(filter, to, received);\r\n    }\r\n\r\n    // ================== Create NFTPool ===================\r\n    function createLiteNFTPool(\r\n        address filterAdminOwner,\r\n        string[] memory infos, // 0 => fragName, 1 => fragSymbol\r\n        uint256[] memory numParams //0 - initSupply, 1 - fee\r\n    ) external returns(address newFilterAdmin) {\r\n        newFilterAdmin = ICloneFactory(_CLONE_FACTORY_).clone(_FILTER_ADMIN_TEMPLATE_);\r\n        \r\n        address[] memory filters = new address[](0);\r\n        \r\n        IFilterAdmin(newFilterAdmin).init(\r\n            filterAdminOwner, \r\n            numParams[0],\r\n            infos[0],\r\n            infos[1],\r\n            numParams[1],\r\n            _CONTROLLER_,\r\n            _MAINTAINER_,\r\n            filters\r\n        );\r\n\r\n        emit CreateLiteNFTPool(newFilterAdmin, filterAdminOwner);\r\n    }\r\n\r\n\r\n\r\n    function createNewNFTPoolV1(\r\n        address filterAdminOwner,\r\n        address nftCollection,\r\n        uint256 filterKey, //1 => FilterERC721V1, 2 => FilterERC1155V1\r\n        string[] memory infos, // 0 => filterName, 1 => fragName, 2 => fragSymbol\r\n        uint256[] memory numParams,//0 - initSupply, 1 - fee\r\n        bool[] memory toggles,\r\n        uint256[] memory filterNumParams, //0 - startId, 1 - endId, 2 - maxAmount, 3 - minAmount\r\n        uint256[] memory priceRules,\r\n        uint256[] memory spreadIds\r\n    ) external returns(address newFilterAdmin) {\r\n        newFilterAdmin = ICloneFactory(_CLONE_FACTORY_).clone(_FILTER_ADMIN_TEMPLATE_);\r\n\r\n        address filterV1 = createFilterV1(\r\n            filterKey,\r\n            newFilterAdmin,\r\n            nftCollection,\r\n            toggles,\r\n            infos[0],\r\n            filterNumParams,\r\n            priceRules,\r\n            spreadIds\r\n        );\r\n\r\n        address[] memory filters = new address[](1);\r\n        filters[0] = filterV1;\r\n        \r\n        IFilterAdmin(newFilterAdmin).init(\r\n            filterAdminOwner, \r\n            numParams[0],\r\n            infos[1],\r\n            infos[2],\r\n            numParams[1],\r\n            _CONTROLLER_,\r\n            _MAINTAINER_,\r\n            filters\r\n        );\r\n\r\n        emit CreateNFTPool(newFilterAdmin, filterAdminOwner, filterV1);\r\n    }\r\n\r\n    // ================== Create Filter ===================\r\n    function createFilterV1(\r\n        uint256 key,\r\n        address filterAdmin,\r\n        address nftCollection,\r\n        bool[] memory toggles,\r\n        string memory filterName,\r\n        uint256[] memory numParams, //0 - startId, 1 - endId, 2 - maxAmount, 3 - minAmount\r\n        uint256[] memory priceRules,\r\n        uint256[] memory spreadIds\r\n    ) public returns(address newFilterV1) {\r\n        newFilterV1 = ICloneFactory(_CLONE_FACTORY_).clone(_FILTER_TEMPLATES_[key]);\r\n\r\n        emit CreateFilterV1(filterAdmin, newFilterV1, nftCollection, key);\r\n        \r\n        IFilter(newFilterV1).init(\r\n            filterAdmin,\r\n            nftCollection,\r\n            toggles,\r\n            filterName,\r\n            numParams,\r\n            priceRules,\r\n            spreadIds\r\n        );\r\n    }\r\n\r\n\r\n    // ================== NFT ERC20 Swap ======================\r\n    function erc721ToErc20(\r\n        address filterAdmin,\r\n        address filter,\r\n        address nftContract,\r\n        uint256 tokenId,\r\n        address toToken,\r\n        address dodoProxy,\r\n        bytes memory dodoSwapData\r\n    ) \r\n        external\r\n        preventReentrant\r\n    {\r\n        IDODONFTApprove(_DODO_NFT_APPROVE_).claimERC721(nftContract, msg.sender, filter, tokenId);\r\n\r\n        uint256[] memory tokenIds = new uint256[](1);\r\n        tokenIds[0] = tokenId;\r\n\r\n        uint256 receivedFragAmount = IFilter(filter).ERC721In(tokenIds, address(this));\r\n\r\n        _generalApproveMax(filterAdmin, _DODO_APPROVE_, receivedFragAmount);\r\n\r\n        require(isWhiteListed[dodoProxy], \"Not Whitelist Proxy Contract\");\r\n        (bool success, ) = dodoProxy.call(dodoSwapData);\r\n        require(success, \"API_SWAP_FAILED\");\r\n\r\n        uint256 returnAmount = _generalBalanceOf(toToken, address(this));\r\n\r\n        _generalTransfer(toToken, msg.sender, returnAmount);\r\n\r\n        emit Erc721toErc20(nftContract, tokenId, toToken, returnAmount);\r\n    }\r\n    \r\n\r\n    //====================== Ownable ========================\r\n    function changeMaintainer(address newMaintainer) external onlyOwner {\r\n        _MAINTAINER_ = newMaintainer;\r\n        emit ChangeMaintainer(newMaintainer);\r\n    }\r\n\r\n    function changeFilterAdminTemplate(address newFilterAdminTemplate) external onlyOwner {\r\n        _FILTER_ADMIN_TEMPLATE_ = newFilterAdminTemplate;\r\n        emit ChangeFilterAdminTemplate(newFilterAdminTemplate);\r\n    }\r\n\r\n    function changeController(address newController) external onlyOwner {\r\n        _CONTROLLER_ = newController;\r\n        emit ChangeContoller(newController);\r\n    }\r\n\r\n    function setFilterTemplate(uint256 idx, address newFilterTemplate) external onlyOwner {\r\n        _FILTER_TEMPLATES_[idx] = newFilterTemplate;\r\n        emit SetFilterTemplate(idx, newFilterTemplate);\r\n    }\r\n\r\n    function changeWhiteList(address contractAddr, bool isAllowed) external onlyOwner {\r\n        isWhiteListed[contractAddr] = isAllowed;\r\n        emit ChangeWhiteList(contractAddr, isAllowed);\r\n    }\r\n\r\n    //======================= Internal =====================\r\n    function _generalApproveMax(\r\n        address token,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        uint256 allowance = IERC20(token).allowance(address(this), to);\r\n        if (allowance < amount) {\r\n            if (allowance > 0) {\r\n                IERC20(token).safeApprove(to, 0);\r\n            }\r\n            IERC20(token).safeApprove(to, uint256(-1));\r\n        }\r\n    }\r\n\r\n    function _generalBalanceOf(\r\n        address token, \r\n        address who\r\n    ) internal view returns (uint256) {\r\n        if (token == _ETH_ADDRESS_) {\r\n            return who.balance;\r\n        } else {\r\n            return IERC20(token).balanceOf(who);\r\n        }\r\n    }\r\n\r\n    function _generalTransfer(\r\n        address token,\r\n        address payable to,\r\n        uint256 amount\r\n    ) internal {\r\n        if (amount > 0) {\r\n            if (token == _ETH_ADDRESS_) {\r\n                to.transfer(amount);\r\n            } else {\r\n                IERC20(token).safeTransfer(to, amount);\r\n            }\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cloneFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"filterAdminTemplate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"controllerModel\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"defaultMaintainer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dodoNftApprove\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dodoApprove\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"ChangeContoller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFilterAdminTemplate\",\"type\":\"address\"}],\"name\":\"ChangeFilterAdminTemplate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMaintainer\",\"type\":\"address\"}],\"name\":\"ChangeMaintainer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAllowed\",\"type\":\"bool\"}],\"name\":\"ChangeWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFilterAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFilterV1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftCollection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"filterTemplateKey\",\"type\":\"uint256\"}],\"name\":\"CreateFilterV1\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFilterAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"filterAdminOwner\",\"type\":\"address\"}],\"name\":\"CreateLiteNFTPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFilterAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"filterAdminOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"filter\",\"type\":\"address\"}],\"name\":\"CreateNFTPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"filter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"received\",\"type\":\"uint256\"}],\"name\":\"Erc1155In\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"filter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"received\",\"type\":\"uint256\"}],\"name\":\"Erc721In\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"name\":\"Erc721toErc20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferPrepared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"filterTemplate\",\"type\":\"address\"}],\"name\":\"SetFilterTemplate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_CLONE_FACTORY_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_CONTROLLER_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_DODO_APPROVE_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_DODO_NFT_APPROVE_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_FILTER_ADMIN_TEMPLATE_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_FILTER_TEMPLATES_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_MAINTAINER_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_NEW_OWNER_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_OWNER_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"changeController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFilterAdminTemplate\",\"type\":\"address\"}],\"name\":\"changeFilterAdminTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMaintainer\",\"type\":\"address\"}],\"name\":\"changeMaintainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isAllowed\",\"type\":\"bool\"}],\"name\":\"changeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"filterAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftCollection\",\"type\":\"address\"},{\"internalType\":\"bool[]\",\"name\":\"toggles\",\"type\":\"bool[]\"},{\"internalType\":\"string\",\"name\":\"filterName\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"numParams\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"priceRules\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"spreadIds\",\"type\":\"uint256[]\"}],\"name\":\"createFilterV1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newFilterV1\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"filterAdminOwner\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"infos\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"numParams\",\"type\":\"uint256[]\"}],\"name\":\"createLiteNFTPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newFilterAdmin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"filterAdminOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftCollection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"filterKey\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"infos\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"numParams\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"toggles\",\"type\":\"bool[]\"},{\"internalType\":\"uint256[]\",\"name\":\"filterNumParams\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"priceRules\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"spreadIds\",\"type\":\"uint256[]\"}],\"name\":\"createNewNFTPoolV1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newFilterAdmin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"filter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftCollection\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minMintAmount\",\"type\":\"uint256\"}],\"name\":\"erc1155In\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"filter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftCollection\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minMintAmount\",\"type\":\"uint256\"}],\"name\":\"erc721In\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"filterAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"filter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dodoProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"dodoSwapData\",\"type\":\"bytes\"}],\"name\":\"erc721ToErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"initOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhiteListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newFilterTemplate\",\"type\":\"address\"}],\"name\":\"setFilterTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DODONFTPoolProxy", "CompilerVersion": "v0.6.9+commit.3e3065ac", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000003e2427859119e497eb856a166f616a2ce5f8c88000000000000000000000000de8a380e84998986a59be6519ff172d40c0f9d410000000000000000000000004187aab02f9e3abdeb9a6cc71397a7a839113634000000000000000000000000caa42f09af66a8bae3a7445a7f63dad97c11638b0000000000000000000000008f697865fb43236683a174fee87fd84db64c7a6c000000000000000000000000a128ba44b2738a558a1fdc06d6303d52d3cef8c1", "EVMVersion": "Default", "Library": "", "LicenseType": "Apache-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://33cef3c9649c69047626025f475e887a67627615cb3996055f7693ba946459e4"}