{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/Equity.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC-BY-NC-4.0\\r\\npragma solidity 0.8.12;\\r\\n\\r\\nimport \\\"./token/ReflectiveToken.sol\\\";\\r\\n\\r\\ncontract Equity is ReflectiveToken {\\r\\n    // V2 Changelog [Polygon V1]\\r\\n    //  ReflectiveToken:\\r\\n    //      Replace 'ERC20' with 'ERC20Permit' - This will allow EIP-2612 permits  \\r\\n    //      Fixed L04 of 'deadAddress' - Renamed to 'DEAD_ADDRESS'\\r\\n    //      Fixed L04 of 'maxFee' - Renamed to 'MAX_FEE'\\r\\n    //      Updated 'function getTimeLockOf(address account) external view returns (bool)' - getTimeLockOf now returns the whole TimeLock struct\\r\\n    //      Added 'function addExtraTimeToTimeLockOf(address account, uint256 extraTime) external onlySharedOwners' - Method to extend the TimeLock of still locked accounts (only team & marketing wallets are locked)'\\r\\n    //      Added 'tokenPairOtherTokenAddress' - Used to change the default other token address from WETH to whatever is wanted, additionally WETH is now also supported as defaultReflectionTokenAddress inside the iReflectionTracker\\r\\n    //          Added 'address tokenPairOtherTokenAddress_' parameter to the constructor - If set to address(0), WETH is used by default\\r\\n    //          Added 'event TokenPairOtherTokenAddressUpdated(address indexed oldTokenPairOtherTokenAddress, address indexed newTokenPairOtherTokenAddress)' - Event for any changes made to _tokenPairOtherTokenAddress\\r\\n    //          Added 'function getTokenPairOtherTokenAddress() external view returns (address)' - External getter for fetching the current other token address\\r\\n    //          Added 'function setTokenPairOtherTokenAddress(address tokenPairOtherTokenAddress) external onlySharedOwners' - External setter for sharedOwners to change the desired other token address\\r\\n    //      Added 'IReflective' - Used for the IReflectionTracker, this will deprecate the need of the IERC20 interface as the main interface for the ReflectiveToken\\r\\n    //          Added 'function getBalanceOf(address account) external view returns (uint256) - External getter for fetching the current balance of an address\\r\\n    //          Added 'function getTokenPairOtherTokenAddress() external view returns (address)' - See above under tokenPairOtherTokenAddress\\r\\n    //      Updated constructor - Wrapped all parameters inside a struct to bypass compiler errors\\r\\n    //      Updated processAll - It now supports a force flag to process all accounts, even accounts on claim cooldown\\r\\n    // V3 Changelog [Polygon V1 RC]\\r\\n    //  Overall:\\r\\n    //      The overall system was changed to allow the holding of tokens of different fees. The RTT share is based on the accumulated value of tokens per fee.\\r\\n    constructor(address[] memory teamWallets_, address marketingWallet_, address uniswapV2Router02Address_) ReflectiveToken(\\r\\n        ConstructorArguments(\\r\\n            \\\"Equity\\\",\\r\\n            \\\"Equity\\\",\\r\\n            1000000,\\r\\n            teamWallets_,\\r\\n            marketingWallet_,\\r\\n            12500,\\r\\n            uniswapV2Router02Address_,\\r\\n            address(0),\\r\\n            500,\\r\\n            5,\\r\\n            10\\r\\n        )\\r\\n    ) {}\\r\\n}\"\r\n    },\r\n    \"/contracts/token/ReflectiveToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC-BY-NC-4.0\\r\\npragma solidity 0.8.12;\\r\\n\\r\\nimport \\\"../access/SharedOwnable.sol\\\";\\r\\nimport \\\"../interfaces/IReflectionTracker.sol\\\";\\r\\nimport \\\"../interfaces/IReflective.sol\\\";\\r\\nimport \\\"../libraries/IterableMappingUint256Uint256.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\\\";\\r\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\r\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\r\\n\\r\\ncontract ReflectiveToken is ERC20Permit, IReflective, SharedOwnable {\\r\\n    struct ConstructorArguments {\\r\\n        string name;\\r\\n        string symbol;\\r\\n        uint256 supply;\\r\\n        address[] teamWallets;\\r\\n        address marketingWallet;\\r\\n        uint256 teamAndMarketingWalletReflectiveShare;\\r\\n        address uniswapV2Router02Address;\\r\\n        address tokenPairOtherTokenAddress;\\r\\n        uint256 minimumTokenBalanceForSwapAndSendReflections;\\r\\n        uint256 baseFee;\\r\\n        uint256 defaultFee;\\r\\n    }\\r\\n\\r\\n    struct CustomFee {\\r\\n        bool set;\\r\\n        uint256 value;\\r\\n    }\\r\\n\\r\\n    struct ExcludedFromFeeCollection {\\r\\n        bool asSender;\\r\\n        bool asRecipient;\\r\\n    }\\r\\n\\r\\n    using IterableMappingUint256Uint256 for IterableMappingUint256Uint256.Map;\\r\\n\\r\\n    event UniswapV2Router02Updated(address indexed oldUniswapV2Router02Address, address indexed newUniswapV2Router02Address);\\r\\n    event TokenPairOtherTokenAddressUpdated(address indexed oldTokenPairOtherTokenAddress, address indexed newTokenPairOtherTokenAddress);\\r\\n    event IsUniswapV2PairUpdated(address indexed account, bool oldIsUniswapV2Pair, bool newIsUniswapV2Pair);\\r\\n    event IsFeeCollectorUpdated(address indexed account, bool oldIsFeeCollector, bool newIsFeeCollector);\\r\\n    event ReflectionTrackerUpdated(address indexed oldReflectionTrackerAddress, address indexed newReflectionTrackerAddress);\\r\\n    event MinimumTokenBalanceForSwapAndSendReflectionsUpdated(uint256 oldMinimumTokenBalanceForSwapAndSendReflections, uint256 newMinimumTokenBalanceForSwapAndSendReflections);\\r\\n    event RegularTransferAllowed();\\r\\n    event BaseFeeUpdated(uint256 oldBaseFee, uint256 newBaseFee);\\r\\n    event DefaultFeeUpdated(uint256 oldDefaultFee, uint256 newDefaultFee);\\r\\n    event FeeOfUpdated(address indexed account, uint256 oldFee, uint256 newFee);\\r\\n    event ExcludedFromFeeCollectionOfUpdated(address indexed account, ExcludedFromFeeCollection oldExcludedFromFeeCollection, ExcludedFromFeeCollection newExcludedFromFeeCollection);\\r\\n    event ExcludedFromFeeBalancesOfUpdated(address indexed account, bool oldExcludedFromFeeBalancesOf, bool newExcludedFromFeeBalancesOf);\\r\\n    event AutomatedReflectionTrackerCallsUpdated(bool oldAutomatedReflectionTrackerCalls, bool newAutomatedReflectionTrackerCalls);\\r\\n\\r\\n    event ReflectionsSent(address tokenAddress, uint256 tokenAmount);\\r\\n    event ReflectionsProcessed(uint256 gasUsed, uint256 iterations, uint256 claims, uint256 lastProcessedIndex, bool automatic, address indexed processor);\\r\\n\\r\\n    address constant private DEAD_ADDRESS = 0x000000000000000000000000000000000000dEaD;\\r\\n    uint256 constant private UINT256_MAX_VALUE = 2 ** 256 - 1;\\r\\n    uint256 constant private MAX_FEE = 25;\\r\\n\\r\\n    address[] private _teamWallets;\\r\\n    address private _marketingWallet;\\r\\n    IUniswapV2Router02 private _uniswapV2Router02;\\r\\n    IUniswapV2Router02 private _uniswapV2Router02WithFeeSupport;\\r\\n    address private _tokenPairOtherTokenAddress;\\r\\n    mapping(address => bool) private _isUniswapV2Pair;\\r\\n    mapping(address => bool) private _isFeeCollector;\\r\\n    uint256 private _minimumTokenBalanceForSwapAndSendReflections;\\r\\n    bool private _regularTransferAllowed;\\r\\n    uint256 private _baseFee;\\r\\n    uint256 private _defaultFee;\\r\\n    IReflectionTracker private _reflectionTracker;\\r\\n    mapping(address => bool) private _transferLockOf;\\r\\n    mapping(address => CustomFee) private _feeOf;\\r\\n    mapping(address => ExcludedFromFeeCollection) private _excludedFromFeeCollectionOf;\\r\\n    mapping(address => bool) private _excludedFromFeeBalancesOf;\\r\\n    mapping(address => IterableMappingUint256Uint256.Map) private _feeBalances;\\r\\n    bool private _automatedReflectionTrackerCalls;\\r\\n    bool private _inTransferSubStep;\\r\\n\\r\\n    constructor(ConstructorArguments memory constructorArguments_) ERC20Permit(constructorArguments_.name) ERC20(constructorArguments_.name, constructorArguments_.symbol) {\\r\\n        _teamWallets = constructorArguments_.teamWallets;\\r\\n    \\t_marketingWallet = constructorArguments_.marketingWallet;\\r\\n        _uniswapV2Router02 = IUniswapV2Router02(constructorArguments_.uniswapV2Router02Address);\\r\\n        _tokenPairOtherTokenAddress = constructorArguments_.tokenPairOtherTokenAddress == address(0) ? _uniswapV2Router02.WETH() : constructorArguments_.tokenPairOtherTokenAddress;\\r\\n        _minimumTokenBalanceForSwapAndSendReflections = constructorArguments_.minimumTokenBalanceForSwapAndSendReflections * (10**decimals());\\r\\n        _regularTransferAllowed = false;\\r\\n        _baseFee = constructorArguments_.baseFee;\\r\\n        if (_baseFee > MAX_FEE)\\r\\n            revert(\\\"ReflectiveToken: max base fee exceeded\\\");\\r\\n        _defaultFee = constructorArguments_.defaultFee;\\r\\n        if (_defaultFee < _baseFee)\\r\\n            revert(\\\"ReflectiveToken: min default fee subceeded\\\");\\r\\n        if (_defaultFee > MAX_FEE)\\r\\n            revert(\\\"ReflectiveToken: max default fee exceeded\\\");\\r\\n\\r\\n        address uniswapV2Pair = _getOrCreateTokenPair(_uniswapV2Router02, address(this), _tokenPairOtherTokenAddress);\\r\\n        _isUniswapV2Pair[uniswapV2Pair] = true;\\r\\n        _isFeeCollector[uniswapV2Pair] = true;\\r\\n        _excludedFromFeeBalancesOf[uniswapV2Pair] = true;\\r\\n        _excludedFromFeeCollectionOf[address(this)] = ExcludedFromFeeCollection(true, true);\\r\\n        _excludedFromFeeCollectionOf[DEAD_ADDRESS] = ExcludedFromFeeCollection(true, true);\\r\\n        _excludedFromFeeCollectionOf[constructorArguments_.uniswapV2Router02Address] = ExcludedFromFeeCollection(true, true);\\r\\n        _excludedFromFeeBalancesOf[address(this)] = true;\\r\\n        _excludedFromFeeBalancesOf[DEAD_ADDRESS] = true;\\r\\n        _excludedFromFeeBalancesOf[constructorArguments_.uniswapV2Router02Address] = true;\\r\\n\\r\\n        for (uint256 i = 0; i < _teamWallets.length; i++)\\r\\n            _setDeveloperWalletOptions(_teamWallets[i]);\\r\\n        _setDeveloperWalletOptions(_marketingWallet);\\r\\n        _updateDeveloperWalletReflectiveShares(constructorArguments_.teamAndMarketingWalletReflectiveShare);\\r\\n\\r\\n        _automatedReflectionTrackerCalls = true;\\r\\n\\r\\n        _excludedFromFeeCollectionOf[msg.sender] = ExcludedFromFeeCollection(true, true);\\r\\n        _excludedFromFeeBalancesOf[msg.sender] = true;\\r\\n        _mint(msg.sender, constructorArguments_.supply * (10**decimals()));\\r\\n    }\\r\\n\\r\\n    modifier onlyUniswapV2Router02WithFeeSupport() {\\r\\n        require(address(_uniswapV2Router02WithFeeSupport) == msg.sender, \\\"ReflectionTrackerToken: caller is not the uniswap v2 router 02 with fee support\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    function getMaxFee() external pure returns (uint256) {\\r\\n        return MAX_FEE;\\r\\n    }\\r\\n\\r\\n    function getBalanceOf(address account) external view returns (uint256) {\\r\\n        return balanceOf(account);\\r\\n    }\\r\\n\\r\\n    function getFeeBalancesOf(address account) external view returns (SimpleFeeBalanceMap memory) {\\r\\n        return _getFeeBalancesOf(account);\\r\\n    }\\r\\n\\r\\n    function _getFeeBalancesOf(address account) private view returns (SimpleFeeBalanceMap memory feeBalances) {\\r\\n        if (_excludedFromFeeBalancesOf[account])\\r\\n            return feeBalances;\\r\\n\\r\\n        uint256 length = _feeBalances[account].keys.length;\\r\\n        feeBalances = SimpleFeeBalanceMap(length, new uint256[](length), new uint256[](length));\\r\\n        for (uint256 i = 0; i < length; i++) {\\r\\n            feeBalances.keys[i] = _feeBalances[account].keys[i];\\r\\n            feeBalances.values[i] = _feeBalances[account].values[feeBalances.keys[i]];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getUniswapV2Router02Address() external view returns (address) {\\r\\n        return address(_uniswapV2Router02);\\r\\n    }\\r\\n\\r\\n    function setUniswapV2Router02Address(address uniswapV2Router02Address) external onlySharedOwners {\\r\\n        address oldUniswapV2Router02Address = address(_uniswapV2Router02);\\r\\n        if (oldUniswapV2Router02Address != uniswapV2Router02Address) {\\r\\n            IUniswapV2Router02 uniswapV2Router02 = IUniswapV2Router02(uniswapV2Router02Address);\\r\\n\\r\\n            address oldUniswapV2Pair = _getOrCreateTokenPair(_uniswapV2Router02, address(this), _tokenPairOtherTokenAddress);\\r\\n            address uniswapV2Pair = _getOrCreateTokenPair(uniswapV2Router02, address(this), _tokenPairOtherTokenAddress);\\r\\n            if (oldUniswapV2Pair != uniswapV2Pair) {\\r\\n                _setIsUniswapV2Pair(oldUniswapV2Pair, false);\\r\\n                _setIsUniswapV2Pair(uniswapV2Pair, true);\\r\\n            }\\r\\n\\r\\n            _uniswapV2Router02 = uniswapV2Router02;\\r\\n            emit UniswapV2Router02Updated(oldUniswapV2Router02Address, uniswapV2Router02Address);\\r\\n            if (address(_reflectionTracker) != address(0))\\r\\n                _reflectionTracker.setUniswapV2Router02Address(uniswapV2Router02Address);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getUniswapV2Router02WithFeeSupport() external view returns (address) {\\r\\n        return address(_uniswapV2Router02WithFeeSupport);\\r\\n    }\\r\\n\\r\\n    function setUniswapV2Router02WithFeeSupport(address uniswapV2Router02WithFeeSupport) external onlySharedOwners {\\r\\n        _uniswapV2Router02WithFeeSupport = IUniswapV2Router02(uniswapV2Router02WithFeeSupport);\\r\\n    }\\r\\n\\r\\n    function getTokenPairOtherTokenAddress() external view returns (address) {\\r\\n        return _tokenPairOtherTokenAddress;\\r\\n    }\\r\\n\\r\\n    function setTokenPairOtherTokenAddress(address tokenPairOtherTokenAddress) external onlySharedOwners {\\r\\n        if (tokenPairOtherTokenAddress == address(0))\\r\\n            tokenPairOtherTokenAddress = _uniswapV2Router02.WETH();\\r\\n\\r\\n        address oldTokenPairOtherTokenAddress = _tokenPairOtherTokenAddress;\\r\\n        if (oldTokenPairOtherTokenAddress != tokenPairOtherTokenAddress) {\\r\\n            IERC20 liquidityPairToken = IERC20(tokenPairOtherTokenAddress);\\r\\n\\r\\n            liquidityPairToken.totalSupply();\\r\\n            address oldUniswapV2Pair = _getOrCreateTokenPair(_uniswapV2Router02, address(this), _tokenPairOtherTokenAddress);\\r\\n            address uniswapV2Pair = _getOrCreateTokenPair(_uniswapV2Router02, address(this), tokenPairOtherTokenAddress);\\r\\n            if (oldUniswapV2Pair != uniswapV2Pair)\\r\\n                _setIsUniswapV2Pair(uniswapV2Pair, true);\\r\\n\\r\\n            _tokenPairOtherTokenAddress = tokenPairOtherTokenAddress;\\r\\n            emit TokenPairOtherTokenAddressUpdated(oldTokenPairOtherTokenAddress, tokenPairOtherTokenAddress);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getIsUniswapV2Pair(address account) external view returns (bool) {\\r\\n        return _isUniswapV2Pair[account];\\r\\n    }\\r\\n\\r\\n    function setIsUniswapV2Pair(address account, bool isUniswapV2Pair) external onlySharedOwners {\\r\\n        _setIsUniswapV2Pair(account, isUniswapV2Pair);\\r\\n    }\\r\\n\\r\\n    function _setIsUniswapV2Pair(address account, bool isUniswapV2Pair) private {\\r\\n        bool oldIsUniswapV2Pair = _isUniswapV2Pair[account];\\r\\n        if (oldIsUniswapV2Pair != isUniswapV2Pair) {\\r\\n            _isUniswapV2Pair[account] = isUniswapV2Pair;\\r\\n            _setIsFeeCollector(account, isUniswapV2Pair);\\r\\n            _setExcludedFromFeeCollectionOf(account, ExcludedFromFeeCollection(!isUniswapV2Pair, !isUniswapV2Pair));\\r\\n            _setExcludedFromFeeBalancesOf(account, isUniswapV2Pair);\\r\\n            emit IsUniswapV2PairUpdated(account, oldIsUniswapV2Pair, isUniswapV2Pair);\\r\\n            if (address(_reflectionTracker) != address(0))\\r\\n                _reflectionTracker.setExcludedFromReflectionsOf(account, isUniswapV2Pair);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getIsFeeCollector(address account) external view returns (bool) {\\r\\n        return _isFeeCollector[account];\\r\\n    }\\r\\n\\r\\n    function setIsFeeCollector(address account, bool isFeeCollector) external onlySharedOwners {\\r\\n        _setIsFeeCollector(account, isFeeCollector);\\r\\n    }\\r\\n\\r\\n    function _setIsFeeCollector(address account, bool isFeeCollector) private {\\r\\n        bool oldIsFeeCollector = _isFeeCollector[account];\\r\\n        if (oldIsFeeCollector != isFeeCollector) {\\r\\n            _isFeeCollector[account] = isFeeCollector;\\r\\n            emit IsFeeCollectorUpdated(account, oldIsFeeCollector, isFeeCollector);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getMinimumTokenBalanceForSwapAndSendReflections() external view returns (uint256) {\\r\\n        return _minimumTokenBalanceForSwapAndSendReflections;\\r\\n    }\\r\\n\\r\\n    function setMinimumTokenBalanceForSwapAndSendReflections(uint256 minimumTokenBalanceForSwapAndSendReflections) external onlySharedOwners {\\r\\n        minimumTokenBalanceForSwapAndSendReflections *= 10**decimals();\\r\\n        uint256 oldMinimumTokenBalanceForSwapAndSendReflections = _minimumTokenBalanceForSwapAndSendReflections;\\r\\n        if (oldMinimumTokenBalanceForSwapAndSendReflections != minimumTokenBalanceForSwapAndSendReflections) {\\r\\n            _minimumTokenBalanceForSwapAndSendReflections = minimumTokenBalanceForSwapAndSendReflections;\\r\\n            emit MinimumTokenBalanceForSwapAndSendReflectionsUpdated(oldMinimumTokenBalanceForSwapAndSendReflections, minimumTokenBalanceForSwapAndSendReflections);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isRegularTransferAllowed() external view returns (bool) {\\r\\n        return _regularTransferAllowed;\\r\\n    }\\r\\n\\r\\n    function allowRegularTransfer() external onlySharedOwners {\\r\\n        if (!_regularTransferAllowed) {\\r\\n            _regularTransferAllowed = true;\\r\\n            emit RegularTransferAllowed();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getBaseFee() external view returns (uint256) {\\r\\n        return _baseFee;\\r\\n    }\\r\\n\\r\\n    function setBaseFee(uint256 baseFee) external onlySharedOwners {\\r\\n        if (baseFee > MAX_FEE)\\r\\n            revert(\\\"ReflectiveToken: max base fee exceeded\\\");\\r\\n\\r\\n        uint256 oldBaseFee = _baseFee;\\r\\n        if (oldBaseFee != baseFee) {\\r\\n            _baseFee = baseFee;\\r\\n            emit BaseFeeUpdated(oldBaseFee, baseFee);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getDefaultFee() external view returns (uint256) {\\r\\n        return _defaultFee;\\r\\n    }\\r\\n\\r\\n    function setDefaultFee(uint256 defaultFee) external onlySharedOwners {\\r\\n        if (defaultFee < _baseFee)\\r\\n            revert(\\\"ReflectiveToken: min default fee subceeded\\\");\\r\\n        if (defaultFee > MAX_FEE)\\r\\n            revert(\\\"ReflectiveToken: max default fee exceeded\\\");\\r\\n\\r\\n        uint256 oldDefaultFee = _defaultFee;\\r\\n        if (oldDefaultFee != defaultFee) {\\r\\n            _defaultFee = defaultFee;\\r\\n            emit DefaultFeeUpdated(oldDefaultFee, defaultFee);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getReflectionTrackerAddress() external view returns (address) {\\r\\n        return address(_reflectionTracker);\\r\\n    }\\r\\n\\r\\n    function setReflectionTrackerAddress(address reflectionTrackerAddress) external onlySharedOwners {\\r\\n        address oldReflectionTrackerAddress = address(_reflectionTracker);\\r\\n        if (oldReflectionTrackerAddress != reflectionTrackerAddress) {\\r\\n            IReflectionTracker reflectionTracker = IReflectionTracker(reflectionTrackerAddress);\\r\\n            if (!reflectionTracker.isBoundTo(address(this)))\\r\\n                revert(\\\"ReflectiveToken: reflection tracker is not bound to this contract\\\");\\r\\n\\r\\n            _reflectionTracker = reflectionTracker;\\r\\n            emit ReflectionTrackerUpdated(oldReflectionTrackerAddress, reflectionTrackerAddress);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getFee() external view returns (uint256) {\\r\\n        return _getFeeOf(msg.sender);\\r\\n    }\\r\\n\\r\\n    function getFeeOf(address account) external view returns (uint256) {\\r\\n        return _getFeeOf(account);\\r\\n    }\\r\\n\\r\\n    function setFee(uint256 fee) external {\\r\\n        _setFeeOf(msg.sender, fee);\\r\\n    }\\r\\n\\r\\n    function setFeeOf(address account, uint256 fee) external onlySharedOwners {\\r\\n        _setFeeOf(account, fee);\\r\\n    }\\r\\n\\r\\n    function getCustomFeeOf(address account) external view returns (bool set, uint256 value) {\\r\\n        set = _feeOf[account].set;\\r\\n        value = _feeOf[account].value;\\r\\n    }\\r\\n\\r\\n    function setCustomFeeOf(address account, bool set, uint256 value) external onlyUniswapV2Router02WithFeeSupport {\\r\\n        _feeOf[account] = CustomFee(set, value);\\r\\n    }\\r\\n\\r\\n    function getExcludedFromFeeCollectionOf(address account) external view returns (ExcludedFromFeeCollection memory) {\\r\\n        return _excludedFromFeeCollectionOf[account];\\r\\n    }\\r\\n\\r\\n    function setExcludedFromFeeCollectionOf(address account, ExcludedFromFeeCollection memory excludedFromFeeCollection) external onlySharedOwners {\\r\\n        return _setExcludedFromFeeCollectionOf(account, excludedFromFeeCollection);\\r\\n    }\\r\\n\\r\\n    function getExcludedFromFeeBalancesOf(address account) external view returns (bool) {\\r\\n        return _excludedFromFeeBalancesOf[account];\\r\\n    }\\r\\n\\r\\n    function setExcludedFromFeeBalancesOf(address account, bool excludedFromFeeBalancesOf) external onlySharedOwners {\\r\\n        return _setExcludedFromFeeBalancesOf(account, excludedFromFeeBalancesOf);\\r\\n    }\\r\\n\\r\\n    function getAutomatedReflectionTrackerCalls() external view returns (bool) {\\r\\n        return _automatedReflectionTrackerCalls;\\r\\n    }\\r\\n\\r\\n    function setAutomatedReflectionTrackerCalls(bool automatedReflectionTrackerCalls) external onlySharedOwners {\\r\\n        bool oldAutomatedReflectionTrackerCalls = _automatedReflectionTrackerCalls;\\r\\n        if (oldAutomatedReflectionTrackerCalls != automatedReflectionTrackerCalls) {\\r\\n            _automatedReflectionTrackerCalls = automatedReflectionTrackerCalls;\\r\\n            emit AutomatedReflectionTrackerCallsUpdated(oldAutomatedReflectionTrackerCalls, automatedReflectionTrackerCalls);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function swapAndSendReflections(uint256 amount) external onlySharedOwners {\\r\\n        _swapAndSendReflections(amount);\\r\\n    }\\r\\n\\r\\n\\tfunction processAll(uint256 processingGas, bool force) external onlySharedOwners {\\r\\n        if (address(_reflectionTracker) != address(0)) {\\r\\n            (uint256 gasUsed, uint256 iterations, uint256 claims, uint256 lastProcessedIndex) = _reflectionTracker.processAll(processingGas, force);\\r\\n            emit ReflectionsProcessed(gasUsed, iterations, claims, lastProcessedIndex, false, tx.origin);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function swapAndSendReflectionsAndProcessAll(uint256 amount, uint256 processingGas, bool force) external onlySharedOwners {\\r\\n        _swapAndSendReflections(amount);\\r\\n        if (address(_reflectionTracker) != address(0)) {\\r\\n            (uint256 gasUsed, uint256 iterations, uint256 claims, uint256 lastProcessedIndex) = _reflectionTracker.processAll(processingGas, force);\\r\\n            emit ReflectionsProcessed(gasUsed, iterations, claims, lastProcessedIndex, false, tx.origin);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function updateDeveloperWalletReflectiveShares(uint256 reflectiveShare) external onlyCreator {\\r\\n        _updateDeveloperWalletReflectiveShares(reflectiveShare);\\r\\n    }\\r\\n\\r\\n    function updateReflectiveShares(address account, uint256 reflectiveShare) external onlyCreator {\\r\\n        _updateReflectiveShares(account, reflectiveShare);\\r\\n    }\\r\\n\\r\\n    function collectData(address account) external view returns (uint256 balance, SimpleFeeBalanceMap memory feeBalances, uint256 withdrawnReflections, uint256 withdrawableReflections, address reflectionTokenAddress, uint256 baseFee, uint256 fee, uint256 maxFee, uint256 totalReflectionsTransferred) {\\r\\n        if (account != address(0)) {\\r\\n            balance = balanceOf(account);\\r\\n            feeBalances = _getFeeBalancesOf(account);\\r\\n            if (address(_reflectionTracker) != address(0)) {\\r\\n                withdrawnReflections = _reflectionTracker.getWithdrawnReflectionsOf(account);\\r\\n                withdrawableReflections = _reflectionTracker.getWithdrawableReflectionsOf(account);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (address(_reflectionTracker) != address(0)) {\\r\\n            if (account != address(0)) {\\r\\n                if (!_reflectionTracker.getReflectionInETHOf(account)) {\\r\\n                    reflectionTokenAddress = _reflectionTracker.getReflectionTokenAddressOf(account);\\r\\n                    if (reflectionTokenAddress == address(0))\\r\\n                        reflectionTokenAddress = _reflectionTracker.getDefaultReflectionTokenAddress();\\r\\n                }\\r\\n            } else\\r\\n                reflectionTokenAddress = _reflectionTracker.getDefaultReflectionTokenAddress();\\r\\n        }\\r\\n\\r\\n        baseFee = _baseFee;\\r\\n        fee = account != address(0) ? _getFeeOf(account) : _defaultFee;\\r\\n        maxFee = MAX_FEE;\\r\\n        if (address(_reflectionTracker) != address(0))\\r\\n            totalReflectionsTransferred = _reflectionTracker.getTotalReflectionsTransferred();\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount, CustomFee(false, 0));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferWithExactFee(address recipient, uint256 amount, uint256 fee) external returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount, CustomFee(true, fee));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(sender, recipient, amount, CustomFee(false, 0));\\r\\n\\r\\n        uint256 currentAllowance = allowance(sender, _msgSender());\\r\\n        require(currentAllowance >= amount, \\\"ReflectiveToken: transfer amount exceeds allowance\\\");\\r\\n        unchecked {\\r\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFromWithExactFee(address sender, address recipient, uint256 amount, uint256 fee) external returns (bool) {\\r\\n        _transfer(sender, recipient, amount, CustomFee(true, fee));\\r\\n\\r\\n        uint256 currentAllowance = allowance(sender, _msgSender());\\r\\n        require(currentAllowance >= amount, \\\"ReflectiveToken: transfer amount exceeds allowance\\\");\\r\\n        unchecked {\\r\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _transfer(address sender, address recipient, uint256 amount, CustomFee memory fee) private {\\r\\n        require(!_transferLockOf[sender], \\\"ReflectiveToken: transfer from a locked address\\\");\\r\\n        require(!_transferLockOf[recipient], \\\"ReflectiveToken: transfer to a locked address\\\");\\r\\n\\r\\n        bool transferExcludedFromFeeCollections = _excludedFromFeeCollectionOf[sender].asSender || _excludedFromFeeCollectionOf[recipient].asRecipient;\\r\\n        require(_regularTransferAllowed || transferExcludedFromFeeCollections, \\\"ReflectiveToken: transfer with fees\\\");\\r\\n\\r\\n        if (_automatedReflectionTrackerCalls && !_inTransferSubStep && _isUniswapV2Pair[recipient] && balanceOf(address(this)) >= _minimumTokenBalanceForSwapAndSendReflections) {\\r\\n            _inTransferSubStep = true;\\r\\n            _swapAndSendReflections((_minimumTokenBalanceForSwapAndSendReflections / 100) * _getRandomNumber());\\r\\n            _inTransferSubStep = false;\\r\\n        }\\r\\n\\r\\n        bool transferCollectsFees = !transferExcludedFromFeeCollections && (_isFeeCollector[sender] || _isFeeCollector[recipient]);\\r\\n        if (!_excludedFromFeeBalancesOf[sender] || !_excludedFromFeeBalancesOf[recipient] || transferCollectsFees) {\\r\\n            SimpleFeeBalanceMap memory feeBalances = _getSuitableFeeBalances(sender, recipient, amount, fee);\\r\\n            (uint256 totalFeeValue, uint256 totalAmountAfterFees) = _applyFeeBalances(sender, recipient, transferCollectsFees, feeBalances);\\r\\n            if (totalFeeValue > 0) {\\r\\n                uint256 feePercentage = (totalFeeValue * 100) / amount;\\r\\n                require(feePercentage <= MAX_FEE, \\\"ReflectiveToken: max fee exceeded\\\");\\r\\n\\r\\n                amount -= totalFeeValue;\\r\\n                _transfer(sender, address(this), totalFeeValue);\\r\\n            }\\r\\n            require(amount == totalAmountAfterFees, \\\"ReflectiveToken: amount mismatch after fees\\\");\\r\\n        }\\r\\n\\r\\n        _transfer(sender, recipient, amount);\\r\\n\\r\\n        try _reflectionTracker.refreshBalanceOf(sender) {} catch {}\\r\\n        try _reflectionTracker.refreshBalanceOf(recipient) {} catch {}\\r\\n\\r\\n        if (_automatedReflectionTrackerCalls && !_inTransferSubStep) {\\r\\n            _inTransferSubStep = true;\\r\\n            try _reflectionTracker.processAll() returns (uint256 gasUsed, uint256 iterations, uint256 claims, uint256 lastProcessedIndex) {\\r\\n                emit ReflectionsProcessed(gasUsed, iterations, claims, lastProcessedIndex, true, tx.origin);\\r\\n            } catch {}\\r\\n            _inTransferSubStep = false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _getSuitableFeeBalances(address sender, address recipient, uint256 amount, CustomFee memory fee) private view returns (SimpleFeeBalanceMap memory feeBalances) {\\r\\n        if (fee.set || _isUniswapV2Pair[sender] || _excludedFromFeeBalancesOf[sender]) {\\r\\n            feeBalances = SimpleFeeBalanceMap(1, new uint256[](1), new uint256[](1));\\r\\n            feeBalances.keys[0] = fee.set ? fee.value : _getFeeOf(recipient);\\r\\n            feeBalances.values[0] = amount;\\r\\n        } else {\\r\\n            uint256[] memory keys = _feeBalances[sender].keys;\\r\\n            if (keys.length < 10)\\r\\n                _insertionSort(keys);\\r\\n            else\\r\\n                _uniqueSort(keys, keys.length);\\r\\n\\r\\n            feeBalances = SimpleFeeBalanceMap(keys.length, new uint256[](keys.length), new uint256[](keys.length));\\r\\n            uint256 missingAmount = amount;\\r\\n            uint256 localFee;\\r\\n            uint256 localFeeAmount;\\r\\n            for (uint256 i = 0; i < feeBalances.length; i++) {\\r\\n                if (missingAmount > 0) {\\r\\n                    localFee = keys[i];\\r\\n                    localFeeAmount = _feeBalances[sender].values[localFee];\\r\\n                    if (localFeeAmount > missingAmount)\\r\\n                        localFeeAmount = missingAmount;\\r\\n\\r\\n                    feeBalances.keys[i] = localFee;\\r\\n                    feeBalances.values[i] = localFeeAmount;\\r\\n                    missingAmount -= localFeeAmount;\\r\\n                } else {\\r\\n                    feeBalances.length = i;\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n            require(missingAmount == 0, \\\"ReflectiveToken: transfer amount exceeds fee balance\\\");\\r\\n        }\\r\\n        require(feeBalances.keys.length == feeBalances.values.length, \\\"ReflectiveToken: array mismatch\\\");\\r\\n    }\\r\\n\\r\\n    function _insertionSort(uint256[] memory data) private pure {\\r\\n        uint256 length = data.length;\\r\\n        for (uint256 i = 1; i < length; i++) {\\r\\n            uint256 key = data[i];\\r\\n            uint256 j = i - 1;\\r\\n            while ((int256(j) >= 0) && (data[j] > key)) {\\r\\n                data[j + 1] = data[j];\\r\\n                j = j > 0 ? j - 1 : UINT256_MAX_VALUE;\\r\\n            }\\r\\n            data[j == UINT256_MAX_VALUE ? 0 : j + 1] = key;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _uniqueSort(uint256[] memory data, uint256 setSize) private pure {\\r\\n        uint256 length = data.length;\\r\\n        bool[] memory set = new bool[](setSize);\\r\\n        for (uint256 i = 0; i < length; i++) {\\r\\n            set[data[i]] = true;\\r\\n        }\\r\\n        uint256 n = 0;\\r\\n        for (uint256 i = 0; i < setSize; i++) {\\r\\n            if (set[i]) {\\r\\n                data[n] = i;\\r\\n                if (++n >= length) break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _applyFeeBalances(address sender, address recipient, bool transferCollectsFees, SimpleFeeBalanceMap memory feeBalances) private returns (uint256 totalFeeValue, uint256 totalAmountAfterFees) {\\r\\n        uint256 localFee;\\r\\n        uint256 localFeeAmount;\\r\\n        uint256 localNewFeeAmount;\\r\\n        for (uint256 i = 0; i < feeBalances.length; i++) {\\r\\n            localFee = feeBalances.keys[i];\\r\\n            localFeeAmount = feeBalances.values[i];\\r\\n\\r\\n            if (!_excludedFromFeeBalancesOf[sender]) {\\r\\n                require(_feeBalances[sender].values[localFee] >= localFeeAmount, \\\"ReflectiveToken: transfer amount exceeds fee balance\\\");\\r\\n                localNewFeeAmount = _feeBalances[sender].values[localFee] - localFeeAmount;\\r\\n                if (localNewFeeAmount == 0)\\r\\n                    _feeBalances[sender].remove(localFee);\\r\\n                else\\r\\n                    _feeBalances[sender].set(localFee, localNewFeeAmount);\\r\\n            }\\r\\n            \\r\\n            if (transferCollectsFees) {\\r\\n                totalFeeValue += (localFee * localFeeAmount) / 100;\\r\\n                localFeeAmount -= (localFee * localFeeAmount) / 100;\\r\\n            }\\r\\n\\r\\n            if (!_excludedFromFeeBalancesOf[recipient]) {\\r\\n                localNewFeeAmount = _feeBalances[recipient].values[localFee] + localFeeAmount;\\r\\n                _feeBalances[recipient].set(localFee, localNewFeeAmount);\\r\\n            }\\r\\n\\r\\n            totalAmountAfterFees += localFeeAmount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _getOrCreateTokenPair(IUniswapV2Router02 uniswapV2Router02, address tokenAddress, address otherTokenAddress) private returns (address) {\\r\\n        address tokenPair = IUniswapV2Factory(uniswapV2Router02.factory()).getPair(tokenAddress, otherTokenAddress);\\r\\n        if (tokenPair == address(0))\\r\\n            tokenPair = IUniswapV2Factory(uniswapV2Router02.factory()).createPair(tokenAddress, otherTokenAddress);\\r\\n\\r\\n        return tokenPair;\\r\\n    }\\r\\n\\r\\n    function _setDeveloperWalletOptions(address account) private {\\r\\n        setSharedOwner(account);\\r\\n        _excludedFromFeeCollectionOf[account] = ExcludedFromFeeCollection(true, true);\\r\\n        _transferLockOf[account] = true;\\r\\n    }\\r\\n\\r\\n    function _updateDeveloperWalletReflectiveShares(uint256 reflectiveShare) private {\\r\\n        for (uint256 i = 0; i < _teamWallets.length; i++)\\r\\n            _updateReflectiveShares(_teamWallets[i], reflectiveShare);\\r\\n        _updateReflectiveShares(_marketingWallet, reflectiveShare * _teamWallets.length);\\r\\n    }\\r\\n\\r\\n    function _updateReflectiveShares(address account, uint256 reflectiveShare) private {\\r\\n        delete _feeBalances[account];\\r\\n        _feeBalances[account].set(MAX_FEE, reflectiveShare * (10**decimals()));\\r\\n        if (address(_reflectionTracker) != address(0))\\r\\n            try _reflectionTracker.refreshBalanceOf(account) {} catch {}\\r\\n    }\\r\\n\\r\\n    function _getFeeOf(address account) private view returns (uint256) {\\r\\n        return _feeOf[account].set ? _feeOf[account].value : _defaultFee;\\r\\n    }\\r\\n\\r\\n    function _setFeeOf(address account, uint256 fee) private {\\r\\n        if (fee < _baseFee)\\r\\n            revert(\\\"ReflectiveToken: min fee subceeded\\\");\\r\\n        if (fee > MAX_FEE)\\r\\n            revert(\\\"ReflectiveToken: max fee exceeded\\\");\\r\\n\\r\\n        bool oldSet = _feeOf[account].set;\\r\\n        uint256 oldFee = oldSet ? _feeOf[account].value : _defaultFee;\\r\\n        if (!oldSet || oldFee != fee) {\\r\\n            _feeOf[account] = CustomFee(true, fee);\\r\\n            emit FeeOfUpdated(account, oldFee, fee);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _setExcludedFromFeeCollectionOf(address account, ExcludedFromFeeCollection memory excludedFromFeeCollection) private {\\r\\n        ExcludedFromFeeCollection memory oldExcludedFromFeeCollection = _excludedFromFeeCollectionOf[account];\\r\\n        if (oldExcludedFromFeeCollection.asSender != excludedFromFeeCollection.asSender || oldExcludedFromFeeCollection.asRecipient != excludedFromFeeCollection.asRecipient) {\\r\\n            _excludedFromFeeCollectionOf[account] = excludedFromFeeCollection;\\r\\n            emit ExcludedFromFeeCollectionOfUpdated(account, oldExcludedFromFeeCollection, excludedFromFeeCollection);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _setExcludedFromFeeBalancesOf(address account, bool excludedFromFeeBalancesOf) private {\\r\\n        bool oldExcludedFromFeeBalancesOf = _excludedFromFeeBalancesOf[account];\\r\\n        if (oldExcludedFromFeeBalancesOf != excludedFromFeeBalancesOf) {\\r\\n            _excludedFromFeeBalancesOf[account] = excludedFromFeeBalancesOf;\\r\\n            emit ExcludedFromFeeBalancesOfUpdated(account, oldExcludedFromFeeBalancesOf, excludedFromFeeBalancesOf);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _swapAndSendReflections(uint256 amount) private {\\r\\n        if (address(_reflectionTracker) == address(0))\\r\\n            return;\\r\\n\\r\\n        IERC20 defaultReflectionTokenContract = IERC20(_reflectionTracker.getDefaultReflectionTokenAddress());\\r\\n\\r\\n        address[] memory path;\\r\\n        if (_tokenPairOtherTokenAddress == address(defaultReflectionTokenContract)) {\\r\\n            path = new address[](2);\\r\\n            path[0] = address(this);\\r\\n            path[1] = _tokenPairOtherTokenAddress;\\r\\n        } else {\\r\\n            path = new address[](3);\\r\\n            path[0] = address(this);\\r\\n            path[1] = _tokenPairOtherTokenAddress;\\r\\n            path[2] = address(defaultReflectionTokenContract);\\r\\n        }\\r\\n\\r\\n        _approve(address(this), address(_uniswapV2Router02), amount);\\r\\n\\r\\n        address reflectionTrackerAddress = address(_reflectionTracker);\\r\\n        uint256 defaultReflectionTokenAmountBeforeSwap = defaultReflectionTokenContract.balanceOf(reflectionTrackerAddress);\\r\\n        _uniswapV2Router02.swapExactTokensForTokensSupportingFeeOnTransferTokens(amount, 0, path, reflectionTrackerAddress, block.timestamp);\\r\\n        uint256 defaultReflectionTokenAmountAfterSwap = defaultReflectionTokenContract.balanceOf(reflectionTrackerAddress);\\r\\n\\r\\n        if (defaultReflectionTokenAmountAfterSwap > defaultReflectionTokenAmountBeforeSwap) {\\r\\n            uint256 defaultReflectionTokenAmount = defaultReflectionTokenAmountAfterSwap -defaultReflectionTokenAmountBeforeSwap;\\r\\n            _reflectionTracker.transferReflections(defaultReflectionTokenAmount);\\r\\n            emit ReflectionsSent(address(defaultReflectionTokenContract), defaultReflectionTokenAmount);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function _getRandomNumber() private view returns (uint256) {\\r\\n        uint256 seed = uint256(keccak256(abi.encodePacked(block.timestamp + block.difficulty + ((uint256(keccak256(abi.encodePacked(block.coinbase)))) / (block.timestamp)) + block.gaslimit + ((uint256(keccak256(abi.encodePacked(msg.sender)))) / (block.timestamp)) + block.number)));\\r\\n        uint256 number = (seed - ((seed / 100) * 100));\\r\\n        return number == 0 ? 1 : number;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/contracts/libraries/IterableMappingUint256Uint256.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.12;\\r\\n\\r\\nlibrary IterableMappingUint256Uint256 {\\r\\n    struct Map {\\r\\n        uint256[] keys;\\r\\n        mapping(uint256 => uint256) values;\\r\\n        mapping(uint256 => uint256) indexOf;\\r\\n        mapping(uint256 => bool) inserted;\\r\\n    }\\r\\n\\r\\n    function set(Map storage map, uint256 key, uint256 val) internal {\\r\\n        if (map.inserted[key])\\r\\n            map.values[key] = val;\\r\\n        else {\\r\\n            map.inserted[key] = true;\\r\\n            map.values[key] = val;\\r\\n            map.indexOf[key] = map.keys.length;\\r\\n            map.keys.push(key);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function remove(Map storage map, uint256 key) internal {\\r\\n        if (!map.inserted[key])\\r\\n            return;\\r\\n\\r\\n        delete map.inserted[key];\\r\\n        delete map.values[key];\\r\\n\\r\\n        uint256 index = map.indexOf[key];\\r\\n        uint256 lastIndex = map.keys.length - 1;\\r\\n        uint256 lastKey = map.keys[lastIndex];\\r\\n\\r\\n        map.indexOf[lastKey] = index;\\r\\n        delete map.indexOf[key];\\r\\n\\r\\n        map.keys[index] = lastKey;\\r\\n        map.keys.pop();\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IReflective.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC-BY-NC-4.0\\r\\npragma solidity 0.8.12;\\r\\n\\r\\nimport \\\"./IFeeable.sol\\\";\\r\\n\\r\\ninterface IReflective is IFeeable {\\r\\n  struct SimpleFeeBalanceMap {\\r\\n    uint256 length;\\r\\n    uint256[] keys;\\r\\n    uint256[] values;\\r\\n  }\\r\\n\\r\\n  function getBalanceOf(address account) external view returns (uint256);\\r\\n  function getFeeBalancesOf(address account) external view returns (SimpleFeeBalanceMap memory);\\r\\n\\r\\n  function getTokenPairOtherTokenAddress() external view returns (address);\\r\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IReflectionTracker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC-BY-NC-4.0\\r\\npragma solidity 0.8.12;\\r\\n\\r\\ninterface IReflectionTracker {\\r\\n  struct AccountInfo {\\r\\n    address account;\\r\\n    int256 index;\\r\\n    int256 iterationsUntilProcessed;\\r\\n    uint256 withdrawableReflections;\\r\\n    uint256 totalReflections;\\r\\n    uint256 lastClaimTimestamp;\\r\\n    uint256 nextClaimTimestamp;\\r\\n    uint256 secondsUntilAutoClaimAvailable;\\r\\n  }\\r\\n\\r\\n  event UniswapV2Router02AddressUpdated(address indexed oldUniswapV2Router02Address, address indexed newUniswapV2Router02Address);\\r\\n  event DefaultReflectionTokenAddressUpdated(address indexed oldDefaultReflectionTokenAddress, address indexed newDefaultReflectionTokenAddress);\\r\\n  event ClaimCooldownUpdated(uint256 oldClaimCooldown, uint256 newClaimCooldown);\\r\\n  event MinimumTokenBalanceForReflectionsUpdated(uint256 oldMinimumTokenBalanceForReflections, uint256 newMinimumTokenBalanceForReflections);\\r\\n  event ExcludedReflectionStateOfETHUpdated(bool oldExcludedReflectionStateOfETH, bool newExcludedReflectionStateOfETH);\\r\\n  event ExcludedReflectionTokenStateUpdated(address indexed account, bool oldExcludedReflectionTokenState, bool newExcludedReflectionTokenState);\\r\\n  event ExcludedFromReflectionsUpdated(address indexed account, bool oldExcludedFromReflections, bool newExcludedFromReflections);\\r\\n  event ProcessingGasUpdated(uint256 oldProcessingGas, uint256 newProcessingGas);\\r\\n\\r\\n  event ReflectionInETHUpdated(address indexed account, bool oldReflectionInETH, bool newReflectionInETH);\\r\\n  event DisabledAutomatedReflectionsUpdated(address indexed account, bool oldDisabledAutomatedReflections, bool newDisabledAutomatedReflections);\\r\\n  event ReflectionTokenAddressUpdated(address indexed account, address oldReflectionTokenAddress, address newReflectionTokenAddress);\\r\\n\\r\\n  event ReflectionsTransferred(address indexed account, uint256 defaultReflectionTokenAmount);\\r\\n\\r\\n  event ReflectionETHClaimed(address indexed account, uint256 ethAmount, bool automatic);\\r\\n  event ReflectionTokenClaimed(address indexed account, address tokenAddress, uint256 tokenAmount, bool automatic);\\r\\n\\r\\n  function isBoundTo(address reflectiveAddress) external view returns (bool);\\r\\n  function bindTo(address reflectiveAddress) external;\\r\\n\\r\\n  function getBalanceOf(address account) external view returns (uint256);\\r\\n  function refreshBalanceOf(address account) external;\\r\\n  function refreshBalance() external;\\r\\n\\r\\n  function getUniswapV2Router02Address() external view returns (address);\\r\\n  function setUniswapV2Router02Address(address uniswapV2Router02Address) external;\\r\\n  function getDefaultReflectionTokenAddress() external view returns (address);\\r\\n  function setDefaultReflectionTokenAddress(address defaultReflectionTokenAddress) external;\\r\\n  function getClaimCooldown() external view returns (uint256);\\r\\n  function setClaimCooldown(uint256 claimCooldown) external;\\r\\n  function getMinimumTokenBalanceForReflections() external view returns (uint256);\\r\\n  function setMinimumTokenBalanceForReflections(uint256 minimumTokenBalanceForReflections) external;\\r\\n  function getExcludedReflectionStateOfETH() external view returns (bool);\\r\\n  function setExcludedReflectionStateOfETH(bool excludedReflectionStateOfETH) external;\\r\\n  function getExcludedReflectionTokenStateOf(address account) external view returns (bool);\\r\\n  function setExcludedReflectionTokenStateOf(address account, bool excludedReflectionTokenState) external;\\r\\n  function getExcludedFromReflectionsOf(address account) external view returns (bool);\\r\\n  function setExcludedFromReflectionsOf(address account, bool excludedFromReflections) external;\\r\\n  function getProcessingGas() external view returns (uint256);\\r\\n  function setProcessingGas(uint256 processingGas) external;\\r\\n\\r\\n  function getReflectionInETH() external view returns (bool);\\r\\n  function getReflectionInETHOf(address account) external view returns (bool);\\r\\n  function setReflectionInETH(bool reflectionInETH) external;\\r\\n  function getReflectionTokenAddress() external view returns (address);\\r\\n  function getReflectionTokenAddressOf(address account) external view returns (address);\\r\\n  function setReflectionTokenAddress(address reflectionTokenAddress) external;\\r\\n\\r\\n  function getNumberOfHolders() external view returns (uint256);\\r\\n  function getLastProcessedIndex() external view returns (uint256);\\r\\n  function getTotalReflectionsTransferred() external view returns (uint256);\\r\\n\\r\\n  function getWithdrawnReflectionsOf(address account) external view returns (uint256);\\r\\n  function getWithdrawableReflectionsOf(address account) external view returns (uint256);\\r\\n\\r\\n  function getAccountInfoOf(address account) external view returns (AccountInfo memory);\\r\\n  function getAccountInfoAtIndex(uint256 index) external view returns (AccountInfo memory);\\r\\n\\r\\n  function transferReflections() external payable;\\r\\n  function transferReflections(uint256 amount) external;\\r\\n\\r\\n  function process() external returns (bool);\\r\\n  function processAll() external returns (uint256 gasUsed, uint256 iterations, uint256 claims, uint256 lastProcessedIndex);\\r\\n  function processAll(bool force) external returns (uint256 gasUsed, uint256 iterations, uint256 claims, uint256 lastProcessedIndex);\\r\\n  function processAll(uint256 processingGas, bool force) external returns (uint256 gasUsed, uint256 iterations, uint256 claims, uint256 lastProcessedIndex);\\r\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IFeeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC-BY-NC-4.0\\r\\npragma solidity >=0.6.2;\\r\\n\\r\\ninterface IFeeable {\\r\\n  function getMaxFee() external pure returns (uint256);\\r\\n\\r\\n  function getBaseFee() external view returns (uint256);\\r\\n\\r\\n  function getCustomFeeOf(address account) external view returns (bool set, uint256 value);\\r\\n  function setCustomFeeOf(address account, bool set, uint256 value) external;\\r\\n}\"\r\n    },\r\n    \"/contracts/access/SharedOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC-BY-NC-4.0\\r\\npragma solidity 0.8.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\nabstract contract SharedOwnable is Ownable {\\r\\n    address private _creator;\\r\\n    int256 _sharedOwnersCount;\\r\\n    mapping(address => bool) private _sharedOwners;\\r\\n    mapping(address => address[]) private _promoteVotes;\\r\\n    mapping(address => address[]) private _demoteVotes;\\r\\n    \\r\\n    event SharedOwnershipUpdated(address indexed sharedOwner, bool isSharedOwner);\\r\\n\\r\\n    constructor() Ownable() {\\r\\n        _creator = msg.sender;\\r\\n        _setIsSharedOwner(msg.sender, true);\\r\\n        renounceOwnership();\\r\\n    }\\r\\n\\r\\n    modifier onlyCreator() {\\r\\n        require(_creator == msg.sender, \\\"SharedOwnable: caller is not the creator\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlySharedOwners() {\\r\\n        require(_sharedOwners[msg.sender], \\\"SharedOwnable: caller is not a shared owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function getCreator() external view returns (address) {\\r\\n        return _creator;\\r\\n    }\\r\\n\\r\\n    function getSharedOwnerCount() external view returns (int256) {\\r\\n        return _sharedOwnersCount;\\r\\n    }\\r\\n\\r\\n    function isSharedOwner(address account) external view returns (bool) {\\r\\n        return _sharedOwners[account];\\r\\n    }\\r\\n\\r\\n    function setSharedOwner(address account) internal onlySharedOwners {\\r\\n        _setIsSharedOwner(account, true);\\r\\n    }\\r\\n\\r\\n    function votePromoteToSharedOwner(address account) external onlySharedOwners {\\r\\n        require(account != msg.sender, \\\"SharedOwnable: caller can not vote themself\\\");\\r\\n        require(!_sharedOwners[account], \\\"SharedOwnable: account is already a shared owner\\\");\\r\\n        uint256 promoteVotesLength = _promoteVotes[account].length;\\r\\n        for (uint256 i = 0; i < promoteVotesLength; i++)\\r\\n            require(_promoteVotes[account][i] != msg.sender, \\\"SharedOwnable: caller has voted already\\\");\\r\\n\\r\\n        _promoteVotes[account].push(msg.sender);\\r\\n        if (int256(promoteVotesLength + 1) >= ((_sharedOwnersCount + 1) / 2)) {\\r\\n            delete _promoteVotes[account];\\r\\n            _setIsSharedOwner(account, true);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function voteDemoteFromSharedOwner(address account) external onlySharedOwners {\\r\\n        require(account != msg.sender, \\\"SharedOwnable: caller can not vote themself\\\");\\r\\n        require(_sharedOwners[account], \\\"SharedOwnable: account is not a shared owner\\\");\\r\\n        uint256 demoteVotesLength = _demoteVotes[account].length;\\r\\n        for (uint256 i = 0; i < demoteVotesLength; i++)\\r\\n            require(_demoteVotes[account][i] != msg.sender, \\\"SharedOwnable: caller has voted already\\\");\\r\\n\\r\\n        _demoteVotes[account].push(msg.sender);\\r\\n        if (int256(demoteVotesLength + 1) >= ((_sharedOwnersCount + 1) / 2)) {\\r\\n            delete _demoteVotes[account];\\r\\n            _setIsSharedOwner(account, false);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _setIsSharedOwner(address account, bool sharedOwner) private {\\r\\n        if (_sharedOwners[account] != sharedOwner) {\\r\\n            _sharedOwners[account] = sharedOwner;\\r\\n            _sharedOwnersCount += sharedOwner ? int256(1) : -1;\\r\\n            emit SharedOwnershipUpdated(account, sharedOwner);\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20Permit.sol\\\";\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 500\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"teamWallets_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"marketingWallet_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniswapV2Router02Address_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldAutomatedReflectionTrackerCalls\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newAutomatedReflectionTrackerCalls\",\"type\":\"bool\"}],\"name\":\"AutomatedReflectionTrackerCallsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBaseFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBaseFee\",\"type\":\"uint256\"}],\"name\":\"BaseFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDefaultFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDefaultFee\",\"type\":\"uint256\"}],\"name\":\"DefaultFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldExcludedFromFeeBalancesOf\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newExcludedFromFeeBalancesOf\",\"type\":\"bool\"}],\"name\":\"ExcludedFromFeeBalancesOfUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"asSender\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"asRecipient\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct ReflectiveToken.ExcludedFromFeeCollection\",\"name\":\"oldExcludedFromFeeCollection\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"asSender\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"asRecipient\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct ReflectiveToken.ExcludedFromFeeCollection\",\"name\":\"newExcludedFromFeeCollection\",\"type\":\"tuple\"}],\"name\":\"ExcludedFromFeeCollectionOfUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"FeeOfUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldIsFeeCollector\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newIsFeeCollector\",\"type\":\"bool\"}],\"name\":\"IsFeeCollectorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldIsUniswapV2Pair\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newIsUniswapV2Pair\",\"type\":\"bool\"}],\"name\":\"IsUniswapV2PairUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMinimumTokenBalanceForSwapAndSendReflections\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinimumTokenBalanceForSwapAndSendReflections\",\"type\":\"uint256\"}],\"name\":\"MinimumTokenBalanceForSwapAndSendReflectionsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldReflectionTrackerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newReflectionTrackerAddress\",\"type\":\"address\"}],\"name\":\"ReflectionTrackerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasUsed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claims\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastProcessedIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"automatic\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"processor\",\"type\":\"address\"}],\"name\":\"ReflectionsProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"ReflectionsSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RegularTransferAllowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sharedOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSharedOwner\",\"type\":\"bool\"}],\"name\":\"SharedOwnershipUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldTokenPairOtherTokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTokenPairOtherTokenAddress\",\"type\":\"address\"}],\"name\":\"TokenPairOtherTokenAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldUniswapV2Router02Address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newUniswapV2Router02Address\",\"type\":\"address\"}],\"name\":\"UniswapV2Router02Updated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowRegularTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"collectData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"keys\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IReflective.SimpleFeeBalanceMap\",\"name\":\"feeBalances\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnReflections\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawableReflections\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"reflectionTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReflectionsTransferred\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAutomatedReflectionTrackerCalls\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCustomFeeOf\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"set\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDefaultFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getExcludedFromFeeBalancesOf\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getExcludedFromFeeCollectionOf\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"asSender\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"asRecipient\",\"type\":\"bool\"}],\"internalType\":\"struct ReflectiveToken.ExcludedFromFeeCollection\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getFeeBalancesOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"keys\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IReflective.SimpleFeeBalanceMap\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getFeeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getIsFeeCollector\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getIsUniswapV2Pair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumTokenBalanceForSwapAndSendReflections\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReflectionTrackerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSharedOwnerCount\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenPairOtherTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniswapV2Router02Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniswapV2Router02WithFeeSupport\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRegularTransferAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isSharedOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"processingGas\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"}],\"name\":\"processAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"automatedReflectionTrackerCalls\",\"type\":\"bool\"}],\"name\":\"setAutomatedReflectionTrackerCalls\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baseFee\",\"type\":\"uint256\"}],\"name\":\"setBaseFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"set\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setCustomFeeOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"defaultFee\",\"type\":\"uint256\"}],\"name\":\"setDefaultFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excludedFromFeeBalancesOf\",\"type\":\"bool\"}],\"name\":\"setExcludedFromFeeBalancesOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"asSender\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"asRecipient\",\"type\":\"bool\"}],\"internalType\":\"struct ReflectiveToken.ExcludedFromFeeCollection\",\"name\":\"excludedFromFeeCollection\",\"type\":\"tuple\"}],\"name\":\"setExcludedFromFeeCollectionOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setFeeOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isFeeCollector\",\"type\":\"bool\"}],\"name\":\"setIsFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapV2Pair\",\"type\":\"bool\"}],\"name\":\"setIsUniswapV2Pair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumTokenBalanceForSwapAndSendReflections\",\"type\":\"uint256\"}],\"name\":\"setMinimumTokenBalanceForSwapAndSendReflections\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reflectionTrackerAddress\",\"type\":\"address\"}],\"name\":\"setReflectionTrackerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenPairOtherTokenAddress\",\"type\":\"address\"}],\"name\":\"setTokenPairOtherTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uniswapV2Router02Address\",\"type\":\"address\"}],\"name\":\"setUniswapV2Router02Address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uniswapV2Router02WithFeeSupport\",\"type\":\"address\"}],\"name\":\"setUniswapV2Router02WithFeeSupport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swapAndSendReflections\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"processingGas\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"}],\"name\":\"swapAndSendReflectionsAndProcessAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"transferFromWithExactFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"transferWithExactFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reflectiveShare\",\"type\":\"uint256\"}],\"name\":\"updateDeveloperWalletReflectiveShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reflectiveShare\",\"type\":\"uint256\"}],\"name\":\"updateReflectiveShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"voteDemoteFromSharedOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"votePromoteToSharedOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Equity", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "500", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000cfa8b7dae05f9f168aed8522251a11dcc7429c6600000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e00000000000000000000000000000000000000000000000000000000000000040000000000000000000000006069f8d13020f9224e54524128492755cffedff4000000000000000000000000f24dd13ecbcadb05b1b7eb8089409b96a3b53ca00000000000000000000000004274847a17e3b1418dc9b6fde6c3b2a80f9a4f05000000000000000000000000c2cbf25bdd06daac529d3fee70f8c3c6ef13f2da", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}