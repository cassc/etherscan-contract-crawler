{"SourceCode": "/**\r\n * Twitter: https://twitter.com/Bitmars_BMARS\r\n * Telegram Channel: https://t.me/bitmars_announcements\r\n * Telegram Group: https://t.me/bitmars_official\r\n * Website: https://bitmars.net\r\n */\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: contracts/SafeTransfer.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\ncontract SafeTransfer is Ownable {\r\n    function _safeTransferToken(address _token) internal virtual onlyOwner {\r\n        IERC20Metadata token = IERC20Metadata(_token);\r\n        uint amount = token.balanceOf(address(this));\r\n        token.transfer(msg.sender, amount);        \r\n    }\r\n    function safeTransferToken(address _token) public onlyOwner {\r\n        _safeTransferToken(_token);\r\n    }\r\n    function safeTransferTokenWithAmount(address _token, uint _amount) public onlyOwner {\r\n        IERC20Metadata token = IERC20Metadata(_token);\r\n        token.transfer(msg.sender, _amount*10**token.decimals());   \r\n    }\r\n}\r\n\r\n// File: contracts/Bitswap.sol\r\n\r\n// contracts/Demo.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\ncontract BitmarsExchange is SafeTransfer {\r\n    struct TokenSale {\r\n        bool isActive;\r\n        uint buyWithBnbPrice;\r\n        uint buyWithStableTokenPrice;\r\n    }\r\n    uint256 public aSBlock; \r\n    uint256 public aEBlock; \r\n    uint256 public aCap; \r\n    uint256 public aTot; \r\n    uint256 public aAmt; \r\n    uint256 public sSBlock; \r\n    uint256 public sEBlock; \r\n    uint256 public sCap; \r\n    uint256 public sTot; \r\n    uint public minBuyWithBnb = 0.01 ether;\r\n    uint public minBuyWithStableToken = 5;\r\n    uint public percent = 10;\r\n    address public tokenAirdropAddress;\r\n    mapping(address => TokenSale) tokenSales;\r\n    mapping(address => bool) stableTokenLists;\r\n\r\n    event BuySale(string _buySym, uint _buyAmount, string _receiveSym,uint _receiveAmount);\r\n    constructor(\r\n        address _tokenAirdropAddress,\r\n        address _tokenSaleAddress\r\n    ){\r\n        tokenAirdropAddress = _tokenAirdropAddress;\r\n        // token address, bnbPrice, stablePrice*100\r\n        addPublicSaleToken(_tokenAirdropAddress, 1500000000, 300000000);\r\n        addPublicSaleToken(_tokenSaleAddress, 700, 70);\r\n        IERC20Metadata tokenAirdropInterface = IERC20Metadata(_tokenAirdropAddress);        \r\n        startSale(block.number, 999999999, 2000000000000);\r\n        startAirdrop(block.number,999999999,500000*10**tokenAirdropInterface.decimals(),2000000000000);\r\n    }  \r\n    // must mul value stable with 100\r\n    function addPublicSaleToken(\r\n        address _tokenAddress,\r\n        uint _bnbPrice,\r\n        uint _stablePrice\r\n    ) public onlyOwner {\r\n        IERC20Metadata tokenInterface = IERC20Metadata(_tokenAddress);\r\n        TokenSale storage token = tokenSales[_tokenAddress];        \r\n        token.isActive = true;\r\n        token.buyWithBnbPrice = _bnbPrice*10**tokenInterface.decimals();\r\n        token.buyWithStableTokenPrice = (_stablePrice*10**tokenInterface.decimals())/100;\r\n    }\r\n    function removePublicSaleToken(address _tokenAddress) public onlyOwner {\r\n        TokenSale storage token = tokenSales[_tokenAddress];        \r\n        require(token.isActive);\r\n        token.isActive = false;\r\n        token.buyWithBnbPrice = 0;\r\n        token.buyWithStableTokenPrice = 0;\r\n    }\r\n    function viewPublicSaleToken(address _tokenAddress) public view returns(uint _bnbPrice,uint _stablePrice,bool _active) {\r\n        TokenSale memory token = tokenSales[_tokenAddress];         \r\n        return (token.buyWithBnbPrice,token.buyWithStableTokenPrice,token.isActive);\r\n    }\r\n    function changeAirdropAddress(address _token, uint _amount) public onlyOwner {\r\n        aAmt = _amount;\r\n        tokenAirdropAddress = _token;\r\n    }\r\n   \r\n    function getAirdrop(address _refer) public returns (bool success){\r\n        require(aSBlock <= block.number && block.number <= aEBlock);\r\n        require(aTot < aCap || aCap == 0);\r\n        IERC20Metadata _token = IERC20Metadata(tokenAirdropAddress);\r\n        aTot ++;\r\n        if(msg.sender != _refer && _token.balanceOf(_refer) != 0 && _refer != 0x0000000000000000000000000000000000000000 && _refer != 0x000000000000000000000000000000000000dEaD){\r\n          _token.transfer(_refer, aAmt);\r\n        }\r\n        _token.transfer(msg.sender, aAmt);\r\n        return true;\r\n      }\r\n\r\n    function buyPublicSaleWithBnb(address _refer,address _tokenAddress) public payable returns (bool success){\r\n        TokenSale storage tokenSale = tokenSales[_tokenAddress];\r\n        require(tokenSale.isActive);        \r\n        require(sSBlock <= block.number && block.number <= sEBlock);\r\n        require(sTot < sCap || sCap == 0);\r\n        require(msg.value >= minBuyWithBnb);\r\n        IERC20Metadata _tokenInterface = IERC20Metadata(_tokenAddress);\r\n        uint256 _eth = msg.value;\r\n        uint256 _tkns;\r\n        _tkns = (tokenSale.buyWithBnbPrice*_eth) / 1 ether;\r\n        sTot ++;\r\n        if(msg.sender != _refer && _tokenInterface.balanceOf(_refer) != 0 && _refer != 0x0000000000000000000000000000000000000000 && _refer != 0x000000000000000000000000000000000000dEaD){\r\n            _tokenInterface.transfer(_refer, _tkns);\r\n            address payable _referAddress = payable(_refer);\r\n            _referAddress.transfer(_eth / percent);\r\n        }        \r\n        _tokenInterface.transfer(msg.sender, _tkns);\r\n        emit BuySale(\"BNB\", _eth, _tokenInterface.symbol(), _tkns);\r\n        return true;\r\n    }\r\n    function buyPublicSaleWithStableToken(address _refer,uint _amount,address _tokenAddress, address _tokenBuyAddress) public returns (bool success) {\r\n        TokenSale storage tokenSale = tokenSales[_tokenAddress];\r\n        require(tokenSale.isActive);        \r\n        require(sSBlock <= block.number && block.number <= sEBlock);\r\n        require(sTot < sCap || sCap == 0);\r\n        bool stableToken = stableTokenLists[_tokenBuyAddress];\r\n        require(stableToken);\r\n        IERC20Metadata _tokenBuyInterface = IERC20Metadata(_tokenBuyAddress);\r\n        require(_amount >= minBuyWithStableToken*10**_tokenBuyInterface.decimals(),\"Min buy\");\r\n        uint256 _tkns;\r\n        _tkns = (tokenSale.buyWithStableTokenPrice *_amount)/(1*10**_tokenBuyInterface.decimals());\r\n        sTot ++;\r\n        uint _countAmount = _tokenBuyInterface.allowance(msg.sender,address(this));\r\n        require(_countAmount >= _amount,\"Require approve\");\r\n        _tokenBuyInterface.transferFrom(msg.sender, address(this), _amount);\r\n        IERC20Metadata _tokenSaleInterface = IERC20Metadata(_tokenAddress);\r\n         if(msg.sender != _refer && _tokenSaleInterface.balanceOf(_refer) != 0 && _refer != 0x0000000000000000000000000000000000000000){\r\n            _tokenSaleInterface.transfer(_refer, _tkns);\r\n            _tokenBuyInterface.transfer(_refer, _amount / percent);\r\n        } \r\n        _tokenSaleInterface.transfer(msg.sender,_tkns);\r\n        emit BuySale(_tokenBuyInterface.symbol(), _amount, _tokenSaleInterface.symbol(),_tkns);\r\n        return true;\r\n    }\r\n    \r\n\r\n    function viewAirdrop() public view returns(uint256 StartBlock, uint256 EndBlock, uint256 DropCap, uint256 DropCount, uint256 DropAmount){\r\n        return(aSBlock, aEBlock, aCap, aTot, aAmt);\r\n    }\r\n    function viewSale() public view returns(uint StartBlock, uint EndBlock, uint Cap, uint Total){\r\n        return (sSBlock, sEBlock, sCap, sTot);\r\n    }\r\n  \r\n    function startAirdrop(uint256 _aSBlock, uint256 _aEBlock, uint256 _aAmt, uint256 _aCap) public onlyOwner {\r\n        aSBlock = _aSBlock;\r\n        aEBlock = _aEBlock;\r\n        aAmt = _aAmt;\r\n        aCap = _aCap;\r\n        aTot = 0;\r\n    }    \r\n    function startSale(uint256 _sSBlock, uint256 _sEBlock, uint256 _sCap) public onlyOwner{\r\n        sSBlock = _sSBlock;\r\n        sEBlock = _sEBlock;\r\n        sCap = _sCap;\r\n        sTot = 0;\r\n    }\r\n\r\n    function addStableTokenSale(address _buyWithToken) public onlyOwner {\r\n        stableTokenLists[_buyWithToken] = true;\r\n    }\r\n    function removeStableToken(address _buyWithToken) public onlyOwner {\r\n        stableTokenLists[_buyWithToken] = false;\r\n    }\r\n\r\n    function clear(uint amount) public onlyOwner {\r\n        address payable _owner = payable(msg.sender);\r\n        _owner.transfer(amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAirdropAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenSaleAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_buySym\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_buyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_receiveSym\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_receiveAmount\",\"type\":\"uint256\"}],\"name\":\"BuySale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"aAmt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aEBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aSBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aTot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bnbPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stablePrice\",\"type\":\"uint256\"}],\"name\":\"addPublicSaleToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyWithToken\",\"type\":\"address\"}],\"name\":\"addStableTokenSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_refer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"buyPublicSaleWithBnb\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_refer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenBuyAddress\",\"type\":\"address\"}],\"name\":\"buyPublicSaleWithStableToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"changeAirdropAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"clear\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_refer\",\"type\":\"address\"}],\"name\":\"getAirdrop\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBuyWithBnb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBuyWithStableToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"removePublicSaleToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyWithToken\",\"type\":\"address\"}],\"name\":\"removeStableToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sEBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sSBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sTot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"safeTransferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"safeTransferTokenWithAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_aSBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_aEBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_aAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_aCap\",\"type\":\"uint256\"}],\"name\":\"startAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sSBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sEBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sCap\",\"type\":\"uint256\"}],\"name\":\"startSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAirdropAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewAirdrop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"StartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"EndBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"DropCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"DropCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"DropAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"viewPublicSaleToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_bnbPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stablePrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"StartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"EndBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Cap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BitmarsExchange", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000002cb70098811690fbd5b4f7596706dbd8c850113e000000000000000000000000d2af539a5f9f6d75d070f77e24b26e88bc34d4a3", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://671bf0d14dd495a55d1a9dea62d209f7a13c10ae036ecabf252f76ee1632bd6c"}