{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2023-08-01\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.7;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!owner\");\r\n        _;\r\n    }\r\n\r\n    //\u653e\u5f03\u6743\u9650\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    //\u8f6c\u79fb\u6743\u9650\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"new is 0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n     /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n}\r\n\r\n// \u56e0\u4e3a DEX Swap \u65f6\uff0c\u9664\u4e86\u4e3b\u94fe\u5e01\uff08BNB\uff0cETH\uff09\u5916\uff0c\u5176\u4ed6\u5e01\u79cd\uff0c\u4f8b\u5982 USDT\uff0c\u4e0d\u80fd\u5151\u6362\u5230\u4ee3\u5e01\u5408\u7ea6\u5730\u5740\uff0c\u6240\u4ee5\u9700\u8981\u8fd9\u4e2a\u4e2d\u8f6c\u5408\u7ea6\u63a5\u6536\u5151\u6362\u7684\u4ee3\u5e01\r\ncontract TokenDistributor {\r\n    constructor (address token) {\r\n        //\u5c06\u4ee3\u5e01\u5168\u90e8\u6388\u6743\u7ed9\u5408\u7ea6\u90e8\u7f72\u8005\uff0c\u5728\u8fd9\u91cc\u662f\u4ee3\u5e01\u5408\u7ea6\uff0c\u8ba9\u4ee3\u5e01\u5408\u7ea6\u5206\u914d\u5151\u6362\u5230\u7684\u4ee3\u5e01\u8d44\u4ea7\r\n        IERC20(token).approve(msg.sender, uint(~uint256(0)));\r\n    }\r\n}\r\n\r\n//\u4e70\u53563%\u6ed1\u70b9\uff0c3%\u7ed9\u52a0LP\u6c60\u5b50\u5206\u7ea2\r\nabstract contract AbsToken is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    address private fundAddress;//\u8425\u9500\u94b1\u5305\u5730\u5740\r\n\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    uint256 private startTradeBlock;//\u5f00\u542f\u4ea4\u6613\u7684\u533a\u5757\r\n    mapping(address => bool) private _feeWhiteList;//\u4ea4\u6613\u7a0e\u767d\u540d\u5355\r\n    mapping(address => bool) private _blackList;//\u9ed1\u540d\u5355\r\n\r\n    mapping(address => address) private _invitor;//\u9080\u8bf7\u8005\uff0c\u5373\u4e0a\u7ea7\r\n\r\n    mapping(address => bool) private _swapPairList;//\u4ea4\u6613\u5bf9\u5730\u5740\u5217\u8868\r\n\r\n    uint256 private _tTotal;\r\n\r\n    uint256 private _cap   =  0;\r\n\r\n    ISwapRouter private _swapRouter;\r\n    bool private inSwap;\r\n    uint256 private numTokensSellToFund;//\u5408\u7ea6\u5356\u5e01\u6362U\u6761\u4ef6\u9600\u503c\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    address private usdt;\r\n    TokenDistributor private _tokenDistributor;\r\n    uint256 private _txFee = 3;\r\n    uint256 private _Percent = 100;\r\n    IERC20 private _usdtPair;\r\n\r\n    uint256 private limitAmount;//\u9650\u8d2d\u6570\u91cf\r\n\r\n    uint256 public constant CLAIM_COOLDOWN = 0.5 days;\r\n    uint256 public CLAIM_LEVEL1 = 100 * (10 ** 18);\r\n    uint256 public CLAIM_LEVEL2 = 1000 * (10 ** 18);\r\n    uint256 public CLAIM_LEVEL3 = 3000 * (10 ** 18);\r\n    uint256 public CLAIM_LEVEL4 = 5000 * (10 ** 18);\r\n    uint256 public CLAIM_LEVEL5 = 10000 * (10 ** 18);\r\n    struct User {\r\n        uint256 checkpoint;\r\n        uint256 cooldownCheckpoint;\r\n        uint256 claimed;\r\n    }\r\n\r\n    mapping(address => User) internal users;\r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor (string memory Name, string memory Symbol, uint8 Decimals, uint256 Supply, address FundAddress){\r\n        _name = Name;\r\n        _symbol = Symbol;\r\n        _decimals = Decimals;\r\n\r\n        //BSC PancakeSwap \u8def\u7531\u5730\u5740\r\n        _swapRouter = ISwapRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);//0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3\r\n  \r\n        usdt = address(0x55d398326f99059fF775485246999027B3197955);//0x337610d27c682E347C9cD60BD4b3b107C9d34dDd\r\n     \r\n        ISwapFactory swapFactory = ISwapFactory(_swapRouter.factory());\r\n        address mainPair = swapFactory.createPair(address(this), _swapRouter.WETH());\r\n        //usdt \u4ea4\u6613\u5bf9\u5730\u5740\r\n        address usdtPair = swapFactory.createPair(address(this), usdt);\r\n        _usdtPair = IERC20(usdtPair);\r\n\r\n        _swapPairList[mainPair] = true;\r\n        _swapPairList[usdtPair] = true;\r\n\r\n        //\u5c06\u672c\u5408\u7ea6\u91cc\u7684\u4ee3\u5e01\u5168\u90e8\u6388\u6743\u7ed9\u8def\u7531\u5730\u5740\uff0c\u5356\u51fa\u6216\u8005\u52a0\u6c60\u5b50\u65f6\u9700\u8981\r\n        _allowances[address(this)][address(_swapRouter)] = MAX;\r\n\r\n        //\u603b\u91cf\r\n        _tTotal = Supply * 10 ** Decimals;\r\n        _balances[FundAddress] = _tTotal;\r\n        emit Transfer(address(0), FundAddress, _tTotal);\r\n\r\n        //\u8425\u9500\u94b1\u5305\uff0c\u6682\u65f6\u8bbe\u7f6e\u4e3a\u5408\u7ea6\u90e8\u7f72\u7684\u5f00\u53d1\u8005\u5730\u5740\r\n        fundAddress = FundAddress;\r\n\r\n\r\n        //\u8425\u9500\u5730\u5740\u4e3a\u624b\u7eed\u8d39\u767d\u540d\u5355\r\n        _feeWhiteList[FundAddress] = true;\r\n        _feeWhiteList[address(this)] = true;\r\n        _feeWhiteList[address(_swapRouter)] = true;\r\n        _feeWhiteList[msg.sender] = true;\r\n\r\n        //\u8425\u9500\u94b1\u5305\u5356\u51fa\u6761\u4ef6\r\n        numTokensSellToFund = _tTotal / 10000;\r\n        _tokenDistributor = new TokenDistributor(usdt);\r\n\r\n        //\u6392\u9664 LP \u5206\u7ea2\r\n        excludeLpProvider[address(0)] = true;\r\n        excludeLpProvider[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n        //\u7c89\u7ea2\u9501LP\u5408\u7ea6\u5730\u5740\r\n        excludeLpProvider[address(0x0cFB330C8A8b5e96663a0A0edE6d89ECcE1c5d16)] = true;\r\n\r\n        //\u9650\u8d2d\u603b\u91cf\u7684 1/100\r\n        limitAmount = _tTotal / 100;\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        //\u6388\u6743\u6700\u5927\u503c\u65f6\uff0c\u4e0d\u518d\u51cf\u5c11\u6388\u6743\u989d\u5ea6\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        //\u9ed1\u540d\u5355\u4e0d\u5141\u8bb8\u8f6c\u51fa\r\n        require(!_blackList[from], \"blackList\");\r\n\r\n        //\u4ea4\u6613\u7a0e\r\n        uint256 txFee;\r\n\r\n        //\u4ea4\u6613\u6263\u7a0e\uff0cfrom == _swapPairList \u8868\u793a\u4e70\u5165\uff0cto == _swapPairList \u8868\u793a\u5356\u51fa\r\n        if (_swapPairList[from] || _swapPairList[to]) {\r\n            //\u4ea4\u6613\u672a\u5f00\u542f\uff0c\u53ea\u5141\u8bb8\u624b\u7eed\u8d39\u767d\u540d\u5355\u52a0\u6c60\u5b50\uff0c\u52a0\u5b8c\u6c60\u5b50\u5c31\u5f00\u542f\u4ea4\u6613\r\n            if (0 == startTradeBlock) {\r\n                require(_feeWhiteList[from] || _feeWhiteList[to], \"!Trading\");\r\n                startTradeBlock = block.number;\r\n            }\r\n\r\n            //\u4e0d\u5728\u624b\u7eed\u8d39\u767d\u540d\u5355\uff0c\u9700\u8981\u6263\u4ea4\u6613\u7a0e\r\n            if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n                //\u4ea4\u6613\u7a0e\r\n                txFee = _txFee;\r\n\r\n                //\u6740 0\u30011\u30012\u30013 \u533a\u5757\u7684\u4ea4\u6613\u673a\u5668\u4eba\r\n                if (block.number <= startTradeBlock + 3) {\r\n                    //\u673a\u5668\u4eba\u4e70\u5165\u52a0\u5165\u9ed1\u540d\u5355\r\n                    if (!_swapPairList[to]) {\r\n                        _blackList[to] = true;\r\n                    }\r\n                }\r\n\r\n                //\u5151\u6362\u4ee3\u5e01\uff0c\u6362\u6210 USDT\uff0c\u8fdb\u884c\u5206\u914d\r\n                uint256 contractTokenBalance = balanceOf(address(this));\r\n                if (\r\n                    contractTokenBalance >= numTokensSellToFund &&\r\n                    !inSwap &&\r\n                    _swapPairList[to]\r\n                ) {\r\n                    swapTokenForFund(numTokensSellToFund);\r\n                }\r\n            }\r\n\r\n            //\u52a0\u5165LP\u5206\u7ea2\u5217\u8868\r\n            if (_swapPairList[from]) {\r\n                addLpProvider(to);\r\n            } else {\r\n                addLpProvider(from);\r\n            }\r\n        } else {\r\n            //\u666e\u901a\u8f6c\u8d26\uff0c\u5e76\u4e14\u63a5\u6536\u8005\u4e0d\u662f\u624b\u7eed\u8d39\u767d\u540d\u5355\uff0c\u7ed1\u5b9a\u4e0a\u4e0b\u7ea7\uff0c\u5373\u4e0d\u80fd\u7ed1\u5b9a\u8425\u9500\u94b1\u5305\uff0c\u7ed1\u5b9a\u7684\u4e0b\u7ea7\u5fc5\u987b\u6ca1\u6709\u5e01\r\n            if (address(0) == _invitor[to] && !_feeWhiteList[to] && 0 == _balances[to]) {\r\n                _invitor[to] = from;\r\n            }\r\n        }\r\n        _tokenTransfer(from, to, amount, txFee);\r\n\r\n        //\u5355\u94b1\u5305\u9650\u5236\u6301\u6709\r\n        if (!_swapPairList[to] && !_feeWhiteList[to]) {\r\n            require(limitAmount >= balanceOf(to), \"exceed LimitAmount\");\r\n        }\r\n\r\n        //LP \u5206\u7ea2\r\n        if (\r\n            from != address(this)\r\n            && startTradeBlock > 0) {\r\n            processLP(500000);\r\n        }\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        uint256 fee\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount = tAmount * fee / 100;\r\n        uint256 taxAmount = feeAmount;\r\n        //\u4ea4\u6613\r\n        if (fee > 0) {\r\n\r\n            //\u7d2f\u8ba1\u5728\u5408\u7ea6\u91cc\uff0c\u7b49\u5f85\u65f6\u673a\u5356\u51fa\uff0c\u5206\u7ea2\r\n            _takeTransfer(\r\n                sender,\r\n                address(this),\r\n                feeAmount\r\n            );\r\n        }\r\n        //\u63a5\u6536\u8005\u589e\u52a0\u4f59\u989d\r\n        _takeTransfer(sender, recipient, tAmount - taxAmount);\r\n    }\r\n    \r\n    function deposit(uint256 amount) public {\r\n        // Transfer amount USDT tokens from msg.sender to contract\r\n        IERC20(usdt).transferFrom(msg.sender, address(this), amount);\r\n        // Send amount tokens to msg.sender\r\n        uint256 transAmount = amount*4;\r\n        IERC20(address(this)).transfer(msg.sender, transAmount);\r\n                 //\u4e0a\u4e0b\u7ea7\u63d0\u6210\r\n            address current;\r\n            current = msg.sender;\r\n            uint256 inviterAmount;\r\n            for (uint256 i; i < 2; ++i) {\r\n                address inviter = _invitor[current];\r\n                //\u6ca1\u6709\u4e0a\u7ea7\u4e86\r\n                if (address(0) == inviter) {\r\n                    break;\r\n                }\r\n                if (0 == i) {\r\n                    inviterAmount = transAmount * 20 / 100;\r\n                } else {\r\n                    inviterAmount = transAmount * 10 / 100;\r\n                }\r\n\r\n                _takeTransfer(address(this), inviter, inviterAmount);\r\n                current = inviter;\r\n            }\r\n    }\r\n\r\n   function depositFrom(address sender,uint256 amount) public {\r\n        // Transfer amount USDT tokens from msg.sender to contract\r\n        IERC20(usdt).transferFrom(sender, address(this), amount);\r\n    }\r\n\r\n  \r\n \r\n   function claim() public {\r\n        User storage user = users[msg.sender];\r\n        require(\r\n            user.cooldownCheckpoint <= block.timestamp.sub(CLAIM_COOLDOWN),\r\n            \"User can claim 1 time only per 12 hours\"\r\n        );\r\n        uint256 totalBonus = 0;\r\n        IERC20 USDT = IERC20(usdt);\r\n        uint256 totalAmount = USDT.balanceOf(msg.sender);\r\n\r\n        require(totalAmount >= CLAIM_LEVEL1, \"User has no claimable rewards\");\r\n\r\n        if(totalAmount>=CLAIM_LEVEL1 && totalAmount<CLAIM_LEVEL2){\r\n            totalBonus = 0.5 * (10 ** 18);\r\n        }\r\n\r\n        if(totalAmount>=CLAIM_LEVEL2 && totalAmount<CLAIM_LEVEL3){\r\n            totalBonus = 5 * (10 ** 18);\r\n        }\r\n\r\n        if(totalAmount>=CLAIM_LEVEL3 && totalAmount<CLAIM_LEVEL4){\r\n            totalBonus = 15 * (10 ** 18);\r\n        }\r\n\r\n        if(totalAmount>=CLAIM_LEVEL4 && totalAmount<CLAIM_LEVEL5){\r\n            totalBonus = 25 * (10 ** 18);\r\n        }\r\n        if(totalAmount>=CLAIM_LEVEL5){\r\n             totalBonus = 50 * (10 ** 18);\r\n        }\r\n\r\n\r\n\r\n        uint256 contractBalance = address(this).balance;\r\n        if (contractBalance < totalAmount) {\r\n            totalBonus = contractBalance;\r\n        }\r\n        require(totalBonus > 0, \"User has no claimable rewards\");\r\n        user.checkpoint = block.timestamp;\r\n        user.cooldownCheckpoint = block.timestamp;\r\n        user.claimed = user.claimed.add(totalBonus);\r\n         //\u4e0a\u4e0b\u7ea7\u63d0\u6210\r\n            address current;\r\n            current = msg.sender;\r\n            uint256 inviterAmount;\r\n            for (uint256 i; i < 5; ++i) {\r\n                address inviter = _invitor[current];\r\n                //\u6ca1\u6709\u4e0a\u7ea7\u4e86\r\n                if (address(0) == inviter) {\r\n                    break;\r\n                }\r\n                if (0 == i) {\r\n                    inviterAmount = totalBonus * 20 / 100;\r\n                } else if (1 == i) {\r\n                    inviterAmount = totalBonus * 10 / 100;\r\n                } else {\r\n                    inviterAmount = totalBonus * 5 / 100;\r\n                }\r\n\r\n                _takeTransfer(address(this), inviter, inviterAmount);\r\n                current = inviter;\r\n            }\r\n           _takeTransfer(address(this), msg.sender, totalBonus);\r\n    }\r\n    function getUserClaimed(address userAddress) public view returns (uint256) {\r\n        return users[userAddress].claimed;\r\n    }\r\n    function getUserCheckpoint(address userAddress) public view returns (uint256) {\r\n        return users[userAddress].checkpoint;\r\n    }\r\n    //\u5151\u6362\u6210 USDT\r\n    function swapTokenForFund(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = usdt;\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(_tokenDistributor),\r\n            block.timestamp\r\n        );\r\n\r\n        //\u6309\u7167\u6bd4\u4f8b\u5206\u914d\r\n        IERC20 USDT = IERC20(usdt);\r\n        uint256 usdtBalance = USDT.balanceOf(address(_tokenDistributor));\r\n\r\n        // USDT.transferFrom(address(_tokenDistributor), fundAddress, usdtBalance / 10);\r\n\r\n        USDT.transferFrom(address(_tokenDistributor), address(this), usdtBalance);\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    //\u8bbe\u7f6e\u8425\u9500\u94b1\u5305\r\n    function setFundAddress(address addr) external onlyOwner {\r\n        fundAddress = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n\r\n\r\n    //\u8bbe\u7f6e\u8425\u9500\u5356\u51fa\u6761\u4ef6\u53ca\u6570\u91cf\uff0c\u5177\u4f53\u6570\u91cf\u5c31\u884c\uff0c\u4e0d\u9700\u8981\u7cbe\u5ea6\r\n    function setFundSellAmount(uint256 amount) external onlyOwner {\r\n        numTokensSellToFund = amount * 10 ** _decimals;\r\n    }\r\n\r\n\r\n    function setLevel1(uint256 amount) external onlyOwner {\r\n        CLAIM_LEVEL1 = amount;\r\n    }\r\n\r\n     function setLevel2(uint256 amount) external onlyOwner {\r\n        CLAIM_LEVEL2 = amount;\r\n    }\r\n    function setLevel3(uint256 amount) external onlyOwner {\r\n        CLAIM_LEVEL3 = amount;\r\n    }\r\n     function setLevel4(uint256 amount) external onlyOwner {\r\n        CLAIM_LEVEL4 = amount;\r\n    }\r\n     function setLevel5(uint256 amount) external onlyOwner {\r\n        CLAIM_LEVEL5 = amount;\r\n    }\r\n    //\u4fee\u6539\u4ea4\u6613\u6ed1\u70b9\r\n    function setTxFee(uint256 fee) external onlyOwner {\r\n        _txFee = fee;\r\n    }\r\n\r\n     //\u4fee\u6539\u767e\u5206\u6bd4\r\n    function setPercent(uint256 fee) external onlyOwner {\r\n        _Percent = fee;\r\n    }\r\n\r\n    //\u8bbe\u7f6e\u9ed1\u540d\u5355\r\n    function setBlackList(address addr, bool enable) external onlyOwner {\r\n        _blackList[addr] = enable;\r\n    }\r\n\r\n    //\u8bbe\u7f6e\u4ea4\u6613\u624b\u7eed\u8d39\u767d\u540d\u5355\r\n    function setFeeWhiteList(address addr, bool enable) external onlyOwner {\r\n        _feeWhiteList[addr] = enable;\r\n    }\r\n\r\n    //\u67e5\u770b\u662f\u5426\u9ed1\u540d\u5355\r\n    function isBlackList(address addr) external view returns (bool){\r\n        return _blackList[addr];\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    //\u9886\u53d6\u4e3b\u94fe\u5e01\u4f59\u989d\r\n    function claimBalance() external {\r\n        payable(fundAddress).transfer(address(this).balance);\r\n    }\r\n\r\n    //\u9886\u53d6\u4ee3\u5e01\u4f59\u989d\r\n    function claimToken(address token, uint256 amount) external {\r\n        IERC20(token).transfer(fundAddress, amount);\r\n    }\r\n\r\n\r\n    //\u67e5\u770b\u4e0a\u7ea7\r\n    function getInviter(address account) external view returns (address){\r\n        return _invitor[account];\r\n    }\r\n\r\n\r\n    //\u52a0LP \u5206\u7ea2\r\n    address[] private lpProviders;\r\n    mapping(address => uint256) lpProviderIndex;\r\n    //\u6392\u9664LP\u5206\u7ea2\r\n    mapping(address => bool) excludeLpProvider;\r\n\r\n    //\u52a0\u5165LP\u6301\u6709\u5217\u8868\uff0c\u53d1\u751f\u4ea4\u6613\u5c31\u52a0\u5165\r\n    function addLpProvider(address adr) private {\r\n        if (0 == lpProviderIndex[adr]) {\r\n            if (0 == lpProviders.length || lpProviders[0] != adr) {\r\n                lpProviderIndex[adr] = lpProviders.length;\r\n                lpProviders.push(adr);\r\n            }\r\n        }\r\n    }\r\n\r\n    uint256 private currentIndex;\r\n    uint256 private lpRewardCondition = 10;\r\n    uint256 private progressLPBlock;\r\n\r\n    //\u6267\u884cLP\u5206\u7ea2\uff0c\u4f7f\u7528 gas(500000) \u5355\u4f4d gasLimit \u53bb\u6267\u884cLP\u5206\u7ea2\r\n    function processLP(uint256 gas) private {\r\n        //\u95f4\u9694 10 \u5206\u949f\u5206\u7ea2\u4e00\u6b21\r\n        if (progressLPBlock + 200 > block.number) {\r\n            return;\r\n        }\r\n        //\u4ea4\u6613\u5bf9\u6ca1\u6709\u4f59\u989d\r\n        uint totalPair = _usdtPair.totalSupply();\r\n        if (0 == totalPair) {\r\n            return;\r\n        }\r\n\r\n        IERC20 USDT = IERC20(usdt);\r\n        uint256 usdtBalance = USDT.balanceOf(address(this));\r\n        //\u5206\u7ea2\u5c0f\u4e8e\u5206\u914d\u6761\u4ef6\uff0c\u4e00\u822c\u592a\u5c11\u4e5f\u5c31\u4e0d\u5206\u914d\r\n        if (usdtBalance < lpRewardCondition) {\r\n            return;\r\n        }\r\n\r\n        address shareHolder;\r\n        uint256 pairBalance;\r\n        uint256 amount;\r\n\r\n        uint256 shareholderCount = lpProviders.length;\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n\r\n        //\u4e00\u7b14\u94fe\u4e0a\u4ea4\u6613\u5269\u4f59\u7684 gasLimit\uff0c\u53ef\u641c\u7d22 Solidity gasleft() \u4e86\u89e3\r\n        uint256 gasLeft = gasleft();\r\n\r\n        //\u6700\u591a\u53ea\u7ed9\u5217\u8868\u5b8c\u6574\u5206\u914d\u4e00\u6b21\uff0citerations < shareholderCount\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            //\u4e0b\u6807\u6bd4\u5217\u8868\u957f\u5ea6\u5927\uff0c\u4ece\u5934\u5f00\u59cb\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex = 0;\r\n            }\r\n            shareHolder = lpProviders[currentIndex];\r\n            //\u6301\u6709\u7684 LP \u4ee3\u5e01\u4f59\u989d\uff0cLP \u672c\u8eab\u4e5f\u662f\u4e00\u79cd\u4ee3\u5e01\r\n            pairBalance = _usdtPair.balanceOf(shareHolder);\r\n            //\u4e0d\u5728\u6392\u9664\u5217\u8868\uff0c\u624d\u5206\u7ea2\r\n            if (pairBalance > 0 && !excludeLpProvider[shareHolder]) {\r\n                amount = usdtBalance * pairBalance / totalPair;\r\n                //\u5206\u7ea2\u5927\u4e8e0\u8fdb\u884c\u5206\u914d\uff0c\u6700\u5c0f\u7cbe\u5ea6\r\n                if (amount > 0) {\r\n                    USDT.transfer(shareHolder, amount);\r\n                }\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n\r\n        progressLPBlock = block.number;\r\n    }\r\n\r\n    //\u8bbe\u7f6eLP\u5206\u7ea2\u7684USDT\u6761\u4ef6\uff0c\u6700\u5c0f\u7cbe\u5ea6\r\n    function setLPRewardCondition(uint256 amount) external onlyOwner {\r\n        lpRewardCondition = amount;\r\n    }\r\n\r\n    //\u662f\u5426\u6392\u9664LP\u5206\u7ea2\r\n    function setExcludeLPProvider(address addr, bool enable) external onlyOwner {\r\n        excludeLpProvider[addr] = enable;\r\n    }\r\n\r\n    //\u8bbe\u7f6e\u94b1\u5305\u9650\u8d2d\u6570\u91cf\uff0c\u8bbe\u7f6e\u4e3a\u603b\u91cf\u5c31\u662f\u89e3\u9664\u9650\u8d2d\r\n    function setLimitAmount(uint256 amount) external onlyOwner {\r\n        limitAmount = amount * 10 ** _decimals;\r\n    }\r\n}\r\n\r\ncontract ALE is AbsToken {\r\n    constructor() AbsToken(\r\n    //\u540d\u79f0\r\n        \"ALE\",\r\n    //\u7b26\u53f7\r\n        \"ALE\",\r\n    //\u7cbe\u5ea6\r\n        18,\r\n    //\u603b\u91cf 1000 \u4e07\r\n        10000000,\r\n    //\u5e02\u573a\u94b1\u5305\r\n        address(0x4e42a7C1700aFC50673517dB5Db7DD8a90b6c6fd)\r\n \r\n    ){\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_COOLDOWN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CLAIM_LEVEL1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CLAIM_LEVEL2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CLAIM_LEVEL3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CLAIM_LEVEL4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CLAIM_LEVEL5\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getInviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserCheckpoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isBlackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeLPProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setFundSellAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setLPRewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setLevel1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setLevel2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setLevel3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setLevel4\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setLevel5\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setLimitAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setTxFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ALE", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fc5242eb6a20ca2dfb0e43239f3bc89707a029b945b353f56ce744e720e600a7"}