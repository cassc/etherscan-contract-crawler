{"SourceCode": "{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn\\u0027t rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn\\u0027t, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length \\u003e 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\"},\"draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account\\u0027s ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn\\u0027t\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``\\u0027s tokens,\\n     * given ``owner``\\u0027s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``\\u0027s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``\\u0027s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\"},\"IContractNFT.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\ninterface IContractNFT {\\n    struct NFTData {\\n        uint256 pid;\\n        string name;\\n        uint256 price;\\n        uint256 fuel;\\n        string tokenuri;\\n        string code;\\n    }\\n\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n    function getTokenData(uint256 tokenID) external view returns (NFTData memory);\\n}\"},\"IContractToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\ninterface IContractToken {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address to, uint256 amount) external returns (bool);\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\"},\"Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a \\u003e b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a \\u003c b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a \\u0026 b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator \\u003e prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always \\u003e= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator \\u0026 (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel\\u0027s lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don\\u0027t need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up \\u0026\\u0026 mulmod(x, y, denominator) \\u003e 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.\\u0027s \\\"Hacker\\u0027s Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) \\u003c= a \\u003c 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) \\u003c= a \\u003c 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) \\u003c= sqrt(a) \\u003c sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) \\u003c= sqrt(a) \\u003c 2**((k+1)/2) \\u003c= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 \\u003c\\u003c (log2(a) \\u003e\\u003e 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton\\u0027s method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) \\u003e\\u003e 1;\\n            result = (result + a / result) \\u003e\\u003e 1;\\n            result = (result + a / result) \\u003e\\u003e 1;\\n            result = (result + a / result) \\u003e\\u003e 1;\\n            result = (result + a / result) \\u003e\\u003e 1;\\n            result = (result + a / result) \\u003e\\u003e 1;\\n            result = (result + a / result) \\u003e\\u003e 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up \\u0026\\u0026 result * result \\u003c a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value \\u003e\\u003e 128 \\u003e 0) {\\n                value \\u003e\\u003e= 128;\\n                result += 128;\\n            }\\n            if (value \\u003e\\u003e 64 \\u003e 0) {\\n                value \\u003e\\u003e= 64;\\n                result += 64;\\n            }\\n            if (value \\u003e\\u003e 32 \\u003e 0) {\\n                value \\u003e\\u003e= 32;\\n                result += 32;\\n            }\\n            if (value \\u003e\\u003e 16 \\u003e 0) {\\n                value \\u003e\\u003e= 16;\\n                result += 16;\\n            }\\n            if (value \\u003e\\u003e 8 \\u003e 0) {\\n                value \\u003e\\u003e= 8;\\n                result += 8;\\n            }\\n            if (value \\u003e\\u003e 4 \\u003e 0) {\\n                value \\u003e\\u003e= 4;\\n                result += 4;\\n            }\\n            if (value \\u003e\\u003e 2 \\u003e 0) {\\n                value \\u003e\\u003e= 2;\\n                result += 2;\\n            }\\n            if (value \\u003e\\u003e 1 \\u003e 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up \\u0026\\u0026 1 \\u003c\\u003c result \\u003c value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value \\u003e= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value \\u003e= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value \\u003e= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value \\u003e= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value \\u003e= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value \\u003e= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value \\u003e= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up \\u0026\\u0026 10**result \\u003c value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value \\u003e\\u003e 128 \\u003e 0) {\\n                value \\u003e\\u003e= 128;\\n                result += 16;\\n            }\\n            if (value \\u003e\\u003e 64 \\u003e 0) {\\n                value \\u003e\\u003e= 64;\\n                result += 8;\\n            }\\n            if (value \\u003e\\u003e 32 \\u003e 0) {\\n                value \\u003e\\u003e= 32;\\n                result += 4;\\n            }\\n            if (value \\u003e\\u003e 16 \\u003e 0) {\\n                value \\u003e\\u003e= 16;\\n                result += 2;\\n            }\\n            if (value \\u003e\\u003e 8 \\u003e 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up \\u0026\\u0026 1 \\u003c\\u003c (result * 8) \\u003c value ? 1 : 0);\\n        }\\n    }\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\"},\"Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\"},\"SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./draft-IERC20Permit.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance \\u003e= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\n        // we\\u0027re implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length \\u003e 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\"},\"StakingV3.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Pausable.sol\\\";\\nimport \\\"./ReentrancyGuard.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeERC20.sol\\\";\\nimport \\\"./Strings.sol\\\";\\nimport \\\"./IContractNFT.sol\\\";\\nimport \\\"./IContractToken.sol\\\";\\n\\ninterface ISmartContract {\\n    struct StakeDataReturn {\\n        uint256 tokenid;\\n        string plan;\\n        uint256 amount;\\n        uint256 startat;\\n        uint256 endat;\\n        uint256 claimed_block;\\n        uint256 claimed;\\n        uint256 nextclaim;\\n        uint256 tokenfuel;\\n    }\\n    function showStakeData(uint256 _tokenid) external view returns (StakeDataReturn memory);\\n    function showTokenData(uint256 _tokenid) external view returns (uint256, uint256, uint256);\\n    function getPoolBalances() external view returns (uint256);\\n    function getTotalStakes() external view returns (uint256);\\n    function getTotalCollected() external view returns (uint256);\\n}\\n\\n\\ncontract TwelveZodiacStake is Pausable, Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    struct NFTInfo {\\n        uint256 tokenid;\\n        uint256 configid;\\n        uint256 fuel;\\n        bool exists;\\n    }\\n\\n    struct Plans {\\n        uint8 planid;\\n        string title;\\n        uint256 addblock;\\n        uint8 reward;\\n        uint8 fee;\\n    }\\n\\n    struct StakeInfo {\\n        uint8 planid;\\n        uint256 amount;\\n        uint256 startat;\\n        uint256 endat;\\n        uint256 blockclaimed;\\n        uint256 claimed;\\n        uint256 nextclaimat;\\n    }\\n\\n    struct Halving {\\n        uint8 stage;\\n        uint256 lastblock; // 0 = unlimited\\n    }\\n\\n    address tokenStake;\\n    uint256 constant PERCENT_PRECISION = 1e12;\\n    uint256 constant TOKEN_DECIMALS = 1e18;\\n    uint256 constant DAILY_BLOCKS = 28800;\\n    uint256 MINIMUM_STAKE = 100000000000000000;\\n    address COLLECTOR;\\n    uint256 COST = 0;\\n    uint256 AVALIABLE_BALANCE = 0;\\n    uint256 REWARD_COLLECTED = 0;\\n    uint256 TOTAL_STAKE = 0;\\n    uint256 REWARD_RATE = 5;\\n    uint256 CLAIM_EVERY = 28800;\\n\\n    Halving[] _halvings;\\n    mapping(uint256 =\\u003e StakeInfo) _stakes;\\n    mapping(address =\\u003e uint256[]) _holderstakes;\\n    mapping(uint8 =\\u003e Plans) _plans;\\n    mapping(uint256 =\\u003e NFTInfo) _nftinfo;\\n    mapping(uint256 =\\u003e uint256) _maxstake;\\n\\n    IContractToken TOKEN;\\n    IContractNFT NFT;\\n\\n    constructor(address _token, address _nft) {\\n        tokenStake = _token;\\n        TOKEN = IContractToken(_token);\\n        NFT = IContractNFT(_nft);\\n        COLLECTOR = msg.sender;\\n    }\\n\\n    event AdminTokenRecovery(address tokenRecovered, uint256 amount);\\n    event TopupPoolStake(uint256 amount);\\n    event StakeToken(address owner, uint256 tokenid, uint256 planid, uint256 end, uint256 amount, uint256 fuel, uint256 nextclaimblock);\\n    event ClaimRewardStake(address owner, uint256 tokenid, uint256 reward, uint256 duration, uint256 nextclaimblock);\\n    event WithdrawStake(address owner, uint256 tokenid, uint256 amount);\\n    \\n    function getPoolBalances() public view returns (uint256) {\\n        return AVALIABLE_BALANCE;\\n    }\\n\\n    function getTotalStakes() public view returns (uint256) {\\n        return TOTAL_STAKE;\\n    }\\n\\n    function getTotalCollected() public view returns (uint256) {\\n        return REWARD_COLLECTED;\\n    }\\n\\n    function showHalvingPlans() public view returns (Halving[] memory) {\\n        return _halvings;\\n    }\\n\\n    function showPlanConfig(uint8 _id) public view returns (Plans memory) {\\n        return _plans[_id];\\n    }\\n\\n    function showMaxStakeByFuel(uint256 _fuel) public view returns (uint256) {\\n        return _maxstake[_fuel];\\n    }\\n\\n    function _checkNFTOwnership(address _holder, uint256 _tokenid) internal view returns (bool) {\\n        address owner_nft = NFT.ownerOf(_tokenid);\\n        if(address(owner_nft) == address(_holder)) return true; else return false;\\n    }\\n\\n    function _checkStakingOwnership(address _holder, uint256 _tokenid) internal view returns (bool) {\\n        uint256[] memory lists = _holderstakes[_holder];\\n        for(uint i = 0; i \\u003c lists.length; i++) {\\n            if(lists[i] == _tokenid) return true;\\n        }\\n        return false;\\n    }\\n\\n    function addNFTData(uint256 _tokenid) internal {\\n        // convert fuel (day) to block (1 day = 28800 block);\\n        IContractNFT.NFTData memory data = NFT.getTokenData(_tokenid);\\n        uint256 fuel = (data.fuel * DAILY_BLOCKS);\\n        _nftinfo[_tokenid] = NFTInfo(_tokenid, data.fuel, fuel, true);\\n    }\\n\\n    function addStakeholder(address _holder, uint256 _amount, uint8 _planid, uint256 _tokenid) internal returns (uint256 endblock, uint256 nextclaim)  {\\n        uint256 endblockfuel = 0;\\n        endblock = block.number + _plans[_planid].addblock;\\n        endblockfuel = block.number + _nftinfo[_tokenid].fuel;\\n        if(endblockfuel \\u003c endblock) endblock = endblockfuel;\\n        nextclaim = (block.number + CLAIM_EVERY);\\n        if(endblockfuel \\u003c nextclaim) nextclaim = endblockfuel;\\n        _stakes[_tokenid] = StakeInfo({\\n                                planid: _planid,\\n                                amount: _amount,\\n                                startat: block.number,\\n                                endat: endblock,\\n                                blockclaimed: 0,\\n                                claimed: 0,\\n                                nextclaimat: (block.number + CLAIM_EVERY)\\n                            });\\n        _holderstakes[_holder].push(_tokenid);\\n        return (endblock, nextclaim);\\n    }\\n\\n    function Stake(uint256 _amount, uint8 _planid, uint256 _tokenid) public whenNotPaused {\\n        if(!_nftinfo[_tokenid].exists) addNFTData(_tokenid); // if NFT not exists add into collection\\n        require(_amount \\u003e= MINIMUM_STAKE, string.concat(\\\"Minimum Stake is \\\", Strings.toString(MINIMUM_STAKE)));\\n        require(_checkNFTOwnership(msg.sender, _tokenid), \\\"Not owner NFT.\\\");\\n        require(_tokenid \\u003e 0, \\\"Token value cannot be zero.\\\");\\n        require(_planid \\u003e 0, \\\"Plan value cannot be zero.\\\");\\n        require(_plans[_planid].planid \\u003e 0, \\\"Plan is unavailable.\\\");\\n        require(_stakes[_tokenid].amount == 0, \\\"NFT has been staked.\\\");\\n        require(_amount \\u003c= _maxstake[_nftinfo[_tokenid].configid], string.concat(\\\"Maximum Stake is \\\", Strings.toString(_maxstake[_nftinfo[_tokenid].configid])));\\n        require(_nftinfo[_tokenid].fuel \\u003e 0, \\\"Sorry, your NFT is run out of fuel.\\\");\\n        require(TOKEN.transferFrom(msg.sender, address(this), _amount), \\\"Can not paid this transaction\\\");\\n        (uint256 _end, uint256 _nextclaim) = addStakeholder(msg.sender, _amount, _planid, _tokenid); // create staking collection\\n        TOTAL_STAKE += _amount;\\n\\n        emit StakeToken(msg.sender, _tokenid, _planid, _end, _amount, _nftinfo[_tokenid].fuel, _nextclaim);\\n    }\\n\\n    function StakeTopup(uint256 _amount, uint256 _tokenid) public whenNotPaused {\\n        require(_checkStakingOwnership(msg.sender, _tokenid), \\\"Only holder can do this request.\\\");\\n        require(_amount \\u003e 0, \\\"Amount must be greater than 0.\\\");\\n        require(_stakes[_tokenid].amount \\u003e 0, \\\"NFT not staked.\\\");\\n        require((_stakes[_tokenid].amount + _amount) \\u003c= _maxstake[_nftinfo[_tokenid].configid], string.concat(\\\"Maximum Stake is \\\", Strings.toString(_maxstake[_nftinfo[_tokenid].configid])));\\n        require(_nftinfo[_tokenid].fuel \\u003e 0, \\\"Sorry, your NFT is run out of fuel.\\\");\\n        require(TOKEN.transferFrom(msg.sender, address(this), _amount), \\\"Can not paid this transaction\\\");\\n        uint256 pendingReward = getPendingRewardByStake(_tokenid);\\n        if(pendingReward \\u003e 0) {\\n            _claimreward(_tokenid);\\n        }\\n        emit WithdrawStake(msg.sender, _tokenid, _stakes[_tokenid].amount);\\n\\n        uint256 endblock = block.number + _plans[_stakes[_tokenid].planid].addblock;\\n        uint256 endblockfuel = block.number + _nftinfo[_tokenid].fuel;\\n        if(endblockfuel \\u003c endblock) endblock = endblockfuel;\\n        uint256 nextclaim = (block.number + CLAIM_EVERY);\\n        if(endblockfuel \\u003c nextclaim) nextclaim = endblockfuel;\\n\\n        _stakes[_tokenid].amount += _amount;\\n        _stakes[_tokenid].startat = block.number;\\n        _stakes[_tokenid].blockclaimed = 0;\\n        _stakes[_tokenid].claimed = 0;\\n        _stakes[_tokenid].endat = endblock;\\n        _stakes[_tokenid].nextclaimat = nextclaim;\\n\\n        TOTAL_STAKE += _amount;\\n        emit StakeToken(msg.sender, _tokenid, _stakes[_tokenid].planid, _stakes[_tokenid].endat, _stakes[_tokenid].amount, _nftinfo[_tokenid].fuel, _stakes[_tokenid].nextclaimat);\\n    }\\n\\n    function showAddressStakes(address _holder) public view returns (uint256[] memory) {\\n        return _holderstakes[_holder];\\n    }\\n\\n    struct StakeDataReturn {\\n        uint256 tokenid;\\n        string plan;\\n        uint256 amount;\\n        uint256 startat;\\n        uint256 endat;\\n        uint256 claimed_block;\\n        uint256 claimed;\\n        uint256 nextclaim;\\n        uint256 tokenfuel;\\n    }\\n\\n    function showStakeData(uint256 _tokenid) public view returns (StakeDataReturn memory) {\\n        StakeInfo memory data = _stakes[_tokenid];\\n        return StakeDataReturn({\\n            tokenid: _tokenid,\\n            plan: _plans[data.planid].title, \\n            amount: data.amount, \\n            startat: data.startat, \\n            endat: data.endat, \\n            claimed_block: data.blockclaimed,\\n            claimed: data.claimed,\\n            nextclaim: data.nextclaimat,\\n            tokenfuel: _nftinfo[_tokenid].fuel\\n        });\\n    }\\n\\n    function showTokenData(uint256 _tokenid) public view returns (uint256 tokenid, uint256 fuel, uint256 maxstake) {\\n        return ( _nftinfo[_tokenid].tokenid, _nftinfo[_tokenid].fuel, _maxstake[_nftinfo[_tokenid].configid] );\\n    }\\n\\n    function unClaimedBlock(uint256 _tokenid) public view returns (uint256 block_unclaim) {\\n        block_unclaim = 0;\\n        StakeInfo memory stakedata = _stakes[_tokenid];\\n        if(stakedata.amount \\u003e 0) {\\n            uint256 lastblock = block.number;\\n            // if not flexible and lastblock greater than endtime then make lastblock to endtime\\n            if(stakedata.endat \\u003e stakedata.startat \\u0026\\u0026 lastblock \\u003e stakedata.endat) lastblock = stakedata.endat;\\n            // unclaimed = lastblock - claimedblock\\n            block_unclaim = (lastblock - (stakedata.startat + stakedata.blockclaimed));\\n            // check if unclaimed greater than fuel\\n            if(block_unclaim \\u003e _nftinfo[_tokenid].fuel) block_unclaim = _nftinfo[_tokenid].fuel;\\n        }\\n        return block_unclaim;\\n    }\\n\\n    function getPendingRewardByStake(uint256 _tokenid) public view returns(uint256 pendingReward) {\\n        pendingReward = 0;\\n        StakeInfo storage stakedata = _stakes[_tokenid];\\n        if(stakedata.amount \\u003e 0) {\\n            uint256 duration = unClaimedBlock(_tokenid);\\n            uint256 rewardatblock = 0;\\n            uint256 claimed = 0;\\n            uint256 lastClaimBlock = (stakedata.startat + stakedata.blockclaimed);\\n            for(uint i = 0; i \\u003c _halvings.length; i++) {\\n                claimed = 0;\\n                rewardatblock =  0;\\n                Halving storage halv = _halvings[i];\\n                if(duration \\u003e 0) {\\n                    if(halv.lastblock == 0) {\\n                        claimed = duration;\\n                    } else if(halv.lastblock \\u003e lastClaimBlock) {\\n                        claimed = (halv.lastblock - lastClaimBlock);\\n                        if(claimed \\u003e duration) claimed = duration;\\n                    }\\n                    lastClaimBlock += claimed;\\n                    rewardatblock = ((stakedata.amount * ((REWARD_RATE * PERCENT_PRECISION) / (2 ** halv.stage))) / (7 * 100 * PERCENT_PRECISION)) / DAILY_BLOCKS;\\n                    pendingReward += (rewardatblock * claimed);\\n                    duration -= claimed;\\n                } else {\\n                    i = _halvings.length;\\n                }\\n            }\\n        }\\n        return pendingReward;\\n    }\\n    \\n    function ClaimReward(uint256 _tokenid) public payable whenNotPaused {\\n        require(msg.value \\u003e= COST);\\n        require(_checkStakingOwnership(msg.sender, _tokenid), \\\"Only holder can do this request.\\\");\\n        require(AVALIABLE_BALANCE \\u003e 0, \\\"Pool finished\\\");\\n        require(_nftinfo[_tokenid].fuel \\u003e 0, \\\"Your NFT is run out of fuel.\\\");\\n        uint256 nextclaim = _stakes[_tokenid].nextclaimat;\\n        require(block.number \\u003e nextclaim, string.concat(\\\"Next claim reward after block \\\", Strings.toString(nextclaim)));\\n        uint256 pendingReward = getPendingRewardByStake(_tokenid);\\n        require(pendingReward \\u003e 0, \\\"No reward distributed.\\\");\\n        \\n        uint256 diff = (uint256((block.number - _stakes[_tokenid].startat) / CLAIM_EVERY) * CLAIM_EVERY) + CLAIM_EVERY;\\n        _stakes[_tokenid].nextclaimat = (_stakes[_tokenid].startat + diff);\\n\\n        _claimreward(_tokenid);\\n    }\\n\\n    function _claimreward(uint256 _tokenid) internal {\\n        uint256 pendingReward = getPendingRewardByStake(_tokenid);\\n        uint256 pendingBlock = unClaimedBlock(_tokenid);\\n        if(pendingReward \\u003e 0) {\\n            StakeInfo storage staking = _stakes[_tokenid];\\n            if(pendingReward \\u003e AVALIABLE_BALANCE) pendingReward = AVALIABLE_BALANCE;\\n            staking.blockclaimed += pendingBlock;\\n            _nftinfo[_tokenid].fuel -= pendingBlock;\\n            uint256 sendtoholder = ((pendingReward * _plans[staking.planid].reward) / 100);\\n            uint256 stakefee = ((pendingReward * _plans[staking.planid].fee) / 100);\\n            staking.claimed += sendtoholder;\\n            staking.claimed += stakefee;\\n            emit ClaimRewardStake(msg.sender, _tokenid, (sendtoholder + stakefee), pendingBlock, staking.nextclaimat);\\n            if(sendtoholder \\u003e 0) SendReward(msg.sender, sendtoholder);\\n            if(stakefee \\u003e 0) SendReward(COLLECTOR, stakefee);\\n        }\\n    }\\n\\n    function SendReward(address _receiver, uint256 _amount) internal {\\n        AVALIABLE_BALANCE -= _amount;\\n        REWARD_COLLECTED += _amount;\\n        TOKEN.transfer(_receiver, _amount);\\n    }\\n\\n    function Withdraw(uint256 _tokenid) public whenNotPaused {\\n        require(_checkStakingOwnership(msg.sender, _tokenid), \\\"Only holder can do this request.\\\");\\n        require(_stakes[_tokenid].amount \\u003e 0, \\\"Staking not found.\\\");\\n        require(_stakes[_tokenid].endat \\u003c block.number, \\\"Staking not finished yet.\\\");\\n\\n        // if pending reward \\u003e 0 then claim the reward before withdrawal\\n        uint256 pendingReward = getPendingRewardByStake(_tokenid);\\n        if(pendingReward \\u003e 0) {\\n            _claimreward(_tokenid);\\n        }\\n\\n        _withdraw(msg.sender, _tokenid);\\n    }\\n\\n    function _withdraw(address _holder, uint256 _tokenid) internal {\\n        uint256 stakeAmount = _stakes[_tokenid].amount;\\n        if(stakeAmount \\u003e 0) {\\n            // delete records from holder map\\n            uint256[] storage holder = _holderstakes[_holder];\\n            for(uint i = 0; i \\u003c holder.length; i++) {\\n                if(holder[i] == _tokenid) {\\n                    holder[i] = holder[holder.length - 1];\\n                }\\n            }\\n            holder.pop();\\n            // delete staking record\\n            delete _stakes[_tokenid];\\n            TOTAL_STAKE -= stakeAmount;\\n            TOKEN.transfer(_holder, stakeAmount);\\n            emit WithdrawStake(_holder, _tokenid, stakeAmount);\\n        }\\n    }\\n\\n    function initialSetup() external onlyOwner {\\n        configMaxStakeByFuel(72800, (10000 * TOKEN_DECIMALS));\\n        configMaxStakeByFuel(1092, (5000 * TOKEN_DECIMALS));\\n        configMaxStakeByFuel(546, (3000 * TOKEN_DECIMALS));\\n        configMaxStakeByFuel(364, (1000 * TOKEN_DECIMALS));\\n        configMaxStakeByFuel(182, (500 * TOKEN_DECIMALS));\\n        configMaxStakeByFuel(91, (200 * TOKEN_DECIMALS));\\n        setPlan(1, \\\"Flexible\\\", 0, 40, 60);\\n        setPlan(2, \\\"3 Month\\\", (91 * DAILY_BLOCKS), 60, 40);\\n        setPlan(3, \\\"6 Month\\\", (182 * DAILY_BLOCKS), 80, 20);\\n        setHalving(0,0);\\n        setHalving(1,0);\\n    }\\n\\n    /**\\n    * Rescue Token\\n    */\\n    function recoveryToken(address _tokenAddress, uint256 _tokenAmount) external onlyOwner {\\n        IERC20(_tokenAddress).safeTransfer(address(msg.sender), _tokenAmount);\\n        emit AdminTokenRecovery(_tokenAddress, _tokenAmount);\\n    }\\n\\n    function withdrawPayable() external onlyOwner {\\n        require(payable(msg.sender).send(address(this).balance));\\n    }\\n\\n    /**\\n     * _stage: halving level (first level must be 0)\\n     * _lastblock: block number of end stage\\n     * this function to setup halving schedule\\n     */\\n    function setHalving(uint8 _stage, uint256 _lastblock) public onlyOwner {\\n        uint index = 0; bool bfound = false;\\n        for(uint i = 0; i \\u003c _halvings.length; i++) {\\n            if(_halvings[i].stage == _stage) {\\n                bfound = true; index = i;\\n            }\\n        }\\n        if(bfound) {\\n            _halvings[index].lastblock = _lastblock;\\n        } else {\\n            _halvings.push(Halving(_stage, _lastblock));\\n        }\\n    }\\n\\n    /**\\n     * this function setup claim reward cost (default 0)\\n     */\\n    function setCost(uint256 _cost) public onlyOwner {\\n        COST = _cost;\\n    }\\n\\n    /**\\n     * this function replace old collector address to new address (default owner)\\n     */\\n    function setCollectorAddr(address _address) public onlyOwner {\\n        COLLECTOR = _address;\\n    }\\n\\n    /**\\n     *  this function will add new balance into staking pool (add not replace)\\n     */\\n    function topupPool(uint256 _amount) public onlyOwner {\\n        require(_amount \\u003e 0, \\\"_block can not zero value\\\");\\n        AVALIABLE_BALANCE += _amount;\\n        emit TopupPoolStake(_amount);\\n    }\\n\\n    /**\\n     *  this function will replace add block (next claim) when holder do claim reward\\n     */\\n    function setClaimSchedule(uint256 _block) public onlyOwner {\\n        require(_block \\u003e 0, \\\"_block can not zero value\\\");\\n        CLAIM_EVERY = _block;\\n    }\\n\\n    /**\\n     * this function to set reward (no decimal, default 5)\\n     */\\n    function setRewardRate(uint8 _percent) public onlyOwner {\\n        require(_percent \\u003e 0, \\\"_percent can not zero value\\\");\\n        REWARD_RATE = _percent;\\n    }\\n\\n    /**\\n     * this function to set reward (no decimal, default 5)\\n     */\\n    function setMinimumStake(uint256 _minimum) public onlyOwner {\\n        require(_minimum \\u003e 0, \\\"_minimum can not zero value\\\");\\n        MINIMUM_STAKE = _minimum;\\n    }\\n\\n    /**\\n     * this function setup maximum stake\\n     */\\n    function configMaxStakeByFuel(uint256 _fuel, uint256 _maximum) public onlyOwner {\\n        _maxstake[_fuel] = _maximum;\\n    }\\n\\n    /**\\n     * _id: PlanID\\n     * _title: Plan title\\n     * _addblock: block add to withdraw stake (1 day = 28800 block)\\n     * _reward: percent reward block distributed to holder (no decimal)\\n     * _fee: percent reward block distributed to collector (no decimal)\\n     * this function will replace plan configuration (if exists) or create new plan (if not exists)\\n     */\\n    function setPlan(uint8 _id, string memory _title, uint256 _addblock, uint8 _reward, uint8 _fee) public onlyOwner {\\n        _plans[_id] = Plans(_id, _title, _addblock, _reward, _fee);\\n    }\\n\\n    /**\\n     * Migration from old staking smart contract\\n     */\\n    function migrate_data(address _scfrom) public onlyOwner {\\n        AVALIABLE_BALANCE = ISmartContract(_scfrom).getPoolBalances();\\n        TOTAL_STAKE = ISmartContract(_scfrom).getTotalStakes();\\n        REWARD_COLLECTED = ISmartContract(_scfrom).getTotalCollected();\\n    }\\n\\n    function migrate_staking(address _scfrom, uint256[] memory _tokenids) public onlyOwner {\\n        for(uint i = 0; i \\u003c _tokenids.length; i++) {\\n            uint256 _tokenid = _tokenids[i];\\n\\n            // getting nft data from sc nft\\n            IContractNFT.NFTData memory datanft = NFT.getTokenData(_tokenid);\\n            // getting nft data from old contract\\n            (uint256 gtokenid, uint256 gfuel, uint256 gmaxstake) = ISmartContract(_scfrom).showTokenData(_tokenid);\\n            // getting address of owner nft as staking holder\\n            address owner_nft = NFT.ownerOf(gtokenid);\\n            gmaxstake = 0;\\n            // store nft data into current contract.\\n            // * add config_id into collection, remove maxstake from each nft (old contract).\\n            _nftinfo[gtokenid] = NFTInfo(gtokenid, datanft.fuel, gfuel, true);\\n            \\n            // getting staking data from old contract\\n            ISmartContract.StakeDataReturn memory oldstake = ISmartContract(_scfrom).showStakeData(gtokenid);\\n            // check oldstake data is available, if none then skip copy staking data\\n            if(oldstake.amount \\u003e 0) {\\n                // find plan id from plan name\\n                uint8 oldplanid = 1;\\n                if(keccak256(abi.encodePacked(\\\"3 Month\\\")) == keccak256(abi.encodePacked(oldstake.plan))) {\\n                    oldplanid = 2;\\n                }\\n                if(keccak256(abi.encodePacked(\\\"6 Month\\\")) == keccak256(abi.encodePacked(oldstake.plan))) {\\n                    oldplanid = 3;\\n                }\\n                // store staking data into current constract\\n                _stakes[gtokenid] = StakeInfo({\\n                                        planid: oldplanid,\\n                                        amount: oldstake.amount,\\n                                        startat: oldstake.startat,\\n                                        endat: oldstake.endat,\\n                                        blockclaimed: oldstake.claimed_block,\\n                                        claimed: oldstake.claimed,\\n                                        nextclaimat: oldstake.nextclaim\\n                                    });\\n                // save holder stake\\n                _holderstakes[owner_nft].push(gtokenid);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * this function will delete existing plan\\n     */\\n    function deletePlan(uint8 _id) public onlyOwner {\\n        delete _plans[_id];\\n    }\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n}\"},\"Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i \\u003e 1; --i) {\\n            buffer[i] = _SYMBOLS[value \\u0026 0xf];\\n            value \\u003e\\u003e= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenRecovered\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AdminTokenRecovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextclaimblock\",\"type\":\"uint256\"}],\"name\":\"ClaimRewardStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"planid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fuel\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextclaimblock\",\"type\":\"uint256\"}],\"name\":\"StakeToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TopupPoolStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawStake\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenid\",\"type\":\"uint256\"}],\"name\":\"ClaimReward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_planid\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_tokenid\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenid\",\"type\":\"uint256\"}],\"name\":\"StakeTopup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenid\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fuel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maximum\",\"type\":\"uint256\"}],\"name\":\"configMaxStakeByFuel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_id\",\"type\":\"uint8\"}],\"name\":\"deletePlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenid\",\"type\":\"uint256\"}],\"name\":\"getPendingRewardByStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialSetup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_scfrom\",\"type\":\"address\"}],\"name\":\"migrate_data\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_scfrom\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenids\",\"type\":\"uint256[]\"}],\"name\":\"migrate_staking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoveryToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"setClaimSchedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setCollectorAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cost\",\"type\":\"uint256\"}],\"name\":\"setCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_stage\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_lastblock\",\"type\":\"uint256\"}],\"name\":\"setHalving\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimum\",\"type\":\"uint256\"}],\"name\":\"setMinimumStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_id\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_addblock\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_reward\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_fee\",\"type\":\"uint8\"}],\"name\":\"setPlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_percent\",\"type\":\"uint8\"}],\"name\":\"setRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"showAddressStakes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showHalvingPlans\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"stage\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"lastblock\",\"type\":\"uint256\"}],\"internalType\":\"struct TwelveZodiacStake.Halving[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fuel\",\"type\":\"uint256\"}],\"name\":\"showMaxStakeByFuel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_id\",\"type\":\"uint8\"}],\"name\":\"showPlanConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"planid\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"addblock\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"reward\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"fee\",\"type\":\"uint8\"}],\"internalType\":\"struct TwelveZodiacStake.Plans\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenid\",\"type\":\"uint256\"}],\"name\":\"showStakeData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"plan\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startat\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endat\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed_block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextclaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenfuel\",\"type\":\"uint256\"}],\"internalType\":\"struct TwelveZodiacStake.StakeDataReturn\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenid\",\"type\":\"uint256\"}],\"name\":\"showTokenData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fuel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxstake\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"topupPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenid\",\"type\":\"uint256\"}],\"name\":\"unClaimedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"block_unclaim\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawPayable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TwelveZodiacStake", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000bd6ceeef56985b608252c3651dd903a3fcc34910000000000000000000000000a5f03693280d1752d92093e7b7ccfd15560873e7", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6eaae8e4e7824c44f1da491ae0d32903f1037db0705f7fd235ef053186742c7b"}