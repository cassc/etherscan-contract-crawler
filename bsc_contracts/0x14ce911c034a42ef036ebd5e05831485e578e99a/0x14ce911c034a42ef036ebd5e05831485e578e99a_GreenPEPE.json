{"SourceCode": "pragma solidity 0.4.25;\r\n\r\ncontract GreenPEPE {\r\n\r\n    string public symbol = \"Gpepe\";\r\n    string public name = \"GreenPEPE\";\r\n    uint8 public constant decimals = 18;\r\n    uint256 _totalSupply = 0;\t\r\n\tuint256 _FreeGpepe = 7500;\r\n    uint256 _ML1 = 2;\r\n    uint256 _ML2 = 3;\r\n\tuint256 _ML3 = 4;\r\n    uint256 _LimitML1 = 3e15;\r\n    uint256 _LimitML2 = 6e15;\r\n\tuint256 _LimitML3 = 9e15;\r\n\tuint256 _MaxDistribPublicSupply = 750000000;\r\n    uint256 _OwnerDistribSupply = 0;\r\n    uint256 _CurrentDistribPublicSupply = 0;\t\r\n    uint256 _ExtraTokensPerETHSended = 850000;\r\n    \r\n\taddress _DistribFundsReceiverAddress = 0;\r\n    address _remainingTokensReceiverAddress = 0;\r\n    address owner = 0;\r\n\t\r\n\t\r\n    bool setupDone = false;\r\n    bool IsDistribRunning = false;\r\n    bool DistribStarted = false;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event Burn(address indexed _owner, uint256 _value);\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n    mapping(address => bool) public Claimed;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function GreenPEPE() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function() public payable {\r\n        if (IsDistribRunning) {\r\n            uint256 _amount;\r\n            if (((_CurrentDistribPublicSupply + _amount) > _MaxDistribPublicSupply) && _MaxDistribPublicSupply > 0) revert();\r\n            if (!_DistribFundsReceiverAddress.send(msg.value)) revert();\r\n            if (Claimed[msg.sender] == false) {\r\n                _amount = _FreeGpepe * 1e18;\r\n                _CurrentDistribPublicSupply += _amount;\r\n                balances[msg.sender] += _amount;\r\n                _totalSupply += _amount;\r\n                Transfer(this, msg.sender, _amount);\r\n                Claimed[msg.sender] = true;\r\n            }\r\n\r\n           \r\n\r\n            if (msg.value >= 2e18) {\r\n            _amount = msg.value * _ExtraTokensPerETHSended * 1;\r\n            } else {\r\n                if (msg.value >= 6e17) {\r\n                    _amount = msg.value * _ExtraTokensPerETHSended * 1;\r\n                } else {\r\n                    if (msg.value >= 3e17) {\r\n                        _amount = msg.value * _ExtraTokensPerETHSended * 1;\r\n                    } else {\r\n\r\n                        _amount = msg.value * _ExtraTokensPerETHSended;\r\n\r\n                    }\r\n\r\n                }\r\n            }\r\n\t\t\t \r\n\t\t\t _CurrentDistribPublicSupply += _amount;\r\n                balances[msg.sender] += _amount;\r\n                _totalSupply += _amount;\r\n                Transfer(this, msg.sender, _amount);\r\n        \r\n\r\n\r\n\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    function SetupGpepe(string tokenName, string tokenSymbol, uint256 ExtraTokensPerETHSended, uint256 MaxDistribPublicSupply, uint256 OwnerDistribSupply, address remainingTokensReceiverAddress, address DistribFundsReceiverAddress, uint256 FreeGpepe) public {\r\n        if (msg.sender == owner && !setupDone) {\r\n            symbol = tokenSymbol;\r\n            name = tokenName;\r\n            _FreeGpepe = FreeGpepe;\r\n            _ExtraTokensPerETHSended = ExtraTokensPerETHSended;\r\n            _MaxDistribPublicSupply = MaxDistribPublicSupply * 1e18;\r\n            if (OwnerDistribSupply > 0) {\r\n                _OwnerDistribSupply = OwnerDistribSupply * 1e18;\r\n                _totalSupply = _OwnerDistribSupply;\r\n                balances[owner] = _totalSupply;\r\n                _CurrentDistribPublicSupply += _totalSupply;\r\n                Transfer(this, owner, _totalSupply);\r\n            }\r\n            _DistribFundsReceiverAddress = DistribFundsReceiverAddress;\r\n            if (_DistribFundsReceiverAddress == 0) _DistribFundsReceiverAddress = owner;\r\n            _remainingTokensReceiverAddress = remainingTokensReceiverAddress;\r\n\r\n            setupDone = true;\r\n        }\r\n    }\r\n\r\n    function SetupML(uint256 ML1inX, uint256 ML2inX, uint256 LimitML1inWei, uint256 LimitML2inWei) onlyOwner public {\r\n        _ML1 = ML1inX;\r\n        _ML2 = ML2inX;\r\n        _LimitML1 = LimitML1inWei;\r\n        _LimitML2 = LimitML2inWei;\r\n        \r\n    }\r\n\r\n    function SetExtra(uint256 ExtraTokensPerETHSended) onlyOwner public {\r\n        _ExtraTokensPerETHSended = ExtraTokensPerETHSended;\r\n    }\r\n\r\n    function SetFreeGpepe(uint256 FreeGpepe) onlyOwner public {\r\n        _FreeGpepe = FreeGpepe;\r\n    }\r\n\r\n    function StartDistrib() public returns(bool success) {\r\n        if (msg.sender == owner && !DistribStarted && setupDone) {\r\n            DistribStarted = true;\r\n            IsDistribRunning = true;\r\n        } else {\r\n            revert();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function StopDistrib() public returns(bool success) {\r\n        if (msg.sender == owner && IsDistribRunning) {\r\n            if (_remainingTokensReceiverAddress != 0 && _MaxDistribPublicSupply > 0) {\r\n                uint256 _remainingAmount = _MaxDistribPublicSupply - _CurrentDistribPublicSupply;\r\n                if (_remainingAmount > 0) {\r\n                    balances[_remainingTokensReceiverAddress] += _remainingAmount;\r\n                    _totalSupply += _remainingAmount;\r\n                    Transfer(this, _remainingTokensReceiverAddress, _remainingAmount);\r\n                }\r\n            }\r\n            DistribStarted = false;\r\n            IsDistribRunning = false;\r\n        } else {\r\n            revert();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function distribution(address[] addresses, uint256 _amount) onlyOwner public {\r\n\r\n        uint256 _remainingAmount = _MaxDistribPublicSupply - _CurrentDistribPublicSupply;\r\n        require(addresses.length <= 255);\r\n        require(_amount <= _remainingAmount);\r\n        _amount = _amount * 1e18;\r\n\r\n        for (uint i = 0; i < addresses.length; i++) {\r\n            require(_amount <= _remainingAmount);\r\n            _CurrentDistribPublicSupply += _amount;\r\n            balances[addresses[i]] += _amount;\r\n            _totalSupply += _amount;\r\n            Transfer(this, addresses[i], _amount);\r\n\r\n        }\r\n\r\n        if (_CurrentDistribPublicSupply >= _MaxDistribPublicSupply) {\r\n            DistribStarted = false;\r\n            IsDistribRunning = false;\r\n        }\r\n    }\r\n\r\n    function distributeAmounts(address[] addresses, uint256[] amounts) onlyOwner public {\r\n\r\n        uint256 _remainingAmount = _MaxDistribPublicSupply - _CurrentDistribPublicSupply;\r\n        uint256 _amount;\r\n\r\n        require(addresses.length <= 255);\r\n        require(addresses.length == amounts.length);\r\n\r\n        for (uint8 i = 0; i < addresses.length; i++) {\r\n            _amount = amounts[i] * 1e18;\r\n            require(_amount <= _remainingAmount);\r\n            _CurrentDistribPublicSupply += _amount;\r\n            balances[addresses[i]] += _amount;\r\n            _totalSupply += _amount;\r\n            Transfer(this, addresses[i], _amount);\r\n\r\n\r\n            if (_CurrentDistribPublicSupply >= _MaxDistribPublicSupply) {\r\n                DistribStarted = false;\r\n                IsDistribRunning = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    function BurnTokens(uint256 amount) public returns(bool success) {\r\n        uint256 _amount = amount * 1e18;\r\n        if (balances[msg.sender] >= _amount) {\r\n            balances[msg.sender] -= _amount;\r\n            _totalSupply -= _amount;\r\n            Burn(msg.sender, _amount);\r\n            Transfer(msg.sender, 0, _amount);\r\n        } else {\r\n            revert();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function totalSupply() public constant returns(uint256 totalSupplyValue) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function MaxDistribPublicSupply_() public constant returns(uint256 MaxDistribPublicSupply) {\r\n        return _MaxDistribPublicSupply;\r\n    }\r\n\r\n    function OwnerDistribSupply_() public constant returns(uint256 OwnerDistribSupply) {\r\n        return _OwnerDistribSupply;\r\n    }\r\n\r\n    function CurrentDistribPublicSupply_() public constant returns(uint256 CurrentDistribPublicSupply) {\r\n        return _CurrentDistribPublicSupply;\r\n    }\r\n\r\n    function RemainingTokensReceiverAddress() public constant returns(address remainingTokensReceiverAddress) {\r\n        return _remainingTokensReceiverAddress;\r\n    }\r\n\r\n    function DistribFundsReceiverAddress() public constant returns(address DistribfundsReceiver) {\r\n        return _DistribFundsReceiverAddress;\r\n    }\r\n\r\n    function Owner() public constant returns(address ownerAddress) {\r\n        return owner;\r\n    }\r\n\r\n    function SetupDone() public constant returns(bool setupDoneFlag) {\r\n        return setupDone;\r\n    }\r\n\r\n    function IsDistribRunningFalg_() public constant returns(bool IsDistribRunningFalg) {\r\n        return IsDistribRunning;\r\n    }\r\n\r\n    function IsDistribStarted() public constant returns(bool IsDistribStartedFlag) {\r\n        return DistribStarted;\r\n    }\r\n\r\n    function balanceOf(address _owner) public constant returns(uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function transfer(address _to, uint256 _amount) public returns(bool success) {\r\n        if (balances[msg.sender] >= _amount &&\r\n            _amount > 0 &&\r\n            balances[_to] + _amount > balances[_to]) {\r\n            balances[msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(msg.sender, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) public returns(bool success) {\r\n        if (balances[_from] >= _amount &&\r\n            allowed[_from][msg.sender] >= _amount &&\r\n            _amount > 0 &&\r\n            balances[_to] + _amount > balances[_to]) {\r\n            balances[_from] -= _amount;\r\n            allowed[_from][msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function approve(address _spender, uint256 _amount) public returns(bool success) {\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant returns(uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalSupplyValue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"StopDistrib\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CurrentDistribPublicSupply_\",\"outputs\":[{\"name\":\"CurrentDistribPublicSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"StartDistrib\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BurnTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IsDistribStarted\",\"outputs\":[{\"name\":\"IsDistribStartedFlag\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"FreeGpepe\",\"type\":\"uint256\"}],\"name\":\"SetFreeGpepe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"distributeAmounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"ExtraTokensPerETHSended\",\"type\":\"uint256\"},{\"name\":\"MaxDistribPublicSupply\",\"type\":\"uint256\"},{\"name\":\"OwnerDistribSupply\",\"type\":\"uint256\"},{\"name\":\"remainingTokensReceiverAddress\",\"type\":\"address\"},{\"name\":\"DistribFundsReceiverAddress\",\"type\":\"address\"},{\"name\":\"FreeGpepe\",\"type\":\"uint256\"}],\"name\":\"SetupGpepe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IsDistribRunningFalg_\",\"outputs\":[{\"name\":\"IsDistribRunningFalg\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Claimed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Owner\",\"outputs\":[{\"name\":\"ownerAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DistribFundsReceiverAddress\",\"outputs\":[{\"name\":\"DistribfundsReceiver\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SetupDone\",\"outputs\":[{\"name\":\"setupDoneFlag\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OwnerDistribSupply_\",\"outputs\":[{\"name\":\"OwnerDistribSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RemainingTokensReceiverAddress\",\"outputs\":[{\"name\":\"remainingTokensReceiverAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ML1inX\",\"type\":\"uint256\"},{\"name\":\"ML2inX\",\"type\":\"uint256\"},{\"name\":\"LimitML1inWei\",\"type\":\"uint256\"},{\"name\":\"LimitML2inWei\",\"type\":\"uint256\"}],\"name\":\"SetupML\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MaxDistribPublicSupply_\",\"outputs\":[{\"name\":\"MaxDistribPublicSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ExtraTokensPerETHSended\",\"type\":\"uint256\"}],\"name\":\"SetExtra\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"distribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]", "ContractName": "GreenPEPE", "CompilerVersion": "v0.4.25+commit.59dbf8f1", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://114ae6e48e54811959533ece353eb398dd130f38db3697f4984bed3ccbef6552"}