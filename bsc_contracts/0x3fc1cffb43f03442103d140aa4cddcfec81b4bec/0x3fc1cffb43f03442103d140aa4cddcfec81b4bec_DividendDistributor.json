{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-11-22\r\n*/\r\n\r\n//SPDX-License-Identifier: unlicensed\r\npragma solidity ^0.8.0;\r\n \r\nlibrary SafeMath {\r\n    function tryAdd(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n \r\n    function trySub(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n \r\n    function tryMul(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n \r\n    function tryDiv(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n \r\n    function tryMod(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n \r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n \r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n \r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n \r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n \r\n    function decimals() external view returns (uint8);\r\n \r\n    function symbol() external view returns (string memory);\r\n \r\n    function name() external view returns (string memory);\r\n \r\n    function getOwner() external view returns (address);\r\n \r\n    function balanceOf(address account) external view returns (uint256);\r\n \r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n \r\n    function allowance(\r\n        address _owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n \r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n \r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n \r\nabstract contract Auth {\r\n    address internal owner;\r\n    mapping(address => bool) internal authorizations;\r\n \r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n        authorizations[_owner] = true;\r\n    }\r\n \r\n    /**\r\n     * Function modifier to require caller to be contract owner\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"!OWNER\");\r\n        _;\r\n    }\r\n \r\n    /**\r\n     * Function modifier to require caller to be authorized\r\n     */\r\n    modifier authorized() {\r\n        require(isAuthorized(msg.sender), \"!AUTHORIZED\");\r\n        _;\r\n    }\r\n \r\n    /**\r\n     * Authorize address. Owner only\r\n     */\r\n    function authorize(address adr) public onlyOwner {\r\n        authorizations[adr] = true;\r\n    }\r\n \r\n    /**\r\n     * Remove address' authorization. Owner only\r\n     */\r\n    function unauthorize(address adr) public onlyOwner {\r\n        authorizations[adr] = false;\r\n    }\r\n \r\n    /**\r\n     * Check if address is owner\r\n     */\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n \r\n    /**\r\n     * Return address' authorization status\r\n     */\r\n    function isAuthorized(address adr) public view returns (bool) {\r\n        return authorizations[adr];\r\n    }\r\n \r\n    /**\r\n     * Transfer ownership to new address. Caller must be owner. Leaves old owner authorized\r\n     */\r\n    function transferOwnership(address payable adr) public onlyOwner {\r\n        owner = adr;\r\n        authorizations[adr] = true;\r\n        emit OwnershipTransferred(adr);\r\n    }\r\n \r\n    event OwnershipTransferred(address owner);\r\n}\r\n \r\ninterface IDEXFactory {\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n}\r\n \r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n \r\n    function WETH() external pure returns (address);\r\n \r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n \r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint amountToken, uint amountETH, uint liquidity);\r\n \r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n \r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n \r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n \r\ninterface IDividendDistributor {\r\n    function setDistributionCriteria(\r\n        uint256 _minPeriod,\r\n        uint256 _minDistribution\r\n    ) external;\r\n \r\n    function setShare(address shareholder, uint256 amount) external;\r\n \r\n    function deposit() external payable;\r\n \r\n    function process(uint256 gas) external;\r\n}\r\n \r\ncontract DividendDistributor is IDividendDistributor {\r\n    using SafeMath for uint256;\r\n \r\n    address _token;\r\n \r\n    struct Share {\r\n        uint256 amount;\r\n        uint256 totalExcluded;\r\n        uint256 totalRealised;\r\n    }\r\n \r\n    IBEP20 rewardToken = IBEP20(0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82);\r\n \r\n    address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n    IDEXRouter router;\r\n \r\n    address[] shareholders;\r\n    mapping(address => uint256) shareholderIndexes;\r\n    mapping(address => uint256) shareholderClaims;\r\n \r\n    mapping(address => Share) public shares;\r\n \r\n    uint256 public totalShares;\r\n    uint256 public totalDividends;\r\n    uint256 public totalDistributed;\r\n    uint256 public dividendsPerShare;\r\n    uint256 public dividendsPerShareAccuracyFactor = 10 ** 36;\r\n \r\n    uint256 public minHoldToReceiveDividend = 10_000 * (10 ** 18);\r\n    uint256 public minPeriod = 1 hours;\r\n    uint256 public minDistribution = 1 * (10 ** 18);\r\n \r\n    uint256 currentIndex;\r\n    address owner = msg.sender;\r\n \r\n    bool initialized;\r\n    modifier initialization() {\r\n        require(!initialized);\r\n        _;\r\n        initialized = true;\r\n    }\r\n \r\n    modifier onlyToken() {\r\n        require(msg.sender == _token);\r\n        _;\r\n    }\r\n \r\n    constructor(address _router) {\r\n        router = _router != address(0)\r\n            ? IDEXRouter(_router)\r\n            : IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        _token = msg.sender;\r\n    }\r\n \r\n    function setDistributionCriteria(\r\n        uint256 _minPeriod,\r\n        uint256 _minDistribution\r\n    ) external override onlyToken {\r\n        minPeriod = _minPeriod;\r\n        minDistribution = _minDistribution;\r\n    }\r\n \r\n    function setShare(\r\n        address shareholder,\r\n        uint256 amount\r\n    ) external override onlyToken {\r\n        if (shares[shareholder].amount > 0) {\r\n            distributeDividend(shareholder);\r\n        }\r\n \r\n        uint256 minHolding = minHoldToReceiveDividend;\r\n        if (amount >= minHolding && shares[shareholder].amount < minHolding) {\r\n            addShareholder(shareholder);\r\n        } else if (\r\n            amount < minHolding && shares[shareholder].amount >= minHolding\r\n        ) {\r\n            removeShareholder(shareholder);\r\n        }\r\n \r\n        totalShares = totalShares.sub(shares[shareholder].amount).add(amount);\r\n        shares[shareholder].amount = amount;\r\n        shares[shareholder].totalExcluded = getCumulativeDividends(\r\n            shares[shareholder].amount\r\n        );\r\n    }\r\n \r\n    function changeMinHoldToReceiveDividend(uint256 amount) external onlyToken {\r\n        minHoldToReceiveDividend = amount;\r\n    }\r\n \r\n    function deposit() external payable override onlyToken {\r\n        uint256 balanceBefore = rewardToken.balanceOf(address(this));\r\n \r\n        address[] memory path = new address[](2);\r\n        path[0] = WBNB;\r\n        path[1] = address(rewardToken);\r\n \r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{\r\n            value: msg.value\r\n        }(0, path, address(this), block.timestamp);\r\n \r\n        uint256 amount = rewardToken.balanceOf(address(this)).sub(\r\n            balanceBefore\r\n        );\r\n \r\n        totalDividends = totalDividends.add(amount);\r\n        dividendsPerShare = dividendsPerShare.add(\r\n            dividendsPerShareAccuracyFactor.mul(amount).div(totalShares)\r\n        );\r\n    }\r\n \r\n    function changeRewardToken(address rewardAddress) external onlyToken {\r\n        rewardToken = IBEP20(rewardAddress);\r\n    }\r\n \r\n    function process(uint256 gas) external override onlyToken {\r\n        uint256 shareholderCount = shareholders.length;\r\n \r\n        if (shareholderCount == 0) {\r\n            return;\r\n        }\r\n \r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n \r\n        uint256 iterations = 0;\r\n \r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex = 0;\r\n            }\r\n \r\n            if (shouldDistribute(shareholders[currentIndex])) {\r\n                distributeDividend(shareholders[currentIndex]);\r\n            }\r\n \r\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n \r\n    function shouldDistribute(\r\n        address shareholder\r\n    ) internal view returns (bool) {\r\n        return\r\n            shareholderClaims[shareholder] + minPeriod < block.timestamp &&\r\n            getUnpaidEarnings(shareholder) > minDistribution;\r\n    }\r\n \r\n    function distributeDividend(address shareholder) internal {\r\n        if (shares[shareholder].amount == 0) {\r\n            return;\r\n        }\r\n \r\n        uint256 amount = getUnpaidEarnings(shareholder);\r\n        if (amount > 0) {\r\n            totalDistributed = totalDistributed.add(amount);\r\n            rewardToken.transfer(shareholder, amount);\r\n            shareholderClaims[shareholder] = block.timestamp;\r\n            shares[shareholder].totalRealised = shares[shareholder]\r\n                .totalRealised\r\n                .add(amount);\r\n            shares[shareholder].totalExcluded = getCumulativeDividends(\r\n                shares[shareholder].amount\r\n            );\r\n        }\r\n    }\r\n \r\n    function claimDividend() external {\r\n        distributeDividend(msg.sender);\r\n    }\r\n \r\n    function getUnpaidEarnings(\r\n        address shareholder\r\n    ) public view returns (uint256) {\r\n        if (shares[shareholder].amount == 0) {\r\n            return 0;\r\n        }\r\n \r\n        uint256 shareholderTotalDividends = getCumulativeDividends(\r\n            shares[shareholder].amount\r\n        );\r\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\r\n \r\n        if (shareholderTotalDividends <= shareholderTotalExcluded) {\r\n            return 0;\r\n        }\r\n \r\n        return shareholderTotalDividends.sub(shareholderTotalExcluded);\r\n    }\r\n \r\n    function getCumulativeDividends(\r\n        uint256 share\r\n    ) internal view returns (uint256) {\r\n        return\r\n            share.mul(dividendsPerShare).div(dividendsPerShareAccuracyFactor);\r\n    }\r\n \r\n    function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n \r\n    function removeShareholder(address shareholder) internal {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[\r\n            shareholders.length - 1\r\n        ];\r\n        shareholderIndexes[\r\n            shareholders[shareholders.length - 1]\r\n        ] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n}\r\n \r\ncontract OUT is IBEP20, Auth {\r\n    using SafeMath for uint256;\r\n \r\n    uint256 public constant MASK = type(uint128).max;\r\n    address public WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address ZERO = 0x0000000000000000000000000000000000000000;\r\n    address DEAD_NON_CHECKSUM = 0x000000000000000000000000000000000000dEaD;\r\n \r\n    string constant _name = \"Outter Finance\";\r\n    string constant _symbol = \"OUT\";\r\n    uint8 constant _decimals = 18;\r\n \r\n    uint256 _totalSupply = 11 * 10 ** 8 * (10 ** _decimals);\r\n \r\n    mapping(address => uint256) _balances;\r\n    mapping(address => mapping(address => uint256)) _allowances;\r\n \r\n    mapping(address => bool) isFeeExempt;\r\n    mapping(address => bool) isTxLimitExempt;\r\n    mapping(address => bool) isDividendExempt;\r\n    mapping(address => bool) blackListed;\r\n \r\n    uint256 liquidityFee = 50;\r\n    uint256 buybackFee = 0;\r\n    uint256 reflectionFee = 500;\r\n    uint256 marketingFee = 250;\r\n    uint256 totalFee = 800;\r\n    uint256 feeDenominator = 10000;\r\n \r\n    address public autoLiquidityReceiver;\r\n    address public marketingFeeReceiver;\r\n \r\n    uint256 targetLiquidity = 25;\r\n    uint256 targetLiquidityDenominator = 100;\r\n \r\n    IDEXRouter public router;\r\n    address public pair;\r\n \r\n    uint256 public launchedAt;\r\n    uint256 public launchedAtTimestamp;\r\n \r\n    // uint256 buybackMultiplierNumerator = 200;\r\n    // uint256 buybackMultiplierDenominator = 100;\r\n    // uint256 buybackMultiplierTriggeredAt;\r\n    // uint256 buybackMultiplierLength = 30 minutes;\r\n \r\n    bool public autoBuybackEnabled = false;\r\n    bool start = false;\r\n    mapping(address => bool) buyBacker;\r\n    uint256 autoBuybackCap;\r\n    uint256 autoBuybackAccumulator;\r\n    uint256 autoBuybackAmount;\r\n    uint256 autoBuybackBlockPeriod;\r\n    uint256 autoBuybackBlockLast;\r\n \r\n    DividendDistributor distributor;\r\n    address public distributorAddress;\r\n \r\n    uint256 distributorGas = 500000;\r\n \r\n    bool public swapEnabled = true;\r\n    uint256 public swapThreshold = _totalSupply / 2000; // 0.005%\r\n    bool inSwap;\r\n \r\n    uint256 maxSellAmount = _totalSupply.div(400);\r\n    mapping(address user => uint256 swapBlock) private userLastSell;\r\n    uint256 sellSwapCooldown = 1;\r\n \r\n    modifier swapping() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n \r\n    constructor(address _dexRouter) Auth(msg.sender) {\r\n        router = IDEXRouter(_dexRouter);\r\n        pair = IDEXFactory(router.factory()).createPair(WBNB, address(this));\r\n        _allowances[address(this)][address(router)] = _totalSupply;\r\n        WBNB = router.WETH();\r\n        distributor = new DividendDistributor(_dexRouter);\r\n        distributorAddress = address(distributor);\r\n \r\n        isFeeExempt[msg.sender] = true;\r\n        isTxLimitExempt[msg.sender] = true;\r\n        isDividendExempt[pair] = true;\r\n        isDividendExempt[address(this)] = true;\r\n        isDividendExempt[DEAD] = true;\r\n        buyBacker[msg.sender] = true;\r\n \r\n        autoLiquidityReceiver = msg.sender;\r\n        marketingFeeReceiver = msg.sender;\r\n \r\n        approve(_dexRouter, _totalSupply);\r\n        approve(address(pair), _totalSupply);\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n \r\n    receive() external payable {}\r\n \r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n \r\n    function decimals() external pure override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n \r\n    function symbol() external pure override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n \r\n    function name() external pure override returns (string memory) {\r\n        return _name;\r\n    }\r\n \r\n    function getOwner() external view override returns (address) {\r\n        return owner;\r\n    }\r\n \r\n    modifier onlyBuybacker() {\r\n        require(buyBacker[msg.sender] == true, \"\");\r\n        _;\r\n    }\r\n \r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n \r\n    function allowance(\r\n        address holder,\r\n        address spender\r\n    ) external view override returns (uint256) {\r\n        return _allowances[holder][spender];\r\n    }\r\n \r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n \r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, _totalSupply);\r\n    }\r\n \r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n \r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        if (_allowances[sender][msg.sender] != _totalSupply) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender]\r\n                .sub(amount, \"Insufficient Allowance\");\r\n        }\r\n \r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n \r\n    function _transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        if (inSwap) {\r\n            return _basicTransfer(sender, recipient, amount);\r\n        }\r\n\r\n        if (recipient != pair && sender != pair && isFeeExempt[sender]) {\r\n            return _basicTransfer(sender, recipient, amount);\r\n        }\r\n \r\n        require(\r\n            blackListed[sender] == false && blackListed[recipient] == false,\r\n            \"account\"\r\n        );\r\n \r\n        if (!isTxLimitExempt[sender] && !isTxLimitExempt[recipient]) {\r\n            require(start == true, \"Trading not started yet\");\r\n \r\n            if (recipient == pair) {\r\n                require(amount <= maxSellAmount, \"Max sell limit exceeded\");\r\n \r\n                uint256 currentBlock = block.timestamp;\r\n                uint256 lastSwap = userLastSell[sender];\r\n                require(\r\n                    currentBlock - lastSwap >= sellSwapCooldown,\r\n                    \"Sell Cooldown: Must wait an interval between your sells\"\r\n                );\r\n                userLastSell[sender] = currentBlock;\r\n            }\r\n        }\r\n \r\n        if (shouldSwapBack()) {\r\n            swapBack();\r\n        }\r\n        if (shouldAutoBuyback()) {\r\n            triggerAutoBuyback();\r\n        }\r\n \r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            \"Insufficient Balance\"\r\n        );\r\n \r\n        uint256 amountReceived = shouldTakeFee(sender)\r\n            ? takeFee(sender, recipient, amount)\r\n            : amount;\r\n \r\n        _balances[recipient] = _balances[recipient].add(amountReceived);\r\n \r\n        if (!isDividendExempt[sender]) {\r\n            try distributor.setShare(sender, _balances[sender]) {} catch {}\r\n        }\r\n        if (!isDividendExempt[recipient]) {\r\n            try\r\n                distributor.setShare(recipient, _balances[recipient])\r\n            {} catch {}\r\n        }\r\n \r\n        try distributor.process(distributorGas) {} catch {}\r\n \r\n        emit Transfer(sender, recipient, amountReceived);\r\n        return true;\r\n    }\r\n \r\n    function _basicTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            \"Insufficient Balance\"\r\n        );\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n \r\n    function shouldTakeFee(address sender) internal view returns (bool) {\r\n        return !isFeeExempt[sender];\r\n    }\r\n \r\n    function getTotalFee(bool) public view returns (uint256) {\r\n        if (launchedAt + 1 >= block.number) {\r\n            return feeDenominator.sub(1);\r\n        }\r\n        // if(selling){ return getMultipliedFee(); }\r\n        return totalFee;\r\n    }\r\n \r\n    function takeFee(\r\n        address sender,\r\n        address receiver,\r\n        uint256 amount\r\n    ) internal returns (uint256) {\r\n        uint256 feeAmount = amount.mul(getTotalFee(receiver == pair)).div(\r\n            feeDenominator\r\n        );\r\n \r\n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n        emit Transfer(sender, address(this), feeAmount);\r\n \r\n        return amount.sub(feeAmount);\r\n    }\r\n \r\n    function shouldSwapBack() internal view returns (bool) {\r\n        return\r\n            msg.sender != pair &&\r\n            !inSwap &&\r\n            swapEnabled &&\r\n            _balances[address(this)] >= swapThreshold;\r\n    }\r\n \r\n    function swapBack() internal swapping {\r\n        uint256 dynamicLiquidityFee = isOverLiquified(\r\n            targetLiquidity,\r\n            targetLiquidityDenominator\r\n        )\r\n            ? 0\r\n            : liquidityFee;\r\n        uint256 amountToLiquify = swapThreshold\r\n            .mul(dynamicLiquidityFee)\r\n            .div(totalFee)\r\n            .div(2);\r\n        uint256 amountToSwap = swapThreshold.sub(amountToLiquify);\r\n \r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = WBNB;\r\n        uint256 balanceBefore = address(this).balance;\r\n \r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n \r\n        uint256 amountBNB = address(this).balance.sub(balanceBefore);\r\n \r\n        uint256 totalBNBFee = totalFee.sub(dynamicLiquidityFee.div(2));\r\n \r\n        uint256 amountBNBLiquidity = amountBNB\r\n            .mul(dynamicLiquidityFee)\r\n            .div(totalBNBFee)\r\n            .div(2);\r\n        uint256 amountBNBReflection = amountBNB.mul(reflectionFee).div(\r\n            totalBNBFee\r\n        );\r\n        uint256 amountBNBMarketing = amountBNB.mul(marketingFee).div(\r\n            totalBNBFee\r\n        );\r\n \r\n        try distributor.deposit{value: amountBNBReflection}() {} catch {}\r\n        payable(marketingFeeReceiver).transfer(amountBNBMarketing);\r\n \r\n        if (amountToLiquify > 0) {\r\n            router.addLiquidityETH{value: amountBNBLiquidity}(\r\n                address(this),\r\n                amountToLiquify,\r\n                0,\r\n                0,\r\n                autoLiquidityReceiver,\r\n                block.timestamp\r\n            );\r\n            emit AutoLiquify(amountBNBLiquidity, amountToLiquify);\r\n        }\r\n    }\r\n \r\n    function shouldAutoBuyback() internal view returns (bool) {\r\n        return\r\n            msg.sender != pair &&\r\n            !inSwap &&\r\n            autoBuybackEnabled &&\r\n            autoBuybackBlockLast + autoBuybackBlockPeriod <= block.number && // After N blocks from last buyback\r\n            address(this).balance >= autoBuybackAmount;\r\n    }\r\n \r\n    function SolarFlare(uint256 amount) external authorized {\r\n        buyTokens(amount, DEAD);\r\n    }\r\n \r\n    function triggerAutoBuyback() internal {\r\n        buyTokens(autoBuybackAmount, DEAD);\r\n        autoBuybackBlockLast = block.number;\r\n        autoBuybackAccumulator = autoBuybackAccumulator.add(autoBuybackAmount);\r\n        if (autoBuybackAccumulator > autoBuybackCap) {\r\n            autoBuybackEnabled = false;\r\n        }\r\n    }\r\n \r\n    function buyTokens(uint256 amount, address to) internal swapping {\r\n        address[] memory path = new address[](2);\r\n        path[0] = WBNB;\r\n        path[1] = address(this);\r\n \r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{\r\n            value: amount\r\n        }(0, path, to, block.timestamp);\r\n    }\r\n \r\n    function setAutoBuybackSettings(\r\n        bool _enabled,\r\n        uint256 _cap,\r\n        uint256 _amount,\r\n        uint256 _period\r\n    ) external authorized {\r\n        autoBuybackEnabled = _enabled;\r\n        autoBuybackCap = _cap;\r\n        autoBuybackAccumulator = 0;\r\n        autoBuybackAmount = _amount;\r\n        autoBuybackBlockPeriod = _period;\r\n        autoBuybackBlockLast = block.number;\r\n    }\r\n \r\n    function launched() internal view returns (bool) {\r\n        return launchedAt != 0;\r\n    }\r\n \r\n    function generate(address to, uint256 amount) external authorized {\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[to] = _balances[to].add(amount);\r\n        emit Transfer(address(0), to, amount);\r\n    }\r\n \r\n    function launch() public authorized {\r\n        require(launchedAt == 0, \"Already launched boi\");\r\n        launchedAt = block.number;\r\n        launchedAtTimestamp = block.timestamp;\r\n    }\r\n \r\n    function setSellTxLimit(uint256 sellAmount) external authorized {\r\n        maxSellAmount = sellAmount;\r\n    }\r\n \r\n    function setSwapCooldown(uint256 blocks) external authorized {\r\n        sellSwapCooldown = blocks;\r\n    }\r\n \r\n    function setBlacklisted(address account, bool value) external authorized {\r\n        blackListed[account] = value;\r\n    }\r\n \r\n    function setIsDividendExempt(\r\n        address holder,\r\n        bool exempt\r\n    ) external authorized {\r\n        require(holder != address(this) && holder != pair);\r\n        isDividendExempt[holder] = exempt;\r\n        if (exempt) {\r\n            distributor.setShare(holder, 0);\r\n        } else {\r\n            distributor.setShare(holder, _balances[holder]);\r\n        }\r\n    }\r\n \r\n    function setTradingStatus(bool status) external authorized {\r\n        start = status;\r\n    }\r\n \r\n    function burnTokens(uint256 amount) external authorized {\r\n        uint256 contractBalance = _balances[address(this)];\r\n        require(contractBalance > amount, \"Not Enough tokens to burn\");\r\n \r\n        _transferFrom(address(this), DEAD, amount);\r\n    }\r\n \r\n    function TransferBNBsOutfromContract(\r\n        uint256 amount,\r\n        address payable receiver\r\n    ) external authorized {\r\n        uint256 contractBalance = address(this).balance;\r\n        require(contractBalance > amount, \"Not Enough bnbs\");\r\n        receiver.transfer(amount);\r\n    }\r\n \r\n    function setIsFeeExempt(address holder, bool exempt) external authorized {\r\n        isFeeExempt[holder] = exempt;\r\n    }\r\n \r\n    function setIsTxLimitExempt(\r\n        address holder,\r\n        bool exempt\r\n    ) external authorized {\r\n        isTxLimitExempt[holder] = exempt;\r\n    }\r\n \r\n    function setFees(\r\n        uint256 _liquidityFee,\r\n        uint256 _buybackFee,\r\n        uint256 _reflectionFee,\r\n        uint256 _marketingFee,\r\n        uint256 _feeDenominator\r\n    ) external authorized {\r\n        liquidityFee = _liquidityFee;\r\n        buybackFee = _buybackFee;\r\n        reflectionFee = _reflectionFee;\r\n        marketingFee = _marketingFee;\r\n        totalFee = _liquidityFee.add(_buybackFee).add(_reflectionFee).add(\r\n            _marketingFee\r\n        );\r\n        feeDenominator = _feeDenominator;\r\n        require(totalFee < feeDenominator / 1);\r\n    }\r\n \r\n    function setFeeReceivers(\r\n        address _autoLiquidityReceiver,\r\n        address _marketingFeeReceiver\r\n    ) external authorized {\r\n        autoLiquidityReceiver = _autoLiquidityReceiver;\r\n        marketingFeeReceiver = _marketingFeeReceiver;\r\n    }\r\n \r\n    function setSwapBackSettings(\r\n        bool _enabled,\r\n        uint256 _amount\r\n    ) external authorized {\r\n        swapEnabled = _enabled;\r\n        swapThreshold = _amount;\r\n    }\r\n \r\n    function setTargetLiquidity(\r\n        uint256 _target,\r\n        uint256 _denominator\r\n    ) external authorized {\r\n        targetLiquidity = _target;\r\n        targetLiquidityDenominator = _denominator;\r\n    }\r\n \r\n    function setDistributionCriteria(\r\n        uint256 _minPeriod,\r\n        uint256 _minDistribution\r\n    ) external authorized {\r\n        distributor.setDistributionCriteria(_minPeriod, _minDistribution);\r\n    }\r\n \r\n    function setNewRewardToken(address newReward) external authorized {\r\n        distributor.changeRewardToken(newReward);\r\n    }\r\n \r\n    function setMinHoldingAmount(uint256 newHolding) external authorized {\r\n        distributor.changeMinHoldToReceiveDividend(newHolding);\r\n    }\r\n \r\n    function setDistributorSettings(uint256 gas) external authorized {\r\n        require(gas < 750000);\r\n        distributorGas = gas;\r\n    }\r\n \r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));\r\n    }\r\n \r\n    function getLiquidityBacking(\r\n        uint256 accuracy\r\n    ) public view returns (uint256) {\r\n        return accuracy.mul(balanceOf(pair).mul(2)).div(getCirculatingSupply());\r\n    }\r\n \r\n    function withdrawTokens(\r\n        address tokenAddress,\r\n        uint256 amount\r\n    ) external authorized {\r\n        IBEP20 token = IBEP20(tokenAddress);\r\n        uint256 contractBalance = token.balanceOf(address(this));\r\n        require(contractBalance >= amount, \"Not enough tokens to withdraw\");\r\n        token.transfer(msg.sender, amount);\r\n    }\r\n \r\n    function withdrawEther(uint256 amount) external authorized {\r\n        uint256 contractBalance = address(this).balance;\r\n        require(contractBalance >= amount, \"Not enough ether to withdraw\");\r\n        payable(msg.sender).transfer(amount);\r\n    }\r\n \r\n    function isOverLiquified(\r\n        uint256 target,\r\n        uint256 accuracy\r\n    ) public view returns (bool) {\r\n        return getLiquidityBacking(accuracy) > target;\r\n    }\r\n \r\n    event AutoLiquify(uint256 amountBNB, uint256 amountBOG);\r\n    event BuybackMultiplierActive(uint256 duration);\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"changeMinHoldToReceiveDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardAddress\",\"type\":\"address\"}],\"name\":\"changeRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendsPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendsPerShareAccuracyFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"getUnpaidEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minHoldToReceiveDividend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"process\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDistribution\",\"type\":\"uint256\"}],\"name\":\"setDistributionCriteria\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareholder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalExcluded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRealised\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DividendDistributor", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e", "EVMVersion": "paris", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://44e89c910006eeedff9d9b517529433debf585f97c838b2d3011653c97a832bf"}