{"SourceCode": "// File: DynamicSwap-v2-core/contracts/interfaces/IDynamicCallee.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0;\r\n\r\n\r\n\r\ninterface IDynamicCallee {\r\n\r\n    function DynamicCall(address sender, uint amount0, uint amount1, bytes calldata data) external;\r\n\r\n}\r\n\r\n\r\n// File: DynamicSwap-v2-core/contracts/interfaces/IERC20.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0;\r\n\r\n\r\n\r\ninterface IERC20 {\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address owner) external view returns (uint);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n\r\n    function transfer(address to, uint value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n\r\n\r\n    function mint(address to, uint256 amount) external returns (bool);\r\n\r\n}\r\n\r\n\r\n// File: DynamicSwap-v2-core/contracts/libraries/UQ112x112.sol\r\n\r\n\r\n\r\npragma solidity =0.6.12;\r\n\r\n\r\n\r\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\r\n\r\n\r\n\r\n// range: [0, 2**112 - 1]\r\n\r\n// resolution: 1 / 2**112\r\n\r\n\r\n\r\nlibrary UQ112x112 {\r\n\r\n    uint224 constant Q112 = 2**112;\r\n\r\n\r\n\r\n    // encode a uint112 as a UQ112x112\r\n\r\n    function encode(uint112 y) internal pure returns (uint224 z) {\r\n\r\n        z = uint224(y) * Q112; // never overflows\r\n\r\n    }\r\n\r\n\r\n\r\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\r\n\r\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\r\n\r\n        z = x / uint224(y);\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n// File: DynamicSwap-v2-core/contracts/libraries/Math.sol\r\n\r\n\r\n\r\npragma solidity =0.6.12;\r\n\r\n\r\n\r\n// a library for performing various math operations\r\n\r\n\r\n\r\nlibrary Math {\r\n\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n\r\n        z = x < y ? x : y;\r\n\r\n    }\r\n\r\n\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n\r\n    function sqrt(uint y) internal pure returns (uint z) {\r\n\r\n        if (y > 3) {\r\n\r\n            z = y;\r\n\r\n            uint x = y / 2 + 1;\r\n\r\n            while (x < z) {\r\n\r\n                z = x;\r\n\r\n                x = (y / x + x) / 2;\r\n\r\n            }\r\n\r\n        } else if (y != 0) {\r\n\r\n            z = 1;\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n// File: DynamicSwap-v2-core/contracts/interfaces/IDynamicFactory.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0;\r\n\r\n\r\n\r\ninterface IDynamicFactory {\r\n\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n\r\n\r\n    function dynamic() external view returns (address);\r\n\r\n    function WETH() external view returns (address);\r\n\r\n    function uniV2Router() external view returns (address);\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\r\n    function allPairs(uint) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint);\r\n\r\n\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function createPair(\r\n\r\n        address tokenA, \r\n\r\n        address tokenB, \r\n\r\n        uint32[8] calldata _vars, \r\n\r\n        bool isPrivate, // is private pool\r\n\r\n        address protectedToken, // which token should be protected by secure floor, if address(0) then without secure floor\r\n\r\n        uint32[2] memory voteVars // [0] - voting delay, [1] - minimal level for proposal in percentage with 2 decimals i.e. 100 = 1%\r\n\r\n    ) external returns (address pair);\r\n\r\n    \r\n\r\n    //function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n\r\n\r\n\r\n    function mintReward(address to, uint amount) external;\r\n\r\n    function swapFee(address token0, address token1, uint fee0, uint fee1) external returns(bool);\r\n\r\n    function setVars(uint varId, uint32 value) external;\r\n\r\n    function setRouter(address _router) external;\r\n\r\n    function setReimbursementContractAndVault(address _reimbursement, address _vault) external;\r\n\r\n    function claimFee() external returns (uint256);\r\n\r\n    function getColletedFees() external view returns (uint256 feeAmount);\r\n\r\n    function pairImplementation() external view returns (address);\r\n\r\n}\r\n\r\n\r\n// File: DynamicSwap-v2-core/contracts/libraries/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity =0.6.12;\r\n\r\n\r\n\r\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n\r\n        require((z = x + y) >= x, 'ds-math-add-overflow');\r\n\r\n    }\r\n\r\n\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n\r\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\r\n\r\n    }\r\n\r\n\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n\r\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\r\n\r\n    }\r\n\r\n\r\n\r\n    function div(uint x, uint y) internal pure returns (uint z) {\r\n\r\n        z = x/y;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n// File: DynamicSwap-v2-core/contracts/DynamicERC20.sol\r\n\r\n\r\n\r\npragma solidity =0.6.12;\r\n\r\n\r\n\r\n//import './interfaces/IDynamicERC20.sol';\r\n\r\n\r\n\r\n\r\n\r\ncontract DynamicERC20 {\r\n\r\n    using SafeMath for uint;\r\n\r\n\r\n\r\n    address public factory;\r\n\r\n    uint public accumulatedRewardPerShare;\r\n\r\n    mapping(address => uint) public userRewardPerSharePaid;\r\n\r\n    mapping(address => uint) public userEarnedRewards;\r\n\r\n\r\n\r\n    string public name;\r\n\r\n    string public symbol;\r\n\r\n    uint8 public constant decimals = 18;\r\n\r\n    uint  public totalSupply;\r\n\r\n    mapping(address => uint) public balanceOf;\r\n\r\n    mapping(address => mapping(address => uint)) public allowance;\r\n\r\n\r\n\r\n    bytes32 public DOMAIN_SEPARATOR;\r\n\r\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n\r\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\r\n\r\n    mapping(address => uint) public nonces;\r\n\r\n    mapping(address => uint) public locked;   // lock token until end of voting (timestamp)\r\n\r\n\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    event AddReward(uint reward);\r\n\r\n\r\n\r\n    function initialize() internal virtual {\r\n\r\n        uint256 chainId;\r\n\r\n        assembly {\r\n\r\n            chainId := chainid()\r\n\r\n        }\r\n\r\n\r\n\r\n        DOMAIN_SEPARATOR = keccak256(\r\n\r\n            abi.encode(\r\n\r\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\r\n\r\n                keccak256(bytes(name)),\r\n\r\n                keccak256(bytes('1')),\r\n\r\n                chainId,\r\n\r\n                address(this)\r\n\r\n            )\r\n\r\n        );\r\n\r\n        //super.initialize();\r\n\r\n    }\r\n\r\n\r\n\r\n    // add reward tokens into the reward pool (only by factory)\r\n\r\n    function addReward(uint amount) external {\r\n\r\n        require(msg.sender == factory, \"Only factory\");\r\n\r\n        accumulatedRewardPerShare = accumulatedRewardPerShare.add(amount.mul(1e18).div(totalSupply));\r\n\r\n        emit AddReward(amount);\r\n\r\n    }\r\n\r\n\r\n\r\n    // View function to see pending Reward on frontend.\r\n\r\n    function pendingReward(address user) public view returns (uint) {\r\n\r\n        return (balanceOf[user].mul(accumulatedRewardPerShare.sub(userRewardPerSharePaid[user])).div(1e18)).add(userEarnedRewards[user]);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _updateReward(address user, bool shouldPay) internal {\r\n\r\n            uint pendingAmount = pendingReward(user);\r\n\r\n            if (shouldPay && pendingAmount != 0) {\r\n\r\n                userEarnedRewards[user] = 0;\r\n\r\n                IDynamicFactory(factory).mintReward(user, pendingAmount);\r\n\r\n            } else {\r\n\r\n                userEarnedRewards[user] = pendingAmount;\r\n\r\n            }\r\n\r\n            userRewardPerSharePaid[user] = accumulatedRewardPerShare;\r\n\r\n    }\r\n\r\n\r\n\r\n    function _mint(address to, uint value) internal {\r\n\r\n        if (to != address(0)) _updateReward(to, false);\r\n\r\n        totalSupply = totalSupply.add(value);\r\n\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n\r\n        emit Transfer(address(0), to, value);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _burn(address from, uint value) internal {\r\n\r\n        if (from != address(this)) _updateReward(from, false); \r\n\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n\r\n        totalSupply = totalSupply.sub(value);\r\n\r\n        emit Transfer(from, address(0), value);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _approve(address owner, address spender, uint value) private {\r\n\r\n        allowance[owner][spender] = value;\r\n\r\n        emit Approval(owner, spender, value);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _transfer(address from, address to, uint value) internal {\r\n\r\n        require(locked[from] < block.timestamp, \"LP locked until end of voting\");\r\n\r\n        _updateReward(from, true);  // transfer rewards when transfer LP tokens\r\n\r\n        _updateReward(to, false);\r\n\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n\r\n        emit Transfer(from, to, value);\r\n\r\n    }\r\n\r\n\r\n\r\n    function approve(address spender, uint value) external returns (bool) {\r\n\r\n        _approve(msg.sender, spender, value);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function transfer(address to, uint value) external returns (bool) {\r\n\r\n        _transfer(msg.sender, to, value);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function transferFrom(address from, address to, uint value) external returns (bool) {\r\n\r\n        if (value == 0) return true;\r\n\r\n        if (allowance[from][msg.sender] != uint(-1)) {\r\n\r\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\r\n\r\n        }\r\n\r\n        _transfer(from, to, value);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\r\n\r\n        require(deadline >= block.timestamp, 'Dynamic: EXPIRED');\r\n\r\n        bytes32 digest = keccak256(\r\n\r\n            abi.encodePacked(\r\n\r\n                '\\x19\\x01',\r\n\r\n                DOMAIN_SEPARATOR,\r\n\r\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\r\n\r\n            )\r\n\r\n        );\r\n\r\n        address recoveredAddress = ecrecover(digest, v, r, s);\r\n\r\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'Dynamic: INVALID_SIGNATURE');\r\n\r\n        _approve(owner, spender, value);\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n// File: DynamicSwap-v2-core/contracts/DynamicVoting.sol\r\n\r\n\r\n\r\npragma solidity =0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract DynamicVoting is DynamicERC20 {\r\n\r\n    uint256 public votingTime;   // duration of voting\r\n\r\n    uint256 public minimalLevel; // user who has this percentage of token can suggest change (with 2 decimals: 100 = 1%)\r\n\r\n    \r\n\r\n    uint256 public ballotIds;\r\n\r\n    uint256 public rulesIds;\r\n\r\n    \r\n\r\n    enum Status {New , Executed}\r\n\r\n\r\n\r\n    struct Rule {\r\n\r\n        //address contr;      // contract address which have to be triggered\r\n\r\n        uint32 majority;  // require more than this percentage of participants voting power (in according tokens).\r\n\r\n        string funcAbi;     // function ABI (ex. \"transfer(address,uint256)\")\r\n\r\n    }\r\n\r\n\r\n\r\n    struct Ballot {\r\n\r\n        uint256 closeVote; // timestamp when vote will close\r\n\r\n        uint256 ruleId; // rule which edit\r\n\r\n        bytes args; // ABI encoded arguments for proposal which is required to call appropriate function\r\n\r\n        Status status;\r\n\r\n        address creator;    // wallet address of ballot creator.\r\n\r\n        uint256 yea;  // YEA votes according communities (tokens)\r\n\r\n        uint256 totalVotes;  // The total voting power od all participant according communities (tokens)\r\n\r\n    }\r\n\r\n    \r\n\r\n    mapping(address => mapping(uint256 => uint256)) public voted;\r\n\r\n    mapping(uint256 => Ballot) public ballots;\r\n\r\n    mapping(uint256 => Rule) public rules;\r\n\r\n    //event AddRule(address indexed contractAddress, string funcAbi, uint32 majorMain);\r\n\r\n    event ApplyBallot(uint256 indexed ruleId, uint256 indexed ballotId, bytes args);\r\n\r\n    event BallotCreated(uint256 indexed ruleId, uint256 indexed ballotId, bytes args, address creator, uint256 closeVote);\r\n\r\n    event Vote(uint256 ballotId, address voter, bool yea, uint256 voteLP);\r\n\r\n    \r\n\r\n    modifier onlyVoting() {\r\n\r\n        require(address(this) == msg.sender, \"Only voting\");\r\n\r\n        _;        \r\n\r\n    }\r\n\r\n\r\n\r\n    function initialize() internal virtual override {\r\n\r\n        rules[0] = Rule(50,\"setVotingDuration(uint256)\");\r\n\r\n        rules[1] = Rule(50,\"setMinimalLevel(uint256)\");\r\n\r\n        rules[2] = Rule(50,\"setVars(uint256,uint32)\");\r\n\r\n        rules[3] = Rule(50,\"switchToPublic()\");      // switch pool from private to public\r\n\r\n        rulesIds = 3;\r\n\r\n        //votingTime = 1 days;\r\n\r\n        //minimalLevel = 100; // 1%\r\n\r\n        super.initialize();\r\n\r\n    }\r\n\r\n    \r\n\r\n    /**\r\n\r\n     * @dev Add new rule - function that call target contract to change setting.\r\n\r\n        * @param contr The contract address which have to be triggered\r\n\r\n        * @param majority The majority level (%) for the tokens \r\n\r\n        * @param funcAbi The function ABI (ex. \"transfer(address,uint256)\")\r\n\r\n     */\r\n\r\n     /*\r\n\r\n    function addRule(\r\n\r\n        address contr,\r\n\r\n        uint32  majority,\r\n\r\n        string memory funcAbi\r\n\r\n    ) external onlyOwner {\r\n\r\n        require(contr != address(0), \"Zero address\");\r\n\r\n        rulesIds +=1;\r\n\r\n        rules[rulesIds] = Rule(contr, majority, funcAbi);\r\n\r\n        emit AddRule(contr, funcAbi, majority);\r\n\r\n    }\r\n\r\n    */\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Set voting duration\r\n\r\n     * @param time duration in seconds\r\n\r\n    */\r\n\r\n    function setVotingDuration(uint256 time) external onlyVoting {\r\n\r\n        require(time >= 1 days);\r\n\r\n        votingTime = time;\r\n\r\n    }\r\n\r\n    \r\n\r\n    /**\r\n\r\n     * @dev Set minimal level to create proposal\r\n\r\n     * @param level in percentage with 2 decimals. I.e. 1000 = 10%\r\n\r\n    */\r\n\r\n    function setMinimalLevel(uint256 level) external onlyVoting {\r\n\r\n        require(level > 0 && level <= 5100);    // less than 51% and more than 0\r\n\r\n        minimalLevel = level;\r\n\r\n    }\r\n\r\n    \r\n\r\n    /**\r\n\r\n     * @dev Get rules details.\r\n\r\n     * @param ruleId The rules index\r\n\r\n     * @return majority The level of majority in according tokens\r\n\r\n     * @return funcAbi The function Abi (ex. \"transfer(address,uint256)\")\r\n\r\n    */\r\n\r\n    function getRule(uint256 ruleId) external view returns(uint32 majority, string memory funcAbi) {\r\n\r\n        Rule storage r = rules[ruleId];\r\n\r\n        return (r.majority, r.funcAbi);\r\n\r\n    }\r\n\r\n    \r\n\r\n    function _checkMajority(uint32 majority, uint256 _ballotId) internal view returns(bool){\r\n\r\n        Ballot storage b = ballots[_ballotId];\r\n\r\n        if (b.yea * 2 > totalSupply) {\r\n\r\n            return true;\r\n\r\n        }\r\n\r\n        if((b.totalVotes - b.yea) * 2 > totalSupply){\r\n\r\n            return false;\r\n\r\n        }\r\n\r\n        if (block.timestamp >= b.closeVote && b.yea > b.totalVotes * majority / 100) {\r\n\r\n            return true;\r\n\r\n        }\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n\r\n\r\n    function vote(uint256 _ballotId, bool yea) external returns (bool){\r\n\r\n        vote(_ballotId, yea, uint256(2**127));\r\n\r\n    }\r\n\r\n    \r\n\r\n    function vote(uint256 _ballotId, bool yea, uint256 voteLP) public returns (bool){\r\n\r\n        require(_ballotId <= ballotIds, \"ballot ID\");\r\n\r\n        uint256 power = balanceOf[msg.sender];\r\n\r\n        uint256 votedPower = voted[msg.sender][_ballotId];\r\n\r\n        require(votedPower < power, \"already voted\");\r\n\r\n        if (power < voteLP + votedPower) voteLP = power - votedPower;   //if voteLP too big, vote with all available LP\r\n\r\n\r\n\r\n        Ballot storage b = ballots[_ballotId];\r\n\r\n        uint256 closeVote = b.closeVote;\r\n\r\n        require(closeVote > block.timestamp, \"voting closed\");\r\n\r\n        \r\n\r\n        if(yea){\r\n\r\n            b.yea += voteLP;    \r\n\r\n        }\r\n\r\n        b.totalVotes += voteLP;\r\n\r\n        voted[msg.sender][_ballotId] += voteLP;\r\n\r\n        emit Vote(_ballotId, msg.sender, yea, voteLP);\r\n\r\n\r\n\r\n        if(_checkMajority(rules[b.ruleId].majority, _ballotId)) {\r\n\r\n            _executeBallot(_ballotId);\r\n\r\n        } else if (locked[msg.sender] < closeVote) {\r\n\r\n            locked[msg.sender] = closeVote;\r\n\r\n        }\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function createBallot(uint256 ruleId, bytes calldata args, uint256 voteLP) external {\r\n\r\n        require(ruleId <= rulesIds, \"rule ID\");\r\n\r\n        Rule storage r = rules[ruleId];\r\n\r\n        uint256 power = balanceOf[msg.sender];\r\n\r\n        if (power < voteLP) voteLP = power;   //if voteLP too big, vote with all available LP\r\n\r\n\r\n\r\n        require(voteLP >= totalSupply * minimalLevel / 10000, \"minimal Level\");\r\n\r\n        uint256 closeVote = block.timestamp + votingTime;\r\n\r\n        ballotIds += 1;\r\n\r\n        Ballot storage b = ballots[ballotIds];\r\n\r\n        b.ruleId = ruleId;\r\n\r\n        b.args = args;\r\n\r\n        b.creator = msg.sender;\r\n\r\n        b.yea = voteLP;\r\n\r\n        b.totalVotes = voteLP;\r\n\r\n        b.closeVote = closeVote;\r\n\r\n        b.status = Status.New;\r\n\r\n        voted[msg.sender][ballotIds] = voteLP;\r\n\r\n        emit BallotCreated(ruleId, ballotIds, args, msg.sender, closeVote);\r\n\r\n        emit Vote(ballotIds, msg.sender, true, voteLP);\r\n\r\n        \r\n\r\n        if (_checkMajority(r.majority, ballotIds)) {\r\n\r\n            _executeBallot(ballotIds);\r\n\r\n        } else if (locked[msg.sender] < closeVote) {\r\n\r\n            locked[msg.sender] = closeVote;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    \r\n\r\n    function executeBallot(uint256 _ballotId) external {\r\n\r\n        Ballot storage b = ballots[_ballotId];\r\n\r\n        if(_checkMajority(rules[b.ruleId].majority, _ballotId)){\r\n\r\n            _executeBallot(_ballotId);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    \r\n\r\n    \r\n\r\n    /**\r\n\r\n     * @dev Apply changes from ballot.\r\n\r\n     * @param ballotId The ballot index\r\n\r\n     */\r\n\r\n    function _executeBallot(uint256 ballotId) internal {\r\n\r\n        Ballot storage b = ballots[ballotId];\r\n\r\n        require(b.status != Status.Executed,\"Ballot is Executed\");\r\n\r\n        Rule storage r = rules[b.ruleId];\r\n\r\n        bytes memory command = abi.encodePacked(bytes4(keccak256(bytes(r.funcAbi))), b.args);\r\n\r\n        trigger(address(this), command);\r\n\r\n        b.closeVote = block.timestamp;\r\n\r\n        b.status = Status.Executed;\r\n\r\n        emit ApplyBallot(b.ruleId, ballotId, b.args);\r\n\r\n    }\r\n\r\n\r\n\r\n    \r\n\r\n    /**\r\n\r\n     * @dev Apply changes from Governance System. Call destination contract.\r\n\r\n     * @param contr The contract address to call\r\n\r\n     * @param params encoded params\r\n\r\n     */\r\n\r\n    function trigger(address contr, bytes memory params) internal  {\r\n\r\n        (bool success,) = contr.call(params);\r\n\r\n        require(success, \"Trigger error\");\r\n\r\n    }\r\n\r\n}\r\n// File: DynamicSwap-v2-core/contracts/DynamicPair.sol\r\n\r\n\r\n\r\npragma solidity =0.6.12;\r\n\r\n\r\n\r\n//import './interfaces/IDynamicPair.sol';\r\n\r\n\r\n\r\n\r\n\r\n//import './interfaces/IDynamicFactory.sol';\r\n\r\n\r\n\r\n\r\ninterface Ownable {\r\n\r\n    function owner() external view returns(address);\r\n\r\n} \r\n\r\n\r\n\r\n// This contract is implementation of code for pair.\r\n\r\ncontract DynamicPair is DynamicVoting {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    using UQ112x112 for uint224;\r\n\r\n\r\n\r\n    enum Vars {\r\n\r\n        timeFrame,\r\n\r\n        maxDump0,\r\n\r\n        maxDump1,\r\n\r\n        maxTxDump0,\r\n\r\n        maxTxDump1,\r\n\r\n        coefficient,\r\n\r\n        minimalFee,\r\n\r\n        periodMA\r\n\r\n    }\r\n\r\n    uint32[8] public vars; // timeFrame, maxDump0, maxDump1, maxTxDump0, maxTxDump1, coefficient, minimalFee, periodM\r\n\r\n    //timeFrame = 1 days;  // during this time frame rate of reserve1/reserve0 should be in range [baseLinePrice0*(1-maxDump0), baseLinePrice0*(1+maxDump1)]\r\n\r\n    //maxDump0 = 10000;   // maximum allowed dump (in percentage with 2 decimals) of reserve1/reserve0 rate during time frame relatively the baseline\r\n\r\n    //maxDump1 = 10000;   // maximum allowed dump (in percentage with 2 decimals) of reserve0/reserve1 rate during time frame relatively the baseline\r\n\r\n    //maxTxDump0 = 10000; // maximum allowed dump (in percentage with 2 decimals) of token0 price per transaction\r\n\r\n    //maxTxDump1 = 10000; // maximum allowed dump (in percentage with 2 decimals) of token1 price per transaction\r\n\r\n    //coefficient = 10000; // coefficient (in percentage with 2 decimals) to transform price growing into fee. ie\r\n\r\n    //minimalFee = 5;   // Minimal fee percentage (with 2 decimals) applied to transaction. I.e. 5 = 0.05%\r\n\r\n    //periodMA = 45*60;  // MA period in seconds\r\n\r\n\r\n\r\n    uint256 public baseLinePrice0; // base line of reserve1/reserve0 rate saved on beginning of each time frame.\r\n\r\n    uint256 public baseLineLP; // base line of total LP saved on beginning of each time frame.\r\n\r\n    uint256 public lastPeriodCounter; // base line saved at this period number (block.timestamp / timeFrame)\r\n\r\n    uint256 public lastMA; // last MA value\r\n\r\n\r\n\r\n    uint256 public constant MINIMUM_LIQUIDITY = 10**3;\r\n\r\n\r\n\r\n    //address public factory;\r\n\r\n    address public token0;\r\n\r\n    address public token1;\r\n\r\n    bool public isPrivate; // in private pool only LP holder (creator) can add more liquidity\r\n\r\n\r\n\r\n    uint112 private reserve0; // uses single storage slot, accessible via getReserves\r\n\r\n    uint112 private reserve1; // uses single storage slot, accessible via getReserves\r\n\r\n    uint32 private blockTimestampLast; // uses single storage slot, accessible via getReserves\r\n\r\n\r\n\r\n    uint256 public price0CumulativeLast;\r\n\r\n    uint256 public price1CumulativeLast;\r\n\r\n    uint256 public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\r\n\r\n\r\n\r\n    uint256 private unlocked;\r\n\r\n    uint256 creationBlock; // protection from fork using flash loan\r\n\r\n    struct FloorPrice {\r\n\r\n        uint224 floorPrice0; // floor price on pair creation (reserve1/reserve0)\r\n\r\n        uint32 baseToken; // number of base token (0, 1) to check floor pice. If disabled = 2\r\n\r\n    }\r\n\r\n    FloorPrice public floorPrice0;\r\n\r\n\r\n\r\n    struct TaxToken {\r\n\r\n        address token; // token that has tax (address(0) if no tax)\r\n\r\n        address buyTaxReceiver; // address that receive buy tax\r\n\r\n        uint256 buyTax; // tax when buy \"token\" (in percentage with 2 decimals)\r\n\r\n        address sellTaxReceiver; // address that receive sell tax\r\n\r\n        uint256 sellTax; // tax when sell \"token\" (in percentage with 2 decimals)\r\n\r\n    }\r\n\r\n    TaxToken public taxToken;\r\n\r\n\r\n\r\n    modifier lock() {\r\n\r\n        require(unlocked == 1, \"Dynamic: LOCKED\");\r\n\r\n        unlocked = 2;\r\n\r\n        _;\r\n\r\n        unlocked = 1;\r\n\r\n    }\r\n\r\n\r\n\r\n    // returns floor price of baseToken (in another token) with 18 decimals and current base token address.\r\n\r\n    // returns 0 when baseToken does not match with tokens in pair.\r\n\r\n    function getFloorPrice(address baseToken)\r\n\r\n        external\r\n\r\n        view\r\n\r\n        returns (uint256 floorPrice, address currentBaseToken)\r\n\r\n    {\r\n\r\n        floorPrice = (((floorPrice0.floorPrice0 * 1e9) / 2**56) * 1e9) / 2**56; // floor price of token0 with 18 decimals\r\n\r\n        if (floorPrice0.baseToken == 0) currentBaseToken = token0;\r\n\r\n        else if (floorPrice0.baseToken == 1) currentBaseToken = token1;\r\n\r\n        if (baseToken == token1) {\r\n\r\n            floorPrice = 1e36 / floorPrice;\r\n\r\n        } else if (baseToken != token0) {\r\n\r\n            floorPrice = 0;\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    function getReserves()\r\n\r\n        public\r\n\r\n        view\r\n\r\n        returns (\r\n\r\n            uint112 _reserve0,\r\n\r\n            uint112 _reserve1,\r\n\r\n            uint32 _blockTimestampLast\r\n\r\n        )\r\n\r\n    {\r\n\r\n        _reserve0 = reserve0;\r\n\r\n        _reserve1 = reserve1;\r\n\r\n        _blockTimestampLast = blockTimestampLast;\r\n\r\n    }\r\n\r\n\r\n\r\n    function _safeTransfer(\r\n\r\n        address token,\r\n\r\n        address to,\r\n\r\n        uint256 value\r\n\r\n    ) private {\r\n\r\n        (bool success, bytes memory data) = token.call(\r\n\r\n            abi.encodeWithSelector(0xa9059cbb, to, value) // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n\r\n        );\r\n\r\n        require(\r\n\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n\r\n            \"Dynamic: TRANSFER_FAILED\"\r\n\r\n        );\r\n\r\n    }\r\n\r\n\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n\r\n    event Burn(\r\n\r\n        address indexed sender,\r\n\r\n        uint256 amount0,\r\n\r\n        uint256 amount1,\r\n\r\n        address indexed to\r\n\r\n    );\r\n\r\n    event Swap(\r\n\r\n        address indexed sender,\r\n\r\n        uint256 amount0In,\r\n\r\n        uint256 amount1In,\r\n\r\n        uint256 amount0Out,\r\n\r\n        uint256 amount1Out,\r\n\r\n        address indexed to\r\n\r\n    );\r\n\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n\r\n\r\n    // called once by the factory at time of deployment\r\n\r\n    function initialize(\r\n\r\n        address _token0,\r\n\r\n        address _token1,\r\n\r\n        uint32[8] calldata _vars,\r\n\r\n        bool _isPrivate,\r\n\r\n        uint256 baseProtectedToken,\r\n\r\n        uint32[2] memory voteVars\r\n\r\n    ) external {\r\n\r\n        require(address(0) == factory, \"Dynamic: FORBIDDEN\"); // sufficient check\r\n\r\n        unlocked = 1;\r\n\r\n        factory = msg.sender;\r\n\r\n        token0 = _token0;\r\n\r\n        token1 = _token1;\r\n\r\n        vars = _vars;\r\n\r\n        isPrivate = _isPrivate;\r\n\r\n        name = string(\r\n\r\n            abi.encodePacked(\r\n\r\n                IERC20(_token0).symbol(),\r\n\r\n                \"-\",\r\n\r\n                IERC20(_token1).symbol(),\r\n\r\n                \" LP\"\r\n\r\n            )\r\n\r\n        );\r\n\r\n        symbol = name;\r\n\r\n        floorPrice0.baseToken = uint32(baseProtectedToken);\r\n\r\n        votingTime = voteVars[0];\r\n\r\n        minimalLevel = voteVars[1];\r\n\r\n\r\n\r\n        super.initialize();\r\n\r\n    }\r\n\r\n\r\n\r\n    function getAmountOut(\r\n\r\n        uint256 amountIn,\r\n\r\n        address tokenIn,\r\n\r\n        address tokenOut\r\n\r\n    ) external view returns (uint256 amountOut) {\r\n\r\n        (amountOut, ) = getAmountOutAndFee(amountIn, tokenIn, tokenOut);\r\n\r\n    }\r\n\r\n\r\n\r\n    function getAmountOutAndFee(\r\n\r\n        uint256 amountIn,\r\n\r\n        address tokenIn,\r\n\r\n        address tokenOut\r\n\r\n    ) public view returns (uint256 amountOut, uint256 fee) {\r\n\r\n        uint32[8] memory _vars = vars;\r\n\r\n        uint256 balanceIn;\r\n\r\n        uint112 reserveOut = reserve1;\r\n\r\n        uint112 reserveIn = reserve0;\r\n\r\n        uint256 ma;\r\n\r\n        {\r\n\r\n            if(taxToken.token == tokenOut) {\r\n\r\n                // buy token\r\n\r\n                amountIn = amountIn * (10000 - taxToken.buyTax) / 10000;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        {\r\n\r\n            uint32 blockTimestamp = uint32(block.timestamp % 2**32);\r\n\r\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\r\n\r\n            uint256 priceBefore0 = uint256(\r\n\r\n                UQ112x112.encode(reserveOut).uqdiv(reserveIn)\r\n\r\n            );\r\n\r\n            if (timeElapsed >= _vars[uint256(Vars.periodMA)]) ma = priceBefore0;\r\n\r\n            else\r\n\r\n                ma =\r\n\r\n                    ((_vars[uint256(Vars.periodMA)] - timeElapsed) *\r\n\r\n                        lastMA +\r\n\r\n                        priceBefore0 *\r\n\r\n                        timeElapsed) /\r\n\r\n                    _vars[uint256(Vars.periodMA)];\r\n\r\n        }\r\n\r\n        {\r\n\r\n            amountOut = amountIn.mul(_vars[uint256(Vars.coefficient)]) / 10000; // reuse amountOut\r\n\r\n            uint256 b;\r\n\r\n            uint256 c;\r\n\r\n            ma = ma / 2**56;\r\n\r\n            {\r\n\r\n                uint256 k = uint256(reserveIn).mul(reserveOut); // / denominator;\r\n\r\n                uint256 denominator = _getDenominator(k);\r\n\r\n                k = k / denominator;\r\n\r\n                if (tokenIn < tokenOut) {\r\n\r\n                    balanceIn = amountIn.add(reserveIn);\r\n\r\n                    b = balanceIn.mul(ma) / 2**56;\r\n\r\n                    b = b.mul(balanceIn.sub(amountOut));\r\n\r\n                    b = b / denominator;\r\n\r\n                    //b = (uint(reserveIn).mul(ma) / 2**56).mul(balanceIn) / denominator;\r\n\r\n                    c = (k.mul(ma) / 2**56).mul(balanceIn);\r\n\r\n                } else {\r\n\r\n                    (reserveIn, reserveOut) = (reserveOut, reserveIn);\r\n\r\n                    balanceIn = amountIn.add(reserveIn);\r\n\r\n                    b = balanceIn.mul(2**56) / ma;\r\n\r\n                    b = b.mul(balanceIn.sub(amountOut));\r\n\r\n                    b = b / denominator;\r\n\r\n                    //b = (uint(reserveIn).mul(2**56) / ma).mul(balanceIn) / denominator;\r\n\r\n                    c = (k.mul(2**56) / ma).mul(balanceIn);\r\n\r\n                }\r\n\r\n\r\n\r\n                if (amountOut != 0) {\r\n\r\n                    c = c / denominator;\r\n\r\n                    fee = sqrt(b.mul(b).add(c.mul(amountOut * 4)));\r\n\r\n                    amountOut = (fee.sub(b).mul(denominator)) / (amountOut * 2);\r\n\r\n                } else {\r\n\r\n                    amountOut = c / b;\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n\r\n\r\n        // amountOut = balanceOut\r\n\r\n        if (tokenIn < tokenOut) {\r\n\r\n            fee = amountOut.mul(10000).mul(2**56) / (balanceIn.mul(ma));\r\n\r\n        } else {\r\n\r\n            fee = amountOut.mul(10000).mul(ma) / (balanceIn.mul(2**56));\r\n\r\n        }\r\n\r\n        fee = fee < 10000 ? 10000 - fee : 0;\r\n\r\n        amountOut = uint256(reserveOut).sub(amountOut);\r\n\r\n\r\n\r\n        if (fee < _vars[uint256(Vars.minimalFee)]) {\r\n\r\n            fee = _vars[uint256(Vars.minimalFee)];\r\n\r\n        }\r\n\r\n        if (fee == _vars[uint256(Vars.minimalFee)] || amountIn < 1e14) {\r\n\r\n            uint256 amountInWithFee = amountIn.mul(10000 - fee);\r\n\r\n            uint256 numerator = amountInWithFee.mul(reserveOut);\r\n\r\n            uint256 denominator = uint256(reserveIn).mul(10000).add(\r\n\r\n                amountInWithFee\r\n\r\n            );\r\n\r\n            amountOut = numerator / denominator;\r\n\r\n        }\r\n\r\n        {\r\n\r\n            if(taxToken.token == tokenIn) {\r\n\r\n                // sell token\r\n\r\n                amountOut = amountOut * (10000 - taxToken.sellTax) / 10000;\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    function getAmountIn(\r\n\r\n        uint256 amountOut,\r\n\r\n        address tokenIn,\r\n\r\n        address tokenOut\r\n\r\n    ) external view returns (uint256 amountIn) {\r\n\r\n        (amountIn, ) = getAmountInAndFee(amountOut, tokenIn, tokenOut);\r\n\r\n    }\r\n\r\n\r\n\r\n    function getAmountInAndFee(\r\n\r\n        uint256 amountOut,\r\n\r\n        address tokenIn,\r\n\r\n        address tokenOut\r\n\r\n    ) public view returns (uint256 amountIn, uint256 fee) {\r\n\r\n        uint32[8] memory _vars = vars;\r\n\r\n        uint256 ma;\r\n\r\n        uint112 reserveIn = reserve0;\r\n\r\n        uint112 reserveOut = reserve1;\r\n\r\n        uint256 balanceOut;\r\n\r\n        {\r\n\r\n            if(taxToken.token == tokenIn) {\r\n\r\n                // sell token\r\n\r\n                amountOut = amountOut * 10000 / (10000 - taxToken.sellTax) + 1;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        {\r\n\r\n            {\r\n\r\n                uint32 blockTimestamp = uint32(block.timestamp % 2**32);\r\n\r\n                uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\r\n\r\n                uint256 priceBefore0 = uint256(\r\n\r\n                    UQ112x112.encode(reserveOut).uqdiv(reserveIn)\r\n\r\n                );\r\n\r\n                if (timeElapsed >= _vars[uint256(Vars.periodMA)])\r\n\r\n                    ma = priceBefore0;\r\n\r\n                else\r\n\r\n                    ma =\r\n\r\n                        ((_vars[uint256(Vars.periodMA)] - timeElapsed) *\r\n\r\n                            lastMA +\r\n\r\n                            priceBefore0 *\r\n\r\n                            timeElapsed) /\r\n\r\n                        _vars[uint256(Vars.periodMA)];\r\n\r\n            }\r\n\r\n            uint256 b;\r\n\r\n            uint256 c;\r\n\r\n            uint256 denominator;\r\n\r\n            ma = ma / 2**56;\r\n\r\n            {\r\n\r\n                if (tokenIn < tokenOut) {\r\n\r\n                    balanceOut = uint256(reserveOut).sub(amountOut);\r\n\r\n                    fee = uint256(reserveIn).mul(ma) / 2**56;\r\n\r\n                    amountIn =\r\n\r\n                        balanceOut.mul(\r\n\r\n                            10000 - _vars[uint256(Vars.coefficient)]\r\n\r\n                        ) /\r\n\r\n                        10000;\r\n\r\n                    amountIn = amountIn.mul(ma) / 2**56; // reuse amountIn\r\n\r\n                } else {\r\n\r\n                    (reserveIn, reserveOut) = (reserveOut, reserveIn);\r\n\r\n                    balanceOut = uint256(reserveOut).sub(amountOut);\r\n\r\n                    fee = uint256(reserveIn).mul(2**56) / ma; // reuse fee\r\n\r\n                    amountIn =\r\n\r\n                        balanceOut.mul(\r\n\r\n                            10000 - _vars[uint256(Vars.coefficient)]\r\n\r\n                        ) /\r\n\r\n                        10000;\r\n\r\n                    amountIn = amountIn.mul(2**56) / ma; // reuse amountIn\r\n\r\n                }\r\n\r\n                b =\r\n\r\n                    fee.mul(balanceOut).mul(\r\n\r\n                        20000 - _vars[uint256(Vars.coefficient)]\r\n\r\n                    ) /\r\n\r\n                    10000;\r\n\r\n                denominator = _getDenominator(b);\r\n\r\n                b = b.add(\r\n\r\n                    (balanceOut.mul(_vars[uint256(Vars.coefficient)]) / 10000)\r\n\r\n                        .mul(balanceOut)\r\n\r\n                );\r\n\r\n                b = b.sub(fee.mul(reserveOut));\r\n\r\n                b = b / denominator;\r\n\r\n\r\n\r\n                c = fee.mul(reserveIn) / denominator;\r\n\r\n                c = c.mul(amountOut);\r\n\r\n            }\r\n\r\n            if (amountIn != 0) {\r\n\r\n                c = c / denominator;\r\n\r\n                fee = sqrt(b.mul(b).add(c.mul(amountIn * 4)));\r\n\r\n                amountIn = (fee.sub(b).mul(denominator)) / (amountIn * 2);\r\n\r\n            } else {\r\n\r\n                amountIn = c / b;\r\n\r\n            }\r\n\r\n        }\r\n\r\n\r\n\r\n        {\r\n\r\n            uint256 balanceIn = amountIn.add(reserveIn);\r\n\r\n            if (tokenIn < tokenOut) {\r\n\r\n                fee = balanceOut.mul(10000 * 2**56) / (balanceIn.mul(ma));\r\n\r\n            } else {\r\n\r\n                fee = balanceOut.mul(10000 * ma) / (balanceIn.mul(2**56));\r\n\r\n            }\r\n\r\n            fee = fee < 10000 ? 10000 - fee : 0;\r\n\r\n\r\n\r\n            if (fee < _vars[uint256(Vars.minimalFee)]) {\r\n\r\n                fee = _vars[uint256(Vars.minimalFee)];\r\n\r\n                uint256 numerator = uint256(reserveIn).mul(amountOut).mul(\r\n\r\n                    10000\r\n\r\n                );\r\n\r\n                uint256 denominator = uint256(reserveOut).sub(amountOut).mul(\r\n\r\n                    10000 - fee\r\n\r\n                );\r\n\r\n                amountIn = (numerator / denominator).add(1);\r\n\r\n            }\r\n\r\n        }\r\n\r\n        {\r\n\r\n            if(taxToken.token == tokenOut) {\r\n\r\n                // buy token\r\n\r\n                amountIn = amountIn * 10000 / (10000 - taxToken.sellTax) + 1;\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    function _getFeeAndDumpProtection(\r\n\r\n        uint256 balance0,\r\n\r\n        uint256 balance1,\r\n\r\n        uint112 _reserve0,\r\n\r\n        uint112 _reserve1\r\n\r\n    ) private returns (uint256 fee0, uint256 fee1) {\r\n\r\n        uint256 priceBefore0 = uint256(\r\n\r\n            UQ112x112.encode(_reserve1).uqdiv(_reserve0)\r\n\r\n        );\r\n\r\n        uint256 priceAfter0 = uint256(\r\n\r\n            UQ112x112.encode(uint112(balance1)).uqdiv(uint112(balance0))\r\n\r\n        );\r\n\r\n        uint32[8] memory _vars = vars;\r\n\r\n        {\r\n\r\n            // check transaction dump range\r\n\r\n            require(\r\n\r\n                (priceAfter0 * 10000) / priceBefore0 >=\r\n\r\n                    (uint256(10000).sub(_vars[uint256(Vars.maxTxDump0)])) &&\r\n\r\n                    (priceBefore0 * 10000) / priceAfter0 >=\r\n\r\n                    (uint256(10000).sub(_vars[uint256(Vars.maxTxDump1)])),\r\n\r\n                \"Slippage out of range\"\r\n\r\n            );\r\n\r\n            // update base line price\r\n\r\n            uint256 _baseLinePrice0 = block.timestamp /\r\n\r\n                _vars[uint256(Vars.timeFrame)]; // reuse variable\r\n\r\n            if (_baseLinePrice0 != lastPeriodCounter) {\r\n\r\n                //new time frame\r\n\r\n                lastPeriodCounter = _baseLinePrice0;\r\n\r\n                baseLinePrice0 = priceBefore0; // current price\r\n\r\n                _baseLinePrice0 = priceBefore0;\r\n\r\n            } else {\r\n\r\n                _baseLinePrice0 = baseLinePrice0;\r\n\r\n            }\r\n\r\n            // check time frame dump range\r\n\r\n\r\n\r\n            if (_baseLinePrice0 != 0)\r\n\r\n                require(\r\n\r\n                    (priceAfter0 * 10000) / _baseLinePrice0 >=\r\n\r\n                        (uint256(10000).sub(_vars[uint256(Vars.maxDump0)])) &&\r\n\r\n                        (_baseLinePrice0 * 10000) / priceAfter0 >=\r\n\r\n                        (uint256(10000).sub(_vars[uint256(Vars.maxDump1)])),\r\n\r\n                    \"Slippage out of TF range\"\r\n\r\n                );\r\n\r\n        }\r\n\r\n        // check floor price\r\n\r\n        {\r\n\r\n            FloorPrice memory _floorPrice0 = floorPrice0;\r\n\r\n            if (_floorPrice0.baseToken == 0) {\r\n\r\n                require(\r\n\r\n                    priceAfter0 >= priceBefore0 || // allow to buy token0\r\n\r\n                        priceAfter0 >= _floorPrice0.floorPrice0, // or token0 price should be not less than floor price\r\n\r\n                    \"Price bellow floor\"\r\n\r\n                );\r\n\r\n            } else if (_floorPrice0.baseToken == 1) {\r\n\r\n                require(\r\n\r\n                    priceAfter0 <= priceBefore0 || // allow to buy token1\r\n\r\n                        priceAfter0 <= _floorPrice0.floorPrice0, // or token1 price should be not less than floor price\r\n\r\n                    \"Price bellow floor\"\r\n\r\n                );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        {\r\n\r\n            // ma = ((periodMA - timeElapsed)*lastMA + lastPrice*timeElapsed) / periodMA\r\n\r\n            uint32 timeElapsed = uint32(block.timestamp % 2**32) -\r\n\r\n                blockTimestampLast; // overflow is desired\r\n\r\n            uint256 ma;\r\n\r\n            if (timeElapsed >= _vars[uint256(Vars.periodMA)]) ma = priceBefore0;\r\n\r\n            else\r\n\r\n                ma =\r\n\r\n                    ((_vars[uint256(Vars.periodMA)] - timeElapsed) *\r\n\r\n                        lastMA +\r\n\r\n                        priceBefore0 *\r\n\r\n                        timeElapsed) /\r\n\r\n                    _vars[uint256(Vars.periodMA)];\r\n\r\n            lastMA = ma;\r\n\r\n            fee0 = (priceAfter0 * 10000) / ma;\r\n\r\n\r\n\r\n            // fee should be less than 1\r\n\r\n            if (fee0 == 10000) fee0--;\r\n\r\n            fee1 = fee0 > 10000\r\n\r\n                ? ((9999 - 100000000 / fee0) *\r\n\r\n                    _vars[uint256(Vars.coefficient)]) / 10000\r\n\r\n                : _vars[uint256(Vars.minimalFee)];\r\n\r\n            fee0 = fee0 < 10000\r\n\r\n                ? ((9999 - fee0) * _vars[uint256(Vars.coefficient)]) / 10000\r\n\r\n                : _vars[uint256(Vars.minimalFee)];\r\n\r\n            if (fee1 < _vars[uint256(Vars.minimalFee)])\r\n\r\n                fee1 = _vars[uint256(Vars.minimalFee)];\r\n\r\n            if (fee0 < _vars[uint256(Vars.minimalFee)])\r\n\r\n                fee0 = _vars[uint256(Vars.minimalFee)];\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    function _getDenominator(uint256 v)\r\n\r\n        internal\r\n\r\n        pure\r\n\r\n        returns (uint256 denominator)\r\n\r\n    {\r\n\r\n        if (v > 1e54) denominator = 1e27;\r\n\r\n        else if (v > 1e36) denominator = 1e18;\r\n\r\n        else denominator = 1e9;\r\n\r\n    }\r\n\r\n\r\n\r\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\r\n\r\n        if (y > 3) {\r\n\r\n            z = y;\r\n\r\n            uint256 x = y / 2 + 1;\r\n\r\n            while (x < z) {\r\n\r\n                z = x;\r\n\r\n                x = (y / x + x) / 2;\r\n\r\n            }\r\n\r\n        } else if (y != 0) {\r\n\r\n            z = 1;\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    // update reserves and, on the first call per block, price accumulators\r\n\r\n    function _update(\r\n\r\n        uint256 balance0,\r\n\r\n        uint256 balance1,\r\n\r\n        uint112 _reserve0,\r\n\r\n        uint112 _reserve1\r\n\r\n    ) private {\r\n\r\n        require(\r\n\r\n            balance0 <= uint112(-1) && balance1 <= uint112(-1),\r\n\r\n            \"Dynamic: OVERFLOW\"\r\n\r\n        );\r\n\r\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\r\n\r\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\r\n\r\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\r\n\r\n            // * never overflows, and + overflow is desired\r\n\r\n            price0CumulativeLast +=\r\n\r\n                uint256(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) *\r\n\r\n                timeElapsed;\r\n\r\n            price1CumulativeLast +=\r\n\r\n                uint256(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) *\r\n\r\n                timeElapsed;\r\n\r\n        }\r\n\r\n        reserve0 = uint112(balance0);\r\n\r\n        reserve1 = uint112(balance1);\r\n\r\n        blockTimestampLast = blockTimestamp;\r\n\r\n        emit Sync(reserve0, reserve1);\r\n\r\n    }\r\n\r\n\r\n\r\n    /*\r\n\r\n    // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\r\n\r\n    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {\r\n\r\n        address feeTo = IDynamicFactory(factory).feeTo();\r\n\r\n        feeOn = feeTo != address(0);\r\n\r\n        uint _kLast = kLast; // gas savings\r\n\r\n        if (feeOn) {\r\n\r\n            if (_kLast != 0) {\r\n\r\n                uint rootK = Math.sqrt(uint(_reserve0).mul(_reserve1));\r\n\r\n                uint rootKLast = Math.sqrt(_kLast);\r\n\r\n                if (rootK > rootKLast) {\r\n\r\n                    uint numerator = totalSupply.mul(rootK.sub(rootKLast));\r\n\r\n                    uint denominator = rootK.mul(5).add(rootKLast);\r\n\r\n                    uint liquidity = numerator / denominator;\r\n\r\n                    if (liquidity > 0) _mint(feeTo, liquidity);\r\n\r\n                }\r\n\r\n            }\r\n\r\n        } else if (_kLast != 0) {\r\n\r\n            kLast = 0;\r\n\r\n        }\r\n\r\n    }\r\n\r\n*/\r\n\r\n    // this low-level function should be called from a contract which performs important safety checks\r\n\r\n    function mint(address to) external lock returns (uint256 liquidity) {\r\n\r\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\r\n\r\n        uint256 balance0 = IERC20(token0).balanceOf(address(this));\r\n\r\n        uint256 balance1 = IERC20(token1).balanceOf(address(this));\r\n\r\n        uint256 amount0 = balance0.sub(_reserve0);\r\n\r\n        uint256 amount1 = balance1.sub(_reserve1);\r\n\r\n\r\n\r\n        //bool feeOn = _mintFee(_reserve0, _reserve1);\r\n\r\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\r\n\r\n        if (_totalSupply == 0) {\r\n\r\n            uint256 priceBefore0 = uint256(\r\n\r\n                UQ112x112.encode(uint112(balance1)).uqdiv(uint112(balance0))\r\n\r\n            );\r\n\r\n            lastMA = priceBefore0;\r\n\r\n            baseLinePrice0 = priceBefore0;\r\n\r\n            if (floorPrice0.baseToken != 2)\r\n\r\n                floorPrice0.floorPrice0 = uint224(priceBefore0); // set floor price (balance1/balance0)\r\n\r\n            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\r\n\r\n            _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\r\n\r\n            creationBlock = block.number; // protection from forking pool using flash loan\r\n\r\n        } else {\r\n\r\n            require(!isPrivate || balanceOf[to] != 0, \"Private pool\");\r\n\r\n            liquidity = Math.min(\r\n\r\n                amount0.mul(_totalSupply) / _reserve0,\r\n\r\n                amount1.mul(_totalSupply) / _reserve1\r\n\r\n            );\r\n\r\n        }\r\n\r\n        require(liquidity > 0, \"Dynamic: INSUFFICIENT_LIQUIDITY_MINTED\");\r\n\r\n        uint256 last = block.timestamp / vars[uint256(Vars.timeFrame)];\r\n\r\n        if (last != lastPeriodCounter) {\r\n\r\n            //new time frame\r\n\r\n            baseLineLP = totalSupply;\r\n\r\n            lastPeriodCounter = last;\r\n\r\n        }\r\n\r\n        _mint(to, liquidity);\r\n\r\n        _update(balance0, balance1, _reserve0, _reserve1);\r\n\r\n        //if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\r\n\r\n        emit Mint(msg.sender, amount0, amount1);\r\n\r\n    }\r\n\r\n\r\n\r\n    // burn msg.sender LP tokens (use in case pool is not active and LP can't be removed form router)\r\n\r\n    function burnLP(uint256 value) external {\r\n\r\n        _transfer(msg.sender, address(this), value);\r\n\r\n        burn(msg.sender);\r\n\r\n    }\r\n\r\n\r\n\r\n    // this low-level function should be called from a contract which performs important safety checks\r\n\r\n    function burn(address to)\r\n\r\n        public\r\n\r\n        lock\r\n\r\n        returns (uint256 amount0, uint256 amount1)\r\n\r\n    {\r\n\r\n        require(creationBlock != block.number); // protection from fork using flash loan\r\n\r\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\r\n\r\n        address _token0 = token0; // gas savings\r\n\r\n        address _token1 = token1; // gas savings\r\n\r\n        uint256 balance0 = IERC20(_token0).balanceOf(address(this));\r\n\r\n        uint256 balance1 = IERC20(_token1).balanceOf(address(this));\r\n\r\n        uint256 liquidity = balanceOf[address(this)];\r\n\r\n        //bool feeOn = _mintFee(_reserve0, _reserve1);\r\n\r\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\r\n\r\n        uint32[8] memory _vars = vars;\r\n\r\n        uint256 last = block.timestamp / _vars[uint256(Vars.timeFrame)];\r\n\r\n        if (last != lastPeriodCounter) {\r\n\r\n            //new time frame\r\n\r\n            baseLineLP = totalSupply;\r\n\r\n            lastPeriodCounter = last;\r\n\r\n        }\r\n\r\n        // select lowest slippage (maxTxDump) per transaction\r\n\r\n        _vars[uint256(Vars.maxTxDump0)] = _vars[uint256(Vars.maxTxDump0)] <\r\n\r\n            _vars[uint256(Vars.maxTxDump1)]\r\n\r\n            ? _vars[uint256(Vars.maxTxDump0)]\r\n\r\n            : _vars[uint256(Vars.maxTxDump1)];\r\n\r\n        require(\r\n\r\n            (baseLineLP * 10000) / (_totalSupply - liquidity) >=\r\n\r\n                (10000 - _vars[uint256(Vars.maxTxDump0)]),\r\n\r\n            \"TX limit exceeded\"\r\n\r\n        );\r\n\r\n        // select lowest slippage (maxDump) per per day\r\n\r\n        _vars[uint256(Vars.maxDump0)] = _vars[uint256(Vars.maxDump0)] <\r\n\r\n            _vars[uint256(Vars.maxDump1)]\r\n\r\n            ? _vars[uint256(Vars.maxDump0)]\r\n\r\n            : _vars[uint256(Vars.maxDump1)];\r\n\r\n        require(\r\n\r\n            (baseLineLP * 10000) / (_totalSupply - liquidity) >=\r\n\r\n                (10000 - _vars[uint256(Vars.maxDump0)]),\r\n\r\n            \"Day limit exceeded\"\r\n\r\n        );\r\n\r\n\r\n\r\n        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\r\n\r\n        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\r\n\r\n        require(\r\n\r\n            amount0 > 0 && amount1 > 0,\r\n\r\n            \"Dynamic: INSUFFICIENT_LIQUIDITY_BURNED\"\r\n\r\n        );\r\n\r\n        _burn(address(this), liquidity);\r\n\r\n        _safeTransfer(_token0, to, amount0);\r\n\r\n        _safeTransfer(_token1, to, amount1);\r\n\r\n        balance0 = IERC20(_token0).balanceOf(address(this));\r\n\r\n        balance1 = IERC20(_token1).balanceOf(address(this));\r\n\r\n\r\n\r\n        _update(balance0, balance1, _reserve0, _reserve1);\r\n\r\n        //if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\r\n\r\n        emit Burn(msg.sender, amount0, amount1, to);\r\n\r\n    }\r\n\r\n\r\n\r\n    // this low-level function should be called from a contract which performs important safety checks\r\n\r\n    function swap(\r\n\r\n        uint256 amount0Out,\r\n\r\n        uint256 amount1Out,\r\n\r\n        address to,\r\n\r\n        bytes calldata data\r\n\r\n    ) external lock {\r\n\r\n        require(\r\n\r\n            amount0Out > 0 || amount1Out > 0,\r\n\r\n            \"Dynamic: INSUFFICIENT_OUTPUT_AMOUNT\"\r\n\r\n        );\r\n\r\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\r\n\r\n        require(\r\n\r\n            amount0Out < _reserve0 && amount1Out < _reserve1,\r\n\r\n            \"Dynamic: INSUFFICIENT_LIQUIDITY\"\r\n\r\n        );\r\n\r\n\r\n\r\n        uint256 balance0;\r\n\r\n        uint256 balance1;\r\n\r\n        {\r\n\r\n            // scope for _token{0,1}, avoids stack too deep errors\r\n\r\n            address _token0 = token0;\r\n\r\n            address _token1 = token1;\r\n\r\n            require(to != _token0 && to != _token1, \"Dynamic: INVALID_TO\");\r\n\r\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\r\n\r\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\r\n\r\n            if (data.length > 0)\r\n\r\n                IDynamicCallee(to).DynamicCall(\r\n\r\n                    msg.sender,\r\n\r\n                    amount0Out,\r\n\r\n                    amount1Out,\r\n\r\n                    data\r\n\r\n                );\r\n\r\n            balance0 = IERC20(_token0).balanceOf(address(this));\r\n\r\n            balance1 = IERC20(_token1).balanceOf(address(this));\r\n\r\n        }\r\n\r\n        uint256 amount0In = balance0 > _reserve0 - amount0Out\r\n\r\n            ? balance0 - (_reserve0 - amount0Out)\r\n\r\n            : 0;\r\n\r\n        uint256 amount1In = balance1 > _reserve1 - amount1Out\r\n\r\n            ? balance1 - (_reserve1 - amount1Out)\r\n\r\n            : 0;\r\n\r\n        require(\r\n\r\n            amount0In > 0 || amount1In > 0,\r\n\r\n            \"Dynamic: INSUFFICIENT_INPUT_AMOUNT\"\r\n\r\n        );\r\n\r\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\r\n\r\n        {\r\n\r\n            uint256 tax;\r\n\r\n            address pairToken;\r\n\r\n            address taxReceiver;\r\n\r\n            //get token transfer tax\r\n\r\n            if (token0 == taxToken.token) {\r\n\r\n                if (amount0In == 0) {\r\n\r\n                    //buy token\r\n\r\n                    tax = amount1In * taxToken.buyTax / 10000;\r\n\r\n                    taxReceiver = taxToken.buyTaxReceiver;\r\n\r\n                    amount1In = amount1In.sub(tax);\r\n\r\n                } else {\r\n\r\n                    // sell token\r\n\r\n                    tax = amount1Out * 10000 / (10000 - taxToken.sellTax);\r\n\r\n                    taxReceiver = taxToken.sellTaxReceiver;\r\n\r\n                }\r\n\r\n                pairToken = token1;\r\n\r\n                balance1 = balance1.sub(tax);\r\n\r\n            } else if (token1 == taxToken.token) {\r\n\r\n                if (amount1In == 0) {\r\n\r\n                    //buy token\r\n\r\n                    tax = amount0In * taxToken.buyTax / 10000;\r\n\r\n                    taxReceiver = taxToken.buyTaxReceiver;\r\n\r\n                    amount0In = amount0In.sub(tax);\r\n\r\n                } else {\r\n\r\n                    // sell token\r\n\r\n                    tax = amount0Out * 10000 / (10000 - taxToken.sellTax);\r\n\r\n                    taxReceiver = taxToken.sellTaxReceiver;\r\n\r\n                }\r\n\r\n                pairToken = token0;\r\n\r\n                balance0 = balance0.sub(tax);\r\n\r\n            }\r\n\r\n            if (tax != 0) _safeTransfer(pairToken, taxReceiver, tax); // transfer tax\r\n\r\n        }\r\n\r\n        {\r\n\r\n            // scope for reserve{0,1}Adjusted, avoids stack too deep errors\r\n\r\n            uint256 fee0;\r\n\r\n            uint256 fee1;\r\n\r\n            address _token0 = token0;\r\n\r\n            address _token1 = token1;\r\n\r\n            if (to != factory) {\r\n\r\n                // avoid endless loop of fee swapping\r\n\r\n                (fee0, fee1) = _getFeeAndDumpProtection(\r\n\r\n                    balance0,\r\n\r\n                    balance1,\r\n\r\n                    _reserve0,\r\n\r\n                    _reserve1\r\n\r\n                );\r\n\r\n                if (amount0In != 0) {\r\n\r\n                    fee1 = amount0In.mul(fee0) / 10000; // fee by calculation\r\n\r\n                    fee0 = balance0.sub(\r\n\r\n                        (uint256(_reserve0) * uint256(_reserve1)) / balance1 + 1\r\n\r\n                    );\r\n\r\n                    require(fee0 >= fee1, \"fee0 lower\");\r\n\r\n                    if (_token0 == IDynamicFactory(factory).WETH()) {\r\n\r\n                        fee1 = 0; // take fee in token0 (tokenIn)\r\n\r\n                    } else {\r\n\r\n                        //take fee in token1 (tokenOut) by default\r\n\r\n                        fee1 = balance1.sub(\r\n\r\n                            (uint256(_reserve0) * uint256(_reserve1)) /\r\n\r\n                                balance0 +\r\n\r\n                                1\r\n\r\n                        );\r\n\r\n                        fee0 = 0;\r\n\r\n                    }\r\n\r\n                } else if (amount1In != 0) {\r\n\r\n                    fee0 = amount1In.mul(fee1) / 10000; // fee by calculation\r\n\r\n                    fee1 = balance1.sub(\r\n\r\n                        (uint256(_reserve0) * uint256(_reserve1)) / balance0 + 1\r\n\r\n                    );\r\n\r\n                    require(fee1 >= fee0, \"fee1 lower\");\r\n\r\n                    if (_token1 == IDynamicFactory(factory).WETH()) {\r\n\r\n                        fee0 = 0; // take fee in token1 (tokenIn)\r\n\r\n                    } else {\r\n\r\n                        //take fee in token0 (tokenOut) by default\r\n\r\n                        fee0 = balance0.sub(\r\n\r\n                            (uint256(_reserve0) * uint256(_reserve1)) /\r\n\r\n                                balance1 +\r\n\r\n                                1\r\n\r\n                        );\r\n\r\n                        fee1 = 0;\r\n\r\n                    }\r\n\r\n                }\r\n\r\n                if (fee0 > 0) IERC20(_token0).approve(factory, fee0);\r\n\r\n                if (fee1 > 0) IERC20(_token1).approve(factory, fee1);\r\n\r\n                IDynamicFactory(factory).swapFee(_token0, _token1, fee0, fee1);\r\n\r\n            }\r\n\r\n            //uint balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3));\r\n\r\n            //uint balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3));\r\n\r\n            require(\r\n\r\n                (balance0.sub(fee0)).mul(balance1.sub(fee1)) >=\r\n\r\n                    uint256(_reserve0).mul(_reserve1),\r\n\r\n                \"Dynamic: K\"\r\n\r\n            );\r\n\r\n            //_update(IERC20(_token0).balanceOf(address(this)), IERC20(_token1).balanceOf(address(this)), _reserve0, _reserve1);\r\n\r\n            if (fee0 > 0) balance0 = IERC20(_token0).balanceOf(address(this));\r\n\r\n            if (fee1 > 0) balance1 = IERC20(_token1).balanceOf(address(this));\r\n\r\n        }\r\n\r\n        _update(balance0, balance1, _reserve0, _reserve1);\r\n\r\n    }\r\n\r\n\r\n\r\n    // force balances to match reserves\r\n\r\n    function skim(address to) external lock {\r\n\r\n        address _token0 = token0; // gas savings\r\n\r\n        address _token1 = token1; // gas savings\r\n\r\n        _safeTransfer(\r\n\r\n            _token0,\r\n\r\n            to,\r\n\r\n            IERC20(_token0).balanceOf(address(this)).sub(reserve0)\r\n\r\n        );\r\n\r\n        _safeTransfer(\r\n\r\n            _token1,\r\n\r\n            to,\r\n\r\n            IERC20(_token1).balanceOf(address(this)).sub(reserve1)\r\n\r\n        );\r\n\r\n    }\r\n\r\n\r\n\r\n    // force reserves to match balances\r\n\r\n    function sync() external lock {\r\n\r\n        _update(\r\n\r\n            IERC20(token0).balanceOf(address(this)),\r\n\r\n            IERC20(token1).balanceOf(address(this)),\r\n\r\n            reserve0,\r\n\r\n            reserve1\r\n\r\n        );\r\n\r\n    }\r\n\r\n\r\n\r\n    function setVars(uint256 varId, uint32 value) external onlyVoting {\r\n\r\n        require(varId < vars.length, \"varID!\");\r\n\r\n        if (varId == uint256(Vars.timeFrame) || varId == uint256(Vars.periodMA))\r\n\r\n            require(value != 0, \"time frame!\");\r\n\r\n        else require(value <= 10000, \"percentage!\");\r\n\r\n        vars[varId] = value;\r\n\r\n    }\r\n\r\n\r\n\r\n    // private/public pool switching (just for pools )\r\n\r\n    function switchToPublic() external onlyVoting {\r\n\r\n        require(isPrivate == true);\r\n\r\n        isPrivate = false;\r\n\r\n    }\r\n\r\n\r\n\r\n    // set token tax by token owner\r\n\r\n    // token - token that has tax (address(0) if no tax)\r\n\r\n    // buyTaxReceiver - address that receive buy tax\r\n\r\n    // buyTax - tax when buy \"token\" (in percentage with 2 decimals)\r\n\r\n    // sellTaxReceiver - address that receive sell tax\r\n\r\n    // sellTax - tax when sell \"token\" (in percentage with 2 decimals)\r\n\r\n    function setTokenTax(address token, address buyTaxReceiver, uint256 buyTax, address sellTaxReceiver, uint256 sellTax) external {\r\n\r\n        address pairToken;\r\n\r\n        if (token == token0) {\r\n\r\n            pairToken = token1;\r\n\r\n        } else if (token == token1) {\r\n\r\n            pairToken = token0;\r\n\r\n        } else {\r\n\r\n            revert(); // wrong token\r\n\r\n        }\r\n\r\n        // token MUST be ownable\r\n\r\n        require(Ownable(token).owner() == msg.sender);\r\n\r\n        // pair toke MUST NOT be ownable\r\n\r\n        require(safeHasOwner(pairToken) == false);\r\n\r\n        require(buyTax < 10000 && sellTax < 10000); // tax must be less than 100.00%\r\n\r\n        taxToken = TaxToken(token, buyTaxReceiver, buyTax, sellTaxReceiver, sellTax);\r\n\r\n    }\r\n\r\n\r\n\r\n    // return true if contract has owner, otherwise false\r\n\r\n    function safeHasOwner(address token) internal returns(bool) {\r\n\r\n        (bool success, bytes memory data) = token.call(\r\n\r\n            abi.encodeWithSelector(0x8da5cb5b) //bytes4(keccak256(bytes(\"owner()\")));\r\n\r\n        );\r\n\r\n        if (success && data.length != 0) return true;\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"AddReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"ruleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"ballotId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"}],\"name\":\"ApplyBallot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"ruleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"ballotId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"closeVote\",\"type\":\"uint256\"}],\"name\":\"BallotCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0Out\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1Out\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"reserve0\",\"type\":\"uint112\"},{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"reserve1\",\"type\":\"uint112\"}],\"name\":\"Sync\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ballotId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"yea\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voteLP\",\"type\":\"uint256\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_LIQUIDITY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accumulatedRewardPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ballotIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ballots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"closeVote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ruleId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"},{\"internalType\":\"enum DynamicVoting.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"yea\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVotes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseLineLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseLinePrice0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ruleId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"voteLP\",\"type\":\"uint256\"}],\"name\":\"createBallot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ballotId\",\"type\":\"uint256\"}],\"name\":\"executeBallot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"floorPrice0\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"floorPrice0\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"baseToken\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"getAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"getAmountInAndFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"getAmountOutAndFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"}],\"name\":\"getFloorPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"floorPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currentBaseToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"_reserve0\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"_reserve1\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"_blockTimestampLast\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ruleId\",\"type\":\"uint256\"}],\"name\":\"getRule\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"majority\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"funcAbi\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"uint32[8]\",\"name\":\"_vars\",\"type\":\"uint32[8]\"},{\"internalType\":\"bool\",\"name\":\"_isPrivate\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"baseProtectedToken\",\"type\":\"uint256\"},{\"internalType\":\"uint32[2]\",\"name\":\"voteVars\",\"type\":\"uint32[2]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPrivate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastMA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPeriodCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimalLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price0CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price1CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rules\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"majority\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"funcAbi\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rulesIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"setMinimalLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyTaxReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyTax\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sellTaxReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellTax\",\"type\":\"uint256\"}],\"name\":\"setTokenTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"varId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"value\",\"type\":\"uint32\"}],\"name\":\"setVars\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setVotingDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"skim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0Out\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Out\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"switchToPublic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyTaxReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyTax\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sellTaxReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellTax\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userEarnedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerSharePaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vars\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ballotId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"yea\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ballotId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"yea\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"voteLP\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DynamicPair", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b0765729db4696a24535f6af8da5628b17b11c9fb553c23775c8274f7c05c9b8"}