{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-03-14\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-09-02\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-08-27\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-03-09\r\n*/\r\n\r\npragma solidity >= 0.5.0;\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  \r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n  function burn(uint256 value) external returns (bool);\r\n  event Transfer(address indexed from,address indexed to,uint256 value);\r\n  event Approval(address indexed owner,address indexed spender,uint256 value);\r\n}\r\n\r\ncontract WFT_SWAP{\r\n  \r\n     using SafeMath for uint256;\r\n    IERC20 private WFT; \r\n    IERC20 private BUSD;\r\n    address payable public owner;\r\n    uint public token_price = 12*1e16;    //0.5 Paisa\r\n    uint public  MINIMUM_BUY = 10*1e18 ;\r\n    uint public  MAXIMUM_BUY = 100000*1e18 ;\r\n\tuint public  MINIMUM_SALE = 10*1e18 ;\r\n    uint public  MAXIMUM_SALE = 10000*1e18 ;\r\n\tuint public sale_status = 1;\r\n   \r\n    constructor(address payable ownerAddress,IERC20 _WFT,IERC20 _BUSD) public\r\n    {\r\n        owner = ownerAddress;  \r\n        WFT = _WFT;\r\n        BUSD=_BUSD;\r\n    }\r\n    \r\n    function BuyToken(uint256 tokenQty) public payable\r\n\t{\r\n\t\trequire(tokenQty>=MINIMUM_BUY,\"Invalid minimum quatity\");\r\n\t\trequire(tokenQty<=MAXIMUM_BUY,\"Invalid maximum quatity\");\r\n        require(WFT.balanceOf(address(this))>=tokenQty,\"Low Token Balance In Contract\");\r\n        uint256 BUSD_amt=(tokenQty*token_price)/1e18;   \r\n        require(BUSD_amt>0,\"Invalid buy amount\");\r\n        require(BUSD.balanceOf(msg.sender)>=BUSD_amt,\"Low BUSD Balance In Wallet\");\r\n\t\tBUSD.transferFrom(msg.sender,address(this), BUSD_amt);\r\n\t\tWFT.transfer(msg.sender , tokenQty);\r\n \r\n\t}\r\n    \r\n\tfunction sellToken(uint256 tokenQty) public payable \r\n\t{\r\n\t\t\trequire(sale_status>=1,\"Sale Not Allow\");\r\n\t        require(tokenQty>=MINIMUM_SALE,\"Invalid minimum quatity\");\r\n\t        require(tokenQty<=MAXIMUM_SALE,\"Invalid maximum quatity\");\r\n\t     \trequire(WFT.balanceOf(msg.sender)>=tokenQty,\"Low Token Balance\");\r\n\t\t\tuint BUSD_amt=(tokenQty*token_price)/1e18;   \r\n            require(BUSD.balanceOf(address(this))>=BUSD_amt,\"Low BUSD Balance In Contract\");\r\n\t\t\tWFT.transferFrom(msg.sender ,address(this), tokenQty);\r\n\t\t\tBUSD.transfer(msg.sender ,BUSD_amt);\r\n\t\t\t\r\n\t\t\t\r\n\t }\r\n      function Buy_setting(uint min_buy, uint max_buy, uint min_sell,uint max_sell) public payable\r\n        {\r\n           require(msg.sender==owner,\"Only Owner\");\r\n              MINIMUM_BUY = min_buy ;\r\n              MAXIMUM_BUY = max_buy;\r\n\t\t\t  MINIMUM_SALE = min_sell ;\r\n              MAXIMUM_SALE = max_sell;\r\n \t\t\r\n        }\r\n\r\n         function Price_setting(uint256 token_rate) public payable\r\n        {\r\n           require(msg.sender==owner,\"Only Owner\");\r\n            token_price=token_rate;\r\n\t\t\t\r\n        }\r\n\t function sale_setting(uint start_sale) public payable\r\n        {\r\n           require(msg.sender==owner,\"Only Owner\");\r\n            sale_status=start_sale;\r\n        }\r\n        \r\n         function getPrice() public view returns(uint256)\r\n        {\r\n              return uint256(token_price);\r\n\t\t\t\r\n        }\r\n\r\n    function withdrawLost(uint256 WithAmt) public {\r\n        require(msg.sender == owner, \"onlyOwner\");\r\n        owner.transfer(WithAmt*1e18);\r\n    }\r\n    \r\n  \r\n\tfunction withdrawLostTokenFromBalance(uint QtyAmt,IERC20 _TOKEN) public \r\n\t{\r\n        require(msg.sender == owner, \"onlyOwner\");\r\n        _TOKEN.transfer(owner,(QtyAmt*1e18));\r\n\t}\r\n\t\r\n}\r\n\r\n\r\n/**     \r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a); \r\n    return c;\r\n  }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"MAXIMUM_BUY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"min_buy\",\"type\":\"uint256\"},{\"name\":\"max_buy\",\"type\":\"uint256\"},{\"name\":\"min_sell\",\"type\":\"uint256\"},{\"name\":\"max_sell\",\"type\":\"uint256\"}],\"name\":\"Buy_setting\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenQty\",\"type\":\"uint256\"}],\"name\":\"sellToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sale_status\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINIMUM_BUY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token_price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"QtyAmt\",\"type\":\"uint256\"},{\"name\":\"_TOKEN\",\"type\":\"address\"}],\"name\":\"withdrawLostTokenFromBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token_rate\",\"type\":\"uint256\"}],\"name\":\"Price_setting\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINIMUM_SALE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAXIMUM_SALE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"start_sale\",\"type\":\"uint256\"}],\"name\":\"sale_setting\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"WithAmt\",\"type\":\"uint256\"}],\"name\":\"withdrawLost\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenQty\",\"type\":\"uint256\"}],\"name\":\"BuyToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"ownerAddress\",\"type\":\"address\"},{\"name\":\"_WFT\",\"type\":\"address\"},{\"name\":\"_BUSD\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]", "ContractName": "WFT_SWAP", "CompilerVersion": "v0.5.0+commit.1d4f565a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000007d40c53aefb35828026e2ded9ab40d8ab2e58a25000000000000000000000000ad4b65c9b2d9bca8602c5dc49cba2d27d054fc71000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d56", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://945161cb6b08fa8c85d1f2ff387e3558a6cc1862096c647af3578072b328b4bc"}