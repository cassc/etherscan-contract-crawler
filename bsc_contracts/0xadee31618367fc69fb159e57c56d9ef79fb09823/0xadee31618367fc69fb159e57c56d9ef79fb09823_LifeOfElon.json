{"SourceCode": "/**\r\nAuthor: @bLock_doctor\r\n*/\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\ninterface IBEP20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function decimals() external view returns (uint8);\r\n  function symbol() external view returns (string memory);\r\n  function name() external view returns (string memory);\r\n  function getOwner() external view returns (address);\r\n  function balanceOf(address account) external view returns (uint256);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IPancakeERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n}\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\ninterface IPancakeFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IPancakeRouter01 {\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getamountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getamountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getamountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getamountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\ncontract LifeOfElon is IBEP20, Ownable {\r\n\r\n    uint8 private _buyTax = 7;\r\n    uint8 private _sellTax = 8;\r\n    uint8 private _transferTax = 0;\r\n    uint8 private _charityTax = 30;\r\n    uint8 private _liquidityTax = 10;\r\n    uint8 private _marketingTax = 30;\r\n    uint8 private _rewardsTax = 30;\r\n    uint8 private constant _tokenDecimals = 18;\r\n\r\n    uint256 private _totalRewardsBNB;\r\n    uint256 private _totalRewardsBNBClaimed;\r\n    uint256 private _maxWallet = 3000000 * 10 ** _tokenDecimals;\r\n    uint256 private _maxTransaction = 2000000 * 10 ** _tokenDecimals;\r\n    uint256 private _rewardPerToken;\r\n    uint256 private _swapTokenThreshold = 250000 * 10 ** _tokenDecimals;\r\n    uint256 private _totalTokensHeld;\r\n    uint256 private _profitPerToken;\r\n    uint256 private constant _totalSupply = 100000000*10**_tokenDecimals;\r\n\r\n    bool private _tradingEnabled;\r\n    bool private _swapEnabled = true;\r\n    bool private _inSwap;\r\n    bool private _isWithdrawingRewards;\r\n\r\n    IPancakeRouter02 private _pancakeRouter;\r\n    address public routerAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    address public pairAddress;\r\n\r\n    address public marketingWallet = 0xeAaF49F1892ca23d887f81Ead43b15251068bDFf;\r\n    address public charityWallet = 0xFD2e355b785B7bA41bf18f8926EC5D813C7743F2;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => bool) private _marketMakers;\r\n    mapping(address => bool) private _excludedFromFees;\r\n    mapping(address => bool) private _excludedFromRewards;\r\n    mapping(address => TokenHolder) private _tokenHolders;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    struct TokenHolder {\r\n        uint256 rewardsPaid;\r\n        uint256 rewardsToBePaid;\r\n    }\r\n\r\n    modifier LockTheSwap {\r\n        _inSwap = true;\r\n        _;\r\n        _inSwap = false;\r\n    }\r\n\r\n    modifier LockWithdraw {\r\n        _isWithdrawingRewards = true;\r\n        _;\r\n        _isWithdrawingRewards = false;\r\n    }\r\n\r\n    constructor() {\r\n        _pancakeRouter = IPancakeRouter02(routerAddress);\r\n        pairAddress = IPancakeFactory(_pancakeRouter.factory()).createPair(address(this), _pancakeRouter.WETH());\r\n        _approve(address(this), address(_pancakeRouter), type(uint256).max);\r\n        _marketMakers[pairAddress] = true;\r\n        //\r\n        _excludedFromRewards[msg.sender] = true;\r\n        _excludedFromRewards[pairAddress] = true;\r\n        _excludedFromRewards[address(this)] = true;\r\n        _excludedFromRewards[address(0xdead)] = true;\r\n        //\r\n        _excludedFromFees[msg.sender] = true;\r\n        _excludedFromFees[address(this)] = true;\r\n        _excludedFromFees[address(0xdead)] = true;\r\n        //\r\n        _updateBalance(msg.sender, _totalSupply, true);\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        bool isExcludedFromFees = _excludedFromFees[from] || _excludedFromFees[to];\r\n        bool isBuy = _marketMakers[from];\r\n        bool isSell = _marketMakers[to];\r\n        if (isExcludedFromFees) _transferTokens(from, to, amount, 0);\r\n        else {\r\n            require(_tradingEnabled);\r\n            require(amount <= _maxTransaction);\r\n            if (isBuy) {\r\n                require(_balances[to] + amount <= _maxWallet);\r\n                _transferTokens(from, to, amount, _buyTax);\r\n            } else if (isSell) {\r\n                if (_swapEnabled && !_inSwap) _swapContractTokens(false);\r\n                _transferTokens(from, to, amount, _sellTax);\r\n            } else {\r\n                require(_balances[to] + amount <= _maxWallet);\r\n                _transferTokens(from, to, amount, _transferTax);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _transferTokens(\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint8 taxPercent\r\n    ) private {\r\n        uint256 taxTokens = amount * taxPercent / 100;\r\n        uint256 afterTax = amount - taxTokens;\r\n        _updateBalance(from, amount, false);\r\n        _updateBalance(address(this), taxTokens, true);\r\n        _updateBalance(to, afterTax, true);\r\n        if (_excludedFromRewards[from] && !_excludedFromRewards[to]) _totalTokensHeld += afterTax;\r\n        else if (!_excludedFromRewards[from] && _excludedFromRewards[to]) _totalTokensHeld -= amount;\r\n        emit Transfer(from, to, afterTax);\r\n    }\r\n\r\n    function _updateBalance(\r\n        address account,\r\n        uint256 amount,\r\n        bool increase\r\n    ) private {\r\n        _balances[account] = increase ? _balances[account] += amount : _balances[account] -= amount;\r\n        _resetRewards(account, _newRewardsOf(account));\r\n    }\r\n\r\n    function _swapContractTokens(bool ignoreLimits) private LockTheSwap {\r\n        uint256 toSwap = _swapTokenThreshold;\r\n        uint256 contractTokenBalance = _balances[address(this)];\r\n        if (contractTokenBalance < toSwap) {\r\n            if (ignoreLimits && contractTokenBalance > 0) {\r\n                toSwap = contractTokenBalance;\r\n            } else return;\r\n        }\r\n        uint256 totalLiquidityTokens = toSwap * _liquidityTax / 100;\r\n        uint256 tokensLeft = toSwap - totalLiquidityTokens;\r\n        uint256 liquidityTokens = totalLiquidityTokens / 2;\r\n        uint256 liquidityBNBTokens = totalLiquidityTokens - liquidityTokens;\r\n        uint256 totalSwap = liquidityBNBTokens + tokensLeft;\r\n        uint256 oldBNB = address(this).balance;\r\n         _swapTokensForBNB(totalSwap);\r\n        uint256 newBNB = address(this).balance - oldBNB;\r\n        uint256 LPBNB = (newBNB * liquidityBNBTokens) / totalSwap;\r\n        _addLiquidity(liquidityTokens, LPBNB);\r\n        uint256 remainingBNB = address(this).balance - oldBNB;\r\n        _distributeBNB(remainingBNB);\r\n    }\r\n\r\n    function _distributeBNB(\r\n        uint256 amountWei\r\n    ) private {\r\n        uint256 marketingBNB = amountWei * _marketingTax / 100;\r\n        uint256 charityBNB = amountWei * _charityTax / 100;\r\n        uint256 rewardBNB = amountWei - (marketingBNB + charityBNB);\r\n        if (_totalTokensHeld == 0) marketingBNB += (charityBNB + rewardBNB);\r\n        else {\r\n            _totalRewardsBNB += rewardBNB;\r\n            _profitPerToken += (rewardBNB * (2 ** 64)) / _totalTokensHeld;\r\n            (bool success_charity, ) = payable(charityWallet).call{value: charityBNB, gas: 30000}(\"\");\r\n            success_charity = false;\r\n        }\r\n        (bool success_marketing, ) = payable(marketingWallet).call{value: marketingBNB, gas: 30000}(\"\");\r\n        success_marketing = false;\r\n    }\r\n\r\n    // LIQUIDITY \\\\\r\n\r\n    function _addLiquidity(\r\n        uint256 amountTokens, \r\n        uint256 amountBNB\r\n    ) private {\r\n        _pancakeRouter.addLiquidityETH{value: amountBNB}(\r\n            address(this),\r\n            amountTokens,\r\n            0,\r\n            0,\r\n            address(0xdead),\r\n            block.timestamp\r\n        );\r\n    }\r\n    function _swapTokensForBNB(\r\n        uint256 amount\r\n    ) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _pancakeRouter.WETH();\r\n        _pancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    // REWARDS \\\\\r\n\r\n    function claimRewardsBNB() public LockWithdraw {\r\n        uint256 totalRewards = _rewardsOf(msg.sender);\r\n        require(totalRewards > 0);\r\n        _deductRewards(msg.sender, totalRewards);\r\n        _totalRewardsBNBClaimed += totalRewards;\r\n        (bool sent,) = msg.sender.call{value: (totalRewards)}(\"\");\r\n        require(sent);\r\n    }\r\n\r\n    function _deductRewards(address account, uint256 amountWei) private {\r\n        require(amountWei > 0 && amountWei <= _rewardsOf(account));\r\n        if (!_excludedFromRewards[account]) _resetRewards(account, _newRewardsOf(account));\r\n        _tokenHolders[account].rewardsToBePaid -= amountWei;\r\n        _totalRewardsBNB -= amountWei;\r\n    }   \r\n\r\n    function _resetRewards(address account, uint256 reward) private {\r\n        if (!_excludedFromRewards[account]) {\r\n            _tokenHolders[account].rewardsPaid = _profitPerToken * _balances[account]; \r\n            _tokenHolders[account].rewardsToBePaid += reward;\r\n        }\r\n    }\r\n\r\n    function _rewardsOf(address account) private view returns (uint256) {\r\n        return _excludedFromRewards[account] ? 0 : _tokenHolders[account].rewardsToBePaid + _newRewardsOf(account);\r\n    }\r\n\r\n    function _newRewardsOf(address account) private view returns (uint256) {\r\n        uint256 rewards = _profitPerToken * _balances[account];\r\n        return rewards <= _tokenHolders[account].rewardsPaid ? 0 : (rewards - _tokenHolders[account].rewardsPaid) / (2 ** 64);\r\n    }\r\n\r\n    // OWNER \\\\\r\n\r\n    function updateMarketingWallet(\r\n        address _marketingWallet\r\n    ) public onlyOwner {\r\n        require(_marketingWallet != address(0));\r\n        marketingWallet = _marketingWallet;\r\n    }\r\n\r\n    function updateCharityWallet(\r\n        address _charityWallet\r\n    ) public onlyOwner {\r\n        require(_charityWallet != address(0));\r\n        charityWallet = _charityWallet;\r\n    }\r\n\r\n    function updateMaxTransaction(\r\n        uint256 maxTransaction\r\n    ) public onlyOwner {\r\n        require(maxTransaction >= 500000*10**_tokenDecimals);\r\n        _maxTransaction = maxTransaction;\r\n    }\r\n\r\n    function updateMaxWallet(\r\n        uint256 maxWallet\r\n    ) public onlyOwner {\r\n        require(maxWallet >= 500000 * 10 ** _tokenDecimals);\r\n        _maxWallet = maxWallet;\r\n    }\r\n\r\n    function updatePrimaryTax(\r\n        uint8 buyTax,\r\n        uint8 sellTax\r\n    ) public onlyOwner {\r\n        require(_buyTax+_sellTax <= 30);\r\n        _buyTax = buyTax;\r\n        _sellTax = sellTax;\r\n    }\r\n\r\n    function updateSecondaryTax(\r\n        uint8 marketingTax,\r\n        uint8 charityTax,\r\n        uint8 liquidityTax,\r\n        uint8 rewardsTax\r\n    ) public onlyOwner {\r\n        _marketingTax = marketingTax;\r\n        _charityTax = charityTax;\r\n        _liquidityTax = liquidityTax;\r\n        _rewardsTax = rewardsTax;\r\n    }\r\n\r\n    function excludeFromFee(\r\n        address account,\r\n        bool enabled\r\n    ) public onlyOwner {\r\n        _excludedFromFees[account] = enabled;\r\n    }\r\n\r\n    function excludeFromRewards(\r\n        address account\r\n    ) public onlyOwner {\r\n        require(!_excludedFromRewards[account]);\r\n        _resetRewards(account, 0);\r\n        _excludedFromRewards[account] = true;\r\n        _totalTokensHeld -= _balances[account];\r\n    }\r\n\r\n    function includeToRewards(\r\n        address account\r\n    ) public onlyOwner {\r\n        require(_excludedFromRewards[account]);\r\n        _excludedFromRewards[account] = false;\r\n        _resetRewards(account, 0); // ? should be 0 ?\r\n        _totalTokensHeld += _balances[account];\r\n    }\r\n\r\n    function updateMarketMaker(\r\n        address marketMaker,\r\n        bool enabled\r\n    ) public onlyOwner {\r\n        require(marketMaker != pairAddress);\r\n        _marketMakers[marketMaker] = enabled;\r\n    }\r\n\r\n    function boostRewards() public payable onlyOwner {\r\n        require(msg.value > 0);\r\n        _distributeBNB(msg.value);\r\n    }\r\n\r\n    function enableTrading() public onlyOwner {\r\n        require(!_tradingEnabled);\r\n        _tradingEnabled=!_tradingEnabled;\r\n    }\r\n\r\n    function switchSwapEnabled() public onlyOwner {\r\n        _swapEnabled = !_swapEnabled;\r\n    }\r\n\r\n    function updateSwapThreshold(\r\n        uint256 swapTokenThreshold_\r\n    ) public onlyOwner {\r\n        require(swapTokenThreshold_ > 0);\r\n        require(swapTokenThreshold_ <= 500000*10**_tokenDecimals);\r\n        _swapTokenThreshold = swapTokenThreshold_;\r\n    }\r\n\r\n    function triggerSwapContractTokens(\r\n        bool ignoreLimits\r\n    ) public onlyOwner {\r\n        require(_swapTokenThreshold > 0);\r\n        require(_swapTokenThreshold <= 500000*10**_tokenDecimals);\r\n        _swapContractTokens(ignoreLimits);\r\n    }\r\n\r\n    function withdrawBNB() public onlyOwner {\r\n        (bool success,) = msg.sender.call{value: (address(this).balance - _totalRewardsBNB)}(\"\");\r\n        require(success);\r\n    }\r\n\r\n    function teamWithdrawStrandedToken(\r\n        address strandedToken\r\n    ) public onlyOwner {\r\n        require(strandedToken != pairAddress && strandedToken != address(this));\r\n        IBEP20 token = IBEP20(strandedToken);\r\n        token.transfer(msg.sender, token.balanceOf(address(this)));\r\n    }\r\n\r\n    // GETTERS \\\\ \r\n\r\n    function getTotalBNBClaimed() public view returns (uint256) {\r\n        return _totalRewardsBNBClaimed;\r\n    }\r\n\r\n    function isTradingEnabled() public view returns (bool) {\r\n        return _tradingEnabled;\r\n    }\r\n\r\n    function isSwapEnabled() public view returns (bool) {\r\n        return _swapEnabled;\r\n    }\r\n\r\n    function getMaxTransaction() public view returns (uint256) {\r\n        return _maxTransaction;\r\n    }\r\n\r\n    function getMaxWallet() public view returns (uint256) {\r\n        return _maxWallet;\r\n    }\r\n\r\n    function getSwapTokenThreshold() public view returns (uint256) {\r\n        return _swapTokenThreshold;\r\n    }\r\n\r\n    function getTotalTokensHeld() public view returns (uint256) {\r\n        return _totalTokensHeld;\r\n    }\r\n\r\n    function getPrimaryTaxes() public view returns (\r\n        uint8 buyTax,\r\n        uint8 sellTax\r\n    ) {\r\n        buyTax = _buyTax;\r\n        sellTax = _sellTax;\r\n    }\r\n\r\n    function getSecondaryTaxes() public view returns (\r\n        uint8 marketingTax,\r\n        uint8 charityTax,\r\n        uint8 liquidityTax,\r\n        uint8 rewardTax\r\n    ) {\r\n        marketingTax = _marketingTax;\r\n        charityTax = _charityTax;\r\n        liquidityTax = _liquidityTax;\r\n        rewardTax = _rewardsTax;\r\n    }\r\n\r\n    // IBEP20 \\\\\r\n\r\n    function _approve(\r\n        address owner, \r\n        address spender, \r\n        uint256 amount\r\n    ) private {\r\n        require((owner != address(0) && spender != address(0)), \"Owner/Spender address cannot be 0.\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    function transfer(\r\n        address recipient, \r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(\r\n        address sender, \r\n        address recipient, \r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        uint256 allowance_ = _allowances[sender][msg.sender];\r\n        _transfer(sender, recipient, amount);\r\n        require(allowance_ >= amount);\r\n        _approve(sender, msg.sender, allowance_ - amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n    function approve(\r\n        address spender, \r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n    function allowance(\r\n        address owner_, \r\n        address spender\r\n    ) external view override returns (uint256) {\r\n        return _allowances[owner_][spender];\r\n    }\r\n    function balanceOf(\r\n        address account\r\n    ) external view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function name() external pure override returns (string memory) {\r\n        return \"LifeOfElon\";\r\n    }\r\n    function symbol() external pure override returns (string memory) {\r\n        return \"LOE\";\r\n    }\r\n    function totalSupply() external pure override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function decimals() external pure override returns (uint8) {\r\n        return _tokenDecimals;\r\n    }\r\n    function getOwner() external view override returns (address) {\r\n        return owner();\r\n    }\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boostRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charityWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewardsBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrimaryTaxes\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"buyTax\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellTax\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSecondaryTaxes\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"marketingTax\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"charityTax\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"liquidityTax\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"rewardTax\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSwapTokenThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalBNBClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalTokensHeld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeToRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSwapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"switchSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strandedToken\",\"type\":\"address\"}],\"name\":\"teamWithdrawStrandedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"ignoreLimits\",\"type\":\"bool\"}],\"name\":\"triggerSwapContractTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_charityWallet\",\"type\":\"address\"}],\"name\":\"updateCharityWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketMaker\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"updateMarketMaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingWallet\",\"type\":\"address\"}],\"name\":\"updateMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTransaction\",\"type\":\"uint256\"}],\"name\":\"updateMaxTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWallet\",\"type\":\"uint256\"}],\"name\":\"updateMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"buyTax\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellTax\",\"type\":\"uint8\"}],\"name\":\"updatePrimaryTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"marketingTax\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"charityTax\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"liquidityTax\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"rewardsTax\",\"type\":\"uint8\"}],\"name\":\"updateSecondaryTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapTokenThreshold_\",\"type\":\"uint256\"}],\"name\":\"updateSwapThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LifeOfElon", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ecb8422904efec0cd29b37e3af24db7aad7f185ad62051ffb92e9c035dc24ed5"}