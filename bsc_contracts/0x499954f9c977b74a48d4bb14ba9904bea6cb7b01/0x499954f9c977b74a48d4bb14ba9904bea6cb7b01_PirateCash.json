{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        \r\n\treturn c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract PirateCash {\r\n\tusing SafeMath for uint256;\r\n\tuint256 public totalSupply;\r\n\t\r\n\tstring public name;\r\n\tuint8 public decimals;\r\n\tstring public symbol;\r\n\tstring public version;\r\n    address owner;\r\n    address gateway = address(0xA1312fe9cf8CA8a52c9DC3Bf5F4B999eaC298670);\r\n\t\r\n\tmapping (address => uint256) balances;\r\n\tmapping (address => mapping (address => uint)) allowed;\r\n\r\n\tconstructor() {\r\n\t\ttotalSupply = 0;\r\n\t\tname = \"Cosanta\";\r\n\t\tdecimals = 8;\r\n\t\tsymbol = \"COSA\";\r\n\t\tversion = \"1.1.8\";\r\n        owner = msg.sender;\r\n\t}\r\n\r\n\r\n\t//Fix for short address attack against ERC20\r\n\tmodifier onlyPayloadSize(uint size) {\r\n\t\tassert(msg.data.length == size + 4);\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction balanceOf(address _owner) public view returns (uint balance) {\r\n\t\treturn balances[_owner];\r\n\t}\r\n\r\n\tfunction transfer(address _recipient, uint _value) public onlyPayloadSize(2*32) {\r\n\t    require(balances[msg.sender] >= _value && _value > 0);\r\n\t    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n\t    balances[_recipient] = balances[_recipient].add(_value);\r\n\t    emit Transfer(msg.sender, _recipient, _value);        \r\n        }\r\n\r\n\tfunction transferFrom(address _from, address _to, uint _value) public {\r\n\t    require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0);\r\n            balances[_to] = balances[_to].add(_value);\r\n            balances[_from] = balances[_from].sub(_value);\r\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n            emit Transfer(_from, _to, _value);\r\n        }\r\n\r\n\tfunction  approve(address _spender, uint _value) public {\r\n\t\tallowed[msg.sender][_spender] = _value;\r\n\t\temit Approval(msg.sender, _spender, _value);\r\n\t}\r\n\r\n\tfunction allowance(address _owner, address _spender) public view returns (uint balance) {\r\n\t\treturn allowed[_owner][_spender];\r\n\t}\r\n\r\n    function DepositTo(address _to, uint _value) public {\r\n        require (_value > 0, 'value too low');\r\n        require ( msg.sender == owner || msg.sender == gateway, 'permision denied');\r\n        balances[_to] = balances[_to].add(_value);\r\n        totalSupply += _value;\r\n    }\r\n\r\n    function BurnDeposit(uint _value) public {\r\n        require (_value > 0, 'value too low');\r\n        require (balances[msg.sender] >= _value, 'you do not have enough balance on your deposit');\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        totalSupply -= _value;\r\n    }\r\n\r\n\t//Event which is triggered to log all transfers to this contract's event log\r\n\tevent Transfer(\r\n\t\taddress indexed _from,\r\n\t\taddress indexed _to,\r\n\t\tuint _value\r\n\t\t);\r\n\t\t\r\n\t//Event which is triggered whenever an owner approves a new allowance for a spender.\r\n\tevent Approval(\r\n\t\taddress indexed _owner,\r\n\t\taddress indexed _spender,\r\n\t\tuint _value\r\n\t\t);\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"BurnDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"DepositTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PirateCash", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9274ed8f98c0a5adbcde1e2470332c4a01c76be8fbf34d834821e785f825bb13"}