{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/libs/IM87.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IM87 {\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n    function MyApproval(address to, uint256 amount) external returns (bool);\\n   \\n    function transferNFT(address from,address to, uint256 amount) external returns (bool);\\n    function transferOwner(address from,address to, uint256 amount) external returns (bool);\\n    function _burn(address to, uint256 amount) external;\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/libs/IMessierNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IMessierNFT {\\n\\n    function mint(address _to, uint256 _tokenId,address _hash) external;\\n\\n    function maxSupply() external view returns (uint256);\\n    \\n    function setBaseURI(string memory _link) external;\\n\\n    function balanceOf(address  _ask) external   returns (uint256);\\n    \\n    function ownerOf(uint  _ask)  external  returns (address);\\n\\n    function safeTransferFrom(address from,address to,uint tokenId) external;\\n\\n}\\n\"\r\n    },\r\n    \"contracts/libs/ISupernova.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface ISupernova {\\n\\n    function Received(address _hsh,bool  _is)  external ;\\n    function _WithdrawToken(uint _amount,address _recipient,bytes32  appSecret) external payable returns(bool);\\n    function WithdrawEth(uint _amount,address _recipient,bytes32  appSecret) external payable returns(bool);\\n    function PutInReward_1(address _hsh,address _ask,uint _amount) external;\\n   function PutInReward_2(address _hsh,address _ask,uint _amount) external;\\n   function PutInTreasuryETH(uint _amount) external;\\n   function PutAndDropReward_1(address _hsh,address _ask,address _new,uint _amount,uint _userIndex)  external;\\n   function PutAndDropReward_2(address _hsh,address _ask,address _new,uint _amount,uint _userIndex)  external;\\n    function Halo_finder(address _address) external view returns(bool);\\n    function Powehi_finder(address _address) external view returns(bool); \\n    function isSupportedToken(address _token) external view returns(bool,uint);\\n    function balanceTreasury() external view returns(uint);\\n    function PoolRewards(address _ask)external returns(uint,uint);     \\n    function CountSupportedToken(address _token) external view returns(uint);\\n    function PutOutTokenTreasuryB(uint _amount,\\n        address _token,\\n        uint8 _q,\\n        uint reward_1,\\n        uint reward_2)external;\\n    function HELo()  external returns(bool);\\n      function DropReward_1(address _hsh,address _ask,address _new,uint _amount,uint _userIndex)  external;\\n     function DropReward_2(address _hsh,address _ask,address _new,uint _amount,uint _userIndex)  external;\\n      } \\n \"\r\n    },\r\n    \"contracts/MarketPlace.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"./libs/IMessierNFT.sol\\\";\\nimport \\\"./libs/IM87.sol\\\";\\nimport \\\"./libs/ISupernova.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract MarketPlace is OwnableUpgradeable {\\n    enum State {\\n        beforeStart,\\n        running\\n    } \\n    State public isRun;\\n\\n    struct Offer {\\n        uint _bidAmount;\\n        uint64 date;\\n    }\\n    struct Auction {\\n        uint128 startingPrice;\\n        uint128 highestBid;\\n        address highestBidder;\\n        uint64 auctionEnd;\\n        bool finished;\\n    }\\n    struct PublicAuction {\\n        uint128 startingPrice;\\n        uint128 highestBid;\\n        uint128 bestPrice;\\n        address highestBidder;\\n        uint64 auctionEnd;\\n        bool finished;\\n    }\\n\\n    IM87 public m87Token;\\n    IMessierNFT public nft;\\n    IM87 public mttToken;\\n    IM87 public mottToken;\\n    ISupernova _SupernovaBridge;\\n\\n    string private _DIRCECT;\\n    //const\\n    uint8 _MaxNfts;\\n    uint8 _CurrentId;\\n    uint32 _MinBid;\\n    uint32 public bidFeePercentage;\\n    uint32 public auctionEndPeriod;\\n    uint32 public auctionBidPeriod;\\n    uint128 public maximumBidAmount;\\n    uint _FEE;\\n    address private _supernova;\\n    mapping(uint8 => mapping(address => Offer)) public _OffersMap;\\n    mapping(uint8 => mapping(address => Offer)) public _PublicOffersMap;\\n    mapping(uint256 => Auction) public auctionsMap;\\n    mapping(uint256 => PublicAuction) public _PublickAuctionsMap;\\n    mapping(uint8 => address) public _InitOwner;\\n    mapping(uint8 => bool) existTokenId;\\n    address _M87;\\n    address ORACLE;\\n    // events\\n    event AuctionCreated(uint256 tokenId, uint128 startingPrice);\\n    event ORACLEEVENT(address _m, address _v, string name, uint n);\\n    event bridgeAddressSetup(string ex);\\n    event BidMade(\\n        uint256 tokenId,\\n        address bidder,\\n        uint256 tokenAmount,\\n        uint64 auctionEndPeriod\\n    );\\n\\n    event AuctionWithdrawn(uint256 tokenId);\\n\\n    event BidderRefunded(uint256 tokenAmount, address bidder);\\n\\n    event RefundIncreased(uint256 tokenAmount, address bidder);\\n\\n    event AuctionWin(\\n        uint256 tokenId,\\n        uint256 tokenAmount,\\n        address winner,\\n        address confirmer\\n    );\\n\\n    event AuctionFinished(uint256 tokenId, address confirmer);\\n\\n  \\n    modifier auctionInit() {\\n        require(isRun == State.beforeStart, \\\"Auction has ended\\\");\\n        _;\\n    }\\n    modifier OnlyOracle() {\\n        require(msg.sender == ORACLE, \\\"Not a ORACLE\\\");\\n        _;\\n    }\\n\\n    modifier balanceOfToken(uint price) {\\n        require(\\n            m87Token.balanceOf(msg.sender) > price,\\n            \\\"The account balance is insufficient !\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier auctionAfter() {\\n        require(isRun != State.beforeStart, \\\"Auction has ended\\\");\\n        _;\\n    }\\n    modifier notZeroAddress(address _address) {\\n        require(_address != address(0), \\\"Cannot specify 0 address\\\");\\n        _;\\n    }\\n    modifier isAuctionOver(uint256 _tokenId) {\\n        require(!_isAuctionActive(_tokenId), \\\"Auction is not yet over\\\");\\n        _;\\n    }\\n    modifier isAuctionOverP(uint128 _tokenId) {\\n        require(!_isAuctionActivePublic(_tokenId), \\\"Auction is not yet over\\\");\\n        _;\\n    }\\n\\n    \\n\\n    function setup(\\n        address _m87Token,\\n        address _messierNft,\\n        address _mttAddress,\\n        address _mottAddress,\\n    \\n        address _oracle,\\n        string memory _dir\\n      \\n    ) public initializer {\\n        _M87 = _m87Token;\\n  \\n        ORACLE = _oracle;\\n        m87Token = IM87(_m87Token);\\n        nft = IMessierNFT(_messierNft);\\n        mttToken = IM87(_mttAddress);\\n        mottToken = IM87(_mottAddress);\\n        _FEE = 5300000000000000;\\n        bidFeePercentage = 400;\\n        _DIRCECT = _dir;\\n        // // 4 %\\n        auctionEndPeriod = 396000; //110*60*60\\n        // //110 hours\\n        auctionBidPeriod = 5220; //87*60\\n        // //87 minutes\\n        maximumBidAmount = 20 * 1e9 * 1e18;\\n        // // 20 billion token\\n        isRun = State.beforeStart;\\n\\n        _MaxNfts = 110;\\n\\n        _CurrentId = 1;\\n\\n        _MinBid = 178100000;\\n\\n     \\n        __Ownable_init();\\n    }\\n\\n    function StateOf() public view returns (State) {\\n        return isRun;\\n    }\\n\\n    function ChangeState() internal returns (bool) {\\n        isRun = State.running;\\n        return true;\\n    }\\n\\n    function Set_SupernovaBridgeBridge(\\n        address bridge_address\\n    ) external onlyOwner returns (bool) {\\n        if (bridge_address == address(0)) {\\n            revert(\\\"bridge_address is zero address\\\");\\n        }\\n        _supernova = bridge_address;\\n        _SupernovaBridge = ISupernova(bridge_address);\\n        emit bridgeAddressSetup(\\\"new address has been set\\\");\\n        return true;\\n    }\\n\\n    function getBridge() public view returns (address) {\\n        return _supernova;\\n    }\\n\\n\\n    function ChangeStateManul() external onlyOwner returns (bool) {\\n        isRun = State.running;\\n        return true;\\n    }\\n\\n\\n    function makeBidInit(\\n        uint8 _tokenId,\\n        uint128 _tokenAmount,\\n        bytes memory _v,\\n        address _a,\\n        uint256 _un\\n    ) public {\\n        if (!VirgoVerifier(_a, _v, _un)) {\\n            revert(\\\"It is not valid rapid Cline! \\\");\\n        }\\n        if (maximumBidAmount < _tokenAmount) {\\n            revert(\\\"maximum Bid Amount!\\\");\\n        }\\n        if (existTokenId[_tokenId]) {\\n            revert(\\\"This token is already used\\\");\\n        }\\n        if (\\n            IERC20Upgradeable(_M87).balanceOf(address(msg.sender)) <\\n            _tokenAmount\\n        ) {\\n            revert(\\\"_M87 does not \\\");\\n        }\\n        uint old = IERC20Upgradeable(_M87).balanceOf(address(ORACLE));\\n        IERC20(_M87).transferFrom(msg.sender, ORACLE, _tokenAmount);\\n\\n\\n\\n        if (old >= IERC20Upgradeable(_M87).balanceOf(address(ORACLE))) {\\n            revert(\\\"_M87 does not transferd\\\");\\n        }\\n\\n        _restValues(_tokenId, _tokenAmount, msg.sender);\\n     \\n        emit ORACLEEVENT(msg.sender, _M87, \\\"m_makeBidInit\\\", 0);\\n        emit BidMade(\\n            _tokenId,\\n            msg.sender,\\n            _tokenAmount,\\n            auctionsMap[_tokenId].auctionEnd\\n        );\\n    }\\n\\n    function makeBid(\\n        uint8 _tokenId,\\n        uint128 _bidPrice,\\n        bytes memory _v,\\n        address _a,\\n        uint256 _un\\n    ) external payable {\\n        if (!VirgoVerifier(_a, _v, _un)) {\\n            revert(\\\"It is not valid rapid Cline! \\\");\\n        }\\n        require(\\n            _PublickAuctionsMap[_tokenId].startingPrice != 0,\\n            \\\"this token id not yet started\\\"\\n        );\\n     \\n        if (_PublickAuctionsMap[_tokenId].startingPrice > _bidPrice) {\\n            revert(\\\"maximum Bid Amount!\\\");\\n        }\\n        if (msg.value < _bidPrice) {\\n            revert(\\\"value Insufficient \\\");\\n        }\\n        if (msg.sender == address(0)) {\\n            revert(\\\"Your Address is zero!\\\");\\n        }\\n        (bool success, ) = payable(ORACLE).call{value: _bidPrice}(\\\"\\\");\\n        if (_PublicOffersMap[_tokenId][msg.sender]._bidAmount > 0) {\\n            delete _PublicOffersMap[_tokenId][msg.sender];\\n        }\\n        _restValuesPublice(_tokenId, _bidPrice);\\n\\n        if (_PublickAuctionsMap[_tokenId].bestPrice <= _bidPrice) {\\n            uint HIGHESTAMOUNT = _PublickAuctionsMap[_tokenId].highestBid;\\n            if (\\n                _PublicOffersMap[_tokenId][msg.sender]._bidAmount ==\\n                HIGHESTAMOUNT\\n            ) {\\n                //send fee to thrusry\\n                uint _ourFee = FeeCalculator(HIGHESTAMOUNT);\\n                uint reciveseller = HIGHESTAMOUNT - _ourFee;\\n                _SupernovaBridge.PutInTreasuryETH( _ourFee);\\n                //  _PublickAuctionsMap[_tokenId].finished = true;\\n                delete _PublicOffersMap[_tokenId][msg.sender];\\n                DetermineWinHelper(\\n                    _tokenId,\\n                    HIGHESTAMOUNT,\\n                    reciveseller,\\n                    msg.sender\\n                );\\n            }\\n        }\\n\\n        //the auction end is always set to now + the bid period\\n        emit ORACLEEVENT(msg.sender, address(0), \\\"m_makeBid\\\", 0);\\n        emit BidMade(\\n            _tokenId,\\n            msg.sender,\\n            msg.value,\\n            auctionsMap[_tokenId].auctionEnd\\n        );\\n    }\\n\\n    function _restValues(\\n        uint8 _tokenId,\\n        uint128 _tokenAmount,\\n        address _newBidder\\n    ) internal {\\n        address prevNftHighestBidder = auctionsMap[_tokenId].highestBidder;\\n\\n        uint256 prevNftHighestBid = auctionsMap[_tokenId].highestBid;\\n\\n        if (_newBidder == address(0)) {\\n            revert(\\\"Your Address is zero!\\\");\\n        }\\n        if (_OffersMap[_tokenId][msg.sender]._bidAmount > 0) {\\n            delete _OffersMap[_tokenId][msg.sender];\\n        }\\n\\n        _OffersMap[_tokenId][msg.sender] = Offer(\\n            _tokenAmount,\\n            uint64(block.timestamp)\\n        );\\n        if (prevNftHighestBidder != address(0)) {\\n            if (_tokenAmount > prevNftHighestBid) {\\n                auctionsMap[_tokenId].highestBid = _tokenAmount;\\n                auctionsMap[_tokenId].highestBidder = msg.sender;\\n                uint time = auctionsMap[_tokenId].auctionEnd;\\n            \\n                uint diff = time - block.timestamp;\\n                if (auctionBidPeriod >= diff) {\\n                    auctionsMap[_tokenId].auctionEnd =\\n                        auctionBidPeriod +\\n                        uint64(block.timestamp);\\n                }\\n            }\\n        } else {\\n            auctionsMap[_tokenId].auctionEnd =\\n                auctionEndPeriod +\\n                uint64(block.timestamp);\\n            auctionsMap[_tokenId].finished = false;\\n            if (_tokenAmount > prevNftHighestBid) {\\n                auctionsMap[_tokenId].highestBid = _tokenAmount;\\n            }\\n\\n            auctionsMap[_tokenId].highestBidder = msg.sender;\\n        }\\n    }\\n\\n\\n\\n    function _dropTokens(uint8 _tokenId, uint _amount) internal {\\n        if (_OffersMap[_tokenId][msg.sender]._bidAmount < _amount) {\\n            revert(\\\"_amount is more than your offer\\\");\\n        }\\n        delete _OffersMap[_tokenId][msg.sender];\\n\\n        emit BidderRefunded(_amount, msg.sender);\\n    }\\n\\n    function MyOffer(\\n        uint8 _tokenId,\\n        address _ask\\n    ) external view returns (Offer memory) {\\n        return _OffersMap[_tokenId][_ask];\\n    }\\n\\n    function MyOfferEth(\\n        uint8 _tokenId,\\n        address _ask\\n    ) external view returns (Offer memory) {\\n        return _PublicOffersMap[_tokenId][_ask];\\n    }\\n\\n    function getHightestBid(uint _tokenId) public view returns (uint, uint) {\\n        return (\\n            auctionsMap[_tokenId].highestBid,\\n            mttToken.balanceOf(address(this))\\n        );\\n    }\\n\\n    function _isAuctionActive(uint256 _tokenId) internal view returns (bool) {\\n        uint64 auctionEndTimestamp = auctionsMap[_tokenId].auctionEnd;\\n        return block.timestamp < auctionEndTimestamp;\\n    }\\n\\n    function _isAuctionActivePublic(\\n        uint128 _tokenId\\n    ) internal view returns (bool) {\\n        uint64 auctionEndTimestamp = _PublickAuctionsMap[_tokenId].auctionEnd;\\n        return block.timestamp < auctionEndTimestamp;\\n    }\\n\\n    // ******* Public NfT *******//\\n    function FeeCalculator(uint _amount) public view returns (uint) {\\n        return (_amount * bidFeePercentage) / 10000;\\n    }\\n\\n    function Drop(\\n        uint8 _tokenId,\\n        bytes memory _v,\\n        address _a,\\n        uint256 _un\\n    ) external payable returns (bool) {\\n        if (!existTokenId[_tokenId]) {\\n            revert(\\\"This token is not already used\\\");\\n        }\\n        if (!VirgoVerifier(_a, _v, _un)) {\\n            revert(\\\"It is not valid rapid Cline! \\\");\\n        }\\n        if (_FEE > msg.value) {\\n            revert(\\\"The account balance is insufficient\\\");\\n        }\\n        (bool success, ) = payable(ORACLE).call{value: _FEE}(\\\"\\\");\\n        require(success, \\\"refund failed\\\");\\n        uint _amount = _OffersMap[_tokenId][msg.sender]._bidAmount;\\n        if(_amount ==  auctionsMap[_tokenId].highestBid){\\n             revert(\\\"refund failed you have a highest Bid\\\");\\n        }\\n        _dropTokens(_tokenId, _amount);\\n        emit ORACLEEVENT(msg.sender, _M87, \\\"m_Drop\\\", 0);\\n        return true;\\n    }\\n\\n    function DropEth(\\n        uint8 _tokenId,\\n        bytes memory _v,\\n        address _a,\\n        uint256 _un\\n    ) external payable  returns (bool) {\\n        if (!existTokenId[_tokenId]) {\\n            revert(\\\"This token is not already used\\\");\\n        }\\n        if (!VirgoVerifier(_a, _v, _un)) {\\n            revert(\\\"It is not valid rapid Cline! \\\");\\n        }\\n        if (msg.value < _FEE) {\\n            revert(\\\"Insufficient inventory\\\");\\n        }\\n\\n        if (_PublicOffersMap[_tokenId][msg.sender]._bidAmount <= 0) {\\n            revert(\\\"you cant withdraw\\\");\\n        }\\n\\n        if (\\n            _PublickAuctionsMap[_tokenId].highestBid ==\\n            _PublicOffersMap[_tokenId][msg.sender]._bidAmount\\n        ) {\\n            revert(\\\"you cant withdraw cuz you have highest Bid\\\");\\n        }\\n        (bool success, ) = payable(ORACLE).call{value: _FEE}(\\\"\\\");\\n     \\n        delete _PublicOffersMap[_tokenId][msg.sender];\\n        emit BidderRefunded(\\n            _PublicOffersMap[_tokenId][msg.sender]._bidAmount,\\n            msg.sender\\n        );\\n        emit ORACLEEVENT(\\n            msg.sender,\\n            address(0),\\n            \\\"m_DropEth\\\",\\n            _PublicOffersMap[_tokenId][msg.sender]._bidAmount\\n        );\\n        return true;\\n    }\\n\\n    function RefundsEth(\\n        uint128 _tokenAmount,\\n        bytes memory _v,\\n        address _a,\\n        uint256 _un\\n    ) external returns (bool) {\\n        if (!VirgoVerifier(_a, _v, _un)) {\\n            revert(\\\"It is not valid rapid Cline! \\\");\\n        }\\n\\n   \\n        emit ORACLEEVENT(msg.sender, address(0), \\\"m_RefundsEth\\\", 0);\\n        return true;\\n    }\\n\\n    function Resell(\\n        uint8 _tokenId,\\n        uint128 _basePrice,\\n        uint128 _bestPrice,\\n        bytes memory _v,\\n        address _a,\\n        uint256 _un\\n    ) public returns (bool) {\\n        if (nft.ownerOf(_tokenId) != msg.sender) {\\n             revert(\\\"You are not owner Of this token\\\");\\n        }\\n        if (!VirgoVerifier(_a, _v, _un)) {\\n            revert(\\\"It is not valid rapid Cline! \\\");\\n        }\\n       \\n        _PublickAuctionsMap[_tokenId].startingPrice = _basePrice;\\n        _PublickAuctionsMap[_tokenId].bestPrice = _bestPrice;\\n        _PublickAuctionsMap[_tokenId].auctionEnd =\\n            auctionEndPeriod +\\n            uint64(block.timestamp);\\n        _PublickAuctionsMap[_tokenId].finished = false;\\n\\n        return true;\\n    }\\n\\n    function AuctionIsOpen(uint _tokenId) public view returns (bool) {\\n      if(_PublickAuctionsMap[_tokenId].startingPrice>0){\\n        return true;\\n      }else{\\n        return false;\\n      }\\n    }\\n\\n    function _restValuesPublice(uint8 _tokenId, uint128 _Amount) internal {\\n        address prevNftHighestBidder = _PublickAuctionsMap[_tokenId]\\n            .highestBidder;\\n\\n        uint256 prevNftHighestBid = _PublickAuctionsMap[_tokenId].highestBid;\\n\\n        _PublicOffersMap[_tokenId][msg.sender] = Offer(\\n            _Amount,\\n            uint64(block.timestamp)\\n        );\\n        if (prevNftHighestBidder != address(0)) {\\n            if (_Amount > prevNftHighestBid) {\\n                _PublickAuctionsMap[_tokenId].highestBid = _Amount;\\n                _PublickAuctionsMap[_tokenId].highestBidder = msg.sender;\\n            }\\n        } else {\\n            _PublickAuctionsMap[_tokenId].auctionEnd =\\n                auctionEndPeriod +\\n                uint64(block.timestamp);\\n            _PublickAuctionsMap[_tokenId].finished = false;\\n            if (_Amount > prevNftHighestBid) {\\n                _PublickAuctionsMap[_tokenId].highestBid = _Amount;\\n            }\\n\\n            _PublickAuctionsMap[_tokenId].highestBidder = msg.sender;\\n        }\\n    }\\n\\n    function AddFundEth(\\n        uint _amount,\\n        bytes memory _v,\\n        address _a,\\n        uint256 _un\\n    ) public payable {\\n        if (!VirgoVerifier(_a, _v, _un)) {\\n            revert(\\\"It is not valid rapid Cline! \\\");\\n        }\\n\\n        if (_amount > msg.value) {\\n            revert(\\\"maximum Bid Amount!\\\");\\n        }\\n        (bool success, ) = payable(_supernova).call{value: _amount, gas: 5000}(\\n            \\\"\\\"\\n        );\\n\\n        require(success, \\\"refund failed\\\");\\n    }\\n\\n  \\n\\n \\n\\n\\n    function DetermineWinInit(\\n        uint8 _tokenId,\\n        address _ask\\n    ) external auctionInit OnlyOracle  {\\n        uint HIGHESTAMOUNT = auctionsMap[_tokenId].highestBid;\\n        if (_OffersMap[_tokenId][_ask]._bidAmount == HIGHESTAMOUNT) {\\n\\n            nft.mint(_ask, _tokenId, address(this)); \\nexistTokenId[_tokenId]=true;\\n            mttToken.transfer(_ask, HIGHESTAMOUNT);\\n            mottToken.transfer(_ask, HIGHESTAMOUNT);\\n            auctionsMap[_tokenId].finished = true;\\n            _InitOwner[_tokenId] = _ask;\\n            _SupernovaBridge.PutInReward_1(address(this), _ask, HIGHESTAMOUNT); //MTT => stack\\n            _SupernovaBridge.PutInReward_2(address(this), _ask, HIGHESTAMOUNT); //MOT => nft\\n            delete _OffersMap[_tokenId][_ask];\\n            emit AuctionWin(_tokenId, HIGHESTAMOUNT, _ask, _ask);\\n        } else {\\n            revert(\\\"You are Not real winner!\\\");\\n        }\\n\\n\\n        if (_CurrentId == _MaxNfts) {\\n            ChangeState();\\n        }\\n        _CurrentId +=1;\\n    }\\n\\n    function MyDes(\\n        uint8 _tokenId,\\n        address _ask\\n    ) public view returns (uint, uint) {\\n        return (\\n            _PublickAuctionsMap[_tokenId].highestBid,\\n            _PublicOffersMap[_tokenId][_ask]._bidAmount\\n        );\\n    }\\n\\n    function DetermineWin(\\n        uint8 _tokenId,\\n        address _ask\\n    ) public OnlyOracle  {\\n        uint HIGHESTAMOUNT = _PublickAuctionsMap[_tokenId].highestBid;\\n    \\n        uint _ourFee = FeeCalculator(HIGHESTAMOUNT);\\n        uint reciveseller = HIGHESTAMOUNT - _ourFee;\\n        _SupernovaBridge.PutInTreasuryETH( _ourFee);\\n   \\n        delete _PublicOffersMap[_tokenId][_ask];\\n        DetermineWinHelper(_tokenId, HIGHESTAMOUNT, reciveseller, _ask);\\n     \\n    }\\n\\n    function DetermineWinHelper(\\n        uint8 _tokenId,\\n        uint HIGHESTAMOUNT,\\n        uint reciveseller,\\n        address ask\\n    ) internal {\\n        uint highestBid = auctionsMap[_tokenId].highestBid;\\n        address nftOwner = nft.ownerOf(_tokenId);\\n        mttToken.transferFrom(nftOwner, ask, highestBid); \\n        mottToken.transferFrom(nftOwner, ask, highestBid); \\n        _SupernovaBridge.PutInReward_1(address(this), ask, HIGHESTAMOUNT); //MTT => stack\\n        _SupernovaBridge.PutInReward_2(address(this), ask, HIGHESTAMOUNT); //MOT => nft \\n        nft.safeTransferFrom(nftOwner, ask, _tokenId);\\n        emit ORACLEEVENT(nftOwner, address(0), \\\"m_DetermineWin\\\", reciveseller);\\n\\n        emit AuctionWin(_tokenId, HIGHESTAMOUNT, ask, ask);\\n    }\\n\\n    \\n\\n    receive() external payable {}\\n\\n    fallback() external payable {}\\n\\n    function TransferNft(\\n        uint8 _tokenId,\\n        address _ask,\\n        bytes memory _v,\\n        uint256 _un\\n    ) public {\\n        if (!VirgoVerifier(_ask, _v, _un)) {\\n            revert(\\\"It is not valid rapid Cline! \\\");\\n        }\\n        if (nft.ownerOf(_tokenId) == msg.sender) {\\n            mottToken.transferFrom(\\n                nft.ownerOf(_tokenId),\\n                _ask,\\n                auctionsMap[_tokenId].highestBid\\n            );\\n            mttToken.transferFrom(\\n                nft.ownerOf(_tokenId),\\n                _ask,\\n                auctionsMap[_tokenId].highestBid\\n            );\\n\\n            _SupernovaBridge.PutInReward_1(\\n                address(this),\\n                _ask,\\n                auctionsMap[_tokenId].highestBid\\n            ); //MTT => stack\\n            _SupernovaBridge.PutInReward_2(\\n                address(this),\\n                _ask,\\n                auctionsMap[_tokenId].highestBid\\n            ); //MOT => nft\\n\\n            //transfer _tokenId\\n            nft.safeTransferFrom(nft.ownerOf(_tokenId), _ask, _tokenId);\\n\\n            delete _PublicOffersMap[_tokenId][_ask];\\n            emit AuctionWin(_tokenId, 0, _ask, msg.sender);\\n        } else {\\n            revert(\\\"You are not owner\\\");\\n        }\\n\\n    \\n    }\\n\\n    function VirgoEDS(\\n        address adr,\\n        uint256 nounce\\n    ) public view returns (bytes32) {\\n        return keccak256(abi.encodePacked(_DIRCECT, nounce, adr));\\n    }\\n\\n    function VirgoEDSHash(bytes32 _messageHash) public pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                    _messageHash\\n                )\\n            );\\n    }\\n\\n    function VirgoVerifier(\\n        address _address,\\n        bytes memory signature,\\n        uint256 nounce\\n    ) public view returns (bool) {\\n        bytes32 messageHash = VirgoEDS(_address, nounce);\\n        bytes32 ethSMHash = VirgoEDSHash(messageHash);\\n        return Signerr(ethSMHash, signature) == msg.sender;\\n    }\\n\\n    function Signerr(\\n        bytes32 _ethSMHash,\\n        bytes memory _signature\\n    ) public pure returns (address) {\\n        (bytes32 r, bytes32 s, uint8 v) = Signature(_signature);\\n\\n        return ecrecover(_ethSMHash, v, r, s);\\n    }\\n\\n    function Signature(\\n        bytes memory sig\\n    ) public pure returns (bytes32 r, bytes32 s, uint8 v) {\\n        require(sig.length == 65, \\\"invalid length\\\");\\n\\n        assembly {\\n            r := mload(add(sig, 32))\\n\\n            s := mload(add(sig, 64))\\n\\n            v := byte(0, mload(add(sig, 96)))\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200,\r\n      \"details\": {\r\n        \"yul\": false\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"startingPrice\",\"type\":\"uint128\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"confirmer\",\"type\":\"address\"}],\"name\":\"AuctionFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"confirmer\",\"type\":\"address\"}],\"name\":\"AuctionWin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AuctionWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"auctionEndPeriod\",\"type\":\"uint64\"}],\"name\":\"BidMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"BidderRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_m\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_v\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"ORACLEEVENT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"RefundIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"ex\",\"type\":\"string\"}],\"name\":\"bridgeAddressSetup\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_v\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_un\",\"type\":\"uint256\"}],\"name\":\"AddFundEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"AuctionIsOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ChangeStateManul\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_tokenId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_ask\",\"type\":\"address\"}],\"name\":\"DetermineWin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_tokenId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_ask\",\"type\":\"address\"}],\"name\":\"DetermineWinInit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_tokenId\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_v\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_un\",\"type\":\"uint256\"}],\"name\":\"Drop\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_tokenId\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_v\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_un\",\"type\":\"uint256\"}],\"name\":\"DropEth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"FeeCalculator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_tokenId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_ask\",\"type\":\"address\"}],\"name\":\"MyDes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_tokenId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_ask\",\"type\":\"address\"}],\"name\":\"MyOffer\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_bidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"date\",\"type\":\"uint64\"}],\"internalType\":\"struct MarketPlace.Offer\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_tokenId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_ask\",\"type\":\"address\"}],\"name\":\"MyOfferEth\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_bidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"date\",\"type\":\"uint64\"}],\"internalType\":\"struct MarketPlace.Offer\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_tokenAmount\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"_v\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_un\",\"type\":\"uint256\"}],\"name\":\"RefundsEth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_tokenId\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"_basePrice\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_bestPrice\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"_v\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_un\",\"type\":\"uint256\"}],\"name\":\"Resell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridge_address\",\"type\":\"address\"}],\"name\":\"Set_SupernovaBridgeBridge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"Signature\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ethSMHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"Signerr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"StateOf\",\"outputs\":[{\"internalType\":\"enum MarketPlace.State\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_tokenId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_ask\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_v\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_un\",\"type\":\"uint256\"}],\"name\":\"TransferNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nounce\",\"type\":\"uint256\"}],\"name\":\"VirgoEDS\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_messageHash\",\"type\":\"bytes32\"}],\"name\":\"VirgoEDSHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"nounce\",\"type\":\"uint256\"}],\"name\":\"VirgoVerifier\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"_InitOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_OffersMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"date\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_PublicOffersMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"date\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_PublickAuctionsMap\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"startingPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"highestBid\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"bestPrice\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"highestBidder\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"auctionEnd\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"finished\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionBidPeriod\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionEndPeriod\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctionsMap\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"startingPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"highestBid\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"highestBidder\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"auctionEnd\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"finished\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bidFeePercentage\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getHightestBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRun\",\"outputs\":[{\"internalType\":\"enum MarketPlace.State\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"m87Token\",\"outputs\":[{\"internalType\":\"contract IM87\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_tokenId\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"_bidPrice\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"_v\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_un\",\"type\":\"uint256\"}],\"name\":\"makeBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_tokenId\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"_tokenAmount\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"_v\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_un\",\"type\":\"uint256\"}],\"name\":\"makeBidInit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumBidAmount\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mottToken\",\"outputs\":[{\"internalType\":\"contract IM87\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mttToken\",\"outputs\":[{\"internalType\":\"contract IM87\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"contract IMessierNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_m87Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_messierNft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mttAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mottAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_dir\",\"type\":\"string\"}],\"name\":\"setup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MarketPlace", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}