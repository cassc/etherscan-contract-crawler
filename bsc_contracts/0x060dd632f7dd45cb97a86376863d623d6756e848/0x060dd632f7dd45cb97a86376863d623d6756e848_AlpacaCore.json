{"SourceCode": "// Dependency file: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * // importANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// Dependency file: contracts/interfaces/IGeneScience.sol\r\n\r\n\r\n// pragma solidity =0.6.12;\r\n\r\ninterface IGeneScience {\r\n    function isAlpacaGeneScience() external pure returns (bool);\r\n\r\n    /**\r\n     * @dev given genes of alpaca 1 & 2, return a genetic combination\r\n     * @param args[0] matron id\r\n     * @param args[1] matron's matron id\r\n     * @param args[2] matron's sire id\r\n     * @param args[3] matron gene (genes1)\r\n     * @param args[4] sire id\r\n     * @param args[5] sire's matron id\r\n     * @param args[6] sire's sire id\r\n     * @param args[7] sire gene (gene2)\r\n     * @param args[8] generation\r\n     * @param args[9] target block\r\n     * @return gene child gene\r\n     * @return energy energy associated with the gene\r\n     * @return generationFactor buffs child energy, higher the generation larger the generationFactor\r\n     *   energy = gene energy * generationFactor\r\n     */\r\n    function mixGenes(uint256[10] memory args)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 gene,\r\n            uint256 energy,\r\n            uint256 generationFactor\r\n        );\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/introspection/IERC165.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/introspection/ERC165Checker.sol\r\n\r\n\r\n// pragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Library used to query support of an interface declared via {IERC165}.\r\n *\r\n * Note that these functions return the actual result of the query: they do not\r\n * `revert` if an interface is not supported. It is up to the caller to decide\r\n * what to do in these cases.\r\n */\r\nlibrary ERC165Checker {\r\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\r\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\r\n\r\n    /*\r\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n\r\n    /**\r\n     * @dev Returns true if `account` supports the {IERC165} interface,\r\n     */\r\n    function supportsERC165(address account) internal view returns (bool) {\r\n        // Any contract that implements ERC165 must explicitly indicate support of\r\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\r\n        return _supportsERC165Interface(account, _INTERFACE_ID_ERC165) &&\r\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if `account` supports the interface defined by\r\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\r\n        // query support of both ERC165 as per the spec and support of _interfaceId\r\n        return supportsERC165(account) &&\r\n            _supportsERC165Interface(account, interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if `account` supports all the interfaces defined in\r\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\r\n     *\r\n     * Batch-querying can lead to gas savings by skipping repeated checks for\r\n     * {IERC165} support.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\r\n        // query support of ERC165 itself\r\n        if (!supportsERC165(account)) {\r\n            return false;\r\n        }\r\n\r\n        // query support of each interface in _interfaceIds\r\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\r\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // all interfaces supported\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Query if a contract implements an interface, does not check ERC165 support\r\n     * @param account The address of the contract to query for support of an interface\r\n     * @param interfaceId The interface identifier, as specified in ERC-165\r\n     * @return true if the contract at account indicates support of the interface with\r\n     * identifier interfaceId, false otherwise\r\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\r\n     * the behavior of this method is undefined. This precondition can be checked\r\n     * with {supportsERC165}.\r\n     * Interface identification is specified in ERC-165.\r\n     */\r\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\r\n        // success determines whether the staticcall succeeded and result determines\r\n        // whether the contract at account indicates support of _interfaceId\r\n        (bool success, bool result) = _callERC165SupportsInterface(account, interfaceId);\r\n\r\n        return (success && result);\r\n    }\r\n\r\n    /**\r\n     * @notice Calls the function with selector 0x01ffc9a7 (ERC165) and suppresses throw\r\n     * @param account The address of the contract to query for support of an interface\r\n     * @param interfaceId The interface identifier, as specified in ERC-165\r\n     * @return success true if the STATICCALL succeeded, false otherwise\r\n     * @return result true if the STATICCALL succeeded and the contract at account\r\n     * indicates support of the interface with identifier interfaceId, false otherwise\r\n     */\r\n    function _callERC165SupportsInterface(address account, bytes4 interfaceId)\r\n        private\r\n        view\r\n        returns (bool, bool)\r\n    {\r\n        bytes memory encodedParams = abi.encodeWithSelector(_INTERFACE_ID_ERC165, interfaceId);\r\n        (bool success, bytes memory result) = account.staticcall{ gas: 30000 }(encodedParams);\r\n        if (result.length < 32) return (false, false);\r\n        return (success, abi.decode(result, (bool)));\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// pragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [// importANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * // importANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/interfaces/ICryptoAlpacaEnergyListener.sol\r\n\r\n\r\n// pragma solidity 0.6.12;\r\n\r\n// import \"@openzeppelin/contracts/introspection/IERC165.sol\";\r\n\r\ninterface ICryptoAlpacaEnergyListener is IERC165 {\r\n    /**\r\n        @dev Handles the Alpaca energy change callback.\r\n        @param id The id of the Alpaca which the energy changed\r\n        @param oldEnergy The ID of the token being transferred\r\n        @param newEnergy The amount of tokens being transferred\r\n    */\r\n    function onCryptoAlpacaEnergyChanged(\r\n        uint256 id,\r\n        uint256 oldEnergy,\r\n        uint256 newEnergy\r\n    ) external;\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/utils/EnumerableMap.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Library for managing an enumerable variant of Solidity's\r\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\r\n * type.\r\n *\r\n * Maps have the following properties:\r\n *\r\n * - Entries are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableMap.UintToAddressMap private myMap;\r\n * }\r\n * ```\r\n *\r\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\r\n * supported.\r\n */\r\nlibrary EnumerableMap {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Map type with\r\n    // bytes32 keys and values.\r\n    // The Map implementation uses private functions, and user-facing\r\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\r\n    // the underlying Map.\r\n    // This means that we can only create new EnumerableMaps for types that fit\r\n    // in bytes32.\r\n\r\n    struct MapEntry {\r\n        bytes32 _key;\r\n        bytes32 _value;\r\n    }\r\n\r\n    struct Map {\r\n        // Storage of map keys and values\r\n        MapEntry[] _entries;\r\n\r\n        // Position of the entry defined by a key in the `entries` array, plus 1\r\n        // because index 0 means a key is not in the map.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\r\n     * key. O(1).\r\n     *\r\n     * Returns true if the key was added to the map, that is if it was not\r\n     * already present.\r\n     */\r\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\r\n        // We read and store the key's index to prevent multiple reads from the same storage slot\r\n        uint256 keyIndex = map._indexes[key];\r\n\r\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\r\n            map._entries.push(MapEntry({ _key: key, _value: value }));\r\n            // The entry is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            map._indexes[key] = map._entries.length;\r\n            return true;\r\n        } else {\r\n            map._entries[keyIndex - 1]._value = value;\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a key-value pair from a map. O(1).\r\n     *\r\n     * Returns true if the key was removed from the map, that is if it was present.\r\n     */\r\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\r\n        // We read and store the key's index to prevent multiple reads from the same storage slot\r\n        uint256 keyIndex = map._indexes[key];\r\n\r\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\r\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\r\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = keyIndex - 1;\r\n            uint256 lastIndex = map._entries.length - 1;\r\n\r\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            MapEntry storage lastEntry = map._entries[lastIndex];\r\n\r\n            // Move the last entry to the index where the entry to delete is\r\n            map._entries[toDeleteIndex] = lastEntry;\r\n            // Update the index for the moved entry\r\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved entry was stored\r\n            map._entries.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete map._indexes[key];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the key is in the map. O(1).\r\n     */\r\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\r\n        return map._indexes[key] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of key-value pairs in the map. O(1).\r\n     */\r\n    function _length(Map storage map) private view returns (uint256) {\r\n        return map._entries.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of entries inside the\r\n    * array, and it may change when more entries are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\r\n        require(map._entries.length > index, \"EnumerableMap: index out of bounds\");\r\n\r\n        MapEntry storage entry = map._entries[index];\r\n        return (entry._key, entry._value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value associated with `key`.  O(1).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `key` must be in the map.\r\n     */\r\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\r\n        return _get(map, key, \"EnumerableMap: nonexistent key\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\r\n     */\r\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\r\n        uint256 keyIndex = map._indexes[key];\r\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\r\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\r\n    }\r\n\r\n    // UintToAddressMap\r\n\r\n    struct UintToAddressMap {\r\n        Map _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\r\n     * key. O(1).\r\n     *\r\n     * Returns true if the key was added to the map, that is if it was not\r\n     * already present.\r\n     */\r\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\r\n        return _set(map._inner, bytes32(key), bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the key was removed from the map, that is if it was present.\r\n     */\r\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\r\n        return _remove(map._inner, bytes32(key));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the key is in the map. O(1).\r\n     */\r\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\r\n        return _contains(map._inner, bytes32(key));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of elements in the map. O(1).\r\n     */\r\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\r\n        return _length(map._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the element stored at position `index` in the set. O(1).\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\r\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\r\n        return (uint256(key), address(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value associated with `key`.  O(1).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `key` must be in the map.\r\n     */\r\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\r\n        return address(uint256(_get(map._inner, bytes32(key))));\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\r\n     */\r\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\r\n        return address(uint256(_get(map._inner, bytes32(key), errorMessage)));\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/token/ERC1155/IERC1155.sol\r\n\r\n\r\n// pragma solidity ^0.6.2;\r\n\r\n// import \"@openzeppelin/contracts/introspection/IERC165.sol\";\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\r\n\r\n    /**\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n     * `approved`.\r\n     */\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/token/ERC1155/IERC1155MetadataURI.sol\r\n\r\n\r\n// pragma solidity ^0.6.2;\r\n\r\n// import \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\n\r\n/**\r\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\r\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155MetadataURI is IERC1155 {\r\n    /**\r\n     * @dev Returns the URI for token type `id`.\r\n     *\r\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\r\n     * clients with the actual token type ID.\r\n     */\r\n    function uri(uint256 id) external view returns (string memory);\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n// import \"@openzeppelin/contracts/introspection/IERC165.sol\";\r\n\r\n/**\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155Receiver is IERC165 {\r\n\r\n    /**\r\n        @dev Handles the receipt of a single ERC1155 token type. This function is\r\n        called at the end of a `safeTransferFrom` after the balance has been updated.\r\n        To accept the transfer, this must return\r\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n        (i.e. 0xf23a6e61, or its own function selector).\r\n        @param operator The address which initiated the transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param id The ID of the token being transferred\r\n        @param value The amount of tokens being transferred\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        returns(bytes4);\r\n\r\n    /**\r\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\r\n        is called at the end of a `safeBatchTransferFrom` after the balances have\r\n        been updated. To accept the transfer(s), this must return\r\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n        (i.e. 0xbc197c81, or its own function selector).\r\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\r\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        returns(bytes4);\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/introspection/ERC165.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n// import \"@openzeppelin/contracts/introspection/IERC165.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts may inherit from this and call {_registerInterface} to declare\r\n * their support of an interface.\r\n */\r\ncontract ERC165 is IERC165 {\r\n    /*\r\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n\r\n    /**\r\n     * @dev Mapping of interface ids to whether or not it's supported.\r\n     */\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    constructor () internal {\r\n        // Derived contracts need only register support for their own interfaces,\r\n        // we register support for ERC165 itself here\r\n        _registerInterface(_INTERFACE_ID_ERC165);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     *\r\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    /**\r\n     * @dev Registers the contract as an implementer of the interface defined by\r\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\r\n     * registering its interface id is not required.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\r\n     */\r\n    function _registerInterface(bytes4 interfaceId) internal virtual {\r\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/token/ERC1155/ERC1155.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n// import \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\n// import \"@openzeppelin/contracts/token/ERC1155/IERC1155MetadataURI.sol\";\r\n// import \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\r\n// import \"@openzeppelin/contracts/GSN/Context.sol\";\r\n// import \"@openzeppelin/contracts/introspection/ERC165.sol\";\r\n// import \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n// import \"@openzeppelin/contracts/utils/Address.sol\";\r\n\r\n/**\r\n *\r\n * @dev Implementation of the basic standard multi-token.\r\n * See https://eips.ethereum.org/EIPS/eip-1155\r\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\r\n *\r\n * _Available since v3.1._\r\n */\r\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    // Mapping from token ID to account balances\r\n    mapping (uint256 => mapping(address => uint256)) private _balances;\r\n\r\n    // Mapping from account to operator approvals\r\n    mapping (address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\r\n    string private _uri;\r\n\r\n    /*\r\n     *     bytes4(keccak256('balanceOf(address,uint256)')) == 0x00fdd58e\r\n     *     bytes4(keccak256('balanceOfBatch(address[],uint256[])')) == 0x4e1273f4\r\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\r\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\r\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,uint256,bytes)')) == 0xf242432a\r\n     *     bytes4(keccak256('safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)')) == 0x2eb2c2d6\r\n     *\r\n     *     => 0x00fdd58e ^ 0x4e1273f4 ^ 0xa22cb465 ^\r\n     *        0xe985e9c5 ^ 0xf242432a ^ 0x2eb2c2d6 == 0xd9b67a26\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC1155 = 0xd9b67a26;\r\n\r\n    /*\r\n     *     bytes4(keccak256('uri(uint256)')) == 0x0e89341c\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC1155_METADATA_URI = 0x0e89341c;\r\n\r\n    /**\r\n     * @dev See {_setURI}.\r\n     */\r\n    constructor (string memory uri) public {\r\n        _setURI(uri);\r\n\r\n        // register the supported interfaces to conform to ERC1155 via ERC165\r\n        _registerInterface(_INTERFACE_ID_ERC1155);\r\n\r\n        // register the supported interfaces to conform to ERC1155MetadataURI via ERC165\r\n        _registerInterface(_INTERFACE_ID_ERC1155_METADATA_URI);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155MetadataURI-uri}.\r\n     *\r\n     * This implementation returns the same URI for *all* token types. It relies\r\n     * on the token type ID substitution mechanism\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\r\n     *\r\n     * Clients calling this function must replace the `\\{id\\}` substring with the\r\n     * actual token type ID.\r\n     */\r\n    function uri(uint256) external view override returns (string memory) {\r\n        return _uri;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) public view override returns (uint256) {\r\n        require(account != address(0), \"ERC1155: balance query for the zero address\");\r\n        return _balances[id][account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-balanceOfBatch}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(\r\n        address[] memory accounts,\r\n        uint256[] memory ids\r\n    )\r\n        public\r\n        view\r\n        override\r\n        returns (uint256[] memory)\r\n    {\r\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\r\n\r\n        uint256[] memory batchBalances = new uint256[](accounts.length);\r\n\r\n        for (uint256 i = 0; i < accounts.length; ++i) {\r\n            require(accounts[i] != address(0), \"ERC1155: batch balance query for the zero address\");\r\n            batchBalances[i] = _balances[ids[i]][accounts[i]];\r\n        }\r\n\r\n        return batchBalances;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(_msgSender() != operator, \"ERC1155: setting approval status for self\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) public view override returns (bool) {\r\n        return _operatorApprovals[account][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    )\r\n        public\r\n        virtual\r\n        override\r\n    {\r\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\r\n        require(\r\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\r\n            \"ERC1155: caller is not owner nor approved\"\r\n        );\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\r\n\r\n        _balances[id][from] = _balances[id][from].sub(amount, \"ERC1155: insufficient balance for transfer\");\r\n        _balances[id][to] = _balances[id][to].add(amount);\r\n\r\n        emit TransferSingle(operator, from, to, id, amount);\r\n\r\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-safeBatchTransferFrom}.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    )\r\n        public\r\n        virtual\r\n        override\r\n    {\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\r\n        require(\r\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\r\n            \"ERC1155: transfer caller is not owner nor approved\"\r\n        );\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n\r\n        for (uint256 i = 0; i < ids.length; ++i) {\r\n            uint256 id = ids[i];\r\n            uint256 amount = amounts[i];\r\n\r\n            _balances[id][from] = _balances[id][from].sub(\r\n                amount,\r\n                \"ERC1155: insufficient balance for transfer\"\r\n            );\r\n            _balances[id][to] = _balances[id][to].add(amount);\r\n        }\r\n\r\n        emit TransferBatch(operator, from, to, ids, amounts);\r\n\r\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets a new URI for all token types, by relying on the token type ID\r\n     * substitution mechanism\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\r\n     *\r\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\r\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\r\n     * clients with the token type ID.\r\n     *\r\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\r\n     * interpreted by clients as\r\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\r\n     * for token type ID 0x4cce0.\r\n     *\r\n     * See {uri}.\r\n     *\r\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\r\n     * this function emits no events.\r\n     */\r\n    function _setURI(string memory newuri) internal virtual {\r\n        _uri = newuri;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual {\r\n        require(account != address(0), \"ERC1155: mint to the zero address\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\r\n\r\n        _balances[id][account] = _balances[id][account].add(amount);\r\n        emit TransferSingle(operator, address(0), account, id, amount);\r\n\r\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\r\n    }\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {\r\n        require(to != address(0), \"ERC1155: mint to the zero address\");\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\r\n\r\n        for (uint i = 0; i < ids.length; i++) {\r\n            _balances[ids[i]][to] = amounts[i].add(_balances[ids[i]][to]);\r\n        }\r\n\r\n        emit TransferBatch(operator, address(0), to, ids, amounts);\r\n\r\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens of token type `id` from `account`\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens of token type `id`.\r\n     */\r\n    function _burn(address account, uint256 id, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC1155: burn from the zero address\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \"\");\r\n\r\n        _balances[id][account] = _balances[id][account].sub(\r\n            amount,\r\n            \"ERC1155: burn amount exceeds balance\"\r\n        );\r\n\r\n        emit TransferSingle(operator, account, address(0), id, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     */\r\n    function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual {\r\n        require(account != address(0), \"ERC1155: burn from the zero address\");\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \"\");\r\n\r\n        for (uint i = 0; i < ids.length; i++) {\r\n            _balances[ids[i]][account] = _balances[ids[i]][account].sub(\r\n                amounts[i],\r\n                \"ERC1155: burn amount exceeds balance\"\r\n            );\r\n        }\r\n\r\n        emit TransferBatch(operator, account, address(0), ids, amounts);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning, as well as batched variants.\r\n     *\r\n     * The same hook is called on both single and batched variants. For single\r\n     * transfers, the length of the `id` and `amount` arrays will be 1.\r\n     *\r\n     * Calling conditions (for each `id` and `amount` pair):\r\n     *\r\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * of token type `id` will be  transferred to `to`.\r\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\r\n     * for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\r\n     * will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     * - `ids` and `amounts` have the same, non-zero length.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    )\r\n        internal virtual\r\n    { }\r\n\r\n    function _doSafeTransferAcceptanceCheck(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    )\r\n        private\r\n    {\r\n        if (to.isContract()) {\r\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\r\n                if (response != IERC1155Receiver(to).onERC1155Received.selector) {\r\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\r\n                }\r\n            } catch Error(string memory reason) {\r\n                revert(reason);\r\n            } catch {\r\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function _doSafeBatchTransferAcceptanceCheck(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    )\r\n        private\r\n    {\r\n        if (to.isContract()) {\r\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {\r\n                if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {\r\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\r\n                }\r\n            } catch Error(string memory reason) {\r\n                revert(reason);\r\n            } catch {\r\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\r\n        uint256[] memory array = new uint256[](1);\r\n        array[0] = element;\r\n\r\n        return array;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n// import \"@openzeppelin/contracts/GSN/Context.sol\";\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/interfaces/IAlpaSupplier.sol\r\n\r\n\r\n// pragma solidity 0.6.12;\r\n\r\ninterface IAlpaSupplier {\r\n    /**\r\n     * @dev mint and distribute ALPA to caller\r\n     * NOTE: caller must be approved consumer\r\n     */\r\n    function distribute(uint256 _since) external returns (uint256);\r\n\r\n    /**\r\n     * @dev mint and distribute exact amount of ALPA to caller\r\n     * NOTE: caller must be approved consumer\r\n     */\r\n    function distributeExact(uint256 _amount) external returns (uint256);\r\n\r\n    /**\r\n     * @dev returns number of ALPA _consumer is expected to recieved at current block\r\n     * NOTE: caller must be approved consumer\r\n     */\r\n    function preview(address _consumer, uint256 _since)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev burn alpa\r\n     * NOTE: caller must be approved consumer\r\n     */\r\n    function burn(address _account, uint256 _amount) external;\r\n}\r\n\r\n\r\n// Dependency file: contracts/CryptoAlpaca/AlpacaBase.sol\r\n\r\n\r\n// pragma solidity =0.6.12;\r\n\r\n// import \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import \"@openzeppelin/contracts/utils/EnumerableMap.sol\";\r\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n// import \"contracts/interfaces/IGeneScience.sol\";\r\n// import \"contracts/interfaces/IAlpaSupplier.sol\";\r\n\r\ncontract AlpacaBase is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    /* ========== ENUM ========== */\r\n\r\n    /**\r\n     * @dev Alpaca can be in one of the two state:\r\n     *\r\n     * EGG - When two alpaca breed with each other, alpaca EGG is created.\r\n     *       `gene` and `energy` are both 0 and will be assigned when egg is cracked\r\n     *\r\n     * GROWN - When egg is cracked and alpaca is born! `gene` and `energy` are determined\r\n     *         in this state.\r\n     */\r\n    enum AlpacaGrowthState {EGG, GROWN}\r\n\r\n    /* ========== PUBLIC STATE VARIABLES ========== */\r\n\r\n    /**\r\n     * @dev payment required to use cracked if it's done automatically\r\n     * assigning to 0 indicate cracking action is not automatic\r\n     */\r\n    uint256 public autoCrackingFee = 0;\r\n\r\n    /**\r\n     * @dev Base breeding ALPA fee\r\n     */\r\n    uint256 public baseHatchingFee = 10e18; // 10 ALPA\r\n\r\n    /**\r\n     * @dev ALPA ERC20 contract address\r\n     */\r\n    IERC20 public alpa;\r\n\r\n    /**\r\n     * @dev 10% of the breeding ALPA fee goes to `devAddress`\r\n     */\r\n    address public devAddress;\r\n\r\n    /**\r\n     * @dev 10% of the breeding ALPA fee goes to `devAddress`\r\n     */\r\n    IAlpaSupplier public alpaSupplier;\r\n\r\n    /**\r\n     * @dev number of percentage breeding ALPA fund goes to devAddress\r\n     * dev percentage = devBreedingPercentage / 100\r\n     * staking percentage = (100 - devBreedingPercentage) / 100\r\n     */\r\n    uint256 public devBreedingPercentage = 10;\r\n\r\n    /**\r\n     * @dev An approximation of currently how many seconds are in between blocks.\r\n     */\r\n    uint256 public secondsPerBlock = 3;\r\n\r\n    /**\r\n     * @dev amount of time a new born alpaca needs to wait before participating in breeding activity.\r\n     */\r\n    uint256 public newBornCoolDown = uint256(3 days);\r\n\r\n    /**\r\n     * @dev amount of time an egg needs to wait to be cracked\r\n     */\r\n    uint256 public hatchingDuration = uint256(5 minutes);\r\n\r\n    /**\r\n     * @dev when two alpaca just bred, the breeding multiplier will doubled to control\r\n     * alpaca's population. This is the amount of time each parent must wait for the\r\n     * breeding multiplier to reset back to 1\r\n     */\r\n    uint256 public hatchingMultiplierCoolDown = uint256(7 days);\r\n\r\n    /**\r\n     * @dev hard cap on the maximum hatching cost multiplier it can reach to\r\n     */\r\n    uint16 public maxHatchCostMultiplier = 8;\r\n\r\n    /**\r\n     * @dev Gen0 generation factor\r\n     */\r\n    uint64 public constant GEN0_GENERATION_FACTOR = 10;\r\n\r\n    /**\r\n     * @dev hatching fee increase with higher alpa generation\r\n     */\r\n    uint256 public generationHatchingFeeMultiplier = 2;\r\n\r\n    /**\r\n     * @dev gene science contract address for genetic combination algorithm.\r\n     */\r\n    IGeneScience public geneScience;\r\n\r\n    /* ========== INTERNAL STATE VARIABLES ========== */\r\n\r\n    /**\r\n     * @dev An array containing the Alpaca struct for all Alpacas in existence. The ID\r\n     * of each alpaca is the index into this array.\r\n     */\r\n    Alpaca[] internal alpacas;\r\n\r\n    /**\r\n     * @dev mapping from AlpacaIDs to an address where alpaca owner approved address to use\r\n     * this alpca for breeding. addrss can breed with this cat multiple times without limit.\r\n     * This will be resetted everytime someone transfered the alpaca.\r\n     */\r\n    EnumerableMap.UintToAddressMap internal alpacaAllowedToAddress;\r\n\r\n    /* ========== ALPACA STRUCT ========== */\r\n\r\n    /**\r\n     * @dev Everything about your alpaca is stored in here. Each alpaca's appearance\r\n     * is determined by the gene. The energy associated with each alpaca is also\r\n     * related to the gene\r\n     */\r\n    struct Alpaca {\r\n        // Theaalpaca genetic code.\r\n        uint256 gene;\r\n        // the alpaca energy level\r\n        uint32 energy;\r\n        // The timestamp from the block when this alpaca came into existence.\r\n        uint64 birthTime;\r\n        // The minimum timestamp alpaca needs to wait to avoid hatching multiplier\r\n        uint64 hatchCostMultiplierEndBlock;\r\n        // hatching cost multiplier\r\n        uint16 hatchingCostMultiplier;\r\n        // The ID of the parents of this alpaca, set to 0 for gen0 alpaca.\r\n        uint32 matronId;\r\n        uint32 sireId;\r\n        // The \"generation number\" of this alpaca. The generation number of an alpacas\r\n        // is the smaller of the two generation numbers of their parents, plus one.\r\n        uint16 generation;\r\n        // The minimum timestamp new born alpaca needs to wait to hatch egg.\r\n        uint64 cooldownEndBlock;\r\n        // The generation factor buffs alpaca energy level\r\n        uint64 generationFactor;\r\n        // defines current alpaca state\r\n        AlpacaGrowthState state;\r\n    }\r\n\r\n    /* ========== VIEW ========== */\r\n\r\n    function getTotalAlpaca() external view returns (uint256) {\r\n        return alpacas.length;\r\n    }\r\n\r\n    function _getBaseHatchingCost(uint256 _generation)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return\r\n            baseHatchingFee.add(\r\n                _generation.mul(generationHatchingFeeMultiplier).mul(1e18)\r\n            );\r\n    }\r\n\r\n    /* ========== OWNER MUTATIVE FUNCTION ========== */\r\n\r\n    /**\r\n     * @param _hatchingDuration hatching duration\r\n     */\r\n    function setHatchingDuration(uint256 _hatchingDuration) external onlyOwner {\r\n        hatchingDuration = _hatchingDuration;\r\n    }\r\n\r\n    /**\r\n     * @param _devAddress dev address\r\n     */\r\n    function setDevAddress(address _devAddress) external onlyDev {\r\n        devAddress = _devAddress;\r\n    }\r\n\r\n    /**\r\n     * @param _maxHatchCostMultiplier max hatch cost multiplier\r\n     */\r\n    function setMaxHatchCostMultiplier(uint16 _maxHatchCostMultiplier)\r\n        external\r\n        onlyOwner\r\n    {\r\n        maxHatchCostMultiplier = _maxHatchCostMultiplier;\r\n    }\r\n\r\n    /**\r\n     * @param _devBreedingPercentage base generation factor\r\n     */\r\n    function setDevBreedingPercentage(uint256 _devBreedingPercentage)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(devBreedingPercentage <= 100);\r\n        devBreedingPercentage = _devBreedingPercentage;\r\n    }\r\n\r\n    /**\r\n     * @param _generationHatchingFeeMultiplier multiplier\r\n     */\r\n    function setGenerationHatchingFeeMultiplier(\r\n        uint256 _generationHatchingFeeMultiplier\r\n    ) external onlyOwner {\r\n        generationHatchingFeeMultiplier = _generationHatchingFeeMultiplier;\r\n    }\r\n\r\n    /**\r\n     * @param _baseHatchingFee base birthing\r\n     */\r\n    function setBaseHatchingFee(uint256 _baseHatchingFee) external onlyOwner {\r\n        baseHatchingFee = _baseHatchingFee;\r\n    }\r\n\r\n    /**\r\n     * @param _newBornCoolDown new born cool down\r\n     */\r\n    function setNewBornCoolDown(uint256 _newBornCoolDown) external onlyOwner {\r\n        newBornCoolDown = _newBornCoolDown;\r\n    }\r\n\r\n    /**\r\n     * @param _hatchingMultiplierCoolDown base birthing\r\n     */\r\n    function setHatchingMultiplierCoolDown(uint256 _hatchingMultiplierCoolDown)\r\n        external\r\n        onlyOwner\r\n    {\r\n        hatchingMultiplierCoolDown = _hatchingMultiplierCoolDown;\r\n    }\r\n\r\n    /**\r\n     * @dev update how many seconds per blocks are currently observed.\r\n     * @param _secs number of seconds\r\n     */\r\n    function setSecondsPerBlock(uint256 _secs) external onlyOwner {\r\n        secondsPerBlock = _secs;\r\n    }\r\n\r\n    /**\r\n     * @dev only owner can update autoCrackingFee\r\n     */\r\n    function setAutoCrackingFee(uint256 _autoCrackingFee) external onlyOwner {\r\n        autoCrackingFee = _autoCrackingFee;\r\n    }\r\n\r\n    /**\r\n     * @dev owner can upgrading gene science\r\n     */\r\n    function setGeneScience(IGeneScience _geneScience) external onlyOwner {\r\n        require(_geneScience.isAlpacaGeneScience());\r\n\r\n        // Set the new contract address\r\n        geneScience = _geneScience;\r\n    }\r\n\r\n    /**\r\n     * @dev owner can update ALPA erc20 token location\r\n     */\r\n    function setAlpaContract(IERC20 _alpa) external onlyOwner {\r\n        alpa = _alpa;\r\n    }\r\n\r\n    /* ========== MODIFIER ========== */\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the dev.\r\n     */\r\n    modifier onlyDev() {\r\n        require(devAddress == _msgSender());\r\n        _;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/CryptoAlpaca/AlpacaToken.sol\r\n\r\n\r\n// pragma solidity =0.6.12;\r\n\r\n// import \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\r\n// import \"contracts/CryptoAlpaca/AlpacaBase.sol\";\r\n\r\ncontract AlpacaToken is AlpacaBase, ERC1155(\"\") {\r\n    /* ========== EVENTS ========== */\r\n\r\n    /**\r\n     * @dev Emitted when single `alpacaId` alpaca with `gene` and `energy` is born\r\n     */\r\n    event BornSingle(uint256 indexed alpacaId, uint256 gene, uint256 energy);\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {BornSingle} events\r\n     */\r\n    event BornBatch(uint256[] alpacaIds, uint256[] genes, uint256[] energy);\r\n\r\n    /* ========== VIEWS ========== */\r\n\r\n    /**\r\n     * @dev Check if `_alpacaId` is owned by `_account`\r\n     */\r\n    function isOwnerOf(address _account, uint256 _alpacaId)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return balanceOf(_account, _alpacaId) == 1;\r\n    }\r\n\r\n    /* ========== OWNER MUTATIVE FUNCTION ========== */\r\n\r\n    /**\r\n     * @dev Allow contract owner to update URI to look up all alpaca metadata\r\n     */\r\n    function setURI(string memory _newuri) external onlyOwner {\r\n        _setURI(_newuri);\r\n    }\r\n\r\n    /**\r\n     * @dev Allow contract owner to create alpaca with `_gene`,\r\n     *   `_energy` and transfer to `owner`\r\n     */\r\n    function createAlpaca(\r\n        uint256 _gene,\r\n        uint256 _energy,\r\n        uint16 _generation,\r\n        address _owner\r\n    ) external onlyOwner {\r\n        address alpacaOwner = _owner;\r\n        if (alpacaOwner == address(0)) {\r\n            alpacaOwner = owner();\r\n        }\r\n\r\n        _createAlpaca(_gene, _energy, _generation, alpacaOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {createAlpaca} function\r\n     */\r\n    function createAlpacaBatch(\r\n        uint256[] memory _genes,\r\n        uint256[] memory _energies,\r\n        uint16 _generation,\r\n        address _owner\r\n    ) external onlyOwner {\r\n        address alpacaOwner = _owner;\r\n        if (alpacaOwner == address(0)) {\r\n            alpacaOwner = owner();\r\n        }\r\n\r\n        _createAlpacaBatch(_genes, _energies, _generation, _owner);\r\n    }\r\n\r\n    /* ========== INTERNAL ALPA GENERATION ========== */\r\n\r\n    /**\r\n     * @dev Create an alpaca egg. Egg's `gene` and `energy` will assigned to 0\r\n     * initially and won't be determined until egg is cracked.\r\n     */\r\n    function _createEgg(\r\n        uint256 _matronId,\r\n        uint256 _sireId,\r\n        uint256 _generation,\r\n        uint256 _cooldownEndBlock,\r\n        address _owner\r\n    ) internal returns (uint256) {\r\n        require(_matronId == uint256(uint32(_matronId)));\r\n        require(_sireId == uint256(uint32(_sireId)));\r\n        require(_generation == uint256(uint16(_generation)));\r\n\r\n        Alpaca memory _alpaca = Alpaca({\r\n            gene: 0,\r\n            energy: 0,\r\n            birthTime: uint64(now),\r\n            hatchCostMultiplierEndBlock: 0,\r\n            hatchingCostMultiplier: 1,\r\n            matronId: uint32(_matronId),\r\n            sireId: uint32(_sireId),\r\n            cooldownEndBlock: uint64(_cooldownEndBlock),\r\n            generation: uint16(_generation),\r\n            generationFactor: 0,\r\n            state: AlpacaGrowthState.EGG\r\n        });\r\n\r\n        alpacas.push(_alpaca);\r\n        uint256 eggId = alpacas.length - 1;\r\n\r\n        _mint(_owner, eggId, 1, \"\");\r\n\r\n        return eggId;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal alpaca creation function\r\n     */\r\n    function _createAlpaca(\r\n        uint256 _gene,\r\n        uint256 _energy,\r\n        uint16 _generation,\r\n        address _owner\r\n    ) internal returns (uint256) {\r\n        Alpaca memory _alpaca = Alpaca({\r\n            gene: _gene,\r\n            energy: uint32(_energy),\r\n            birthTime: uint64(now),\r\n            hatchCostMultiplierEndBlock: 0,\r\n            hatchingCostMultiplier: 1,\r\n            matronId: 0,\r\n            sireId: 0,\r\n            cooldownEndBlock: 0,\r\n            generation: _generation,\r\n            generationFactor: GEN0_GENERATION_FACTOR,\r\n            state: AlpacaGrowthState.GROWN\r\n        });\r\n\r\n        alpacas.push(_alpaca);\r\n        uint256 newAlpacaID = alpacas.length - 1;\r\n\r\n        _mint(_owner, newAlpacaID, 1, \"\");\r\n\r\n        // emit the born event\r\n        emit BornSingle(newAlpacaID, _gene, _energy);\r\n\r\n        return newAlpacaID;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal alpaca batch creation function\r\n     */\r\n    function _createAlpacaBatch(\r\n        uint256[] memory _genes,\r\n        uint256[] memory _energies,\r\n        uint16 _generation,\r\n        address _owner\r\n    ) internal returns (uint256[] memory) {\r\n        require(_genes.length > 0);\r\n        require(_genes.length == _energies.length);\r\n\r\n        uint256 alpacaIdStart = alpacas.length;\r\n        uint256[] memory ids = new uint256[](_genes.length);\r\n        uint256[] memory amount = new uint256[](_genes.length);\r\n\r\n        for (uint256 i = 0; i < _genes.length; i++) {\r\n            Alpaca memory _alpaca = Alpaca({\r\n                gene: _genes[i],\r\n                energy: uint32(_energies[i]),\r\n                birthTime: uint64(now),\r\n                hatchCostMultiplierEndBlock: 0,\r\n                hatchingCostMultiplier: 1,\r\n                matronId: 0,\r\n                sireId: 0,\r\n                cooldownEndBlock: 0,\r\n                generation: _generation,\r\n                generationFactor: GEN0_GENERATION_FACTOR,\r\n                state: AlpacaGrowthState.GROWN\r\n            });\r\n\r\n            alpacas.push(_alpaca);\r\n            ids[i] = alpacaIdStart + i;\r\n            amount[i] = 1;\r\n        }\r\n\r\n        _mintBatch(_owner, ids, amount, \"\");\r\n\r\n        emit BornBatch(ids, _genes, _energies);\r\n\r\n        return ids;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/interfaces/ICryptoAlpaca.sol\r\n\r\n\r\n// pragma solidity =0.6.12;\r\n\r\n// import \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\n\r\ninterface ICryptoAlpaca is IERC1155 {\r\n    function getAlpaca(uint256 _id)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 id,\r\n            bool isReady,\r\n            uint256 cooldownEndBlock,\r\n            uint256 birthTime,\r\n            uint256 matronId,\r\n            uint256 sireId,\r\n            uint256 hatchingCost,\r\n            uint256 hatchingCostMultiplier,\r\n            uint256 hatchCostMultiplierEndBlock,\r\n            uint256 generation,\r\n            uint256 gene,\r\n            uint256 energy,\r\n            uint256 state\r\n        );\r\n\r\n    function hasPermissionToBreedAsSire(address _addr, uint256 _id)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    function grantPermissionToBreed(address _addr, uint256 _sireId) external;\r\n\r\n    function clearPermissionToBreed(uint256 _alpacaId) external;\r\n\r\n    function hatch(uint256 _matronId, uint256 _sireId)\r\n        external\r\n        payable\r\n        returns (uint256);\r\n\r\n    function crack(uint256 _id) external;\r\n}\r\n\r\n\r\n// Dependency file: contracts/CryptoAlpaca/AlpacaBreed.sol\r\n\r\n\r\n// pragma solidity =0.6.12;\r\n\r\n// import \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n// import \"@openzeppelin/contracts/utils/EnumerableMap.sol\";\r\n// import \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\n\r\n// import \"contracts/CryptoAlpaca/AlpacaToken.sol\";\r\n// import \"contracts/interfaces/ICryptoAlpaca.sol\";\r\n\r\ncontract AlpacaBreed is AlpacaToken, ICryptoAlpaca, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\r\n\r\n    /* ========== EVENTS ========== */\r\n\r\n    // The Hatched event is fired when two alpaca successfully hached an egg.\r\n    event Hatched(\r\n        uint256 indexed eggId,\r\n        uint256 matronId,\r\n        uint256 sireId,\r\n        uint256 cooldownEndBlock\r\n    );\r\n\r\n    // The GrantedToBreed event is fired whne an alpaca's owner granted\r\n    // addr account to use alpacaId as sire to breed.\r\n    event GrantedToBreed(uint256 indexed alpacaId, address addr);\r\n\r\n    // The RevokedPermissionToBreed event is fired whne an alpaca's owner cleared\r\n    // addr account to use alpacaId as sire to breed.\r\n    event ClearPermissionToBreed(uint256 indexed alpacaId);\r\n\r\n    /* ========== VIEWS ========== */\r\n\r\n    /**\r\n     * Returns all the relevant information about a specific alpaca.\r\n     * @param _id The ID of the alpaca of interest.\r\n     */\r\n    function getAlpaca(uint256 _id)\r\n        external\r\n        override\r\n        view\r\n        returns (\r\n            uint256 id,\r\n            bool isReady,\r\n            uint256 cooldownEndBlock,\r\n            uint256 birthTime,\r\n            uint256 matronId,\r\n            uint256 sireId,\r\n            uint256 hatchingCost,\r\n            uint256 hatchingCostMultiplier,\r\n            uint256 hatchCostMultiplierEndBlock,\r\n            uint256 generation,\r\n            uint256 gene,\r\n            uint256 energy,\r\n            uint256 state\r\n        )\r\n    {\r\n        Alpaca storage alpaca = alpacas[_id];\r\n\r\n        id = _id;\r\n        isReady = (alpaca.cooldownEndBlock <= block.number);\r\n        cooldownEndBlock = alpaca.cooldownEndBlock;\r\n        birthTime = alpaca.birthTime;\r\n        matronId = alpaca.matronId;\r\n        sireId = alpaca.sireId;\r\n        hatchingCost = _getBaseHatchingCost(alpaca.generation);\r\n        hatchingCostMultiplier = alpaca.hatchingCostMultiplier;\r\n        if (alpaca.hatchCostMultiplierEndBlock <= block.number) {\r\n            hatchingCostMultiplier = 1;\r\n        }\r\n\r\n        hatchCostMultiplierEndBlock = alpaca.hatchCostMultiplierEndBlock;\r\n        generation = alpaca.generation;\r\n        gene = alpaca.gene;\r\n        energy = alpaca.energy;\r\n        state = uint256(alpaca.state);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculating hatching ALPA cost\r\n     */\r\n    function hatchingALPACost(uint256 _matronId, uint256 _sireId)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _hatchingALPACost(_matronId, _sireId, false);\r\n    }\r\n\r\n    /**\r\n     * @dev Checks to see if a given egg passed cooldownEndBlock and ready to crack\r\n     * @param _id alpaca egg ID\r\n     */\r\n\r\n    function isReadyToCrack(uint256 _id) external view returns (bool) {\r\n        Alpaca storage alpaca = alpacas[_id];\r\n        return\r\n            (alpaca.state == AlpacaGrowthState.EGG) &&\r\n            (alpaca.cooldownEndBlock <= uint64(block.number));\r\n    }\r\n\r\n    /* ========== EXTERNAL MUTATIVE FUNCTIONS  ========== */\r\n\r\n    /**\r\n     * Grants permission to another account to sire with one of your alpacas.\r\n     * @param _addr The address that will be able to use sire for breeding.\r\n     * @param _sireId a alpaca _addr will be able to use for breeding as sire.\r\n     */\r\n    function grantPermissionToBreed(address _addr, uint256 _sireId)\r\n        external\r\n        override\r\n    {\r\n        require(isOwnerOf(msg.sender, _sireId));\r\n\r\n        alpacaAllowedToAddress.set(_sireId, _addr);\r\n        emit GrantedToBreed(_sireId, _addr);\r\n    }\r\n\r\n    /**\r\n     * check if `_addr` has permission to user alpaca `_id` to breed with as sire.\r\n     */\r\n    function hasPermissionToBreedAsSire(address _addr, uint256 _id)\r\n        external\r\n        override\r\n        view\r\n        returns (bool)\r\n    {\r\n        if (isOwnerOf(_addr, _id)) {\r\n            return true;\r\n        }\r\n\r\n        return\r\n            alpacaAllowedToAddress.contains(_id) &&\r\n            alpacaAllowedToAddress.get(_id) == _addr;\r\n    }\r\n\r\n    /**\r\n     * Clear the permission on alpaca for another user to use to breed.\r\n     * @param _alpacaId a alpaca to clear permission .\r\n     */\r\n    function clearPermissionToBreed(uint256 _alpacaId) external override {\r\n        require(isOwnerOf(msg.sender, _alpacaId));\r\n\r\n        alpacaAllowedToAddress.remove(_alpacaId);\r\n\r\n        emit ClearPermissionToBreed(_alpacaId);\r\n    }\r\n\r\n    /**\r\n     * @dev Hatch an baby alpaca egg with two alpaca you own (_matronId and _sireId).\r\n     * Requires a pre-payment of the fee given out to the first caller of crack()\r\n     * @param _matronId The ID of the Alpaca acting as matron\r\n     * @param _sireId The ID of the Alpaca acting as sire\r\n     * @return The hatched alpaca egg ID\r\n     */\r\n    function hatch(uint256 _matronId, uint256 _sireId)\r\n        external\r\n        override\r\n        payable\r\n        nonReentrant\r\n        returns (uint256)\r\n    {\r\n        address msgSender = msg.sender;\r\n\r\n        // Checks for payment.\r\n        require(msg.value >= autoCrackingFee, \"AC: autoCrackingFee not sent\");\r\n\r\n        // Checks for ALPA payment\r\n        require(\r\n            alpa.allowance(msgSender, address(this)) >=\r\n                _hatchingALPACost(_matronId, _sireId, true),\r\n            \"AC: insufficient ALPA\"\r\n        );\r\n\r\n        // Checks if matron and sire are valid mating pair\r\n        require(\r\n            _ownerPermittedToBreed(msgSender, _matronId, _sireId),\r\n            \"AC: invalid permission\"\r\n        );\r\n\r\n        // Grab a reference to the potential matron\r\n        Alpaca storage matron = alpacas[_matronId];\r\n\r\n        // Make sure matron isn't pregnant, or in the middle of a siring cooldown\r\n        require(_isReadyToHatch(matron), \"AC: matron not ready\");\r\n\r\n        // Grab a reference to the potential sire\r\n        Alpaca storage sire = alpacas[_sireId];\r\n\r\n        // Make sure sire isn't pregnant, or in the middle of a siring cooldown\r\n        require(_isReadyToHatch(sire), \"AC: Sire not ready\");\r\n\r\n        // Test that matron and sire are a valid mating pair.\r\n        require(\r\n            _isValidMatingPair(matron, _matronId, sire, _sireId),\r\n            \"AC: invalid mating pair\"\r\n        );\r\n\r\n        // All checks passed, Alpaca gets pregnant!\r\n        return _hatchEgg(_matronId, _sireId);\r\n    }\r\n\r\n    /**\r\n     * @dev egg is ready to crack and give life to baby alpaca!\r\n     * @param _id A Alpaca egg that's ready to crack.\r\n     */\r\n    function crack(uint256 _id) external override nonReentrant {\r\n        // Grab a reference to the egg in storage.\r\n        Alpaca storage egg = alpacas[_id];\r\n\r\n        // Check that the egg is a valid alpaca.\r\n        require(egg.birthTime != 0, \"AC: invalid egg\");\r\n        require(egg.state == AlpacaGrowthState.EGG, \"AC: invalid egg\");\r\n\r\n        // Check that the matron is pregnant, and that its time has come!\r\n        require(_isReadyToCrack(egg), \"AC: not ready\");\r\n\r\n        // Grab a reference to the sire in storage.\r\n        Alpaca storage matron = alpacas[egg.matronId];\r\n        Alpaca storage sire = alpacas[egg.sireId];\r\n\r\n        uint256[10] memory args = [\r\n            egg.matronId,\r\n            matron.matronId,\r\n            matron.sireId,\r\n            matron.gene,\r\n            egg.sireId,\r\n            sire.matronId,\r\n            sire.sireId,\r\n            sire.gene,\r\n            egg.generation,\r\n            uint256(egg.cooldownEndBlock).sub(1)\r\n        ];\r\n\r\n        // Call the sooper-sekret gene mixing operation.\r\n        (\r\n            uint256 childGene,\r\n            uint256 childEnergy,\r\n            uint256 generationFactor\r\n        ) = geneScience.mixGenes(args);\r\n\r\n        egg.gene = childGene;\r\n        egg.energy = uint32(childEnergy);\r\n        egg.state = AlpacaGrowthState.GROWN;\r\n        egg.cooldownEndBlock = uint64(\r\n            (newBornCoolDown.div(secondsPerBlock)).add(block.number)\r\n        );\r\n        egg.generationFactor = uint64(generationFactor);\r\n\r\n        // Send the balance fee to the person who made birth happen.\r\n        if (autoCrackingFee > 0) {\r\n            msg.sender.transfer(autoCrackingFee);\r\n        }\r\n\r\n        // emit the born event\r\n        emit BornSingle(_id, childGene, childEnergy);\r\n    }\r\n\r\n    /* ========== PRIVATE FUNCTION ========== */\r\n\r\n    /**\r\n     * @dev Recalculate the hatchingCostMultiplier for alpaca after breed.\r\n     * If hatchCostMultiplierEndBlock is less than current block number\r\n     * reset hatchingCostMultiplier back to 2, otherwize multiply hatchingCostMultiplier by 2. Also update\r\n     * hatchCostMultiplierEndBlock.\r\n     */\r\n    function _refreshHatchingMultiplier(Alpaca storage _alpaca) private {\r\n        if (_alpaca.hatchCostMultiplierEndBlock < block.number) {\r\n            _alpaca.hatchingCostMultiplier = 2;\r\n        } else {\r\n            uint16 newMultiplier = _alpaca.hatchingCostMultiplier * 2;\r\n            if (newMultiplier > maxHatchCostMultiplier) {\r\n                newMultiplier = maxHatchCostMultiplier;\r\n            }\r\n\r\n            _alpaca.hatchingCostMultiplier = newMultiplier;\r\n        }\r\n        _alpaca.hatchCostMultiplierEndBlock = uint64(\r\n            (hatchingMultiplierCoolDown.div(secondsPerBlock)).add(block.number)\r\n        );\r\n    }\r\n\r\n    function _ownerPermittedToBreed(\r\n        address _sender,\r\n        uint256 _matronId,\r\n        uint256 _sireId\r\n    ) private view returns (bool) {\r\n        // owner must own matron, othersize not permitted\r\n        bool ownMatron = isOwnerOf(_sender, _matronId);\r\n        bool hasPermissionMatron = false;\r\n        if (!ownMatron) {\r\n            hasPermissionMatron =\r\n                alpacaAllowedToAddress.contains(_matronId) &&\r\n                alpacaAllowedToAddress.get(_matronId) == _sender;\r\n        }\r\n\r\n        bool ownSire = isOwnerOf(_sender, _sireId);\r\n        bool hasPermissionSire = false;\r\n        if (!ownSire) {\r\n            hasPermissionSire =\r\n                alpacaAllowedToAddress.contains(_sireId) &&\r\n                alpacaAllowedToAddress.get(_sireId) == _sender;\r\n        }\r\n\r\n        return\r\n            (ownMatron || hasPermissionMatron) &&\r\n            (ownSire || hasPermissionSire);\r\n    }\r\n\r\n    /**\r\n     * @dev Checks that a given alpaca is able to breed. Requires that the\r\n     * current cooldown is finished (for sires) and also checks that there is\r\n     * no pending pregnancy.\r\n     */\r\n    function _isReadyToHatch(Alpaca storage _alpaca)\r\n        private\r\n        view\r\n        returns (bool)\r\n    {\r\n        return\r\n            (_alpaca.state == AlpacaGrowthState.GROWN) &&\r\n            (_alpaca.cooldownEndBlock < uint64(block.number));\r\n    }\r\n\r\n    /**\r\n     * @dev Checks to see if a given alpaca is pregnant and (if so) if the gestation\r\n     * period has passed.\r\n     */\r\n\r\n    function _isReadyToCrack(Alpaca storage _egg) private view returns (bool) {\r\n        return\r\n            (_egg.state == AlpacaGrowthState.EGG) &&\r\n            (_egg.cooldownEndBlock < uint64(block.number));\r\n    }\r\n\r\n    /**\r\n     * @dev Calculating breeding ALPA cost for internal usage.\r\n     */\r\n    function _hatchingALPACost(\r\n        uint256 _matronId,\r\n        uint256 _sireId,\r\n        bool _strict\r\n    ) private view returns (uint256) {\r\n        uint256 blockNum = block.number;\r\n        if (!_strict) {\r\n            blockNum = blockNum + 1;\r\n        }\r\n\r\n        Alpaca storage sire = alpacas[_sireId];\r\n        uint256 sireHatchingBase = _getBaseHatchingCost(sire.generation);\r\n        uint256 sireMultiplier = sire.hatchingCostMultiplier;\r\n        if (sire.hatchCostMultiplierEndBlock < blockNum) {\r\n            sireMultiplier = 1;\r\n        }\r\n\r\n        Alpaca storage matron = alpacas[_matronId];\r\n        uint256 matronHatchingBase = _getBaseHatchingCost(matron.generation);\r\n        uint256 matronMultiplier = matron.hatchingCostMultiplier;\r\n        if (matron.hatchCostMultiplierEndBlock < blockNum) {\r\n            matronMultiplier = 1;\r\n        }\r\n\r\n        return\r\n            (sireHatchingBase.mul(sireMultiplier)).add(\r\n                matronHatchingBase.mul(matronMultiplier)\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Internal utility function to initiate hatching egg, assumes that all breeding\r\n     *  requirements have been checked.\r\n     */\r\n    function _hatchEgg(uint256 _matronId, uint256 _sireId)\r\n        private\r\n        returns (uint256)\r\n    {\r\n        // Transfer birthing ALPA fee to this contract\r\n        uint256 alpaCost = _hatchingALPACost(_matronId, _sireId, true);\r\n\r\n        uint256 devAmount = alpaCost.mul(devBreedingPercentage).div(100);\r\n        uint256 burnAmount = alpaCost.sub(devAmount);\r\n\r\n        // devBreedingPercentage goes to dev address\r\n        assert(alpa.transferFrom(msg.sender, devAddress, devAmount));\r\n\r\n        // burn the rest\r\n        alpaSupplier.burn(msg.sender, burnAmount);\r\n\r\n        // Grab a reference to the Alpacas from storage.\r\n        Alpaca storage sire = alpacas[_sireId];\r\n        Alpaca storage matron = alpacas[_matronId];\r\n\r\n        // refresh hatching multiplier for both parents.\r\n        _refreshHatchingMultiplier(sire);\r\n        _refreshHatchingMultiplier(matron);\r\n\r\n        // Determine the lower generation number of the two parents\r\n        uint256 parentGen = matron.generation;\r\n        if (sire.generation < matron.generation) {\r\n            parentGen = sire.generation;\r\n        }\r\n\r\n        // child generation will be 1 larger than min of the two parents generation;\r\n        uint256 childGen = parentGen.add(1);\r\n\r\n        // Determine when the egg will be cracked\r\n        uint256 cooldownEndBlock = (hatchingDuration.div(secondsPerBlock)).add(\r\n            block.number\r\n        );\r\n\r\n        uint256 eggID = _createEgg(\r\n            _matronId,\r\n            _sireId,\r\n            childGen,\r\n            cooldownEndBlock,\r\n            msg.sender\r\n        );\r\n\r\n        // Emit the hatched event.\r\n        emit Hatched(eggID, _matronId, _sireId, cooldownEndBlock);\r\n\r\n        return eggID;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal check to see if a given sire and matron are a valid mating pair.\r\n     * @param _matron A reference to the Alpaca struct of the potential matron.\r\n     * @param _matronId The matron's ID.\r\n     * @param _sire A reference to the Alpaca struct of the potential sire.\r\n     * @param _sireId The sire's ID\r\n     */\r\n    function _isValidMatingPair(\r\n        Alpaca storage _matron,\r\n        uint256 _matronId,\r\n        Alpaca storage _sire,\r\n        uint256 _sireId\r\n    ) private view returns (bool) {\r\n        // A Aapaca can't breed with itself\r\n        if (_matronId == _sireId) {\r\n            return false;\r\n        }\r\n\r\n        // Alpaca can't breed with their parents.\r\n        if (_matron.matronId == _sireId || _matron.sireId == _sireId) {\r\n            return false;\r\n        }\r\n        if (_sire.matronId == _matronId || _sire.sireId == _matronId) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev openzeppelin ERC1155 Hook that is called before any token transfer\r\n     * Clear any alpacaAllowedToAddress associated to the alpaca\r\n     * that's been transfered\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address,\r\n        address,\r\n        address,\r\n        uint256[] memory ids,\r\n        uint256[] memory,\r\n        bytes memory\r\n    ) internal virtual override {\r\n        for (uint256 i = 0; i < ids.length; i++) {\r\n            if (alpacaAllowedToAddress.contains(ids[i])) {\r\n                alpacaAllowedToAddress.remove(ids[i]);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/CryptoAlpaca/AlpacaOperator.sol\r\n\r\n\r\n// pragma solidity =0.6.12;\r\n\r\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import \"@openzeppelin/contracts/introspection/IERC165.sol\";\r\n// import \"@openzeppelin/contracts/introspection/ERC165Checker.sol\";\r\n// import \"@openzeppelin/contracts/utils/Address.sol\";\r\n// import \"contracts/interfaces/IGeneScience.sol\";\r\n// import \"contracts/interfaces/ICryptoAlpacaEnergyListener.sol\";\r\n// import \"contracts/CryptoAlpaca/AlpacaBreed.sol\";\r\n\r\ncontract AlpacaOperator is AlpacaBreed {\r\n    using Address for address;\r\n    using ERC165Checker for address;\r\n\r\n    address public operator;\r\n\r\n    /*\r\n     * bytes4(keccak256('onCryptoAlpacaEnergyChanged(uint256,uint256,uint256)')) == 0x5a864e1c\r\n     */\r\n    bytes4\r\n        private constant _INTERFACE_ID_CRYPTO_ALPACA_ENERGY_LISTENER = 0x5a864e1c;\r\n\r\n    /* ========== EVENTS ========== */\r\n\r\n    /**\r\n     * @dev Event for when alpaca's energy changed from `fromEnergy`\r\n     */\r\n    event EnergyChanged(\r\n        uint256 indexed id,\r\n        uint256 oldEnergy,\r\n        uint256 newEnergy\r\n    );\r\n\r\n    /**\r\n     * @dev Event for when alpaca's HatchingCostMultiplier changed\r\n     */\r\n    event HatchingCostMultiplierChanged(\r\n        uint256 indexed id,\r\n        uint256 oldHatchingCostMultiplier,\r\n        uint256 newHatchingCostMultiplier\r\n    );\r\n\r\n    /**\r\n     * @dev Event for when alpaca's HatchCostMultiplierEndBlock changed\r\n     */\r\n    event HatchCostMultiplierEndBlockChanged(\r\n        uint256 indexed id,\r\n        uint256 oldHatchCostMultiplierEndBlock,\r\n        uint256 newHatchCostMultiplierEndBlock\r\n    );\r\n\r\n    /**\r\n     * @dev Event for when alpaca's CooldownEndBlock changed\r\n     */\r\n    event CooldownEndBlockChanged(\r\n        uint256 indexed id,\r\n        uint256 oldCooldownEndBlock,\r\n        uint256 newCooldownEndBlock\r\n    );\r\n\r\n    /**\r\n     * @dev Event for when alpaca's gene changed\r\n     */\r\n    event GeneChanged(uint256 indexed id, uint256 oldGene, uint256 newGene);\r\n\r\n    /* ========== OPERATOR ONLY FUNCTION ========== */\r\n\r\n    function updateAlpacaEnergy(\r\n        address _owner,\r\n        uint256 _id,\r\n        uint32 _newEnergy\r\n    ) external onlyOperator nonReentrant {\r\n        require(_newEnergy > 0);\r\n        require(isOwnerOf(_owner, _id));\r\n\r\n        Alpaca storage thisAlpaca = alpacas[_id];\r\n        uint32 oldEnergy = thisAlpaca.energy;\r\n        thisAlpaca.energy = _newEnergy;\r\n\r\n        emit EnergyChanged(_id, oldEnergy, _newEnergy);\r\n        _doSafeEnergyChangedAcceptanceCheck(_owner, _id, oldEnergy, _newEnergy);\r\n    }\r\n\r\n    function updateAlpacaHatchingCostMultiplier(\r\n        uint256 _id,\r\n        uint16 _hatchingCostMultiplier\r\n    ) external onlyOperator {\r\n        Alpaca storage thisAlpaca = alpacas[_id];\r\n        uint16 oldHatchingCostMultiplier = thisAlpaca.hatchingCostMultiplier;\r\n        thisAlpaca.hatchingCostMultiplier = _hatchingCostMultiplier;\r\n\r\n        emit HatchingCostMultiplierChanged(\r\n            _id,\r\n            oldHatchingCostMultiplier,\r\n            _hatchingCostMultiplier\r\n        );\r\n    }\r\n\r\n    function updateAlpacaHatchCostMultiplierEndBlock(\r\n        uint256 _id,\r\n        uint64 _hatchCostMultiplierEndBlock\r\n    ) external onlyOperator {\r\n        Alpaca storage thisAlpaca = alpacas[_id];\r\n        uint64 oldHatchCostMultiplierEndBlock = thisAlpaca\r\n            .hatchCostMultiplierEndBlock;\r\n        thisAlpaca.hatchCostMultiplierEndBlock = _hatchCostMultiplierEndBlock;\r\n\r\n        emit HatchingCostMultiplierChanged(\r\n            _id,\r\n            oldHatchCostMultiplierEndBlock,\r\n            _hatchCostMultiplierEndBlock\r\n        );\r\n    }\r\n\r\n    function updateAlpacaCooldownEndBlock(uint256 _id, uint64 _cooldownEndBlock)\r\n        external\r\n        onlyOperator\r\n    {\r\n        Alpaca storage thisAlpaca = alpacas[_id];\r\n        uint64 oldCooldownEndBlock = thisAlpaca.cooldownEndBlock;\r\n        thisAlpaca.cooldownEndBlock = _cooldownEndBlock;\r\n\r\n        emit CooldownEndBlockChanged(\r\n            _id,\r\n            oldCooldownEndBlock,\r\n            _cooldownEndBlock\r\n        );\r\n    }\r\n\r\n    function updateAlpacaGene(uint256 _id, uint256 _gene)\r\n        external\r\n        onlyOperator\r\n    {\r\n        Alpaca storage thisAlpaca = alpacas[_id];\r\n        uint256 oldGene = thisAlpaca.gene;\r\n        thisAlpaca.gene = _gene;\r\n\r\n        emit GeneChanged(_id, oldGene, _gene);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers operator role to different address\r\n     * Can only be called by the current operator.\r\n     */\r\n    function transferOperator(address _newOperator) external onlyOperator {\r\n        require(_newOperator != address(0));\r\n        operator = _newOperator;\r\n    }\r\n\r\n    /* ========== MODIFIERS ========== */\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than operator.\r\n     */\r\n    modifier onlyOperator() {\r\n        require(operator == _msgSender());\r\n        _;\r\n    }\r\n\r\n    /* =========== PRIVATE ========= */\r\n\r\n    function _doSafeEnergyChangedAcceptanceCheck(\r\n        address _to,\r\n        uint256 _id,\r\n        uint256 _oldEnergy,\r\n        uint256 _newEnergy\r\n    ) private {\r\n        if (_to.isContract() && _to.supportsERC165()) {\r\n            if (\r\n                IERC165(_to).supportsInterface(\r\n                    _INTERFACE_ID_CRYPTO_ALPACA_ENERGY_LISTENER\r\n                )\r\n            ) {\r\n                ICryptoAlpacaEnergyListener(_to).onCryptoAlpacaEnergyChanged(\r\n                    _id,\r\n                    _oldEnergy,\r\n                    _newEnergy\r\n                );\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Root file: contracts/CryptoAlpaca/AlpacaCore.sol\r\n\r\n\r\npragma solidity =0.6.12;\r\n\r\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import \"contracts/interfaces/IGeneScience.sol\";\r\n// import \"contracts/CryptoAlpaca/AlpacaOperator.sol\";\r\n\r\ncontract AlpacaCore is AlpacaOperator {\r\n    /**\r\n     * @dev Initializes crypto alpaca contract.\r\n     * @param _alpa ALPA ERC20 contract address\r\n     * @param _devAddress dev address.\r\n     */\r\n    constructor(\r\n        IERC20 _alpa,\r\n        IGeneScience _geneScience,\r\n        IAlpaSupplier _alpaSupplier,\r\n        address _operator,\r\n        address _devAddress\r\n    ) public {\r\n        alpa = _alpa;\r\n        geneScience = _geneScience;\r\n        operator = _operator;\r\n        devAddress = _devAddress;\r\n        alpaSupplier = _alpaSupplier;\r\n\r\n        // start with the mythical genesis alpaca\r\n        _createAlpaca(uint256(-1), 0, 0, msg.sender);\r\n    }\r\n\r\n    /* ========== OWNER MUTATIVE FUNCTION ========== */\r\n\r\n    /**\r\n     * @dev Allows owner to withdrawal the balance available to the contract.\r\n     */\r\n    function withdrawBalance(uint256 _amount, address payable _to)\r\n        external\r\n        onlyOwner\r\n    {\r\n        _to.transfer(_amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_alpa\",\"type\":\"address\"},{\"internalType\":\"contract IGeneScience\",\"name\":\"_geneScience\",\"type\":\"address\"},{\"internalType\":\"contract IAlpaSupplier\",\"name\":\"_alpaSupplier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"alpacaIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"genes\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"energy\",\"type\":\"uint256[]\"}],\"name\":\"BornBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"alpacaId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gene\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"energy\",\"type\":\"uint256\"}],\"name\":\"BornSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"alpacaId\",\"type\":\"uint256\"}],\"name\":\"ClearPermissionToBreed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCooldownEndBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCooldownEndBlock\",\"type\":\"uint256\"}],\"name\":\"CooldownEndBlockChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldEnergy\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEnergy\",\"type\":\"uint256\"}],\"name\":\"EnergyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldGene\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newGene\",\"type\":\"uint256\"}],\"name\":\"GeneChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"alpacaId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"GrantedToBreed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldHatchCostMultiplierEndBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newHatchCostMultiplierEndBlock\",\"type\":\"uint256\"}],\"name\":\"HatchCostMultiplierEndBlockChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eggId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"matronId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sireId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cooldownEndBlock\",\"type\":\"uint256\"}],\"name\":\"Hatched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldHatchingCostMultiplier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newHatchingCostMultiplier\",\"type\":\"uint256\"}],\"name\":\"HatchingCostMultiplierChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GEN0_GENERATION_FACTOR\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"alpa\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"alpaSupplier\",\"outputs\":[{\"internalType\":\"contract IAlpaSupplier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoCrackingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseHatchingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_alpacaId\",\"type\":\"uint256\"}],\"name\":\"clearPermissionToBreed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"crack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gene\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_energy\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_generation\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"createAlpaca\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_genes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_energies\",\"type\":\"uint256[]\"},{\"internalType\":\"uint16\",\"name\":\"_generation\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"createAlpacaBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devBreedingPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"geneScience\",\"outputs\":[{\"internalType\":\"contract IGeneScience\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"generationHatchingFeeMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getAlpaca\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isReady\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"cooldownEndBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"birthTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"matronId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sireId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hatchingCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hatchingCostMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hatchCostMultiplierEndBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"generation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gene\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"energy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"state\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalAlpaca\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sireId\",\"type\":\"uint256\"}],\"name\":\"grantPermissionToBreed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"hasPermissionToBreedAsSire\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_matronId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sireId\",\"type\":\"uint256\"}],\"name\":\"hatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_matronId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sireId\",\"type\":\"uint256\"}],\"name\":\"hatchingALPACost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hatchingDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hatchingMultiplierCoolDown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_alpacaId\",\"type\":\"uint256\"}],\"name\":\"isOwnerOf\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isReadyToCrack\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxHatchCostMultiplier\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newBornCoolDown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondsPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_alpa\",\"type\":\"address\"}],\"name\":\"setAlpaContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_autoCrackingFee\",\"type\":\"uint256\"}],\"name\":\"setAutoCrackingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseHatchingFee\",\"type\":\"uint256\"}],\"name\":\"setBaseHatchingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devAddress\",\"type\":\"address\"}],\"name\":\"setDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_devBreedingPercentage\",\"type\":\"uint256\"}],\"name\":\"setDevBreedingPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IGeneScience\",\"name\":\"_geneScience\",\"type\":\"address\"}],\"name\":\"setGeneScience\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_generationHatchingFeeMultiplier\",\"type\":\"uint256\"}],\"name\":\"setGenerationHatchingFeeMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hatchingDuration\",\"type\":\"uint256\"}],\"name\":\"setHatchingDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hatchingMultiplierCoolDown\",\"type\":\"uint256\"}],\"name\":\"setHatchingMultiplierCoolDown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_maxHatchCostMultiplier\",\"type\":\"uint16\"}],\"name\":\"setMaxHatchCostMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newBornCoolDown\",\"type\":\"uint256\"}],\"name\":\"setNewBornCoolDown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_secs\",\"type\":\"uint256\"}],\"name\":\"setSecondsPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newuri\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOperator\",\"type\":\"address\"}],\"name\":\"transferOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_cooldownEndBlock\",\"type\":\"uint64\"}],\"name\":\"updateAlpacaCooldownEndBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_newEnergy\",\"type\":\"uint32\"}],\"name\":\"updateAlpacaEnergy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gene\",\"type\":\"uint256\"}],\"name\":\"updateAlpacaGene\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_hatchCostMultiplierEndBlock\",\"type\":\"uint64\"}],\"name\":\"updateAlpacaHatchCostMultiplierEndBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_hatchingCostMultiplier\",\"type\":\"uint16\"}],\"name\":\"updateAlpacaHatchingCostMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AlpacaCore", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000001b3ea26132b1451ea0bd5274a9a98c83c9cc523100000000000000000000000025fc490afbf4e648971fe6919d54c3888166100e000000000000000000000000036c46efeef2fa3128cd7ad149c6fe499d572ded000000000000000000000000e7698e900666687d5d0ef46ba7beaa39ca11d12c000000000000000000000000e7698e900666687d5d0ef46ba7beaa39ca11d12c", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ea1ce9b48d2f3ecc69a46bffd8f54080e003e53a80a3f73bb96af2f9c102d49a"}