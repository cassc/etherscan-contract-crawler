{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"BTLToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\nimport \\\"ERC20.sol\\\";\\nimport \\\"Ownable.sol\\\";\\nimport \\\"Address.sol\\\";\\nimport \\\"IRouter.sol\\\";\\n\\ncontract BTLToken is ERC20, Ownable {\\n    using Address for address;\\n    address public constant DEAD = 0x000000000000000000000000000000000000dEaD;\\n    bool private _swapping;\\n    uint256 public constant SELL_BURN_FEE = 150;\\n    uint256 public constant SELL_NFT_FEE = 50;\\n    uint256 public constant DAY_BLOCK = 28800;\\n    uint256 public constant PER_DAY_REWARD = 18;\\n    uint256 public constant MAX_DEPTH = 50;\\n    uint128 public constant REWARD_RATIO = 325;\\n    uint128 public constant LP_BUILDER_RATIO = 375;\\n    uint128 public constant LP_ADDED_RATIO = 50;\\n    uint128 public constant SECURE_POOL_RATIO = 50;\\n    uint128 public constant NFT_REWARD_RATIO = 140;\\n    uint128 public constant REFER_REWARD_RATIO = 60;\\n    uint128 private constant PERCENT_BASE = 1e3;\\n    uint128 private constant LP_DAYS = 35;\\n    uint256[3] public REFER_RATIO = [500, 500, 0];\\n    uint256[10] public shareRateList = [10, 10, 10, 5, 5, 5, 5, 5, 5, 5];\\n\\n    uint256 public rewardPoolAmount;\\n    uint256 public nftRewardBNBAmount;\\n    uint256 public nftRewardTokenAmount;\\n    uint256 public lpAddedAmount;\\n    uint256 public lpAddedTokenAmount;\\n    uint256 public referRewardsAmount;\\n\\n    uint256 public preBuyAmount;\\n    uint256 public ecologyRewardAmount;\\n    uint256 public totalUser;\\n    uint256 public totalInvestTime;\\n    uint256 public totalValue;\\n    uint256 public totalWithdrawalValueBNB;\\n    uint256 public totalWithdrawalValueToken;\\n\\n    address public dev;\\n\\n    address public ecologyRewards = 0xa4A7D7d05209b4560984320A5aF240f1f2626D2b;\\n    address public nftRewardsBNB = 0x294D7DFe544f4a47e401f9a881C1c38456910787;\\n    address public nftRewardsToken = 0xbfa918417C67D6Ff453BF6CF1FAB25c3855A99c2;\\n\\n    IRouter public immutable uniswapV2Router;\\n    address public pair;\\n    address public wallet = 0x9999999999999999999999999999999999999999;\\n    bool public investStatus;\\n\\n    address[] public NftGroup;\\n    mapping(address => address) public userTop;\\n    mapping(address => uint256) public userLastActionBlock;\\n    mapping(address => uint256) public userInvestBNBAmount;\\n    mapping(address => uint256) public userShareLevel;\\n    mapping(address => uint256) public userPrebuyBNBAmount;\\n    mapping(address => uint256) public userClaimRewardBNBValue;\\n    mapping(address => uint256) public userClaimRewardBNBAmount;\\n    mapping(address => uint256) public userClaimRewardTokenAmount;\\n    mapping(address => uint256) public userInviteAddr;\\n    mapping(address => uint256) public userTotalShareAddr;\\n    mapping(address => uint256) public teamTotalAddr;\\n    mapping(address => uint256) public teamTotalInvestValue;\\n\\n    mapping(address => uint256) public pendingShareRewards;\\n    mapping(address => uint256) public claimedShareRewards;\\n    mapping(address => uint256) public pendingTeamRewards;\\n    mapping(address => uint256) public claimedTeamRewards;\\n\\n    mapping(address => bool) private _noneFee;\\n    mapping(address => bool) private _nftGroupMembers;\\n    mapping(address => UserPreBuy) public userPreBuyList;\\n    mapping(address => address[]) public children;\\n\\n    struct UserPreBuy {\\n        uint256 investAmount;\\n        uint256 totalPreAmount;\\n        uint256 remainPreAmount;\\n        uint256 daysBuyAmount;\\n        uint256 addedDays;\\n    }\\n\\n    event Invest(address indexed from, uint256 indexed times, uint256 value);\\n\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        uint256 totalSupply_,\\n        IRouter uniswapV2Router_\\n    ) payable ERC20(name_, symbol_) {\\n        dev = owner();\\n        uniswapV2Router = uniswapV2Router_;\\n        _mint(dev, totalSupply_ * 10 ** decimals());\\n        userTop[dev] = address(1);\\n        _noneFee[dev] = true;\\n        _noneFee[address(uniswapV2Router)] = true;\\n    }\\n\\n    function commons() external view\\n    returns (\\n        uint256 _rewardPoolAmount,\\n        uint256 _preBuyAmount,\\n        uint256 _ecologyRewardAmount,\\n        uint256 _totalUser,\\n        uint256 _totalInvestTime,\\n        uint256 _totalValue,\\n        uint256 _totalWithdrawalValueBNB,\\n        uint256 _totalWithdrawalValueToken,\\n        uint256 _day_block,\\n        uint256 _perDayReward,\\n        uint256 _lpAddedAmount,\\n        uint256 _lpAddedTokenAmount,\\n        uint256 _nftRewardBNBAmount,\\n        uint256 _referRewardsAmount\\n    )\\n    {\\n        _day_block = DAY_BLOCK;\\n        _perDayReward = PER_DAY_REWARD;\\n        _rewardPoolAmount = rewardPoolAmount;\\n        _preBuyAmount = preBuyAmount;\\n        _nftRewardBNBAmount = nftRewardBNBAmount;\\n        _totalWithdrawalValueToken = totalWithdrawalValueToken;\\n        _totalWithdrawalValueBNB = totalWithdrawalValueBNB;\\n        _ecologyRewardAmount = ecologyRewardAmount;\\n        _totalUser = totalUser;\\n        _totalInvestTime = totalInvestTime;\\n        _totalValue = totalValue;\\n        _lpAddedAmount = lpAddedAmount;\\n        _lpAddedTokenAmount = lpAddedTokenAmount;\\n        _referRewardsAmount = referRewardsAmount;\\n    }\\n\\n    function infos(address _addr) external view\\n    returns (\\n        address _userTop,\\n        uint256 _userClaimRewardBNBValue,\\n        uint256 _userClaimRewardBNBAmount,\\n        uint256 _userClaimRewardTokenAmount,\\n        uint256 _userLastActionBlock,\\n        uint256 _userInvestBNBAmount,\\n        uint256 _userInviteAddr,\\n        uint256 _userTotalShareAddr,\\n        uint256 _teamTotalAddr,\\n        uint256 _teamTotalInvestValue,\\n        uint256 _userPrebuyBNBAmount,\\n        uint256 _userShareLevel,\\n        bool _isNftMember\\n    )\\n    {\\n        _userTop = userTop[_addr];\\n        _userLastActionBlock = userLastActionBlock[_addr];\\n        _userInvestBNBAmount = userInvestBNBAmount[_addr];\\n        _userPrebuyBNBAmount = userPrebuyBNBAmount[_addr];\\n        _userClaimRewardBNBValue = userClaimRewardBNBValue[_addr];\\n        _userClaimRewardBNBAmount = userClaimRewardBNBAmount[_addr];\\n        _userClaimRewardTokenAmount = userClaimRewardTokenAmount[_addr];\\n        _userInviteAddr = userInviteAddr[_addr];\\n        _userTotalShareAddr = userTotalShareAddr[_addr];\\n        _teamTotalAddr = teamTotalAddr[_addr];\\n        _teamTotalInvestValue = teamTotalInvestValue[_addr];\\n        _userShareLevel = userShareLevel[_addr];\\n        _isNftMember = _nftGroupMembers[_addr];\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override {\\n        require(from != to, \\\"Same\\\");\\n        require(amount > 0, \\\"Zero\\\");\\n        if (_swapping) {\\n            super._transfer(from, to, amount);\\n            return;\\n        }\\n        if (from == pair) {\\n            revert(\\\"Buy Forbid\\\");\\n        }\\n\\n        if (to == address(this)) {\\n            address sender = msg.sender;\\n            require(sender == from, \\\"Bot\\\");\\n            super._transfer(from, to, amount);\\n            uint256 userInvestAmount = userInvestBNBAmount[sender];\\n\\n            if (\\n                userInvestAmount == 0 ||\\n                userLastActionBlock[sender] == 0 ||\\n                (userLastActionBlock[sender] + DAY_BLOCK) > block.number\\n            ) {\\n                return;\\n            }\\n\\n            uint256 userInvestDay = _getInvestDay(sender);\\n            uint256 staticPending = _getStaticPendingAmount(sender);\\n\\n            _distributedShareDepthReward(sender, staticPending);\\n            _distributedLevelRewards(sender, staticPending);\\n\\n            uint256 myShareRewards = pendingShareRewards[sender];\\n            uint256 myTeamRewards = pendingTeamRewards[sender];\\n            uint256 myTotalRewards = staticPending + myShareRewards + myTeamRewards;\\n            uint256 myDynamic = myShareRewards + myTeamRewards;\\n\\n            _countLpAndBuy(sender, userInvestDay);\\n\\n            claimedShareRewards[sender] += myShareRewards;\\n            claimedTeamRewards[sender] += myTeamRewards;\\n            pendingShareRewards[sender] = 0;\\n            pendingTeamRewards[sender] = 0;\\n\\n            if (\\n                (userClaimRewardBNBValue[sender] + myTotalRewards) >= (userInvestAmount * 150) / 100\\n            ) {\\n                myTotalRewards = ((userInvestAmount * 150) / 100) - userClaimRewardBNBValue[sender];\\n            }\\n\\n            uint256 distributedStaticAmount;\\n            uint256 distributedDynamicAmount;\\n            if (myTotalRewards >= staticPending) {\\n                distributedStaticAmount = staticPending;\\n                distributedDynamicAmount = myTotalRewards - staticPending;\\n            } else {\\n                distributedStaticAmount = myTotalRewards;\\n                distributedDynamicAmount = 0;\\n            }\\n\\n            _distributedRewards(sender, distributedStaticAmount, distributedDynamicAmount);\\n            _checkAndInitUser(sender);\\n            return;\\n        }\\n\\n        uint256 sellFeeAmount;\\n        uint256 sellNftAmount;\\n        if (to == pair) {\\n            if (!_noneFee[from]) {\\n                sellFeeAmount = (amount * SELL_BURN_FEE) / PERCENT_BASE;\\n                sellNftAmount = (amount * SELL_NFT_FEE) / PERCENT_BASE;\\n            }\\n        }\\n        if (sellNftAmount > 0) {\\n            nftRewardTokenAmount += sellNftAmount;\\n            super._transfer(from, nftRewardsToken, sellNftAmount);\\n        }\\n        if (sellFeeAmount > 0) {\\n            super._transfer(from, DEAD, sellFeeAmount);\\n        }\\n        uint256 transAmount = amount - sellFeeAmount - sellNftAmount;\\n        super._transfer(from, to, transAmount);\\n\\n        bool shouldInvite = (userTop[to] == address(0) &&\\n            !from.isContract() &&\\n            !to.isContract() &&\\n            userTop[from] != address(0));\\n        if (shouldInvite) {\\n            userTop[to] = from;\\n            userInviteAddr[from]++;\\n            children[from].push(to);\\n        }\\n        return;\\n    }\\n\\n    function noFeesAdd(address account, bool status) public onlyOwner {\\n        if (_noneFee[account] != status) {\\n            _noneFee[account] = status;\\n        }\\n    }\\n\\n    function noFeeAccounts(address[] calldata accounts, bool status) public onlyOwner {\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            _noneFee[accounts[i]] = status;\\n        }\\n    }\\n\\n    function changePair(address _pair) public onlyOwner {\\n        pair = _pair;\\n    }\\n\\n    function closeProject() public onlyOwner {\\n        require(investStatus, 'not open');\\n        if (investStatus) {\\n            investStatus = false;\\n        }\\n    }\\n\\n    function _distributeRefer(uint256 BnBAmount, address user) internal {\\n        require(address(this).balance >= BnBAmount, 'balance not enough');\\n        if (userTop[user] != address(0)) {\\n            uint256 disAmount = (BnBAmount * REFER_RATIO[0]) / PERCENT_BASE;\\n            address _userP = userTop[user];\\n            if (userInvestBNBAmount[_userP] > 0) {\\n                payable(_userP).transfer(disAmount);\\n            }\\n            if (userTop[_userP] != address(0)) {\\n                address _userPp = userTop[_userP];\\n                uint256 disAmountP = (BnBAmount * REFER_RATIO[1]) / PERCENT_BASE;\\n                if (userInvestBNBAmount[_userPp] > 0) {\\n                    payable(_userPp).transfer(disAmountP);\\n                }\\n                if (userTop[_userPp] != address(0)) {\\n                    address _userPpp = userTop[_userPp];\\n                    uint256 disAmountPP = (BnBAmount * REFER_RATIO[2]) / PERCENT_BASE;\\n                    if (userInvestBNBAmount[_userPpp] > 0) {\\n                        payable(_userPpp).transfer(disAmountPP);\\n                    }\\n                }\\n            }\\n        }\\n\\n    }\\n\\n    function _getInvestDay(address _user) internal view returns (uint256){\\n        uint256 userInvestDay = (block.number - userLastActionBlock[_user]) / DAY_BLOCK;\\n        return userInvestDay;\\n    }\\n\\n    function _getStaticPendingAmount(address _user) internal view returns (uint256) {\\n        uint256 userInvestDay = _getInvestDay(_user);\\n        uint256 staticPending = ((userInvestBNBAmount[_user] * userInvestDay) * PER_DAY_REWARD) / PERCENT_BASE;\\n        return staticPending;\\n    }\\n\\n    function _distributedShareDepthReward(address _user, uint256 staticPending) internal {\\n        if (staticPending > 0) {\\n            address top = userTop[_user];\\n            for (uint8 i = 0; i < shareRateList.length; i++) {\\n                if (top != address(0)) {\\n                    if (\\n                        (userShareLevel[top] >= (i + 1)) && (userInvestBNBAmount[top] > 0)\\n                    ) {\\n                        uint256 shareRewards = (staticPending * shareRateList[i]) / 100;\\n                        pendingShareRewards[top] += shareRewards;\\n                    }\\n                    top = userTop[top];\\n                }\\n            }\\n        }\\n    }\\n\\n    function _distributedLevelRewards(address _user, uint256 staticPending) internal {\\n        if (staticPending > 0) {\\n            uint256 maxTeamRate = 60;\\n            uint256 spendRate = 0;\\n            address top_team = userTop[_user];\\n            for (uint256 j = 0; j < MAX_DEPTH; j++) {\\n                if (top_team != address(0)) {\\n                    if (\\n                        teamTotalInvestValue[top_team] >= 200_000 * 10 ** 18 &&\\n                        maxTeamRate > spendRate &&\\n                        userInvestBNBAmount[top_team] > 0\\n                    ) {\\n                        pendingTeamRewards[top_team] += ((staticPending *\\n                            (maxTeamRate - spendRate)) / 100);\\n                        spendRate = 60;\\n                    }\\n                    if (\\n                        teamTotalInvestValue[top_team] >= 50_000 * 10 ** 18 &&\\n                        teamTotalInvestValue[top_team] < 200_000 * 10 ** 18 &&\\n                        spendRate < 36 &&\\n                        userInvestBNBAmount[top_team] > 0\\n                    ) {\\n                        pendingTeamRewards[top_team] += ((staticPending *\\n                            (36 - spendRate)) / 100);\\n                        spendRate = 36;\\n                    }\\n                    if (\\n                        teamTotalInvestValue[top_team] >= 20_000 * 10 ** 18 &&\\n                        teamTotalInvestValue[top_team] < 50_000 * 10 ** 18 &&\\n                        spendRate < 26 &&\\n                        userInvestBNBAmount[top_team] > 0\\n                    ) {\\n                        pendingTeamRewards[top_team] += ((staticPending *\\n                            (26 - spendRate)) / 100);\\n                        spendRate = 26;\\n                    }\\n                    if (\\n                        teamTotalInvestValue[top_team] >= 5_000 * 10 ** 18 &&\\n                        teamTotalInvestValue[top_team] < 20_000 * 10 ** 18 &&\\n                        spendRate < 23 &&\\n                        userInvestBNBAmount[top_team] > 0\\n                    ) {\\n                        pendingTeamRewards[top_team] += ((staticPending *\\n                            (23 - spendRate)) / 100);\\n                        spendRate = 23;\\n                    }\\n                    if (\\n                        teamTotalInvestValue[top_team] >= 2_000 * 10 ** 18 &&\\n                        teamTotalInvestValue[top_team] < 5_000 * 10 ** 18 &&\\n                        spendRate < 20 &&\\n                        userInvestBNBAmount[top_team] > 0\\n                    ) {\\n                        pendingTeamRewards[top_team] += ((staticPending *\\n                            (20 - spendRate)) / 100);\\n                        spendRate = 20;\\n                    }\\n                    if (\\n                        teamTotalInvestValue[top_team] >= 500 * 10 ** 18 &&\\n                        teamTotalInvestValue[top_team] < 2_000 * 10 ** 18 &&\\n                        spendRate < 15 &&\\n                        userInvestBNBAmount[top_team] > 0\\n                    ) {\\n                        pendingTeamRewards[top_team] += ((staticPending *\\n                            (15 - spendRate)) / 100);\\n                        spendRate = 15;\\n                    }\\n                    if (\\n                        teamTotalInvestValue[top_team] >= 200 * 10 ** 18 &&\\n                        teamTotalInvestValue[top_team] < 500 * 10 ** 18 &&\\n                        spendRate < 10 &&\\n                        userInvestBNBAmount[top_team] > 0\\n                    ) {\\n                        pendingTeamRewards[top_team] += ((staticPending *\\n                            (10 - spendRate)) / 100);\\n                        spendRate = 10;\\n                    }\\n                    if (\\n                        teamTotalInvestValue[top_team] >= 50 * 10 ** 18 &&\\n                        teamTotalInvestValue[top_team] < 200 * 10 ** 18 &&\\n                        spendRate < 5 &&\\n                        userInvestBNBAmount[top_team] > 0\\n                    ) {\\n                        pendingTeamRewards[top_team] += ((staticPending *\\n                            (5 - spendRate)) / 100);\\n                        spendRate = 5;\\n                    }\\n                    top_team = userTop[top_team];\\n                }\\n            }\\n        }\\n    }\\n\\n    function _distributedRewards(address _user, uint256 _amount, uint256 _dynamic) internal {\\n        if (_amount > 0) {\\n            uint256 tokenValue = (_amount * 70) / 100;\\n            uint256 preTokenAmount = _getAmountsOut(tokenValue + _dynamic);\\n            super._transfer(address(this), _user, preTokenAmount);\\n\\n            uint256 bnbValue = _amount - tokenValue;\\n            payable(_user).transfer(bnbValue);\\n\\n            uint256 _totalAmount = _amount + _dynamic;\\n            userClaimRewardBNBValue[_user] += _totalAmount;\\n            userClaimRewardBNBAmount[_user] += bnbValue;\\n            userClaimRewardTokenAmount[_user] += preTokenAmount;\\n            userLastActionBlock[_user] = block.number;\\n            totalWithdrawalValueBNB += bnbValue;\\n            totalWithdrawalValueToken += preTokenAmount;\\n        }\\n    }\\n\\n    function _checkAndInitUser(address sender) internal {\\n        if (userClaimRewardBNBValue[sender] >= (userInvestBNBAmount[sender] * 150) / 100) {\\n            claimedTeamRewards[sender] = pendingTeamRewards[sender] = claimedShareRewards[sender]\\n                = pendingShareRewards[sender]\\n                    = userClaimRewardTokenAmount[sender]\\n                        = userClaimRewardBNBAmount[sender]\\n                            = userClaimRewardBNBValue[sender]\\n                                = userPrebuyBNBAmount[sender]\\n                                    = userLastActionBlock[sender]\\n                                        = userInvestBNBAmount[sender] = 0;\\n            UserPreBuy storage userPreBuy = userPreBuyList[sender];\\n            userPreBuy.addedDays = 0;\\n            userPreBuy.investAmount = 0;\\n            userPreBuy.remainPreAmount = 0;\\n            userPreBuy.totalPreAmount = 0;\\n            userPreBuy.daysBuyAmount = 0;\\n            totalUser--;\\n        }\\n    }\\n\\n    function _countLpAndBuy(address _sender, uint256 _investDay) internal {\\n        UserPreBuy storage userPreBuy = userPreBuyList[_sender];\\n        if (\\n            userPrebuyBNBAmount[_sender] > 0 && userPreBuy.addedDays < LP_DAYS &&\\n            (_investDay >= 1)\\n        ) {\\n            uint256 needBuyValues;\\n            uint256 _addDays = _investDay;\\n            if (userPreBuy.addedDays + _investDay > LP_DAYS) {\\n                _addDays = LP_DAYS - userPreBuy.addedDays;\\n            }\\n            if (userPreBuy.addedDays < LP_DAYS && userPreBuy.remainPreAmount > 0) {\\n                needBuyValues += userPreBuy.daysBuyAmount * _addDays;\\n                userPreBuy.addedDays += _addDays;\\n                userPreBuy.remainPreAmount = userPreBuy.remainPreAmount - (userPreBuy.daysBuyAmount * _addDays);\\n                if (userPreBuy.addedDays >= LP_DAYS) {\\n                    userPreBuy.remainPreAmount = 0;\\n                    userPrebuyBNBAmount[_sender] = 0;\\n                }\\n            }\\n            if (needBuyValues > 0) {\\n                if (address(this).balance >= needBuyValues) {\\n                    _swapETHForTokens(needBuyValues);\\n                }\\n            }\\n            if (userPrebuyBNBAmount[_sender] >= needBuyValues) {\\n                uint256 endPre = userPrebuyBNBAmount[_sender] - needBuyValues;\\n                userPrebuyBNBAmount[_sender] = endPre;\\n            } else {\\n                userPrebuyBNBAmount[_sender] = 0;\\n            }\\n\\n        }\\n    }\\n\\n    receive() external payable {\\n        address sender = msg.sender;\\n        uint256 fromBNBAmount = msg.value;\\n        bool isBot = sender.isContract();\\n        if (isBot || (tx.origin != sender)) {\\n            return;\\n        }\\n        require(investStatus, \\\"NOT OPEN !\\\");\\n        require(sender != dev, \\\"DEV Forbid\\\");\\n        require(userInvestBNBAmount[sender] == 0, \\\"Wait End !\\\");\\n        require(fromBNBAmount >= 0.3 ether, \\\"Min Invest Value\\\");\\n        address top = userTop[sender];\\n        require(top != address(0), \\\"Need Bind top\\\");\\n\\n        userTotalShareAddr[top]++;\\n        if (userShareLevel[top] < shareRateList.length) {\\n            uint256 _shareLevel = 0;\\n            if (userTotalShareAddr[top] >= 3) {\\n                _shareLevel = 10;\\n            } else if (userTotalShareAddr[top] >= 1 && userTotalShareAddr[top] < 3) {\\n                _shareLevel = 3;\\n            }\\n            userShareLevel[top] = _shareLevel;\\n        }\\n\\n        for (uint256 i = 0; i < MAX_DEPTH; i++) {\\n            if (top != address(0)) {\\n                teamTotalAddr[top]++;\\n                teamTotalInvestValue[top] += fromBNBAmount;\\n                top = userTop[top];\\n            }\\n        }\\n\\n        userInvestBNBAmount[sender] = fromBNBAmount;\\n\\n        uint256 _preLpAmount = (fromBNBAmount * LP_BUILDER_RATIO) / PERCENT_BASE;\\n        uint256 firstBuyValue = _preLpAmount / LP_DAYS;\\n\\n        UserPreBuy storage userPreBuy = userPreBuyList[sender];\\n        userPreBuy.investAmount = fromBNBAmount;\\n        userPreBuy.totalPreAmount = _preLpAmount;\\n        userPreBuy.remainPreAmount = _preLpAmount - firstBuyValue;\\n        userPreBuy.daysBuyAmount = firstBuyValue;\\n        userPreBuy.addedDays = 1;\\n        userPrebuyBNBAmount[sender] = _preLpAmount - firstBuyValue;\\n        _swapETHForTokens(firstBuyValue);\\n\\n        userLastActionBlock[sender] = block.number;\\n\\n        rewardPoolAmount += ((fromBNBAmount * REWARD_RATIO) / PERCENT_BASE);\\n\\n        preBuyAmount += _preLpAmount;\\n\\n        uint256 _nftAmount = (fromBNBAmount * NFT_REWARD_RATIO) / PERCENT_BASE;\\n        nftRewardBNBAmount += _nftAmount;\\n        payable(nftRewardsBNB).transfer(_nftAmount);\\n\\n        uint256 _securePoolAmount = (fromBNBAmount * SECURE_POOL_RATIO) / PERCENT_BASE;\\n        ecologyRewardAmount += _securePoolAmount;\\n        payable(ecologyRewards).transfer(_securePoolAmount);\\n\\n        uint256 _poolAmount = (fromBNBAmount * LP_ADDED_RATIO) / PERCENT_BASE;\\n        uint256 _poolTokenAmount = _getAmountsOut(_poolAmount);\\n        lpAddedAmount += _poolAmount;\\n        lpAddedTokenAmount += _poolTokenAmount;\\n        if (balanceOf(address(this)) > _poolTokenAmount) {\\n            _addLpToSelf(_poolTokenAmount, _poolAmount);\\n        }\\n\\n        uint256 _referRewardAmount = (fromBNBAmount * REFER_REWARD_RATIO) / PERCENT_BASE;\\n        referRewardsAmount += _referRewardAmount;\\n        _distributeRefer(_referRewardAmount, sender);\\n\\n        totalUser++;\\n        totalInvestTime++;\\n        totalValue += fromBNBAmount;\\n\\n        if (balanceOf(address(this)) > 1e14) {\\n            super._transfer(address(this), sender, 1e14);\\n        }\\n\\n        emit Invest(sender, block.number, fromBNBAmount);\\n        return;\\n    }\\n\\n    function addMultiGroupMembers(address[] calldata accounts) onlyOwner external {\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            address user = accounts[i];\\n            _addNftGroupMembers(user);\\n        }\\n    }\\n\\n    function changeTeamTotalInvestValue(address _team, uint256 _value) external onlyOwner {\\n        teamTotalInvestValue[_team] += _value;\\n    }\\n\\n    function _addNftGroupMembers(address user) internal {\\n        if (! _nftGroupMembers[user]) {\\n            if (user != address(1)) {\\n                NftGroup.push(user);\\n                uint256 _teamTotalValue = teamTotalInvestValue[user];\\n                uint8 _userLevel = _getSalesToLevel(_teamTotalValue);\\n                if (_userLevel < 2) {\\n                    teamTotalInvestValue[user] += 200 * 10 ** 18;\\n                }\\n                _nftGroupMembers[user] = true;\\n            }\\n        }\\n    }\\n\\n    function removeNFTGroupMember(address user) external onlyOwner {\\n        uint256 _index = _findIndexOfNftGroupMember(user);\\n        _removeGroupMember(_index);\\n        _nftGroupMembers[user] = false;\\n    }\\n\\n    function _findIndexOfNftGroupMember(address user) internal view returns (uint256){\\n        uint256 _groupLength = NftGroup.length;\\n        require(_groupLength > 0, \\\"must have at least one NftGroup\\\");\\n        uint256 _index;\\n        for (uint256 i = 0; i < _groupLength; i++) {\\n            if (NftGroup[i] == user) {\\n                _index = i;\\n                break;\\n            }\\n        }\\n        return _index;\\n    }\\n\\n    function _removeGroupMember(uint index) internal {\\n        if (index >= NftGroup.length) return;\\n        for (uint i = index; i < NftGroup.length - 1; i++) {\\n            NftGroup[i] = NftGroup[i + 1];\\n        }\\n        NftGroup.pop();\\n    }\\n\\n    function _getSalesToLevel(uint256 amount) internal pure virtual returns (uint8) {\\n        /* istanbul ignore else  */\\n        if (amount < 50 ether) {\\n            return 0;\\n        } else if (amount < 200 ether) {\\n            return 1;\\n        } else if (amount < 500 ether) {\\n            return 2;\\n        } else if (amount < 2000 ether) {\\n            return 3;\\n        } else if (amount < 5000 ether) {\\n            return 4;\\n        } else if (amount < 20000 ether) {\\n            return 5;\\n        } else if (amount < 50000 ether) {\\n            return 6;\\n        } else if (amount < 200000 ether) {\\n            return 7;\\n        }\\n        return 8;\\n    }\\n\\n    function getGroupAddress(\\n        uint256 cursor,\\n        uint256 size\\n    ) external view returns (address[] memory, uint256){\\n        uint256 length = size;\\n        uint256 nftGroupCount = NftGroup.length;\\n        if (cursor + length > nftGroupCount) {\\n            length = nftGroupCount - cursor;\\n        }\\n        address[] memory _nftGroups = new address[](length);\\n        for (uint256 i = 0; i < length; ++i) {\\n            _nftGroups[i] = NftGroup[cursor + i];\\n        }\\n        return (_nftGroups, cursor + length);\\n    }\\n\\n    function getUserPreList(address user) public view returns (UserPreBuy memory) {\\n        return userPreBuyList[user];\\n    }\\n\\n    function isGroupMember(address user) external view returns (bool) {\\n        bool result = _nftGroupMembers[user];\\n        return result;\\n    }\\n\\n    function getChildren(\\n        address user,\\n        uint256 cursor,\\n        uint256 size\\n    ) external view returns (address[] memory, uint256) {\\n        uint256 length = size;\\n        uint256 childrenCount = children[user].length;\\n        if (cursor + length > childrenCount) {\\n            length = childrenCount - cursor;\\n        }\\n\\n        address[] memory _children = new address[](length);\\n        for (uint256 i = 0; i < length; ++i) {\\n            _children[i] = children[user][cursor + i];\\n        }\\n\\n        return (_children, cursor + length);\\n    }\\n\\n    function _swapETHForTokens(uint256 ethAmount) private lockTheSwap {\\n        address[] memory path = new address[](2);\\n        path[0] = uniswapV2Router.WETH();\\n        path[1] = address(this);\\n        uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{\\n                value: ethAmount\\n            }(0, path, wallet, block.timestamp);\\n        super._transfer(wallet, DEAD, balanceOf(wallet));\\n    }\\n\\n    function _getAmountsOut(uint256 ethAmount) private view returns (uint256) {\\n        address[] memory path = new address[](2);\\n        path[0] = uniswapV2Router.WETH();\\n        path[1] = address(this);\\n        uint256[] memory amounts = uniswapV2Router.getAmountsOut(\\n            ethAmount,\\n            path\\n        );\\n        return amounts[1];\\n    }\\n\\n    function _addLpToSelf(uint256 tokenAmount, uint256 ethAmount) private {\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\\n            address(this),\\n            tokenAmount,\\n            0,\\n            0,\\n            address(0),\\n            block.timestamp\\n        );\\n    }\\n\\n    function openProject(address _pair) external onlyOwner {\\n        require(!investStatus, \\\"OPEN\\\");\\n        investStatus = true;\\n        pair = _pair;\\n        _noneFee[pair] = true;\\n        _noneFee[address(this)] = true;\\n    }\\n\\n    modifier lockTheSwap() {\\n        _swapping = true;\\n        _;\\n        _swapping = false;\\n    }\\n\\n    function withdrawAll() external onlyOwner {\\n        {\\n            (bool sent,) = dev.call{value: address(this).balance} (\\\"\\\");\\n            require(sent, \\\"transfer error\\\");\\n        }\\n        uint256 token_balance = balanceOf(address(this));\\n        super._transfer(address(this), owner(), token_balance);\\n    }\\n}\"\r\n    },\r\n    \"ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC20.sol\\\";\\nimport \\\"IERC20Metadata.sol\\\";\\nimport \\\"Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"IRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.14;\\n\\ninterface IRouter {\\n    function factory() external view returns (address);\\n    function WETH() external view returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"BTLToken.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"},{\"internalType\":\"contract IRouter\",\"name\":\"uniswapV2Router_\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"times\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Invest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAY_BLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LP_ADDED_RATIO\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LP_BUILDER_RATIO\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DEPTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NFT_REWARD_RATIO\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"NftGroup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PER_DAY_REWARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"REFER_RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFER_REWARD_RATIO\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_RATIO\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECURE_POOL_RATIO\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SELL_BURN_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SELL_NFT_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"addMultiGroupMembers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"changePair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_team\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"changeTeamTotalInvestValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"children\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedShareRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedTeamRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commons\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardPoolAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_preBuyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ecologyRewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalInvestTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalWithdrawalValueBNB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalWithdrawalValueToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_day_block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_perDayReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpAddedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpAddedTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nftRewardBNBAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referRewardsAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ecologyRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ecologyRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cursor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"getChildren\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cursor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"getGroupAddress\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserPreList\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"investAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPreAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainPreAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daysBuyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addedDays\",\"type\":\"uint256\"}],\"internalType\":\"struct BTLToken.UserPreBuy\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"infos\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_userTop\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_userClaimRewardBNBValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userClaimRewardBNBAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userClaimRewardTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userLastActionBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userInvestBNBAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userInviteAddr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userTotalShareAddr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_teamTotalAddr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_teamTotalInvestValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userPrebuyBNBAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userShareLevel\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isNftMember\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isGroupMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpAddedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpAddedTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftRewardBNBAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftRewardTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftRewardsBNB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftRewardsToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"noFeeAccounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"noFeesAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"openProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingShareRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingTeamRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referRewardsAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"removeNFTGroupMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPoolAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shareRateList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamTotalAddr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamTotalInvestValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvestTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawalValueBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawalValueToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userClaimRewardBNBAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userClaimRewardBNBValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userClaimRewardTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInvestBNBAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInviteAddr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLastActionBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userPreBuyList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"investAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPreAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainPreAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daysBuyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addedDays\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userPrebuyBNBAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userShareLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTop\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTotalShareAddr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BTLToken", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000001406f4000000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e000000000000000000000000000000000000000000000000000000000000000342544c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000342544c0000000000000000000000000000000000000000000000000000000000", "EVMVersion": "istanbul", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}