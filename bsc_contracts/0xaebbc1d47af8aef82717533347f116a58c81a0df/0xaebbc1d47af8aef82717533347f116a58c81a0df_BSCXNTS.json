{"SourceCode": "pragma solidity ^0.6.6;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function burn(uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/libraries/Address.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/SafeERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeBurn(IERC20 token, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.burn.selector, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/Context.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/Ownable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/BSCXNTS.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract BSCXNTS is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    // Info of each user.\r\n    struct UserInfo {\r\n        uint256 amount;            // How many LP tokens the user has provided.\r\n        uint256 rewardDebt;        // Reward debt. See explanation below.\r\n        uint256 rewardDebtAtBlock; // the last block user stake\r\n        uint256 lockAmount;        // Lock amount reward token\r\n        uint256 lastUnlockBlock;\r\n    }\r\n\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        IERC20 lpToken;            // Address of LP token contract.\r\n        IERC20 rewardToken;        // Address of reward token contract.\r\n        uint256 allocPoint;        // How many allocation points assigned to this pool. reward to distribute per block.\r\n        uint256 lastRewardBlock;   // Last block number that Reward distribution occurs.\r\n        uint256 accRewardPerShare; // Accumulated Reward per share, times 1e12. See below.\r\n        uint256 rewardPerBlock;    // Reward per block.\r\n        uint256 percentLockReward; // Percent lock reward.\r\n        uint256 percentForDev;     // Percent for dev team.\r\n        uint256 percentForBurn;    // Percent burn reward token.\r\n        uint256 finishBonusAtBlock;\r\n        uint256 startBlock;        // Start at block.\r\n        uint256 totalLock;         // Total lock reward token on pool.\r\n        uint256 lockFromBlock;     // Lock from block.\r\n        uint256 lockToBlock;       // Lock to block.\r\n    }\r\n\r\n    // Dev address.\r\n    address public devaddr;\r\n    bool public status;             // Status handle farmer can harvest.\r\n    IERC20 public referralLPToken;  // LP token for check referral program\r\n\r\n    uint256 public stakeAmountLPLv1;    // Minimum stake LP token condition level1 for referral program.\r\n    uint256 public stakeAmountLPLv2;    // Minimum stake LP token condition level2 for referral program.\r\n\r\n    uint256 public percentForReferLv1; // Percent reward level1 referral program.\r\n    uint256 public percentForReferLv2; // Percent reward level2 referral program.\r\n\r\n    // Info of each pool.\r\n    PoolInfo[] public poolInfo;\r\n    mapping(address => address) public referrers;\r\n    // Info of each user that stakes LP tokens. pid => user address => info\r\n    mapping(uint256 => mapping (address => UserInfo)) public userInfo;\r\n\r\n    mapping(uint256 => uint256[]) public rewardMultipliers;\r\n    mapping(uint256 => uint256[]) public halvingAtBlocks;\r\n    mapping(uint256 => address) public teamAddresses; // Set address receive reward for project team IDO\r\n\r\n    // Total allocation points. Must be the sum of all allocation points in all pools same reward token.\r\n    mapping(IERC20 => uint256) public totalAllocPoints;\r\n    // Total locks. Must be the sum of all token locks in all pools same reward token.\r\n    mapping(IERC20 => uint256) public totalLocks;\r\n    mapping(address => mapping (address => uint256)) public referralAmountLv1;\r\n    mapping(address => mapping (address => uint256)) public referralAmountLv2;\r\n\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event SendReward(address indexed user, uint256 indexed pid, uint256 amount, uint256 lockAmount);\r\n    event Lock(address indexed to, uint256 value);\r\n    event Status(address indexed user, bool status);\r\n    event ReferralLPToken(address indexed user, IERC20 referralLPToken);\r\n    event TeamAddressPool(address indexed user, uint256 indexed pid, address teamAddress);\r\n    event AmountLPStakeLevelRefer(address indexed user, uint256 indexed stakeAmountLPLv1, uint256 indexed stakeAmountLPLv2);\r\n    event PercentLPLevelRefer(address indexed user, uint256 indexed percentForReferLv1, uint256 indexed percentForReferLv2);\r\n    event SendReferralReward(address indexed user, address indexed referrer, uint256 indexed pid, uint256 amount, uint256 lockAmount);\r\n\r\n    constructor(\r\n        address _devaddr,\r\n        uint256 _stakeAmountLPLv1,\r\n        uint256 _stakeAmountLPLv2,\r\n        uint256 _percentForReferLv1,\r\n        uint256 _percentForReferLv2,\r\n        IERC20 _referralLPToken\r\n    ) public {\r\n        devaddr = _devaddr;\r\n        stakeAmountLPLv1 = _stakeAmountLPLv1;\r\n        stakeAmountLPLv2 = _stakeAmountLPLv2;\r\n        percentForReferLv1 = _percentForReferLv1;\r\n        percentForReferLv2 = _percentForReferLv2;\r\n        referralLPToken = _referralLPToken;\r\n\r\n        status = true;\r\n    }\r\n\r\n    function poolLength() external view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n\r\n    // Add a new lp to the pool. Can only be called by the owner.\r\n    function add(\r\n        IERC20 _lpToken,\r\n        IERC20 _rewardToken,\r\n        uint256 _startBlock,\r\n        uint256 _allocPoint,\r\n        uint256 _rewardPerBlock,\r\n        uint256 _percentLockReward,\r\n        uint256 _percentForDev,\r\n        uint256 _percentForBurn,\r\n        uint256 _halvingAfterBlock,\r\n        uint256[] memory _rewardMultiplier,\r\n        uint256 _lockFromBlock,\r\n        uint256 _lockToBlock\r\n    ) public onlyOwner {\r\n        _setAllocPoints(_rewardToken, _allocPoint);\r\n        uint256 finishBonusAtBlock = _setHalvingAtBlocks(poolInfo.length, _rewardMultiplier, _halvingAfterBlock, _startBlock);\r\n        teamAddresses[poolInfo.length] = devaddr;\r\n\r\n        poolInfo.push(PoolInfo({\r\n            lpToken: _lpToken,\r\n            rewardToken: _rewardToken,\r\n            lastRewardBlock: block.number > _startBlock ? block.number : _startBlock,\r\n            allocPoint: _allocPoint,\r\n            accRewardPerShare: 0,\r\n            startBlock: _startBlock,\r\n            rewardPerBlock: _rewardPerBlock,\r\n            percentLockReward: _percentLockReward,\r\n            percentForDev: _percentForDev,\r\n            percentForBurn: _percentForBurn,\r\n            finishBonusAtBlock: finishBonusAtBlock,\r\n            totalLock: 0,\r\n            lockFromBlock: _lockFromBlock,\r\n            lockToBlock: _lockToBlock\r\n        }));\r\n    }\r\n\r\n    function _setAllocPoints(IERC20 _rewardToken, uint256 _allocPoint) internal onlyOwner {\r\n        totalAllocPoints[_rewardToken] = totalAllocPoints[_rewardToken].add(_allocPoint);\r\n    }\r\n\r\n    function _setHalvingAtBlocks(uint256 _pid, uint256[] memory _rewardMultiplier, uint256 _halvingAfterBlock, uint256 _startBlock) internal onlyOwner returns(uint256) {\r\n        rewardMultipliers[_pid] = _rewardMultiplier;\r\n        for (uint256 i = 0; i < _rewardMultiplier.length - 1; i++) {\r\n            uint256 halvingAtBlock = _halvingAfterBlock.mul(i + 1).add(_startBlock);\r\n            halvingAtBlocks[_pid].push(halvingAtBlock);\r\n        }\r\n        uint256 finishBonusAtBlock = _halvingAfterBlock.mul(_rewardMultiplier.length - 1).add(_startBlock);\r\n        halvingAtBlocks[_pid].push(uint256(-1));\r\n        return finishBonusAtBlock;\r\n    }\r\n\r\n    function setStatus(bool _status) public onlyOwner {\r\n        status = _status;\r\n        emit Status(msg.sender, status);\r\n    }\r\n\r\n    function setReferralLPToken(IERC20 _referralLPToken) public onlyOwner {\r\n        referralLPToken = _referralLPToken;\r\n        emit ReferralLPToken(msg.sender, referralLPToken);\r\n    }\r\n\r\n    // Set team address receive reward\r\n    function setTeamAddressPool(uint256 _pid, address _teamAddress) public {\r\n        require(msg.sender == teamAddresses[_pid], \"dev: wut?\");\r\n        teamAddresses[_pid] = _teamAddress;\r\n        emit TeamAddressPool(msg.sender, _pid, teamAddresses[_pid]);\r\n    }\r\n\r\n    function setAmountLPStakeLevelRefer(uint256 _stakeAmountLPLv1, uint256 _stakeAmountLPLv2) public onlyOwner {\r\n        stakeAmountLPLv1 = _stakeAmountLPLv1;\r\n        stakeAmountLPLv2 = _stakeAmountLPLv2;\r\n        emit AmountLPStakeLevelRefer(msg.sender, stakeAmountLPLv1, stakeAmountLPLv2);\r\n    }\r\n\r\n    function setPercentLPLevelRefer(uint256 _percentForReferLv1, uint256 _percentForReferLv2) public onlyOwner {\r\n        percentForReferLv1 = _percentForReferLv1;\r\n        percentForReferLv2 = _percentForReferLv2;\r\n        emit PercentLPLevelRefer(msg.sender, percentForReferLv1, percentForReferLv2);\r\n    }\r\n\r\n    // Update the given pool's BSCX allocation point. Can only be called by the owner.\r\n    function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) public onlyOwner {\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n\r\n        totalAllocPoints[pool.rewardToken] = totalAllocPoints[pool.rewardToken].sub(pool.allocPoint).add(_allocPoint);\r\n        pool.allocPoint = _allocPoint;\r\n    }\r\n\r\n    // Update reward variables for all pools. Be careful of gas spending!\r\n    function massUpdatePools() public {\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            updatePool(pid);\r\n        }\r\n    }\r\n\r\n    // Update reward variables of the given pool to be up-to-date.\r\n    function updatePool(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (block.number <= pool.lastRewardBlock) {\r\n            return;\r\n        }\r\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\r\n\r\n        if (lpSupply == 0) {\r\n            pool.lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n\r\n        uint256 forBurn;\r\n        uint256 forDev;\r\n        uint256 forFarmer;\r\n        (forBurn, forDev, forFarmer) = getPoolReward(_pid);\r\n\r\n        if (forBurn > 0) {\r\n            pool.rewardToken.burn(forBurn);\r\n        }\r\n\r\n        if (forDev > 0) {\r\n            uint256 lockAmount = forDev.mul(pool.percentLockReward).div(100);\r\n            if (teamAddresses[_pid] != address(0)) {\r\n                pool.rewardToken.transfer(teamAddresses[_pid], forDev.sub(lockAmount));\r\n                farmLock(teamAddresses[_pid], lockAmount, _pid);\r\n            } else {\r\n                pool.rewardToken.transfer(devaddr, forDev.sub(lockAmount));\r\n                farmLock(devaddr, lockAmount, _pid);\r\n            }\r\n        }\r\n        pool.accRewardPerShare = pool.accRewardPerShare.add(forFarmer.mul(1e12).div(lpSupply));\r\n        pool.lastRewardBlock = block.number;\r\n    }\r\n\r\n    // Return reward multiplier over the given _from to _to block.\r\n    function getMultiplier(\r\n        uint256 _from,\r\n        uint256 _to,\r\n        uint256[] memory _halvingAtBlock,\r\n        uint256[] memory _rewardMultiplier,\r\n        uint256 _startBlock\r\n    ) public pure returns (uint256) {\r\n        uint256 result = 0;\r\n        if (_from < _startBlock) return 0;\r\n\r\n        for (uint256 i = 0; i < _halvingAtBlock.length; i++) {\r\n            uint256 endBlock = _halvingAtBlock[i];\r\n\r\n            if (_to <= endBlock) {\r\n                uint256 m = _to.sub(_from).mul(_rewardMultiplier[i]);\r\n                return result.add(m);\r\n            }\r\n\r\n            if (_from < endBlock) {\r\n                uint256 m = endBlock.sub(_from).mul(_rewardMultiplier[i]);\r\n                _from = endBlock;\r\n                result = result.add(m);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function getPoolReward(uint256 _pid) public view returns (uint256 forBurn, uint256 forDev, uint256 forFarmer) {\r\n        PoolInfo memory pool = poolInfo[_pid];\r\n\r\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number, halvingAtBlocks[_pid], rewardMultipliers[_pid], pool.startBlock);\r\n        uint256 amount = multiplier.mul(pool.rewardPerBlock).mul(pool.allocPoint).div(totalAllocPoints[pool.rewardToken]);\r\n        uint256 rewardCanAlloc = pool.rewardToken.balanceOf(address(this));\r\n\r\n        if (rewardCanAlloc <= totalLocks[pool.rewardToken]) {\r\n            forBurn = 0;\r\n            forDev = 0;\r\n            forFarmer = 0;\r\n        } else if (rewardCanAlloc.sub(totalLocks[pool.rewardToken]) < amount) {\r\n            forBurn = 0;\r\n            forDev = 0;\r\n            forFarmer = rewardCanAlloc.sub(totalLocks[pool.rewardToken]);\r\n        } else {\r\n            forBurn = amount.mul(pool.percentForBurn).div(100);\r\n            forDev = amount.sub(forBurn).mul(pool.percentForDev).div(100);\r\n            forFarmer = amount.sub(forBurn).sub(forDev);\r\n        }\r\n    }\r\n\r\n    // View function to see pending reward on frontend.\r\n    function pendingReward(uint256 _pid, address _user) external view returns (uint256) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 accRewardPerShare = pool.accRewardPerShare;\r\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\r\n        if (block.number > pool.lastRewardBlock && lpSupply > 0) {\r\n            uint256 forFarmer;\r\n            (, , forFarmer) = getPoolReward(_pid);\r\n            accRewardPerShare = accRewardPerShare.add(forFarmer.mul(1e12).div(lpSupply));\r\n\r\n        }\r\n        return user.amount.mul(accRewardPerShare).div(1e12).sub(user.rewardDebt);\r\n    }\r\n\r\n    function claimReward(uint256 _pid) public {\r\n        require(status == true, \"BSCXNTS::withdraw: can not claim reward\");\r\n        updatePool(_pid);\r\n        _harvest(_pid);\r\n    }\r\n\r\n    function _harvest(uint256 _pid) internal {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n\r\n        if (user.amount > 0) {\r\n            uint256 pending = user.amount.mul(pool.accRewardPerShare).div(1e12).sub(user.rewardDebt);\r\n            uint256 masterBal = pool.rewardToken.balanceOf(address(this));\r\n\r\n            if (pending > masterBal) {\r\n                pending = masterBal;\r\n            }\r\n\r\n            if(pending > 0) {\r\n                uint256 referAmountLv1 = pending.mul(percentForReferLv1).div(100);\r\n                uint256 referAmountLv2 = pending.mul(percentForReferLv2).div(100);\r\n                _transferReferral(_pid, referAmountLv1, referAmountLv2);\r\n\r\n                uint256 amount = pending.sub(referAmountLv1).sub(referAmountLv2);\r\n                uint256 lockAmount = amount.mul(pool.percentLockReward).div(100);\r\n                pool.rewardToken.transfer(msg.sender, amount.sub(lockAmount));\r\n                farmLock(msg.sender, lockAmount, _pid);\r\n                user.rewardDebtAtBlock = block.number;\r\n\r\n                emit SendReward(msg.sender, _pid, amount, lockAmount);\r\n            }\r\n\r\n            user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e12);\r\n        }\r\n    }\r\n\r\n    function _transferReferral(uint256 _pid, uint256 _referAmountLv1, uint256 _referAmountLv2) internal {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        address referrerLv1 = referrers[address(msg.sender)];\r\n        uint256 referAmountForDev = 0;\r\n\r\n        if (referrerLv1 != address(0)) {\r\n            uint256 lpStaked = referralLPToken.balanceOf(referrerLv1);\r\n            if (lpStaked >= stakeAmountLPLv1) {\r\n                uint256 lockAmount = _referAmountLv1.mul(pool.percentLockReward).div(100);\r\n                pool.rewardToken.transfer(referrerLv1,  _referAmountLv1.sub(lockAmount));\r\n                farmLock(referrerLv1, lockAmount, _pid);\r\n\r\n                referralAmountLv1[address(pool.rewardToken)][address(referrerLv1)] = referralAmountLv1[address(pool.rewardToken)][address(referrerLv1)].add(_referAmountLv1);\r\n                emit SendReferralReward(referrerLv1, msg.sender, _pid, _referAmountLv1, lockAmount);\r\n            } else {\r\n                // dev team will receive reward of referrer level 1\r\n                referAmountForDev = referAmountForDev.add(_referAmountLv1);\r\n            }\r\n\r\n            address referrerLv2 = referrers[referrerLv1];\r\n            uint256 lpStaked2 = referralLPToken.balanceOf(referrerLv2);\r\n            if (referrerLv2 != address(0) && lpStaked2 >= stakeAmountLPLv2) {\r\n                uint256 lockAmount = _referAmountLv2.mul(pool.percentLockReward).div(100);\r\n                pool.rewardToken.transfer(referrerLv2, _referAmountLv2.sub(lockAmount));\r\n                farmLock(referrerLv2, lockAmount, _pid);\r\n\r\n                referralAmountLv2[address(pool.rewardToken)][address(referrerLv2)] = referralAmountLv2[address(pool.rewardToken)][address(referrerLv2)].add(_referAmountLv2);\r\n                emit SendReferralReward(referrerLv2, msg.sender, _pid, _referAmountLv2, lockAmount);\r\n            } else {\r\n                // dev team will receive reward of referrer level 2\r\n                referAmountForDev = referAmountForDev.add(_referAmountLv2);\r\n            }\r\n        } else {\r\n            referAmountForDev = _referAmountLv1.add(_referAmountLv2);\r\n        }\r\n\r\n        if (referAmountForDev > 0) {\r\n            uint256 lockAmount = referAmountForDev.mul(pool.percentLockReward).div(100);\r\n            pool.rewardToken.transfer(devaddr, referAmountForDev.sub(lockAmount));\r\n            farmLock(devaddr, lockAmount, _pid);\r\n        }\r\n    }\r\n\r\n    // Deposit LP tokens to BSCXNTS.\r\n    function deposit(uint256 _pid, uint256 _amount, address _referrer) public {\r\n        require(_amount > 0, \"BSCXNTS::deposit: amount must be greater than 0\");\r\n\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        updatePool(_pid);\r\n        _harvest(_pid);\r\n        pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\r\n        if (user.amount == 0) {\r\n            user.rewardDebtAtBlock = block.number;\r\n        }\r\n        user.amount = user.amount.add(_amount);\r\n        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e12);\r\n\r\n        if (referrers[address(msg.sender)] == address(0) && _referrer != address(0) && _referrer != address(msg.sender)) {\r\n            referrers[address(msg.sender)] = address(_referrer);\r\n        }\r\n\r\n        emit Deposit(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    // Withdraw LP tokens from BSCXNTS.\r\n    function withdraw(uint256 _pid, uint256 _amount) public {\r\n        require(status == true, \"BSCXNTS::withdraw: can not withdraw\");\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        require(user.amount >= _amount, \"BSCXNTS::withdraw: not good\");\r\n\r\n        updatePool(_pid);\r\n        _harvest(_pid);\r\n\r\n        if(_amount > 0) {\r\n            user.amount = user.amount.sub(_amount);\r\n            pool.lpToken.safeTransfer(address(msg.sender), _amount);\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e12);\r\n        emit Withdraw(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    function emergencyWithdraw(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        pool.lpToken.safeTransfer(address(msg.sender), user.amount);\r\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\r\n        user.amount = 0;\r\n        user.rewardDebt = 0;\r\n    }\r\n\r\n    // Update dev address by the previous dev.\r\n    function dev(address _devaddr) public {\r\n        require(msg.sender == devaddr, \"dev: wut?\");\r\n        devaddr = _devaddr;\r\n    }\r\n\r\n    function getNewRewardPerBlock(uint256 _pid) public view returns (uint256) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n\r\n        uint256 multiplier = getMultiplier(block.number -1, block.number, halvingAtBlocks[_pid], rewardMultipliers[_pid], pool.startBlock);\r\n\r\n        return multiplier\r\n                .mul(pool.rewardPerBlock)\r\n                .mul(pool.allocPoint)\r\n                .div(totalAllocPoints[pool.rewardToken]);\r\n    }\r\n\r\n    function totalLockInPool(uint256 _pid) public view returns (uint256) {\r\n        return poolInfo[_pid].totalLock;\r\n    }\r\n\r\n    function totalLock(IERC20 _rewardToken) public view returns (uint256) {\r\n        return totalLocks[_rewardToken];\r\n    }\r\n\r\n    function lockOf(address _holder, uint256 _pid) public view returns (uint256) {\r\n        return userInfo[_pid][_holder].lockAmount;\r\n    }\r\n\r\n    function lastUnlockBlock(address _holder, uint256 _pid) public view returns (uint256) {\r\n        return userInfo[_pid][_holder].lastUnlockBlock;\r\n    }\r\n\r\n    function farmLock(address _holder, uint256 _amount, uint256 _pid) internal {\r\n        require(_holder != address(0), \"ERC20: lock to the zero address\");\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_holder];\r\n\r\n        require(_amount <= pool.rewardToken.balanceOf(address(this)), \"ERC20: lock amount over balance\");\r\n        user.lockAmount = user.lockAmount.add(_amount);\r\n        pool.totalLock = pool.totalLock.add(_amount);\r\n        totalLocks[pool.rewardToken] = totalLocks[pool.rewardToken].add(_amount);\r\n\r\n        if (user.lastUnlockBlock < pool.lockFromBlock) {\r\n            user.lastUnlockBlock = pool.lockFromBlock;\r\n        }\r\n        emit Lock(_holder, _amount);\r\n    }\r\n\r\n    function canUnlockAmount(address _holder, uint256 _pid) public view returns (uint256) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_holder];\r\n\r\n        if (block.number < pool.lockFromBlock) {\r\n            return 0;\r\n        }\r\n        else if (block.number >= pool.lockToBlock) {\r\n            return user.lockAmount;\r\n        }\r\n        else {\r\n            uint256 releaseBlock = block.number.sub(user.lastUnlockBlock);\r\n            uint256 numberLockBlock = pool.lockToBlock.sub(user.lastUnlockBlock);\r\n            return user.lockAmount.mul(releaseBlock).div(numberLockBlock);\r\n        }\r\n    }\r\n\r\n    function unlock(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        require(user.lockAmount > 0, \"ERC20: cannot unlock\");\r\n\r\n        uint256 amount = canUnlockAmount(msg.sender, _pid);\r\n        // just for sure\r\n        if (amount > pool.rewardToken.balanceOf(address(this))) {\r\n            amount = pool.rewardToken.balanceOf(address(this));\r\n        }\r\n        pool.rewardToken.transfer(msg.sender, amount);\r\n        user.lockAmount = user.lockAmount.sub(amount);\r\n        user.lastUnlockBlock = block.number;\r\n        pool.totalLock = pool.totalLock.sub(amount);\r\n        totalLocks[pool.rewardToken] = totalLocks[pool.rewardToken].sub(amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakeAmountLPLv1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeAmountLPLv2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percentForReferLv1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percentForReferLv2\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_referralLPToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeAmountLPLv1\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeAmountLPLv2\",\"type\":\"uint256\"}],\"name\":\"AmountLPStakeLevelRefer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"percentForReferLv1\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"percentForReferLv2\",\"type\":\"uint256\"}],\"name\":\"PercentLPLevelRefer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"referralLPToken\",\"type\":\"address\"}],\"name\":\"ReferralLPToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockAmount\",\"type\":\"uint256\"}],\"name\":\"SendReferralReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockAmount\",\"type\":\"uint256\"}],\"name\":\"SendReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"Status\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"teamAddress\",\"type\":\"address\"}],\"name\":\"TeamAddressPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percentLockReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percentForDev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percentForBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_halvingAfterBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardMultiplier\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_lockFromBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockToBlock\",\"type\":\"uint256\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"canUnlockAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"}],\"name\":\"dev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devaddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_halvingAtBlock\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardMultiplier\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getNewRewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getPoolReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"forBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forDev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forFarmer\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"halvingAtBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"lastUnlockBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"lockOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentForReferLv1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentForReferLv2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentLockReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentForDev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentForBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finishBonusAtBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockFromBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockToBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralAmountLv1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralAmountLv2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralLPToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardMultipliers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeAmountLPLv1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeAmountLPLv2\",\"type\":\"uint256\"}],\"name\":\"setAmountLPStakeLevelRefer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentForReferLv1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percentForReferLv2\",\"type\":\"uint256\"}],\"name\":\"setPercentLPLevelRefer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_referralLPToken\",\"type\":\"address\"}],\"name\":\"setReferralLPToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_teamAddress\",\"type\":\"address\"}],\"name\":\"setTeamAddressPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeAmountLPLv1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeAmountLPLv2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"teamAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalAllocPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"totalLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"totalLockInPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalLocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebtAtBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUnlockBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BSCXNTS", "CompilerVersion": "v0.6.6+commit.6c089d02", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000dad254728a37d1e80c21afae688c64d0383cc307000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000012c0000000000000000000000000000000000000000000000000000000000000046000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000a32a983a64ce21834221aa0ad1f1533907553136", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv2", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://21b5595947d6fc32008427bfabf6c0890c3908819673fffff0f79203a4cc92a6"}