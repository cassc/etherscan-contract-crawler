{"SourceCode": "// Sources flattened with hardhat v2.7.0 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v3.4.2-solc-0.7\r\n\r\n// License: MIT\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v3.4.2-solc-0.7\r\n\r\n// License: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v3.4.2-solc-0.7\r\n\r\n// License: MIT\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/ReentrancyGuard.sol@v3.4.2-solc-0.7\r\n\r\n// License: MIT\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/math/SafeMath.sol@v3.4.2-solc-0.7\r\n\r\n// License: MIT\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v3.4.2-solc-0.7\r\n\r\n// License: MIT\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/SafeERC20.sol@v3.4.2-solc-0.7\r\n\r\n// License: MIT\r\n\r\npragma solidity ^0.7.0;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/libraries/FixedPointMath.sol\r\n\r\n//License: GPL-3.0\r\n\r\npragma solidity ^0.7.3;\r\n\r\n\r\nlibrary FixedPointMath {\r\n  uint256 public constant DECIMALS = 18;\r\n  uint256 public constant SCALAR = 10**DECIMALS;\r\n\r\n  struct FixedDecimal {\r\n    uint256 x;\r\n  }\r\n\r\n  function fromU256(uint256 value) internal pure returns (FixedDecimal memory) {\r\n    uint256 x;\r\n    require(value == 0 || (x = value * SCALAR) / SCALAR == value);\r\n    return FixedDecimal(x);\r\n  }\r\n\r\n  function maximumValue() internal pure returns (FixedDecimal memory) {\r\n    return FixedDecimal(uint256(-1));\r\n  }\r\n\r\n  function add(FixedDecimal memory self, FixedDecimal memory value) internal pure returns (FixedDecimal memory) {\r\n    uint256 x;\r\n    require((x = self.x + value.x) >= self.x);\r\n    return FixedDecimal(x);\r\n  }\r\n\r\n  function add(FixedDecimal memory self, uint256 value) internal pure returns (FixedDecimal memory) {\r\n    return add(self, fromU256(value));\r\n  }\r\n\r\n  function sub(FixedDecimal memory self, FixedDecimal memory value) internal pure returns (FixedDecimal memory) {\r\n    uint256 x;\r\n    require((x = self.x - value.x) <= self.x);\r\n    return FixedDecimal(x);\r\n  }\r\n\r\n  function sub(FixedDecimal memory self, uint256 value) internal pure returns (FixedDecimal memory) {\r\n    return sub(self, fromU256(value));\r\n  }\r\n\r\n  function mul(FixedDecimal memory self, uint256 value) internal pure returns (FixedDecimal memory) {\r\n    uint256 x;\r\n    require(value == 0 || (x = self.x * value) / value == self.x);\r\n    return FixedDecimal(x);\r\n  }\r\n\r\n  function div(FixedDecimal memory self, uint256 value) internal pure returns (FixedDecimal memory) {\r\n    require(value != 0);\r\n    return FixedDecimal(self.x / value);\r\n  }\r\n\r\n  function cmp(FixedDecimal memory self, FixedDecimal memory value) internal pure returns (int256) {\r\n    if (self.x < value.x) {\r\n      return -1;\r\n    }\r\n\r\n    if (self.x > value.x) {\r\n      return 1;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  function decode(FixedDecimal memory self) internal pure returns (uint256) {\r\n    return self.x / SCALAR;\r\n  }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/math/Math.sol@v3.4.2-solc-0.7\r\n\r\n// License: MIT\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IDetailedERC20.sol\r\n\r\npragma solidity ^0.7.3;\r\n\r\ninterface IDetailedERC20 is IERC20 {\r\n  function name() external returns (string memory);\r\n  function symbol() external returns (string memory);\r\n  function decimals() external returns (uint8);\r\n}\r\n\r\n\r\n// File contracts/IERC721.sol\r\n\r\n// License: UNLICENSED\r\n\r\npragma solidity ^0.7.3;\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n      *\r\n      * Requirements:\r\n      *\r\n      * - `from` cannot be the zero address.\r\n      * - `to` cannot be the zero address.\r\n      * - `tokenId` token must exist and be owned by `from`.\r\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n      *\r\n      * Emits a {Transfer} event.\r\n      */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;   \r\n\r\n \r\n    function getLevel(uint256 tokenId)  external view returns (uint256);\r\n    function isLord(uint256 tokenId)  external view returns (bool);\r\n    function getReferrer() external view returns (address) ;\r\n    function getUsdValue(uint256 tokenId)  external  view returns (uint256) ;\r\n}\r\n\r\n\r\n// File contracts/libraries/pools/Pool.sol\r\n\r\n// License: GPL-3.0\r\n\r\npragma solidity ^0.7.3;\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n//import \"hardhat/console.sol\";\r\n\r\n\r\n/// @title Pool\r\n///\r\n/// @dev A library which provides the Pool data struct and associated functions.\r\nlibrary Pool {\r\n  using FixedPointMath for FixedPointMath.FixedDecimal;\r\n  using Pool for Pool.Data;\r\n  using Pool for Pool.List;\r\n  using SafeMath for uint256;\r\n\r\n  struct Context {\r\n    uint256 rewardRate;\r\n    uint256 totalRewardWeight;\r\n  }\r\n\r\n  struct Data {\r\n    IERC721 token;\r\n    uint256 totalDeposited;\r\n    uint256 rewardWeight;\r\n    FixedPointMath.FixedDecimal accumulatedRewardWeight;\r\n    uint256 lastUpdatedBlock;\r\n  }\r\n\r\n  struct List {\r\n    Data[] elements;\r\n  }\r\n\r\n  /// @dev Updates the pool.\r\n  ///\r\n  /// @param _ctx the pool context.\r\n  function update(Data storage _data, Context storage _ctx) internal {\r\n    _data.accumulatedRewardWeight = _data.getUpdatedAccumulatedRewardWeight(_ctx);\r\n    _data.lastUpdatedBlock = block.number;\r\n  }\r\n\r\n  /// @dev Gets the rate at which the pool will distribute rewards to stakers.\r\n  ///\r\n  /// @param _ctx the pool context.\r\n  ///\r\n  /// @return the reward rate of the pool in tokens per block.\r\n  function getRewardRate(Data storage _data, Context storage _ctx)\r\n    internal view\r\n    returns (uint256)\r\n  {\r\n    // console.log(\"get reward rate\");\r\n    // console.log(uint(_data.rewardWeight));\r\n    // console.log(uint(_ctx.totalRewardWeight));\r\n    // console.log(uint(_ctx.rewardRate));\r\n    return _ctx.rewardRate.mul(_data.rewardWeight).div(_ctx.totalRewardWeight);\r\n  }\r\n\r\n  /// @dev Gets the accumulated reward weight of a pool.\r\n  ///\r\n  /// @param _ctx the pool context.\r\n  ///\r\n  /// @return the accumulated reward weight.\r\n  function getUpdatedAccumulatedRewardWeight(Data storage _data, Context storage _ctx)\r\n    internal view\r\n    returns (FixedPointMath.FixedDecimal memory)\r\n  {\r\n    if (_data.totalDeposited == 0) {\r\n      return _data.accumulatedRewardWeight;\r\n    }\r\n\r\n    uint256 _elapsedTime = block.number.sub(_data.lastUpdatedBlock);\r\n    if (_elapsedTime == 0) {\r\n      return _data.accumulatedRewardWeight;\r\n    }\r\n\r\n    uint256 _rewardRate = _data.getRewardRate(_ctx);\r\n    uint256 _distributeAmount = _rewardRate.mul(_elapsedTime);\r\n\r\n    if (_distributeAmount == 0) {\r\n      return _data.accumulatedRewardWeight;\r\n    }\r\n\r\n    FixedPointMath.FixedDecimal memory _rewardWeight = FixedPointMath.fromU256(_distributeAmount).div(_data.totalDeposited);\r\n    return _data.accumulatedRewardWeight.add(_rewardWeight);\r\n  }\r\n\r\n  /// @dev Adds an element to the list.\r\n  ///\r\n  /// @param _element the element to add.\r\n  function push(List storage _self, Data memory _element) internal {\r\n    _self.elements.push(_element);\r\n  }\r\n\r\n  /// @dev Gets an element from the list.\r\n  ///\r\n  /// @param _index the index in the list.\r\n  ///\r\n  /// @return the element at the specified index.\r\n  function get(List storage _self, uint256 _index) internal view returns (Data storage) {\r\n    return _self.elements[_index];\r\n  }\r\n\r\n  /// @dev Gets the last element in the list.\r\n  ///\r\n  /// This function will revert if there are no elements in the list.\r\n  ///ck\r\n  /// @return the last element in the list.\r\n  function last(List storage _self) internal view returns (Data storage) {\r\n    return _self.elements[_self.lastIndex()];\r\n  }\r\n\r\n  /// @dev Gets the index of the last element in the list.\r\n  ///\r\n  /// This function will revert if there are no elements in the list.\r\n  ///\r\n  /// @return the index of the last element.\r\n  function lastIndex(List storage _self) internal view returns (uint256) {\r\n    uint256 _length = _self.length();\r\n    return _length.sub(1, \"Pool.List: list is empty\");\r\n  }\r\n\r\n  /// @dev Gets the number of elements in the list.\r\n  ///\r\n  /// @return the number of elements.\r\n  function length(List storage _self) internal view returns (uint256) {\r\n    return _self.elements.length;\r\n  }\r\n}\r\n\r\n\r\n// File contracts/libraries/pools/Stake.sol\r\n\r\n// License: GPL-3.0\r\n\r\npragma solidity ^0.7.3;\r\n\r\n \r\n\r\n\r\n//import \"hardhat/console.sol\";\r\n\r\n/// @title Stake\r\n///\r\n/// @dev A library which provides the Stake data struct and associated functions.\r\nlibrary Stake {\r\n  using FixedPointMath for FixedPointMath.FixedDecimal;\r\n  using Pool for Pool.Data;\r\n  using SafeMath for uint256;\r\n  using Stake for Stake.Data;\r\n\r\n  struct Data {\r\n    uint256 totalDeposited;\r\n    uint256 totalUnclaimed;\r\n    FixedPointMath.FixedDecimal lastAccumulatedWeight;\r\n  }\r\n\r\n  function update(Data storage _self, Pool.Data storage _pool, Pool.Context storage _ctx) internal {\r\n    _self.totalUnclaimed = _self.getUpdatedTotalUnclaimed(_pool, _ctx);\r\n    _self.lastAccumulatedWeight = _pool.getUpdatedAccumulatedRewardWeight(_ctx);\r\n  }\r\n\r\n  function getUpdatedTotalUnclaimed(Data storage _self, Pool.Data storage _pool, Pool.Context storage _ctx)\r\n    internal view\r\n    returns (uint256)\r\n  {\r\n    FixedPointMath.FixedDecimal memory _currentAccumulatedWeight = _pool.getUpdatedAccumulatedRewardWeight(_ctx);\r\n    FixedPointMath.FixedDecimal memory _lastAccumulatedWeight = _self.lastAccumulatedWeight;\r\n\r\n    if (_currentAccumulatedWeight.cmp(_lastAccumulatedWeight) == 0) {\r\n      return _self.totalUnclaimed;\r\n    }\r\n\r\n    uint256 _distributedAmount = _currentAccumulatedWeight\r\n      .sub(_lastAccumulatedWeight)\r\n      .mul(_self.totalDeposited)\r\n      .decode();\r\n\r\n    return _self.totalUnclaimed.add(_distributedAmount);\r\n  }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol@v3.4.2-solc-0.7\r\n\r\n// License: MIT\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/ERC721Holder.sol@v3.4.2-solc-0.7\r\n\r\n// License: MIT\r\n\r\npragma solidity ^0.7.0;\r\n\r\n  /**\r\n   * @dev Implementation of the {IERC721Receiver} interface.\r\n   *\r\n   * Accepts all token transfers. \r\n   * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\r\n   */\r\ncontract ERC721Holder is IERC721Receiver {\r\n\r\n    /**\r\n     * @dev See {IERC721Receiver-onERC721Received}.\r\n     *\r\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/EnumerableSet.sol@v3.4.2-solc-0.7\r\n\r\n// License: MIT\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n\r\n// File contracts/IPriceOracle.sol\r\n\r\n// License: MIT LICENSE \r\n\r\npragma solidity >=0.7.0 < 0.9.0;\r\n\r\ninterface IPriceOracle  {\r\n  function bnbPrice() external view returns (uint256);\r\n  function wfcPrice() external view returns (uint256);\r\n  function dopPrice() external view returns (uint256);  \r\n  function diamondPrice() external view returns (uint256);  \r\n}\r\n\r\n\r\n// File contracts/StakingNFT.sol\r\n\r\n// License: MIT\r\n\r\npragma solidity ^0.7.0;\r\n \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//import \"hardhat/console.sol\"; \r\n \r\ncontract StakingNFT is ReentrancyGuard ,ERC721Holder, Ownable {\r\n  using FixedPointMath for FixedPointMath.FixedDecimal;\r\n  using EnumerableSet for EnumerableSet.UintSet;\r\n  using Pool for Pool.Data;\r\n  using Pool for Pool.List;\r\n  using SafeERC20 for IERC20;\r\n  using SafeMath for uint256;\r\n  using Stake for Stake.Data;\r\n  using Address for address;\r\n\r\n  uint256 constant startBlok = 888;\r\n  \r\n  address public constant ZERO_ADDRESS = address(0);\r\n\r\n  /// @dev Resolution for all fixed point numeric parameters which represent percents. The resolution allows for a\r\n  /// granularity of 0.01% increments.\r\n  uint256 public constant PERCENT_RESOLUTION = 10000;\r\n \r\n  event PendingGovernanceUpdated(\r\n    address pendingGovernance\r\n  );\r\n\r\n  event GovernanceUpdated(\r\n    address governance\r\n  );\r\n\r\n  event RewardRateUpdated(\r\n    uint256 rewardRate\r\n  );\r\n\r\n  event PoolRewardWeightUpdated(\r\n    uint256 indexed poolId,\r\n    uint256 rewardWeight\r\n  );\r\n\r\n  event PoolCreated(\r\n    uint256 indexed poolId,\r\n    uint256 indexed weight,\r\n    IERC721 indexed token\r\n  );\r\n\r\n  event TokensDeposited(\r\n    address indexed user,\r\n    uint256 indexed poolId,\r\n    uint256 amount\r\n  );\r\n\r\n  event TokensWithdrawn(\r\n    address indexed user,\r\n    uint256 indexed poolId,\r\n    uint256 amount\r\n  );\r\n\r\n  event TokensClaimed(\r\n    address indexed user,\r\n    uint256 indexed poolId,\r\n    uint256 amount\r\n  );\r\n\r\n  event RewardsUpdated(\r\n    address rewards\r\n  );\r\n\r\n  event TokensMinted(\r\n    address indexed user,\r\n    uint256 amountIn,\r\n    uint256 amountOut\r\n  );\r\n\r\n  event RefBonus(\r\n    address indexed user,\r\n    uint256 amount\r\n  );\r\n \r\n  event DopDeposited(\r\n    address indexed user,\r\n    uint256 amount\r\n  );\r\n\r\n  event DopBurned(\r\n    address indexed user,\r\n    uint256 amount\r\n  );\r\n\r\n\r\n  /// @dev The token which will be minted as a reward for staking.\r\n  IERC20 public reward;\r\n  IERC20 public dop;\r\n\r\n  /// @dev The address of the account which currently has administrative capabilities over this contract.\r\n  address public governance;\r\n\r\n  address public pendingGovernance;\r\n\r\n  uint256 public lordPrice = 1250 * 1e18; \r\n\r\n  uint256 public feePercent = 1000;  //default 10%\r\n\r\n  uint256 public refPercent = 500;  //default 5%\r\n \r\n  uint256 public dopDiv = 3;\r\n \r\n  /// @dev The address which will receive fees.\r\n  address public feeAddress;\r\n\r\n  /// @dev Tokens are mapped to their pool identifier plus one. Tokens that do not have an associated pool\r\n  /// will return an identifier of zero.\r\n  mapping(IERC721 => uint256) public tokenPoolIds;\r\n\r\n  mapping(uint256 => uint256) public tokenWeights;\r\n\r\n  /// @dev The context shared between the pools.\r\n  Pool.Context private _ctx;\r\n\r\n  /// @dev A list of all of the pools.\r\n  Pool.List private _pools;\r\n \r\n  IPriceOracle public oracle;\r\n\r\n  /// @dev A mapping of all of the user stakes mapped first by pool and then by address.\r\n  mapping(address => mapping(uint256 => Stake.Data)) private _stakes;\r\n  mapping(address => EnumerableSet.UintSet) private _holderTokens;\r\n  mapping(address => uint256) private dopAmounts;\r\n  uint256 public dopBurned;\r\n\r\n\tstruct User {\r\n\t\tuint256 count;   \r\n\t\taddress referrer;  \r\n\t}\r\n  mapping (address => User) public users;\r\n\r\n  constructor(\r\n    IERC20 _reward,\r\n    uint256 _rewardRate,\r\n    address _feeAddressTo,\r\n    IERC20 _dop,\r\n    address _oracle\r\n  )   {    \r\n    reward = _reward;\r\n    governance = msg.sender;\r\n    dop = _dop;\r\n    oracle = IPriceOracle(_oracle);\r\n \r\n    setRewardRate(_rewardRate);\r\n    setRewardFee(_feeAddressTo);\r\n  }\r\n \r\n  /// @dev Checks that caller is not a eoa.\r\n  ///\r\n  /// This is used to prevent contracts from interacting.\r\n  modifier noContractAllowed() {\r\n        require(!address(msg.sender).isContract() && msg.sender == tx.origin, \"Sorry we do not accept contract!\");\r\n        _;\r\n  }\r\n     \r\n\r\n  /// @dev A modifier which reverts when the caller is not the governance.\r\n  modifier onlyGovernance() {\r\n    require(msg.sender == governance, \"Staking: only governance\");\r\n    _;\r\n  }\r\n \r\n  function setRefPercent(uint256 _refPercent) external onlyGovernance {\r\n    refPercent = _refPercent;\r\n  }\r\n\r\n  function setFeePercent(uint256 _feePercent) external onlyGovernance {\r\n    feePercent = _feePercent;\r\n  }\r\n \r\n   function setDopDiv(uint256 _div) external onlyGovernance {\r\n    dopDiv = _div;\r\n  }\r\n \r\n  function setLordPrice(uint256 _lordPrice) external onlyGovernance {\r\n    lordPrice = _lordPrice;\r\n  } \r\n\r\n  /// @dev Sets the governance.\r\n  ///\r\n  /// This function can only called by the current governance.\r\n  ///\r\n  /// @param _pendingGovernance the new pending governance.\r\n  function setPendingGovernance(address _pendingGovernance) external onlyGovernance {\r\n    require(_pendingGovernance != address(0), \"Staking: pending governance address cannot be 0x0\");\r\n    pendingGovernance = _pendingGovernance;\r\n\r\n    emit PendingGovernanceUpdated(_pendingGovernance);\r\n  }\r\n\r\n  function acceptGovernance() external {\r\n    require(msg.sender == pendingGovernance, \"Staking: only pending governance\");\r\n\r\n    address _pendingGovernance = pendingGovernance;\r\n    governance = _pendingGovernance;\r\n\r\n    emit GovernanceUpdated(_pendingGovernance);\r\n  }\r\n\r\n  /// @dev Sets the rewards address.\r\n  ///\r\n  /// This function revert  if _rewards is zero address.\r\n  ///\r\n  /// @param _rewards the new rewards contract.\r\n  function setRewardFee(address _rewards) public onlyGovernance {\r\n    require(_rewards != ZERO_ADDRESS, \"Staking: rewards address cannot be 0x0.\");\r\n\r\n    feeAddress = _rewards;\r\n\r\n    emit RewardsUpdated(_rewards);\r\n  }\r\n\r\n  /// @dev Sets the distribution reward rate.\r\n  ///\r\n  /// This will update all of the pools.\r\n  ///\r\n  /// @param _rewardRate The number of tokens to distribute per second.\r\n  function setRewardRate(uint256 _rewardRate) public onlyGovernance {\r\n    _updatePools();\r\n\r\n    _ctx.rewardRate = _rewardRate;\r\n    \r\n    emit RewardRateUpdated(_rewardRate);\r\n  }\r\n\r\n  function getTokensOnStake(address _address) public view returns (uint256[] memory listOfStake) {\r\n        uint256 _len = _holderTokens[_address].length();   \r\n        uint256[] memory _tokens = new uint256[](_len);\r\n\r\n        for (uint256 index = 0; index < _len; index++) {\r\n            _tokens[index] = _holderTokens[_address].at(index);\r\n        }\r\n\r\n        return _tokens;\r\n  }\r\n   \r\n\r\n  /// @dev Creates a new pool.\r\n  ///\r\n  /// The created pool will need to have its reward weight initialized before it begins generating rewards.\r\n  ///\r\n  /// @param _token The token the pool will accept for staking.\r\n  ///\r\n  /// @return the identifier for the newly created pool.\r\n  function createPool(IERC721 _token, uint256 _rewardWeight) external onlyGovernance returns (uint256) {\r\n    require(tokenPoolIds[_token] == 0, \"Staking: token already has a pool\");\r\n\r\n    uint256 _poolId = _pools.length();\r\n    require(_poolId == 0, \"Staking: only one pool\");\r\n\r\n    _pools.push(Pool.Data({\r\n      token: _token,\r\n      totalDeposited: 0,\r\n      rewardWeight: _rewardWeight,\r\n      accumulatedRewardWeight: FixedPointMath.FixedDecimal(0),\r\n      lastUpdatedBlock: block.number\r\n    }));\r\n\r\n    tokenPoolIds[_token] = _poolId + 1;\r\n\r\n    //\r\n    _updatePools();\r\n    _ctx.totalRewardWeight = _ctx.totalRewardWeight.add(_rewardWeight);\r\n    //\r\n\r\n    emit PoolCreated(_poolId,_rewardWeight, _token);\r\n\r\n    return _poolId;\r\n  }\r\n\r\n  function setPoolRewardWeight(uint256 _poolId, uint256 _rewardWeight) external onlyGovernance {\r\n      _updatePools();\r\n\r\n      uint256 _totalRewardWeight = _ctx.totalRewardWeight;\r\n      Pool.Data storage _pool = _pools.get(_poolId);\r\n      uint256 _currentRewardWeight = _pool.rewardWeight;\r\n      if (_currentRewardWeight == _rewardWeight) {\r\n        return;\r\n      }\r\n\r\n      _totalRewardWeight = _totalRewardWeight.sub(_currentRewardWeight).add(_rewardWeight);\r\n      _pool.rewardWeight = _rewardWeight;\r\n\r\n      emit PoolRewardWeightUpdated(_poolId, _rewardWeight);\r\n      _ctx.totalRewardWeight = _totalRewardWeight;\r\n  }\r\n\r\n  /// @dev Sets the reward weights of all of the pools.\r\n  ///\r\n  /// @param _rewardWeights The reward weights of all of the pools.\r\n  function setRewardWeights(uint256[] calldata _rewardWeights) external onlyGovernance {\r\n    require(_rewardWeights.length == _pools.length(), \"Staking: weights length mismatch\");\r\n\r\n    _updatePools();\r\n\r\n    uint256 _totalRewardWeight = _ctx.totalRewardWeight;\r\n    for (uint256 _poolId = 0; _poolId < _pools.length(); _poolId++) {\r\n      Pool.Data storage _pool = _pools.get(_poolId);\r\n\r\n      uint256 _currentRewardWeight = _pool.rewardWeight;\r\n      if (_currentRewardWeight == _rewardWeights[_poolId]) {\r\n        continue;\r\n      }\r\n\r\n      // \r\n      _totalRewardWeight = _totalRewardWeight.sub(_currentRewardWeight).add(_rewardWeights[_poolId]);\r\n      _pool.rewardWeight = _rewardWeights[_poolId];\r\n\r\n      emit PoolRewardWeightUpdated(_poolId, _rewardWeights[_poolId]);\r\n    }\r\n\r\n    _ctx.totalRewardWeight = _totalRewardWeight;\r\n  }\r\n \r\n \r\n  /// @dev Stakes tokens into a pool.\r\n  ///\r\n  /// @param _poolId        the pool to deposit tokens into.\r\n \r\n  function deposit(uint256 _poolId, uint256[] calldata tokenIds, address referrer) external nonReentrant noContractAllowed {\r\n    require(referrer != msg.sender, \"referrer != msg.sender\");\r\n    require(tokenIds.length > 0, \"zero id\");\r\n    require(block.number > startBlok , \"Not start\" );\r\n\r\n    Pool.Data storage _pool = _pools.get(_poolId);\r\n    _pool.update(_ctx);\r\n\r\n    Stake.Data storage _stake = _stakes[msg.sender][_poolId];\r\n    _stake.update(_pool, _ctx);\r\n\r\n    uint256 _level = 0;\r\n    for (uint i = 0; i < tokenIds.length; i++) {\r\n        require(_pool.token.ownerOf(tokenIds[i]) == msg.sender , \"AINT YO TOKEN\");\r\n        require(_pool.token.isLord(tokenIds[i]), \"Not lord\");  //fixme\r\n\r\n        _pool.token.transferFrom(msg.sender, address(this), tokenIds[i]);\r\n        _holderTokens[msg.sender].add(tokenIds[i]);\r\n        _level += _pool.token.getLevel(tokenIds[i]); \r\n    }\r\n \r\n    _depositDop( lordPrice * tokenIds.length);\r\n    _deposit(_poolId, _level * 100); \r\n  \r\n    User storage user = users[msg.sender];\r\n    if (user.referrer == address(0)) {\r\n      user.referrer = (referrer == address(0)) ? governance : referrer ;\r\n      users[referrer].count = users[referrer].count + 1 ;\r\n    }   \r\n  }\r\n\r\n  function depositDop() public {\r\n      _depositDop( _holderTokens[msg.sender].length() * lordPrice); \r\n  }\r\n\r\n  function _depositDop(uint256 _usdValue) internal {\r\n    uint256 _dopAmount = _usdValue * 1e18 / oracle.dopPrice();\r\n    dop.safeTransferFrom(msg.sender, address(this),  _dopAmount);\r\n    dopAmounts[msg.sender] += _dopAmount;\r\n\r\n    emit DopDeposited(msg.sender, _dopAmount );\r\n  }\r\n\r\n  function getDopAmount(uint256[] calldata tokenIds) public view returns (uint256) {\r\n    return lordPrice * tokenIds.length * 1e18 / oracle.dopPrice();\r\n  }\r\n\r\n  function getUsdValue(uint256[] calldata tokenIds) public view returns (uint256) {  \r\n    return lordPrice * tokenIds.length ;\r\n  }\r\n\r\n  function safeWithdraw(address _token, uint256 _amount) public onlyOwner {\r\n    IERC20(_token).safeTransfer( msg.sender, _amount);\r\n  }\r\n\r\n  function rewardPreDay() public view returns (uint256) {\r\n    return _ctx.rewardRate.mul(28800) ;\r\n  }\r\n\r\n\r\n  /// @dev Withdraws staked tokens from a pool.\r\n  ///\r\n  /// @param _poolId          The pool to withdraw staked tokens from.\r\n  function withdraw(uint256 _poolId, uint256[] calldata tokenIds) public nonReentrant noContractAllowed {\r\n    require(tokenIds.length > 0, \"zero id\");\r\n    \r\n    Pool.Data storage _pool = _pools.get(_poolId);\r\n    _pool.update(_ctx);\r\n\r\n    Stake.Data storage _stake = _stakes[msg.sender][_poolId];\r\n    _stake.update(_pool, _ctx);\r\n    \r\n    uint256 _level = 0;\r\n    for (uint i = 0; i < tokenIds.length; i++) {\r\n        require(_holderTokens[msg.sender].contains(tokenIds[i]) , \"Token id not found\");\r\n\r\n        _pool.token.transferFrom(address(this), msg.sender, tokenIds[i]);//ERC721 ownership transferred\r\n        _holderTokens[msg.sender].remove(tokenIds[i]);\r\n        _level += _pool.token.getLevel(tokenIds[i]) ; \r\n    }\r\n    \r\n    _claim(_poolId);\r\n    _withdraw(_poolId, _level * 100);\r\n  }\r\n\r\n  /// @dev Claims all rewarded tokens from a pool.\r\n  ///\r\n  /// @param _poolId The pool to claim rewards from.\r\n  ///\r\n  /// @notice use this function to claim the tokens from a corresponding pool by ID.\r\n  function claim(uint256 _poolId) external nonReentrant {\r\n    Pool.Data storage _pool = _pools.get(_poolId);\r\n    _pool.update(_ctx);\r\n\r\n    Stake.Data storage _stake = _stakes[msg.sender][_poolId];\r\n    _stake.update(_pool, _ctx);\r\n\r\n    _claim(_poolId);\r\n  }\r\n\r\n\r\n  /// @dev Gets the rate at which tokens are minted to stakers for all pools.\r\n  ///\r\n  /// @return the reward rate.\r\n  function rewardRate() external view returns (uint256) {\r\n    return _ctx.rewardRate;\r\n  }\r\n\r\n  /// @dev Gets the total reward weight between all the pools.\r\n  ///\r\n  /// @return the total reward weight.\r\n  function totalRewardWeight() external view returns (uint256) {\r\n    return _ctx.totalRewardWeight;\r\n  }\r\n\r\n  /// @dev Gets the number of pools that exist.\r\n  ///\r\n  /// @return the pool count.\r\n  function poolCount() external view returns (uint256) {\r\n    return _pools.length();\r\n  }\r\n\r\n  /// @dev Gets the token a pool accepts.\r\n  ///\r\n  /// @param _poolId the identifier of the pool.\r\n  ///\r\n  /// @return the token.\r\n  function getPoolToken(uint256 _poolId) external view returns (IERC721) {\r\n    Pool.Data storage _pool = _pools.get(_poolId);\r\n    return _pool.token;\r\n  }\r\n\r\n  /// @dev Gets the total amount of funds staked in a pool.\r\n  ///\r\n  /// @param _poolId the identifier of the pool.\r\n  ///\r\n  /// @return the total amount of staked or deposited tokens.\r\n  function getPoolTotalDeposited(uint256 _poolId) public view returns (uint256) {\r\n    Pool.Data storage _pool = _pools.get(_poolId);\r\n    return _pool.totalDeposited;\r\n  }\r\n\r\n  /// @dev Gets the reward weight of a pool which determines how much of the total rewards it receives per block.\r\n  ///\r\n  /// @param _poolId the identifier of the pool.\r\n  ///\r\n  /// @return the pool reward weight.\r\n  function getPoolRewardWeight(uint256 _poolId) external view returns (uint256) {\r\n    Pool.Data storage _pool = _pools.get(_poolId);\r\n    return _pool.rewardWeight;\r\n  }\r\n\r\n  /// @dev Gets the amount of tokens per block being distributed to stakers for a pool.\r\n  ///\r\n  /// @param _poolId the identifier of the pool.\r\n  ///\r\n  /// @return the pool reward rate.\r\n  function getPoolRewardRate(uint256 _poolId) external view returns (uint256) {\r\n    Pool.Data storage _pool = _pools.get(_poolId);\r\n    return _pool.getRewardRate(_ctx);\r\n  }\r\n\r\n  /// @dev Gets the number of tokens a user has staked into a pool.\r\n  ///\r\n  /// @param _account The account to query.\r\n  /// @param _poolId  the identifier of the pool.\r\n  ///\r\n  /// @return the amount of deposited tokens.\r\n  function getStakeTotalDeposited(address _account, uint256 _poolId) external view returns (uint256) {\r\n    Stake.Data storage _stake = _stakes[_account][_poolId];\r\n    return _stake.totalDeposited;\r\n  }\r\n\r\n  /// @dev Gets the number of unclaimed reward tokens a user can claim from a pool.\r\n  ///\r\n  /// @param _account The account to get the unclaimed balance of.\r\n  /// @param _poolId  The pool to check for unclaimed rewards.\r\n  ///\r\n  /// @return the amount of unclaimed reward tokens a user has in a pool.\r\n  function getStakeTotalUnclaimed(address _account, uint256 _poolId) external view returns (uint256) {\r\n    Stake.Data storage _stake = _stakes[_account][_poolId];\r\n    return _stake.getUpdatedTotalUnclaimed(_pools.get(_poolId), _ctx);\r\n  }\r\n\r\n  /// @dev Updates all of the pools.\r\n  function _updatePools() internal {\r\n    for (uint256 _poolId = 0; _poolId < _pools.length(); _poolId++) {\r\n      Pool.Data storage _pool = _pools.get(_poolId);\r\n      _pool.update(_ctx);\r\n    }\r\n  }\r\n \r\n  /// @dev Stakes tokens into a pool.\r\n  ///\r\n  /// The pool and stake MUST be updated before calling this function.\r\n  ///\r\n  /// @param _poolId        the pool to deposit tokens into.\r\n\r\n  function _deposit(uint256 _poolId, uint256 _depositAmount )internal {\r\n    Pool.Data storage _pool = _pools.get(_poolId);\r\n    Stake.Data storage _stake = _stakes[msg.sender][_poolId];\r\n \r\n    _pool.totalDeposited = _pool.totalDeposited.add(_depositAmount);\r\n    _stake.totalDeposited = _stake.totalDeposited.add(_depositAmount);\r\n \r\n    emit TokensDeposited(msg.sender, _poolId, _depositAmount);\r\n  }\r\n\r\n  \r\n  /// @dev Withdraws staked tokens from a pool.\r\n  ///\r\n  /// The pool and stake MUST be updated before calling this function.\r\n  ///\r\n  /// @param _poolId          The pool to withdraw staked tokens from.\r\n\r\n  function _withdraw(uint256 _poolId, uint256 _withdrawAmount) internal {\r\n    Pool.Data storage _pool = _pools.get(_poolId);\r\n    Stake.Data storage _stake = _stakes[msg.sender][_poolId];\r\n \r\n    _pool.totalDeposited = _pool.totalDeposited.sub(_withdrawAmount);\r\n    _stake.totalDeposited = _stake.totalDeposited.sub(_withdrawAmount);\r\n\r\n    if (_stake.totalDeposited == 0) {\r\n      uint256 _dopAmount = dopAmounts[msg.sender];\r\n      dopAmounts[msg.sender] = 0;\r\n      dop.safeTransfer(msg.sender, _dopAmount);\r\n    }\r\n\r\n    emit TokensWithdrawn(msg.sender, _poolId, _withdrawAmount);\r\n  }\r\n\r\n  function isClaimable(address _account) external view returns (bool) {\r\n    Stake.Data storage _stake = _stakes[_account][0];\r\n    uint256 _amount = _stake.getUpdatedTotalUnclaimed(_pools.get(0), _ctx);\r\n\r\n    uint256 _deductUsdValue = _amount *  oracle.diamondPrice() / 1e18 / dopDiv ;\r\n    uint256 _deductDopAmount = _deductUsdValue * 1e18 / oracle.dopPrice() ;\r\n\r\n    return _amount > 0 && dopAmounts[msg.sender] > _deductDopAmount;\r\n  }\r\n\r\n\r\n  /// @dev Claims all rewarded tokens from a pool.\r\n  ///\r\n  /// The pool and stake MUST be updated before calling this function.\r\n  ///\r\n  /// @param _poolId The pool to claim rewards from.\r\n  ///\r\n  /// @notice use this function to claim the tokens from a corresponding pool by ID.\r\n  function _claim(uint256 _poolId) internal {\r\n    Stake.Data storage _stake = _stakes[msg.sender][_poolId];\r\n\r\n    uint256 _claimAmount = _stake.totalUnclaimed;\r\n    uint256 _feeAmount = _claimAmount.mul(feePercent).div(PERCENT_RESOLUTION);\r\n    uint256 _refAmount = _claimAmount.mul(refPercent).div(PERCENT_RESOLUTION);\r\n    uint256 _mintAmount = _claimAmount.sub(_feeAmount).sub(_refAmount);\r\n    \r\n    uint256 _deductUsdValue = _mintAmount *  oracle.diamondPrice() / 1e18 / dopDiv ;\r\n    uint256 _deductDopAmount = _deductUsdValue * 1e18 / oracle.dopPrice() ;\r\n \r\n    require( dopAmounts[msg.sender] >= _deductDopAmount, \"need deposit dop\" );\r\n    dopAmounts[msg.sender] -= _deductDopAmount;\r\n    dopBurned += _deductDopAmount;\r\n \r\n    \r\n    emit DopBurned(msg.sender, _deductDopAmount); \r\n\r\n    uint256 _balance = reward.balanceOf(address(this));\r\n    if (_balance > _claimAmount && _claimAmount > 0) {\r\n      _stake.totalUnclaimed = 0;\r\n      reward.safeTransfer(feeAddress, _feeAmount);\r\n \r\n      reward.safeTransfer(users[msg.sender].referrer, _refAmount);\r\n      reward.safeTransfer(msg.sender, _mintAmount);\r\n      emit TokensClaimed(msg.sender, _poolId, _claimAmount); \r\n    }\r\n  }\r\n    \r\n       \r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_reward\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeAddressTo\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_dop\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DopBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DopDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"GovernanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pendingGovernance\",\"type\":\"address\"}],\"name\":\"PendingGovernanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IERC721\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardWeight\",\"type\":\"uint256\"}],\"name\":\"PoolRewardWeightUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"}],\"name\":\"RewardRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewards\",\"type\":\"address\"}],\"name\":\"RewardsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"TokensMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensWithdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PERCENT_RESOLUTION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZERO_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardWeight\",\"type\":\"uint256\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositDop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dop\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dopBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dopDiv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"getDopAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getPoolRewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getPoolRewardWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getPoolToken\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getPoolTotalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getStakeTotalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getStakeTotalUnclaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getTokensOnStake\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"listOfStake\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"getUsdValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isClaimable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lordPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPreDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"safeWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_div\",\"type\":\"uint256\"}],\"name\":\"setDopDiv\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"setFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lordPrice\",\"type\":\"uint256\"}],\"name\":\"setLordPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pendingGovernance\",\"type\":\"address\"}],\"name\":\"setPendingGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardWeight\",\"type\":\"uint256\"}],\"name\":\"setPoolRewardWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_refPercent\",\"type\":\"uint256\"}],\"name\":\"setRefPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewards\",\"type\":\"address\"}],\"name\":\"setRewardFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardRate\",\"type\":\"uint256\"}],\"name\":\"setRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_rewardWeights\",\"type\":\"uint256[]\"}],\"name\":\"setRewardWeights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenPoolIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakingNFT", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000119fad60f1f616a2275934f8c7e882d4283272bd000000000000000000000000000000000000000000000000003dadd6acaf11c7000000000000000000000000fcbfc56c9cb66b23b003c93243b0e3412cb1111e000000000000000000000000ecf32d9c60a75880b4e28a09da059dda8bb114f9000000000000000000000000e169441c232450c4d7a33bbd7c1b00615154e480", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c13ff7472b6b19526dec46adf5220c9f79695719fc853e7921662883541c3b3c"}