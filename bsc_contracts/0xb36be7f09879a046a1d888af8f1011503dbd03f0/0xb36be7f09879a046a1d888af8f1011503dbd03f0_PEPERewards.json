{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ncontract PEPERewards {\r\n    address public owner;\r\n    address public authorizedWallet;\r\n    IERC20 public token;\r\n\r\n    // Event to log the transfer of tokens and changes in token address\r\n    event Rewards(address receiver, uint256 amount);\r\n    event TokenAddressSet(address tokenAddress);\r\n\r\n    // Modifier to check if the caller is the owner\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // Function to set the token contract's address, only callable by the owner\r\n    function setTokenAddress(address _tokenAddress) external onlyOwner {\r\n        token = IERC20(_tokenAddress);\r\n        emit TokenAddressSet(_tokenAddress);\r\n    }\r\n\r\n    // Function to update the authorized wallet, only callable by the owner\r\n    function updateAuthorizedWallet(address _newAuthorizedWallet) external onlyOwner {\r\n        authorizedWallet = _newAuthorizedWallet;\r\n    }\r\n\r\n    // Modifier to check if the caller is the authorized wallet\r\n    modifier onlyAuthorized() {\r\n        require(msg.sender == authorizedWallet, \"Not authorized\");\r\n        _;\r\n    }\r\n\r\n    // Function to send tokens from the contract to a specified address\r\n    function sendTokens(address _receiver, uint256 _amount) external onlyAuthorized {\r\n        require(token.balanceOf(address(this)) >= _amount, \"Insufficient balance\");\r\n        bool sent = token.transfer(_receiver, _amount);\r\n        require(sent, \"Token transfer failed\");\r\n\r\n        emit Rewards(_receiver, _amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Rewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"TokenAddressSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"authorizedWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAuthorizedWallet\",\"type\":\"address\"}],\"name\":\"updateAuthorizedWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PEPERewards", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9e0b2c239cde657b4558efb79a9ed552a81c5a89df76a70457a0d0a6bed779bd"}