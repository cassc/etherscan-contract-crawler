{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-10-26\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2023-10-26\r\n*/\r\n\r\n/**\r\n *Submitted for verification at testnet.bscscan.com on 2023-10-20\r\n*/\r\n\r\n/**\r\n *Submitted for verification at testnet.bscscan.com on 2023-10-19\r\n*/\r\n\r\n/**\r\n *Submitted for verification at testnet.bscscan.com on 2023-10-18\r\n*/\r\n\r\n/**\r\n *Submitted for verification at testnet.bscscan.com on 2023-10-17\r\n*/\r\n\r\n/**\r\n *Submitted for verification at testnet.bscscan.com on 2023-10-16\r\n*/\r\n\r\n/**\r\n *Submitted for verification at testnet.bscscan.com on 2023-10-13\r\n*/\r\n\r\n/**\r\n *Submitted for verification at testnet.bscscan.com on 2023-10-13\r\n*/\r\n\r\n/**\r\n *Submitted for verification at testnet.bscscan.com on 2023-10-12\r\n*/\r\n\r\n/**\r\n *Submitted for verification at testnet.bscscan.com on 2023-10-11\r\n*/\r\n\r\n/**\r\n *Submitted for verification at testnet.bscscan.com on 2023-10-11\r\n*/\r\n\r\n/**\r\n *Submitted for verification at testnet.bscscan.com on 2023-10-10\r\n*/\r\n\r\n/**\r\n *Submitted for verification at testnet.bscscan.com on 2023-10-09\r\n*/\r\n\r\n/**\r\n *Submitted for verification at testnet.bscscan.com on 2023-10-09\r\n*/\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IBEP20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  \r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n  function burn(uint256 value) external returns (bool);\r\n  event Transfer(address indexed from,address indexed to,uint256 value);\r\n  event Approval(address indexed owner,address indexed spender,uint256 value);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    \r\n    address private _owner;\r\n    event onOwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function ownable_init(address __owner) internal {\r\n        _owner = __owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_msgSender() == _owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0));\r\n        emit onOwnershipTransferred(_owner, _newOwner);\r\n        _owner = _newOwner;\r\n    }\r\n\r\n    function owner() public view returns(address) {\r\n        return _owner;\r\n    }\r\n}\r\n\r\ncontract Initializable {\r\n\r\n    bool private _initialized;\r\n\r\n    bool private _initializing;\r\n\r\n    modifier initializer() {\r\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Pausable is Context {\r\n\r\n    event Paused(address account);\r\n\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    function _requireNotPaused() internal view virtual {\r\n        require(!paused(), \"Pausable: paused\");\r\n    }\r\n\r\n    function _requirePaused() internal view virtual {\r\n        require(paused(), \"Pausable: not paused\");\r\n    }\r\n\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\ncontract AstStakeNSwap is Ownable, Pausable, Initializable {\r\n\r\n    struct User {\r\n        uint256 id;\r\n        address referrer;\r\n        Details[] _detail; \r\n        uint256 capping;\r\n        uint256 reward;\r\n        uint256 rewTaken;\r\n        uint256 partnersCount;\r\n        uint256 levelIncome;\r\n        bool onof;\r\n    }\r\n\r\n    struct Details {\r\n        uint256 investment;\r\n        uint256 amount_invested;\r\n        uint256 reward;\r\n        uint256 tokenrate;\r\n        uint256 persecroi;\r\n        uint256 stakedat;\r\n        uint256 start;\r\n        uint256 end;\r\n        uint256 lockin;\r\n        bool staking_status;\r\n        bool isnew;\r\n        bool isSTB;\r\n    }\r\n\r\n    IBEP20 public AST; \r\n    IBEP20 public OLDAST; \r\n    IBEP20 public USDT;\r\n    IBEP20 public STBC;\r\n    uint public token_price;   \r\n    uint public token_price_old;\r\n    uint public token_price_STB; \r\n    uint public MINIMUM_BUY;\r\n    uint public MAXIMUM_BUY;\r\n\tuint public MINIMUM_SALE;\r\n    uint public MAXIMUM_SALE;\r\n\tuint public sale_status;\r\n    uint public APY;\r\n    uint256 public lastUserId;\r\n    uint public PERCENT_DIVIDER;\r\n    address public ownerrate;\r\n    mapping(uint=>uint) public levelShare;\r\n    mapping(uint256 => address) public idToAddress;\r\n    mapping(address => User) public users;\r\n\r\n    //event\r\n    event NewDeposit(address indexed user, uint256 tokenQty, uint256 rate, uint256 package, uint apy, uint persecroi, uint start, uint endtime, uint lockin, bool isNewToken,  bool isSTB);\r\n    event ReActive(address indexed user, uint256 token, uint256 rate, uint256 amount,uint256 capping);\r\n    event WithdrawToken(address indexed user, uint256 token);\r\n    event TokenTransfer(address indexed user, address from, uint256 token);\r\n    event TokenSell(address indexed user,uint256 token,uint256 amount,uint256 rate);\r\n    event LevelIncome(address indexed sender , address indexed receiver, uint level, uint levelIncome ,uint amount, string tyype);\r\n    event Registration(address indexed user,address indexed referrer,uint256 indexed userId);\r\n    event MemberPayment(address indexed user, uint256 balance, uint withId);\r\n    event BuyAUSD(address indexed user,uint256 token,uint256 amount); \r\n    event SellAUSD(address indexed user,uint256 token,uint256 amount);\r\n\r\n\r\n    function initialize(address ownerAddress, IBEP20 _AST, IBEP20 _OLDAST, IBEP20 _USDT, IBEP20 _STBC, address _ownerrate) external initializer {\r\n        // tokens\r\n        AST = _AST;\r\n        OLDAST = _OLDAST;\r\n        USDT = _USDT;\r\n        STBC = _STBC;\r\n\r\n        // prices\r\n        token_price = 2*1e18;\r\n        token_price_old = 2*1e18;\r\n        token_price_STB = 1*1e18;\r\n\r\n        //amount\r\n        MINIMUM_BUY = 10*1e18; \r\n        MAXIMUM_BUY = 100000*1e18; \r\n        MINIMUM_SALE = 10*1e18; \r\n        MAXIMUM_SALE = 10000*1e18;\r\n\r\n        PERCENT_DIVIDER = 10000;\r\n        sale_status = 1; \r\n        APY = 20;\r\n        lastUserId = 1;\r\n\r\n        levelShare[1] = 1000;\r\n        levelShare[2] = 300;\r\n        levelShare[3] = 100;\r\n        levelShare[4] = 50;\r\n        levelShare[5] = 50;\r\n\r\n        levelShare[6] = 2000;\r\n        levelShare[7] = 500;\r\n        levelShare[8] = 300;\r\n        levelShare[9] = 100;\r\n        levelShare[10] = 50;\r\n        levelShare[11] = 10;\r\n        levelShare[12] = 1;\r\n        users[ownerAddress].id = lastUserId;\r\n        users[ownerAddress].referrer = address(0);\r\n        users[ownerAddress].partnersCount = uint256(0);\r\n        ownable_init(ownerAddress);\r\n        ownerrate = _ownerrate;\r\n        emit Registration(ownerAddress, address(0), lastUserId);\r\n    }\r\n\r\n    function registration(address userAddress, address referrerAddress) private {\r\n        require(!isUserExists(userAddress), \"User Exists!\");\r\n        require(isUserExists(referrerAddress), \"Referrer not Exists!\");\r\n        users[userAddress].id = lastUserId; \r\n        idToAddress[users[userAddress].id] = userAddress;       \r\n        users[userAddress].referrer = referrerAddress;\r\n        users[userAddress].partnersCount = 0;\r\n        lastUserId++;\r\n        users[referrerAddress].partnersCount++;\r\n        emit Registration(userAddress, referrerAddress, users[userAddress].id);\r\n    } \r\n\r\n\r\n      function stakeByAUSD(uint256 package, address refferal) external  {\r\n        require(isUserExists(refferal), \"Referrer Not Exists!\");\r\n        uint256 tokenQty = (package * 1e18) / token_price;\r\n        require(package%(100*1e18)==0,\"Investment In Multiple of Hundred\");\r\n        require(STBC.balanceOf(_msgSender())>=(package),\"Low USD Balance In Wallet\");\r\n\t\tSTBC.transferFrom(_msgSender(),address(this), package);\r\n        if(!isUserExists(_msgSender())) {\r\n            registration(_msgSender(),refferal);\r\n        }\r\n\t\t//AST.transfer(_msgSender()), tokenQty);\r\n\r\n        // for testing\r\n        // uint256 endtime = block.timestamp + (10 minutes * 5);\r\n        // uint256 lock = block.timestamp + 10 minutes;\r\n        // uint256 persecroi = (tokenQty / (10 minutes * 5));\r\n\r\n        // for main\r\n        uint256 endtime = block.timestamp + (365 days * 5);\r\n        uint256 lock = block.timestamp + 365 days;\r\n        uint256 persecroi = (tokenQty / (365 days * 5));\r\n\r\n        if(users[_msgSender()].capping==0) {\r\n           users[_msgSender()].capping=(tokenQty*10); \r\n           emit ReActive(_msgSender(), tokenQty, token_price, package, tokenQty*10 );\r\n        }\r\n\r\n        users[_msgSender()]._detail.push(Details( tokenQty, package, 0, token_price, persecroi,block.timestamp, block.timestamp, endtime, lock, true, true, true));\r\n        emit NewDeposit( _msgSender(), tokenQty, token_price, package, APY, persecroi, block.timestamp, endtime, lock , true, true);\r\n        sendLevelIncome(_msgSender(),tokenQty);\r\n\t}\r\n\r\n    function stakeOldAst(uint256 _oldTokenAmt , address refferal) external  {\r\n        uint256 tokenUsdt = (_oldTokenAmt*token_price_old)/1e18;\r\n        require(OLDAST.balanceOf(_msgSender()) >= _oldTokenAmt,\"Low OLD AST Balance In Wallet\");\r\n        require(_oldTokenAmt >= (100*1e18),\"Old AST Minimum Staking Should Be 100\");\r\n        //require(tokenUsdt >= (10*1e18),\"Token Value Should greater than $10\");\r\n        require(STBC.balanceOf(_msgSender()) >= (100*1e18),\"Low AUSD Balance In Wallet\");\r\n\t\tSTBC.transferFrom(_msgSender(), address(this), (100*1e18));\r\n        OLDAST.transferFrom(_msgSender(),address(this), _oldTokenAmt);\r\n        if(!isUserExists(_msgSender())) {\r\n            registration(_msgSender(),refferal);\r\n        }\r\n        uint256 tokenQty = (tokenUsdt*1e18) / token_price;\r\n\r\n        // $100 stake calculation\r\n        uint256 newQty = ((100*1e18) * 1e18) / token_price;\r\n\r\n        // for testing\r\n        // uint256 endtime = block.timestamp + (10 minutes * 5);\r\n        // uint256 lock = block.timestamp + 10 minutes;\r\n        // uint256 persecroi_old = (tokenQty / (10 minutes * 5));\r\n        // uint256 persecroi_new = (newQty / (10 minutes * 5));\r\n\r\n        // for main\r\n        uint256 endtime = block.timestamp + (365 days * 5);\r\n        uint256 lock = block.timestamp + 365 days;\r\n        uint256 persecroi_old = (tokenQty / (365 days * 5));\r\n        uint256 persecroi_new = (newQty / (365 days * 5));\r\n\r\n        if(users[_msgSender()].capping==0){\r\n           users[_msgSender()].capping=(newQty*10); \r\n           emit ReActive(_msgSender(), newQty, token_price, (100*1e18), newQty*10 );\r\n        }\r\n        // old astcoin swap stake by converting\r\n        users[_msgSender()]._detail.push(Details( tokenQty, tokenUsdt, 0, token_price, persecroi_old,block.timestamp, block.timestamp, endtime, lock, true, false, false));\r\n        // new ast stake for $100\r\n        users[_msgSender()]._detail.push(Details( newQty, (100*1e18), 0, token_price, persecroi_new,block.timestamp, block.timestamp, endtime, lock, true, true, false));\r\n        emit NewDeposit( _msgSender(), tokenQty, token_price, tokenUsdt, APY, persecroi_old, block.timestamp, endtime, lock , false, false);\r\n        emit NewDeposit( _msgSender(), newQty, token_price, (100*1e18), APY, persecroi_new, block.timestamp, endtime, lock , true, false);\r\n        \r\n        sendLevelIncome(_msgSender(),newQty);\r\n\t}\r\n\r\n    function reTopup() external {\r\n        require(isUserExists(_msgSender()),\"No Staking Found\");\r\n        uint256 package = users[_msgSender()]._detail[0].amount_invested;\r\n        require(STBC.balanceOf(_msgSender()) >= package,\"Low AUSD Balance In Wallet\");\r\n        uint256 tokenQty = (package*1e18)/token_price;\r\n\t\tSTBC.transferFrom(_msgSender(),address(this), package);\r\n\r\n        uint capping = users[_msgSender()].capping;\r\n        users[_msgSender()].capping = capping+(tokenQty*10);\r\n\r\n        emit ReActive(_msgSender(), tokenQty, token_price, package, capping+(tokenQty*10) );\r\n\t}\r\n\r\n    function sendLevelIncome(address user, uint256 amount) internal  {\r\n        address referral = users[user].referrer;\r\n        uint256 rewcum;\r\n        uint256 rewtot;\r\n        uint256 capping;\r\n        for(uint i=1; i<= 20; i++) {\r\n            if(referral!=address(0)) {\r\n                if(!users[referral].onof){\r\n                uint levelIncome;\r\n                capping = users[referral].capping;\r\n                rewtot = users[referral].rewTaken;\r\n                if(users[referral].partnersCount >= i && users[referral].partnersCount <5) {\r\n                levelIncome = ((amount*levelShare[i])/PERCENT_DIVIDER);\r\n                rewcum = rewtot+levelIncome;\r\n                if(capping>=rewcum){\r\n                    AST.transfer(referral , levelIncome);\r\n                    users[referral].levelIncome += levelIncome;\r\n                    users[referral].rewTaken += levelIncome;\r\n                    emit LevelIncome(referral , user, i, levelIncome, amount,\"yes\");\r\n                } else {\r\n                    emit LevelIncome(referral , user, i, levelIncome, amount,\"no\");\r\n                }\r\n                } else if(users[referral].partnersCount > 4) { \r\n                    levelIncome = ((amount*levelShare[5+i>=12?12:5+i])/PERCENT_DIVIDER);\r\n                rewcum = rewtot+levelIncome;\r\n                if(capping>=rewcum){\r\n                    AST.transfer(referral , levelIncome);\r\n                    users[referral].levelIncome += levelIncome;\r\n                    users[referral].rewTaken += levelIncome;\r\n                    emit LevelIncome(referral , user, i, levelIncome, amount,\"yes\");\r\n                } else {\r\n                    emit LevelIncome(referral , user, i, levelIncome, amount,\"no\");\r\n                }\r\n                }\r\n                }\r\n                referral=users[referral].referrer;\r\n            }\r\n        }\r\n    }\r\n\r\n     function seeReward(address useradd) external view returns(uint[] memory){\r\n\t\tUser storage user = users[useradd];\r\n        uint[] memory rewardCald=new uint[](user._detail.length);\r\n        uint256 starttime;\r\n        uint256 endtime;\r\n        uint256 caltime;\r\n\t\tfor (uint256 i = 0; i < user._detail.length; i++) {\r\n            endtime = user._detail[i].end;\r\n\t\t\tif (endtime>block.timestamp) {\r\n                starttime = user._detail[i].start;\r\n                caltime = block.timestamp-(starttime);\r\n               rewardCald[i]=(caltime*(user._detail[i].persecroi));\r\n\t\t\t} else {\r\n                starttime = user._detail[i].start;\r\n                caltime = endtime-starttime;\r\n               rewardCald[i]=(caltime*(user._detail[i].persecroi));\r\n            }\r\n\t\t}\r\n        return rewardCald;\r\n\t}\r\n\r\n    function withdraw(uint8 i) external {\r\n        require(!users[_msgSender()].onof,\"Withdraw is Stopped\");\r\n        User storage user = users[_msgSender()];\r\n        uint256 lockin = user._detail[i].lockin;\r\n        bool stakestat = user._detail[i].staking_status;\r\n        uint256 stakedat = user._detail[i].stakedat;\r\n        uint256 yeartime = lockin-stakedat;\r\n        require(user._detail[i].lockin<block.timestamp && stakestat,\"Cannot Withdraw Before Locking Period\");\r\n        uint256 checkrew = (yeartime*user._detail[i].persecroi);\r\n        uint256 rewtot = user.rewTaken;\r\n        uint256 rewcum;\r\n        uint256 reward = user._detail[i].reward;\r\n        uint256 rewtogiv;\r\n        uint256 capping = user.capping;\r\n        \r\n\t\t\t//if (user._detail[i].lockin<=block.timestamp && stakestat) {\r\n                if(user._detail[i].end>block.timestamp){\r\n                uint256 caltime = block.timestamp-stakedat;\r\n                rewtogiv = caltime*(user._detail[i].persecroi);\r\n                if(rewtogiv>=checkrew && rewtogiv<(checkrew*2)){\r\n                rewtogiv = checkrew;   \r\n                } else if(rewtogiv>=(checkrew*2) && rewtogiv<(checkrew*3)){\r\n                rewtogiv = checkrew*2;  \r\n                yeartime = (yeartime*2);   \r\n                } else if(rewtogiv>=(checkrew*3) && rewtogiv<(checkrew*4)){\r\n                rewtogiv = checkrew*3; \r\n                yeartime = (yeartime*3);     \r\n                } else if(rewtogiv>=(checkrew*4) && rewtogiv<(checkrew*5)){\r\n                rewtogiv = checkrew*4;\r\n                yeartime = (yeartime*4);      \r\n                }\r\n                rewtogiv = rewtogiv - reward;\r\n                require(rewtogiv>=checkrew,\"You cannot Withdraw Per Year Lock-in Time\");\r\n                rewcum = rewtot+rewtogiv;\r\n                } else {\r\n                uint256 caltime = (user._detail[i].end)-stakedat;\r\n                rewtogiv = caltime*(user._detail[i].persecroi);\r\n                if(rewtogiv>=checkrew && rewtogiv<(checkrew*2)){\r\n                rewtogiv = checkrew;    \r\n                } else if(rewtogiv>=(checkrew*2) && rewtogiv<(checkrew*3)){\r\n                rewtogiv = checkrew*2;\r\n                yeartime = (yeartime*2);     \r\n                } else if(rewtogiv>=(checkrew*3) && rewtogiv<(checkrew*4)){\r\n                rewtogiv = checkrew*3; \r\n                yeartime = (yeartime*3);    \r\n                } else if(rewtogiv>=(checkrew*4) && rewtogiv<(checkrew*5)){\r\n                rewtogiv = checkrew*4; \r\n                yeartime = (yeartime*4);    \r\n                } else if(rewtogiv>=(checkrew*5)){ \r\n                rewtogiv = checkrew*5;\r\n                yeartime = (yeartime*5);    \r\n                }\r\n                rewtogiv = rewtogiv - reward;\r\n                require(rewtogiv>=checkrew,\"You cannot Withdraw Per Year Lock-in Time\");\r\n                rewcum = rewtot+rewtogiv;   \r\n                }\r\n                require(capping>=rewcum,\"Re Active Your Capping\"); \r\n                //if(capping>=rewcum){\r\n                    require(AST.balanceOf(address(this))>=rewtogiv,\"Low Token Balance In Contract\");\r\n                    AST.transfer(_msgSender() , rewtogiv);\r\n                    users[_msgSender()].rewTaken = rewcum;\r\n                    users[_msgSender()]._detail[i].start=stakedat+yeartime;\r\n                    users[_msgSender()]._detail[i].reward +=rewtogiv;\r\n                    if(user._detail[i].end<=block.timestamp){\r\n                     users[_msgSender()]._detail[i].staking_status=false;    \r\n                    }\r\n                    emit WithdrawToken(_msgSender(),rewtogiv);\r\n                //}\r\n\t\t\t//}\r\n\t}\r\n    \r\n\tfunction sellToken(uint256 tokenQty) external {\r\n\t\t\trequire(sale_status>=1,\"Sale Not Allow\");\r\n\t        require(tokenQty>=MINIMUM_SALE,\"Invalid minimum quatity\");\r\n\t     \trequire(AST.balanceOf(_msgSender())>=tokenQty,\"Low Token Balance\");\r\n\t\t\tuint USDT_amt=(tokenQty*token_price)/1e18;   \r\n            require(USDT.balanceOf(address(this))>=USDT_amt,\"Low USDT Balance In Contract\");\r\n            AST.transferFrom(_msgSender(),address(this), tokenQty);\r\n\t\t\tUSDT.transfer(_msgSender(), (USDT_amt*95/100));\r\n\t\t\temit TokenSell(_msgSender(),tokenQty,USDT_amt,token_price);\r\n\t}\r\n\r\n    function buyAUSD(uint256 tokenQty) external {\r\n            require(tokenQty>=(10*1e18),\"Minimum 10 AUSD Buy Allowed\");\r\n\t     \trequire(USDT.balanceOf(_msgSender())>=tokenQty,\"Low USDT Balance\");\r\n\t\t\tuint256 USDquan=tokenQty-(1*1e18);   \r\n            require(STBC.balanceOf(address(this))>=USDquan,\"Low AUSD Balance In Contract\");\r\n            USDT.transferFrom(_msgSender(),address(this), tokenQty);\r\n\t\t\tSTBC.transfer(_msgSender(), USDquan);\r\n\t\t\temit BuyAUSD(_msgSender(),tokenQty,USDquan);\r\n\t}\r\n\r\n    function sellAUSD(uint256 tokenQty) external {\r\n            require(tokenQty>=(10*1e18),\"Minimum 10 AUSD Sell Allowed\");\r\n\t     \trequire(STBC.balanceOf(_msgSender())>=tokenQty,\"Low AUSD Balance\");\r\n\t\t\tuint256 USDquan=tokenQty-(1*1e18);   \r\n            require(USDT.balanceOf(address(this))>=USDquan,\"Low USDT Balance In Contract\");\r\n            STBC.transferFrom(_msgSender(),address(this), tokenQty);\r\n\t\t\tUSDT.transfer(_msgSender(), USDquan);\r\n\t\t\temit SellAUSD(_msgSender(),tokenQty,USDquan);\r\n\t}\r\n\r\n    function buySetting(uint min_buy, uint max_buy, uint min_sell,uint max_sell) external {\r\n           require(_msgSender()==owner(),\"Only Owner\");\r\n              MINIMUM_BUY = min_buy ;\r\n              MAXIMUM_BUY = max_buy;\r\n\t\t\t  MINIMUM_SALE = min_sell ;\r\n              MAXIMUM_SALE = max_sell;\r\n    }\r\n\r\n    function seeDetailsStaking(address usar) public view returns (Details[] memory) {\r\n        return users[usar]._detail;\r\n    }\r\n    \r\n    function priceSetting(uint256 token_rate) external {\r\n        require(_msgSender()==owner(),\"Only Owner\");\r\n        token_price=token_rate;\r\n    }\r\n\r\n    function priceSettingOld(uint256 token_rate) external  {\r\n        require(_msgSender()==owner() || _msgSender()==ownerrate,\"Only Owner\");\r\n        token_price_old=token_rate;\r\n    }\r\n\r\n    function priceSettingSTB(uint256 token_rate) external  {\r\n        require(_msgSender()==owner() || _msgSender()==ownerrate,\"Only Owner\");\r\n        token_price_STB=token_rate;\r\n    }\r\n\r\n    function astTokenUpdate(IBEP20 _newToken) external  {\r\n        require(_msgSender()==owner(),\"Only Owner\");\r\n        AST=_newToken;\r\n    }\r\n\r\n\tfunction saleSetting(uint start_sale) external  {\r\n        require(_msgSender()==owner(),\"Only Owner\");\r\n        sale_status=start_sale;\r\n    }\r\n        \r\n    function getPrice() public view returns(uint256){\r\n        return uint256(token_price);\r\n    }\r\n\r\n    function getPriceOld() public view returns(uint256){\r\n        return uint256(token_price_old);\r\n    }\r\n\r\n    function getPriceSTB() public view returns(uint256){\r\n        return uint256(token_price_STB);\r\n    }\r\n\r\n    function withdrawLost(uint256 WithAmt) public {\r\n        require(_msgSender() == owner(), \"onlyOwner\");\r\n        payable(owner()).transfer(WithAmt*1e18);\r\n    }\r\n  \r\n\tfunction withdrawLostTokenFromBalance(uint QtyAmt,IBEP20 _TOKEN) public {\r\n        require(_msgSender() == owner(), \"onlyOwner\");\r\n        _TOKEN.transfer(owner(),(QtyAmt*1e18));\r\n\t}\r\n\r\n    function isUserExists(address user) public view returns (bool) {\r\n        return (users[user].id != 0);\r\n    }\r\n\r\n    function updateUserStatus(address usr) external {\r\n        require(_msgSender()==owner(),\"Only Owner\");\r\n        bool onof = users[usr].onof;\r\n        if(onof){\r\n        users[usr].onof=false;\r\n        } else {\r\n        users[usr].onof=true;\r\n        }\r\n    }\r\n\r\n    function updateCapping(uint256 capping,address usser) external {\r\n        require(_msgSender()==owner(),\"Only Owner\");\r\n        users[usser].capping=capping;\r\n    }\r\n\r\n    function updateRewardTaken(uint256 reward,address usser) external {\r\n        require(_msgSender()==owner(),\"Only Owner\");\r\n        users[usser].rewTaken=reward;\r\n    }\r\n\r\n    function multisendToken(address payable[]  memory  _contributors, uint256[] memory _balances, uint256 totalQty,uint256[] memory WithId,IBEP20 _TKN) public payable {\r\n    \tuint256 total = totalQty;\r\n        uint256 i = 0;\r\n        for (i; i < _contributors.length; i++) {\r\n            require(total >= _balances[i]);\r\n            total = total-_balances[i];\r\n            _TKN.transferFrom(_msgSender(), _contributors[i], _balances[i]);\r\n\t\t\t      emit MemberPayment(_contributors[i],_balances[i],WithId[i]);\r\n        }\r\n    }\r\n\r\n    function updateRateOwnr(address _ownr) external  {\r\n        require(_msgSender()==owner(),\"Only Owner\");\r\n        ownerrate=_ownr;\r\n    }\r\n\t\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BuyAUSD\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"levelIncome\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tyype\",\"type\":\"string\"}],\"name\":\"LevelIncome\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withId\",\"type\":\"uint256\"}],\"name\":\"MemberPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenQty\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"package\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"persecroi\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endtime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isNewToken\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSTB\",\"type\":\"bool\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"capping\",\"type\":\"uint256\"}],\"name\":\"ReActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SellAUSD\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"TokenSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"}],\"name\":\"TokenTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"}],\"name\":\"WithdrawToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"onOwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"APY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AST\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_BUY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_SALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_BUY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_SALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OLDAST\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STBC\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"_newToken\",\"type\":\"address\"}],\"name\":\"astTokenUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenQty\",\"type\":\"uint256\"}],\"name\":\"buyAUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"min_buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max_buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min_sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max_sell\",\"type\":\"uint256\"}],\"name\":\"buySetting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceOld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceSTB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"contract IBEP20\",\"name\":\"_AST\",\"type\":\"address\"},{\"internalType\":\"contract IBEP20\",\"name\":\"_OLDAST\",\"type\":\"address\"},{\"internalType\":\"contract IBEP20\",\"name\":\"_USDT\",\"type\":\"address\"},{\"internalType\":\"contract IBEP20\",\"name\":\"_STBC\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ownerrate\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isUserExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levelShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"_contributors\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"totalQty\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"WithId\",\"type\":\"uint256[]\"},{\"internalType\":\"contract IBEP20\",\"name\":\"_TKN\",\"type\":\"address\"}],\"name\":\"multisendToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerrate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"token_rate\",\"type\":\"uint256\"}],\"name\":\"priceSetting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"token_rate\",\"type\":\"uint256\"}],\"name\":\"priceSettingOld\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"token_rate\",\"type\":\"uint256\"}],\"name\":\"priceSettingSTB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reTopup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start_sale\",\"type\":\"uint256\"}],\"name\":\"saleSetting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sale_status\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usar\",\"type\":\"address\"}],\"name\":\"seeDetailsStaking\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"investment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenrate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"persecroi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedat\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockin\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"staking_status\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isnew\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSTB\",\"type\":\"bool\"}],\"internalType\":\"struct AstStakeNSwap.Details[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"useradd\",\"type\":\"address\"}],\"name\":\"seeReward\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenQty\",\"type\":\"uint256\"}],\"name\":\"sellAUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenQty\",\"type\":\"uint256\"}],\"name\":\"sellToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"package\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"refferal\",\"type\":\"address\"}],\"name\":\"stakeByAUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_oldTokenAmt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"refferal\",\"type\":\"address\"}],\"name\":\"stakeOldAst\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token_price_STB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token_price_old\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"capping\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"usser\",\"type\":\"address\"}],\"name\":\"updateCapping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ownr\",\"type\":\"address\"}],\"name\":\"updateRateOwnr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"usser\",\"type\":\"address\"}],\"name\":\"updateRewardTaken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"updateUserStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"capping\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewTaken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partnersCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"levelIncome\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"onof\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"i\",\"type\":\"uint8\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"WithAmt\",\"type\":\"uint256\"}],\"name\":\"withdrawLost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"QtyAmt\",\"type\":\"uint256\"},{\"internalType\":\"contract IBEP20\",\"name\":\"_TOKEN\",\"type\":\"address\"}],\"name\":\"withdrawLostTokenFromBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AstStakeNSwap", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3ccd2903a53851a75902efae3ee432ec93d8ece5c2546de4a18ad68eaa826898"}