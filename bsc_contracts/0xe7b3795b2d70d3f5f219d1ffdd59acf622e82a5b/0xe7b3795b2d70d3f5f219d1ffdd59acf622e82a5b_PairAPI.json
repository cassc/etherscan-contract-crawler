{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Helpers/API/PairAPI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.13;\\r\\n\\r\\n\\r\\nimport '../../interfaces/Helpers/API/IBribeAPI.sol';\\r\\nimport '../../interfaces/Helpers/API/IGaugeAPI.sol';\\r\\nimport '../../interfaces/Factories/IGaugeFactory.sol';\\r\\nimport '../../interfaces/utils/IERC20Full.sol';\\r\\nimport '../../interfaces/Minter/IMinter.sol';\\r\\nimport '../../interfaces/Pairs/IPair.sol';\\r\\nimport '../../interfaces/Pairs/IPairInfo.sol';\\r\\nimport '../../interfaces/Factories/IPairFactory.sol';\\r\\nimport '../../interfaces/Voter/IVoter.sol';\\r\\nimport '../../interfaces/VotingEscrow/IVotingEscrow.sol';\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n\\r\\ninterface IHypervisor{\\r\\n    function pool() external view returns(address);\\r\\n    function getTotalAmounts() external view returns(uint tot0,uint tot1);\\r\\n}\\r\\n\\r\\n\\r\\ninterface IDefiEdgeFactory{\\r\\n    function isValidStrategy(address) external view returns(bool);\\r\\n}\\r\\n\\r\\ninterface IAlgebraFactory{\\r\\n    function poolByPair(address, address) external view returns(address);\\r\\n}\\r\\n\\r\\ncontract PairAPI is Initializable {\\r\\n\\r\\n\\r\\n    struct PairInfo {\\r\\n        // pair info\\r\\n        address pair_address; \\t\\t\\t// pair contract address\\r\\n        uint decimals; \\t\\t\\t        // pair decimals\\r\\n        PoolType pooltype; \\t\\t\\t\\t// pair pool type \\r\\n        uint total_supply; \\t\\t\\t    // pair tokens supply\\r\\n    \\r\\n        // token pair info\\r\\n        address token0; \\t\\t\\t\\t// pair 1st token address\\r\\n        string token0_symbol; \\t\\t\\t// pair 1st token symbol\\r\\n        uint token0_decimals; \\t\\t    // pair 1st token decimals\\r\\n        uint reserve0; \\t\\t\\t        // pair 1st token reserves (nr. of tokens in the contract)\\r\\n\\r\\n        address token1; \\t\\t\\t\\t// pair 2nd token address\\r\\n        string token1_symbol;           // pair 2nd token symbol\\r\\n        uint token1_decimals;    \\t\\t// pair 2nd token decimals\\r\\n        uint reserve1; \\t\\t\\t        // pair 2nd token reserves (nr. of tokens in the contract)\\r\\n\\r\\n        // pairs gauge\\r\\n        address gauge; \\t\\t\\t\\t    // pair gauge address\\r\\n        uint gauge_total_supply; \\t\\t// pair staked tokens (less/eq than/to pair total supply)\\r\\n        address fee; \\t\\t\\t\\t    // pair fees contract address\\r\\n        address bribe; \\t\\t\\t\\t    // pair bribes contract address\\r\\n        uint emissions; \\t\\t\\t    // pair emissions (per second)\\r\\n        address emissions_token; \\t\\t// pair emissions token address\\r\\n        uint emissions_token_decimals; \\t// pair emissions token decimals\\r\\n\\r\\n    }\\r\\n\\r\\n    struct UserInfo {\\r\\n        \\r\\n        // User deposit\\r\\n        \\r\\n        address pair_address; \\t\\t\\t// pair contract address\\r\\n        uint claimable0;                // claimable 1st token from fees (for unstaked positions)\\r\\n        uint claimable1; \\t\\t\\t    // claimable 2nd token from fees (for unstaked positions)\\r\\n        uint account_lp_balance; \\t\\t// account LP tokens balance\\r\\n        uint account_gauge_balance;     // account pair staked in gauge balance\\r\\n        uint account_gauge_earned; \\t\\t// account earned emissions for this pair\\r\\n    }\\r\\n\\r\\n\\r\\n    struct tokenBribe {\\r\\n        address token;\\r\\n        uint8 decimals;\\r\\n        uint256 amount;\\r\\n        string symbol;\\r\\n    }\\r\\n    \\r\\n\\r\\n    struct pairBribeEpoch {\\r\\n        uint256 epochTimestamp;\\r\\n        uint256 totalVotes;\\r\\n        address pair;\\r\\n        tokenBribe[] bribes;\\r\\n    }\\r\\n\\r\\n    // stable/volatile classic x*y=k, CL = conc. liquidity algebra\\r\\n    enum PoolType {STABLE, VOLATILE, CL}\\r\\n\\r\\n    uint256 public constant MAX_PAIRS = 1000;\\r\\n    uint256 public constant MAX_EPOCHS = 200;\\r\\n    uint256 public constant MAX_REWARDS = 16;\\r\\n    uint256 public constant WEEK = 7 * 24 * 60 * 60;\\r\\n\\r\\n\\r\\n    IPairFactory public pairFactory;\\r\\n    IAlgebraFactory public algebraFactory;\\r\\n    IVoter public voter;\\r\\n\\r\\n    address public underlyingToken;\\r\\n    address public defiEdgeFactory;\\r\\n\\r\\n    address public owner;\\r\\n\\r\\n\\r\\n    event Owner(address oldOwner, address newOwner);\\r\\n    event Voter(address oldVoter, address newVoter);\\r\\n    event WBF(address oldWBF, address newWBF);\\r\\n\\r\\n    constructor() {}\\r\\n\\r\\n    function initialize(address _voter) initializer public {\\r\\n  \\r\\n        owner = msg.sender;\\r\\n\\r\\n        voter = IVoter(_voter);\\r\\n\\r\\n        pairFactory = IPairFactory(voter.factory());\\r\\n        underlyingToken = IVotingEscrow(voter._ve()).token();\\r\\n\\r\\n        algebraFactory = IAlgebraFactory(address(0x306F06C147f064A010530292A1EB6737c3e378e4));\\r\\n        defiEdgeFactory = 0xB4B715a85B552381a82570a0bb4392d2c77bA883;\\r\\n        \\r\\n    }\\r\\n\\r\\n\\r\\n    // valid only for sAMM and vAMM\\r\\n    function getAllPair(uint _amounts, uint _offset) external view returns(PairInfo[] memory Pairs){\\r\\n\\r\\n        \\r\\n        require(_amounts <= MAX_PAIRS, 'too many pair');\\r\\n\\r\\n        Pairs = new PairInfo[](_amounts);\\r\\n        \\r\\n        uint i = _offset;\\r\\n        uint totPairs = pairFactory.allPairsLength();\\r\\n        address _pair;\\r\\n\\r\\n        for(i; i < _offset + _amounts; i++){\\r\\n            // if totalPairs is reached, break.\\r\\n            if(i == totPairs) {\\r\\n                break;\\r\\n            }\\r\\n            _pair = pairFactory.allPairs(i);\\r\\n            Pairs[i - _offset] = _pairAddressToInfo(_pair);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getMultiplePair(address[] calldata pairs) external view returns(PairInfo[] memory Pairs){\\r\\n        require(pairs.length <= MAX_PAIRS, 'too many pair');\\r\\n        Pairs = new PairInfo[](pairs.length );\\r\\n        address _pair;\\r\\n        for(uint256 i = 0; i < pairs.length; i++){\\r\\n            _pair = pairs[i];\\r\\n            Pairs[i] = _pairAddressToInfo(_pair);\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function getPairAccount(address _pair, address _account) external view returns(UserInfo memory _UserInfo){\\r\\n        return _pairAddressForAccount(_pair, _account);\\r\\n    }\\r\\n\\r\\n    // backward compatibility\\r\\n    function getPair(address _pair, address /*account*/) external view returns(PairInfo memory _PairInfo){\\r\\n        return _pairAddressToInfo(_pair);\\r\\n    }\\r\\n\\r\\n    function getPairSingle(address _pair) external view returns(PairInfo memory _PairInfo){\\r\\n        return _pairAddressToInfo(_pair);\\r\\n    }\\r\\n\\r\\n    function _pairAddressForAccount(address _pair, address _account) internal view returns(UserInfo memory _UserInfo) {\\r\\n\\r\\n        IPair ipair = IPair(_pair); \\r\\n         \\r\\n        IGaugeAPI _gauge = IGaugeAPI(voter.gauges(_pair));\\r\\n        uint accountGaugeLPAmount = 0;\\r\\n        uint earned = 0;\\r\\n        \\r\\n        if(address(_gauge) != address(0)){\\r\\n            if(_account != address(0)){\\r\\n                accountGaugeLPAmount = _gauge.balanceOf(_account);\\r\\n                earned = _gauge.earned(_account);\\r\\n            } else {\\r\\n                accountGaugeLPAmount = 0;\\r\\n                earned = 0;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // checkout is v2 or v3? if v3 then load algebra pool \\r\\n        bool _type = IPairFactory(pairFactory).isPair(_pair);\\r\\n        \\r\\n        // Account Info\\r\\n        _UserInfo.pair_address = _pair;\\r\\n        _UserInfo.claimable0 = _type == false ? 0 : ipair.claimable0(_account);\\r\\n        _UserInfo.claimable1 = _type == false ? 0 : ipair.claimable1(_account);\\r\\n        _UserInfo.account_lp_balance = IERC20(_pair).balanceOf(_account);\\r\\n        _UserInfo.account_gauge_balance = accountGaugeLPAmount;\\r\\n        _UserInfo.account_gauge_earned = earned;\\r\\n        \\r\\n    }\\r\\n\\r\\n    function _pairAddressToInfo(address _pair) internal view returns(PairInfo memory _PairInfo) {\\r\\n\\r\\n        IPair ipair = IPair(_pair); \\r\\n        address token_0 = ipair.token0();\\r\\n        address token_1 = ipair.token1();\\r\\n        uint r0;\\r\\n        uint r1;\\r\\n        \\r\\n\\r\\n        // checkout is v2 or v3? if v3 then load algebra pool \\r\\n        bool _type = IPairFactory(pairFactory).isPair(_pair);\\r\\n        PoolType _pooltype;\\r\\n        \\r\\n        if(_type == false){\\r\\n            \\r\\n            // not a solidly pool, check wheter is Gamma or DefiEdge\\r\\n            // hypervisor totalAmounts = algebra.pool + gamma.unused\\r\\n            // DeFiEdge is reserve 0 and reserve 1\\r\\n            bool status = IDefiEdgeFactory(defiEdgeFactory).isValidStrategy(_pair);\\r\\n            if(status == false) (r0,r1) = IHypervisor(_pair).getTotalAmounts();\\r\\n            else {\\r\\n                r0 = IPairInfo(_pair).reserve0();\\r\\n                r1 = IPairInfo(_pair).reserve1();\\r\\n            } \\r\\n            _pooltype = PoolType(2);\\r\\n        } else {\\r\\n            (r0,r1,) = ipair.getReserves();\\r\\n            _pooltype = ipair.isStable() == true ? PoolType(0) : PoolType(1);\\r\\n        }\\r\\n\\r\\n        IGaugeAPI _gauge = IGaugeAPI(voter.gauges(_pair));\\r\\n        uint gaugeTotalSupply = 0;\\r\\n        uint emissions = 0;\\r\\n        \\r\\n\\r\\n        if(address(_gauge) != address(0)){\\r\\n            gaugeTotalSupply = _gauge.totalSupply();\\r\\n            emissions = _gauge.rewardRate();\\r\\n        }\\r\\n        \\r\\n\\r\\n        // Pair General Info\\r\\n        _PairInfo.pair_address = _pair;\\r\\n        _PairInfo.decimals = ipair.decimals();\\r\\n        _PairInfo.pooltype = _pooltype;\\r\\n        _PairInfo.total_supply = ipair.totalSupply();        \\r\\n        \\r\\n        // Token0 Info\\r\\n        _PairInfo.token0 = token_0;\\r\\n        _PairInfo.token0_decimals = IERC20(token_0).decimals();\\r\\n        _PairInfo.token0_symbol = IERC20(token_0).symbol();\\r\\n        _PairInfo.reserve0 = r0;\\r\\n\\r\\n        // Token1 Info\\r\\n        _PairInfo.token1 = token_1;\\r\\n        _PairInfo.token1_decimals = IERC20(token_1).decimals();\\r\\n        _PairInfo.token1_symbol = IERC20(token_1).symbol();\\r\\n        _PairInfo.reserve1 = r1;\\r\\n\\r\\n        // Pair's gauge Info\\r\\n        _PairInfo.gauge = address(_gauge);\\r\\n        _PairInfo.gauge_total_supply = gaugeTotalSupply;\\r\\n        _PairInfo.emissions = emissions;\\r\\n        _PairInfo.emissions_token = underlyingToken;\\r\\n        _PairInfo.emissions_token_decimals = IERC20(underlyingToken).decimals();\\r\\n        \\r\\n        // external address\\r\\n        _PairInfo.fee = voter.internal_bribes(address(_gauge)); \\t\\t\\t\\t    \\r\\n        _PairInfo.bribe = voter.external_bribes(address(_gauge)); \\t\\t\\t\\t    \\r\\n\\r\\n        \\r\\n    }\\r\\n\\r\\n\\r\\n    function getPairBribe(uint _amounts, uint _offset, address _pair) external view returns(pairBribeEpoch[] memory _pairEpoch){\\r\\n\\r\\n        require(_amounts <= MAX_EPOCHS, 'too many epochs');\\r\\n\\r\\n        _pairEpoch = new pairBribeEpoch[](_amounts);\\r\\n\\r\\n        address _gauge = voter.gauges(_pair);\\r\\n        if(_gauge == address(0)) return _pairEpoch;\\r\\n\\r\\n        IBribeAPI bribe  = IBribeAPI(voter.external_bribes(_gauge));\\r\\n\\r\\n        // check bribe and checkpoints exists\\r\\n        if(address(0) == address(bribe)) return _pairEpoch;\\r\\n        \\r\\n      \\r\\n        // scan bribes\\r\\n        // get latest balance and epoch start for bribes\\r\\n        uint _epochStartTimestamp = bribe.firstBribeTimestamp();\\r\\n\\r\\n        // if 0 then no bribe created so far\\r\\n        if(_epochStartTimestamp == 0){\\r\\n            return _pairEpoch;\\r\\n        }\\r\\n\\r\\n        uint _supply;\\r\\n        uint i = _offset;\\r\\n\\r\\n        for(i; i < _offset + _amounts; i++){\\r\\n            \\r\\n            _supply            = bribe.totalSupplyAt(_epochStartTimestamp);\\r\\n            _pairEpoch[i-_offset].epochTimestamp = _epochStartTimestamp;\\r\\n            _pairEpoch[i-_offset].pair = _pair;\\r\\n            _pairEpoch[i-_offset].totalVotes = _supply;\\r\\n            _pairEpoch[i-_offset].bribes = _bribe(_epochStartTimestamp, address(bribe));\\r\\n            \\r\\n            _epochStartTimestamp += WEEK;\\r\\n\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    function _bribe(uint _ts, address _br) internal view returns(tokenBribe[] memory _tb){\\r\\n\\r\\n        IBribeAPI _wb = IBribeAPI(_br);\\r\\n        uint tokenLen = _wb.rewardsListLength();\\r\\n\\r\\n        _tb = new tokenBribe[](tokenLen);\\r\\n\\r\\n        uint k;\\r\\n        uint _rewPerEpoch;\\r\\n        IERC20 _t;\\r\\n        for(k = 0; k < tokenLen; k++){\\r\\n            _t = IERC20(_wb.rewardTokens(k));\\r\\n            IBribeAPI.Reward memory _reward = _wb.rewardData(address(_t), _ts);\\r\\n            _rewPerEpoch = _reward.rewardsPerEpoch;\\r\\n            if(_rewPerEpoch > 0){\\r\\n                _tb[k].token = address(_t);\\r\\n                _tb[k].symbol = _t.symbol();\\r\\n                _tb[k].decimals = _t.decimals();\\r\\n                _tb[k].amount = _rewPerEpoch;\\r\\n            } else {\\r\\n                _tb[k].token = address(_t);\\r\\n                _tb[k].symbol = _t.symbol();\\r\\n                _tb[k].decimals = _t.decimals();\\r\\n                _tb[k].amount = 0;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function setOwner(address _owner) external {\\r\\n        require(msg.sender == owner, 'not owner');\\r\\n        require(_owner != address(0), 'zeroAddr');\\r\\n        owner = _owner;\\r\\n        emit Owner(msg.sender, _owner);\\r\\n    }\\r\\n\\r\\n\\r\\n    function setVoter(address _voter) external {\\r\\n        require(msg.sender == owner, 'not owner');\\r\\n        require(_voter != address(0), 'zeroAddr');\\r\\n        address _oldVoter = address(voter);\\r\\n        voter = IVoter(_voter);\\r\\n        \\r\\n        // update variable depending on voter\\r\\n        pairFactory = IPairFactory(voter.factory());\\r\\n        underlyingToken = IVotingEscrow(voter._ve()).token();\\r\\n\\r\\n        emit Voter(_oldVoter, _voter);\\r\\n    }\\r\\n\\r\\n    function setDeEdgeFact(address _new) external {\\r\\n        require(msg.sender == owner);\\r\\n        defiEdgeFactory = _new;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/Factories/IGaugeFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.13;\\r\\n\\r\\ninterface IGaugeFactory {\\r\\n    function createGauge(address, address, address, address, bool, address[] memory) external returns (address);\\r\\n    function createGaugeV2(address _rewardToken,address _ve,address _token,address _distribution, address _internal_bribe, address _external_bribe, bool _isPair) external returns (address) ;\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/Factories/IPairFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.13;\\r\\n\\r\\ninterface IPairFactory {\\r\\n    function allPairsLength() external view returns (uint);\\r\\n    function isPair(address pair) external view returns (bool);\\r\\n    function allPairs(uint index) external view returns (address);\\r\\n    function pairCodeHash() external pure returns (bytes32);\\r\\n    function getPair(address tokenA, address token, bool stable) external view returns (address);\\r\\n    function createPair(address tokenA, address tokenB, bool stable) external returns (address pair);\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/Helpers/API/IBribeAPI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.13;\\r\\n\\r\\ninterface IBribeAPI {\\r\\n\\r\\n    struct Reward {\\r\\n        uint256 periodFinish;\\r\\n        uint256 rewardsPerEpoch;\\r\\n        uint256 lastUpdateTime; \\r\\n    }\\r\\n    function rewardData(address _token, uint256 ts) external view returns(Reward memory _Reward);\\r\\n    function _deposit(uint amount, uint tokenId) external;\\r\\n    function _withdraw(uint amount, uint tokenId) external;\\r\\n    function getRewardForOwner(uint tokenId, address[] memory tokens) external;\\r\\n    function notifyRewardAmount(address token, uint amount) external;\\r\\n    function left(address token) external view returns (uint);\\r\\n    function rewardsListLength() external view returns (uint);\\r\\n    function supplyNumCheckpoints() external view returns (uint);\\r\\n    //function getEpochStart(uint timestamp) external pure returns (uint);\\r\\n    function getEpochStart() external pure returns (uint);\\r\\n    function getNextEpochStart() external pure returns (uint);\\r\\n    function getPriorSupplyIndex(uint timestamp) external view returns (uint);\\r\\n    function rewardTokens(uint index) external view returns (address);\\r\\n    function rewardsPerEpoch(address token,uint ts) external view returns (uint);\\r\\n    function supplyCheckpoints(uint _index) external view returns(uint timestamp, uint supplyd);\\r\\n    function earned(uint tokenId, address token) external view returns (uint);\\r\\n    function earned(address user, address token) external view returns (uint);\\r\\n    function firstBribeTimestamp() external view returns(uint);\\r\\n    function totalSupplyAt(uint256 _timestamp) external view returns (uint256);\\r\\n    function balanceOfAt(uint256 tokenId, uint256 _timestamp) external view returns (uint256);\\r\\n    function balanceOfOwnerAt(address _owner, uint256 _timestamp) external view returns (uint256);\\r\\n\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/Helpers/API/IGaugeAPI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.13;\\r\\n\\r\\ninterface IGaugeAPI {\\r\\n    function notifyRewardAmount(address token, uint amount) external;\\r\\n    function getReward(address account, address[] memory tokens) external;\\r\\n    function claimFees() external returns (uint claimed0, uint claimed1);\\r\\n    function left(address token) external view returns (uint);\\r\\n    function rewardRate() external view returns (uint);\\r\\n    function balanceOf(address _account) external view returns (uint);\\r\\n    function isForPair() external view returns (bool);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function earned(address account) external view returns (uint);\\r\\n    \\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/Minter/IMinter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.13;\\r\\n\\r\\ninterface IMinter {\\r\\n    function update_period() external returns (uint);\\r\\n    function check() external view returns(bool);\\r\\n    function period() external view returns(uint);\\r\\n    function active_period() external view returns(uint);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/Pairs/IPair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.13;\\r\\n\\r\\ninterface IPair {\\r\\n    function allowance(address, address) external view returns (uint);\\r\\n    function balanceOf(address) external view returns (uint);\\r\\n    function burn(address to) external returns (uint amount0, uint amount1);\\r\\n    function claimable0(address _user) external view returns (uint);\\r\\n    function claimable1(address _user) external view returns (uint);\\r\\n    function claimFees() external returns (uint claimed0, uint claimed1);\\r\\n    function claimStakingFees() external;\\r\\n    function current(address tokenIn, uint amountIn) external view returns (uint amountOut);\\r\\n    function currentCumulativePrices() external view returns (uint reserve0Cumulative, uint reserve1Cumulative, uint blockTimestamp);\\r\\n    function decimals() external view returns (uint8);\\r\\n    function fees() external view returns (address);\\r\\n    function getAmountOut(uint amountIn, address tokenIn) external view returns (uint);\\r\\n    function getReserves() external view returns (uint _reserve0, uint _reserve1, uint _blockTimestampLast);\\r\\n    function isStable() external view returns(bool);\\r\\n    function metadata() external view returns (uint dec0, uint dec1, uint r0, uint r1, bool st, address t0, address t1);\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n    function name() external view returns (string memory);\\r\\n    function nonces(address) external view returns (uint);\\r\\n    function prices(address tokenIn, uint amountIn, uint points) external view returns (uint[] memory);\\r\\n    function quote(address tokenIn, uint amountIn, uint granularity) external view returns (uint amountOut);\\r\\n    function sample(address tokenIn, uint amountIn, uint points, uint window) external view returns (uint[] memory);\\r\\n    function skim(address to) external;\\r\\n    function stable() external view returns (bool);\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n    function symbol() external view returns (string memory);\\r\\n    function sync() external;\\r\\n    function tokens() external view returns (address, address);\\r\\n    function token0() external view returns (address);\\r\\n    function token1() external view returns (address);\\r\\n    function totalSupply() external view returns (uint);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/Pairs/IPairInfo.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.13;\\r\\n\\r\\ninterface IPairInfo {\\r\\n\\r\\n    function token0() external view returns(address);\\r\\n    function reserve0() external view returns(uint);\\r\\n    function decimals0() external view returns(uint);\\r\\n    function token1() external view returns(address);\\r\\n    function reserve1() external view returns(uint);\\r\\n    function decimals1() external view returns(uint);\\r\\n    function isPair(address _pair) external view returns(bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/utils/IERC20Full.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.13;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function transfer(address recipient, uint amount) external returns (bool);\\r\\n    function decimals() external view returns (uint8);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function balanceOf(address) external view returns (uint);\\r\\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function name() external returns(string memory);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/Voter/IVoter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.13;\\r\\n\\r\\ninterface IVoter {\\r\\n    function ve() external view returns (address);\\r\\n    function _ve() external view returns (address);\\r\\n    function gauges(address _pair) external view returns (address);\\r\\n    function isGauge(address _gauge) external view returns (bool);\\r\\n    function poolForGauge(address _gauge) external view returns (address);\\r\\n    function factory() external view returns (address);\\r\\n    function minter() external view returns(address);\\r\\n    function isWhitelisted(address token) external view returns (bool);\\r\\n    function notifyRewardAmount(uint amount) external;\\r\\n    function distributeAll() external;    \\r\\n    function distribute(uint start, uint finish) external;\\r\\n    function distributeFees(address[] memory _gauges) external;\\r\\n\\r\\n    function internal_bribes(address _gauge) external view returns (address);\\r\\n    function external_bribes(address _gauge) external view returns (address);\\r\\n\\r\\n    function usedWeights(uint id) external view returns(uint);\\r\\n    function lastVoted(uint id) external view returns(uint);\\r\\n    function poolVote(uint id, uint _index) external view returns(address _pair);\\r\\n    function votes(uint id, address _pool) external view returns(uint votes);\\r\\n    function poolVoteLength(uint tokenId) external view returns(uint);\\r\\n    \\r\\n    function length() external view returns (uint);\\r\\n    \\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/VotingEscrow/IVotingEscrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.13;\\r\\n\\r\\ninterface IVotingEscrow {\\r\\n\\r\\n    struct Point {\\r\\n        int128 bias;\\r\\n        int128 slope; // # -dweight / dt\\r\\n        uint256 ts;\\r\\n        uint256 blk; // block\\r\\n    }\\r\\n\\r\\n    struct LockedBalance {\\r\\n        int128 amount;\\r\\n        uint end;\\r\\n    }\\r\\n\\r\\n    function create_lock_for(uint _value, uint _lock_duration, address _to) external returns (uint);\\r\\n\\r\\n    function locked(uint id) external view returns(LockedBalance memory);\\r\\n    function tokenOfOwnerByIndex(address _owner, uint _tokenIndex) external view returns (uint);\\r\\n\\r\\n    function token() external view returns (address);\\r\\n    function team() external returns (address);\\r\\n    function epoch() external view returns (uint);\\r\\n    function point_history(uint loc) external view returns (Point memory);\\r\\n    function user_point_history(uint tokenId, uint loc) external view returns (Point memory);\\r\\n    function user_point_epoch(uint tokenId) external view returns (uint);\\r\\n\\r\\n    function ownerOf(uint) external view returns (address);\\r\\n    function isApprovedOrOwner(address, uint) external view returns (bool);\\r\\n    function transferFrom(address, address, uint) external;\\r\\n\\r\\n    function voted(uint) external view returns (bool);\\r\\n    function attachments(uint) external view returns (uint);\\r\\n    function voting(uint tokenId) external;\\r\\n    function abstain(uint tokenId) external;\\r\\n    function attach(uint tokenId) external;\\r\\n    function detach(uint tokenId) external;\\r\\n\\r\\n    function checkpoint() external;\\r\\n    function deposit_for(uint tokenId, uint value) external;\\r\\n\\r\\n    function balanceOfNFT(uint _id) external view returns (uint);\\r\\n    function balanceOfNFTAt(uint _tokenId, uint _t) external view returns (uint);\\r\\n    function balanceOfAtNFT(uint _tokenId, uint _block) external view returns (uint);\\r\\n    function balanceOf(address _owner) external view returns (uint);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function supply() external view returns (uint);\\r\\n\\r\\n\\r\\n    function decimals() external view returns(uint8);\\r\\n}\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\r\\n\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\r\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\r\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\r\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\r\\n *\\r\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\r\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\r\\n * case an upgrade adds a module that needs to be initialized.\\r\\n *\\r\\n * For example:\\r\\n *\\r\\n * [.hljs-theme-light.nopadding]\\r\\n * ```\\r\\n * contract MyToken is ERC20Upgradeable {\\r\\n *     function initialize() initializer public {\\r\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\r\\n *     }\\r\\n * }\\r\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\r\\n *     function initializeV2() reinitializer(2) public {\\r\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\r\\n *     }\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\r\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\r\\n *\\r\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\r\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\r\\n *\\r\\n * [CAUTION]\\r\\n * ====\\r\\n * Avoid leaving a contract uninitialized.\\r\\n *\\r\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\r\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\r\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\r\\n *\\r\\n * [.hljs-theme-light.nopadding]\\r\\n * ```\\r\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n * constructor() {\\r\\n *     _disableInitializers();\\r\\n * }\\r\\n * ```\\r\\n * ====\\r\\n */\\r\\nabstract contract Initializable {\\r\\n    /**\\r\\n     * @dev Indicates that the contract has been initialized.\\r\\n     * @custom:oz-retyped-from bool\\r\\n     */\\r\\n    uint8 private _initialized;\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates that the contract is in the process of being initialized.\\r\\n     */\\r\\n    bool private _initializing;\\r\\n\\r\\n    /**\\r\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\r\\n     */\\r\\n    event Initialized(uint8 version);\\r\\n\\r\\n    /**\\r\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\r\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\r\\n     *\\r\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\r\\n     * constructor.\\r\\n     *\\r\\n     * Emits an {Initialized} event.\\r\\n     */\\r\\n    modifier initializer() {\\r\\n        bool isTopLevelCall = !_initializing;\\r\\n        require(\\r\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\r\\n            \\\"Initializable: contract is already initialized\\\"\\r\\n        );\\r\\n        _initialized = 1;\\r\\n        if (isTopLevelCall) {\\r\\n            _initializing = true;\\r\\n        }\\r\\n        _;\\r\\n        if (isTopLevelCall) {\\r\\n            _initializing = false;\\r\\n            emit Initialized(1);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\r\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\r\\n     * used to initialize parent contracts.\\r\\n     *\\r\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\r\\n     * are added through upgrades and that require initialization.\\r\\n     *\\r\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\r\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\r\\n     *\\r\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\r\\n     * a contract, executing them in the right order is up to the developer or operator.\\r\\n     *\\r\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\r\\n     *\\r\\n     * Emits an {Initialized} event.\\r\\n     */\\r\\n    modifier reinitializer(uint8 version) {\\r\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\r\\n        _initialized = version;\\r\\n        _initializing = true;\\r\\n        _;\\r\\n        _initializing = false;\\r\\n        emit Initialized(version);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\r\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\r\\n     */\\r\\n    modifier onlyInitializing() {\\r\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\r\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\r\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\r\\n     * through proxies.\\r\\n     *\\r\\n     * Emits an {Initialized} event the first time it is successfully executed.\\r\\n     */\\r\\n    function _disableInitializers() internal virtual {\\r\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\r\\n        if (_initialized < type(uint8).max) {\\r\\n            _initialized = type(uint8).max;\\r\\n            emit Initialized(type(uint8).max);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\r\\n     */\\r\\n    function _getInitializedVersion() internal view returns (uint8) {\\r\\n        return _initialized;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\r\\n     */\\r\\n    function _isInitializing() internal view returns (bool) {\\r\\n        return _initializing;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary AddressUpgradeable {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\r\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\r\\n     *\\r\\n     * _Available since v4.8._\\r\\n     */\\r\\n    function verifyCallResultFromTarget(\\r\\n        address target,\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        if (success) {\\r\\n            if (returndata.length == 0) {\\r\\n                // only check isContract if the call was successful and the return data is empty\\r\\n                // otherwise we already know that it was a contract\\r\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n            }\\r\\n            return returndata;\\r\\n        } else {\\r\\n            _revert(returndata, errorMessage);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason or using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            _revert(returndata, errorMessage);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\r\\n        // Look for revert reason and bubble it up if present\\r\\n        if (returndata.length > 0) {\\r\\n            // The easiest way to bubble the revert reason is using memory via assembly\\r\\n            /// @solidity memory-safe-assembly\\r\\n            assembly {\\r\\n                let returndata_size := mload(returndata)\\r\\n                revert(add(32, returndata), returndata_size)\\r\\n            }\\r\\n        } else {\\r\\n            revert(errorMessage);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"remappings\": [\r\n      \"@openzeppelin-foundry-upgrades/= lib/openzeppelin-foundry-upgrades/src/\",\r\n      \"@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/\"\r\n    ],\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"Owner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldVoter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newVoter\",\"type\":\"address\"}],\"name\":\"Voter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldWBF\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newWBF\",\"type\":\"address\"}],\"name\":\"WBF\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_EPOCHS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PAIRS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_REWARDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WEEK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"algebraFactory\",\"outputs\":[{\"internalType\":\"contract IAlgebraFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defiEdgeFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amounts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"}],\"name\":\"getAllPair\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pair_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"enum PairAPI.PoolType\",\"name\":\"pooltype\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"total_supply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"token0_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"token0_decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve0\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"token1_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"token1_decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve1\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gauge_total_supply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bribe\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"emissions\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"emissions_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"emissions_token_decimals\",\"type\":\"uint256\"}],\"internalType\":\"struct PairAPI.PairInfo[]\",\"name\":\"Pairs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"pairs\",\"type\":\"address[]\"}],\"name\":\"getMultiplePair\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pair_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"enum PairAPI.PoolType\",\"name\":\"pooltype\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"total_supply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"token0_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"token0_decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve0\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"token1_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"token1_decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve1\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gauge_total_supply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bribe\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"emissions\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"emissions_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"emissions_token_decimals\",\"type\":\"uint256\"}],\"internalType\":\"struct PairAPI.PairInfo[]\",\"name\":\"Pairs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pair_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"enum PairAPI.PoolType\",\"name\":\"pooltype\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"total_supply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"token0_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"token0_decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve0\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"token1_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"token1_decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve1\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gauge_total_supply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bribe\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"emissions\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"emissions_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"emissions_token_decimals\",\"type\":\"uint256\"}],\"internalType\":\"struct PairAPI.PairInfo\",\"name\":\"_PairInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getPairAccount\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pair_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"claimable0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"account_lp_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"account_gauge_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"account_gauge_earned\",\"type\":\"uint256\"}],\"internalType\":\"struct PairAPI.UserInfo\",\"name\":\"_UserInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amounts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"getPairBribe\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"epochTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVotes\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct PairAPI.tokenBribe[]\",\"name\":\"bribes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PairAPI.pairBribeEpoch[]\",\"name\":\"_pairEpoch\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"getPairSingle\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pair_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"enum PairAPI.PoolType\",\"name\":\"pooltype\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"total_supply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"token0_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"token0_decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve0\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"token1_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"token1_decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve1\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gauge_total_supply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bribe\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"emissions\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"emissions_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"emissions_token_decimals\",\"type\":\"uint256\"}],\"internalType\":\"struct PairAPI.PairInfo\",\"name\":\"_PairInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairFactory\",\"outputs\":[{\"internalType\":\"contract IPairFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"setDeEdgeFact\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"setVoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voter\",\"outputs\":[{\"internalType\":\"contract IVoter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PairAPI", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}