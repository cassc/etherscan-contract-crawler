{"SourceCode": "// SPDX-License-Identifier: UNLICENSE\r\npragma solidity ^0.8.17;\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IRouter {\r\n     function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    \r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\nlibrary Address {\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n\r\ninterface IDividendDistributor {\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external;\r\n    function setShare(address shareholder, uint256 amount) external;\r\n    function deposit() external payable;\r\n    function process(uint256 gas) external;\r\n}\r\n\r\ninterface IpresaleAirdrop {\r\n    function airdropPresale(address recipient, uint256 amount) external;\r\n}\r\n\r\ncontract ManualDividendDistributor is IDividendDistributor {\r\n    using SafeMath for uint256;\r\n\r\n    address _token;\r\n    mapping(address => bool) adminAccounts;\r\n\r\n    struct Share {\r\n        uint256 amount;\r\n        uint256 totalExcluded;\r\n        uint256 totalRealised;\r\n    }\r\n   \r\n    address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n    \r\n    IBEP20 public rewardtoken = IBEP20(WBNB);\r\n    uint public rewardTokenDiv = 10;\r\n    IBEP20 public nativetoken = IBEP20(WBNB);\r\n    uint public nativeTokenDiv = 2;\r\n    uint public totalDiv = 12;\r\n\r\n\r\n    mapping (address => uint256) totaldividendsOfToken;\r\n    IRouter router;\r\n\r\n    address[] public shareholders;\r\n    mapping (address => uint256) shareholderIndexes;\r\n    mapping (address => uint256) shareholderClaims;\r\n\r\n    mapping (address => Share) public shares;\r\n    mapping (address => mapping (address => Share)) public rewardshares;\r\n\r\n    uint256 public totalShares;\r\n    //uint256 public totalDividends;\r\n    uint256 public totalRewardDistributed;\r\n    uint256 public totalNativeDistributed;\r\n    //uint256 public dividendsPerShare;\r\n    mapping (address => uint256) public dividendsPerShareRewardToken;\r\n    mapping (address => uint256) public totaldividendsrewardtoken;\r\n    uint256 public dividendsPerShareAccuracyFactor = 10**36;\r\n\r\n    uint256 public minPeriod = 1 hours;\r\n    uint256 public minDistribution = 1 * (10 ** 18);\r\n\r\n    uint256 public currentIndex;\r\n    \r\n\r\n    bool initialized = false; // unneccesary as all booleans are initialiased to false;\r\n\r\n    modifier initialization() {\r\n        require(!initialized);\r\n        _;\r\n        initialized = true;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(adminAccounts[msg.sender]); _;\r\n    }\r\n\r\n    constructor (address _router) {\r\n        router = _router != address(0)\r\n            ? IRouter(_router)\r\n           : IRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E); //Mainnet\r\n           //  : IRouter(0xD99D1c33F9fC3444f8101754aBC46c52416550D1); //Testnet\r\n        adminAccounts[msg.sender] = true;\r\n        rewardtoken = IBEP20(_token);\r\n    }\r\n\r\n    function distributeToken(address[] calldata holders) external onlyAdmin {\r\n        for(uint i = 0; i < holders.length; i++){\r\n            if(shares[holders[i]].amount > 10000){ \r\n                distributeDividendInToken(holders[i]);\r\n            }\r\n        }\r\n    }\r\n    \r\n\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external override onlyAdmin {\r\n        minPeriod = _minPeriod;\r\n        minDistribution = _minDistribution;\r\n    }\r\n    \r\n    function setRewardToken(IBEP20 newrewardToken) external onlyAdmin{\r\n        rewardtoken = newrewardToken;\r\n    }\r\n\r\n    function setNativeToken(IBEP20 newnativeToken) external onlyAdmin{\r\n         nativetoken = newnativeToken;\r\n    }\r\n    \r\n    function addAdmin(address adminAddress) public onlyAdmin{\r\n        adminAccounts[adminAddress] = true;\r\n    }\r\n    \r\n    \r\n    function removeAdmin(address adminAddress) public onlyAdmin{\r\n        adminAccounts[adminAddress] = false;\r\n    }\r\n    \r\n    \r\n    function setInitialShare(address shareholder, uint256 amount) external onlyAdmin {\r\n        addShareholder(shareholder);\r\n        totalShares += amount;\r\n        shares[shareholder].amount = amount;\r\n        shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n    }\r\n    \r\n    function setShareMultiple(address[] calldata addresses, uint256[] calldata amounts) external onlyAdmin\r\n    {\r\n        require(addresses.length == amounts.length, \"must have the same length\");\r\n        for (uint i = 0; i < addresses.length; i++){\r\n            setShareInternal(addresses[i], amounts[i]*(10**18));\r\n        }\r\n    }\r\n\r\n    function getEstimatedNativeTokenForBNB(uint bnbAmount) internal view returns (uint[] memory) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = router.WETH();\r\n        path[1] = address(nativetoken);\r\n        return router.getAmountsOut(bnbAmount, path);\r\n    }\r\n\r\n    function getEstimatedRewardTokenForBNB(uint bnbAmount) internal view returns (uint[] memory) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = router.WETH();\r\n        path[1] = address(rewardtoken);\r\n        return router.getAmountsOut(bnbAmount, path);\r\n    }\r\n    \r\n    function setShareInternal(address shareholder, uint256 amount) internal {\r\n        \r\n        if(amount > 0 && shares[shareholder].amount == 0){\r\n            addShareholder(shareholder);\r\n        }else if(amount == 0 && shares[shareholder].amount > 0){\r\n            removeShareholder(shareholder);\r\n        }\r\n        totalShares += (shares[shareholder].amount) + (amount);\r\n        shares[shareholder].amount = amount;\r\n        rewardshares[WBNB][shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n    }\r\n\r\n    function setShare(address shareholder, uint256 amount) external override onlyAdmin {\r\n        \r\n        if(amount > 0 && shares[shareholder].amount == 0){\r\n            addShareholder(shareholder);\r\n        }else if(amount == 0 && shares[shareholder].amount > 0){\r\n            removeShareholder(shareholder);\r\n        }\r\n\r\n        totalShares -= (shares[shareholder].amount);\r\n        shares[shareholder].amount = amount;\r\n        totalShares += (amount);\r\n        rewardshares[WBNB][shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n    }\r\n\r\n    function deposit() external payable override {\r\n\r\n        totaldividendsOfToken[WBNB] = totaldividendsOfToken[WBNB] + msg.value;\r\n        dividendsPerShareRewardToken[WBNB] = dividendsPerShareRewardToken[WBNB] + (dividendsPerShareAccuracyFactor * (msg.value) / (totalShares));\r\n        \r\n    }\r\n\r\n    function process(uint256 gas) external override {\r\n        // this shouldnt be called from outside\r\n    }\r\n    \r\n    function shouldDistribute(address shareholder) internal view returns (bool) {\r\n        return shareholderClaims[shareholder] + minPeriod < block.timestamp\r\n                && getUnpaidEarnings(shareholder) > minDistribution;\r\n    }\r\n    \r\n    function distributeDividendInToken(address shareholder) internal {\r\n        if(shares[shareholder].amount == 0){ return; }\r\n\r\n        uint256 amount = getUnpaidEarnings(shareholder);\r\n        if(amount > 0){\r\n\r\n\r\n            shareholderClaims[shareholder] = block.timestamp;\r\n            \r\n            rewardshares[WBNB][shareholder].totalRealised  += (amount);\r\n            rewardshares[WBNB][shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n\r\n            uint share = amount/totalDiv;\r\n            totalRewardDistributed += getEstimatedRewardTokenForBNB(share * rewardTokenDiv)[1];\r\n            totalNativeDistributed += getEstimatedNativeTokenForBNB(share * nativeTokenDiv)[1];\r\n\r\n            uint256 beforeRewardBalance = IBEP20(rewardtoken).balanceOf(shareholder);\r\n            address[] memory pathReward = new address[](2);\r\n            pathReward[0] = address(WBNB);\r\n            pathReward[1] = address(rewardtoken);\r\n\r\n            router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: share * rewardTokenDiv}(\r\n                0,\r\n                pathReward,\r\n                shareholder,\r\n                block.timestamp\r\n            );\r\n\r\n            uint256 afterRewardBalance = IBEP20(rewardtoken).balanceOf(shareholder).sub(beforeRewardBalance);\r\n            rewardshares[address(rewardtoken)][shareholder].totalRealised  += afterRewardBalance;\r\n\r\n            uint256 beforeNativeBalance = IBEP20(nativetoken).balanceOf(shareholder);\r\n            address[] memory pathNative = new address[](2);\r\n            pathNative[0] = address(WBNB);\r\n            pathNative[1] = address(nativetoken);\r\n\r\n            router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: share * nativeTokenDiv}(\r\n                0,\r\n                pathNative,\r\n                shareholder,\r\n                block.timestamp\r\n            );\r\n\r\n            uint256 afterNativeBalance = IBEP20(nativetoken).balanceOf(shareholder).sub(beforeNativeBalance);\r\n            rewardshares[address(nativetoken)][shareholder].totalRealised  += afterNativeBalance;\r\n\r\n        }\r\n    }\r\n    \r\n    function claimDividend() external {\r\n        distributeDividendInToken(msg.sender);\r\n    }\r\n\r\n    function setRewardTokensAndPercentages(IBEP20 rewardToken, uint rewardPercent, IBEP20 nativeToken, uint nativePercent)external onlyAdmin{\r\n        rewardtoken = rewardToken;\r\n        rewardTokenDiv = rewardPercent;\r\n        nativetoken = nativeToken;\r\n        nativeTokenDiv = nativePercent;\r\n        totalDiv = nativeTokenDiv + rewardTokenDiv;\r\n    }\r\n\r\n    function getUnpaidEarnings(address shareholder) public view returns (uint256) {\r\n        if(shares[shareholder].amount == 0){ return 0; }\r\n\r\n        uint256 shareholderTotalDividends = getCumulativeDividends(shares[shareholder].amount);\r\n        uint256 shareholderTotalExcluded = rewardshares[WBNB][shareholder].totalExcluded;\r\n\r\n        if(shareholderTotalDividends <= shareholderTotalExcluded){ return 0; }\r\n\r\n        return shareholderTotalDividends - (shareholderTotalExcluded);\r\n    }\r\n\r\n    function getUnpaidEarningsInTokens(address shareholder) public view returns (uint256[2] memory tokenAmounts) {\r\n        uint256[2] memory retVal;\r\n        retVal[0] = 0;\r\n        retVal[1] = 0;\r\n        if(shares[shareholder].amount == 0){ return retVal; }\r\n\r\n        uint256 shareholderTotalDividends = getCumulativeDividends(shares[shareholder].amount);\r\n        uint256 shareholderTotalExcluded = rewardshares[WBNB][shareholder].totalExcluded;\r\n\r\n        if(shareholderTotalDividends <= shareholderTotalExcluded){ return retVal; }\r\n\r\n        uint amount = shareholderTotalDividends - (shareholderTotalExcluded);\r\n        uint256 share = amount/totalDiv;\r\n        retVal[0] = getEstimatedNativeTokenForBNB(share * nativeTokenDiv)[1];\r\n        retVal[1] = getEstimatedRewardTokenForBNB(share * rewardTokenDiv)[1];\r\n        return retVal;\r\n    }\r\n\r\n    function getCumulativeDividends(uint256 share) internal view returns (uint256) {\r\n        return share * dividendsPerShareRewardToken[WBNB] / dividendsPerShareAccuracyFactor;\r\n    }\r\n\r\n    function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n\r\n    function removeShareholder(address shareholder) internal {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];\r\n        shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n}\r\n\r\ncontract BTCBullDog is Context, IBEP20, Ownable {\r\n    using Address for address payable;\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public maxBuyTransactionAmount =  1000000  * (10**18);\r\n    uint256 public maxSellTransactionAmount = 1000000 * (10**18);\r\n\r\n    mapping(address => bool) public _isBlacklisted;\r\n    mapping(address => bool) public teamWallets;\r\n\r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => bool) private _isExcluded;\r\n    mapping (address => bool) isDividendExempt;\r\n\r\n    mapping (address => bool) public pairs;\r\n\r\n    address[] private _excluded;\r\n\r\n    bool private swapping;\r\n    bool public tradingIsEnabled = false;\r\n    bool public rewardDividendEnabled = false;\r\n    bool teamCanTrade = false;\r\n\r\n    IRouter public router;\r\n    address public pair;\r\n\r\n    ManualDividendDistributor public distributor;\r\n\r\n    uint8 private constant _decimals = 18;\r\n    uint256 private constant MAX = ~uint256(0);\r\n\r\n    uint256 private _tTotal = 1000000000 * 10**_decimals;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n\r\n    uint256 public swapTokensAtAmount = 20000 * 10**_decimals;\r\n    uint256 public previousDividendRewardsFee = 2;\r\n\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity,\r\n        bool success\r\n    );\r\n\r\n    address BTCB = 0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c;\r\n\r\n    address public deadWallet = 0x000000000000000000000000000000000000dEaD;\r\n    address public marketingWallet = 0x4F97EB360eA1aFC5A0a5e5C1b340400d88d1eceF;\r\n    address public liquidityWallet = 0x4F97EB360eA1aFC5A0a5e5C1b340400d88d1eceF;\r\n    address public nftWallet = 0x34A466A757dCE5ed13aF7F7a09496C7E96de3E01;\r\n\r\n    string private constant _name = \"BTCBullDog Finance\";\r\n    string private constant _symbol = \"BitDog Ltd\";\r\n\r\n    uint256 countMarketingTokens;\r\n    uint256 countLPTokens;\r\n    uint256 countNFTRewardsTokens;\r\n    uint256 countRewardTokens;\r\n\r\n    struct BuyTaxes {\r\n        uint256 rfi;\r\n        uint256 marketing;\r\n        uint256 lp;\r\n        uint256 nftRewards;\r\n        uint256 rewardToken;\r\n    }\r\n\r\n    struct SellTaxes {\r\n        uint256 rfi;\r\n        uint256 marketing;\r\n        uint256 lp;\r\n        uint256 nftRewards;\r\n        uint256 rewardToken;\r\n    }\r\n\r\n    // tax reflection, mkt, lp, nftRewards\r\n    BuyTaxes public taxes = BuyTaxes(0, 0, 0, 0, 0);\r\n    SellTaxes public selltaxes = SellTaxes(2, 2, 2, 2, 0);\r\n\r\n    struct TotFeesPaidStruct {\r\n        uint256 rfi;\r\n        uint256 marketing;\r\n        uint256 lp;\r\n        uint256 nftRewards;\r\n        uint256 rewardToken;\r\n    }\r\n\r\n    TotFeesPaidStruct public totFeesPaid;\r\n\r\n    struct valuesFromGetValues {\r\n        uint256 rAmount;\r\n        uint256 rTransferAmount;\r\n        uint256 rRfi;\r\n        uint256 rMarketing;\r\n        uint256 rNFTRewards;\r\n        uint256 rRewardToken;\r\n        uint256 rLP;\r\n        uint256 tTransferAmount;\r\n        uint256 tRfi;\r\n        uint256 tMarketing;\r\n        uint256 tNFTRewards;\r\n        uint256 tRewardToken;\r\n        uint256 tLP;\r\n    }\r\n\r\n    modifier lockTheSwap() {\r\n        swapping = true;\r\n        _;\r\n        swapping = false;\r\n    }\r\n\r\n    constructor() {\r\n       IRouter _router = IRouter(address(0x10ED43C718714eb63d5aA57B78B54704E256024E));\r\n        address _pair = IFactory(_router.factory()).createPair(address(this), _router.WETH());\r\n\r\n        router = _router;\r\n        pair = _pair;\r\n        pairs[pair] = true;\r\n\r\n        distributor = new ManualDividendDistributor(address(router));\r\n        distributor.addAdmin(address(msg.sender));\r\n        distributor.setRewardToken(IBEP20(BTCB));\r\n        distributor.setNativeToken(IBEP20(address(this)));\r\n\r\n        excludeFromReward(pair);\r\n        excludeFromReward(deadWallet);\r\n\r\n        isDividendExempt[pair] = true;\r\n        isDividendExempt[address(this)] = true;\r\n        isDividendExempt[deadWallet] = true;\r\n\r\n        _rOwned[owner()] = _rTotal;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[marketingWallet] = true;\r\n        _isExcludedFromFee[deadWallet] = true;\r\n        emit Transfer(address(0), owner(), _tTotal);\r\n    }\r\n\r\n    //std BEP20:\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    //override BEP20:\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function rewardtoken()external view returns(address) {return address(distributor.rewardtoken());}\r\n    function getrewardDistributionTime()external view returns(uint256){return distributor.minPeriod();}\r\n    function getRewardDistributionMinAmount() external view returns(uint256){return distributor.minDistribution();}\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"BEP20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"BEP20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function isExcludedFromReward(address account) public view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferRfi)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n        if (!deductTransferRfi) {\r\n            valuesFromGetValues memory s = _getValues(tAmount, true);\r\n            return s.rAmount;\r\n        } else {\r\n            valuesFromGetValues memory s = _getValues(tAmount, true);\r\n            return s.rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function updateMaxSellTransactionAmount(uint256 amount) external onlyOwner {\r\n        maxSellTransactionAmount = amount * 10**_decimals;\r\n    }\r\n\r\n    function updateMaxBuyTransactionAmount(uint256 amount) external onlyOwner {\r\n        maxBuyTransactionAmount = amount * 10**_decimals;\r\n    }\r\n\r\n    function setMarketMakerPair(address _pair, bool value) public onlyOwner {\r\n      require(pairs[_pair] != value, \" Automated market maker pair is already set to that value\");\r\n         pairs[_pair] = value;\r\n         excludeFromReward(_pair);\r\n         isDividendExempt[_pair] = true;\r\n\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns (uint256) {\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate = _getRate();\r\n        return rAmount / currentRate;\r\n    }\r\n\r\n    //@dev kept original RFI naming -> \"reward\" as in reflection\r\n    function excludeFromReward(address account) public onlyOwner {\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n        if (_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    function setRewardDividendEnabled(bool _enabled) external onlyOwner {\r\n        if (_enabled == false) {\r\n            previousDividendRewardsFee = taxes.rewardToken;\r\n            taxes.rewardToken = 0;\r\n            selltaxes.rewardToken = 0;\r\n            rewardDividendEnabled = _enabled;\r\n        } else {\r\n            taxes.rewardToken = previousDividendRewardsFee;\r\n            selltaxes.rewardToken = previousDividendRewardsFee;\r\n            rewardDividendEnabled = _enabled;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    function blacklistAddress(address account, bool value) external onlyOwner{\r\n        _isBlacklisted[account] = value;\r\n    }\r\n\r\n    function setDistributor(ManualDividendDistributor dist)external onlyOwner {\r\n        distributor = dist;\r\n    }\r\n\r\n     function setRewardToken(IBEP20 newrewardToken) external onlyOwner {\r\n        distributor.setRewardToken(newrewardToken);\r\n    }\r\n    \r\n    function revertRewardToken() external onlyOwner {\r\n        distributor.setRewardToken(IBEP20(address(this)));\r\n    }\r\n\r\n    function setTradingIsEnabled() external onlyOwner {\r\n        tradingIsEnabled = true;\r\n    }\r\n\r\n    function allowTeamtrading() external onlyOwner {\r\n        teamCanTrade = true;\r\n    } \r\n    \r\n    function addTeamWallet(address wallet) external onlyOwner {\r\n        teamWallets[wallet] = true;\r\n    }\r\n\r\n    function includeInReward(address account) external onlyOwner {\r\n        require(_isExcluded[account], \"Account is not excluded\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function setIsDividendExempt(address holder, bool exempt) external onlyOwner {\r\n        require(holder != address(this) && !pairs[holder]);\r\n        isDividendExempt[holder] = exempt;\r\n        if(exempt){\r\n            distributor.setShare(holder, 0);\r\n        }else{\r\n\r\n            distributor.setShare(holder, balanceOf(holder));\r\n\r\n            \r\n        }\r\n    }\r\n\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n\r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function _reflectRfi(uint256 rRfi, uint256 tRfi) private {\r\n        _rTotal -= rRfi;\r\n        totFeesPaid.rfi += tRfi;\r\n    }\r\n\r\n\r\n    function _takeMarketing(uint256 rMarketing, uint256 tMarketing) private {\r\n        totFeesPaid.marketing += tMarketing;\r\n        countMarketingTokens += tMarketing;\r\n\r\n        if (_isExcluded[address(this)]) {\r\n            _tOwned[address(this)] += tMarketing;\r\n        }\r\n        _rOwned[address(this)] += rMarketing;\r\n    }\r\n\r\n    function _takeNFTRewards(uint256 rNFTRewards, uint256 tNFTRewards) private {\r\n        totFeesPaid.nftRewards += tNFTRewards;\r\n        countNFTRewardsTokens  += tNFTRewards;\r\n\r\n        if (_isExcluded[address(this)]) {\r\n            _tOwned[address(this)] += tNFTRewards;\r\n        }\r\n        _rOwned[address(this)] += rNFTRewards;\r\n    }\r\n\r\n    function _takeRewardToken(uint256 rRewardToken, uint256 tRewardToken) private {\r\n        totFeesPaid.rewardToken += tRewardToken;\r\n        countRewardTokens  += tRewardToken;\r\n\r\n        if (_isExcluded[address(this)]) {\r\n            _tOwned[address(this)] += tRewardToken;\r\n        }\r\n        _rOwned[address(this)] += rRewardToken;\r\n    }\r\n\r\n    function _takeLP(uint256 rLP, uint256 tLP) private {\r\n        totFeesPaid.lp += tLP;\r\n        countLPTokens  += tLP;\r\n\r\n        if (_isExcluded[address(this)]) {\r\n            _tOwned[address(this)] += tLP;\r\n        }\r\n        _rOwned[address(this)] += rLP;\r\n    }\r\n\r\n    function _getValues(\r\n        uint256 tAmount,\r\n        bool takeFee\r\n    ) private view returns (valuesFromGetValues memory to_return) {\r\n        to_return = _getTValues(tAmount, takeFee);\r\n        (\r\n            to_return.rAmount,\r\n            to_return.rTransferAmount,\r\n            to_return.rRfi,\r\n            to_return.rMarketing,\r\n            to_return.rNFTRewards,\r\n            to_return.rRewardToken,\r\n            to_return.rLP\r\n        ) = _getRValues(to_return, tAmount, takeFee, _getRate());\r\n\r\n        return to_return;\r\n    }\r\n\r\n    function _getTValues(\r\n        uint256 tAmount,\r\n        bool takeFee\r\n    ) private view returns (valuesFromGetValues memory s) {\r\n        if (!takeFee) {\r\n            s.tTransferAmount = tAmount;\r\n            return s;\r\n        }\r\n\r\n        s.tRfi = (tAmount * taxes.rfi) / 100;\r\n        s.tMarketing = (tAmount * taxes.marketing) / 100;\r\n        s.tNFTRewards = (tAmount * taxes.nftRewards) / 100;\r\n        s.tRewardToken = (tAmount * taxes.rewardToken) / 100;\r\n        s.tLP = (tAmount * taxes.lp) / 100;\r\n        s.tTransferAmount =\r\n            tAmount -\r\n            s.tRfi -\r\n            s.tMarketing -\r\n            s.tNFTRewards -\r\n            s.tRewardToken -\r\n            s.tLP;\r\n        return s;\r\n    }\r\n\r\n    function _getRValues(\r\n        valuesFromGetValues memory s,\r\n        uint256 tAmount,\r\n        bool takeFee,\r\n        uint256 currentRate\r\n    )\r\n        private\r\n        pure\r\n        returns (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rRfi,\r\n            uint256 rMarketing,\r\n            uint256 rNFTRewards,\r\n            uint256 rRewardToken,\r\n            uint256 rLP\r\n        )\r\n    {\r\n        rAmount = tAmount * currentRate;\r\n\r\n        if (!takeFee) {\r\n            return (rAmount, rAmount, 0, 0, 0, 0, 0);\r\n        }\r\n\r\n        rRfi = s.tRfi * currentRate;\r\n        rMarketing = s.tMarketing * currentRate;\r\n        rNFTRewards = s.tNFTRewards * currentRate;\r\n        rRewardToken = s.tRewardToken * currentRate;\r\n        rLP = s.tLP * currentRate;\r\n        rTransferAmount =\r\n            rAmount -\r\n            rRfi -\r\n            rMarketing -\r\n            rNFTRewards -\r\n            rRewardToken - \r\n            rLP;\r\n        return (rAmount, rTransferAmount, rRfi, rMarketing, rNFTRewards, rRewardToken, rLP);\r\n    }\r\n\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply / tSupply;\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply)\r\n                return (_rTotal, _tTotal);\r\n            rSupply = rSupply - _rOwned[_excluded[i]];\r\n            tSupply = tSupply - _tOwned[_excluded[i]];\r\n        }\r\n        if (rSupply < _rTotal / _tTotal) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"BEP20: transfer from the zero address\");\r\n        require(to != address(0), \"BEP20: transfer to the zero address\");\r\n        require(!_isBlacklisted[from] && !_isBlacklisted[to], \"Blacklisted address\");\r\n        require(tradingIsEnabled || (_isExcludedFromFee[from] || _isExcludedFromFee[to]), \"Trading not started\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(\r\n            amount <= balanceOf(from),\r\n            \"You are trying to transfer more than your balance\"\r\n        );\r\n\r\n        if(!teamCanTrade){\r\n            require(!teamWallets[from], \"Team Cannot trade!\");\r\n        }\r\n\r\n        bool isSelling = pairs[to];\r\n        bool isBuying =  pairs[from];\r\n\r\n        bool canSwap = balanceOf(address(this)) >= swapTokensAtAmount;\r\n\r\n            uint256 oldBuyRFI = taxes.rfi;\r\n            uint256 oldBuyMarketing = taxes.marketing;\r\n            uint256 oldBuyNFTRewards = taxes.nftRewards;\r\n            uint256 oldBuyRewardToken = taxes.rewardToken;\r\n            uint256 oldBuyLP = taxes.lp;\r\n\r\n        if(isSelling){\r\n        \r\n            taxes.rfi = selltaxes.rfi;\r\n            taxes.marketing = selltaxes.marketing;\r\n            taxes.nftRewards = selltaxes.nftRewards;\r\n            taxes.rewardToken = selltaxes.rewardToken;\r\n            taxes.lp = selltaxes.lp;\r\n        }\r\n\r\n        if (\r\n            isBuying &&\r\n             !_isExcludedFromFee[from] &&\r\n             !_isExcludedFromFee[to]\r\n        ) {\r\n            \r\n            require(amount <= maxBuyTransactionAmount, \"maximum buy amount reached.\");\r\n        }\r\n\r\n        if ( \r\n            isSelling &&\r\n             !_isExcludedFromFee[from] &&\r\n             !_isExcludedFromFee[to]\r\n        ) {\r\n\r\n           require(amount <= maxSellTransactionAmount, \"maximum sell amount reached.\");\r\n        }\r\n\r\n        if (\r\n            !swapping &&\r\n            canSwap &&\r\n            isSelling &&\r\n            !_isExcludedFromFee[from] &&\r\n            !_isExcludedFromFee[to]\r\n        ) {\r\n\r\n            swapAndSendMarketingBNB(countMarketingTokens);\r\n            swapAndSendNFTRewardBNB(countNFTRewardsTokens);\r\n            if (rewardDividendEnabled) {\r\n                 swapAndSendRewardTokenBNB(countRewardTokens);\r\n            }\r\n            swapAndLiquify(countLPTokens);\r\n        }\r\n        bool takeFee = true;\r\n        if (swapping || _isExcludedFromFee[from] || _isExcludedFromFee[to]) takeFee = false;\r\n\r\n        if (!isSelling && !isBuying) takeFee = false;\r\n\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n        \r\n        if(!isDividendExempt[from]){ try distributor.setShare(from, balanceOf(from)) {} catch {} }        \r\n        if(!isDividendExempt[to]){ try distributor.setShare(to, balanceOf(to)) {} catch {} }\r\n\r\n        if(isSelling){\r\n           \r\n            taxes.rfi = oldBuyRFI;\r\n            taxes.marketing = oldBuyMarketing;\r\n            taxes.nftRewards = oldBuyNFTRewards;\r\n            taxes.rewardToken = oldBuyRewardToken;\r\n            taxes.lp = oldBuyLP;\r\n\r\n        }\r\n    }\r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee\r\n    ) private {\r\n\r\n        valuesFromGetValues memory s = _getValues(tAmount, takeFee);\r\n\r\n        if (_isExcluded[sender]) {\r\n            //from excluded\r\n            _tOwned[sender] = _tOwned[sender] - tAmount;\r\n        }\r\n        if (_isExcluded[recipient]) {\r\n            //to excluded\r\n            _tOwned[recipient] = _tOwned[recipient] + s.tTransferAmount;\r\n        }\r\n\r\n        _rOwned[sender] = _rOwned[sender] - s.rAmount;\r\n        _rOwned[recipient] = _rOwned[recipient] + s.rTransferAmount;\r\n\r\n        if (s.rRfi > 0 || s.tRfi > 0) _reflectRfi(s.rRfi, s.tRfi);\r\n        if (s.rMarketing > 0 || s.tMarketing > 0) _takeMarketing(s.rMarketing, s.tMarketing);\r\n        if (s.rNFTRewards > 0 || s.tNFTRewards > 0) _takeNFTRewards(s.rNFTRewards, s.tNFTRewards);\r\n        if (s.rRewardToken > 0 || s.tRewardToken > 0) _takeRewardToken(s.rRewardToken, s.tRewardToken);\r\n        if (s.rLP > 0 || s.tLP > 0) _takeLP(s.rLP, s.tLP);\r\n        emit Transfer(sender, recipient, s.tTransferAmount);\r\n    }\r\n\r\n    function swapAndSendMarketingBNB(uint256 _tokenAmount) private lockTheSwap {\r\n       \r\n        uint256 contractBalance = balanceOf(address(this));\r\n        \r\n        if(_tokenAmount <= 0){\r\n            return;\r\n        }\r\n\r\n        if(_tokenAmount > contractBalance){\r\n            return;\r\n        }\r\n\r\n        swapTokensForBNB(_tokenAmount, marketingWallet);\r\n        countMarketingTokens -= _tokenAmount;\r\n\r\n    }\r\n\r\n    function swapAndSendNFTRewardBNB(uint256 _tokenAmount) private lockTheSwap {\r\n\r\n        uint256 contractBalance = balanceOf(address(this));\r\n\r\n       if(_tokenAmount <= 0){\r\n            return;\r\n        }\r\n\r\n        if(_tokenAmount > contractBalance){\r\n            return;\r\n        }\r\n\r\n        swapTokensForBNB(_tokenAmount, nftWallet);\r\n        countNFTRewardsTokens -= _tokenAmount;\r\n\r\n    }\r\n\r\n    function swapAndSendRewardTokenBNB(uint256 _tokenAmount) private lockTheSwap {\r\n\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        uint256 balanceBefore = address(this).balance;\r\n\r\n       if(_tokenAmount <= 0){\r\n            return;\r\n        }\r\n\r\n        if(_tokenAmount > contractBalance){\r\n            return;\r\n        }\r\n\r\n        swapTokensForBNB(_tokenAmount, address(this));\r\n        uint256 amountBNB = address(this).balance.sub(balanceBefore);\r\n         if(amountBNB > 0){\r\n            try distributor.deposit{value: amountBNB}() {} catch {}\r\n        }\r\n        countRewardTokens -= _tokenAmount;\r\n\r\n    }\r\n\r\n    function swapAndLiquify(uint256 tokens) private {\r\n\r\n\r\n       if(tokens <= 0){\r\n           emit SwapAndLiquify(0, 0, 0, false);\r\n            return;\r\n        }\r\n\r\n        if(tokens > balanceOf(address(this))){\r\n            emit SwapAndLiquify(0, 0, 0, false);\r\n            return;\r\n        }\r\n        \r\n        \r\n        // split the contract balance into halves\r\n        uint256 half = tokens.div(2);\r\n        uint256 otherHalf = tokens.sub(half);\r\n        \r\n        if(half <= 0 || otherHalf <= 0){\r\n            return;\r\n        }\r\n\r\n        // capture the contract's current BNB balance.\r\n        // this is so that we can capture exactly the amount of BNB that the\r\n        // swap creates, and not make the liquidity event include any BNB that\r\n        // has been manually sent to the contract\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        // swap tokens for ETH\r\n        swapTokensForBNB(half, payable(address(this)));\r\n        \r\n        countLPTokens -= half;\r\n\r\n        // how much ETH did we just swap into?\r\n        uint256 newBalance = address(this).balance.sub(initialBalance);\r\n\r\n        // add liquidity to uniswap\r\n        addLiquidity(otherHalf, newBalance);\r\n        \r\n        countLPTokens -= otherHalf;\r\n        \r\n        emit SwapAndLiquify(half, newBalance, otherHalf, true);\r\n    }\r\n\r\n\r\n      \r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            liquidityWallet,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n\r\n\r\n    function swapTokensForBNB(uint256 tokenAmount, address wallet) private {\r\n        // generate the pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        _approve(address(this), address(router), tokenAmount);\r\n\r\n        // make the swap\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            payable(wallet),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function bulkExcludeFee(address[] memory accounts, bool state) external onlyOwner {\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            _isExcludedFromFee[accounts[i]] = state;\r\n        }\r\n    }\r\n\r\n    function updateMarketingWallet(address newWallet) external onlyOwner {\r\n        require(newWallet != address(0),\"Fee Address cannot be zero address\");\r\n        marketingWallet = newWallet;\r\n    }\r\n\r\n    function updateNFTWallet(address newWallet) external onlyOwner {\r\n        require(newWallet != address(0),\"Fee Address cannot be zero address\");\r\n        nftWallet = newWallet;\r\n    }\r\n\r\n    function updateSwapTokensAtAmount(uint256 amount) external onlyOwner {\r\n        require(amount <= 10000000, \"Cannot set swap threshold amount higher than 1% of tokens\");\r\n        swapTokensAtAmount = amount * 10**_decimals;\r\n    }\r\n\r\n    function updateBuyTax(uint256 _rfl, uint256 _marketing, uint256 _nftRewards, uint256 _rewardToken, uint256 _lp) external onlyOwner {\r\n        uint256 _totalBuyFees = _rfl.add(_marketing).add(_nftRewards).add(_rewardToken).add(_lp);\r\n\r\n        require(_totalBuyFees <= 16, \"Cannot be total fees higher than 16%\");\r\n        taxes.rfi = _rfl;\r\n        taxes.marketing = _marketing;\r\n        taxes.nftRewards = _nftRewards;\r\n        taxes.rewardToken = _rewardToken;\r\n        taxes.lp = _lp;\r\n   \r\n    }\r\n\r\n    function updateSellTax(uint256 _rfl, uint256 _marketing, uint256 _nftRewards, uint256 _rewardToken, uint256 _lp) external onlyOwner {\r\n        uint256 _totalSellFees = _rfl.add(_marketing).add(_nftRewards).add(_rewardToken).add(_lp);\r\n\r\n        require(_totalSellFees <= 16, \"Cannot be total fees higher than 16%\");\r\n        selltaxes.rfi = _rfl;\r\n        selltaxes.marketing = _marketing;\r\n        selltaxes.nftRewards = _nftRewards;\r\n        selltaxes.rewardToken = _rewardToken;\r\n        selltaxes.lp = _lp;\r\n\r\n        \r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"addTeamWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowTeamtrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"blacklistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"bulkExcludeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"contract ManualDividendDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardDistributionMinAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getrewardDistributionTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousDividendRewardsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferRfi\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revertRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDividendEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardtoken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selltaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rfi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ManualDividendDistributor\",\"name\":\"dist\",\"type\":\"address\"}],\"name\":\"setDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsDividendExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setRewardDividendEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"newrewardToken\",\"type\":\"address\"}],\"name\":\"setRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setTradingIsEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rfi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamWallets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totFeesPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rfi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingIsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rfl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nftRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lp\",\"type\":\"uint256\"}],\"name\":\"updateBuyTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updateMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateMaxBuyTransactionAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateMaxSellTransactionAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updateNFTWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rfl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nftRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lp\",\"type\":\"uint256\"}],\"name\":\"updateSellTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BTCBullDog", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://155f5b54e7cba77809490d50357167cf8c088d6b0f6d696867fc9b36e39c88a3"}