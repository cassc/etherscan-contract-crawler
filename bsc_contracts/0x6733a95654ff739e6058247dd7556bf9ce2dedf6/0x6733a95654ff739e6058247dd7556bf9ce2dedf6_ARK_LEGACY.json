{"SourceCode": "/*\r\n *          .      .                                                 .                  \r\n *               .                                                                      \r\n *            .;;..         .':::::::::::::;,..    .'::;..   . .':::;'. .               \r\n *           'xKXk;.      . .oXXXXXXXXXXXXXXKOl'.  .oXXKc.    .l0XX0o.                  \r\n *          .dXXXXk, .      .;dddddddddddddkKXXk,  .oXXKc.  .:kXXKx,.  .                \r\n *       . .oKXXXXXx'              .  .    .oKXXo. .oXXKc..'dKXXOc. .    .              \r\n *     .. .lKXXkxKXXx. .                   .lKXXo. .oXXKd;lOXXKo'.      .               \r\n *       .cKXXk'.oKXKd.      .cloollllllolox0XXO;. .oXXXXXXXXKl. .                      \r\n *   .  .c0XXk,  .dXXKo. .  .lXXXXXXXXXXXXXXX0d,.. .oXXXOxkKXKk:.                       \r\n *     .:0XXO;.   'xXXKl.   .oXXKxcccccco0XXKc.  . .oXXKc..cOXXKd,.                     \r\n *     ;OXX0:.     ,kXX0c.  .oXXKc      .:0XXO,    .oXXKc. .'o0XX0l.                    \r\n *    ,kXX0c.       ,OXX0:. .oXXKc.  ..  .c0XXk,   .oXXKc. . .;xKXKk;.                  \r\n *   .cxxxc.        .;xxko. .:kkx;.       .:xxxl.  .:xxx;. .   .cxxxd;. .               \r\n *   ......          ...... ......       . ......   .....       .......                 \r\n *               .             .             ..                                          \r\n * ARK LEGACY 2.0\r\n * \r\n * SPDX-License-Identifier: None\r\n */\r\n\r\npragma solidity 0.8.19;\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n}\r\n\r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\ncontract ERC165 is IERC165 {\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n    constructor () {_registerInterface(_INTERFACE_ID_ERC165);}\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {return _supportedInterfaces[interfaceId];}\r\n    function _registerInterface(bytes4 interfaceId) internal virtual {require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");_supportedInterfaces[interfaceId] = true;}\r\n}\r\n\r\ninterface IERC721 is IERC165 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n    function approve(address to, uint256 tokenId) external;\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\ninterface IBEP20 {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount ) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IERC721Enumerable is IERC721 {\r\n    function totalSupply() external view returns (uint256);\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\ninterface IERC721Metadata is IERC721 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\ninterface IERC721Receiver {\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\r\n}\r\n\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0)  return \"0\";\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\ncontract ERC721 is ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n    string private _name;\r\n    string private _symbol;\r\n    mapping(uint256 => address) private _owners;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: invalid token ID\");\r\n        return owner;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {return _name;}\r\n    function symbol() public view virtual override returns (string memory) {return _symbol;}\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        _requireMinted(tokenId);\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n    function _baseURI() internal view virtual returns (string memory) {return \"\";}\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            msg.sender == owner || isApprovedForAll(owner, msg.sender),\r\n            \"ERC721: approve caller is not token owner or approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        _requireMinted(tokenId);\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {_setApprovalForAll(msg.sender, operator, approved);}\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {return _operatorApprovals[owner][operator];}\r\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\r\n        require(_isApprovedOrOwner(msg.sender, tokenId), \"ERC721: caller is not token owner or approved\");\r\n        _transfer(from, to, tokenId);\r\n    }\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {safeTransferFrom(from, to, tokenId, \"\");}\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\r\n        require(_isApprovedOrOwner(msg.sender, tokenId), \"ERC721: caller is not token owner or approved\");\r\n        _safeTransfer(from, to, tokenId, data);\r\n    }\r\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {return _owners[tokenId] != address(0);}\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\r\n    }\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {_safeMint(to, tokenId, \"\");}\r\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(_checkOnERC721Received(address(0), to, tokenId, data),\"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n        _balances[to]++;\r\n        _owners[tokenId] = to;\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n        delete _tokenApprovals[tokenId];\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n        delete _tokenApprovals[tokenId];\r\n        _balances[from]--;\r\n        _balances[to]++;\r\n        _owners[tokenId] = to;\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\r\n        require(owner != operator, \"ERC721: approve to caller\");\r\n        _operatorApprovals[owner][operator] = approved;\r\n        emit ApprovalForAll(owner, operator, approved);\r\n    }\r\n    function _requireMinted(uint256 tokenId) internal view virtual {\r\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\r\n    }\r\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                else assembly {revert(add(32, reason), mload(reason))}\r\n            }\r\n        } else return true;\r\n    }\r\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual {}\r\n}\r\n\r\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\r\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\r\n    mapping(uint256 => uint256) private _ownedTokensIndex;\r\n    uint256[] private _allTokens;\r\n    mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\r\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\r\n        return _ownedTokens[owner][index];\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {return _allTokens.length;}\r\n\r\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\r\n        return _allTokens[index];\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n        if (from == address(0)) _addTokenToAllTokensEnumeration(tokenId);\r\n        else if (from != to) _removeTokenFromOwnerEnumeration(from, tokenId);\r\n        if (to == address(0)) _removeTokenFromAllTokensEnumeration(tokenId);\r\n        else if (to != from) _addTokenToOwnerEnumeration(to, tokenId);\r\n    }\r\n\r\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n        uint256 length = ERC721.balanceOf(to);\r\n        _ownedTokens[to][length] = tokenId;\r\n        _ownedTokensIndex[tokenId] = length;\r\n    }\r\n\r\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n        _allTokensIndex[tokenId] = _allTokens.length;\r\n        _allTokens.push(tokenId);\r\n    }\r\n\r\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\r\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\r\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n            _ownedTokens[from][tokenIndex] = lastTokenId;\r\n            _ownedTokensIndex[lastTokenId] = tokenIndex;\r\n        }\r\n        delete _ownedTokensIndex[tokenId];\r\n        delete _ownedTokens[from][lastTokenIndex];\r\n    }\r\n\r\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\n        uint256 lastTokenIndex = _allTokens.length - 1;\r\n        uint256 tokenIndex = _allTokensIndex[tokenId];\r\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\r\n        _allTokens[tokenIndex] = lastTokenId;\r\n        delete _allTokensIndex[tokenId];\r\n        _allTokens.pop();\r\n    }\r\n}\r\n\r\ninterface IVAULT {\r\n    function accountReachedMaxPayout(address investor) external view returns (bool);\r\n    function addSparkPlayer(address investor) external;\r\n}\r\n\r\ninterface ILEGACYOLD {\r\n    function ownerOf(uint256 id) external view returns (address);\r\n    function levelOfNft(uint256 id) external view returns (uint256);\r\n    function excluded(uint256 id) external view returns (uint256);\r\n    function claimedRewards(uint256 id) external view returns (uint256);\r\n    function totalRewardsPerShare() external view returns (uint256);\r\n    function rewardsPool() external view returns (uint256);\r\n}\r\n\r\ncontract ARK_LEGACY is ERC721, ERC721Enumerable {\r\n    using Strings for uint256;\r\n    string private baseURI = \"https://api.codecraftrs.com/ark/legacy/\";\r\n    string private _fileExtension = \".json\";\r\n    address private constant CEO = 0xdf0048DF98A749ED36553788B4b449eA7a7BAA88;\r\n    IVAULT public vault = IVAULT(0x13fD16538FF8B3AeA324BC4d2863eb9EA78E1691);\r\n    \r\n    mapping(address => bool) public isArk;\r\n    \r\n    uint256 private _totalSupply;\r\n\r\n    IBEP20 public constant BUSD = IBEP20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);\r\n    ILEGACYOLD public constant OLD = ILEGACYOLD(0x2222223B05B5842c918a868928F57cD3A0332222);\r\n    uint256 public totalContributions;\r\n    uint256 private constant MULTIPLIER = 10**18;\r\n\r\n    mapping (uint256 => uint256) public levelOfNft;\r\n    mapping (uint256 => uint256) public nftPriceOfLevel;\r\n    mapping (uint256 => uint256) public maxNftsOfLevel;\r\n    mapping (uint256 => uint256) public nftsLeftOfLevel;\r\n    mapping (uint256 => uint256) public totalSupplyOfLevel;\r\n    mapping (uint256 => uint256) public cwrOfLevel;\r\n    mapping (uint256 => uint256) public votesOfLevel;\r\n    mapping (uint256 => uint256) public levelsOfLevel;\r\n    mapping (uint256 => uint256) public sharesOfLevel;\r\n    mapping (uint256 => uint256) public pricePaidForId;\r\n    mapping (uint256 => bool) public locked;\r\n\r\n\tuint256 public totalShares;\r\n    uint256 public totalRewardsPerShare;\r\n    uint256 public lastDistribution;\r\n    uint256 public dailyRewardPercent = 2;\r\n    uint256 public rewardsPool;\r\n    uint256 public rewardsPercent = 20;\r\n    uint256 private veryBigNumber = 10 ** 36;\r\n\r\n    uint256 public maxCwrWithoutNft = 1500;\r\n    uint256 public openingHour = 0;\r\n\r\n    mapping (uint256 => uint256) public claimedRewards;\r\n\tmapping (uint256 => uint256) public shares;\r\n    mapping (uint256 => uint256) public excluded;\r\n\r\n    struct Vote{\r\n        uint256 yes;\r\n        uint256 no;\r\n        string topic;\r\n        uint256 endTime;\r\n    }\r\n\r\n    Vote[] public votes;\r\n\r\n    mapping(uint256 => mapping(uint256 => bool)) public voteCast;\r\n    mapping(uint256 => mapping(uint256 => bool)) public decisionOnVote;\r\n\r\n    event VoteNowIfYouCare(Vote newVote);\r\n\r\n    event MigrationFinished(uint256 oldBalance, uint256 rewardsPool, uint256 unclaimedRewards);\r\n    event MigrationPartlyFinished(uint256 howManyLeft);\r\n    event RewardsAdded(uint256 rewardsToBeAdded);\r\n    event RewardsDistributed(uint256 rewardsToBeAdded, uint256 rewardsPerShareToday);\r\n    event RewardsClaimed(address investor, uint256 claimableNow);\r\n    event VaultSet(address vaultAddress);\r\n    event ArkWalletSet(address arkWallet, bool status);\r\n\r\n    modifier onlyCEO() {\r\n        require(msg.sender == CEO, \"Only the CEO can do that\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyArk() {\r\n        require(isArk[msg.sender], \"Only ARK can do that\");\r\n        _;\r\n    }\r\n\r\n    event NftMinted(address indexed user, uint256 indexed tokenId, uint256 level, uint256 price);\r\n    event NftLevelledUp(address indexed user, uint256 indexed tokenId, uint256 oldLevel , uint256 newLevel, uint256 priceOfLevelUp);\r\n\r\n    constructor() ERC721(\"ARK Legacy 3.0\", \"ALN\") {\r\n        nftPriceOfLevel[1] = 1000 ether;\r\n        nftPriceOfLevel[2] = 4000 ether;\r\n        nftPriceOfLevel[3] = 10000 ether;\r\n        maxNftsOfLevel[1] = 3000;\r\n        maxNftsOfLevel[2] = 500;\r\n        maxNftsOfLevel[3] = 100;\r\n        nftsLeftOfLevel[1] = 3000;\r\n        nftsLeftOfLevel[2] = 500;\r\n        nftsLeftOfLevel[3] = 100;\r\n        cwrOfLevel[1] = 2500;\r\n        cwrOfLevel[2] = 6000;\r\n        cwrOfLevel[3] = 13000;\r\n        votesOfLevel[1] = 1;\r\n        votesOfLevel[2] = 4;\r\n        votesOfLevel[3] = 10;\r\n        levelsOfLevel[1] = 3;\r\n        levelsOfLevel[2] = 9;\r\n        levelsOfLevel[3] = 15;\r\n        sharesOfLevel[1] = 1;\r\n        sharesOfLevel[2] = 4;\r\n        sharesOfLevel[3] = 10;\r\n        isArk[CEO] = true;\r\n        IBEP20(BUSD).approve(address(vault), type(uint256).max);\r\n        isArk[address(vault)] = true;\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal override(ERC721, ERC721Enumerable){super._beforeTokenTransfer(from, to, tokenId);}\r\n    function supportsInterface(bytes4 interfaceId) public view override(ERC721, ERC721Enumerable) returns (bool){return super.supportsInterface(interfaceId);}\r\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {return string(abi.encodePacked(baseURI, tokenId.toString(), _fileExtension));}\r\n    function setBaseUri(string memory uri) external onlyCEO {baseURI = uri;}\r\n\tfunction setFileExtension(string memory ext) external onlyCEO {_fileExtension = ext;}\r\n    function _transfer(address from,address to, uint256 tokenId) internal override {\r\n        require(!locked[tokenId], \"NFT is locked\");\r\n        _claim(from);\r\n        require(balanceOf(to) == 0, \"Max NFT per wallet exceeded\");\r\n        super._transfer(from,to,tokenId);\r\n    }\r\n\r\n    function _mintToken(address _to, uint256 _tokenId) internal returns (uint256) {\r\n        _mint(_to, _tokenId);\r\n        return _tokenId;\r\n    }\r\n\r\n    function mint(uint256 level) external {\r\n        require(balanceOf(msg.sender) == 0, \"Max NFT per wallet exceeded\");\r\n        require(openingHour <= block.timestamp, \"Sale not open yet\");\r\n        require(nftsLeftOfLevel[level] > 0, \"This level is sold out, sorry.\");\r\n        uint256 price = nftPriceOfLevel[level];\r\n        require(BUSD.transferFrom(msg.sender, address(this), price),\"BUSD transfer failed\");\r\n        totalContributions += price;\r\n        uint256 idOfMintedNFT = _mintToken(msg.sender, _totalSupply);\r\n        pricePaidForId[idOfMintedNFT] = price;\r\n        levelOfNft[idOfMintedNFT] = level;\r\n        _totalSupply++;\r\n        totalSupplyOfLevel[level]++;\r\n        nftsLeftOfLevel[level]--;\r\n        uint256 rewardsShare = price * rewardsPercent / 100;\r\n        rewardsPool += rewardsShare;\r\n        totalShares += sharesOfLevel[level];\r\n        shares[idOfMintedNFT] = sharesOfLevel[level];\r\n        excluded[idOfMintedNFT] = totalRewardsPerShare;\r\n        require(BUSD.transfer(CEO, price - rewardsShare),\"BUSD transfer failed\");\r\n        emit NftMinted(msg.sender, idOfMintedNFT, level, price);\r\n    }\r\n\r\n    function mintToWallet(address to, uint256 level) public onlyArk {\r\n        require(balanceOf(to) == 0, \"Max NFT per wallet exceeded\");\r\n        require(nftsLeftOfLevel[level] > 0, \"This level is sold out, sorry.\");\r\n        uint256 price = nftPriceOfLevel[level];\r\n        uint256 idOfMintedNFT = _mintToken(to, _totalSupply);\r\n        pricePaidForId[idOfMintedNFT] = price;\r\n        levelOfNft[idOfMintedNFT] = level;\r\n        _totalSupply++;\r\n        totalSupplyOfLevel[level]++;\r\n        nftsLeftOfLevel[level]--;\r\n        totalShares += sharesOfLevel[level];\r\n        shares[idOfMintedNFT] = sharesOfLevel[level];\r\n        excluded[idOfMintedNFT] = totalRewardsPerShare;\r\n        emit NftMinted(to, idOfMintedNFT, level, price);\r\n    }\r\n\r\n    function mintToWalletPaid(address to, uint256 level) public onlyArk {\r\n        require(balanceOf(to) == 0, \"Max NFT per wallet exceeded\");\r\n        require(nftsLeftOfLevel[level] > 0, \"This level is sold out, sorry.\");\r\n        uint256 price = nftPriceOfLevel[level];\r\n        require(BUSD.transferFrom(msg.sender, address(this), price),\"BUSD transfer failed\");\r\n        totalContributions += price;\r\n        uint256 idOfMintedNFT = _mintToken(to, _totalSupply);\r\n        pricePaidForId[idOfMintedNFT] = price;\r\n        levelOfNft[idOfMintedNFT] = level;\r\n        _totalSupply++;\r\n        totalSupplyOfLevel[level]++;\r\n        nftsLeftOfLevel[level]--;\r\n        uint256 rewardsShare = price * rewardsPercent / 100;\r\n        rewardsPool += rewardsShare;\r\n        totalShares += sharesOfLevel[level];\r\n        shares[idOfMintedNFT] = sharesOfLevel[level];\r\n        excluded[idOfMintedNFT] = totalRewardsPerShare;\r\n        require(BUSD.transfer(CEO, price - rewardsShare),\"BUSD transfer failed\");\r\n        emit NftMinted(to, idOfMintedNFT, level, price);\r\n    }\r\n\r\n    function mintAndLockToWallet(address to, uint256 level, bool isPaid) public onlyArk {\r\n        if(isPaid) mintToWalletPaid(to, level);\r\n        if(!isPaid) mintToWallet(to, level);\r\n        lockNft(tokenOfOwnerByIndex(to,0));\r\n    }\r\n\r\n    function getPriceForLevelUp(uint256 id) public view returns(uint256) {\r\n        uint256 currentLevel = levelOfNft[id];\r\n        uint256 nextLevel = currentLevel + 1;\r\n        uint256 priceForLevelUp = nftPriceOfLevel[nextLevel] - pricePaidForId[id];\r\n        return priceForLevelUp;\r\n    }\r\n\r\n    function levelUp(uint256 id) external {\r\n        if(!isArk[msg.sender]) require(ownerOf(id) == msg.sender, \"Can't upgrade an NFT that is not owned by you\");\r\n        uint256 currentLevel = levelOfNft[id];\r\n        uint256 nextLevel = currentLevel + 1;\r\n        uint256 priceForLevelUp = nftPriceOfLevel[nextLevel] - pricePaidForId[id];\r\n        require(nftsLeftOfLevel[nextLevel] > 0, \"This level is sold out, sorry.\");\r\n        _claim(ownerOf(id));\r\n        require(BUSD.transferFrom(msg.sender, address(this), priceForLevelUp),\"BUSD transfer failed\");\r\n        totalContributions += priceForLevelUp;\r\n        pricePaidForId[id] += priceForLevelUp;\r\n        levelOfNft[id] = nextLevel;\r\n        totalSupplyOfLevel[nextLevel]++;\r\n        totalSupplyOfLevel[currentLevel]--;\r\n        nftsLeftOfLevel[nextLevel]--;\r\n        nftsLeftOfLevel[currentLevel]++;\r\n        uint256 rewardsShare = priceForLevelUp * rewardsPercent / 100;\r\n        rewardsPool += rewardsShare;\r\n        totalShares -= sharesOfLevel[currentLevel];\r\n        totalShares += sharesOfLevel[nextLevel];\r\n        shares[id] = sharesOfLevel[nextLevel];\r\n        require(BUSD.transfer(CEO, priceForLevelUp - rewardsShare),\"BUSD transfer failed\");\r\n        emit NftLevelledUp(ownerOf(id), id, currentLevel, nextLevel, priceForLevelUp);\r\n    }\r\n\r\n    function lockNft() external {\r\n        uint256 id = tokenOfOwnerByIndex(msg.sender, 0);\r\n        require(!locked[id], \"NFT already locked\");\r\n        vault.addSparkPlayer(msg.sender);\r\n        lockNft(id);\r\n    }\r\n\r\n    function unlockNft() external {\r\n        uint256 id = tokenOfOwnerByIndex(msg.sender, 0);\r\n        require(locked[id], \"NFT already unlocked\");\r\n        require(vault.accountReachedMaxPayout(ownerOf(id)), \"Can't unlock an NFT before reaching maxPayout\");\r\n        unlockNft(id);\r\n    }\r\n\r\n    function unlockNft(uint256 id) internal {\r\n        locked[id] = false;\r\n    }\r\n\r\n    function lockNft(uint256 id) internal {\r\n        locked[id] = true;\r\n    }\r\n\r\n    function setRewardPercentagePerDay(uint256 percent) external onlyCEO {\r\n        dailyRewardPercent = percent;\r\n    }\r\n\r\n    function setRewardPercentagePerMint(uint256 percent) external onlyCEO {\r\n        rewardsPercent = percent;\r\n    }\r\n\r\n    function resetDistributionTimer() external onlyCEO {\r\n        lastDistribution = block.timestamp - 24 hours;\r\n    }\r\n\r\n    function createNewVote(string memory whatToVoteOn, uint256 cutOffTime) external onlyCEO {\r\n        Vote memory newVote;\r\n        newVote.topic = whatToVoteOn;\r\n        newVote.endTime = cutOffTime;\r\n        votes.push(newVote);\r\n        emit VoteNowIfYouCare(newVote);\r\n    }\r\n\r\n    function vote(uint256 index, bool yourVote) external {\r\n        require(votes[index].endTime >= block.timestamp, \"Vote is closed\");\r\n        if(balanceOf(msg.sender) == 0) return;        \r\n        uint256 id = tokenOfOwnerByIndex(msg.sender, 0);\r\n        uint256 level = levelOfNft[id];\r\n        uint256 votesOfThisNft = votesOfLevel[level];\r\n        if(votesOfThisNft == 0) return;\r\n        if(voteCast[id][index]) {\r\n            if(decisionOnVote[id][index]) votes[index].yes -= votesOfThisNft;\r\n            if(!decisionOnVote[id][index]) votes[index].no -= votesOfThisNft;   \r\n        }\r\n        if(yourVote) votes[index].yes += votesOfThisNft;\r\n        if(!yourVote) votes[index].no += votesOfThisNft;\r\n        decisionOnVote[id][index] = yourVote;\r\n        voteCast[id][index] = true;\r\n    }\r\n\r\n    function createNewLevel(uint256 level, uint256 price, uint256 maxSupply, uint256 cwr, uint256 _votes, uint256 levels, uint256 share) external onlyCEO {\r\n        require(nftPriceOfLevel[level] == 0, \"Level already exists\");\r\n        nftPriceOfLevel[level] = price * 1 ether;\r\n        maxNftsOfLevel[level] = maxSupply;\r\n        nftsLeftOfLevel[level] = maxSupply;\r\n        cwrOfLevel[level] = cwr;\r\n        votesOfLevel[level] = _votes;\r\n        levelsOfLevel[level] = levels;\r\n        sharesOfLevel[level] = share;\r\n    } \r\n\r\n    function modifyLevel(uint256 level, uint256 price, uint256 maxSupply, uint256 cwr, uint256 _votes, uint256 levels) external onlyCEO {\r\n        if(maxSupply > maxNftsOfLevel[level]) {\r\n            uint256 additionalNfts = maxSupply - maxNftsOfLevel[level];\r\n            nftsLeftOfLevel[level] += additionalNfts;\r\n        }\r\n\r\n        if(maxSupply < maxNftsOfLevel[level]) {\r\n            uint256 lessNfts = maxNftsOfLevel[level] - maxSupply;\r\n            nftsLeftOfLevel[level] -= lessNfts;\r\n        }\r\n\r\n        nftPriceOfLevel[level] = price * 1 ether;\r\n        maxNftsOfLevel[level] = maxSupply;\r\n        cwrOfLevel[level] = cwr;\r\n        votesOfLevel[level] = _votes;\r\n        levelsOfLevel[level] = levels;\r\n    } \r\n\r\n    function getCwr(address investor) external view returns(uint256) {\r\n        if(balanceOf(investor) == 0) return maxCwrWithoutNft;\r\n        uint256 id = tokenOfOwnerByIndex(investor, 0);\r\n        uint256 level = levelOfNft[id];\r\n        uint256 cwr = locked[id] ? cwrOfLevel[level] : maxCwrWithoutNft;\r\n        return cwr;\r\n    }\r\n\r\n    function getLevels(address investor) external view returns(uint256) {\r\n        if(balanceOf(investor) == 0) return 0;        \r\n        uint256 id = tokenOfOwnerByIndex(investor, 0);\r\n        uint256 level = levelOfNft[id];\r\n        uint256 levels = locked[id] ? levelsOfLevel[level] : 0;\r\n        return levels;\r\n    }\r\n\r\n    function increaseLimitOfNFTs(uint256 level, uint256 howMany) external onlyCEO {\r\n        maxNftsOfLevel[level] += howMany;\r\n        nftsLeftOfLevel[level] += howMany;\r\n    }\r\n\r\n    function setArkWallet(address arkWallet, bool status) external onlyCEO {\r\n        isArk[arkWallet] = status;\r\n        emit ArkWalletSet(arkWallet, status);\r\n    }\r\n\r\n    function setVaultAddress(address vaultAddress) external onlyCEO {\r\n        vault = IVAULT(vaultAddress);\r\n        IBEP20(BUSD).approve(address(vault), type(uint256).max);\r\n        emit VaultSet(vaultAddress);\r\n    }\r\n\r\n///////////////// NFT Rewards Pool\r\n    function addToRewards(uint256 busdAmount) external {\r\n        require(BUSD.transferFrom(msg.sender, address(this), busdAmount),\"BUSD transfer failed\");\r\n        rewardsPool += busdAmount;\r\n        emit RewardsAdded(busdAmount);\r\n    }\r\n\r\n    function distributeRewards() external onlyArk {\r\n        if(lastDistribution + 23.9 hours > block.timestamp) return;\r\n        lastDistribution = block.timestamp;\r\n        uint256 rewardsToBeAdded = rewardsPool * dailyRewardPercent / 100;\r\n        uint256 rewardsPerShareToday = rewardsToBeAdded * veryBigNumber / totalShares;\r\n        totalRewardsPerShare += rewardsPerShareToday;\r\n        rewardsPool -= rewardsToBeAdded;\r\n        emit RewardsDistributed(rewardsToBeAdded, rewardsPerShareToday);\r\n    }\r\n    \r\n    function distributeRewardsManuallyCEO() external onlyCEO {\r\n        uint256 rewardsToBeAdded = rewardsPool * dailyRewardPercent / 100;\r\n        uint256 rewardsPerShareToday = rewardsToBeAdded * veryBigNumber / totalShares;\r\n        totalRewardsPerShare += rewardsPerShareToday;\r\n        rewardsPool -= rewardsToBeAdded;\r\n        emit RewardsDistributed(rewardsToBeAdded, rewardsPerShareToday);\r\n    }\r\n    \r\n    function claimRewards() external {\r\n        _claim(msg.sender);\r\n    }\r\n\r\n    function claimRewardsFor(address investor) external onlyArk {\r\n        _claim(investor);\r\n    }\r\n\r\n    function _claim(address investor) internal {\r\n        if(balanceOf(investor) == 0) return;        \r\n        uint256 id = tokenOfOwnerByIndex(investor, 0);\r\n        uint256 claimedAlready = excluded[id];\r\n        if(claimedAlready >= totalRewardsPerShare * shares[id]) return;\r\n        uint256 claimableNow = shares[id] * (totalRewardsPerShare - claimedAlready) / veryBigNumber;\r\n        claimedRewards[id] += claimableNow;\r\n        excluded[id] = totalRewardsPerShare;\r\n        require(BUSD.transfer(investor, claimableNow),\"BUSD transfer failed\");\r\n        emit RewardsClaimed(investor, claimableNow);\r\n    }\r\n\r\n    function getClaimableRewards(address investor) public view returns(uint256) {\r\n        if(balanceOf(investor) == 0) return 0;        \r\n        uint256 id = tokenOfOwnerByIndex(investor, 0);\r\n        uint256 claimedAlready = excluded[id];\r\n        if(claimedAlready >= totalRewardsPerShare * shares[id]) return 0;\r\n        uint256 claimableNow = shares[id] * (totalRewardsPerShare - claimedAlready) / veryBigNumber;\r\n        return claimableNow;\r\n    }\r\n\r\n    function getLifetimeRewards(address investor) public view returns(uint256) {\r\n        if(balanceOf(investor) == 0) return 0;        \r\n        uint256 id = tokenOfOwnerByIndex(investor, 0);\r\n        uint256 claimedAlready = excluded[id];\r\n        if(claimedAlready >= totalRewardsPerShare * shares[id]) return 0;\r\n        uint256 claimableNow = shares[id] * (totalRewardsPerShare - claimedAlready) / veryBigNumber;\r\n        return claimableNow + claimedRewards[id];\r\n    }\r\n\r\n    function getShares(address investor) public view returns(uint256) {\r\n        if(balanceOf(investor) == 0) return 0;        \r\n        uint256 id = tokenOfOwnerByIndex(investor, 0);\r\n        return shares[id];\r\n    }\r\n    \r\n    function rescueAnyToken(address tokenToRescue) external onlyCEO {\r\n        require(IBEP20(tokenToRescue).transfer(msg.sender, IBEP20(tokenToRescue).balanceOf(address(this))),\"Failed\");\r\n    }\r\n\r\n    function airdropEveryone() external onlyCEO {\r\n        uint256 minted = IERC721Enumerable(address(OLD)).totalSupply();\r\n        address owner;\r\n        uint256 level;\r\n        uint256 sharesOfId;\r\n        uint256 exludedRewards;\r\n        uint256 unclaimedRewards;\r\n        uint256 oldTotalRewardsPerShare = OLD.totalRewardsPerShare();\r\n        for(uint256 i = 0; i < minted; i++){\r\n            owner = OLD.ownerOf(i);\r\n            level = OLD.levelOfNft(i);\r\n            sharesOfId = sharesOfLevel[level];\r\n            exludedRewards = OLD.excluded(i);\r\n            mintToWallet(owner,level);\r\n            locked[i] = true;\r\n            excluded[i] = exludedRewards;\r\n            unclaimedRewards += sharesOfId * (oldTotalRewardsPerShare - exludedRewards) / veryBigNumber;\r\n            claimedRewards[i] = OLD.claimedRewards(i);\r\n        }\r\n        totalRewardsPerShare = oldTotalRewardsPerShare;\r\n        uint256 busdAmount = OLD.rewardsPool() + unclaimedRewards;\r\n        require(BUSD.transferFrom(msg.sender, address(this), busdAmount),\"BUSD transfer failed\");\r\n        rewardsPool += OLD.rewardsPool();\r\n        emit MigrationFinished(BUSD.balanceOf(address(OLD)), rewardsPool, unclaimedRewards);\r\n    }\r\n\r\n    uint256 public nextId;\r\n\r\n    function airdropSome(uint256 howMany) external onlyCEO {\r\n        uint256 minted = IERC721Enumerable(address(OLD)).totalSupply();\r\n        address owner;\r\n        uint256 level;\r\n        uint256 sharesOfId;\r\n        uint256 exludedRewards;\r\n        uint256 unclaimedRewards;\r\n        uint256 oldTotalRewardsPerShare = OLD.totalRewardsPerShare();\r\n        uint256 to = nextId + howMany;\r\n        for(uint256 i = nextId; i < to; i++){\r\n            owner = OLD.ownerOf(i);\r\n            level = OLD.levelOfNft(i);\r\n            sharesOfId = sharesOfLevel[level];\r\n            exludedRewards = OLD.excluded(i);\r\n            mintToWallet(owner,level);\r\n            locked[i] = true;\r\n            excluded[i] = exludedRewards;\r\n            unclaimedRewards += sharesOfId * (oldTotalRewardsPerShare - exludedRewards) / veryBigNumber;\r\n            claimedRewards[i] = OLD.claimedRewards(i);\r\n        }\r\n        require(BUSD.transferFrom(address(OLD), address(this), unclaimedRewards),\"BUSD transfer failed\");\r\n        emit MigrationPartlyFinished(minted - totalSupply());\r\n        nextId = to;\r\n    }\r\n\r\n    function finishMigration() external onlyCEO {\r\n        rewardsPool = OLD.rewardsPool();\r\n        uint256 oldTotalRewardsPerShare = OLD.totalRewardsPerShare();\r\n        totalRewardsPerShare = oldTotalRewardsPerShare;\r\n    }\r\n\r\n    function migrateRewards() external onlyCEO {\r\n        BUSD.transferFrom(address(OLD), address(this), OLD.rewardsPool());\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"arkWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"ArkWalletSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unclaimedRewards\",\"type\":\"uint256\"}],\"name\":\"MigrationFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"howManyLeft\",\"type\":\"uint256\"}],\"name\":\"MigrationPartlyFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLevel\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLevel\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceOfLevelUp\",\"type\":\"uint256\"}],\"name\":\"NftLevelledUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"NftMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsToBeAdded\",\"type\":\"uint256\"}],\"name\":\"RewardsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimableNow\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsToBeAdded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsPerShareToday\",\"type\":\"uint256\"}],\"name\":\"RewardsDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"}],\"name\":\"VaultSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"yes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"no\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"topic\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ARK_LEGACY.Vote\",\"name\":\"newVote\",\"type\":\"tuple\"}],\"name\":\"VoteNowIfYouCare\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BUSD\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OLD\",\"outputs\":[{\"internalType\":\"contract ILEGACYOLD\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"busdAmount\",\"type\":\"uint256\"}],\"name\":\"addToRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropEveryone\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"howMany\",\"type\":\"uint256\"}],\"name\":\"airdropSome\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"claimRewardsFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cwr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_votes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"levels\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"createNewLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"whatToVoteOn\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"cutOffTime\",\"type\":\"uint256\"}],\"name\":\"createNewVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cwrOfLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dailyRewardPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"decisionOnVote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeRewardsManuallyCEO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"excluded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"getClaimableRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"getCwr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"getLevels\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"getLifetimeRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getPriceForLevelUp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"getShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"howMany\",\"type\":\"uint256\"}],\"name\":\"increaseLimitOfNFTs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isArk\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levelOfNft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"levelUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levelsOfLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxCwrWithoutNft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"maxNftsOfLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrateRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPaid\",\"type\":\"bool\"}],\"name\":\"mintAndLockToWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"mintToWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"mintToWalletPaid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cwr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_votes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"levels\",\"type\":\"uint256\"}],\"name\":\"modifyLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftPriceOfLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftsLeftOfLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openingHour\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pricePaidForId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenToRescue\",\"type\":\"address\"}],\"name\":\"rescueAnyToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetDistributionTimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"arkWallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setArkWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setBaseUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"setFileExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setRewardPercentagePerDay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setRewardPercentagePerMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"}],\"name\":\"setVaultAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sharesOfLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalContributions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardsPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalSupplyOfLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVAULT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"yourVote\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voteCast\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"yes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"no\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"topic\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votesOfLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ARK_LEGACY", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://aac8a672822114b0f78e276f24bdea47862e59db51965911eb179dded4b8e16e"}