{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-04-23\r\n*/\r\n\r\n/*\r\n\r\n      $$\\      $$\\  $$$$$$\\   $$$$$$\\  $$$$$$$$\\  $$$$$$\\  $$\\   $$\\  $$$$$$\\         $$$$$$\\  $$$$$$$$\\  $$$$$$\\   $$$$$$\\  \r\n      $$$\\    $$$ |$$  __$$\\ $$  __$$\\ $$  _____|$$  __$$\\ $$$\\  $$ |$$  __$$\\       $$  __$$\\ $$  _____|$$  __$$\\ $$  __$$\\ \r\n      $$$$\\  $$$$ |$$ /  $$ |$$ /  \\__|$$ |      $$ /  $$ |$$$$\\ $$ |$$ /  \\__|      $$ /  \\__|$$ |      $$ /  $$ |$$ /  \\__|\r\n      $$\\$$\\$$ $$ |$$ |  $$ |$$ |      $$$$$\\    $$$$$$$$ |$$ $$\\$$ |\\$$$$$$\\        \\$$$$$$\\  $$$$$\\    $$$$$$$$ |\\$$$$$$\\  \r\n      $$ \\$$$  $$ |$$ |  $$ |$$ |      $$  __|   $$  __$$ |$$ \\$$$$ | \\____$$\\        \\____$$\\ $$  __|   $$  __$$ | \\____$$\\ \r\n      $$ |\\$  /$$ |$$ |  $$ |$$ |  $$\\ $$ |      $$ |  $$ |$$ |\\$$$ |$$\\   $$ |      $$\\   $$ |$$ |      $$ |  $$ |$$\\   $$ |\r\n      $$ | \\_/ $$ | $$$$$$  |\\$$$$$$  |$$$$$$$$\\ $$ |  $$ |$$ | \\$$ |\\$$$$$$  |      \\$$$$$$  |$$$$$$$$\\ $$ |  $$ |\\$$$$$$  |\r\n      \\__|     \\__| \\______/  \\______/ \\________|\\__|  \\__|\\__|  \\__| \\______/        \\______/ \\________|\\__|  \\__| \\______/ \r\n                                                                                                                                                                                                \r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\nlibrary SafeMath {\r\n\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity 0.8.9;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n \r\n    constructor () {\r\n      address msgSender = _msgSender();\r\n      _owner = msgSender;\r\n      emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n      return _owner;\r\n    }\r\n\r\n    \r\n    modifier onlyOwner() {\r\n      require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n      _;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n      emit OwnershipTransferred(_owner, address(0));\r\n      _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n      _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n      require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n      emit OwnershipTransferred(_owner, newOwner);\r\n      _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address account) external view returns (uint);\r\n\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ncontract MOCEANS is Context, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n    //mainnet\r\n    address oceans =  0x7769d930BC6B087f960C5D21e34A4449576cf22a;\r\n    \r\n    address public devAddress;\r\n    uint256 private Seas_TO_HATCH_1MINERS = 1036800;//for final version should be seconds in a day\r\n    uint256 private PSN = 10000;\r\n    uint256 private PSNH = 5000;\r\n    uint256 private devFeeVal = 0;\r\n    bool private initialized = false;\r\n    mapping (address => uint256) private hatcheryMiners;\r\n    mapping (address => uint256) private claimedSeas;\r\n    mapping (address => uint256) private lastHatch;\r\n    mapping (address => address) private referrals;\r\n    uint256 private marketSeas;\r\n    \r\n    constructor() {\r\n        devAddress = msg.sender;\r\n    }\r\n    \r\n    function hatchSeas(address ref) public {\r\n        require(initialized);\r\n        \r\n        if(ref == msg.sender) {\r\n            ref = address(0);\r\n        }\r\n        \r\n        if(referrals[msg.sender] == address(0) && referrals[msg.sender] != msg.sender) {\r\n            referrals[msg.sender] = ref;\r\n        }\r\n        \r\n        uint256 seasUsed = getMySeas(msg.sender);\r\n        uint256 newMiners = SafeMath.div(seasUsed,Seas_TO_HATCH_1MINERS);\r\n        hatcheryMiners[msg.sender] = SafeMath.add(hatcheryMiners[msg.sender],newMiners);\r\n        claimedSeas[msg.sender] = 0;\r\n        lastHatch[msg.sender] = block.timestamp;\r\n        \r\n        //send referral seas\r\n        claimedSeas[referrals[msg.sender]] = SafeMath.add(claimedSeas[referrals[msg.sender]], SafeMath.div(SafeMath.mul(seasUsed,13),100));\r\n        \r\n        //boost market to nerf miners hoarding\r\n        marketSeas = SafeMath.add(marketSeas,SafeMath.div(seasUsed,5));\r\n    }\r\n    \r\n    function sellSeas() public {\r\n        require(initialized);\r\n        uint256 hasSeas = getMySeas(msg.sender);\r\n        uint256 seasValue = calculateSeasSell(hasSeas);\r\n        uint256 fee = devFee(seasValue);\r\n        claimedSeas[msg.sender] = 0;\r\n        lastHatch[msg.sender] = block.timestamp;\r\n        marketSeas = SafeMath.add(marketSeas,hasSeas);\r\n        ERC20(oceans).transfer(devAddress, fee);\r\n        ERC20(oceans).transfer(address(msg.sender), SafeMath.sub(seasValue,fee));\r\n    }\r\n    \r\n    function MOCEANSRewards(address adr) public view returns(uint256) {\r\n        uint256 hasSeas = getMySeas(adr);\r\n        uint256 SeasValue = calculateSeasSell(hasSeas);\r\n        return SeasValue;\r\n    }\r\n    \r\n    function buySeas(address ref, uint256 amount) public {\r\n        require(initialized);\r\n\r\n        ERC20(oceans).transferFrom(address(msg.sender), address(this), amount);\r\n        uint256 balance = ERC20(oceans).balanceOf(address(this));\r\n        uint256 seasBought = calculateSeasBuy(amount,SafeMath.sub(balance,amount));\r\n        seasBought = SafeMath.sub(seasBought,devFee(seasBought));\r\n        uint256 fee = devFee(amount);\r\n        ERC20(oceans).transfer(devAddress, fee);\r\n        claimedSeas[msg.sender] = SafeMath.add(claimedSeas[msg.sender],seasBought);\r\n        hatchSeas(ref);\r\n    }\r\n    \r\n    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) private view returns(uint256) {\r\n        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\r\n    }\r\n    \r\n    function calculateSeasSell(uint256 seas) public view returns(uint256) {\r\n        return calculateTrade(seas,marketSeas,ERC20(oceans).balanceOf(address(this)));\r\n    }\r\n    \r\n    function calculateSeasBuy(uint256 eth,uint256 contractBalance) public view returns(uint256) {\r\n        return calculateTrade(eth,contractBalance,marketSeas);\r\n    }\r\n    \r\n    function calculateSeasBuySimple(uint256 eth) public view returns(uint256){\r\n        return calculateSeasBuy(eth,ERC20(oceans).balanceOf(address(this)));\r\n    }\r\n    \r\n    function devFee(uint256 amount) private view returns(uint256) {\r\n        return SafeMath.div(SafeMath.mul(amount,devFeeVal),100);\r\n    }\r\n    \r\n    function seedMarket(uint256 amount) public {\r\n        ERC20(oceans).transferFrom(address(msg.sender), address(this), amount);\r\n        require(marketSeas==0);\r\n        initialized=true;\r\n        marketSeas = 103680000000;\r\n    }\r\n    \r\n    function getBalance() public view returns(uint256) {\r\n        return ERC20(oceans).balanceOf(address(this));\r\n    }\r\n    \r\n    function getMyMiners(address adr) public view returns(uint256) {\r\n        return hatcheryMiners[adr];\r\n    }\r\n    \r\n    function getMySeas(address adr) public view returns(uint256) {\r\n        return SafeMath.add(claimedSeas[adr],getSeasSinceLastHatch(adr));\r\n    }\r\n    \r\n    function getSeasSinceLastHatch(address adr) public view returns(uint256) {\r\n        uint256 secondsPassed=min(Seas_TO_HATCH_1MINERS,SafeMath.sub(block.timestamp,lastHatch[adr]));\r\n        return SafeMath.mul(secondsPassed,hatcheryMiners[adr]);\r\n    }\r\n    \r\n    function setMoceansInCan(uint256 _MOCEANS) public onlyOwner {\r\n        Seas_TO_HATCH_1MINERS = _MOCEANS;\r\n    }\r\n    \r\n    function setDevFee(uint256 fee) public onlyOwner {\r\n        devFeeVal = fee; \r\n    }\r\n    \r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"MOCEANSRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buySeas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateSeasBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateSeasBuySimple\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seas\",\"type\":\"uint256\"}],\"name\":\"calculateSeasSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getMyMiners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getMySeas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getSeasSinceLastHatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"hatchSeas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"seedMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellSeas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setDevFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_MOCEANS\",\"type\":\"uint256\"}],\"name\":\"setMoceansInCan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MOCEANS", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://dcb286b22c7ac3efd649e3d1c817c853b002a388adf54c4733bbb9d49f546cb7"}