{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.10;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract LlamaDropper {\r\n\r\n    address public owner;\r\n    mapping (address => bool) public isAuthorized;\r\n\r\n    constructor() {\r\n\t    owner = msg.sender;\r\n\t    isAuthorized[msg.sender] = true;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n\t    require(msg.sender == owner, \"Caller not Owner\");\r\n\t    _;\r\n    }\r\n\r\n    modifier onlyAuth {\r\n\t    require(isAuthorized[msg.sender], \"Caller not authorized\");\r\n\t    _;\r\n    }\r\n\r\n    function massDistributeTokens(address _token, uint _decimals, address[] calldata _airdropAddresses, uint _amtPerAddress) external onlyAuth {\r\n        uint amtPerAddress = _amtPerAddress * (10 ** _decimals);\r\n\t    for (uint i = 0; i < _airdropAddresses.length; i++) {\r\n\t        IERC20(_token).transfer(_airdropAddresses[i], amtPerAddress);\r\n        }\r\n    }\r\n\r\n    function distributeTokensByAmount(address _token, uint _decimals, address[] calldata _airdropAddresses, uint[] calldata _airdropAmounts) external onlyAuth {\r\n\t    for (uint i = 0; i < _airdropAddresses.length; i++) {\r\n            uint airdropAmount = _airdropAmounts[i] * (10 ** _decimals);\r\n\t        IERC20(_token).transfer(_airdropAddresses[i], airdropAmount);\r\n        }\r\n    }\r\n\r\n    function updateAuthorized(address _authAddress, bool _isAuth) external onlyOwner {\r\n\t    isAuthorized[_authAddress] = _isAuth;\r\n    }\r\n\r\n    function clearStuckTokens(address contractAddress) external onlyOwner {\r\n        IERC20 erc20Token = IERC20(contractAddress);\r\n        uint256 balance = erc20Token.balanceOf(address(this));\r\n        erc20Token.transfer(msg.sender, balance);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"clearStuckTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_airdropAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_airdropAmounts\",\"type\":\"uint256[]\"}],\"name\":\"distributeTokensByAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_airdropAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amtPerAddress\",\"type\":\"uint256\"}],\"name\":\"massDistributeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isAuth\",\"type\":\"bool\"}],\"name\":\"updateAuthorized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LlamaDropper", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://57462b6829ade341e067b5312d0c4e05e1e134478683d83e786e2454880d58f0"}