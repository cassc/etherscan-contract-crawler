{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-03-22\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2023-03-17\r\n*/\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.9;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        require(token.transfer(to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        require(token.transferFrom(from, to, value));\r\n    }\r\n\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        require(token.approve(spender, value));\r\n    }\r\n}\r\n\r\nabstract contract Pausable is Context {\r\n    event Paused(address account);\r\n\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\nlibrary MerkleProof {\r\n    function verify(\r\n        bytes32[] memory proof,\r\n        bytes32 root,\r\n        bytes32 leaf\r\n    ) internal pure returns (bool) {\r\n        return processProof(proof, leaf) == root;\r\n    }\r\n\r\n    function processProof(bytes32[] memory proof, bytes32 leaf)\r\n        internal\r\n        pure\r\n        returns (bytes32)\r\n    {\r\n        bytes32 computedHash = leaf;\r\n        for (uint256 i = 0; i < proof.length; i++) {\r\n            bytes32 proofElement = proof[i];\r\n            if (computedHash <= proofElement) {\r\n                // Hash(current computed hash + current element of the proof)\r\n                computedHash = _efficientHash(computedHash, proofElement);\r\n            } else {\r\n                // Hash(current element of the proof + current computed hash)\r\n                computedHash = _efficientHash(proofElement, computedHash);\r\n            }\r\n        }\r\n        return computedHash;\r\n    }\r\n\r\n    function _efficientHash(bytes32 a, bytes32 b)\r\n        private\r\n        pure\r\n        returns (bytes32 value)\r\n    {\r\n        assembly {\r\n            mstore(0x00, a)\r\n            mstore(0x20, b)\r\n            value := keccak256(0x00, 0x40)\r\n        }\r\n    }\r\n}\r\n\r\ncontract SeedifyLaunchpad is Ownable, Pausable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    string public name;\r\n    uint256 public maxCap;\r\n    uint256 public saleStart;\r\n    uint256 public saleEnd;\r\n    uint256 public totalBUSDReceivedInAllTier;\r\n    uint256 public noOfTiers;\r\n    uint256 public totalUsers;\r\n    address public projectOwner;\r\n    address public tokenAddress;\r\n    IERC20 public ERC20Interface;\r\n    uint8 public immutable phaseNo;\r\n    bytes32 public rootHash;\r\n\r\n    struct Tier {\r\n        uint256 maxTierCap;\r\n        uint256 minUserCap;\r\n        uint256 maxUserCap;\r\n        uint256 amountRaised;\r\n        uint256 users;\r\n    }\r\n\r\n    struct user {\r\n        uint256 tier;\r\n        uint256 investedAmount;\r\n    }\r\n\r\n    event UserInvestment(\r\n        address indexed user,\r\n        uint256 amount,\r\n        uint8 indexed phase\r\n    );\r\n\r\n    mapping(uint256 => Tier) public tierDetails;\r\n    mapping(address => user) public userDetails;\r\n\r\n    constructor(\r\n        string memory _name,\r\n        uint256 _maxCap,\r\n        uint256 _saleStart,\r\n        uint256 _saleEnd,\r\n        uint256 _noOfTiers,\r\n        address _projectOwner,\r\n        address _tokenAddress,\r\n        uint256 _totalUsers,\r\n        uint8 _phaseNo\r\n    ) {\r\n        name = _name;\r\n        require(_maxCap > 0, \"Zero max cap\");\r\n        maxCap = _maxCap;\r\n        require(\r\n            _saleStart > block.timestamp && _saleEnd > _saleStart,\r\n            \"Invalid timings\"\r\n        );\r\n        saleStart = _saleStart;\r\n        saleEnd = _saleEnd;\r\n        require(_noOfTiers > 0, \"Zero tiers\");\r\n        noOfTiers = _noOfTiers;\r\n        require(_projectOwner != address(0), \"Zero project owner address\");\r\n        projectOwner = _projectOwner;\r\n        require(_tokenAddress != address(0), \"Zero token address\");\r\n        tokenAddress = _tokenAddress;\r\n        ERC20Interface = IERC20(tokenAddress);\r\n        require(_totalUsers > 0, \"Zero users\");\r\n        totalUsers = _totalUsers;\r\n        phaseNo = _phaseNo;\r\n    }\r\n    function updateMaxCap(uint256 _maxCap) public onlyOwner {\r\n        require(_maxCap > 0, \"Zero max cap\");\r\n        maxCap = _maxCap;\r\n    }\r\n\r\n    function updateStartTime(uint256 newsaleStart) public onlyOwner {\r\n        require(block.timestamp < saleStart, \"Sale already started\");\r\n        saleStart = newsaleStart;\r\n    }\r\n\r\n    function updateEndTime(uint256 newSaleEnd) public onlyOwner {\r\n        require(\r\n            newSaleEnd > saleStart && newSaleEnd > block.timestamp,\r\n            \"Sale end can't be less than sale start\"\r\n        );\r\n        saleEnd = newSaleEnd;\r\n    }\r\n\r\n    function pause() public onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() public onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    function updateTiers(\r\n        uint256[] memory _tier,\r\n        uint256[] memory _maxTierCap,\r\n        uint256[] memory _minUserCap,\r\n        uint256[] memory _maxUserCap,\r\n        uint256[] memory _tierUsers\r\n    ) external onlyOwner {\r\n        require(\r\n            _tier.length == _maxTierCap.length &&\r\n                _maxTierCap.length == _minUserCap.length &&\r\n                _minUserCap.length == _maxUserCap.length &&\r\n                _maxUserCap.length == _tierUsers.length,\r\n            \"Lengths mismatch\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < _tier.length; i++) {\r\n            require(\r\n                _tier[i] > 0 && _tier[i] <= noOfTiers,\r\n                \"Invalid tier number\"\r\n            );\r\n            require(_maxTierCap[i] > 0, \"Invalid max tier cap amount\");\r\n            require(_maxUserCap[i] > 0, \"Invalid max user cap amount\");\r\n            require(_tierUsers[i] > 0, \"Zero users in tier\");\r\n            tierDetails[_tier[i]] = Tier(\r\n                _maxTierCap[i],\r\n                _minUserCap[i],\r\n                _maxUserCap[i],\r\n                0,\r\n                _tierUsers[i]\r\n            );\r\n        }\r\n    }\r\n\r\n    function updateHash(bytes32 _hash) public onlyOwner {\r\n        rootHash = _hash;\r\n    }\r\n\r\n    function buyTokens(uint256 amount, uint256 userTier, bytes32[] calldata proof)\r\n        external\r\n        whenNotPaused\r\n        _hasAllowance(msg.sender, amount)\r\n        returns (bool)\r\n    {\r\n        require(verify(msg.sender, userTier, proof, rootHash),\"User not authenticated\" );\r\n        require(block.timestamp >= saleStart, \"Sale not started yet\");\r\n        require(block.timestamp <= saleEnd, \"Sale Ended\");\r\n        require(\r\n            totalBUSDReceivedInAllTier.add(amount) <= maxCap,\r\n            \"Exceeds pool max cap\"\r\n        );\r\n        require(userTier > 0 && userTier <= noOfTiers, \"User not whitelisted\");\r\n        uint256 expectedAmount = amount.add(\r\n            userDetails[msg.sender].investedAmount\r\n        );\r\n        require(\r\n            expectedAmount >= tierDetails[userTier].minUserCap,\r\n            \"Amount less than user min cap\"\r\n        );\r\n        require(\r\n            expectedAmount <= tierDetails[userTier].maxUserCap,\r\n            \"Amount greater than user max cap\"\r\n        );\r\n\r\n        require(\r\n            expectedAmount <= tierDetails[userTier].maxTierCap,\r\n            \"Amount greater than the tier max cap\"\r\n        );\r\n\r\n        totalBUSDReceivedInAllTier = totalBUSDReceivedInAllTier.add(amount);\r\n        tierDetails[userTier].amountRaised = tierDetails[userTier]\r\n            .amountRaised\r\n            .add(amount);\r\n        userDetails[msg.sender].tier = userTier;\r\n        userDetails[msg.sender].investedAmount = expectedAmount;\r\n        ERC20Interface.safeTransferFrom(msg.sender, projectOwner, amount);\r\n        emit UserInvestment(msg.sender, expectedAmount, phaseNo);\r\n        return true;\r\n    }\r\n\r\n    modifier _hasAllowance(address allower, uint256 amount) {\r\n        // Make sure the allower has provided the right allowance.\r\n        // ERC20Interface = IERC20(tokenAddress);\r\n        uint256 ourAllowance = ERC20Interface.allowance(allower, address(this));\r\n        require(amount <= ourAllowance, \"Make sure to add enough allowance\");\r\n        _;\r\n    }\r\n\r\n    function verify(\r\n        address _wallet,\r\n        uint256 _tier,\r\n        bytes32[] calldata proof,\r\n        bytes32 _rootHash\r\n    ) public pure returns (bool) {\r\n        return (\r\n            MerkleProof.verify(\r\n                proof,\r\n                _rootHash,\r\n                keccak256(abi.encodePacked(_wallet, _tier))\r\n            )\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_maxCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_saleStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_saleEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_noOfTiers\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_projectOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalUsers\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_phaseNo\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"phase\",\"type\":\"uint8\"}],\"name\":\"UserInvestment\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ERC20Interface\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userTier\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"buyTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noOfTiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phaseNo\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rootHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tierDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTierCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minUserCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxUserCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountRaised\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"users\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBUSDReceivedInAllTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSaleEnd\",\"type\":\"uint256\"}],\"name\":\"updateEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"updateHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxCap\",\"type\":\"uint256\"}],\"name\":\"updateMaxCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newsaleStart\",\"type\":\"uint256\"}],\"name\":\"updateStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tier\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_maxTierCap\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_minUserCap\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_maxUserCap\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tierUsers\",\"type\":\"uint256[]\"}],\"name\":\"updateTiers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tier\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"_rootHash\",\"type\":\"bytes32\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "SeedifyLaunchpad", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000056bc75e2d6310000000000000000000000000000000000000000000000000000000000000642130e00000000000000000000000000000000000000000000000000000000064218540000000000000000000000000000000000000000000000000000000000000000900000000000000000000000066268537ce69c47ec5b7e921fd9dcc68a7073220000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d5600000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000a466967687420636c756200000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1cc88f38d0fadfd46fd54a7a9377e51be31a6403ef816228f8b3dbc07cfdfebc"}