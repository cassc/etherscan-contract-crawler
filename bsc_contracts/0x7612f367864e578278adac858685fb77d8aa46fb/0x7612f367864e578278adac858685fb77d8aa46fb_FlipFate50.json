{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n// Telegram - https://t.me/FlipFate50\r\n// Website - https://FF50.io\r\n// Twitter - https://twitter.com/FlipFate50\r\n\r\npragma solidity 0.8.8;\r\n\r\ninterface IDEXFactory {\r\nfunction createPair(address tokenA, address tokenB) external returns(address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\nfunction factory() external pure returns(address);\r\nfunction WETH() external pure returns(address);\r\nfunction swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n}\r\n\r\ncontract FlipFate50 {\r\nmodifier Oracle() { require(msg.sender == _oracle); _; }\r\n\r\nstruct BetStruct\r\n    {\r\nuint256 amount;\r\naddress wallet;\r\n    }\r\n\r\n    BetStruct[] public _betstruct;\r\n\r\nuint256 public minbuy;\r\n\r\naddress _oracle;\r\naddress mw = 0x0102B4C7899cf6eD8B75210d0F443afF1266622D;\r\nstring _name;\r\nstring _symbol;\r\nuint8 _decimals = 18;\r\naddress routerAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\nuint256 _totalSupply;\r\nuint256 public TotalLost;\r\n\r\nbool inSwap;\r\nbool tradeenabled;\r\nmodifier swapping() { inSwap = true; _; inSwap = false; }\r\n\r\n    mapping(address => uint256) _balances;\r\n    mapping(address => mapping(address => uint256)) _allowances;\r\n\r\n    mapping(address => bool) public isBetExempt;\r\nIDEXRouter public router;\r\naddress public pair;\r\n\r\n    constructor() {\r\n        _oracle = msg.sender;\r\n        _name = \"FlipFate50\";\r\n        _symbol = \"FF50\";\r\n        _totalSupply = 100000000 * 10 ** _decimals;\r\n        router = IDEXRouter(routerAddress);\r\n        _balances[_oracle] = _totalSupply;\r\n        _allowances[address(this)][address(router)] = ~uint256(0);\r\n        isBetExempt[_oracle] = true;\r\n    }\r\n\r\n    receive() external payable { }\r\nevent Transfer(address indexed from, address indexed to, uint256 value);\r\nevent Approval(address indexed owner, address indexed spender, uint256 value);\r\nevent OracleTransferred(address oracle);\r\n\r\nevent Win(address indexed owner, uint256 amount);\r\nevent Loss(address indexed owner, uint256 amount);\r\n\r\n    function name() external view returns(string memory) { return _name; }\r\n    function symbol() external view returns(string memory) { return _symbol; }\r\n    function decimals() external view returns(uint8) { return _decimals; }\r\n    function totalSupply() external view returns(uint256) { return _totalSupply; }\r\n    function balanceOf(address account) public view returns(uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view returns(uint256) { return _allowances[holder][spender]; }\r\n\r\n    function SetPairManual(address _pair) external Oracle {pair = _pair;}\r\n\r\n    function StartTrading() external Oracle {tradeenabled =  true;}\r\n\r\n    function approve(address spender, uint256 amount) public returns(bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\nemit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function ChangeMinBuy(uint256 amount) external Oracle { minbuy = amount; }\r\n\r\n    function rand(uint256 offsetvalue) public view returns(bool)\r\n    {uint256 x = uint(keccak256(abi.encodePacked(offsetvalue, block.difficulty, block.timestamp, msg.sender, _betstruct.length))) % 2; if (x == 0) { return false; } else { return true; } }\r\n\r\n    function AddBetQueue(address wallet, uint256 amount) internal { _betstruct.push(BetStruct(amount, wallet)); }\r\n\r\n    function _pop(uint index) internal {\r\n        require(index < _betstruct.length);\r\n        _betstruct[index] = _betstruct[_betstruct.length - 1];\r\n        _betstruct.pop();\r\n    }\r\n\r\n    function AwaitingBet(address wallet) public view returns(bool){ for (uint256 x; x < _betstruct.length; x++) { if (_betstruct[x].wallet == wallet) { return true; } } return false; }\r\n\r\n    function QueueLen() external view returns(uint256) { return _betstruct.length; }\r\n\r\n    function OracleFinalizeQueue() external Oracle\r\n    {\r\n        if (_betstruct.length == 0) { return; }\r\nuint256 offsetiterator;\r\n        while (_betstruct.length > 0) {\r\n            _betstruct[0].amount;\r\n            offsetiterator += _betstruct[0].amount;\r\n            if (rand(offsetiterator)) {\r\nemit Win(_betstruct[0].wallet, _betstruct[0].amount);\r\n            }\r\n            else {\r\n                _balances[_betstruct[0].wallet] -= _betstruct[0].amount;\r\n                _balances[address(this)] += _betstruct[0].amount / 4;\r\nemit Loss(_betstruct[0].wallet, _betstruct[0].amount);\r\n                TotalLost += _betstruct[0].amount;\r\n            }\r\n            _pop(0);\r\n        }\r\n        if (_balances[address(this)] > 0) { swapBack(); }\r\n    }\r\n\r\n    function transferOracle(address wallet) public Oracle {\r\n        _oracle = wallet;\r\nemit OracleTransferred(_oracle);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external returns(bool) { return _transferFrom(msg.sender, recipient, amount); }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns(bool) {\r\n        if (_allowances[sender][msg.sender] != ~uint256(0)) { _allowances[sender][msg.sender] -= amount; }\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns(bool) {\r\n        return _BetTransfer(sender, recipient, amount);\r\n    }\r\n    function _BetTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n    //if sell or transfer between wallets\r\n    if(recipient == pair ||(sender != pair && recipient != pair)){require(!AwaitingBet(recipient) && !AwaitingBet(sender), \"Awaiting Bet\");}\r\n\r\n    //inswap or addliq/removeliq of _oracle\r\n    if(inSwap || (isBetExempt[sender] || isBetExempt[recipient])){_basicTransfer(sender, recipient, amount);return true;}\r\n\r\n    if(!tradeenabled){revert(\"trading not yet enabled\");}\r\n\r\n    //if buy\r\n    if(sender == pair){require(amount >= minbuy);AddBetQueue(recipient, amount);}\r\n\r\n    _basicTransfer(sender, recipient, amount);\r\n    return true;\r\n    }\r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns(bool) {\r\n        _balances[sender] -= amount;\r\n        _balances[recipient] += amount;\r\nemit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function swapBack() internal swapping {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(_balances[address(this)], 0, path, address(this), block.timestamp);\r\n\r\n        mw.call{ value: address(this).balance } (\"\");\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Loss\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"OracleTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Win\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"AwaitingBet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ChangeMinBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OracleFinalizeQueue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"QueueLen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"SetPairManual\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"StartTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TotalLost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_betstruct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBetExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minbuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offsetvalue\",\"type\":\"uint256\"}],\"name\":\"rand\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"transferOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FlipFate50", "CompilerVersion": "v0.8.8+commit.dddeac2f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://292310b272240c8838a403304a2b9a42420ba5649ccf23736eb6e85d8317a685"}