{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/VCake.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin-4.5.0/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin-4.5.0/contracts/access/Ownable.sol\\\";\\nimport \\\"./libraries/SafeCast.sol\\\";\\nimport \\\"./interfaces/ICakePool.sol\\\";\\nimport \\\"./interfaces/IMasterChefV2.sol\\\";\\n\\ncontract VCake is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    struct Point {\\n        int128 bias; // Voting weight\\n        int128 slope; // Multiplier factor to get voting weight at a given time\\n        uint256 timestamp;\\n        uint256 blockNumber;\\n    }\\n\\n    struct LockedBalance {\\n        int128 amount;\\n        uint256 end;\\n    }\\n\\n    uint256 public constant WEEK = 7 days;\\n    uint256 public constant MULTIPLIER = 10**18;\\n    uint256 public UNLOCK_FREE_DURATION = 1 weeks; // 1 week\\n    uint256 public DURATION_FACTOR_OVERDUE = 180 days; // 180 days, in order to calculate overdue fee.\\n    uint256 public constant PRECISION_FACTOR = 1e12; // precision factor.\\n\\n    uint256 public MAX_LOCK = 365 days; // 365 days , set default same with cake pool.\\n\\n    ICakePool public immutable CakePool;\\n    IMasterChefV2 public immutable MasterchefV2;\\n    uint256 public immutable CakePoolPID;\\n\\n    // A global point of time.\\n    uint256 public epoch;\\n    // An array of points (global).\\n    Point[] public pointHistory;\\n    // Mapping (user => Point) to keep track of user point of a given epoch (index of Point is epoch)\\n    mapping(address => Point[]) public userPointHistory;\\n    // Mapping (user => epoch) to keep track which epoch user at\\n    mapping(address => uint256) public userPointEpoch;\\n    // Mapping (round off timestamp to week => slopeDelta) to keep track slope changes over epoch\\n    mapping(uint256 => int128) public slopeChanges;\\n    // Mapping (user => bool) to keep track whether user had initialized\\n    mapping(address => bool) public initialization;\\n    // Mapping (user => bool) to keep track of user previous locked amount\\n    mapping(address => uint256) public userPrevLockedAmount;\\n\\n    // --- BEP20 compatible variables ---\\n    string public name;\\n    string public symbol;\\n    uint8 public decimals;\\n\\n    event Sync(address indexed user, uint256 lockedAmount);\\n    event RemoveUserInitialization(address indexed _user);\\n    event NewMaxLock(uint256 maxLock);\\n\\n    modifier onlyCakePool() {\\n        require(msg.sender == address(CakePool), \\\"Not cake pool\\\");\\n        _;\\n    }\\n\\n    modifier onlyNotInitialized() {\\n        require(!initialization[msg.sender], \\\"Already initialized\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Constructor\\n     * @param _cakePool: Cake Pool contract\\n     * @param _masterchefV2: MasterChefV2 contract\\n     * @param _pid: cake pool ID in MasterChefV2\\n     */\\n    constructor(\\n        ICakePool _cakePool,\\n        IMasterChefV2 _masterchefV2,\\n        uint256 _pid\\n    ) {\\n        CakePool = _cakePool;\\n        MasterchefV2 = _masterchefV2;\\n        CakePoolPID = _pid;\\n\\n        pointHistory.push(Point({bias: 0, slope: 0, timestamp: block.timestamp, blockNumber: block.number}));\\n\\n        decimals = 18;\\n\\n        name = \\\"VCake\\\";\\n        symbol = \\\"VCake\\\";\\n    }\\n\\n    /// @notice Return the balance of VCake at a given \\\"_blockNumber\\\"\\n    /// @param _user The address to get a balance of VCake\\n    /// @param _blockNumber The speicific block number that you want to check the balance of VCake\\n    function balanceOfAt(address _user, uint256 _blockNumber) external view returns (uint256) {\\n        require(_blockNumber <= block.number, \\\"bad _blockNumber\\\");\\n\\n        // Get most recent user Point to block\\n        uint256 _userEpoch = _findUserBlockEpoch(_user, _blockNumber);\\n        if (_userEpoch == 0) {\\n            return 0;\\n        }\\n        Point memory _userPoint = userPointHistory[_user][_userEpoch];\\n\\n        // Get most recent global point to block\\n        uint256 _maxEpoch = epoch;\\n        uint256 _epoch = _findBlockEpoch(_blockNumber, _maxEpoch);\\n        Point memory _point0 = pointHistory[_epoch];\\n\\n        uint256 _blockDelta = 0;\\n        uint256 _timeDelta = 0;\\n        if (_epoch < _maxEpoch) {\\n            Point memory _point1 = pointHistory[_epoch + 1];\\n            _blockDelta = _point1.blockNumber - _point0.blockNumber;\\n            _timeDelta = _point1.timestamp - _point0.timestamp;\\n        } else {\\n            _blockDelta = block.number - _point0.blockNumber;\\n            _timeDelta = block.timestamp - _point0.timestamp;\\n        }\\n        uint256 _blockTime = _point0.timestamp;\\n        if (_blockDelta != 0) {\\n            _blockTime += (_timeDelta * (_blockNumber - _point0.blockNumber)) / _blockDelta;\\n        }\\n\\n        _userPoint.bias -= (_userPoint.slope * SafeCast.toInt128(int256(_blockTime - _userPoint.timestamp)));\\n\\n        if (_userPoint.bias < 0) {\\n            return 0;\\n        }\\n\\n        return SafeCast.toUint256(_userPoint.bias);\\n    }\\n\\n    /// @notice Return the voting weight of a givne user\\n    /// @param _user The address of a user\\n    function balanceOf(address _user) external view returns (uint256) {\\n        uint256 _epoch = userPointEpoch[_user];\\n        if (_epoch == 0) {\\n            return 0;\\n        }\\n        Point memory _lastPoint = userPointHistory[_user][_epoch];\\n        _lastPoint.bias =\\n            _lastPoint.bias -\\n            (_lastPoint.slope * SafeCast.toInt128(int256(block.timestamp - _lastPoint.timestamp)));\\n        if (_lastPoint.bias < 0) {\\n            _lastPoint.bias = 0;\\n        }\\n        return SafeCast.toUint256(_lastPoint.bias);\\n    }\\n\\n    /// @notice Record global and per-user slope to checkpoint\\n    /// @param _address User's wallet address. Only global if 0x0\\n    /// @param _prevLocked User's previous locked balance and end lock time\\n    /// @param _newLocked User's new locked balance and end lock time\\n    function _checkpoint(\\n        address _address,\\n        LockedBalance memory _prevLocked,\\n        LockedBalance memory _newLocked\\n    ) internal {\\n        Point memory _userPrevPoint = Point({slope: 0, bias: 0, timestamp: 0, blockNumber: 0});\\n        Point memory _userNewPoint = Point({slope: 0, bias: 0, timestamp: 0, blockNumber: 0});\\n\\n        int128 _prevSlopeDelta = 0;\\n        int128 _newSlopeDelta = 0;\\n        uint256 _epoch = epoch;\\n\\n        // if not 0x0, then update user's point\\n        if (_address != address(0)) {\\n            // Calculate slopes and biases according to linear decay graph\\n            // slope = lockedAmount / MAX_LOCK => Get the slope of a linear decay graph\\n            // bias = slope * (lockedEnd - currentTimestamp) => Get the voting weight at a given time\\n            // Kept at zero when they have to\\n            if (_prevLocked.end > block.timestamp && _prevLocked.amount > 0) {\\n                // Calculate slope and bias for the prev point\\n                _userPrevPoint.slope = _prevLocked.amount / SafeCast.toInt128(int256(MAX_LOCK));\\n                _userPrevPoint.bias =\\n                    _userPrevPoint.slope *\\n                    SafeCast.toInt128(int256(_prevLocked.end - block.timestamp));\\n            }\\n            if (_newLocked.end > block.timestamp && _newLocked.amount > 0) {\\n                // Calculate slope and bias for the new point\\n                _userNewPoint.slope = _newLocked.amount / SafeCast.toInt128(int256(MAX_LOCK));\\n                _userNewPoint.bias = _userNewPoint.slope * SafeCast.toInt128(int256(_newLocked.end - block.timestamp));\\n            }\\n\\n            // Handle user history here\\n            // Do it here to prevent stack overflow\\n            uint256 _userEpoch = userPointEpoch[_address];\\n            // If user never ever has any point history, push it here for him.\\n            if (_userEpoch == 0) {\\n                userPointHistory[_address].push(_userPrevPoint);\\n            }\\n\\n            // Shift user's epoch by 1 as we are writing a new point for a user\\n            userPointEpoch[_address] = _userEpoch + 1;\\n\\n            // Update timestamp & block number then push new point to user's history\\n            _userNewPoint.timestamp = block.timestamp;\\n            _userNewPoint.blockNumber = block.number;\\n            userPointHistory[_address].push(_userNewPoint);\\n\\n            // Read values of scheduled changes in the slope\\n            // _prevLocked.end can be in the past and in the future\\n            // _newLocked.end can ONLY be in the FUTURE unless everything expired (anything more than zeros)\\n            _prevSlopeDelta = slopeChanges[_prevLocked.end];\\n            if (_newLocked.end != 0) {\\n                // Handle when _newLocked.end != 0\\n                if (_newLocked.end == _prevLocked.end) {\\n                    // This will happen when user adjust lock but end remains the same\\n                    // Possibly when user deposited more Cake to his locker\\n                    _newSlopeDelta = _prevSlopeDelta;\\n                } else {\\n                    // This will happen when user increase lock\\n                    _newSlopeDelta = slopeChanges[_newLocked.end];\\n                }\\n            }\\n        }\\n\\n        // Handle global states here\\n        Point memory _lastPoint = Point({bias: 0, slope: 0, timestamp: block.timestamp, blockNumber: block.number});\\n        if (_epoch > 0) {\\n            // If _epoch > 0, then there is some history written\\n            // Hence, _lastPoint should be pointHistory[_epoch]\\n            // else _lastPoint should an empty point\\n            _lastPoint = pointHistory[_epoch];\\n        }\\n        // _lastCheckpoint => timestamp of the latest point\\n        // if no history, _lastCheckpoint should be block.timestamp\\n        // else _lastCheckpoint should be the timestamp of latest pointHistory\\n        uint256 _lastCheckpoint = _lastPoint.timestamp;\\n\\n        // initialLastPoint is used for extrapolation to calculate block number\\n        // (approximately, for xxxAt methods) and save them\\n        // as we cannot figure that out exactly from inside contract\\n        Point memory _initialLastPoint = Point({\\n            bias: 0,\\n            slope: 0,\\n            timestamp: _lastPoint.timestamp,\\n            blockNumber: _lastPoint.blockNumber\\n        });\\n\\n        // If last point is already recorded in this block, _blockSlope=0\\n        // That is ok because we know the block in such case\\n        uint256 _blockSlope = 0;\\n        if (block.timestamp > _lastPoint.timestamp) {\\n            // Recalculate _blockSlope if _lastPoint.timestamp < block.timestamp\\n            // Possiblity when epoch = 0 or _blockSlope hasn't get updated in this block\\n            _blockSlope =\\n                (MULTIPLIER * (block.number - _lastPoint.blockNumber)) /\\n                (block.timestamp - _lastPoint.timestamp);\\n        }\\n\\n        // Go over weeks to fill history and calculate what the current point is\\n        uint256 _weekCursor = _timestampToFloorWeek(_lastCheckpoint);\\n        for (uint256 i = 0; i < 255; i++) {\\n            // This logic will works for 5 years, if more than that vote power will be broken \ud83d\ude1f\\n            // Bump _weekCursor a week\\n            _weekCursor = _weekCursor + WEEK;\\n            int128 _slopeDelta = 0;\\n            if (_weekCursor > block.timestamp) {\\n                // If the given _weekCursor go beyond block.timestamp,\\n                // We take block.timestamp as the cursor\\n                _weekCursor = block.timestamp;\\n            } else {\\n                // If the given _weekCursor is behind block.timestamp\\n                // We take _slopeDelta from the recorded slopeChanges\\n                // We can use _weekCursor directly because key of slopeChanges is timestamp round off to week\\n                _slopeDelta = slopeChanges[_weekCursor];\\n            }\\n            // Calculate _biasDelta = _lastPoint.slope * (_weekCursor - _lastCheckpoint)\\n            int128 _biasDelta = _lastPoint.slope * SafeCast.toInt128(int256((_weekCursor - _lastCheckpoint)));\\n            _lastPoint.bias = _lastPoint.bias - _biasDelta;\\n            _lastPoint.slope = _lastPoint.slope + _slopeDelta;\\n            if (_lastPoint.bias < 0) {\\n                // This can happen\\n                _lastPoint.bias = 0;\\n            }\\n            if (_lastPoint.slope < 0) {\\n                // This cannot happen, just make sure\\n                _lastPoint.slope = 0;\\n            }\\n            // Update _lastPoint to the new one\\n            _lastCheckpoint = _weekCursor;\\n            _lastPoint.timestamp = _weekCursor;\\n            // As we cannot figure that out block timestamp -> block number exactly\\n            // when query states from xxxAt methods, we need to calculate block number\\n            // based on _initalLastPoint\\n            _lastPoint.blockNumber =\\n                _initialLastPoint.blockNumber +\\n                ((_blockSlope * ((_weekCursor - _initialLastPoint.timestamp))) / MULTIPLIER);\\n            _epoch = _epoch + 1;\\n            if (_weekCursor == block.timestamp) {\\n                // Hard to be happened, but better handling this case too\\n                _lastPoint.blockNumber = block.number;\\n                break;\\n            } else {\\n                pointHistory.push(_lastPoint);\\n            }\\n        }\\n        // Now, each week pointHistory has been filled until current timestamp (round off by week)\\n        // Update epoch to be the latest state\\n        epoch = _epoch;\\n\\n        if (_address != address(0)) {\\n            // If the last point was in the block, the slope change should have been applied already\\n            // But in such case slope shall be 0\\n            _lastPoint.slope = _lastPoint.slope + _userNewPoint.slope - _userPrevPoint.slope;\\n            _lastPoint.bias = _lastPoint.bias + _userNewPoint.bias - _userPrevPoint.bias;\\n            if (_lastPoint.slope < 0) {\\n                _lastPoint.slope = 0;\\n            }\\n            if (_lastPoint.bias < 0) {\\n                _lastPoint.bias = 0;\\n            }\\n        }\\n\\n        // Record the new point to pointHistory\\n        // This would be the latest point for global epoch\\n        pointHistory.push(_lastPoint);\\n\\n        if (_address != address(0)) {\\n            // Schedule the slope changes (slope is going downward)\\n            // We substract _newSlopeDelta from `_newLocked.end`\\n            // and add _prevSlopeDelta to `_prevLocked.end`\\n            if (_prevLocked.end > block.timestamp) {\\n                // _prevSlopeDelta was <something> - _userPrevPoint.slope, so we offset that first\\n                _prevSlopeDelta = _prevSlopeDelta + _userPrevPoint.slope;\\n                if (_newLocked.end == _prevLocked.end) {\\n                    // Handle the new deposit. Not increasing lock.\\n                    _prevSlopeDelta = _prevSlopeDelta - _userNewPoint.slope;\\n                }\\n                slopeChanges[_prevLocked.end] = _prevSlopeDelta;\\n            }\\n            if (_newLocked.end > block.timestamp) {\\n                if (_newLocked.end > _prevLocked.end) {\\n                    // At this line, the old slope should gone\\n                    _newSlopeDelta = _newSlopeDelta - _userNewPoint.slope;\\n                    slopeChanges[_newLocked.end] = _newSlopeDelta;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Trigger global checkpoint\\n    function checkpoint() external {\\n        LockedBalance memory empty = LockedBalance({amount: 0, end: 0});\\n        _checkpoint(address(0), empty, empty);\\n    }\\n\\n    function syncFromCakePool() external onlyNotInitialized {\\n        initialization[msg.sender] = true;\\n        (, , , , , uint256 lockEndTime, , , uint256 lockedAmount) = CakePool.userInfo(msg.sender);\\n\\n        if (lockedAmount > 0 && lockEndTime > block.timestamp) {\\n            userPrevLockedAmount[msg.sender] = lockedAmount;\\n            LockedBalance memory prevLocked = LockedBalance({amount: 0, end: 0});\\n\\n            LockedBalance memory newLocked = LockedBalance({\\n                amount: SafeCast.toInt128(int256(lockedAmount)),\\n                end: _timestampToFloorWeek(lockEndTime)\\n            });\\n\\n            _checkpoint(msg.sender, prevLocked, newLocked);\\n        }\\n\\n        emit Sync(msg.sender, lockedAmount);\\n    }\\n\\n    struct DepositCache {\\n        uint256 shares;\\n        uint256 cakeAtLastUserAction;\\n        uint256 lockStartTime;\\n        uint256 lockEndTime;\\n        uint256 userBoostedShare;\\n        bool locked;\\n        uint256 lockedAmount;\\n        uint256 cakePoolAvailable;\\n    }\\n\\n    /// @notice Deposit in cake pool\\n    /// @param _user user address\\n    /// @param _amount: number of tokens to deposit (in CAKE)\\n    /// @param _lockDuration: Token lock duration\\n    function deposit(\\n        address _user,\\n        uint256 _amount,\\n        uint256 _lockDuration\\n    ) external onlyCakePool {\\n        if (initialization[_user]) {\\n            DepositCache memory cache;\\n            (\\n                cache.shares,\\n                ,\\n                cache.cakeAtLastUserAction,\\n                ,\\n                cache.lockStartTime,\\n                cache.lockEndTime,\\n                cache.userBoostedShare,\\n                cache.locked,\\n                cache.lockedAmount\\n            ) = CakePool.userInfo(_user);\\n            LockedBalance memory prevLocked = LockedBalance({\\n                amount: SafeCast.toInt128(int256(userPrevLockedAmount[_user])),\\n                end: _timestampToFloorWeek(cache.lockEndTime)\\n            });\\n\\n            uint256 totalShares = CakePool.totalShares();\\n            uint256 totalBoostDebt = CakePool.totalBoostDebt();\\n            cache.cakePoolAvailable = CakePool.available();\\n\\n            // need to calculate pendding cake when harvest\\n            uint256 pendingCake = MasterchefV2.pendingCake(CakePoolPID, address(CakePool));\\n            if (pendingCake > 0) {\\n                cache.cakePoolAvailable += pendingCake;\\n            }\\n\\n            // simulate CakePool.updateUserShare() function\\n            if (cache.shares > 0) {\\n                if (cache.locked) {\\n                    // Calculate the user's current token amount and update related parameters.\\n                    uint256 currentAmount = ((cache.cakePoolAvailable + totalBoostDebt) * (cache.shares)) /\\n                        totalShares -\\n                        cache.userBoostedShare;\\n                    totalBoostDebt -= cache.userBoostedShare;\\n                    cache.userBoostedShare = 0;\\n                    totalShares -= cache.shares;\\n                    //Charge a overdue fee after the free duration has expired.\\n                    if (\\n                        !CakePool.freeOverdueFeeUsers(_user) &&\\n                        ((cache.lockEndTime + UNLOCK_FREE_DURATION) < block.timestamp)\\n                    ) {\\n                        uint256 earnAmount = currentAmount - cache.lockedAmount;\\n                        uint256 overdueDuration = block.timestamp - cache.lockEndTime - UNLOCK_FREE_DURATION;\\n                        if (overdueDuration > DURATION_FACTOR_OVERDUE) {\\n                            overdueDuration = DURATION_FACTOR_OVERDUE;\\n                        }\\n                        // Rates are calculated based on the user's overdue duration.\\n                        uint256 overdueWeight = (overdueDuration * CakePool.overdueFee()) / DURATION_FACTOR_OVERDUE;\\n                        uint256 currentOverdueFee = (earnAmount * overdueWeight) / PRECISION_FACTOR;\\n                        cache.cakePoolAvailable -= currentOverdueFee;\\n\\n                        currentAmount -= currentOverdueFee;\\n                    }\\n                    // Recalculate the user's share.\\n                    uint256 currentShares;\\n                    if (totalShares != 0) {\\n                        currentShares =\\n                            (currentAmount * totalShares) /\\n                            ((cache.cakePoolAvailable + totalBoostDebt) - currentAmount);\\n                    } else {\\n                        currentShares = currentAmount;\\n                    }\\n                    cache.shares = currentShares;\\n                    totalShares += currentShares;\\n                    // After the lock duration, update related parameters.\\n                    if (cache.lockEndTime < block.timestamp) {\\n                        cache.locked = false;\\n                        cache.lockStartTime = 0;\\n                        cache.lockEndTime = 0;\\n                        cache.lockedAmount = 0;\\n                    }\\n                } else if (!CakePool.freePerformanceFeeUsers(_user)) {\\n                    // Calculate Performance fee.\\n                    uint256 totalAmount = (cache.shares * (cache.cakePoolAvailable + totalBoostDebt)) / totalShares;\\n                    totalShares -= cache.shares;\\n                    cache.shares = 0;\\n                    uint256 earnAmount = totalAmount - cache.cakeAtLastUserAction;\\n                    uint256 feeRate = CakePool.performanceFee();\\n                    if (_isContract(_user)) {\\n                        feeRate = CakePool.performanceFeeContract();\\n                    }\\n                    uint256 currentPerformanceFee = (earnAmount * feeRate) / 10000;\\n                    if (currentPerformanceFee > 0) {\\n                        cache.cakePoolAvailable -= currentPerformanceFee;\\n\\n                        totalAmount -= currentPerformanceFee;\\n                    }\\n                    // Recalculate the user's share.\\n                    uint256 newShares;\\n                    if (totalShares != 0) {\\n                        newShares =\\n                            (totalAmount * totalShares) /\\n                            ((cache.cakePoolAvailable + totalBoostDebt) - totalAmount);\\n                    } else {\\n                        newShares = totalAmount;\\n                    }\\n                    cache.shares = newShares;\\n                    totalShares += newShares;\\n                }\\n            }\\n\\n            // Update lock duration.\\n            if (_lockDuration > 0) {\\n                if (cache.lockEndTime < block.timestamp) {\\n                    cache.lockStartTime = block.timestamp;\\n                    cache.lockEndTime = block.timestamp + _lockDuration;\\n                } else {\\n                    cache.lockEndTime += _lockDuration;\\n                }\\n                cache.locked = true;\\n            }\\n\\n            // Calculate lock funds\\n            if (cache.shares > 0 && cache.locked) {\\n                // Update lock amount\\n                if (cache.lockStartTime == block.timestamp) {\\n                    cache.lockedAmount = ((cache.cakePoolAvailable + totalBoostDebt) * cache.shares) / totalShares;\\n                }\\n            }\\n\\n            // Calculate the boost weight share.\\n            if (cache.lockEndTime > cache.lockStartTime) {\\n                cache.lockedAmount += _amount;\\n            }\\n\\n            LockedBalance memory newLocked = LockedBalance({\\n                amount: SafeCast.toInt128(int256(cache.lockedAmount)),\\n                end: _timestampToFloorWeek(cache.lockEndTime)\\n            });\\n            userPrevLockedAmount[_user] = cache.lockedAmount;\\n            _checkpoint(_user, prevLocked, newLocked);\\n        }\\n    }\\n\\n    /// @notice Withdraw in cake pool\\n    /// @param _user user address\\n    function withdraw(address _user) external onlyCakePool {\\n        if (initialization[_user]) {\\n            (, , , , , uint256 lockEndTime, , , uint256 lockedAmount) = CakePool.userInfo(_user);\\n            LockedBalance memory prevLocked = LockedBalance({\\n                amount: SafeCast.toInt128(int256(lockedAmount)),\\n                end: _timestampToFloorWeek(lockEndTime)\\n            });\\n\\n            LockedBalance memory newLocked = LockedBalance({amount: 0, end: 0});\\n            userPrevLockedAmount[_user] = 0;\\n\\n            _checkpoint(_user, prevLocked, newLocked);\\n        }\\n    }\\n\\n    /// @notice Do Binary Search to find out block timestamp for block number\\n    /// @param _blockNumber The block number to find timestamp\\n    /// @param _maxEpoch No beyond this timestamp\\n    function _findBlockEpoch(uint256 _blockNumber, uint256 _maxEpoch) internal view returns (uint256) {\\n        uint256 _min = 0;\\n        uint256 _max = _maxEpoch;\\n        // Loop for 128 times -> enough for 128-bit numbers\\n        for (uint256 i = 0; i < 128; i++) {\\n            if (_min >= _max) {\\n                break;\\n            }\\n            uint256 _mid = (_min + _max + 1) / 2;\\n            if (pointHistory[_mid].blockNumber <= _blockNumber) {\\n                _min = _mid;\\n            } else {\\n                _max = _mid - 1;\\n            }\\n        }\\n        return _min;\\n    }\\n\\n    /// @notice Do Binary Search to find the most recent user point history preceeding block\\n    /// @param _user The address of user to find\\n    /// @param _blockNumber Find the most recent point history before this block number\\n    function _findUserBlockEpoch(address _user, uint256 _blockNumber) internal view returns (uint256) {\\n        uint256 _min = 0;\\n        uint256 _max = userPointEpoch[_user];\\n        for (uint256 i = 0; i < 128; i++) {\\n            if (_min >= _max) {\\n                break;\\n            }\\n            uint256 _mid = (_min + _max + 1) / 2;\\n            if (userPointHistory[_user][_mid].blockNumber <= _blockNumber) {\\n                _min = _mid;\\n            } else {\\n                _max = _mid - 1;\\n            }\\n        }\\n        return _min;\\n    }\\n\\n    /// @notice Round off random timestamp to week\\n    /// @param _timestamp The timestamp to be rounded off\\n    function _timestampToFloorWeek(uint256 _timestamp) internal pure returns (uint256) {\\n        return (_timestamp / WEEK) * WEEK;\\n    }\\n\\n    /// @notice Calculate total supply of VCake (voting power)\\n    function totalSupply() external view returns (uint256) {\\n        return _totalSupplyAt(pointHistory[epoch], block.timestamp);\\n    }\\n\\n    /// @notice Calculate total supply of VCake at specific block\\n    /// @param _blockNumber The specific block number to calculate totalSupply\\n    function totalSupplyAt(uint256 _blockNumber) external view returns (uint256) {\\n        require(_blockNumber <= block.number, \\\"bad _blockNumber\\\");\\n        uint256 _epoch = epoch;\\n        uint256 _targetEpoch = _findBlockEpoch(_blockNumber, _epoch);\\n\\n        Point memory _point = pointHistory[_targetEpoch];\\n        uint256 _timeDelta = 0;\\n        if (_targetEpoch < _epoch) {\\n            Point memory _nextPoint = pointHistory[_targetEpoch + 1];\\n            if (_point.blockNumber != _nextPoint.blockNumber) {\\n                _timeDelta =\\n                    ((_blockNumber - _point.blockNumber) * (_nextPoint.timestamp - _point.timestamp)) /\\n                    (_nextPoint.blockNumber - _point.blockNumber);\\n            }\\n        } else {\\n            if (_point.blockNumber != block.number) {\\n                _timeDelta =\\n                    ((_blockNumber - _point.blockNumber) * (block.timestamp - _point.timestamp)) /\\n                    (block.number - _point.blockNumber);\\n            }\\n        }\\n\\n        return _totalSupplyAt(_point, _point.timestamp + _timeDelta);\\n    }\\n\\n    /// @notice Calculate total supply of VCake (voting power) at some point in the past\\n    /// @param _point The point to start to search from\\n    /// @param _timestamp The timestamp to calculate the total voting power at\\n    function _totalSupplyAt(Point memory _point, uint256 _timestamp) internal view returns (uint256) {\\n        Point memory _lastPoint = _point;\\n        uint256 _weekCursor = _timestampToFloorWeek(_point.timestamp);\\n        // Iterate through weeks to take slopChanges into the account\\n        for (uint256 i = 0; i < 255; i++) {\\n            _weekCursor = _weekCursor + WEEK;\\n            int128 _slopeDelta = 0;\\n            if (_weekCursor > _timestamp) {\\n                // If _weekCursor goes beyond _timestamp -> leave _slopeDelta\\n                // to be 0 as there is no more slopeChanges\\n                _weekCursor = _timestamp;\\n            } else {\\n                // If _weekCursor still behind _timestamp, then _slopeDelta\\n                // should be taken into the account.\\n                _slopeDelta = slopeChanges[_weekCursor];\\n            }\\n            // Update bias at _weekCursor\\n            _lastPoint.bias =\\n                _lastPoint.bias -\\n                (_lastPoint.slope * SafeCast.toInt128(int256(_weekCursor - _lastPoint.timestamp)));\\n            if (_weekCursor == _timestamp) {\\n                break;\\n            }\\n            // Update slope and timestamp\\n            _lastPoint.slope = _lastPoint.slope + _slopeDelta;\\n            _lastPoint.timestamp = _weekCursor;\\n        }\\n\\n        if (_lastPoint.bias < 0) {\\n            _lastPoint.bias = 0;\\n        }\\n\\n        return SafeCast.toUint256(_lastPoint.bias);\\n    }\\n\\n    /**\\n     * @notice Checks if address is a contract\\n     */\\n    function _isContract(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size > 0;\\n    }\\n\\n    /// @notice Remove user initialization status.\\n    /// @dev Avoid issues caused by _checkpoint, causing user assets to be stuck.\\n    /// @param _users The array of addresses.\\n    function removeUserInitialization(address[] calldata _users) external onlyOwner {\\n        for (uint256 i = 0; i < _users.length; i++) {\\n            initialization[_users[i]] = false;\\n            emit RemoveUserInitialization(_users[i]);\\n        }\\n    }\\n\\n    /// @notice Set MAX_LOCK\\n    /// @dev Only callable by the contract admin.\\n    /// @param _maxLock Max lock duration.\\n    function setMaxLock(uint256 _maxLock) external onlyOwner {\\n        MAX_LOCK = _maxLock;\\n        emit NewMaxLock(_maxLock);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-4.5.0/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-4.5.0/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICakePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface ICakePool {\\n    struct UserInfo {\\n        uint256 shares; // number of shares for a user.\\n        uint256 lastDepositedTime; // keep track of deposited time for potential penalty.\\n        uint256 cakeAtLastUserAction; // keep track of cake deposited at the last user action.\\n        uint256 lastUserActionTime; // keep track of the last user action time.\\n        uint256 lockStartTime; // lock start time.\\n        uint256 lockEndTime; // lock end time.\\n        uint256 userBoostedShare; // boost share, in order to give the user higher reward. The user only enjoys the reward, so the principal needs to be recorded as a debt.\\n        bool locked; //lock status.\\n        uint256 lockedAmount; // amount deposited during lock period.\\n    }\\n\\n    function userInfo(address user)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            uint256\\n        );\\n\\n    function freePerformanceFeeUsers(address user) external view returns (bool);\\n\\n    function freeWithdrawFeeUsers(address user) external view returns (bool);\\n\\n    function freeOverdueFeeUsers(address user) external view returns (bool);\\n\\n    function getPricePerFullShare() external view returns (uint256);\\n\\n    function overdueFee() external view returns (uint256);\\n\\n    function performanceFee() external view returns (uint256);\\n\\n    function performanceFeeContract() external view returns (uint256);\\n\\n    function totalShares() external view returns (uint256);\\n\\n    function totalBoostDebt() external view returns (uint256);\\n\\n    function balanceOf() external view returns (uint256);\\n\\n    function available() external view returns (uint256);\\n\\n    function BOOST_WEIGHT() external view returns (uint256);\\n\\n    function MAX_LOCK_DURATION() external view returns (uint256);\\n\\n    function deposit(uint256 _amount, uint256 _lockDuration) external;\\n\\n    function withdrawByAmount(uint256 _amount) external;\\n\\n    function withdraw(uint256 _shares) external;\\n\\n    function withdrawAll() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMasterChefV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IMasterChefV2 {\\n    function pendingCake(uint256 _pid, address _user) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-4.5.0/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-4.5.0/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-4.5.0/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 99999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract ICakePool\",\"name\":\"_cakePool\",\"type\":\"address\"},{\"internalType\":\"contract IMasterChefV2\",\"name\":\"_masterchefV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxLock\",\"type\":\"uint256\"}],\"name\":\"NewMaxLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"RemoveUserInitialization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"}],\"name\":\"Sync\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CakePool\",\"outputs\":[{\"internalType\":\"contract ICakePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CakePoolPID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DURATION_FACTOR_OVERDUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_LOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MasterchefV2\",\"outputs\":[{\"internalType\":\"contract IMasterChefV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNLOCK_FREE_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WEEK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockDuration\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"initialization\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pointHistory\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"bias\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"slope\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"removeUserInitialization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxLock\",\"type\":\"uint256\"}],\"name\":\"setMaxLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slopeChanges\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syncFromCakePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userPointEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userPointHistory\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"bias\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"slope\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userPrevLockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "VCake", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "99999", "ConstructorArguments": "00000000000000000000000045c54210128a065de780c4b0df3d16664f7f859e000000000000000000000000a5f8c5dbd5f286960b9d90548680ae5ebff076520000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}