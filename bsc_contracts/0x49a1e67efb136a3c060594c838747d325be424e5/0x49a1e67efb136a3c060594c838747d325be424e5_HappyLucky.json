{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-06-09\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, 'SafeMath: addition overflow');\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, 'SafeMath: subtraction overflow');\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, 'SafeMath: multiplication overflow');\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, 'SafeMath: division by zero');\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, 'SafeMath: modulo by zero');\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint256 x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ninterface IBEP20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function getOwner() external view returns (address);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract HappyLucky is Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    \r\n    IBEP20 public USDT = IBEP20(0x55d398326f99059fF775485246999027B3197955);\r\n\r\n    uint256 public VOTE_AMOUNT = 15;\r\n    uint256 public JOIN_AMOUNT = 5;\r\n\r\n    struct UserInfo {\r\n        uint256 balance;\r\n        uint256 package;\r\n        uint256 joinAt;\r\n        bool isJoin;\r\n        uint256 numberOfVote;\r\n        uint256 voteAmount; \r\n    }\r\n\r\n    mapping(address => UserInfo) public userInfo;\r\n\r\n    event RescueFundsUSDT(address indexed owner, address to);\r\n    event AddUser(address indexed owner, address account, uint256 _balance, uint256 _package, uint256 _joinAt, bool _isJoin, uint256 _numberOfVote, uint256 _voteAmount);\r\n    event RemoveUserInfo(address indexed owner, address account);\r\n    event Vote(address indexed owner, address f1);\r\n    event Vote2(address indexed owner, address f1, address f2, address f3, address f4, address f5, address f6);\r\n\r\n    // VIEWS\r\n    function balanceUSDT() public view returns(uint256) {\r\n        return USDT.balanceOf(address(this));\r\n    }\r\n\r\n    function balanceUSDTOfUser(address account) public view returns(uint256) {\r\n        return USDT.balanceOf(account);\r\n    }\r\n\r\n    // OWNER\r\n    function addUser(address account, uint256 _balance, uint256 _package, uint256 _joinAt, bool _isJoin, uint256 _numberOfVote, uint256 _voteAmount) external onlyOwner {\r\n        userInfo[account].balance = _balance;\r\n        userInfo[account].package = _package;\r\n        userInfo[account].joinAt = _joinAt;\r\n        userInfo[account].isJoin = _isJoin;\r\n        userInfo[account].numberOfVote = _numberOfVote;\r\n        userInfo[account].voteAmount = _voteAmount;\r\n\r\n        emit AddUser(msg.sender, account, _balance, _package, _joinAt, _isJoin, _numberOfVote, _voteAmount);\r\n    }\r\n\r\n    function removeUserInfo(address account) external onlyOwner {\r\n        delete userInfo[account];\r\n\r\n        emit RemoveUserInfo(msg.sender, account);\r\n    }\r\n\r\n    function rescueFundsUSDT(address to) external onlyOwner {\r\n        uint256 bal = balanceUSDT();\r\n        require(bal > 0, \"dont have a USDT\");\r\n        USDT.transfer(to, bal);\r\n\r\n        emit RescueFundsUSDT(msg.sender, to);\r\n    }\r\n\r\n    function setToken(uint8 tag,address value) public onlyOwner returns(bool) {\r\n        if(tag == 1) {\r\n            USDT = IBEP20(value);\r\n        }\r\n        \r\n        return true;\r\n    }\r\n\r\n    function set(uint8 tag,uint256 value) public onlyOwner returns(bool) {\r\n        if(tag == 1){\r\n            JOIN_AMOUNT = value;\r\n        } else if(tag == 2){\r\n            VOTE_AMOUNT = value;\r\n        }\r\n        \r\n        return true;\r\n    }\r\n\r\n    /* --EXTERNAL-- */\r\n\r\n    function vote(address f1) public nonReentrant returns(bool) {\r\n        require(msg.sender != address(0), \"account must not zero address\");\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        require(user.isJoin == true, \"account havent join\");\r\n\r\n        if(f1 != address(0) && msg.sender != f1){\r\n            user.numberOfVote = user.numberOfVote.add(1);\r\n            user.voteAmount = user.voteAmount.add(VOTE_AMOUNT.mul(10**18));\r\n\r\n            UserInfo storage userF1 = userInfo[f1];\r\n            userF1.balance = userF1.balance.add(VOTE_AMOUNT.mul(10**18));\r\n\r\n            USDT.transferFrom(msg.sender, f1, VOTE_AMOUNT.mul(10**18));\r\n        }\r\n\r\n        emit Vote(msg.sender, f1);\r\n        return true;\r\n    }\r\n\r\n    function vote2(address f1, address f2, address f3, address f4, address f5, address f6) public nonReentrant returns(bool) {\r\n        require(msg.sender != address(0), \"account must not zero address\");\r\n        UserInfo storage user = userInfo[msg.sender];\r\n\r\n        if(user.isJoin == false) {\r\n            user.package = 2;\r\n            user.balance = user.balance.add(JOIN_AMOUNT.mul(10**18));\r\n            user.joinAt = block.timestamp;\r\n            user.isJoin = true;\r\n            user.numberOfVote = 0;\r\n            user.voteAmount = 0;\r\n\r\n            USDT.transferFrom(msg.sender, address(this), JOIN_AMOUNT.mul(10**18));\r\n        }\r\n\r\n        if(f1 != address(0) && msg.sender != f1){\r\n            user.numberOfVote = user.numberOfVote.add(1);\r\n            user.voteAmount = user.voteAmount.add(VOTE_AMOUNT.mul(10**18));\r\n\r\n            UserInfo storage userF1 = userInfo[f1];\r\n            userF1.balance = userF1.balance.add(VOTE_AMOUNT.mul(10**18));\r\n\r\n            USDT.transferFrom(msg.sender, f1, VOTE_AMOUNT.mul(10**18));\r\n        }\r\n        if(f2 != address(0) && msg.sender != f2) {\r\n            user.numberOfVote = user.numberOfVote.add(1);\r\n            user.voteAmount = user.voteAmount.add(VOTE_AMOUNT.mul(10**18));\r\n\r\n            UserInfo storage userF2 = userInfo[f2];\r\n            userF2.balance = userF2.balance.add(VOTE_AMOUNT.mul(10**18));\r\n\r\n            USDT.transferFrom(msg.sender, f2, VOTE_AMOUNT.mul(10**18));\r\n        }\r\n        if(f3 != address(0) && msg.sender != f3) {\r\n            user.numberOfVote = user.numberOfVote.add(1);\r\n            user.voteAmount = user.voteAmount.add(VOTE_AMOUNT.mul(10**18));\r\n\r\n            UserInfo storage userF3 = userInfo[f3];\r\n            userF3.balance = userF3.balance.add(VOTE_AMOUNT.mul(10**18));\r\n\r\n            USDT.transferFrom(msg.sender, f3, VOTE_AMOUNT.mul(10**18));\r\n        }\r\n        if(f4 != address(0) && msg.sender != f4) {\r\n            user.numberOfVote = user.numberOfVote.add(1);\r\n            user.voteAmount = user.voteAmount.add(VOTE_AMOUNT.mul(10**18));\r\n\r\n            UserInfo storage userF4 = userInfo[f4];\r\n            userF4.balance = userF4.balance.add(VOTE_AMOUNT.mul(10**18));\r\n\r\n            USDT.transferFrom(msg.sender, f4, VOTE_AMOUNT.mul(10**18));\r\n        }\r\n        if(f5 != address(0) && msg.sender != f5) {\r\n            user.numberOfVote = user.numberOfVote.add(1);\r\n            user.voteAmount = user.voteAmount.add(VOTE_AMOUNT.mul(10**18));\r\n\r\n            UserInfo storage userF5 = userInfo[f5];\r\n            userF5.balance = userF5.balance.add(VOTE_AMOUNT.mul(10**18));\r\n\r\n            USDT.transferFrom(msg.sender, f5, VOTE_AMOUNT.mul(10**18));\r\n        }\r\n        if(f6 != address(0) && msg.sender != f6) {\r\n            user.numberOfVote = user.numberOfVote.add(1);\r\n            user.voteAmount = user.voteAmount.add(VOTE_AMOUNT.mul(10**18));\r\n\r\n            UserInfo storage userF6 = userInfo[f6];\r\n            userF6.balance = userF6.balance.add(VOTE_AMOUNT.mul(10**18));\r\n\r\n            USDT.transferFrom(msg.sender, f6, VOTE_AMOUNT.mul(10**18));\r\n        }\r\n\r\n        emit Vote2(msg.sender, f1, f2, f3, f4, f5, f6);\r\n        return true;\r\n    }\r\n    \r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_package\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_joinAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isJoin\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_numberOfVote\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_voteAmount\",\"type\":\"uint256\"}],\"name\":\"AddUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveUserInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"RescueFundsUSDT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"f1\",\"type\":\"address\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"f1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"f2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"f3\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"f4\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"f5\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"f6\",\"type\":\"address\"}],\"name\":\"Vote2\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"JOIN_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VOTE_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_package\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_joinAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isJoin\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_numberOfVote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_voteAmount\",\"type\":\"uint256\"}],\"name\":\"addUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceUSDTOfUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeUserInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"rescueFundsUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tag\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tag\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"package\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"joinAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isJoin\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"numberOfVote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"voteAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"f1\",\"type\":\"address\"}],\"name\":\"vote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"f1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"f2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"f3\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"f4\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"f5\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"f6\",\"type\":\"address\"}],\"name\":\"vote2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "HappyLucky", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5568efbb37b017faa07bf18bf5a101ce64912fc9cca47c0d0a40a05db7bd2831"}