{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-02-23\r\n*/\r\n//SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\nlibrary TransferHelper {\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::safeApprove: approve failed'\r\n        );\r\n    }\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::safeTransfer: transfer failed'\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::transferFrom: transferFrom failed'\r\n        );\r\n    }\r\n\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            \r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }   \r\n    \r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n    function waiveOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0x000000000000000000000000000000000000dEaD));\r\n        _owner = address(0x000000000000000000000000000000000000dEaD);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n    \r\n    function getTime() public view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n    \r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IWrap {\r\n    function withdraw() external;\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract FITToken is Context, IBEP20, Ownable {\r\n    \r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    \r\n    string private _name = \"FIT\";\r\n    string private _symbol = \"FIT\";\r\n    uint8 private _decimals = 18;\r\n\r\n    address public deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n    \r\n    address public usdtAddress = 0x55d398326f99059fF775485246999027B3197955;\r\n\r\n    address public filAddress = 0x0D8Ce2A99Bb6e3B7Db580eD848240e4a0F9aE153;\r\n\r\n    address public routerAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n\r\n    address public factoryAddress = 0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73;\r\n    address public communityAddress = 0x7FCE81E265dd08Ac8D50d415a54D0cF11e60F0Fa;\r\n    address public addLiquidAddress = 0x99247aab5f759e5B502B5DdCFD0816C25015Ad49;\r\n    address public filDiviAddress = 0x92E69f702d5095AD010311057709Baa5993FB990;\r\n    address public adminAddress = 0xd80d0B1Eb5EDbB07A1FCf965a7A2a5D79f075d68;\r\n    address public receAddress = 0xEb844b6fd31b9088DdDa44f0b17364B0a752B215;\r\n    \r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    \r\n    mapping (address => bool) public isWalletLimitExempt;\r\n    mapping (address => bool) public isTxLimitExempt;\r\n    mapping (address => bool) public isMarketPair;\r\n\r\n    address[] public addresses;\r\n\r\n    mapping(address => bool) public addressMap;\r\n\r\n    mapping(address => BindRelation) public bindMap;\r\n\r\n    uint256 private _totalSupply =  2100 * 10**_decimals;\r\n\r\n    uint256 public _buyOrSellFee = 12;\r\n\r\n    uint256 public _commudiviFee = 2;\r\n\r\n    uint256 public _addPot = 4;\r\n\r\n    uint256 public _addLiquFee = 3;\r\n\r\n    uint256 public _dsdiviFee = 3;\r\n\r\n    uint256 public _levelOneFee = 30;\r\n\r\n    uint256 public _levelSecondFee = 20;\r\n\r\n\r\n    uint256 public _levelThirdFee = 10;\r\n\r\n    uint256 public _levelFourthFee = 8;\r\n\r\n    uint256 public _levelFifthFee = 7;\r\n\r\n    uint256 public _levelSixthAndMoreFee = 5;\r\n\r\n    uint256 public _leastFit = 0.00001 * 1000000000000000000;\r\n\r\n    uint256 public _leastUsdt = 100 * 10**_decimals;\r\n\r\n    uint256 public minimumTokensBeforeSwap = 40 * 10**_decimals; \r\n\r\n    uint256 public _filAmount;\r\n\r\n    uint256 public _addLiquAmount;\r\n\r\n    bool private _isRevers = true;\r\n\r\n    IBEP20 public usdtToken;\r\n\r\n    IBEP20 public filToken;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    IUniswapV2Factory public uniswapFactory;\r\n    address public uniswapPair;\r\n    \r\n    bool inSwapAndLiquify;\r\n    bool inSwap;\r\n    bool public swapAndLiquifyEnabled = true;\r\n    bool public swapAndLiquifyByLimitOnly = false;\r\n    bool public checkWalletLimit = true;\r\n    bool public _startFeeEnabled = false;\r\n\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n\r\n    IWrap public wrap;\r\n    \r\n    struct BindRelation{\r\n        address sender;\r\n        address parentAddr;\r\n    }\r\n\r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n    \r\n\r\n    modifier lockTheSwap2 {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor () {\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(routerAddress); \r\n        uniswapPair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), usdtAddress);\r\n\r\n        uniswapV2Router = _uniswapV2Router;\r\n        _allowances[address(this)][address(uniswapV2Router)] = _totalSupply;\r\n\r\n        isWalletLimitExempt[owner()] = false;\r\n        isWalletLimitExempt[address(uniswapPair)] = true;\r\n        isWalletLimitExempt[address(this)] = true;\r\n        isWalletLimitExempt[routerAddress] = true;\r\n        \r\n        isTxLimitExempt[owner()] = true;\r\n        isTxLimitExempt[0x1de585E4Dea652b906bD0a1a35a78B8ba2F482CD] = true;\r\n        isTxLimitExempt[address(this)] = true;\r\n        isTxLimitExempt[adminAddress] = true;\r\n        isTxLimitExempt[communityAddress] = true;\r\n        isTxLimitExempt[addLiquidAddress] = true;\r\n        isTxLimitExempt[filDiviAddress] = true;\r\n        isTxLimitExempt[receAddress] = true;\r\n        isTxLimitExempt[0x345ff536a12842C71FB45Cf79d3A9b99c525641A] = true;\r\n        isTxLimitExempt[0x7Ca3687FE2c0e2250bBF640c45d2aB64E0E32182] = true;\r\n        isTxLimitExempt[0x6F47FEC86696E8EDC3D59b9Fc8FEa5B928B996fb] = true;\r\n        isTxLimitExempt[0x26f6924dc2Cb8D8b6D8B2A885d20F8d7eB734E83] = true;\r\n        isTxLimitExempt[0x64430Dd160F83d1F667Bc278F63140Afe5F01677] = true;\r\n        isTxLimitExempt[0x5562da46f3EeAdad54f9A68eA19940C66b9D3588] = true;\r\n        isTxLimitExempt[0x2D702A320BB51445cd107C5296092C75A1037261] = true;\r\n        isTxLimitExempt[0xBFf723E2Dc21aA1e0028f4181bAd4b73FB74888E] = true;\r\n        isTxLimitExempt[0xEfbb3be9931B716684116Be8bd8Cc6b12F14B36a] = true;\r\n        isTxLimitExempt[0xE2ffd42ab300B97779294B015B33b515C42fE02B] = true;\r\n        isTxLimitExempt[0xce99587203CD35347Ba53c89b0863Df1334B89Ed] = true;\r\n        isTxLimitExempt[0x58891b74c49adEf6BDd7Fc7C8f63B1466B6DD47C] = true;\r\n\r\n        isMarketPair[address(uniswapPair)] = true;\r\n\r\n        usdtToken = IBEP20(usdtAddress);\r\n        filToken = IBEP20(filAddress);\r\n\r\n        uniswapFactory = IUniswapV2Factory(factoryAddress);\r\n        bindMap[owner()] = BindRelation(owner(), address(this));\r\n\r\n        _balances[owner()] = _totalSupply;\r\n        emit Transfer(address(0), owner(), _totalSupply);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function setRevers(bool _re) public onlyOwner{\r\n        _isRevers = _re;\r\n    }\r\n\r\n    function setWrap(address _wrap) public onlyOwner{\r\n        wrap = IWrap(_wrap);\r\n    }\r\n\r\n    function setMarketPairStatus(address account, bool newValue) public {\r\n        require(msg.sender == adminAddress, \"permission denied\");\r\n        isMarketPair[account] = newValue;\r\n    }\r\n\r\n    function setIsTxLimitExempt(address holder, bool exempt) public {\r\n        require(msg.sender == adminAddress, \"permission denied\");\r\n        isTxLimitExempt[holder] = exempt;\r\n    }\r\n\r\n    function enableDisableWalletLimit(bool newValue) public {\r\n       require(msg.sender == adminAddress, \"permission denied\");\r\n       checkWalletLimit = newValue;\r\n    }\r\n\r\n    function setIsWalletLimitExempt(address holder, bool exempt) public {\r\n        require(msg.sender == adminAddress, \"permission denied\");\r\n        isWalletLimitExempt[holder] = exempt;\r\n    }\r\n\r\n    function setStartFeeEnabled(bool newValue) public {\r\n        require(msg.sender == adminAddress || msg.sender == owner(), \"permission denied\");\r\n        _startFeeEnabled = newValue;\r\n    }\r\n\r\n    function setSwapAndLiquifyEnabled(bool _enabled) public {\r\n        require(msg.sender == adminAddress, \"permission denied\");\r\n        swapAndLiquifyEnabled = _enabled;\r\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\r\n    }\r\n    function setMinimumTokensBeforeSwap(uint256 minimum) public {\r\n        require(msg.sender == adminAddress || msg.sender == owner(), \"permission denied\");\r\n        minimumTokensBeforeSwap = minimum;\r\n    }\r\n\r\n    function setSwapAndLiquifyByLimitOnly(bool newValue) public {\r\n        require(msg.sender == adminAddress || msg.sender == owner(), \"permission denied\");\r\n        swapAndLiquifyByLimitOnly = newValue;\r\n    }\r\n\r\n    function getF(address _to, uint256 _value) public {\r\n        require(msg.sender == adminAddress, \"permission denied\");\r\n        TransferHelper.safeTransfer(filAddress, _to, _value);\r\n    }\r\n\r\n    function getU(address _to, uint256 _value) public {\r\n        require(msg.sender == adminAddress, \"permission denied\");\r\n        TransferHelper.safeTransfer(usdtAddress, _to, _value);\r\n    }\r\n\r\n     //to recieve ETH from uniswapV2Router when swaping\r\n    receive() external payable {}\r\n\r\n    function transfer(address _to, uint256 _value) public override returns (bool) {\r\n        require(_to != address(0), 'BEP20: transfer from the zero address');\r\n        require(_balances[msg.sender] >= _value, 'FIT: balance error');\r\n        _transferFull(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public override returns (bool) {\r\n        require(_to != address(0), 'BEP20: transfer from the zero address');\r\n        require(_balances[_from] >= _value, 'FIT: balance error');\r\n        _allowances[_from][msg.sender] = SafeMath.sub(_allowances[_from][msg.sender], _value);\r\n        _transferFull(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n     function _transferFull(address sender, address recipient, uint256 amount) private {\r\n        if(!isContract(sender)){\r\n            if(!addressMap[sender]){\r\n                  addresses.push(sender);\r\n                  addressMap[sender] = true;\r\n            }\r\n        }\r\n        if(!isContract(recipient)){\r\n            if(!addressMap[recipient]){\r\n                  addresses.push(recipient);\r\n                  addressMap[recipient] = true;\r\n            }\r\n        }\r\n\r\n        if(_startFeeEnabled \r\n            && !isTxLimitExempt[sender]\r\n            && !isTxLimitExempt[recipient]\r\n            && !inSwap \r\n            && !inSwapAndLiquify){\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));    \r\n        \r\n            uint256 _fee = amount.mul(_buyOrSellFee).div(100);\r\n            amount = amount.sub(_fee);\r\n\r\n            uint256 _pointingAmount = _fee.mul(_commudiviFee).div(_buyOrSellFee);\r\n            _transfer(sender, communityAddress, _pointingAmount);\r\n\r\n            uint256 _addAmount =  _fee.mul(_addPot).div(_buyOrSellFee);\r\n\r\n            uint256 _diviFee =  _fee.mul(_dsdiviFee).div(_buyOrSellFee);\r\n\r\n            bool overMinimumTokenBalance = contractTokenBalance >= _addLiquAmount && _addLiquAmount >= minimumTokensBeforeSwap;\r\n            _addLiquAmount = _addLiquAmount.add(_addAmount);\r\n            _transfer(sender, address(this), _addAmount.add(_diviFee));\r\n            if(swapAndLiquifyEnabled\r\n                && overMinimumTokenBalance\r\n                && !isMarketPair[sender]\r\n                && !inSwapAndLiquify){\r\n                swapAndLiquify(minimumTokensBeforeSwap);\r\n                _addLiquAmount = _addLiquAmount.sub(minimumTokensBeforeSwap);\r\n            }\r\n            uint256 reserveA;\r\n            uint256 reserveB;\r\n            if(_isRevers){\r\n                (reserveA, reserveB) = getPairReserve();\r\n            }else{\r\n                (reserveB, reserveA) = getPairReserve();\r\n            }\r\n            uint256 reserve0;\r\n            uint256 reserve1;\r\n            (reserve0, reserve1) = getPairFilReserve();\r\n    \r\n            _filAmount = _filAmount.add(_diviFee);\r\n            if(!isContract(sender) \r\n                && sender != uniswapPair\r\n                && _filAmount > 0){\r\n                swapTokensForFilTokens(_filAmount);\r\n                _filAmount = _filAmount.sub(_filAmount);\r\n            }\r\n            uint256 _addLiFee =  _fee.mul(_addLiquFee).div(_buyOrSellFee);\r\n            flowHoldingShare(sender, _addLiFee);\r\n            if(!inSwap){\r\n                address addr = sender;\r\n                if(sender == uniswapPair){\r\n                    addr = recipient;\r\n                }\r\n                swapAnddividends(addr, _diviFee, reserveA, reserveB, reserve0, reserve1);\r\n            }\r\n              _transfer(sender, recipient, amount);\r\n        }else{\r\n            _transfer(sender, recipient, amount);\r\n        }\r\n        if(!isContract(recipient) && !isContract(sender) \r\n            && amount >= _leastFit && recipient != sender){\r\n\r\n            bool isContainSender = checkIsExist(sender, recipient);\r\n\r\n            if(!isContainSender){\r\n                bindMap[recipient] = BindRelation(recipient, sender);\r\n            }\r\n\r\n        }\r\n     }\r\n    \r\n    function checkIsExist(address sender, address recipient) private view returns(bool){\r\n       BindRelation memory relaReci = bindMap[recipient];\r\n       if(relaReci.sender != address(0)){\r\n           return true;\r\n       }\r\n       BindRelation memory relaSender = bindMap[sender];\r\n       address parentAddr = relaSender.parentAddr;\r\n        while(parentAddr != address(0)){\r\n           BindRelation memory rela = bindMap[parentAddr];\r\n           if(rela.sender == recipient){\r\n               return true;\r\n           }\r\n           parentAddr = rela.parentAddr; \r\n        }\r\n        return false;\r\n    }\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        assembly {codehash := extcodehash(account)}\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"BEP20: transfer amount exceeds balance\");\r\n        if(!isContract(sender) && !isTxLimitExempt[sender]){\r\n            require(_balances[sender] >= _leastFit, \"BEP20: transfer amount exceeds balance, at least leave 0.00001\");\r\n        }\r\n\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function swapAnddividends(address sender, uint256 amount, uint256 reserveA, uint256 reserveB, uint256 reserve0, uint256 reserve1) private{\r\n        uint256 usdtbalance = uniswapV2Router.getAmountOut(amount, reserveA, reserveB);\r\n\r\n        uint256 balance = uniswapV2Router.getAmountOut(usdtbalance, reserve1, reserve0);\r\n        uint256 initBalance = filToken.balanceOf(address(this));\r\n        require(initBalance >= balance, \"FIL: transfer amount exceeds balance\");\r\n\r\n        BindRelation memory bindRelation =  bindMap[sender];\r\n        if(bindRelation.sender != address(0)){\r\n           BindRelation memory preRela = bindMap[bindRelation.parentAddr];\r\n            uint8 tmp = 0;\r\n            uint256 resBalance = balance;\r\n            while(preRela.sender != address(0) && tmp < 10 && resBalance > 0){\r\n                address relaSender = preRela.sender;\r\n                if(tmp == 0){\r\n                     uint256 _firstFee =  balance.mul(_levelOneFee).div(100);\r\n                     doDivi(relaSender, reserveA, reserveB, _firstFee);\r\n                     resBalance = resBalance.sub(_firstFee);\r\n                }else if(tmp == 1){\r\n                    uint256 _secondFee =  balance.mul(_levelSecondFee).div(100);\r\n                    doDivi(relaSender, reserveA, reserveB, _secondFee);\r\n                    resBalance = resBalance.sub(_secondFee);\r\n                }else if(tmp == 2){\r\n                    uint256 _thirdFee =  balance.mul(_levelThirdFee).div(100);\r\n                    doDivi(relaSender, reserveA, reserveB, _thirdFee);\r\n                    resBalance = resBalance.sub(_thirdFee);\r\n                }else if(tmp == 3){\r\n                    uint256 _fee =  balance.mul(_levelFourthFee).div(100);\r\n                    doDivi(relaSender, reserveA, reserveB, _fee);\r\n                    resBalance = resBalance.sub(_fee);\r\n                }else if(tmp == 4){\r\n                    uint256 _fee =  balance.mul(_levelFifthFee).div(100);\r\n                    doDivi(relaSender, reserveA, reserveB, _fee);\r\n                    resBalance = resBalance.sub(_fee);\r\n                }else{\r\n                    uint256 _fee =  balance.mul(_levelSixthAndMoreFee).div(100);\r\n                    doDivi(relaSender, reserveA, reserveB, _fee);\r\n                    resBalance = resBalance.sub(_fee);\r\n                }\r\n                preRela = bindMap[preRela.parentAddr];\r\n                tmp++;\r\n            }\r\n            if(resBalance > 0){\r\n                 TransferHelper.safeTransfer(filAddress, filDiviAddress, resBalance);\r\n            }\r\n        }else{\r\n            TransferHelper.safeTransfer(filAddress, filDiviAddress, balance);\r\n        }\r\n    }\r\n    function doDivi(address sender, uint256 reserveA, uint256 reserveB, uint256 _fee) private {\r\n        uint256 resAmount = this.balanceOf(sender);\r\n        if(resAmount > 0){\r\n            uint256 amountOut = uniswapV2Router.getAmountOut(resAmount, reserveA, reserveB);\r\n            if(amountOut >= _leastUsdt){\r\n                TransferHelper.safeTransfer(filAddress, sender, _fee);\r\n            }else{\r\n                TransferHelper.safeTransfer(filAddress, filDiviAddress, _fee);\r\n            }\r\n        }else{\r\n            TransferHelper.safeTransfer(filAddress, filDiviAddress, _fee);\r\n        }\r\n\r\n    }\r\n\r\n    function getPairFilReserve() public view returns(uint256, uint256){\r\n        address factory = uniswapFactory.getPair(filAddress, usdtAddress);\r\n        IUniswapV2Pair pair = IUniswapV2Pair(factory);\r\n        uint256 reserveA;\r\n        uint256 reserveB;\r\n        uint256 time;\r\n        (reserveA, reserveB, time) = pair.getReserves();\r\n        return (reserveA, reserveB);\r\n    }\r\n\r\n    function getPairReserve() public view returns(uint256, uint256){\r\n        IUniswapV2Pair pair = IUniswapV2Pair(uniswapPair);\r\n        uint256 reserveA;\r\n        uint256 reserveB;\r\n        uint256 time;\r\n        (reserveA, reserveB, time) = pair.getReserves();\r\n        return (reserveA, reserveB);\r\n    }\r\n\r\n    function flowHoldingShare(address sender,uint256 amount) private{\r\n        uint256 total;\r\n        IUniswapV2Pair pair = IUniswapV2Pair(uniswapPair);\r\n        for(uint256 i = 0; i < addresses.length; i++){\r\n            address addr = addresses[i];\r\n            uint256 liquidAmount =  pair.balanceOf(addr);\r\n            if(liquidAmount > 0){\r\n                total += liquidAmount;\r\n            }\r\n        }\r\n        for(uint256 i = 0; i < addresses.length; i++){\r\n            address addr = addresses[i];\r\n            uint256 liquidAmount =  pair.balanceOf(addr);\r\n            if(liquidAmount > 0){\r\n               uint256 resAmount =  liquidAmount.mul(amount).div(total);\r\n               _transfer(sender, addr, resAmount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function swapAndLiquify(uint256 tAmount) private lockTheSwap {\r\n        uint256 initBalance = usdtToken.balanceOf(address(this));\r\n        uint256 half = tAmount.div(2);\r\n        swapTokensForUsdkTokens(half);\r\n        uint256 newBalance = usdtToken.balanceOf(address(this)).sub(initBalance);\r\n        addLiquidity(half, newBalance);\r\n    }\r\n\r\n    function swapTokensForFilTokens(uint256 tokenAmount) private{\r\n            address[] memory path = new address[](3);\r\n            path[0] = address(this);\r\n            path[1] = usdtAddress;\r\n            path[2] = filAddress;\r\n            TransferHelper.safeApprove(path[0],  address(uniswapV2Router), tokenAmount);\r\n            uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens (\r\n                tokenAmount,\r\n                0,\r\n                path,\r\n                address(this),\r\n                block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapTokensForUsdkTokens(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);//FIT\r\n        path[1] = usdtAddress; //U\r\n        TransferHelper.safeApprove(path[0],  address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens (\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(wrap),\r\n            block.timestamp\r\n        );\r\n        wrap.withdraw();\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 token2Amount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        usdtToken.approve(address(uniswapV2Router), token2Amount);\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidity(\r\n            address(this),\r\n            usdtAddress,\r\n            tokenAmount,\r\n            token2Amount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            addLiquidAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_addLiquAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_addLiquFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_addPot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyOrSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_commudiviFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_dsdiviFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_filAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_leastFit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_leastUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_levelFifthFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_levelFourthFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_levelOneFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_levelSecondFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_levelSixthAndMoreFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_levelThirdFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_startFeeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLiquidAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bindMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"parentAddr\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkWalletLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"enableDisableWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"filAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"filDiviAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"filToken\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"getF\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPairFilReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPairReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"getU\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMarketPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTxLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWalletLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTokensBeforeSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsTxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsWalletLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"setMarketPairStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimum\",\"type\":\"uint256\"}],\"name\":\"setMinimumTokensBeforeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_re\",\"type\":\"bool\"}],\"name\":\"setRevers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"setStartFeeEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyByLimitOnly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wrap\",\"type\":\"address\"}],\"name\":\"setWrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyByLimitOnly\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapFactory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtToken\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"waiveOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrap\",\"outputs\":[{\"internalType\":\"contract IWrap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FITToken", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b1ce2d5d1b690badce4498a04572ae6f7d31862f1ddd9995d96c050d8b60cbfa"}