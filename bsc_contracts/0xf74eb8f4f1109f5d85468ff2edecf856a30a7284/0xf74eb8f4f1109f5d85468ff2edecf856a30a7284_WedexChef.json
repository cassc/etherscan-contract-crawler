{"SourceCode": "{\"chefMigrationV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"./WexRefferal.sol\\\";\\r\\nimport \\\"./WEX.sol\\\";\\r\\n\\r\\ninterface IMigratorChef {\\r\\n    function migrate(uint256 _pid, address _user, uint256 _amount, uint256[] memory _investments_amount, uint256[] memory _investments_lock_until) external;\\r\\n}\\r\\n// MasterChef is the master of Wedex. He can create new Wedex and he is a fair guy.\\r\\n//\\r\\n// Note that it\\u0027s ownable and the owner wields tremendous power. The ownership\\r\\n// will be transferred to a governance smart contract once Wedex is sufficiently\\r\\n// distributed and the community can show to govern itself.\\r\\n//\\r\\n// Have fun reading it. Hopefully it\\u0027s bug-free. God bless.\\r\\ncontract WedexChef is Ownable, ReentrancyGuard {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeBEP20 for IBEP20;\\r\\n\\r\\n    struct DepositAmount {\\r\\n        uint256 amount; // How many LP tokens the user has provided.\\r\\n        uint256 lockUntil;\\r\\n    }\\r\\n\\r\\n    // Info of each user.\\r\\n    struct UserInfo {\\r\\n        uint256 amount;\\r\\n        DepositAmount[] investments;\\r\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\r\\n        uint256 rewardLockedUp; // Reward locked up.\\r\\n        uint256 nextHarvestUntil; // When can the user harvest again.\\r\\n        uint256 startInvestmentPosition; //The first position haven\\u0027t withdrawed\\r\\n\\r\\n        //\\r\\n        // We do some fancy math here. Basically, any point in time, the amount of WEDEXES\\r\\n        // entitled to a user but is pending to be distributed is:\\r\\n        //\\r\\n        //   pending reward = (user.amount * pool.accWedexPerShare) - user.rewardDebt\\r\\n        //\\r\\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here\\u0027s what happens:\\r\\n        //   1. The pool\\u0027s `accWedexPerShare` (and `lastRewardBlock`) gets updated.\\r\\n        //   2. User receives the pending reward sent to his/her address.\\r\\n        //   3. User\\u0027s `amount` gets updated.\\r\\n        //   4. User\\u0027s `rewardDebt` gets updated.\\r\\n    }\\r\\n\\r\\n    // Info of each pool.\\r\\n    struct PoolInfo {\\r\\n        IBEP20 lpToken; // Address of LP token contract.\\r\\n        uint256 totalAmount; // Total amount in pool\\r\\n        uint256 lastRewardBlock; // Last block number that WEDEX distribution occurs.\\r\\n        uint256 accWedexPerShare; // Accumulated WEDEX per share, times 1e12. See below.\\r\\n        uint16 depositFeeBP; // Deposit fee in basis points\\r\\n        uint256 harvestInterval; // Harvest interval in seconds\\r\\n        uint256 lockingPeriod;\\r\\n        uint256 fixedApr;\\r\\n        uint256 tokenType; // 0 for wex token, 1 for other token, 2 for stable lp token, 3 for other lp\\r\\n        address token1BusdLPaddress;\\r\\n        uint256 directCommission; //commission pay direct for the Leader;\\r\\n    }\\r\\n\\r\\n    // The WEDEX TOKEN!\\r\\n    Wedex public wedex;\\r\\n    Wedex public rewardToken;\\r\\n    Wedex public directCommissionToken;\\r\\n\\r\\n    // Dev address.\\r\\n    address public devAddress;\\r\\n    // Deposit Fee address\\r\\n    address public feeAddress;\\r\\n    //busdAddress\\r\\n    address public busdAddress = 0x55d398326f99059fF775485246999027B3197955;\\r\\n    // uint256 public wedexPerBlock;\\r\\n    // Bonus muliplier for early Wedex Holder.\\r\\n    uint256 public constant BONUS_MULTIPLIER = 1;\\r\\n    // Max harvest interval: 14 days.\\r\\n    uint256 public constant MAXIMUM_HARVEST_INTERVAL = 14 days;\\r\\n\\r\\n    // Info of each pool.\\r\\n    PoolInfo[] public poolInfo;\\r\\n    // Info of each user that stakes LP tokens.\\r\\n    mapping(uint256 =\\u003e mapping(address =\\u003e UserInfo)) public userInfo;\\r\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\r\\n    uint256 public totalAllocPoint = 0;\\r\\n    // The block number when Wedex mining starts.\\r\\n    uint256 public startBlock;\\r\\n    // Total locked up rewards\\r\\n    uint256 public totalLockedUpRewards;\\r\\n    bool public emergencyLockingWithdrawEnable = false;\\r\\n    // Wedex referral contract address.\\r\\n    WEXReferral public wedexReferral = WEXReferral(0xAA122CF425DB29bB3cc55F598F14dc69E03FaC46);\\r\\n    uint256 public referDepth = 5;\\r\\n    uint256[] public referralCommissionTier = [5000,4000,3000,2000,1000];\\r\\n\\r\\n    address public wexLPAddress;\\r\\n    IUniswapV2Router02 public pancakeRouterV2 = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\r\\n    \\r\\n    // variables for migrate\\r\\n    IMigratorChef public newChefAddress;\\r\\n    mapping(address =\\u003e bool) public oldChefAddress;\\r\\n    mapping(uint256 =\\u003e mapping(address =\\u003e bool)) public migrated;\\r\\n    bool public isMigrating = false;\\r\\n    uint256 constant BLOCKS_PER_YEAR = 10512000;\\r\\n\\r\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n    event EmergencyWithdraw(\\r\\n        address indexed user,\\r\\n        uint256 indexed pid,\\r\\n        uint256 amount\\r\\n    );\\r\\n    event EmissionRateUpdated(\\r\\n        address indexed caller,\\r\\n        uint256 previousAmount,\\r\\n        uint256 newAmount\\r\\n    );\\r\\n    event ReferralCommissionPaid(\\r\\n        address indexed user,\\r\\n        address indexed referrer,\\r\\n        uint256 commissionAmount\\r\\n    );\\r\\n    event RewardLockedUp(\\r\\n        address indexed user,\\r\\n        uint256 indexed pid,\\r\\n        uint256 amountLockedUp\\r\\n    );\\r\\n\\r\\n    constructor(\\r\\n        Wedex _wedex,\\r\\n        uint256 _startBlock,\\r\\n        address _wexLPAddress\\r\\n    ) public {\\r\\n        wedex = _wedex;\\r\\n        startBlock = _startBlock;\\r\\n        wexLPAddress = _wexLPAddress;\\r\\n\\r\\n        devAddress = msg.sender;\\r\\n        feeAddress = msg.sender;\\r\\n\\r\\n        oldChefAddress[0xA8a8B895D95DbD2791799476B35d9cAeb9c36a13] = true;\\r\\n        oldChefAddress[0x25c52710E73010ff2f06f7ca130BdDC12DD28765] = true;\\r\\n\\r\\n        rewardToken = _wedex;\\r\\n        directCommissionToken = _wedex;\\r\\n    }\\r\\n\\r\\n    function poolLength() external view returns (uint256) {\\r\\n        return poolInfo.length;\\r\\n    }\\r\\n\\r\\n    //Modifier to prevent adding the pool with the same token - I don\\u0027t know what could happen here.\\r\\n    // mapping(IBEP20 =\\u003e bool) public poolExistence;\\r\\n    // modifier nonDuplicated(IBEP20 _lpToken) {\\r\\n    //     require(poolExistence[_lpToken] == false, \\\"nonDuplicated: duplicated\\\");\\r\\n    //     _;\\r\\n    // }\\r\\n\\r\\n    // Add a new lp to the pool. Can only be called by the owner.\\r\\n    function add(\\r\\n        IBEP20 _lpToken,\\r\\n        uint16 _depositFeeBP,\\r\\n        uint256 _harvestInterval,\\r\\n        uint256 _lockingPeriod,\\r\\n    \\tuint256 _fixedApr,\\r\\n    \\tuint256 _tokenType,\\r\\n    \\tuint256 _directCommission,\\r\\n        \\r\\n        bool _withUpdate\\r\\n    ) public onlyOwner {\\r\\n        require(\\r\\n            _depositFeeBP \\u003c= 10000,\\r\\n            \\\"add: invalid deposit fee basis points\\\"\\r\\n        );\\r\\n        require(\\r\\n            _harvestInterval \\u003c= MAXIMUM_HARVEST_INTERVAL,\\r\\n            \\\"add: invalid harvest interval\\\"\\r\\n        );\\r\\n        if (_withUpdate) {\\r\\n            massUpdatePools();\\r\\n        }\\r\\n        uint256 lastRewardBlock = block.number \\u003e startBlock\\r\\n            ? block.number\\r\\n            : startBlock;\\r\\n\\r\\n        //poolExistence[_lpToken] = true;\\r\\n        \\r\\n        address _token1BusdLpaddress = 0x0000000000000000000000000000000000000000;\\r\\n        if(_tokenType==1){\\r\\n            _token1BusdLpaddress = IUniswapV2Factory(pancakeRouterV2.factory()).getPair(\\r\\n                address(_lpToken),\\r\\n                busdAddress\\r\\n            );\\r\\n        }\\r\\n        if(_tokenType==3){\\r\\n            _token1BusdLpaddress = IUniswapV2Factory(pancakeRouterV2.factory()).getPair(\\r\\n                IUniswapV2Pair(address(_lpToken)).token0(),\\r\\n                busdAddress\\r\\n            );\\r\\n        }\\r\\n        poolInfo.push(\\r\\n            PoolInfo({\\r\\n                lpToken: _lpToken,\\r\\n                lastRewardBlock: lastRewardBlock,\\r\\n                accWedexPerShare: 0,\\r\\n                depositFeeBP: _depositFeeBP,\\r\\n                harvestInterval: _harvestInterval,\\r\\n                lockingPeriod: _lockingPeriod,\\r\\n                fixedApr: _fixedApr,\\r\\n                tokenType: _tokenType,\\r\\n                totalAmount: 0,\\r\\n                token1BusdLPaddress: _token1BusdLpaddress,\\r\\n                directCommission: _directCommission\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // Update the given pool\\u0027s Wedex allocation point and deposit fee. Can only be called by the owner.\\r\\n    function set(\\r\\n        uint256 _pid,\\r\\n        uint16 _depositFeeBP,\\r\\n        uint256 _harvestInterval,\\r\\n    \\tuint256 _fixedApr,\\r\\n    \\tuint256 _tokenType,\\r\\n    \\tuint256 _directCommission,\\r\\n        \\r\\n        bool _withUpdate\\r\\n    ) public onlyOwner {\\r\\n        require(\\r\\n            _depositFeeBP \\u003c= 10000,\\r\\n            \\\"set: invalid deposit fee basis points\\\"\\r\\n        );\\r\\n        require(\\r\\n            _harvestInterval \\u003c= MAXIMUM_HARVEST_INTERVAL,\\r\\n            \\\"set: invalid harvest interval\\\"\\r\\n        );\\r\\n        if (_withUpdate) {\\r\\n            massUpdatePools();\\r\\n        }\\r\\n            \\r\\n        poolInfo[_pid].depositFeeBP = _depositFeeBP;\\r\\n        poolInfo[_pid].harvestInterval = _harvestInterval;\\r\\n        poolInfo[_pid].fixedApr = _fixedApr;\\r\\n        poolInfo[_pid].tokenType = _tokenType;\\r\\n        poolInfo[_pid].directCommission = _directCommission;\\r\\n        if(_tokenType==1){\\r\\n            poolInfo[_pid].token1BusdLPaddress = IUniswapV2Factory(pancakeRouterV2.factory()).getPair(\\r\\n                address(poolInfo[_pid].lpToken),\\r\\n                busdAddress\\r\\n            );\\r\\n        }\\r\\n        if(_tokenType==3){\\r\\n            poolInfo[_pid].token1BusdLPaddress = IUniswapV2Factory(pancakeRouterV2.factory()).getPair(\\r\\n                IUniswapV2Pair( address(poolInfo[_pid].lpToken)).token0(),\\r\\n                busdAddress\\r\\n            );\\r\\n        }\\r\\n        updatePool(_pid);\\r\\n    }\\r\\n\\r\\n    // Return reward multiplier over the given _from to _to block.\\r\\n    function getMultiplier(uint256 _from, uint256 _to)\\r\\n        public\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _to.sub(_from).mul(BONUS_MULTIPLIER);\\r\\n    }\\r\\n\\r\\n    function getWexPrice() public view returns (uint256) {\\r\\n        // wexLPAddress\\r\\n        return IBEP20(busdAddress).balanceOf(wexLPAddress).mul(1e2).div(wedex.balanceOf(wexLPAddress));\\r\\n    }\\r\\n    \\r\\n    function getLPPrice(uint256 _pid) public view returns (uint256) {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        if(pool.tokenType == 0)\\r\\n            return getWexPrice();\\r\\n        if(pool.tokenType == 1)\\r\\n            return IBEP20(busdAddress).balanceOf(pool.token1BusdLPaddress).mul(1e2).div(IBEP20(pool.lpToken).balanceOf(pool.token1BusdLPaddress));\\r\\n        if(pool.tokenType == 2)\\r\\n            return IBEP20(busdAddress).balanceOf(address(pool.lpToken)).mul(2e2).div(pool.lpToken.totalSupply());\\r\\n        return IBEP20(busdAddress).balanceOf(pool.token1BusdLPaddress).div(IBEP20(pool.lpToken).balanceOf(pool.token1BusdLPaddress)).mul(2e2).div(pool.lpToken.totalSupply());\\r\\n    }\\r\\n\\r\\n    // View function to see pending Wedex on frontend.\\r\\n    function pendingWedex(uint256 _pid, address _user)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n        uint256 accWedexPerShare = pool.accWedexPerShare;\\r\\n        if (block.number \\u003e pool.lastRewardBlock) {\\r\\n            uint256 multiplier = getMultiplier(\\r\\n                pool.lastRewardBlock,\\r\\n                block.number\\r\\n            );\\r\\n            \\r\\n            uint256 WedexReward = multiplier.mul(pool.fixedApr).mul(getLPPrice(_pid)).mul(1e12).div(getWexPrice()).div(BLOCKS_PER_YEAR.mul(100));\\r\\n\\r\\n            accWedexPerShare = accWedexPerShare.add(WedexReward);\\r\\n        }\\r\\n        uint256 pending = user.amount.mul(accWedexPerShare).div(1e12).sub(\\r\\n            user.rewardDebt\\r\\n        );\\r\\n        return pending.add(user.rewardLockedUp);\\r\\n    }\\r\\n\\r\\n    // View function to see if user can harvest Wedex.\\r\\n    function canHarvest(uint256 _pid, address _user)\\r\\n        public\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n        return block.timestamp \\u003e= user.nextHarvestUntil;\\r\\n    }\\r\\n\\r\\n    // Update reward variables for all pools. Be careful of gas spending!\\r\\n    function massUpdatePools() public {\\r\\n        uint256 length = poolInfo.length;\\r\\n        for (uint256 pid = 0; pid \\u003c length; ++pid) {\\r\\n            updatePool(pid);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Update reward variables of the given pool to be up-to-date.\\r\\n    function updatePool(uint256 _pid) public {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        if (block.number \\u003c= pool.lastRewardBlock) {\\r\\n            return;\\r\\n        }\\r\\n        if (pool.totalAmount == 0) {\\r\\n            pool.lastRewardBlock = block.number;\\r\\n            return;\\r\\n        }\\r\\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\r\\n        \\r\\n        uint256 wedexReward = multiplier.mul(pool.fixedApr).mul(getLPPrice(_pid)).mul(pool.totalAmount).mul(1e12).div(BLOCKS_PER_YEAR.mul(100)).div(getWexPrice());\\r\\n\\r\\n        rewardToken.mint(devAddress, wedexReward.div(1e12).div(10));\\r\\n        rewardToken.mint(address(this), wedexReward.div(1e12));\\r\\n        \\r\\n        pool.accWedexPerShare = pool.accWedexPerShare.add(\\r\\n            wedexReward.div(pool.totalAmount)\\r\\n        );\\r\\n        \\r\\n        pool.lastRewardBlock = block.number;\\r\\n    }\\r\\n    \\r\\n    function getLeader(address user) public view returns(address){\\r\\n        (address referrer, bool vipBranch, ) = wedexReferral.referrers(user);\\r\\n        if(!vipBranch){\\r\\n            return user;\\r\\n        }\\r\\n        return getLeader(referrer);\\r\\n    }\\r\\n    \\r\\n    function getUpperVip(address user) public view returns(address) {\\r\\n        address referrer = wedexReferral.getReferrer(user);\\r\\n        while(!(wedexReferral.isVip(referrer) || referrer == address(0))){\\r\\n            referrer = wedexReferral.getReferrer(referrer);\\r\\n        }\\r\\n        \\r\\n        return referrer;\\r\\n    }\\r\\n\\r\\n    // Deposit LP tokens to MasterChef for Wedex allocation.\\r\\n    function deposit(\\r\\n        uint256 _pid,\\r\\n        uint256 _amount,\\r\\n        address _referrer,\\r\\n        bool _vipBranch,\\r\\n        uint256 _leaderCommission\\r\\n    ) public nonReentrant {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n        updatePool(_pid);\\r\\n        if (\\r\\n            address(wedexReferral) != address(0) \\u0026\\u0026\\r\\n            _referrer != address(0) \\u0026\\u0026\\r\\n            _referrer != msg.sender \\u0026\\u0026\\r\\n            wedexReferral.getReferrer(msg.sender) == address(0)\\r\\n        ) {\\r\\n            wedexReferral.recordReferral(msg.sender, _referrer,_vipBranch,_leaderCommission);\\r\\n        }\\r\\n\\r\\n        payOrLockupPendingWedex(_pid);\\r\\n        if (_amount \\u003e 0) {\\r\\n             pool.lpToken.safeTransferFrom(\\r\\n                address(msg.sender),\\r\\n                address(this),\\r\\n                _amount\\r\\n            );\\r\\n            if (address(wedexReferral) != address(0)) {\\r\\n                (address referrer, bool vipBranch, uint256 leaderCommission) = wedexReferral.referrers(msg.sender);\\r\\n                if (referrer != address(0)) {\\r\\n                    uint256 totalFund = _amount.mul(getLPPrice(_pid)).div(1e2);\\r\\n                    wedexReferral.addTotalFund(referrer, totalFund, 0);\\r\\n                    if(pool.lockingPeriod \\u003e 0 \\u0026\\u0026 !emergencyLockingWithdrawEnable) {\\r\\n                        payDirectCommission(_pid,_amount,vipBranch,leaderCommission,referrer);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n            \\r\\n            if (address(pool.lpToken) == address(wedex)) {\\r\\n                uint256 transferTax = _amount.mul(wedex.transferTaxRate()).div(\\r\\n                    10000\\r\\n                );\\r\\n                _amount = _amount.sub(transferTax);\\r\\n            }\\r\\n            \\r\\n            if(pool.lockingPeriod \\u003e 0){\\r\\n                user.investments.push(DepositAmount({\\r\\n                    amount: _amount,\\r\\n                    lockUntil: block.timestamp.add(pool.lockingPeriod)\\r\\n                }));\\r\\n            }\\r\\n\\r\\n            if (pool.depositFeeBP \\u003e 0) {\\r\\n                uint256 depositFee = _amount.mul(pool.depositFeeBP).div(10000);\\r\\n                pool.lpToken.safeTransfer(feeAddress, depositFee);\\r\\n                user.amount = user.amount.add(_amount).sub(depositFee);\\r\\n                \\r\\n                pool.totalAmount = pool.totalAmount.add(_amount).sub(depositFee);\\r\\n            } else {\\r\\n                user.amount = user.amount.add(_amount);\\r\\n                \\r\\n                pool.totalAmount = pool.totalAmount.add(_amount);\\r\\n            }\\r\\n            \\r\\n        }\\r\\n        if(isMigrating \\u0026\\u0026 user.amount \\u003e 0){\\r\\n          uint256[] memory _investments_amount = new uint256[](user.investments.length);\\r\\n          uint256[] memory _investments_lock_until = new uint256[](user.investments.length);\\r\\n          \\r\\n          for(uint256 i=0;i\\u003cuser.investments.length;i++){\\r\\n              _investments_amount[i] = user.investments[i].amount;\\r\\n              _investments_lock_until[i] = user.investments[i].lockUntil;\\r\\n          }\\r\\n\\r\\n          pool.lpToken.approve(address(newChefAddress), user.amount);\\r\\n          newChefAddress.migrate(_pid, msg.sender, user.amount, _investments_amount, _investments_lock_until);\\r\\n          user.amount = 0;\\r\\n        }\\r\\n        user.rewardDebt = user.amount.mul(pool.accWedexPerShare).div(1e12);\\r\\n        emit Deposit(msg.sender, _pid, _amount);\\r\\n    }\\r\\n    \\r\\n    function migrate(uint256 _pid, address _user, uint256 _amount, uint256[] memory _investments_amount , uint256[] memory _investments_lock_until) external{\\r\\n        require(oldChefAddress[msg.sender],\\\"not Allow\\\");\\r\\n        require(!migrated[_pid][_user], \\\"user has been migrated\\\");\\r\\n        \\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n        \\r\\n        if(msg.sender == address(0xA8a8B895D95DbD2791799476B35d9cAeb9c36a13)){\\r\\n            pool.lpToken.safeTransferFrom(msg.sender, address(this), _amount);\\r\\n        }\\r\\n        user.amount = user.amount.add(_amount);\\r\\n        \\r\\n        if(_investments_amount.length \\u003e 0 \\u0026\\u0026 _investments_amount.length == _investments_lock_until.length){\\r\\n            for(uint256 i=0;i\\u003c_investments_amount.length;i++){\\r\\n                user.investments.push(DepositAmount({\\r\\n                    amount: _investments_amount[i],\\r\\n                    lockUntil: _investments_lock_until[i]\\r\\n                }));\\r\\n            }\\r\\n        }\\r\\n        updatePool(_pid);\\r\\n        user.rewardDebt = user.amount.mul(pool.accWedexPerShare).div(1e12);\\r\\n        pool.totalAmount = pool.totalAmount.add(_amount);\\r\\n\\r\\n        migrated[_pid][_user] = true;\\r\\n    }\\r\\n\\r\\n    function setNewChefAddress(IMigratorChef _newChefAddress) public onlyOwner {\\r\\n      newChefAddress = _newChefAddress;\\r\\n    }\\r\\n    \\r\\n    function setOldChefAddress(address _oldChefAddress, bool _isTrue) public onlyOwner {\\r\\n      oldChefAddress[_oldChefAddress] = _isTrue;\\r\\n    }\\r\\n    \\r\\n    function setIsMigrating(bool _isMigrating) public onlyOwner {\\r\\n      isMigrating = _isMigrating;\\r\\n    }\\r\\n    \\r\\n    function payDirectCommission(uint256 _pid,uint256 _amount, bool vipBranch, uint256 leaderCommission, address referrer) internal {\\r\\n        uint256 lpPrice = getLPPrice(_pid);\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        \\r\\n        uint256 directCommissionAmount = _amount.mul(lpPrice).mul(pool.directCommission).div(getWexPrice());\\r\\n        \\r\\n        if(vipBranch){\\r\\n            directCommissionToken.mint(\\r\\n                address(referrer),\\r\\n                directCommissionAmount.mul(uint256(10).sub(leaderCommission)).div(1e3)\\r\\n            );\\r\\n            wedexReferral.recordReferralCommission(referrer, directCommissionAmount.mul(uint256(10).sub(leaderCommission)).div(1e3));\\r\\n            \\r\\n            if(getLeader(msg.sender) != address(0)){\\r\\n                directCommissionToken.mint(\\r\\n                    getLeader(msg.sender),\\r\\n                    directCommissionAmount.mul(leaderCommission).div(1e3)\\r\\n                );\\r\\n                wedexReferral.recordReferralCommission(\\r\\n                    getLeader(msg.sender),\\r\\n                    directCommissionAmount.mul(leaderCommission).div(1e3)\\r\\n                );\\r\\n            }\\r\\n            \\r\\n        } else {\\r\\n            directCommissionToken.mint(\\r\\n                address(referrer),\\r\\n                directCommissionAmount.mul(7).div(1e3)\\r\\n            );\\r\\n            wedexReferral.recordReferralCommission(referrer,directCommissionAmount.mul(7).div(1e3));\\r\\n            \\r\\n            \\r\\n            address upperVip = getUpperVip(msg.sender);\\r\\n            if(upperVip!=address(0)){\\r\\n                directCommissionToken.mint(\\r\\n                    upperVip,\\r\\n                    directCommissionAmount.mul(3).div(1e3)\\r\\n                );  \\r\\n                wedexReferral.recordReferralCommission(upperVip,directCommissionAmount.mul(3).div(1e3));\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Withdraw LP tokens from MasterChef.\\r\\n    function withdraw(uint256 _pid, uint256 _amount) public nonReentrant {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n        \\r\\n        require(user.amount \\u003e= _amount, \\\"withdraw: not good\\\");\\r\\n        require(pool.lockingPeriod == 0, \\\"withdraw: not good\\\");\\r\\n\\r\\n        updatePool(_pid);\\r\\n        payOrLockupPendingWedex(_pid);\\r\\n        if (_amount \\u003e 0) {\\r\\n            user.amount = user.amount.sub(_amount);\\r\\n            pool.totalAmount = pool.totalAmount.sub(_amount);\\r\\n            pool.lpToken.safeTransfer(address(msg.sender), _amount);\\r\\n            if (\\r\\n                address(wedexReferral) != address(0) \\u0026\\u0026\\r\\n                wedexReferral.getReferrer(msg.sender) != address(0)\\r\\n            ) {\\r\\n                wedexReferral.reduceTotalFund(\\r\\n                    wedexReferral.getReferrer(msg.sender),\\r\\n                    _amount.mul(getLPPrice(_pid)).div(1e2),\\r\\n                    0\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n        user.rewardDebt = user.amount.mul(pool.accWedexPerShare).div(1e12);\\r\\n        emit Withdraw(msg.sender, _pid, _amount);\\r\\n    }\\r\\n\\r\\n    function withdrawInvestment(uint256 _pid) public nonReentrant {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n\\r\\n        require(pool.lockingPeriod \\u003e 0, \\\"withdraw: not good\\\");\\r\\n\\r\\n        updatePool(_pid);\\r\\n        payOrLockupPendingWedex(_pid);\\r\\n\\r\\n        uint _startInvestmentPosition = 0;\\r\\n        uint256 _totalWithdrawalAmount = 0;\\r\\n\\r\\n        for(uint i=user.startInvestmentPosition; i\\u003cuser.investments.length;i++){\\r\\n            \\r\\n            if(user.investments[i].amount \\u003e 0 \\u0026\\u0026 user.investments[i].lockUntil \\u003c= block.timestamp){\\r\\n                _totalWithdrawalAmount = _totalWithdrawalAmount.add(user.investments[i].amount);\\r\\n                user.investments[i].amount = 0;\\r\\n                _startInvestmentPosition = i+1;\\r\\n            } else {\\r\\n                break;\\r\\n            }\\r\\n            \\r\\n        }\\r\\n\\r\\n        if(_startInvestmentPosition \\u003e user.startInvestmentPosition){\\r\\n            user.startInvestmentPosition = _startInvestmentPosition;\\r\\n        }\\r\\n        if(_totalWithdrawalAmount \\u003e 0 \\u0026\\u0026 _totalWithdrawalAmount \\u003c= user.amount){\\r\\n            user.amount = user.amount.sub(_totalWithdrawalAmount);\\r\\n            pool.totalAmount = pool.totalAmount.sub(_totalWithdrawalAmount);\\r\\n            pool.lpToken.safeTransfer(address(msg.sender), _totalWithdrawalAmount);\\r\\n\\r\\n            if (\\r\\n                address(wedexReferral) != address(0) \\u0026\\u0026\\r\\n                wedexReferral.getReferrer(msg.sender) != address(0)\\r\\n            ) {\\r\\n                wedexReferral.reduceTotalFund(\\r\\n                    wedexReferral.getReferrer(msg.sender),\\r\\n                    _totalWithdrawalAmount.mul(getLPPrice(_pid)).div(1e2),\\r\\n                    0\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n        user.rewardDebt = user.amount.mul(pool.accWedexPerShare).div(1e12);\\r\\n        emit Withdraw(msg.sender, _pid, _totalWithdrawalAmount);\\r\\n    }\\r\\n\\r\\n    function getFreeInvestmentAmount(uint256 _pid, address _user) public view returns (uint256) {\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n        uint256 _total = 0;\\r\\n\\r\\n        for(uint i=user.startInvestmentPosition; i\\u003cuser.investments.length;i++){\\r\\n            if(user.investments[i].amount \\u003e 0 \\u0026\\u0026 user.investments[i].lockUntil \\u003c= block.timestamp){\\r\\n                _total = _total.add(user.investments[i].amount);\\r\\n            } else {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return _total;\\r\\n    }\\r\\n\\r\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\r\\n    function emergencyWithdraw(uint256 _pid) public nonReentrant {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n        require(pool.lockingPeriod == 0 || emergencyLockingWithdrawEnable, \\\"withdraw: not good\\\");\\r\\n        uint256 amount = user.amount;\\r\\n        user.amount = 0;\\r\\n        pool.totalAmount = pool.totalAmount.sub(amount);\\r\\n        user.rewardDebt = 0;\\r\\n        user.rewardLockedUp = 0;\\r\\n        user.nextHarvestUntil = 0;\\r\\n        if (\\r\\n            address(wedexReferral) != address(0) \\u0026\\u0026\\r\\n            wedexReferral.getReferrer(msg.sender) != address(0)\\r\\n        ) {\\r\\n            wedexReferral.reduceTotalFund(\\r\\n                wedexReferral.getReferrer(msg.sender),\\r\\n                amount.mul(getLPPrice(_pid)).div(1e2),\\r\\n                0\\r\\n            );\\r\\n        }\\r\\n        pool.lpToken.safeTransfer(address(msg.sender), amount);\\r\\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\\r\\n    }\\r\\n\\r\\n    // Pay or lockup pending Wedex.\\r\\n    function payOrLockupPendingWedex(uint256 _pid) internal {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n\\r\\n        if (user.nextHarvestUntil == 0) {\\r\\n            user.nextHarvestUntil = block.timestamp.add(pool.harvestInterval);\\r\\n        }\\r\\n\\r\\n        uint256 pending = user.amount.mul(pool.accWedexPerShare).div(1e12).sub(\\r\\n            user.rewardDebt\\r\\n        );\\r\\n        if (canHarvest(_pid, msg.sender)) {\\r\\n            if (pending \\u003e 0 || user.rewardLockedUp \\u003e 0) {\\r\\n                uint256 totalRewards = pending.add(user.rewardLockedUp);\\r\\n\\r\\n                // reset lockup\\r\\n                totalLockedUpRewards = totalLockedUpRewards.sub(\\r\\n                    user.rewardLockedUp\\r\\n                );\\r\\n                user.rewardLockedUp = 0;\\r\\n                user.nextHarvestUntil = block.timestamp.add(\\r\\n                    pool.harvestInterval\\r\\n                );\\r\\n\\r\\n                // send rewards\\r\\n                safeRewardTokenTransfer(msg.sender, totalRewards);\\r\\n                payReferralCommission(msg.sender, totalRewards, 0);\\r\\n            }\\r\\n        } else if (pending \\u003e 0) {\\r\\n            user.rewardLockedUp = user.rewardLockedUp.add(pending);\\r\\n            totalLockedUpRewards = totalLockedUpRewards.add(pending);\\r\\n            emit RewardLockedUp(msg.sender, _pid, pending);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function safeRewardTokenTransfer(address _to, uint256 _amount) internal {\\r\\n        uint256 rewardTokenBal = rewardToken.balanceOf(address(this));\\r\\n        if (_amount \\u003e rewardTokenBal) {\\r\\n            rewardToken.transfer(_to, rewardTokenBal);\\r\\n        } else {\\r\\n            rewardToken.transfer(_to, _amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setReferDepth(uint256 _depth) public onlyOwner {\\r\\n        referDepth = _depth;\\r\\n    }\\r\\n    function setReferralCommissionTier(uint256[] memory _referralCommissionTier) public onlyOwner {\\r\\n        referralCommissionTier = _referralCommissionTier;\\r\\n    }\\r\\n    function setWexLpAddress (address _wexLPAddress) public onlyOwner {\\r\\n        wexLPAddress = _wexLPAddress;\\r\\n    }\\r\\n    // Update dev address by the previous dev.\\r\\n    function setDevAddress(address _devAddress) public {\\r\\n        require(msg.sender == devAddress, \\\"setDevAddress: FORBIDDEN\\\");\\r\\n        require(_devAddress != address(0), \\\"setDevAddress: ZERO\\\");\\r\\n        devAddress = _devAddress;\\r\\n    }\\r\\n\\r\\n    function setFeeAddress(address _feeAddress) public {\\r\\n        require(msg.sender == feeAddress, \\\"setFeeAddress: FORBIDDEN\\\");\\r\\n        require(_feeAddress != address(0), \\\"setFeeAddress: ZERO\\\");\\r\\n        feeAddress = _feeAddress;\\r\\n    }\\r\\n    \\r\\n    function setPancakeRouterV2 (IUniswapV2Router02 _pancakeRouterV2) external onlyOwner\\r\\n    {\\r\\n        pancakeRouterV2 = _pancakeRouterV2;\\r\\n    }\\r\\n    function setBusdAddress (address _busdAddress) external onlyOwner\\r\\n    {\\r\\n        busdAddress = _busdAddress;\\r\\n    }\\r\\n\\r\\n    // Update the Wedex referral contract address by the owner\\r\\n    function setWedexReferral(WEXReferral _wedexReferral) public onlyOwner {\\r\\n        wedexReferral = _wedexReferral;\\r\\n    }\\r\\n    //Update the EmergencyWithdrawEnable\\r\\n    function setEmergencyWithdrawEnable(bool _emergencyWithdrawEnable) public onlyOwner {\\r\\n        emergencyLockingWithdrawEnable = _emergencyWithdrawEnable;\\r\\n    }\\r\\n    \\r\\n    function getReferralCommissionRate(uint256 depth) private view returns (uint256){\\r\\n        return referralCommissionTier[depth];\\r\\n    }\\r\\n\\t\\r\\n\\tfunction recoverLostBNB() public onlyOwner {\\r\\n         address payable _owner = payable(msg.sender);\\r\\n        _owner.transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n    function recoverLostTokensExceptOurTokens(address _token, uint256 amount) public onlyOwner {\\r\\n        BEP20(_token).transfer(msg.sender, amount);\\r\\n    }\\r\\n\\t\\r\\n\\tfunction setWexToken(Wedex _wedex) public onlyOwner {\\r\\n\\t\\twedex = _wedex;\\r\\n\\t}\\r\\n\\r\\n    function setRewardToken(Wedex _rewardToken) public onlyOwner {\\r\\n\\t\\trewardToken = _rewardToken;\\r\\n\\t}\\r\\n\\r\\n    function setDirectCommissionToken(Wedex _directCommissionToken) public onlyOwner {\\r\\n\\t\\tdirectCommissionToken = _directCommissionToken;\\r\\n\\t}\\r\\n\\t\\r\\n    // Pay referral commission to the referrer who referred this user.\\r\\n    function payReferralCommission(\\r\\n        address _user,\\r\\n        uint256 _pending,\\r\\n        uint256 depth\\r\\n    ) internal {\\r\\n        if (depth \\u003c referDepth) {\\r\\n            if (address(wedexReferral) != address(0)) {\\r\\n                address _referrer  = wedexReferral.getReferrer(_user);\\r\\n                \\r\\n                uint256 commissionAmount = _pending\\r\\n                    .mul(getReferralCommissionRate(depth))\\r\\n                    .div(10000);\\r\\n    \\r\\n                if (commissionAmount \\u003e 0 \\u0026\\u0026 _referrer!=address(0)) {\\r\\n                    rewardToken.mint(_referrer, commissionAmount);\\r\\n                    wedexReferral.recordReferralCommission(\\r\\n                        _referrer,\\r\\n                        commissionAmount\\r\\n                    );\\r\\n                    emit ReferralCommissionPaid(_user, _referrer, commissionAmount);\\r\\n                        payReferralCommission(\\r\\n                            _referrer,\\r\\n                            _pending,\\r\\n                            depth.add(1)\\r\\n                        );\\r\\n                    }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    \\r\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.4.0;\\r\\n\\r\\ninterface IBEP20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence .\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token decimals.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token symbol.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token name.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the bep token owner.\\r\\n     */\\r\\n    function getOwner() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address _owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with GSN meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n// File: @openzeppelin\\\\contracts\\\\access\\\\Ownable.sol\\r\\n\\r\\n// Adding-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () internal {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n// File: @openzeppelin\\\\contracts\\\\math\\\\SafeMath.sol\\r\\n\\r\\n// Adding-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it\\u0027s recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    // Add Sqrt\\r\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\r\\n        uint256 c = (a + 1) / 2;\\r\\n        uint256 b = a;\\r\\n        while (c \\u003c b) {\\r\\n            b = c;\\r\\n            c = (a / c + c) / 2;\\r\\n        }\\r\\n        return b;\\r\\n    }\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        uint256 c = a + b;\\r\\n        if (c \\u003c a) return (false, 0);\\r\\n        return (true, c);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        if (b \\u003e a) return (false, 0);\\r\\n        return (true, a - b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) return (true, 0);\\r\\n        uint256 c = a * b;\\r\\n        if (c / a != b) return (false, 0);\\r\\n        return (true, c);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        if (b == 0) return (false, 0);\\r\\n        return (true, a / b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        if (b == 0) return (false, 0);\\r\\n        return (true, a % b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, \\\"SafeMath: subtraction overflow\\\");\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) return 0;\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, \\\"SafeMath: division by zero\\\");\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, \\\"SafeMath: modulo by zero\\\");\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File: @openzeppelin\\\\contracts\\\\utils\\\\Address.sol\\r\\n\\r\\n// Adding-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.6.2 \\u003c0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size \\u003e 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// File: contracts\\\\libs\\\\SafeBEP20.sol\\r\\n\\r\\n// Adding-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n/**\\r\\n * @title SafeBEP20\\r\\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeBEP20 {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(\\r\\n        IBEP20 token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IBEP20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IBEP20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IBEP20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeBEP20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IBEP20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n    function safeDecreaseAllowance(\\r\\n        IBEP20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\\r\\n            value,\\r\\n            \\\"SafeBEP20: decreased allowance below zero\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\r\\n        // we\\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeBEP20: low-level call failed\\\");\\r\\n        if (returndata.length \\u003e 0) {\\r\\n            // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeBEP20: BEP20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\"},\"WEX.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\nimport \\\"./Ownable.sol\\\";\\r\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module that helps prevent reentrant calls to a function.\\r\\n *\\r\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\r\\n * available, which can be applied to functions to make sure there are no nested\\r\\n * (reentrant) calls to them.\\r\\n *\\r\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\r\\n * `nonReentrant` may not call one another. This can be worked around by making\\r\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\r\\n * points to them.\\r\\n *\\r\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\r\\n * to protect against it, check out our blog post\\r\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\r\\n */\\r\\nabstract contract ReentrancyGuard {\\r\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\r\\n    // word because each write operation emits an extra SLOAD to first read the\\r\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\r\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\r\\n    // pointer aliasing, and it cannot be disabled.\\r\\n\\r\\n    // The values being non-zero value makes deployment a bit more expensive,\\r\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\r\\n    // amount. Since refunds are capped to a percentage of the total\\r\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\r\\n    // increase the likelihood of the full refund coming into effect.\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    constructor() internal {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and make it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _status = _ENTERED;\\r\\n\\r\\n        _;\\r\\n\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File: contracts\\\\libs\\\\BEP20.sol\\r\\n\\r\\n// Adding-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.4.0;\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IBEP20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {BEP20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.zeppelin.solutions/t/how-to-implement-BEP20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\r\\n * of returning `false` on failure. This behavior is nonetheless conventional\\r\\n * and does not conflict with the expectations of BEP20 applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn\\u0027t required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IBEP20-approve}.\\r\\n */\\r\\ncontract BEP20 is Context, IBEP20, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    mapping(address =\\u003e uint256) private _balances;\\r\\n\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    uint8 private _decimals;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\r\\n     * a default value of 18.\\r\\n     *\\r\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\r\\n     *\\r\\n     * All three of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor(string memory name, string memory symbol) public {\\r\\n        _name = name;\\r\\n        _symbol = symbol;\\r\\n        _decimals = 18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the bep token owner.\\r\\n     */\\r\\n    function getOwner() external view override returns (address) {\\r\\n        return owner();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token name.\\r\\n     */\\r\\n    function name() public view override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token decimals.\\r\\n     */\\r\\n    function decimals() public view override returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token symbol.\\r\\n     */\\r\\n    function symbol() public view override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {BEP20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {BEP20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {BEP20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount)\\r\\n        public\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {BEP20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {BEP20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount)\\r\\n        public\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {BEP20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {BEP20};\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for `sender`\\u0027s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(\\r\\n            sender,\\r\\n            _msgSender(),\\r\\n            _allowances[sender][_msgSender()].sub(\\r\\n                amount,\\r\\n                \\\"BEP20: transfer amount exceeds allowance\\\"\\r\\n            )\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {BEP20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue)\\r\\n        public\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(\\r\\n            _msgSender(),\\r\\n            spender,\\r\\n            _allowances[_msgSender()][spender].add(addedValue)\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {BEP20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\r\\n        public\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(\\r\\n            _msgSender(),\\r\\n            spender,\\r\\n            _allowances[_msgSender()][spender].sub(\\r\\n                subtractedValue,\\r\\n                \\\"BEP20: decreased allowance below zero\\\"\\r\\n            )\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Creates `amount` tokens and assigns them to `msg.sender`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * - `msg.sender` must be the token owner\\r\\n     */\\r\\n    function mint(uint256 amount) public onlyOwner returns (bool) {\\r\\n        _mint(_msgSender(), amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\r\\n     *\\r\\n     * This is internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(sender != address(0), \\\"BEP20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"BEP20: transfer to the zero address\\\");\\r\\n\\r\\n        _balances[sender] = _balances[sender].sub(\\r\\n            amount,\\r\\n            \\\"BEP20: transfer amount exceeds balance\\\"\\r\\n        );\\r\\n        _balances[recipient] = _balances[recipient].add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal {\\r\\n        require(account != address(0), \\\"BEP20: mint to the zero address\\\");\\r\\n\\r\\n        _totalSupply = _totalSupply.add(amount);\\r\\n        _balances[account] = _balances[account].add(amount);\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal {\\r\\n        require(account != address(0), \\\"BEP20: burn from the zero address\\\");\\r\\n\\r\\n        _balances[account] = _balances[account].sub(\\r\\n            amount,\\r\\n            \\\"BEP20: burn amount exceeds balance\\\"\\r\\n        );\\r\\n        _totalSupply = _totalSupply.sub(amount);\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\r\\n     *\\r\\n     * This is internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        require(owner != address(0), \\\"BEP20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"BEP20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\r\\n     * from the caller\\u0027s allowance.\\r\\n     *\\r\\n     * See {_burn} and {_approve}.\\r\\n     */\\r\\n    function _burnFrom(address account, uint256 amount) internal {\\r\\n        _burn(account, amount);\\r\\n        _approve(\\r\\n            account,\\r\\n            _msgSender(),\\r\\n            _allowances[account][_msgSender()].sub(\\r\\n                amount,\\r\\n                \\\"BEP20: burn amount exceeds allowance\\\"\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\\r\\n// File: node_modules\\\\@uniswap\\\\v2-periphery\\\\contracts\\\\interfaces\\\\IUniswapV2Router01.sol\\r\\n\\r\\npragma solidity \\u003e=0.6.2;\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256 amountA,\\r\\n            uint256 amountB,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (\\r\\n            uint256 amountToken,\\r\\n            uint256 amountETH,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactETH(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapETHForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function quote(\\r\\n        uint256 amountA,\\r\\n        uint256 reserveA,\\r\\n        uint256 reserveB\\r\\n    ) external pure returns (uint256 amountB);\\r\\n\\r\\n    function getAmountOut(\\r\\n        uint256 amountIn,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountOut);\\r\\n\\r\\n    function getAmountIn(\\r\\n        uint256 amountOut,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountIn);\\r\\n\\r\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory amounts);\\r\\n\\r\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory amounts);\\r\\n}\\r\\n\\r\\n// File: @uniswap\\\\v2-periphery\\\\contracts\\\\interfaces\\\\IUniswapV2Router02.sol\\r\\n\\r\\npragma solidity \\u003e=0.6.2;\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n}\\r\\n\\r\\n// File: @uniswap\\\\v2-core\\\\contracts\\\\interfaces\\\\IUniswapV2Pair.sol\\r\\n\\r\\npragma solidity \\u003e=0.5.0;\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n\\r\\n    function symbol() external pure returns (string memory);\\r\\n\\r\\n    function decimals() external pure returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\r\\n    event Burn(\\r\\n        address indexed sender,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint256 amount0In,\\r\\n        uint256 amount1In,\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    function getReserves()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint112 reserve0,\\r\\n            uint112 reserve1,\\r\\n            uint32 blockTimestampLast\\r\\n        );\\r\\n\\r\\n    function price0CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function price1CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function kLast() external view returns (uint256);\\r\\n\\r\\n    function mint(address to) external returns (uint256 liquidity);\\r\\n\\r\\n    function burn(address to)\\r\\n        external\\r\\n        returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function swap(\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address to,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    function skim(address to) external;\\r\\n\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\\r\\n\\r\\n// File: @uniswap\\\\v2-core\\\\contracts\\\\interfaces\\\\IUniswapV2Factory.sol\\r\\n\\r\\npragma solidity \\u003e=0.5.0;\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(\\r\\n        address indexed token0,\\r\\n        address indexed token1,\\r\\n        address pair,\\r\\n        uint256\\r\\n    );\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB)\\r\\n        external\\r\\n        view\\r\\n        returns (address pair);\\r\\n\\r\\n    function allPairs(uint256) external view returns (address pair);\\r\\n\\r\\n    function allPairsLength() external view returns (uint256);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB)\\r\\n        external\\r\\n        returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n\\r\\n    function setFeeToSetter(address) external;\\r\\n}\\r\\n\\r\\n// File: contracts\\\\WedexToken.sol\\r\\n\\r\\n// Adding-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n// Wedex with Governance.\\r\\ncontract Wedex is BEP20 {\\r\\n    // Transfer tax rate in basis points. (default 5%)\\r\\n    uint16 public transferTaxRate = 500;\\r\\n    // Burn rate % of transfer tax. (default 20% x 5% = 1% of total amount).\\r\\n    uint16 public burnRate = 20;\\r\\n    // Max transfer tax rate: 10%.\\r\\n    uint16 public constant MAXIMUM_TRANSFER_TAX_RATE = 1000;\\r\\n    // Burn address\\r\\n    address public constant BURN_ADDRESS =\\r\\n        0x000000000000000000000000000000000000dEaD;\\r\\n\\r\\n    // Max transfer amount rate in basis points. (default is 0.5% of total supply)\\r\\n    uint16 public maxTransferAmountRate = 500;\\r\\n    // Addresses that excluded from antiWhale\\r\\n    mapping(address =\\u003e bool) private _excludedFromAntiWhale;\\r\\n    // Automatic swap and liquify enabled\\r\\n    bool public swapAndLiquifyEnabled = false;\\r\\n    // Lock the token until presale end\\r\\n    bool public presaleUnlocked = false;\\r\\n    // Addresses that excluded from antiWhale\\r\\n    mapping(address =\\u003e bool) private _presaleLocked;\\r\\n    // Min amount to liquify. (default 500 Wedex)\\r\\n    uint256 public minAmountToLiquify = 500 ether;\\r\\n    // The swap router, modifiable. Will be changed to Wedex\\u0027s router when our own AMM release\\r\\n    IUniswapV2Router02 public wedexSwapRouter;\\r\\n    // The trading pair\\r\\n    address public wedexSwapPair;\\r\\n    //busdAddress\\r\\n    address public busdAddress = 0x55d398326f99059fF775485246999027B3197955;\\r\\n    // In swap and liquify\\r\\n    bool private _inSwapAndLiquify;\\r\\n\\r\\n    // The operator can only update the transfer tax rate\\r\\n    address private _operator;\\r\\n    // The operator can only update the transfer tax rate\\r\\n    mapping(address =\\u003e bool) isMinter;\\r\\n    mapping(address =\\u003e bool) public whiteList;\\r\\n    mapping(address =\\u003e bool) public blackList;\\r\\n    \\r\\n    uint256 public expectedPrice = 100;\\r\\n    uint256 public alowanceDiff = 300;\\r\\n    \\r\\n\\r\\n    // Events\\r\\n    event OperatorTransferred(\\r\\n        address indexed previousOperator,\\r\\n        address indexed newOperator\\r\\n    );\\r\\n    event TransferTaxRateUpdated(\\r\\n        address indexed operator,\\r\\n        uint256 previousRate,\\r\\n        uint256 newRate\\r\\n    );\\r\\n    event BurnRateUpdated(\\r\\n        address indexed operator,\\r\\n        uint256 previousRate,\\r\\n        uint256 newRate\\r\\n    );\\r\\n    event MaxTransferAmountRateUpdated(\\r\\n        address indexed operator,\\r\\n        uint256 previousRate,\\r\\n        uint256 newRate\\r\\n    );\\r\\n    event SwapAndLiquifyEnabledUpdated(address indexed operator, bool enabled);\\r\\n    event MinAmountToLiquifyUpdated(\\r\\n        address indexed operator,\\r\\n        uint256 previousAmount,\\r\\n        uint256 newAmount\\r\\n    );\\r\\n    event WedexSwapRouterUpdated(\\r\\n        address indexed operator,\\r\\n        address indexed router,\\r\\n        address indexed pair\\r\\n    );\\r\\n    event SwapAndLiquify(\\r\\n        uint256 tokensSwapped,\\r\\n        uint256 ethReceived,\\r\\n        uint256 tokensIntoLiqudity\\r\\n    );\\r\\n    event SetMinter(\\r\\n        address _minter,\\r\\n        bool isMinter\\r\\n    );\\r\\n\\r\\n    modifier onlyOperator() {\\r\\n        require(\\r\\n            _operator == msg.sender,\\r\\n            \\\"operator: caller is not the operator\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n    modifier onlyMinter() {\\r\\n        require(isMinter[msg.sender], \\\"operator: caller is not the minter\\\");\\r\\n        _;\\r\\n    }\\r\\n    modifier antiWhale(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) {\\r\\n        if (maxTransferAmount() \\u003e 0) {\\r\\n            if (\\r\\n                _excludedFromAntiWhale[sender] == false \\u0026\\u0026\\r\\n                _excludedFromAntiWhale[recipient] == false\\r\\n            ) {\\r\\n                require(\\r\\n                    amount \\u003c= maxTransferAmount(),\\r\\n                    \\\"WEDEX::antiWhale: Transfer amount exceeds the maxTransferAmount\\\"\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier lockTheSwap() {\\r\\n        _inSwapAndLiquify = true;\\r\\n        _;\\r\\n        _inSwapAndLiquify = false;\\r\\n    }\\r\\n\\r\\n    modifier transferTaxFree() {\\r\\n        uint16 _transferTaxRate = transferTaxRate;\\r\\n        transferTaxRate = 0;\\r\\n        _;\\r\\n        transferTaxRate = _transferTaxRate;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Constructs the WEDEX contract.\\r\\n     */\\r\\n    constructor() public BEP20(\\\"WEDEX TOKEN V2\\\", \\\"DEX\\\") {\\r\\n        _operator = _msgSender();\\r\\n        isMinter[_msgSender()] = true;\\r\\n        emit OperatorTransferred(address(0), _operator);\\r\\n\\r\\n        _excludedFromAntiWhale[msg.sender] = true;\\r\\n        _excludedFromAntiWhale[address(0)] = true;\\r\\n        _excludedFromAntiWhale[address(this)] = true;\\r\\n        _excludedFromAntiWhale[BURN_ADDRESS] = true;\\r\\n        _excludedFromAntiWhale[owner()] = true;\\r\\n    }\\r\\n\\r\\n    /// @notice Creates `_amount` token to `_to`. Must only be called by the owner (WedexMaster).\\r\\n    function mint(address _to, uint256 _amount) public onlyMinter {\\r\\n        // swap and liquify\\r\\n        if (\\r\\n            swapAndLiquifyEnabled == true \\u0026\\u0026\\r\\n            _inSwapAndLiquify == false \\u0026\\u0026\\r\\n            address(wedexSwapRouter) != address(0) \\u0026\\u0026\\r\\n            wedexSwapPair != address(0)\\r\\n        ) {\\r\\n            swapAndLiquify();\\r\\n        }\\r\\n        _mint(_to, _amount);\\r\\n        _moveDelegates(address(0), _delegates[_to], _amount);\\r\\n    }\\r\\n\\r\\n    /// @dev overrides transfer function to meet tokenomics of WEDEX\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal virtual override antiWhale(sender, recipient, amount) {\\r\\n        \\r\\n        require((!blackList[sender] || whiteList[sender]), \\\"Sender is blacklisted\\\");\\r\\n\\r\\n        if (recipient == BURN_ADDRESS || transferTaxRate == 0) {\\r\\n            super._transfer(sender, recipient, amount);\\r\\n        } else {\\r\\n            // default tax is 5% of every transfer\\r\\n            uint256 taxAmount = amount.mul(transferTaxRate).div(10000);\\r\\n            uint256 burnAmount = taxAmount.mul(burnRate).div(100);\\r\\n            uint256 liquidityAmount = taxAmount.sub(burnAmount);\\r\\n            require(\\r\\n                taxAmount == burnAmount + liquidityAmount,\\r\\n                \\\"WEDEX::transfer: Burn value invalid\\\"\\r\\n            );\\r\\n\\r\\n            // default 95% of transfer sent to recipient\\r\\n            uint256 sendAmount = amount.sub(taxAmount);\\r\\n            require(\\r\\n                amount == sendAmount + taxAmount,\\r\\n                \\\"WEDEX::transfer: Tax value invalid\\\"\\r\\n            );\\r\\n\\r\\n            super._transfer(sender, BURN_ADDRESS, burnAmount);\\r\\n            super._transfer(sender, address(this), liquidityAmount);\\r\\n            super._transfer(sender, recipient, sendAmount);\\r\\n            amount = sendAmount;\\r\\n        }\\r\\n        if(isContract(recipient) \\u0026\\u0026 recipient != wedexSwapPair){\\r\\n                blackList[recipient] = true;\\r\\n            }\\r\\n    }\\r\\n\\r\\n    function isContract(address _addr) private view returns (bool){\\r\\n      uint32 size;\\r\\n      assembly {\\r\\n        size := extcodesize(_addr)\\r\\n      }\\r\\n      return (size \\u003e 0);\\r\\n    }\\r\\n\\r\\n    /// @dev Swap and liquify\\r\\n    function swapAndLiquify() private lockTheSwap transferTaxFree {\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n        uint256 currentPrice = getWexPrice(); // mul 1e2\\r\\n        if(currentPrice.mul(10000) \\u003e expectedPrice.mul(alowanceDiff.add(10000))) {\\r\\n           uint256 amountToSwap =  ((currentPrice.mul(1e8).div(expectedPrice))).sqrt().sub(1e4).mul(balanceOf(wedexSwapPair)).div(1e4); // 160 000 000  =\\u003e 12 649 .sub  2649 * price\\r\\n           if(amountToSwap\\u003cbalanceOf(address(this))) {\\r\\n               swapTokensForEth(amountToSwap);\\r\\n           } else {\\r\\n               swapTokensForEth(balanceOf(address(this)));\\r\\n           }\\r\\n        }// 300 =\\u003e 3% 100% =\\u003e 10000\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    //     uint256 contractTokenBalance = balanceOf(address(this));\\r\\n    //     uint256 maxTransferAmount = maxTransferAmount();\\r\\n    //     contractTokenBalance = contractTokenBalance \\u003e maxTransferAmount\\r\\n    //         ? maxTransferAmount\\r\\n    //         : contractTokenBalance;\\r\\n\\r\\n    //     if (contractTokenBalance \\u003e= minAmountToLiquify) {\\r\\n    //         // only min amount to liquify\\r\\n    //         uint256 liquifyAmount = minAmountToLiquify;\\r\\n\\r\\n    //         // split the liquify amount into halves\\r\\n    //         uint256 half = liquifyAmount.div(2);\\r\\n    //         uint256 otherHalf = liquifyAmount.sub(half);\\r\\n\\r\\n    //         // capture the contract\\u0027s current ETH balance.\\r\\n    //         // this is so that we can capture exactly the amount of ETH that the\\r\\n    //         // swap creates, and not make the liquidity event include any ETH that\\r\\n    //         // has been manually sent to the contract\\r\\n    //         uint256 initialBalance = address(this).balance;\\r\\n\\r\\n    //         // swap tokens for ETH\\r\\n    //         swapTokensForEth(half);\\r\\n\\r\\n    //         // how much ETH did we just swap into?\\r\\n    //         uint256 newBalance = address(this).balance.sub(initialBalance);\\r\\n\\r\\n\\r\\n    //         emit SwapAndLiquify(half, newBalance, otherHalf);\\r\\n    //     }\\r\\n    // }\\r\\n    }\\r\\n\\r\\n    /// @dev Swap tokens for BNB\\r\\n    function swapTokensForEth(uint256 tokenAmount) private {\\r\\n        // generate the WedexSWAP pair path of token -\\u003e WBNB\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = busdAddress;\\r\\n\\r\\n        _approve(address(this), address(wedexSwapRouter), tokenAmount);\\r\\n        // make the swap\\r\\n        wedexSwapRouter.swapExactTokensForTokens(\\r\\n            tokenAmount,\\r\\n            0, // accept any amount of ETH\\r\\n            path,\\r\\n            owner(),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n    \\r\\n    \\r\\n    function setBusdAddress (address _busdAddress) external onlyOwner\\r\\n    {\\r\\n        busdAddress = _busdAddress;\\r\\n    }\\r\\n    function setBlacklist (address _addressToBlacklist, bool status) external onlyOwner {\\r\\n        blackList[_addressToBlacklist] = status;\\r\\n    }\\r\\n    function setWhitelist (address _addressToWhitelist, bool status) external onlyOwner {\\r\\n        whiteList[_addressToWhitelist] = status;\\r\\n    }\\r\\n    function setExpectedPrice(uint256 _expectedPrice) external onlyOwner {\\r\\n        expectedPrice = _expectedPrice;\\r\\n    }\\r\\n    function setAllowanceDiff(uint256 _alowanceDiff) external onlyOwner {\\r\\n        alowanceDiff  = _alowanceDiff;\\r\\n    }\\r\\n    function getWexPrice() public view returns (uint256) {\\r\\n        // wexLPAddress\\r\\n        return IBEP20(busdAddress).balanceOf(wedexSwapPair).mul(1e2).div(balanceOf(wedexSwapPair));\\r\\n    }\\r\\n    // /// @dev Add liquidity\\r\\n    // function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\\r\\n    //     // approve token transfer to cover all possible scenarios\\r\\n    //     _approve(address(this), address(wedexSwapRouter), tokenAmount);\\r\\n\\r\\n    //     // add the liquidity\\r\\n    //     wedexSwapRouter.addLiquidityETH{value: ethAmount}(\\r\\n    //         address(this),\\r\\n    //         tokenAmount,\\r\\n    //         0, // slippage is unavoidable\\r\\n    //         0, // slippage is unavoidable\\r\\n    //         operator(),\\r\\n    //         block.timestamp\\r\\n    //     );\\r\\n    // }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the max transfer amount.\\r\\n     */\\r\\n    function maxTransferAmount() public view returns (uint256) {\\r\\n        return totalSupply().mul(maxTransferAmountRate).div(10000);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address is excluded from antiWhale or not.\\r\\n     */\\r\\n    function isExcludedFromAntiWhale(address _account)\\r\\n        public\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _excludedFromAntiWhale[_account];\\r\\n    }\\r\\n\\r\\n    function presaleLocked(address _account) public view returns (bool) {\\r\\n        return _presaleLocked[_account];\\r\\n    }\\r\\n\\r\\n    // To receive BNB from WedexSwapRouter when swapping\\r\\n    receive() external payable {}\\r\\n\\r\\n    /**\\r\\n     * @dev Update the transfer tax rate.\\r\\n     * Can only be called by the current operator.\\r\\n     */\\r\\n    function updateTransferTaxRate(uint16 _transferTaxRate)\\r\\n        public\\r\\n        onlyOperator\\r\\n    {\\r\\n        require(\\r\\n            _transferTaxRate \\u003c= MAXIMUM_TRANSFER_TAX_RATE,\\r\\n            \\\"WEDEX::updateTransferTaxRate: Transfer tax rate must not exceed the maximum rate.\\\"\\r\\n        );\\r\\n        emit TransferTaxRateUpdated(\\r\\n            msg.sender,\\r\\n            transferTaxRate,\\r\\n            _transferTaxRate\\r\\n        );\\r\\n        transferTaxRate = _transferTaxRate;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update the burn rate.\\r\\n     * Can only be called by the current operator.\\r\\n     */\\r\\n    function updateBurnRate(uint16 _burnRate) public onlyOperator {\\r\\n        require(\\r\\n            _burnRate \\u003c= 100,\\r\\n            \\\"WEDEX::updateBurnRate: Burn rate must not exceed the maximum rate.\\\"\\r\\n        );\\r\\n        emit BurnRateUpdated(msg.sender, burnRate, _burnRate);\\r\\n        burnRate = _burnRate;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update the max transfer amount rate.\\r\\n     * Can only be called by the current operator.\\r\\n     */\\r\\n    function updateMaxTransferAmountRate(uint16 _maxTransferAmountRate)\\r\\n        public\\r\\n        onlyOperator\\r\\n    {\\r\\n        require(\\r\\n            _maxTransferAmountRate \\u003c= 10000,\\r\\n            \\\"WEDEX::updateMaxTransferAmountRate: Max transfer amount rate must not exceed the maximum rate.\\\"\\r\\n        );\\r\\n        emit MaxTransferAmountRateUpdated(\\r\\n            msg.sender,\\r\\n            maxTransferAmountRate,\\r\\n            _maxTransferAmountRate\\r\\n        );\\r\\n        maxTransferAmountRate = _maxTransferAmountRate;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update the min amount to liquify.\\r\\n     * Can only be called by the current operator.\\r\\n     */\\r\\n    function updateMinAmountToLiquify(uint256 _minAmount) public onlyOperator {\\r\\n        emit MinAmountToLiquifyUpdated(\\r\\n            msg.sender,\\r\\n            minAmountToLiquify,\\r\\n            _minAmount\\r\\n        );\\r\\n        minAmountToLiquify = _minAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Exclude or include an address from antiWhale.\\r\\n     * Can only be called by the current operator.\\r\\n     */\\r\\n    function setExcludedFromAntiWhale(address _account, bool _excluded)\\r\\n        public\\r\\n        onlyOperator\\r\\n    {\\r\\n        _excludedFromAntiWhale[_account] = _excluded;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update the swapAndLiquifyEnabled.\\r\\n     * Can only be called by the current operator.\\r\\n     */\\r\\n    function updateSwapAndLiquifyEnabled(bool _enabled) public onlyOperator {\\r\\n        emit SwapAndLiquifyEnabledUpdated(msg.sender, _enabled);\\r\\n        swapAndLiquifyEnabled = _enabled;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update the swap router.\\r\\n     * Can only be called by the current operator.\\r\\n     */\\r\\n    function updateWedexSwapRouter(address _router) public onlyOperator {\\r\\n        wedexSwapRouter = IUniswapV2Router02(_router);\\r\\n        wedexSwapPair = IUniswapV2Factory(wedexSwapRouter.factory()).getPair(\\r\\n            address(this),\\r\\n            busdAddress\\r\\n        );\\r\\n        require(\\r\\n            wedexSwapPair != address(0),\\r\\n            \\\"WEDEX::updateWedexSwapRouter: Invalid pair address.\\\"\\r\\n        );\\r\\n        emit WedexSwapRouterUpdated(\\r\\n            msg.sender,\\r\\n            address(wedexSwapRouter),\\r\\n            wedexSwapPair\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // Recover lost BNB and send it to the treasury\\r\\n    function recoverLostBNB() public onlyOperator {\\r\\n        address payable _owner = payable(msg.sender);\\r\\n        _owner.transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n    // Ensure requested tokens aren\\u0027t users LP or RUSH tokens\\r\\n    function recoverLostTokensExceptOurTokens(address _token, uint256 amount)\\r\\n        public\\r\\n        onlyOperator\\r\\n    {\\r\\n        require(_token != address(this), \\\"Cannot recover WEDEX tokens\\\");\\r\\n        BEP20(_token).transfer(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    // After activating cannot lock again\\r\\n    function activateTrading() public onlyOperator {\\r\\n        presaleUnlocked = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current operator.\\r\\n     */\\r\\n    function operator() public view returns (address) {\\r\\n        return _operator;\\r\\n    }\\r\\n\\r\\n    // function minter() public view returns (address) {\\r\\n    //     return _minter;\\r\\n    // }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers operator of the contract to a new account (`newOperator`).\\r\\n     * Can only be called by the current operator.\\r\\n     */\\r\\n    function transferOperator(address newOperator) public onlyOperator {\\r\\n        require(\\r\\n            newOperator != address(0),\\r\\n            \\\"WEDEX::transferOperator: new operator is the zero address\\\"\\r\\n        );\\r\\n        emit OperatorTransferred(_operator, newOperator);\\r\\n        _operator = newOperator;\\r\\n    }\\r\\n\\r\\n    // function transferMinter(address newMinter) public onlyOperator {\\r\\n    //     require(\\r\\n    //         newMinter != address(0),\\r\\n    //         \\\"WEDEX::transferOperator: new operator is the zero address\\\"\\r\\n    //     );\\r\\n    //     emit OperatorTransferred(_minter, newMinter);\\r\\n    //     _minter = newMinter;\\r\\n    // }\\r\\n    \\r\\n    function setMinter(address _minter, bool _isMinter) public onlyOwner {\\r\\n        isMinter[_minter] = _isMinter;\\r\\n        emit SetMinter(_minter,_isMinter);\\r\\n    }\\r\\n\\r\\n    // Copied and modified from YAM code:\\r\\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernanceStorage.sol\\r\\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernance.sol\\r\\n    // Which is copied and modified from COMPOUND:\\r\\n    // https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/Comp.sol\\r\\n\\r\\n    /// @dev A record of each accounts delegate\\r\\n    mapping(address =\\u003e address) internal _delegates;\\r\\n\\r\\n    /// @notice A checkpoint for marking number of votes from a given block\\r\\n    struct Checkpoint {\\r\\n        uint32 fromBlock;\\r\\n        uint256 votes;\\r\\n    }\\r\\n\\r\\n    /// @notice A record of votes checkpoints for each account, by index\\r\\n    mapping(address =\\u003e mapping(uint32 =\\u003e Checkpoint)) public checkpoints;\\r\\n\\r\\n    /// @notice The number of checkpoints for each account\\r\\n    mapping(address =\\u003e uint32) public numCheckpoints;\\r\\n\\r\\n    /// @notice The EIP-712 typehash for the contract\\u0027s domain\\r\\n    bytes32 public constant DOMAIN_TYPEHASH =\\r\\n        keccak256(\\r\\n            \\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\"\\r\\n        );\\r\\n\\r\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\r\\n    bytes32 public constant DELEGATION_TYPEHASH =\\r\\n        keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\r\\n\\r\\n    /// @notice A record of states for signing / validating signatures\\r\\n    mapping(address =\\u003e uint256) public nonces;\\r\\n\\r\\n    /// @notice An event thats emitted when an account changes its delegate\\r\\n    event DelegateChanged(\\r\\n        address indexed delegator,\\r\\n        address indexed fromDelegate,\\r\\n        address indexed toDelegate\\r\\n    );\\r\\n\\r\\n    /// @notice An event thats emitted when a delegate account\\u0027s vote balance changes\\r\\n    event DelegateVotesChanged(\\r\\n        address indexed delegate,\\r\\n        uint256 previousBalance,\\r\\n        uint256 newBalance\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\r\\n     * @param delegator The address to get delegatee for\\r\\n     */\\r\\n    function delegates(address delegator) external view returns (address) {\\r\\n        return _delegates[delegator];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\r\\n     * @param delegatee The address to delegate votes to\\r\\n     */\\r\\n    function delegate(address delegatee) external {\\r\\n        return _delegate(msg.sender, delegatee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Delegates votes from signatory to `delegatee`\\r\\n     * @param delegatee The address to delegate votes to\\r\\n     * @param nonce The contract state required to match the signature\\r\\n     * @param expiry The time at which to expire the signature\\r\\n     * @param v The recovery byte of the signature\\r\\n     * @param r Half of the ECDSA signature pair\\r\\n     * @param s Half of the ECDSA signature pair\\r\\n     */\\r\\n    function delegateBySig(\\r\\n        address delegatee,\\r\\n        uint256 nonce,\\r\\n        uint256 expiry,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external {\\r\\n        bytes32 domainSeparator = keccak256(\\r\\n            abi.encode(\\r\\n                DOMAIN_TYPEHASH,\\r\\n                keccak256(bytes(name())),\\r\\n                getChainId(),\\r\\n                address(this)\\r\\n            )\\r\\n        );\\r\\n\\r\\n        bytes32 structHash = keccak256(\\r\\n            abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry)\\r\\n        );\\r\\n\\r\\n        bytes32 digest = keccak256(\\r\\n            abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash)\\r\\n        );\\r\\n\\r\\n        address signatory = ecrecover(digest, v, r, s);\\r\\n        require(\\r\\n            signatory != address(0),\\r\\n            \\\"WEDEX::delegateBySig: invalid signature\\\"\\r\\n        );\\r\\n        require(\\r\\n            nonce == nonces[signatory]++,\\r\\n            \\\"WEDEX::delegateBySig: invalid nonce\\\"\\r\\n        );\\r\\n        require(now \\u003c= expiry, \\\"WEDEX::delegateBySig: signature expired\\\");\\r\\n        return _delegate(signatory, delegatee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the current votes balance for `account`\\r\\n     * @param account The address to get votes balance\\r\\n     * @return The number of current votes for `account`\\r\\n     */\\r\\n    function getCurrentVotes(address account) external view returns (uint256) {\\r\\n        uint32 nCheckpoints = numCheckpoints[account];\\r\\n        return\\r\\n            nCheckpoints \\u003e 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Determine the prior number of votes for an account as of a block number\\r\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\r\\n     * @param account The address of the account to check\\r\\n     * @param blockNumber The block number to get the vote balance at\\r\\n     * @return The number of votes the account had as of the given block\\r\\n     */\\r\\n    function getPriorVotes(address account, uint256 blockNumber)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(\\r\\n            blockNumber \\u003c block.number,\\r\\n            \\\"WEDEX::getPriorVotes: not yet determined\\\"\\r\\n        );\\r\\n\\r\\n        uint32 nCheckpoints = numCheckpoints[account];\\r\\n        if (nCheckpoints == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // First check most recent balance\\r\\n        if (checkpoints[account][nCheckpoints - 1].fromBlock \\u003c= blockNumber) {\\r\\n            return checkpoints[account][nCheckpoints - 1].votes;\\r\\n        }\\r\\n\\r\\n        // Next check implicit zero balance\\r\\n        if (checkpoints[account][0].fromBlock \\u003e blockNumber) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint32 lower = 0;\\r\\n        uint32 upper = nCheckpoints - 1;\\r\\n        while (upper \\u003e lower) {\\r\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\r\\n            Checkpoint memory cp = checkpoints[account][center];\\r\\n            if (cp.fromBlock == blockNumber) {\\r\\n                return cp.votes;\\r\\n            } else if (cp.fromBlock \\u003c blockNumber) {\\r\\n                lower = center;\\r\\n            } else {\\r\\n                upper = center - 1;\\r\\n            }\\r\\n        }\\r\\n        return checkpoints[account][lower].votes;\\r\\n    }\\r\\n\\r\\n    function _delegate(address delegator, address delegatee) internal {\\r\\n        address currentDelegate = _delegates[delegator];\\r\\n        uint256 delegatorBalance = balanceOf(delegator); // balance of underlying Wedex (not scaled);\\r\\n        _delegates[delegator] = delegatee;\\r\\n\\r\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\r\\n\\r\\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\r\\n    }\\r\\n\\r\\n    function _moveDelegates(\\r\\n        address srcRep,\\r\\n        address dstRep,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        if (srcRep != dstRep \\u0026\\u0026 amount \\u003e 0) {\\r\\n            if (srcRep != address(0)) {\\r\\n                // decrease old representative\\r\\n                uint32 srcRepNum = numCheckpoints[srcRep];\\r\\n                uint256 srcRepOld = srcRepNum \\u003e 0\\r\\n                    ? checkpoints[srcRep][srcRepNum - 1].votes\\r\\n                    : 0;\\r\\n                uint256 srcRepNew = srcRepOld.sub(amount);\\r\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\r\\n            }\\r\\n\\r\\n            if (dstRep != address(0)) {\\r\\n                // increase new representative\\r\\n                uint32 dstRepNum = numCheckpoints[dstRep];\\r\\n                uint256 dstRepOld = dstRepNum \\u003e 0\\r\\n                    ? checkpoints[dstRep][dstRepNum - 1].votes\\r\\n                    : 0;\\r\\n                uint256 dstRepNew = dstRepOld.add(amount);\\r\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _writeCheckpoint(\\r\\n        address delegatee,\\r\\n        uint32 nCheckpoints,\\r\\n        uint256 oldVotes,\\r\\n        uint256 newVotes\\r\\n    ) internal {\\r\\n        uint32 blockNumber = safe32(\\r\\n            block.number,\\r\\n            \\\"WEDEX::_writeCheckpoint: block number exceeds 32 bits\\\"\\r\\n        );\\r\\n\\r\\n        if (\\r\\n            nCheckpoints \\u003e 0 \\u0026\\u0026\\r\\n            checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber\\r\\n        ) {\\r\\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\r\\n        } else {\\r\\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(\\r\\n                blockNumber,\\r\\n                newVotes\\r\\n            );\\r\\n            numCheckpoints[delegatee] = nCheckpoints + 1;\\r\\n        }\\r\\n\\r\\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\r\\n    }\\r\\n\\r\\n    function safe32(uint256 n, string memory errorMessage)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint32)\\r\\n    {\\r\\n        require(n \\u003c 2**32, errorMessage);\\r\\n        return uint32(n);\\r\\n    }\\r\\n\\r\\n    function getChainId() internal pure returns (uint256) {\\r\\n        uint256 chainId;\\r\\n        assembly {\\r\\n            chainId := chainid()\\r\\n        }\\r\\n        return chainId;\\r\\n    }\\r\\n}\\r\\n// File: contracts\\\\WedexMaster.sol\\r\\n\\r\\n// Adding-Identifier: MIT\\r\\n\\r\\n\"},\"WexRefferal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\npragma solidity \\u003e=0.4.0;\\r\\n\\r\\n// File: contracts\\\\libs\\\\IWEXReferral.sol\\r\\n\\r\\n// Adding-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\ninterface IWedexReferral {\\r\\n    /**\\r\\n     * @dev Record referral.\\r\\n     */\\r\\n    function recordReferral(address _user, address _referrer,bool _vipBranch, uint256 _leaderCommission) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Record referral commission.\\r\\n     */\\r\\n    function recordReferralCommission(address referrer, uint256 commission) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Get the referrer address that referred the user.\\r\\n     */\\r\\n    function getReferrer(address user) external view returns (address);\\r\\n    \\r\\n    function addTotalFund(address _referrer, uint256 _amount, uint256 _loop) external;\\r\\n    \\r\\n    function reduceTotalFund(address _referrer, uint256 _amount, uint256 _loop) external;\\r\\n    \\r\\n    function getTeam(address _user) external view returns (address [] memory);\\r\\n    \\r\\n    function totalFund(address _referrer) external view returns (uint256);\\r\\n    \\r\\n}\\r\\n\\r\\n// File: contracts\\\\libs\\\\IWEXReferral.sol\\r\\n\\r\\n// Adding-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\ninterface IWexProfile {\\r\\n\\r\\n    /**\\r\\n     * @dev Get the referrer address that referred the user.\\r\\n     */\\r\\n    function getUserStatus(address _userAddress) external view returns (bool);\\r\\n    \\r\\n}\\r\\n// File: contracts\\\\WEXReferral.sol\\r\\n\\r\\n// Adding-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n\\r\\ncontract WEXReferral is IWedexReferral, Ownable {\\r\\n    using SafeBEP20 for IBEP20;\\r\\n    using SafeMath for uint256;\\r\\n    \\r\\n    struct ReferrersInfo {\\r\\n        address referrer;\\r\\n        bool vipBranch; \\r\\n        uint256 leaderCommission;\\r\\n    }\\r\\n    \\r\\n    mapping(address =\\u003e bool) public operators;\\r\\n    mapping(address =\\u003e ReferrersInfo) public referrers; // user address =\\u003e referrerInfo\\r\\n    mapping(address =\\u003e uint256) public referralsCount; // referrer address =\\u003e referrals count\\r\\n    mapping(address =\\u003e uint256) public override totalFund; // referrer address =\\u003e referrals count\\r\\n    mapping(address =\\u003e uint256) public referalsTier; // referrer address =\\u003e referrals Tier\\r\\n    mapping(address =\\u003e uint256) public totalReferralCommissions; // referrer address =\\u003e total referral commissions\\r\\n    mapping(address =\\u003e address[]) public team; // return alll member in the team\\r\\n    mapping(address =\\u003e bool) public blacklist; //mapping address to blacklist\\r\\n    mapping(address =\\u003e bool) public migrated;\\r\\n    uint256 public maximumLoop = 10;\\r\\n    uint256 public vipRequirement = 2e5*1e18;\\r\\n    IWexProfile public wexProfile;\\r\\n    IWedexReferral public oldReferralContract;\\r\\n    event ReferralRecorded(address indexed user, address indexed referrer);\\r\\n    event ReferralCommissionRecorded(address indexed referrer, uint256 commission);\\r\\n    event OperatorUpdated(address indexed operator, bool indexed status);\\r\\n    event TotalFundAdd(address _referrer, uint256 _amount, uint256 _loop);\\r\\n    event ReduceTotalFund(address _referrer, uint256 _amount, uint256 currentLoop);\\r\\n\\r\\n    modifier onlyOperator {\\r\\n        require(operators[msg.sender], \\\"Operator: caller is not the operator\\\");\\r\\n        _;\\r\\n    }\\r\\n    constructor(\\r\\n        IWedexReferral _oldWedexreferral,\\r\\n        IWexProfile _wexProfile\\r\\n        ) public\\r\\n        {\\r\\n        wexProfile = _wexProfile;\\r\\n        oldReferralContract = _oldWedexreferral;\\r\\n        operators[_msgSender()] = true;\\r\\n     }\\r\\n    function noLoop(address _user,address _referrer) public returns(bool){\\r\\n        if(referrers[_referrer].referrer==_user) {\\r\\n            return false;\\r\\n        }\\r\\n        if(referrers[_referrer].referrer==address(0)) {\\r\\n            return true;\\r\\n        }\\r\\n        else {\\r\\n            return noLoop(_referrer,referrers[_referrer].referrer);\\r\\n        }\\r\\n    }\\r\\n    function recordReferral(address _user, address _referrer,bool _vipBranch, uint256 _leaderCommission) public override onlyOperator {\\r\\n        if (_user != address(0)\\r\\n            \\u0026\\u0026 _referrer != address(0)\\r\\n            \\u0026\\u0026 _user != _referrer\\r\\n            \\u0026\\u0026 referrers[_user].referrer == address(0)\\r\\n            \\u0026\\u0026 noLoop(_user,_referrer)\\r\\n        ) {\\r\\n            \\r\\n            if(referrers[_referrer].vipBranch){\\r\\n                _vipBranch = true;\\r\\n                _leaderCommission = referrers[_referrer].leaderCommission;\\r\\n            } else if(!isVip(_referrer) \\u0026\\u0026 _vipBranch) {\\r\\n                _vipBranch = false;\\r\\n                _leaderCommission = 0;\\r\\n            }\\r\\n            \\r\\n            referrers[_user] = ReferrersInfo(\\r\\n                {\\r\\n                    referrer: _referrer,\\r\\n                    vipBranch: _vipBranch,\\r\\n                    leaderCommission: _leaderCommission\\r\\n                    \\r\\n                });\\r\\n            referralsCount[_referrer] += 1;\\r\\n            team[_referrer].push(_user);\\r\\n            emit ReferralRecorded(_user, _referrer);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function recordReferralCommission(address _referrer, uint256 _commission) public override onlyOperator {\\r\\n        if (_referrer != address(0) \\u0026\\u0026 _commission \\u003e 0) {\\r\\n            totalReferralCommissions[_referrer] += _commission;\\r\\n            emit ReferralCommissionRecorded(_referrer, _commission);\\r\\n        }\\r\\n    }\\r\\n    function addTotalFund(address _referrer, uint256 _amount, uint256 _loop) public override onlyOperator {\\r\\n        if (_referrer != address(0) \\u0026\\u0026 _amount \\u003e 0 \\u0026\\u0026 _loop\\u003cmaximumLoop) {\\r\\n            uint256 currentLoop = _loop.add(1);\\r\\n            totalFund[_referrer] = totalFund[_referrer].add(_amount);\\r\\n            if(totalFund[_referrer]\\u003ereferalsTier[_referrer]){\\r\\n                referalsTier[_referrer] = totalFund[_referrer];\\r\\n            }\\r\\n            if(referrers[_referrer].referrer != address(0)){\\r\\n                addTotalFund(referrers[_referrer].referrer, _amount, currentLoop);\\r\\n            }\\r\\n            emit TotalFundAdd(_referrer, _amount, _loop);\\r\\n        }\\r\\n    }\\r\\n    function reduceTotalFund(address _referrer, uint256 _amount, uint256 _loop) public override onlyOperator {\\r\\n        if (_referrer != address(0) \\u0026\\u0026 _amount \\u003e 0 \\u0026\\u0026 _loop\\u003cmaximumLoop \\u0026\\u0026 totalFund[_referrer]\\u003e_amount) {\\r\\n            uint256 currentLoop = _loop.add(1);\\r\\n            totalFund[_referrer] = totalFund[_referrer].sub(_amount);\\r\\n            if(referrers[_referrer].referrer != address(0)){\\r\\n                reduceTotalFund(referrers[_referrer].referrer, _amount, currentLoop);\\r\\n            }\\r\\n            emit ReduceTotalFund(_referrer, _amount, currentLoop);\\r\\n        }\\r\\n    }\\r\\n    function setMaxloop(uint256 _maximumLoop) public onlyOperator {\\r\\n        maximumLoop = _maximumLoop;\\r\\n    }\\r\\n    function addBlacklist(address user) external onlyOwner {\\r\\n        blacklist[user] = true;\\r\\n    }\\r\\n    function removeReferrer(address _user) external onlyOwner {\\r\\n        referrers[_user].referrer = address(0);\\r\\n    }\\r\\n    //\\r\\n    function getReferrer(address _user) public override view returns(address) {\\r\\n        return referrers[_user].referrer;\\r\\n    }\\r\\n    function isVip(address user) public view returns(bool){\\r\\n        if(referalsTier[user]\\u003evipRequirement)\\r\\n            return true;\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function setTotalFund(address _referrer, uint256 _amount) external onlyOperator{\\r\\n        totalFund[_referrer] = _amount;\\r\\n        referalsTier[_referrer] = _amount;\\r\\n    }\\r\\n    function getTeam(address _user) public override view returns (address [] memory){\\r\\n        return team[_user];\\r\\n    }\\r\\n    function setWexProfile(IWexProfile _wexProfile) public onlyOwner {\\r\\n        wexProfile = _wexProfile;\\r\\n    }\\r\\n    function setVipRequirement(uint256 _vipRequirement) public onlyOwner {\\r\\n        vipRequirement = _vipRequirement;\\r\\n    }\\r\\n    function updateMigration(address _referrer, bool _status) external {\\r\\n        migrated[_referrer] = _status;\\r\\n    }\\r\\n    function migration(address[] memory _referrers, bool _vipBranch, uint256 _leaderCommission ) public onlyOperator {\\r\\n        if(_referrers.length\\u003e0) {\\r\\n            for(uint256 j =0; j\\u003c _referrers.length;j++){\\r\\n                if(!migrated[_referrers[j]]){\\r\\n                    address[] memory oldteam = oldReferralContract.getTeam(_referrers[j]);\\r\\n                    if(oldteam.length\\u003e0){\\r\\n                        for(uint256 i = 0; i\\u003coldteam.length;++i){\\r\\n                            referrers[oldteam[i]] = ReferrersInfo({\\r\\n                              referrer: _referrers[j],\\r\\n                              vipBranch: _vipBranch,\\r\\n                              leaderCommission: _leaderCommission\\r\\n                            });\\r\\n                            \\r\\n                        }\\r\\n                        migration(oldteam,_vipBranch,_leaderCommission);\\r\\n                        team[_referrers[j]] = oldteam;\\r\\n                    }\\r\\n                    migrated[_referrers[j]] = true;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    // Update the status of the operator\\r\\n    function updateOperator(address _operator, bool _status) external onlyOwner {\\r\\n        operators[_operator] = _status;\\r\\n        emit OperatorUpdated(_operator, _status);\\r\\n    }\\r\\n    // Owner can drain tokens that are sent here by mistake\\r\\n    function drainBEP20Token(IBEP20 _token, uint256 _amount, address _to) external onlyOwner {\\r\\n        _token.safeTransfer(_to, _amount);\\r\\n    }\\r\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract Wedex\",\"name\":\"_wedex\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_wexLPAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"EmissionRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commissionAmount\",\"type\":\"uint256\"}],\"name\":\"ReferralCommissionPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLockedUp\",\"type\":\"uint256\"}],\"name\":\"RewardLockedUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_HARVEST_INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_harvestInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fixedApr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_directCommission\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busdAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"canHarvest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_vipBranch\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_leaderCommission\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"directCommissionToken\",\"outputs\":[{\"internalType\":\"contract Wedex\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyLockingWithdrawEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getFreeInvestmentAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getLPPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getLeader\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUpperVip\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWexPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMigrating\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_investments_amount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_investments_lock_until\",\"type\":\"uint256[]\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"migrated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newChefAddress\",\"outputs\":[{\"internalType\":\"contract IMigratorChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"oldChefAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeRouterV2\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingWedex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accWedexPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"harvestInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fixedApr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token1BusdLPaddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"directCommission\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverLostBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverLostTokensExceptOurTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referDepth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referralCommissionTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract Wedex\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_harvestInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fixedApr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_directCommission\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_busdAddress\",\"type\":\"address\"}],\"name\":\"setBusdAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devAddress\",\"type\":\"address\"}],\"name\":\"setDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Wedex\",\"name\":\"_directCommissionToken\",\"type\":\"address\"}],\"name\":\"setDirectCommissionToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_emergencyWithdrawEnable\",\"type\":\"bool\"}],\"name\":\"setEmergencyWithdrawEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isMigrating\",\"type\":\"bool\"}],\"name\":\"setIsMigrating\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMigratorChef\",\"name\":\"_newChefAddress\",\"type\":\"address\"}],\"name\":\"setNewChefAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oldChefAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isTrue\",\"type\":\"bool\"}],\"name\":\"setOldChefAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"_pancakeRouterV2\",\"type\":\"address\"}],\"name\":\"setPancakeRouterV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depth\",\"type\":\"uint256\"}],\"name\":\"setReferDepth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_referralCommissionTier\",\"type\":\"uint256[]\"}],\"name\":\"setReferralCommissionTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Wedex\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"setRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract WEXReferral\",\"name\":\"_wedexReferral\",\"type\":\"address\"}],\"name\":\"setWedexReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wexLPAddress\",\"type\":\"address\"}],\"name\":\"setWexLpAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Wedex\",\"name\":\"_wedex\",\"type\":\"address\"}],\"name\":\"setWexToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLockedUpRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardLockedUp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextHarvestUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startInvestmentPosition\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wedex\",\"outputs\":[{\"internalType\":\"contract Wedex\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wedexReferral\",\"outputs\":[{\"internalType\":\"contract WEXReferral\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wexLPAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"withdrawInvestment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WedexChef", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000009bb6042a19bb3a6981e9a47ec0f006dbd28a8d100000000000000000000000000000000000000000000000000000000000000000000000000000000000000001921d10cb9365869341e46f687cf16209951b4f9", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://66682c4976c938582bc82075500ef99b4633935d3b6145f69e0a75017aa661d8"}