{"SourceCode": "pragma solidity 0.5.16;\r\ninterface IBEP20 {\r\nfunction totalSupply() external view returns (uint256);\r\nfunction decimals() external view returns (uint8);\r\nfunction symbol() external view returns (string memory);\r\nfunction name() external view returns (string memory);\r\nfunction getOwner() external view returns (address);\r\nfunction balanceOf(address account) external view returns (uint256);\r\nfunction transfer(address recipient, uint256 amount) external returns (bool);\r\nfunction allowance(address _owner, address spender) external view returns (uint256);\r\nfunction approve(address spender, uint256 amount) external returns (bool);\r\nfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\nevent Transfer(address indexed from, address indexed to, uint256 value);\r\nevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ncontract Context {\r\nconstructor () internal { }\r\nfunction _msgSender() internal view returns (address payable) {\r\nreturn msg.sender;\r\n}\r\nfunction _msgData() internal view returns (bytes memory) {\r\nthis;\r\nreturn msg.data;\r\n}\r\n}\r\nlibrary SafeMath {\r\nfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\nuint256 c = a + b;\r\nrequire(c >= a, \"SafeMath: addition overflow\");\r\nreturn c;\r\n}\r\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\nreturn sub(a, b, \"SafeMath: subtraction overflow\");\r\n}\r\nfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\nrequire(b <= a, errorMessage);\r\nuint256 c = a - b;\r\nreturn c;\r\n}\r\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\nif (a == 0) {\r\nreturn 0;\r\n}\r\nuint256 c = a * b;\r\nrequire(c / a == b, \"SafeMath: multiplication overflow\");\r\nreturn c;\r\n}\r\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\nreturn div(a, b, \"SafeMath: division by zero\");\r\n}\r\nfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\nrequire(b > 0, errorMessage);\r\nuint256 c = a / b;\r\nreturn c;\r\n}\r\nfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\nreturn mod(a, b, \"SafeMath: modulo by zero\");\r\n}\r\nfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\nrequire(b != 0, errorMessage);\r\nreturn a % b;\r\n}\r\n}\r\ncontract Ownable is Context {\r\naddress private _owner;\r\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\nconstructor () internal {\r\naddress msgSender = _msgSender();\r\n_owner = msgSender;\r\nemit OwnershipTransferred(address(0), msgSender);\r\n}\r\nfunction owner() internal view returns (address) {\r\nreturn _owner;\r\n}\r\nmodifier onlyOwner() {\r\nrequire(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n_;\r\n}\r\nfunction renounceOwnership() internal onlyOwner {\r\nemit OwnershipTransferred(_owner, address(0));\r\n_owner = address(0);\r\n}\r\nfunction transferOwnership(address newOwner) internal onlyOwner {\r\n_transferOwnership(newOwner);\r\n}\r\nfunction _transferOwnership(address newOwner) internal {\r\nrequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\nemit OwnershipTransferred(_owner, newOwner);\r\n_owner = newOwner;\r\n}\r\n}\r\ncontract Satozhi is Context, IBEP20, Ownable {\r\nusing SafeMath for uint256;\r\nmapping (address => uint256) private _balances;\r\nmapping (address => mapping (address => uint256)) private _allowances;\r\nmapping (address => uint256) private _accountPoB;\r\nmapping (address => uint256) private _accountTs;\r\nuint256 private _blockRewards = 5000000000;\r\nuint256 private _blockSpacing = 600;\r\nuint256 private _contractPoB;\r\nuint256 private _totalSupply;\r\nuint8 private _decimals;\r\nstring private _symbol;\r\nstring private _name;\r\nconstructor() public {\r\n_name = \"Satozhi\";\r\n_symbol = \"SATOZ\";\r\n_decimals = 8;\r\n_totalSupply = 2100000000000000;\r\n_balances[msg.sender] = _totalSupply;\r\nemit Transfer(address(0), msg.sender, _totalSupply);\r\n}\r\nfunction blockRewards() external view returns (uint256) {\r\nreturn _blockRewards;\r\n}\r\nfunction blockSpacing() external view returns (uint256) {\r\nreturn _blockSpacing;\r\n}\r\nfunction contractPoB() external view returns (uint256) {\r\nreturn _contractPoB;\r\n}\r\nfunction accountPoB(address account) external view returns (uint256) {\r\nreturn _accountPoB[account];\r\n}\r\nfunction getOwner() external view returns (address) {\r\nreturn owner();\r\n}\r\nfunction decimals() external view returns (uint8) {\r\nreturn _decimals;\r\n}\r\nfunction symbol() external view returns (string memory) {\r\nreturn _symbol;\r\n}\r\nfunction name() external view returns (string memory) {\r\nreturn _name;\r\n}\r\nfunction totalSupply() external view returns (uint256) {\r\nreturn _totalSupply;\r\n}\r\nfunction balanceOf(address account) external view returns (uint256) {\r\nuint256 virtualBalance = _virtualRewards(account);\r\nreturn _balances[account] + virtualBalance;\r\n}\r\nfunction transfer(address recipient, uint256 amount) external returns (bool) {\r\n_balanceRewards(_msgSender());\r\n_transfer(_msgSender(), recipient, amount);\r\nreturn true;\r\n}\r\nfunction allowance(address owner, address spender) external view returns (uint256) {\r\nreturn _allowances[owner][spender];\r\n}\r\nfunction approve(address spender, uint256 amount) external returns (bool) {\r\n_balanceRewards(_msgSender());\r\n_approve(_msgSender(), spender, amount);\r\nreturn true;\r\n}\r\nfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {\r\n_balanceRewards(sender);\r\n_transfer(sender, recipient, amount);\r\n_approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\"));\r\nreturn true;\r\n}\r\nfunction increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n_balanceRewards(_msgSender());\r\n_approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\nreturn true;\r\n}\r\nfunction decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n_balanceRewards(_msgSender());\r\n_approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\"));\r\nreturn true;\r\n}\r\nfunction _virtualRewards(address account) internal view returns (uint256) {\r\nuint256 _timediff = block.timestamp-_accountTs[account];\r\nuint256 _blocks = uint256(_timediff/_blockSpacing);\r\nif (_timediff>0 && _blocks>0 && _accountTs[account]>0) {\r\nuint256 _portion = uint256((100000000*_accountPoB[account])/_contractPoB);\r\nuint256 _rewards = uint256(((_portion*_blockRewards)/100000000)*_blocks);\r\nreturn _rewards;\r\n} else {\r\nreturn 0;\r\n}\r\n}\r\nfunction mint(uint256 amount) public onlyOwner returns (bool) {\r\n_balanceRewards(_msgSender());\r\n_mint(_msgSender(), amount);\r\nreturn true;\r\n}\r\nfunction burn(uint256 amount) public returns (bool) {\r\n_balanceRewards(_msgSender());\r\n_burn(_msgSender(), amount);\r\nreturn true;\r\n}\r\nfunction _balanceRewards(address account) internal {\r\nuint256 _timediff = block.timestamp-_accountTs[account];\r\nuint256 _blocks = uint256(_timediff/_blockSpacing);\r\nif (_timediff>0 && _blocks>0 && _accountTs[account]>0) {\r\nuint256 _portion = uint256((100000000*_accountPoB[account])/_contractPoB);\r\nuint256 _rewards = uint256(((_portion*_blockRewards)/100000000)*_blocks);\r\nuint256 _modulus = uint256(_timediff%_blockSpacing);\r\n_balances[account] = _balances[account]+_rewards;\r\n_accountTs[account] = block.timestamp-_modulus;\r\n_totalSupply = _totalSupply+_rewards;\r\n}\r\n}\r\nfunction _transfer(address sender, address recipient, uint256 amount) internal {\r\nrequire(sender != address(0), \"BEP20: transfer from the zero address\");\r\nrequire(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n_balances[sender] = _balances[sender].sub(amount, \"BEP20: transfer amount exceeds balance\");\r\n_balances[recipient] = _balances[recipient].add(amount);\r\nemit Transfer(sender, recipient, amount);\r\n}\r\nfunction _mint(address account, uint256 amount) internal {\r\nrequire(account != address(0), \"BEP20: mint to the zero address\");\r\n_totalSupply = _totalSupply.add(amount);\r\n_balances[account] = _balances[account].add(amount);\r\nemit Transfer(address(0), account, amount);\r\n}\r\nfunction _burn(address account, uint256 amount) internal {\r\nrequire(account != address(0), \"BEP20: burn from the zero address\");\r\n_balances[account] = _balances[account].sub(amount, \"BEP20: burn amount exceeds balance\");\r\n_totalSupply = _totalSupply.sub(amount);\r\nemit Transfer(account, address(0), amount);\r\n}\r\nfunction _approve(address owner, address spender, uint256 amount) internal {\r\nrequire(owner != address(0), \"BEP20: approve from the zero address\");\r\nrequire(spender != address(0), \"BEP20: approve to the zero address\");\r\n_allowances[owner][spender] = amount;\r\nemit Approval(owner, spender, amount);\r\n}\r\nfunction _burnFrom(address account, uint256 amount) internal {\r\n_balanceRewards(account);\r\n_burn(account, amount);\r\n_approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"BEP20: burn amount exceeds allowance\"));\r\n}\r\nfunction ProofOfBurn(uint256 amount) public returns (bool) {\r\nrequire(_balances[_msgSender()] >= amount, \"BEP20: insufficient balance\");\r\n_balances[_msgSender()] = _balances[_msgSender()].sub(amount, \"BEP20: amount exceeds balance\");\r\n_balanceRewards(_msgSender());\r\n_totalSupply = _totalSupply.sub(amount);\r\n_contractPoB = _contractPoB+amount;\r\n_accountPoB[_msgSender()] = _accountPoB[_msgSender()]+amount;\r\n_accountTs[_msgSender()] = block.timestamp;\r\nreturn true;\r\n}\r\n}", "ABI": "[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProofOfBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accountPoB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blockRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blockSpacing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractPoB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Satozhi", "CompilerVersion": "v0.5.16+commit.9c3226ce", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://769603506e9ba0f81beccb9036eeb2aec922bfea6fed6b08f92a7ddd44e74cb4"}