{"SourceCode": "// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: TIGER/lib/Operator.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ncontract Operator is Ownable {\r\n    address private _operator;\r\n    event OperatorTransferred(address indexed previousOperator, address indexed newOperator);\r\n    constructor() {\r\n        _operator = _msgSender();\r\n        emit OperatorTransferred(address(0), _operator);\r\n    }\r\n    function operator() public view returns (address) {\r\n        return _operator;\r\n    }\r\n    modifier onlyOperator() {\r\n        require(_operator == msg.sender, 'operator: caller is not the operator');\r\n        _;\r\n    }\r\n    function isOperator() public view returns (bool) {\r\n        return _msgSender() == _operator;\r\n    }\r\n    function transferOperator(address newOperator_) public onlyOwner {\r\n        _transferOperator(newOperator_);\r\n    }\r\n    function _transferOperator(address newOperator_) internal {\r\n        require(newOperator_ != address(0), 'operator: zero address given for new operator');\r\n        emit OperatorTransferred(address(0), newOperator_);\r\n        _operator = newOperator_;\r\n    }\r\n}\r\n\r\n// File: TIGER/lib/IUniswapV2Router01.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n// File: TIGER/lib/IUniswapV2Router02.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n// File: TIGER/lib/IUniswapV2Pair.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n// File: TIGER/lib/IUniswapV2Factory.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n// File: TIGER/lib/SafeMath.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\nlibrary SafeMath {\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/interfaces/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n// File: TIGER/TIGERV2.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IBoard {\r\n    function allocateWithToken(uint256 amount) external;\r\n    function allocate(uint256 amount) external;\r\n}\r\n\r\ncontract Fomo5 {\r\n    using SafeMath for uint256;\r\n    address public dead = 0x000000000000000000000000000000000000dEaD;\r\n    uint256 public procRoundIndex = 0;\r\n    TIGERV2 tiger = TIGERV2(msg.sender);\r\n    constructor () {}\r\n    function proc() external {\r\n        require(msg.sender == address(tiger), \"permission denied\");\r\n        if(tiger.roundIndex() != procRoundIndex){\r\n            uint256 roundLen = tiger.roundLen(procRoundIndex);\r\n            uint256 tAmount = tiger.roundFomo5Amounts(procRoundIndex);\r\n            if(roundLen == 0 || tAmount <= 1e17){\r\n                procRoundIndex++;\r\n                return;\r\n            }\r\n            uint256 procMax = 10;\r\n            if(roundLen < procMax) procMax = roundLen;\r\n            uint256 amount = tAmount.div(procMax);\r\n            uint256 nextProcIndex = roundLen-procMax;\r\n            for(uint256 i = roundLen; i > nextProcIndex; i--){\r\n                address user = tiger.roundAddr(procRoundIndex,i-1);\r\n                tiger.transfer(user,amount);\r\n            }\r\n            procRoundIndex++;\r\n        }\r\n    }\r\n}\r\n\r\ncontract Fomo100 {\r\n    using SafeMath for uint256;\r\n    address public dead = 0x000000000000000000000000000000000000dEaD;\r\n    uint256 public procRoundIndex = 0;\r\n    uint256 public procIndex = 0;\r\n    uint256 public stepMax = 50;\r\n    TIGERV2 tiger = TIGERV2(msg.sender);\r\n    constructor () {}\r\n    function proc() external {\r\n        require(msg.sender == address(tiger), \"permission denied\");\r\n        if(tiger.roundIndex() != procRoundIndex){\r\n            uint256 roundLen = tiger.roundLen(procRoundIndex);\r\n            uint256 tAmount = tiger.roundFomo100Amounts(procRoundIndex);\r\n            if(roundLen == 0 || tAmount <= 1e17){\r\n                procRoundIndex++;\r\n                return;\r\n            }\r\n            uint256 procMax = 100;\r\n            if(roundLen < procMax) procMax = roundLen;\r\n            uint256 amount = tAmount.div(procMax);\r\n            uint256 step = stepMax;\r\n            if(procIndex + step > procMax) step = procMax - procIndex;\r\n            uint256 nextProcIndex = procIndex+step;\r\n            for(uint256 i = procIndex; i < nextProcIndex;i++){\r\n                address user = tiger.roundAddr(procRoundIndex,roundLen.sub(i).sub(1));\r\n                tiger.transfer(user,amount);\r\n            }\r\n            procIndex = nextProcIndex;\r\n            if(procIndex == procMax){\r\n                procIndex = 0;\r\n                procRoundIndex++;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract Node {\r\n}\r\n\r\ncontract TIGERV2 is IERC20, Operator {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) internal _balances;\r\n    mapping (address => mapping (address => uint256)) internal _allowances;\r\n    uint256 internal _totalSupply;\r\n\r\n    string private _name = \"TIGER\";\r\n    string private _symbol = \"TIGER\";\r\n    uint8 private _decimals = 18;\r\n\r\n    mapping(address => bool) public pairList;\r\n    mapping(address => bool) public isDelivers;\r\n    mapping(address => bool) public isExcludedFromNode;\r\n    mapping(address => bool) public isExcludedFromFomo;\r\n\r\n    address public _receiveUsdt;\r\n    IERC20 public usdt;\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n\r\n    address public uniswapV2Pair;\r\n    //buyFee\r\n    uint256 public nodeFee = 3;\r\n    uint256 public ecologyFee = 3;\r\n    uint256 public fomo5Fee = 2;\r\n    uint256 public boxBoard30Fee = 2;\r\n    //sellFee\r\n    uint256 public nodeFeeSell = 3;\r\n    uint256 public nftFee = 2;\r\n    uint256 public fomo100Fee = 3;\r\n    uint256 public poolFee = 2;\r\n\r\n    uint256 public swapTime;\r\n    bool public once = false;\r\n\r\n    IERC20 public lpPool;\r\n    address public node;\r\n    Fomo5 public fomo5;\r\n    Fomo100 public fomo100;\r\n    IBoard public nftBoard;\r\n    IBoard public boxBoard30;\r\n    IBoard public boxBoard100;\r\n    IBoard public poolBoard;\r\n\r\n    bool inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled = true;\r\n    uint256 public numTokensSellToAddToLiquidity = 100 * 1e18;\r\n    uint256 public total = 2100 * 1e4 * 1e18;\r\n    address public dead = 0x000000000000000000000000000000000000dEaD;\r\n    uint256 public toPool = 2059 * 1e4 * 1e18;\r\n\r\n    //Node param\r\n    uint256 public pairFee;  // /10000\r\n    uint256 public nodeLimit = 700 * 1e18;  //USDT\r\n    mapping(address => bool) public nodeWhiteList;\r\n    address[] shareholders;\r\n    mapping (address => uint256) shareholderIndexes;\r\n    mapping(address => bool) private _updated;\r\n    uint256 currentIndex;\r\n    uint256 public nodeHoldLimit = 1400 * 1e18;\r\n\r\n    uint256 public distributorTime;\r\n    uint256 public distributorGas = 300000;\r\n    uint256 public minPeriod = 10 minutes;\r\n    uint256 public minAmount = 0.05 * 1e18;\r\n    uint256 public minBalance = 100 * 1e18;\r\n    address private fromAddress;\r\n    address private toAddress;\r\n\r\n    uint256 public fomoDuration;\r\n    uint256 public fomoLastTime;\r\n    uint256 public fomoLimit = 200 * 1e18;  //USDT\r\n    uint256 public fomoDiviendPct = 50;  // /100\r\n\r\n    uint256 enterCount;\r\n    mapping(uint256 => address[]) public rounds;\r\n    mapping(uint256 => uint256) public roundFomo5Amounts;\r\n    mapping(uint256 => uint256) public roundFomo100Amounts;\r\n    uint256 public fomo5Amount = 0;\r\n    uint256 public fomo100Amount = 0;\r\n    uint256 public fomo5DivAmount = 0;\r\n    uint256 public fomo100DivAmount = 0;\r\n    uint256 public roundIndex = 0;\r\n    uint256 public fomo5Limit = 1000 * 1e18;\r\n    uint256 public fomo100Limit = 1000 * 1e18;\r\n    \r\n    modifier transferCounter {\r\n        enterCount = enterCount.add(1);\r\n        _;\r\n        enterCount = enterCount.sub(1, \"transfer counter\");\r\n    }\r\n    constructor (address _usdt, address _router, address receiveUsdt, address _receiveToken, uint256 _fomoDuration, uint256 _pairFee, uint256 _swapTime) {\r\n        usdt = IERC20(_usdt);\r\n        uniswapV2Router = IUniswapV2Router02(_router);\r\n        fomo5 = new Fomo5();\r\n        fomo100 = new Fomo100();\r\n        node = address(new Node());\r\n        // Create a uniswap pair for this new token\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory())\r\n        .createPair(address(this), address(usdt));\r\n\r\n        _receiveUsdt = receiveUsdt;\r\n        _mint(owner(), toPool);\r\n        _mint(_receiveToken, total.sub(toPool));\r\n        fomoDuration = _fomoDuration;\r\n        pairFee = _pairFee;\r\n        swapTime = _swapTime;\r\n\r\n        pairList[uniswapV2Pair] = true;\r\n        isDelivers[_receiveToken] = true;\r\n        isDelivers[owner()] = true;\r\n        isDelivers[address(this)] = true;\r\n        isDelivers[address(fomo5)] = true;\r\n        isDelivers[address(fomo100)] = true;\r\n        isExcludedFromNode[dead] = true;\r\n        isExcludedFromNode[address(uniswapV2Pair)] = true;\r\n    }\r\n\r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    function changeFomoDuration(uint256 _fomoDuration) public onlyOwner{\r\n        fomoDuration = _fomoDuration;\r\n    }\r\n\r\n    function setPool(address _nftBoard, address _lpPool, address _power, address _boxBoard30, address _boxBoard100, address _poolBoard) public onlyOwner{\r\n        nftBoard = IBoard(_nftBoard);\r\n        lpPool = IERC20(_lpPool);\r\n        isExcludedFromNode[_lpPool] = true;\r\n        isExcludedFromFomo[_power] = true;\r\n        boxBoard30 = IBoard(_boxBoard30);\r\n        boxBoard100 = IBoard(_boxBoard100);\r\n        poolBoard = IBoard(_poolBoard);\r\n\r\n        transferOperator(_power);\r\n    }\r\n\r\n    // function changeBuyFees(uint256 _fomo5Fee, uint256 _fomo100Fee, uint256 _nodeFee) public onlyOwner{\r\n    //     fomo5Fee = _fomo5Fee;\r\n    //     fomo100Fee = _fomo100Fee;\r\n    //     nodeFee = _nodeFee;\r\n    // }\r\n\r\n    // function changeSellFees(uint256 _nftFee, uint256 _swapFee, uint256 _nodeFee) public onlyOwner{\r\n    //     nftFee = _nftFee;\r\n    //     swapFee = _swapFee;\r\n    //     nodeSellFee = _nodeFee;\r\n    // }\r\n\r\n    function changeMin(uint256 _distributorGas, uint256 _minPeriod, uint256 _minAmount, uint256 _minBalance) public onlyOwner{\r\n        distributorGas = _distributorGas;\r\n        minPeriod = _minPeriod;\r\n        minAmount = _minAmount;\r\n        minBalance = _minBalance;\r\n    }\r\n\r\n    function changeLimits(uint256 _fomoLimit, uint256 _nodeLimit, uint256 _nodeHoldLimit) public onlyOwner{\r\n        fomoLimit = _fomoLimit;\r\n        nodeLimit = _nodeLimit;\r\n        nodeHoldLimit = _nodeHoldLimit;\r\n    }\r\n\r\n    //Token param change\r\n    function setPairList(address[] memory addrs, bool flag) public onlyOwner() {\r\n        for(uint i=0;i<addrs.length;i++){\r\n            pairList[addrs[i]] = flag;\r\n        }\r\n    }\r\n\r\n    function setDelivers(address[] memory addrs, bool flag) public onlyOwner() {\r\n        for(uint i=0;i<addrs.length;i++){\r\n            isDelivers[addrs[i]] = flag;\r\n        }\r\n    }\r\n\r\n    function setExcludedFromNode(address[] memory addrs, bool flag) public onlyOwner() {\r\n        for(uint i=0;i<addrs.length;i++){\r\n            isExcludedFromNode[addrs[i]] = flag;\r\n        }\r\n    }\r\n\r\n    function setExcludedFromFomo(address[] memory addrs, bool flag) public onlyOwner() {\r\n        for(uint i=0;i<addrs.length;i++){\r\n            isExcludedFromFomo[addrs[i]] = flag;\r\n        }\r\n    }\r\n\r\n    function changeSwapAndLiquifyEnabled(bool _swapAndLiquifyEnabled) public onlyOwner(){\r\n        swapAndLiquifyEnabled = _swapAndLiquifyEnabled;\r\n    }\r\n\r\n    function changeRouterAddress(address newRouter) public onlyOwner() {\r\n        uniswapV2Router = IUniswapV2Router02(newRouter);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), address(usdt));\r\n        pairList[uniswapV2Pair] = true;\r\n    }\r\n\r\n    function changeNumToAddToLiquidity(uint256 num) public onlyOwner() {\r\n        numTokensSellToAddToLiquidity = num;\r\n    }\r\n    \r\n    //Node param change\r\n    function setNodeWhiteList(address[] memory addrs, bool flag) public onlyOwner() {\r\n        for(uint i=0;i<addrs.length;i++){\r\n            nodeWhiteList[addrs[i]] = flag;\r\n        }\r\n    }\r\n\r\n    function roundLen(uint256 rIndex) public view  returns (uint256) {\r\n        return rounds[rIndex].length;\r\n    }\r\n\r\n    function roundAddr(uint256 rIndex,uint256 index) public view  returns (address) {\r\n        return rounds[rIndex][index];\r\n    }\r\n\r\n    function lpBalanceOf(address shareholder) public view returns (uint256){\r\n        if(address(lpPool) != address(0)){\r\n            return IERC20(uniswapV2Pair).balanceOf(shareholder).add(lpPool.balanceOf(shareholder));\r\n        }else{\r\n            return IERC20(uniswapV2Pair).balanceOf(shareholder);\r\n        }\r\n    }\r\n\r\n    function process(uint256 gas) private {\r\n        address pool = node;\r\n        uint256 shareholderCount = shareholders.length;\r\n        if(shareholderCount == 0) return;\r\n        uint256 nowbanance = balanceOf(pool);\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        uint256 iterations = 0;\r\n        while(gasUsed < gas && iterations < shareholderCount) {\r\n            if(currentIndex >= shareholderCount){\r\n                currentIndex = 0;\r\n            }\r\n            address shareholder = shareholders[currentIndex];\r\n            uint256 amount = lpBalanceOf(shareholder).mul(nowbanance).div(IERC20(uniswapV2Pair).totalSupply());\r\n            if(amount < minAmount) {\r\n                currentIndex++;\r\n                iterations++;\r\n                continue;\r\n            }\r\n            if(balanceOf(pool) < amount ) return;\r\n            _basicTransfer(pool, shareholders[currentIndex], amount);\r\n\r\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n\r\n    function setShare(address shareholder) private {\r\n        bool shouldRemove = lpBalanceOf(shareholder).mul(getLPPrice()).div(1e18) < nodeHoldLimit || !nodeWhiteList[shareholder];\r\n        if(_updated[shareholder] ){      \r\n            if(shouldRemove) {\r\n                shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];\r\n                shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];\r\n                shareholders.pop();\r\n                _updated[shareholder] = false;\r\n            }\r\n            return;  \r\n        }\r\n        if(shouldRemove) return;\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n        _updated[shareholder] = true;\r\n    }\r\n\r\n    function getShareholdersLength() public view returns(uint256){\r\n        return shareholders.length;\r\n    }\r\n\r\n    function getList(uint256 start, uint256 length) public view returns(address[] memory addrs, uint256[] memory bals){\r\n        address[] memory list = shareholders;\r\n        uint256 end = (start+length) < list.length ? (start+length) : list.length;\r\n        (,length) = end.trySub(start);\r\n        addrs = new address[](length);\r\n        bals = new uint256[](length);\r\n        IERC20 pair = IERC20(uniswapV2Pair);\r\n        for(uint i=start; i<end; i++){\r\n            addrs[i-start] = list[i];\r\n            bals[i-start] = pair.balanceOf(list[i]);\r\n        }\r\n    }\r\n\r\n    function getLPPrice() public view returns (uint256) {\r\n        IUniswapV2Pair pair = IUniswapV2Pair(uniswapV2Pair);\r\n        (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\r\n        uint256 totalLP = pair.totalSupply();\r\n        if(totalLP == 0) return 0;\r\n        if(address(usdt)==pair.token0()){\r\n            return reserve0.mul(2e18).div(totalLP);\r\n        }else{\r\n            return reserve1.mul(2e18).div(totalLP);\r\n        }\r\n    }\r\n\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function swapTokensForToken(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = address(usdt);\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(_receiveUsdt),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) public view returns (uint amountIn) {\r\n        require(amountOut > 0, 'PancakeLibrary: INSUFFICIENT_OUTPUT_AMOUNT');\r\n        require(reserveIn > 0 && reserveOut > 0, 'PancakeLibrary: INSUFFICIENT_LIQUIDITY');\r\n        uint numerator = reserveIn.mul(amountOut).mul(10000);\r\n        uint denominator = reserveOut.sub(amountOut).mul(pairFee);\r\n        amountIn = (numerator / denominator).add(1);\r\n    }\r\n\r\n    function getAmountInToToken(uint amountOut) public view returns (uint256) {\r\n        IUniswapV2Pair pair = IUniswapV2Pair(uniswapV2Pair);\r\n        (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\r\n        if(address(usdt)==pair.token0()){\r\n            return getAmountIn(amountOut, reserve0, reserve1);\r\n        }else{\r\n            return getAmountIn(amountOut, reserve1, reserve0);\r\n        }\r\n    }\r\n    \r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function updateFomo(address account) public onlyOperator{\r\n        _updateFomo(account);\r\n    }\r\n\r\n    function _updateFomo(address account) internal{\r\n        if(fomoLastTime != 0 && fomoLastTime.add(fomoDuration)<block.timestamp){\r\n            roundFomo5Amounts[roundIndex] = fomo5Amount.sub(fomo5DivAmount).div(2);\r\n            roundFomo100Amounts[roundIndex] = fomo100Amount.sub(fomo100DivAmount).div(2);\r\n            fomo5DivAmount = fomo5DivAmount.add(roundFomo5Amounts[roundIndex]);\r\n            fomo100DivAmount = fomo100DivAmount.add(roundFomo100Amounts[roundIndex]);\r\n            roundIndex++;\r\n        }\r\n        fomoLastTime = block.timestamp;\r\n        rounds[roundIndex].push(account);\r\n    }\r\n\r\n    function _halfFomo() internal{\r\n        uint256 fomo5Reward = fomo5Amount.sub(fomo5DivAmount);\r\n        if(fomo5Reward > fomo5Limit){\r\n            uint256 toBoxBoard100 = fomo5Reward.div(2);\r\n            fomo5DivAmount = fomo5DivAmount.add(toBoxBoard100);\r\n            _basicTransfer(address(fomo5), address(boxBoard100), toBoxBoard100);\r\n            try boxBoard100.allocate(toBoxBoard100) {} catch {}\r\n        }\r\n        uint256 fomo100Reward = fomo100Amount.sub(fomo100DivAmount);\r\n        if(fomo100Reward > fomo100Limit){\r\n            uint256 toBoxBoard100 = fomo100Reward.div(2);\r\n            fomo100DivAmount = fomo100DivAmount.add(toBoxBoard100);\r\n            _basicTransfer(address(fomo100), address(boxBoard100), toBoxBoard100);\r\n            try boxBoard100.allocate(toBoxBoard100) {} catch {}\r\n        }\r\n    }\r\n    \r\n    function _buyTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        if(getAmountInToToken(amount) >= nodeLimit.mul(99).div(100) && !nodeWhiteList[recipient]) {\r\n            nodeWhiteList[recipient] = true;\r\n            setShare(recipient);\r\n        }\r\n        if(getAmountInToToken(amount) >= fomoLimit.mul(99).div(100) && !isExcludedFromFomo[recipient]){\r\n            _updateFomo(recipient);\r\n        }\r\n        \r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n\r\n        uint256 toNode = amount.mul(nodeFee).div(100);\r\n        uint256 toEcology = amount.mul(ecologyFee).div(100);\r\n        uint256 toFomo5 = amount.mul(fomo5Fee).div(100);\r\n        uint256 toBoxBoard30 = amount.mul(boxBoard30Fee).div(100);\r\n\r\n        _balances[address(node)] = _balances[address(node)].add(toNode);\r\n        emit Transfer(sender, address(node), toNode);\r\n\r\n        _balances[address(this)] = _balances[address(this)].add(toEcology);\r\n        emit Transfer(sender, address(this), toEcology);\r\n\r\n        _balances[address(fomo5)] = _balances[address(fomo5)].add(toFomo5);\r\n        emit Transfer(sender, address(fomo5), toFomo5);\r\n        fomo5Amount = fomo5Amount.add(toFomo5);\r\n\r\n        _balances[address(boxBoard30)] = _balances[address(boxBoard30)].add(toBoxBoard30);\r\n        emit Transfer(sender, address(boxBoard30), toBoxBoard30);\r\n        try boxBoard30.allocate(toBoxBoard30) {} catch {}\r\n\r\n        amount = amount.sub(toNode).sub(toEcology).sub(toFomo5).sub(toBoxBoard30);\r\n\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n    \r\n    function _sellTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n\r\n        uint256 toNode = amount.mul(nodeFeeSell).div(100);\r\n        uint256 toNftBoard = amount.mul(nftFee).div(100);\r\n        uint256 toFomo100 = amount.mul(fomo100Fee).div(100);\r\n        uint256 toPoolBoard = amount.mul(poolFee).div(100);\r\n\r\n        _balances[node] = _balances[node].add(toNode);\r\n        emit Transfer(sender, node, toNode);\r\n\r\n        _balances[address(nftBoard)] = _balances[address(nftBoard)].add(toNftBoard);\r\n        emit Transfer(sender, address(nftBoard), toNftBoard);\r\n        try nftBoard.allocate(toNftBoard) {} catch {}\r\n\r\n        _balances[address(fomo100)] = _balances[address(fomo100)].add(toFomo100);\r\n        emit Transfer(sender, address(fomo100), toFomo100);\r\n        fomo100Amount = fomo100Amount.add(toFomo100);\r\n\r\n        _balances[address(poolBoard)] = _balances[address(poolBoard)].add(toPoolBoard);\r\n        emit Transfer(sender, address(poolBoard), toPoolBoard);\r\n        try poolBoard.allocate(toPoolBoard) {} catch {}\r\n\r\n        amount = amount.sub(toNode).sub(toNftBoard).sub(toFomo100).sub(toPoolBoard);\r\n\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual transferCounter {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        if(isDelivers[sender] || isDelivers[recipient] || inSwapAndLiquify){\r\n            _basicTransfer(sender, recipient, amount);\r\n            return;\r\n        }\r\n\r\n        _halfFomo();\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        bool overMinTokenBalance = contractTokenBalance >= numTokensSellToAddToLiquidity;\r\n        if (\r\n            overMinTokenBalance &&\r\n            !inSwapAndLiquify &&\r\n            sender != uniswapV2Pair &&\r\n            recipient != uniswapV2Pair &&\r\n            swapAndLiquifyEnabled\r\n        ) {\r\n            contractTokenBalance = balanceOf(uniswapV2Pair).div(10).min(numTokensSellToAddToLiquidity);\r\n            swapTokensForToken(contractTokenBalance);\r\n        }\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n        if(pairList[sender]){\r\n            require(block.timestamp >= swapTime, 'Can\\'t swap!');\r\n            _buyTransfer(sender, recipient, amount);\r\n        }else if(pairList[recipient]){\r\n            require(block.timestamp >= swapTime, 'Can\\'t swap!');\r\n            _sellTransfer(sender, recipient, amount);\r\n        }else{\r\n            _basicTransfer(sender, recipient, amount);\r\n        }\r\n\r\n        if(fromAddress == address(0)) fromAddress = sender;\r\n        if(toAddress == address(0)) toAddress = recipient;  \r\n        if(!isExcludedFromNode[fromAddress]) {\r\n            setShare(fromAddress);\r\n        }\r\n        if(!isExcludedFromNode[toAddress]) {\r\n            setShare(toAddress);\r\n        }\r\n        fromAddress = sender;\r\n        toAddress = recipient;\r\n        \r\n        if(balanceOf(node) >= minBalance && sender != address(this) && distributorTime.add(minPeriod) <= block.timestamp) {\r\n            process(distributorGas);\r\n            distributorTime = block.timestamp;\r\n        }\r\n\r\n        if(enterCount == 1){\r\n            fomo5.proc();\r\n            fomo100.proc();\r\n        }\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _setupDecimals(uint8 decimals_) internal virtual {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiveUsdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiveToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fomoDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pairFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_swapTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"OperatorTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_receiveUsdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boxBoard100\",\"outputs\":[{\"internalType\":\"contract IBoard\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boxBoard30\",\"outputs\":[{\"internalType\":\"contract IBoard\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boxBoard30Fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fomoDuration\",\"type\":\"uint256\"}],\"name\":\"changeFomoDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fomoLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nodeLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nodeHoldLimit\",\"type\":\"uint256\"}],\"name\":\"changeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_distributorGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minBalance\",\"type\":\"uint256\"}],\"name\":\"changeMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"changeNumToAddToLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"changeRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_swapAndLiquifyEnabled\",\"type\":\"bool\"}],\"name\":\"changeSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dead\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributorGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributorTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ecologyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fomo100\",\"outputs\":[{\"internalType\":\"contract Fomo100\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fomo100Amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fomo100DivAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fomo100Fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fomo100Limit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fomo5\",\"outputs\":[{\"internalType\":\"contract Fomo5\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fomo5Amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fomo5DivAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fomo5Fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fomo5Limit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fomoDiviendPct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fomoDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fomoLastTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fomoLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"}],\"name\":\"getAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"getAmountInToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLPPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"getList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"bals\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getShareholdersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDelivers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFomo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromNode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"lpBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPool\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftBoard\",\"outputs\":[{\"internalType\":\"contract IBoard\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"node\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodeFeeSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodeHoldLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodeLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nodeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensSellToAddToLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"once\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolBoard\",\"outputs\":[{\"internalType\":\"contract IBoard\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"roundAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundFomo100Amounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundFomo5Amounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rIndex\",\"type\":\"uint256\"}],\"name\":\"roundLen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setDelivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setExcludedFromFomo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setExcludedFromNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setNodeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftBoard\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_power\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_boxBoard30\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_boxBoard100\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolBoard\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperator_\",\"type\":\"address\"}],\"name\":\"transferOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"updateFomo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TIGERV2", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000055d398326f99059ff775485246999027b319795500000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e000000000000000000000000140a8acc493f205617c2cdb755c9b223a52a6b2b0000000000000000000000002c690f9d3eb98093047577e56ea0ec16c149f22f0000000000000000000000000000000000000000000000000000000000001c2000000000000000000000000000000000000000000000000000000000000026f70000000000000000000000000000000000000000000000000000000062d13aa0", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://91cf3003829dae624dde3df2007a463d1ddc24a481d2b532011ff3e036820027"}