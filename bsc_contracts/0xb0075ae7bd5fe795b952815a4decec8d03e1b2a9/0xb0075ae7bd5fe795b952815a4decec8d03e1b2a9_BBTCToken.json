{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint256);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint);\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address _spender, uint _value) external returns (bool);\r\n\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n\r\n    function getPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external view returns (address pair);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"new is 0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract TokenDistributor {\r\n    constructor(address token) {\r\n        IERC20(token).approve(msg.sender, uint256(~uint256(0)));\r\n    }\r\n}\r\n\r\ninterface ISwapPair {\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n}\r\n\r\ncontract BBTCToken is IERC20, Ownable {\r\n    \r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    address private _rewardAddress = 0x0739eEe896C2E756AE0c7849A18eE651053788F6;\r\n    address private _lpsAddress = 0x0739eEe896C2E756AE0c7849A18eE651053788F6;\r\n    address private _teamAddress = 0x8C169BEA09026C7fb22331ee519d9512f4997e34;\r\n    address private _tokenAddress = 0xf87EB90ce6a3FBdd035405f6e08c2563E86376CC;\r\n    address private _marketAddress = 0xEA9C71d83163EEC9765528b159D3e4865E8166AD;\r\n    address private _burnAddress = address(0xdead);\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint256 private _decimals;\r\n    uint256 private _tTotal;\r\n\r\n    mapping(address => bool) private _feeWhiteList;\r\n\r\n    ISwapRouter private _swapRouter;\r\n    address private currency = 0x55d398326f99059fF775485246999027B3197955;\r\n    mapping(address => bool) private _swapPairList;\r\n \r\n    bool private inSwap;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    \r\n    TokenDistributor public _lpsDistributor;\r\n\r\n    uint256 private _buyRewardFee = 100;\r\n    uint256 private _buyLpsFee = 0;\r\n    uint256 private _buyTeamFee = 150;\r\n    uint256 private _buyTokenFee = 150;\r\n    uint256 private _buyMarketFee = 400;\r\n    uint256 private _buyBurnFee   = 0;\r\n\r\n    uint256 private _sellRewardFee = 0;\r\n    uint256 private _sellLpsFee = 500;\r\n    uint256 private _sellTeamFee = 0;\r\n    uint256 private _sellTokenFee = 0;\r\n    uint256 private _sellMarketFee = 1100;\r\n    uint256 private _sellBurnFee   = 200;\r\n\r\n    address private rewardToken = 0x55d398326f99059fF775485246999027B3197955;\r\n\r\n    address private _mainPair;\r\n\r\n    modifier lockTheSwap() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    address[] private rewardPath;\r\n\r\n    uint256 public numTokensSellToFund  = 100 * 10**18;\r\n\r\n    constructor() {\r\n        _name = \"TTBBTC9\";\r\n        _symbol = \"TTBBTC9\";\r\n        _decimals = 18;\r\n        _tTotal = 21000000 * 10**18;\r\n        _swapRouter = ISwapRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        address ReceiveAddress = owner();\r\n      \r\n        rewardPath = [address(this), currency];\r\n      \r\n        IERC20(currency).approve(address(_swapRouter), MAX);\r\n\r\n        _allowances[address(this)][address(_swapRouter)] = MAX;\r\n\r\n        ISwapFactory swapFactory = ISwapFactory(_swapRouter.factory());\r\n        _mainPair = swapFactory.createPair(address(this), currency);\r\n        _swapPairList[_mainPair] = true;\r\n\r\n        _balances[ReceiveAddress] = _tTotal;\r\n        emit Transfer(address(0), ReceiveAddress, _tTotal);\r\n\r\n        _feeWhiteList[ReceiveAddress] = true;\r\n        _feeWhiteList[address(this)] = true;\r\n        _feeWhiteList[address(_swapRouter)] = true;\r\n        _feeWhiteList[msg.sender] = true;\r\n\r\n        _lpsDistributor = new TokenDistributor(rewardToken);\r\n\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n    \r\n    \r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public override  returns (bool){\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        uint256 currentAllowance = _allowances[sender][msg.sender];\r\n        require(currentAllowance >= amount, \"BEP20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, msg.sender, currentAllowance - amount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n\r\n    function _basicTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        _balances[sender] -= amount;\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(balanceOf(from) >= amount, \"balanceNotEnough\");\r\n        bool takeFee;\r\n        bool isSell;\r\n        if (_swapPairList[from] || _swapPairList[to]) {\r\n\r\n            takeFee = true;\r\n\r\n            if (_swapPairList[to]) {\r\n                isSell = true;\r\n                if(_feeWhiteList[from]){\r\n                    takeFee = false;\r\n                }\r\n            }else{\r\n                isSell = false;\r\n                if(_feeWhiteList[to]){\r\n                    takeFee = false;\r\n                }\r\n            }\r\n\r\n            if (!inSwap) {\r\n                uint256 contractTokenBalance = balanceOf(address(this));\r\n                swapAccmul(contractTokenBalance);\r\n            }\r\n\r\n        }\r\n\r\n        _tokenTransfer(\r\n            from,\r\n            to,\r\n            amount,\r\n            takeFee,\r\n            isSell\r\n        );\r\n\r\n    }       \r\n\r\n\r\n    function _tokenTransfer(address sender,address recipient,uint256 tAmount,bool takeFee,bool isSell) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount;\r\n\r\n        if (takeFee) {\r\n            uint256 swapFee;\r\n            if (isSell) {\r\n\r\n                swapFee =  _sellRewardFee + _sellLpsFee + _sellTeamFee + _sellTokenFee + _sellMarketFee;\r\n            \r\n            } else {\r\n                swapFee =  _buyRewardFee + _buyLpsFee + _buyTeamFee + _buyTokenFee + _buyMarketFee;\r\n            }\r\n\r\n            uint256 swapAmount = (tAmount * swapFee) / 10000;\r\n            if (swapAmount > 0) {\r\n                feeAmount += swapAmount;\r\n                _takeTransfer(sender, address(this), swapAmount);\r\n            }\r\n\r\n            uint256 burnAmount;\r\n            if (!isSell) {\r\n                \r\n                burnAmount = (tAmount * _buyBurnFee) / 10000;\r\n            } else {\r\n                \r\n                burnAmount = (tAmount * _sellBurnFee) / 10000;\r\n            }\r\n            if (burnAmount > 0) {\r\n                feeAmount += burnAmount;\r\n                _takeTransfer(sender, _burnAddress, burnAmount);\r\n            }\r\n        }\r\n\r\n\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n\r\n    }\r\n\r\n    event Failed_swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 value\r\n    );\r\n\r\n    event Failed_swapExactTokensForETHSupportingFeeOnTransferTokens();\r\n\r\n    event Failed_addLiquidityETH();\r\n\r\n    event Failed_addLiquidity();\r\n\r\n    \r\n    function swapToken( uint256 amount,uint256 swapFee) private lockTheSwap {\r\n        if (swapFee == 0) {\r\n            return;\r\n        }\r\n        \r\n        uint256 rewardFee = _sellRewardFee + _buyRewardFee;\r\n        uint256 rewardAmount = (amount * rewardFee ) / swapFee;\r\n        if (rewardAmount > 0) {\r\n            try\r\n                _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                    rewardAmount,\r\n                    0,\r\n                    rewardPath,\r\n                    address(_rewardAddress),\r\n                    block.timestamp\r\n                )\r\n            {} catch {\r\n                emit Failed_swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                    0\r\n                );\r\n            }\r\n        }\r\n\r\n        \r\n        uint256 teamFee = _sellTeamFee + _buyTeamFee;\r\n        uint256 teamAmount = (amount * teamFee ) / swapFee;\r\n        if (teamAmount > 0) {\r\n            try\r\n                _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                    teamAmount,\r\n                    0,\r\n                    rewardPath,\r\n                    address(_teamAddress),\r\n                    block.timestamp\r\n                )\r\n            {} catch {\r\n                emit Failed_swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                    1\r\n                );\r\n            }\r\n        }\r\n\r\n        \r\n        uint256 tokenFee = _sellTokenFee + _buyTokenFee;\r\n        uint256 tokenAmount = (amount * tokenFee ) / swapFee;\r\n        if (tokenAmount > 0) {\r\n            try\r\n                _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                    tokenAmount,\r\n                    0,\r\n                    rewardPath,\r\n                    address(_tokenAddress),\r\n                    block.timestamp\r\n                )\r\n            {} catch {\r\n                emit Failed_swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                    2\r\n                );\r\n            }\r\n        }\r\n     \r\n        \r\n        uint256 marketFee = _sellMarketFee + _buyMarketFee;\r\n        uint256 marketAmount = (amount * marketFee ) / swapFee;\r\n        if (marketAmount > 0) {\r\n            try\r\n                _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                    marketAmount,\r\n                    0,\r\n                    rewardPath,\r\n                    address(_marketAddress),\r\n                    block.timestamp\r\n                )\r\n            {} catch {\r\n                emit Failed_swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                    3\r\n                );\r\n            }\r\n        }\r\n\r\n        \r\n        uint256 lpFee = _sellLpsFee + _buyLpsFee;\r\n        uint256 lpAmount = (amount * lpFee ) / swapFee / 2;\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = currency;\r\n        if(lpAmount > 0){\r\n             try\r\n                _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                    lpAmount,\r\n                    0,\r\n                    path,\r\n                    address(_lpsDistributor),\r\n                    block.timestamp\r\n                )\r\n            {} catch {\r\n                emit Failed_swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                    4\r\n                );\r\n            }\r\n        }\r\n       \r\n        \r\n\r\n        IERC20 FIST = IERC20(currency);\r\n        uint256 lpFist;\r\n        lpFist = FIST.balanceOf(address(_lpsDistributor));\r\n\r\n        if (lpFist > 0) {\r\n            FIST.transferFrom(\r\n                address(_lpsDistributor),\r\n                address(this),\r\n                lpFist\r\n            );\r\n        }\r\n\r\n        if (lpAmount > 0 && lpFist > 0) {\r\n            try\r\n                _swapRouter.addLiquidity(\r\n                    address(this),\r\n                    currency,\r\n                    lpAmount,\r\n                    lpFist,\r\n                    0,\r\n                    0,\r\n                    _lpsAddress,\r\n                    block.timestamp\r\n                )\r\n            {} catch {\r\n                emit Failed_addLiquidity();\r\n            }\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    function swapAccmul( uint256 contractTokenBalance) private{\r\n        uint256 swapSellFee = _sellRewardFee + _sellLpsFee + _sellTeamFee + _sellTokenFee + _sellMarketFee;\r\n        uint256 swapBuyFee = _buyRewardFee + _buyLpsFee + _buyTeamFee + _buyTokenFee + _buyMarketFee;\r\n        uint256 swapFee = swapSellFee + swapBuyFee;\r\n        if (contractTokenBalance >= numTokensSellToFund) {\r\n            swapToken(numTokensSellToFund, swapFee); \r\n        }\r\n    }\r\n\r\n    \r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    function setFeeWhiteList(\r\n        address addr,\r\n        bool enable\r\n    ) public onlyOwner {\r\n\r\n        require(addr != address(0),\"_addr cannot be the zero address\");\r\n\r\n        _feeWhiteList[addr] = enable;\r\n        \r\n    }\r\n\r\n    function getFeeWhiteList( address addr) external view  onlyOwner returns (bool) {\r\n        require(addr != address(0),\"_addr cannot be the zero address\");\r\n        return _feeWhiteList[addr];\r\n    }\r\n    \r\n\r\n    function setAddress(address rewardAddress,address lpsAddress,address teamAddress,address tokenAddress,address marketAddress) external onlyOwner {\r\n        require(rewardAddress != address(0),\"_addr cannot be the zero address\");\r\n        require(lpsAddress != address(0),\"_addr cannot be the zero address\");\r\n        require(teamAddress != address(0),\"_addr cannot be the zero address\");\r\n        require(tokenAddress != address(0),\"_addr cannot be the zero address\");\r\n        require(marketAddress != address(0),\"_addr cannot be the zero address\");\r\n\r\n        _rewardAddress = rewardAddress;\r\n        _lpsAddress = lpsAddress;\r\n        _teamAddress = teamAddress;\r\n        _tokenAddress = tokenAddress;\r\n        _marketAddress = marketAddress;\r\n    }\r\n\r\n    function getAddress() public view  onlyOwner  returns (address,address,address,address,address) {\r\n        \r\n        return (_lpsAddress,_teamAddress,_tokenAddress,_marketAddress,_mainPair);\r\n    }\r\n\r\n    \r\n    function setFees(uint256[] calldata customs) external onlyOwner {\r\n    \r\n        _buyRewardFee = customs[0];\r\n        _buyLpsFee = customs[1];\r\n        _buyTeamFee = customs[2];\r\n        _buyTokenFee = customs[3];\r\n        _buyMarketFee = customs[4];\r\n        _buyBurnFee   = customs[5];\r\n        \r\n        require(\r\n            _buyRewardFee + _buyLpsFee + _buyTeamFee + _buyTokenFee + _buyMarketFee + _buyBurnFee< 2500,\r\n            \"buy!<25\"\r\n        );\r\n\r\n        _sellRewardFee = customs[6];\r\n        _sellLpsFee = customs[7];\r\n        _sellTeamFee = customs[8];\r\n        _sellTokenFee = customs[9];\r\n        _sellMarketFee = customs[10];\r\n        _sellBurnFee   = customs[11];\r\n\r\n        require(\r\n            _sellRewardFee + _sellLpsFee + _sellTeamFee + _sellTokenFee + _sellMarketFee + _sellBurnFee< 2500,\r\n            \"sell!<25\"\r\n        );\r\n\r\n    }\r\n\r\n    function getFeesBuy() public view  onlyOwner returns (uint256,uint256,uint256,uint256,uint256,uint256) {\r\n     \r\n        return (_buyRewardFee, _buyLpsFee, _buyTeamFee, _buyTokenFee, _buyMarketFee,_buyBurnFee);\r\n    }\r\n\r\n    function getFeesSell() public view  onlyOwner returns (uint256,uint256,uint256,uint256,uint256,uint256) {\r\n   \r\n        return (_sellRewardFee, _sellLpsFee, _sellTeamFee, _sellTokenFee, _sellMarketFee,_sellBurnFee);\r\n    }\r\n\r\n    function setSwapPairList(address addr, bool enable) external onlyOwner {\r\n        require(addr != address(0),\"_addr cannot be the zero address\");\r\n        _swapPairList[addr] = enable;\r\n    }\r\n\r\n    function setNumTokensSellToFund(uint256 number) external onlyOwner {\r\n        require(number > 0,\"_numbermust egt zero\");\r\n        numTokensSellToFund = number * 10**18;\r\n    }\r\n    \r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Failed_addLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Failed_addLiquidityETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Failed_swapExactTokensForETHSupportingFeeOnTransferTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Failed_swapExactTokensForTokensSupportingFeeOnTransferTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_lpsDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getFeeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeesBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeesSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensSellToFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketAddress\",\"type\":\"address\"}],\"name\":\"setAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"customs\",\"type\":\"uint256[]\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"setNumTokensSellToFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BBTCToken", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://096fba235c687652ddf436cca5c217de7e5c91dda480127fe3f4885e3f8d3b84"}