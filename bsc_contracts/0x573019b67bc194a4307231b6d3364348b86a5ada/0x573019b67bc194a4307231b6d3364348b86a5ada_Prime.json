{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/common/configuration/AddressProvider/IAddressesProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IAddressesProvider {\\r\\n  /***************************************************** */\\r\\n  /*********************GETTERS************************* */\\r\\n  /***************************************************** */\\r\\n  function getAddress(bytes32 id) external view returns (address);\\r\\n\\r\\n  function getSpent() external view returns (address);\\r\\n\\r\\n  function getSpentLP() external view returns (address);\\r\\n\\r\\n  function getEusd() external view returns (address);\\r\\n\\r\\n  function getZapContract() external view returns (address);\\r\\n\\r\\n  function getBscViaDuctContract() external returns (address);\\r\\n\\r\\n  function getBarterRouter() external view returns (address);\\r\\n\\r\\n  function getBarterFactory() external view returns (address);\\r\\n\\r\\n  function getUpRightContract() external view returns (address);\\r\\n\\r\\n  function getCropYardContract() external view returns (address);\\r\\n\\r\\n  function getPrimeContract() external view returns (address);\\r\\n\\r\\n  function getFiskContract() external view returns (address);\\r\\n\\r\\n  function getWhitelistContract() external view returns (address);\\r\\n\\r\\n  function getUprightStableContract() external view returns (address);\\r\\n\\r\\n  function getUprightLpContract() external view returns (address);\\r\\n\\r\\n  function getUprightSwapTokenContract() external view returns (address);\\r\\n\\r\\n  function getUprightBstContract() external view returns (address);\\r\\n\\r\\n  function getBorrowLendContract() external view returns (address);\\r\\n\\r\\n  function getTokenomicsContract() external view returns (address);\\r\\n\\r\\n  function getManagerContract() external view returns (address);\\r\\n\\r\\n  function getManager() external view returns (address);\\r\\n\\r\\n  /***************************************************** */\\r\\n  /*********************SETTERS************************* */\\r\\n  /***************************************************** */\\r\\n\\r\\n  function setAddress(bytes32 id, address newAddress) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/protocol/Barter/interface/IBarterRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity >=0.6.2;\\r\\n\\r\\ninterface IBarterRouter {\\r\\n  function factory() external pure returns (address);\\r\\n\\r\\n  function WETH() external pure returns (address);\\r\\n\\r\\n  function addLiquidity(\\r\\n    address tokenA,\\r\\n    address tokenB,\\r\\n    uint256 amountADesired,\\r\\n    uint256 amountBDesired,\\r\\n    uint256 amountAMin,\\r\\n    uint256 amountBMin,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\r\\n\\r\\n  function removeLiquidity(\\r\\n    address tokenA,\\r\\n    address tokenB,\\r\\n    uint256 liquidity,\\r\\n    uint256 amountAMin,\\r\\n    uint256 amountBMin,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n  function swapExactTokensForTokens(\\r\\n    uint256 amountIn,\\r\\n    uint256 amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external returns (uint256[] memory amounts);\\r\\n\\r\\n  function swapTokensForExactTokens(\\r\\n    uint256 amountOut,\\r\\n    uint256 amountInMax,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external returns (uint256[] memory amounts);\\r\\n\\r\\n  function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) external pure returns (uint256 amountB);\\r\\n\\r\\n  function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) external pure returns (uint256 amountOut);\\r\\n\\r\\n  function getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut) external pure returns (uint256 amountIn);\\r\\n\\r\\n  function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\r\\n\\r\\n  function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/protocol/Barter/interface/IBarterZap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.10;\\r\\n\\r\\ninterface IBarterZap {\\r\\n  function zapInToken(address _tokenToZap, uint256 _tokenAmountIn, address _lpToken, uint256 _tokenAmountOutMin, address account) external;\\r\\n\\r\\n  function zapInTokenRebalancing(\\r\\n    address _token0ToZap,\\r\\n    address _token1ToZap,\\r\\n    uint256 _token0AmountIn,\\r\\n    uint256 _token1AmountIn,\\r\\n    address _lpToken,\\r\\n    uint256 _tokenAmountInMax,\\r\\n    uint256 _tokenAmountOutMin,\\r\\n    bool _isToken0Sold,\\r\\n    address account\\r\\n  ) external;\\r\\n\\r\\n  function zapOutToken(address _lpToken, address _tokenToReceive, uint256 _lpTokenAmount, uint256 _tokenAmountOutMin, address account) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/protocol/CropYard/interface/ICropYard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.10;\\r\\n\\r\\ninterface ICropYard {\\r\\n  /********************************************************* */\\r\\n  /***********************EVENTS**************************** */\\r\\n  /********************************************************* */\\r\\n\\r\\n  event CropYardEnable(address from, uint256 amountLp, uint256 eusd, uint256 pid);\\r\\n  event CropYardClaim(address by, uint256 amount, uint256 poolId);\\r\\n\\r\\n  /********************************************************* */\\r\\n  /************************STRUCT*************************** */\\r\\n  /********************************************************* */\\r\\n  struct Pool {\\r\\n    address inputToken;\\r\\n    address outPutToken;\\r\\n    bool trigger;\\r\\n    uint256 duration;\\r\\n    uint256 apr;\\r\\n    uint256 tvl_usd;\\r\\n    uint256 total_claimed;\\r\\n  }\\r\\n  struct User {\\r\\n    uint256 checkpoint; // check point in timestamp\\r\\n    uint256 endpoint; // end of this / latest depoist reward duration\\r\\n    uint256 capital; // usd amout of asset\\r\\n    uint256 debt;\\r\\n    uint256 lockedTill;\\r\\n    uint256 capital_per_day;\\r\\n    uint256 max_reward;\\r\\n    uint256 reward_per_day;\\r\\n    uint256 total_claimed;\\r\\n    uint256 hold;\\r\\n    uint256 stake_repeat_capital_debt;\\r\\n    uint256 stake_repeat_reward_debt;\\r\\n    uint256 stake_lock;\\r\\n  }\\r\\n\\r\\n  /********************************************************* */\\r\\n  /************************FUNCTIONS************************ */\\r\\n  /********************************************************* */\\r\\n  function stake(uint256 _pId, uint256 amount, address account) external returns (bool);\\r\\n\\r\\n  function claim(uint256 _pId, address account) external returns (bool);\\r\\n\\r\\n  function create(address inputToken, address outPutToken, bool trigger, uint256 duration, uint256 apr) external returns (bool);\\r\\n\\r\\n  function lock(uint256 _pId, uint256 duration, address account) external returns (bool);\\r\\n\\r\\n  function unStake(uint256 _pId, address account) external returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/protocol/Fisk/interface/IFisk.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.10;\\r\\n\\r\\ninterface IFisk {\\r\\n  event claimedFisk(uint256 amount, address account);\\r\\n  event claimedV2Fisk(uint256 amount, address account);\\r\\n  event GameAmountAdded(address account, uint256 amount);\\r\\n  event GameAmountSub(address account, uint256 amount);\\r\\n\\r\\n  /********************************************************** */\\r\\n\\r\\n  function addCropYardFees(uint256 amount) external returns (bool);\\r\\n\\r\\n  function addWhitelistFees(uint256 amount) external returns (bool);\\r\\n\\r\\n  function addCropYardPerformanceFees(uint256 amount) external returns (bool);\\r\\n\\r\\n  /***********************STAKE*********************** */\\r\\n  function addBorrowStakeTokenFees(uint256 amount) external returns (bool);\\r\\n\\r\\n  function addStableTokensFees(uint256 amount) external returns (bool);\\r\\n\\r\\n  function addSwapLpTokensFees(uint256 amount) external returns (bool);\\r\\n\\r\\n  function addSwapTokensFees(uint256 amount) external returns (bool);\\r\\n\\r\\n  function addBorrowLendFees(uint256 amount) external returns (bool);\\r\\n\\r\\n  /*************************************************** */\\r\\n\\r\\n  function claim(address account, address token) external returns (bool);\\r\\n\\r\\n  function claimV2(address to, address token, uint256 amount) external returns (bool);\\r\\n\\r\\n  function allowance(address account, address token) external returns (uint256);\\r\\n\\r\\n  function approve(address account, uint256 amount, address token) external returns (bool);\\r\\n\\r\\n  function approvalRest(address account, address token) external returns (bool);\\r\\n\\r\\n  /****************************************************** */\\r\\n\\r\\n  function addGameAmount(address account, uint256 amount) external returns (bool);\\r\\n\\r\\n  function subGameAmount(address account, uint256 amount) external returns (bool);\\r\\n\\r\\n  function getGameAmount(address account) external returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/protocol/LendingBorrowing/interface/ILendingBorrowing.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.10;\\r\\n\\r\\ninterface ILendingBorrowing {\\r\\n  /********************************************************* */\\r\\n  /************************STRUCT*************************** */\\r\\n  /********************************************************* */\\r\\n  struct User {\\r\\n    uint256 totalLend;\\r\\n    uint256 totalBorrow;\\r\\n    uint256 totalRepay;\\r\\n    uint256 lastRepay;\\r\\n  }\\r\\n\\r\\n  /********************************************************* */\\r\\n  /************************FUNCTIONS************************ */\\r\\n  /********************************************************* */\\r\\n  function getUserData(address account) external returns (User memory);\\r\\n\\r\\n  function spentAddress() external returns (address);\\r\\n\\r\\n  function bSTAddress() external returns (address);\\r\\n\\r\\n  function start(address account, uint256 amount) external returns (bool);\\r\\n\\r\\n  function repay(address account, uint256 amount) external returns (bool);\\r\\n\\r\\n  function setApr(uint256 _apr) external returns (bool);\\r\\n\\r\\n  function setFee(uint256 _fee) external returns (bool);\\r\\n\\r\\n  function getTotalCollateral() external returns (uint256);\\r\\n\\r\\n  function getTotalBorrowed() external returns (uint256);\\r\\n\\r\\n  function getTotalFeeGenerated() external returns (uint256);\\r\\n\\r\\n  function getTotalReplayed() external returns (uint256);\\r\\n\\r\\n  function getSpentAddress() external returns (address);\\r\\n\\r\\n  function getBstAddress() external returns (address);\\r\\n\\r\\n  function getPairAddress() external returns (address);\\r\\n\\r\\n  function getApr() external returns (uint256);\\r\\n\\r\\n  /********************************************************* */\\r\\n  /***********************EVENTS**************************** */\\r\\n  /********************************************************* */\\r\\n\\r\\n  event Borrow(address account, uint256 collateralBeforeFees, uint256 collateralAfterFees, uint256 receviable);\\r\\n  event Repay(address account, uint256 amount);\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/protocol/Prime/interface/IPrime.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.10;\\r\\n\\r\\ninterface IPrime {\\r\\n  /*************************************************************** */\\r\\n  /*****************************SWAP****************************** */\\r\\n  /*************************************************************** */\\r\\n  function addLiquidity(\\r\\n    address tokenA,\\r\\n    address tokenB,\\r\\n    uint256 amountADesired,\\r\\n    uint256 amountBDesired,\\r\\n    uint256 amountAMin,\\r\\n    uint256 amountBMin,\\r\\n    uint256 deadline\\r\\n  ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\r\\n\\r\\n  function removeLiquidity(\\r\\n    address tokenA,\\r\\n    address tokenB,\\r\\n    uint256 liquidity,\\r\\n    uint256 amountAMin,\\r\\n    uint256 amountBMin,\\r\\n    uint256 deadline\\r\\n  ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n  function swapExactTokensForTokens(\\r\\n    uint256 amountIn,\\r\\n    uint256 amountOutMin,\\r\\n    address[] calldata path,\\r\\n    uint256 deadline\\r\\n  ) external returns (uint256[] memory amounts);\\r\\n\\r\\n  function swapTokensForExactTokens(\\r\\n    uint256 amountOut,\\r\\n    uint256 amountInMax,\\r\\n    address[] calldata path,\\r\\n    uint256 deadline\\r\\n  ) external returns (uint256[] memory amounts);\\r\\n\\r\\n  function zapInToken(address _tokenToZap, uint256 _tokenAmountIn, address _lpToken, uint256 _tokenAmountOutMin) external;\\r\\n\\r\\n  function zapOutToken(address _lpToken, address _tokenToReceive, uint256 _lpTokenAmount, uint256 _tokenAmountOutMin) external;\\r\\n\\r\\n  function zapInTokenRebalancing(\\r\\n    address _token0ToZap,\\r\\n    address _token1ToZap,\\r\\n    uint256 _token0AmountIn,\\r\\n    uint256 _token1AmountIn,\\r\\n    address _lpToken,\\r\\n    uint256 _tokenAmountInMax,\\r\\n    uint256 _tokenAmountOutMin,\\r\\n    bool _isToken0Sold\\r\\n  ) external;\\r\\n\\r\\n  /*************************************************************** */\\r\\n  /*****************************STAKE****************************** */\\r\\n  /*************************************************************** */\\r\\n\\r\\n  function stakeStableTokens(uint256 _pId, uint256 amount) external returns (bool);\\r\\n\\r\\n  function stakeSwapLpTokens(uint256 _pId, uint256 amount) external returns (bool);\\r\\n\\r\\n  function stakeSwapTokens(uint256 _pId, uint256 amount) external returns (bool);\\r\\n\\r\\n  function stakeBorrowStakeTokens(uint256 _pId, uint256 amount) external returns (bool);\\r\\n\\r\\n  /*************************************************************** */\\r\\n\\r\\n  function ClaimStableToken(uint256 _pId) external returns (bool);\\r\\n\\r\\n  function ClaimSwapLpToken(uint256 _pId) external returns (bool);\\r\\n\\r\\n  function ClaimSwapToken(uint256 _pId) external returns (bool);\\r\\n\\r\\n  function ClaimBorrowStakeToken(uint256 _pId) external returns (bool);\\r\\n\\r\\n  /*************************************************************** */\\r\\n\\r\\n  function LockStableToken(uint256 pId, uint256 duration) external returns (bool);\\r\\n\\r\\n  function LockSwapLpToken(uint256 pId, uint256 duration) external returns (bool);\\r\\n\\r\\n  function LockSwapToken(uint256 pId, uint256 duration) external returns (bool);\\r\\n\\r\\n  function LockBorrowStakeToken(uint256 pId, uint256 duration) external returns (bool);\\r\\n\\r\\n  /*************************************************************** */\\r\\n\\r\\n  function unStakeStableToken(uint256 pId) external returns (bool);\\r\\n\\r\\n  function unStakeSwapLpToken(uint256 pId) external returns (bool);\\r\\n\\r\\n  function unStakeSwapToken(uint256 pId) external returns (bool);\\r\\n\\r\\n  function unStakeBorrowStakeToken(uint256 pId) external returns (bool);\\r\\n\\r\\n  /********************************************************* */\\r\\n  /*********************CROP-YARD*************************** */\\r\\n  /********************************************************* */\\r\\n  function Farm(uint256 _pId, uint256 amount) external returns (bool);\\r\\n\\r\\n  function Harvest(uint256 _pId) external returns (bool);\\r\\n\\r\\n  function LockFarm(uint256 _pId, uint256 duration) external returns (bool);\\r\\n\\r\\n  function unStakeFarm(uint256 _pId) external returns (bool);\\r\\n\\r\\n  /********************************************************* */\\r\\n  /*********************LEND-BORROW************************* */\\r\\n  /********************************************************* */\\r\\n  function Borrow(uint256 amount) external returns (bool);\\r\\n\\r\\n  /********************************************************* */\\r\\n  /*********************BSC-VIADUCT************************* */\\r\\n  /********************************************************* */\\r\\n  function bridgeBNB(address to) external payable returns (bool);\\r\\n\\r\\n  function bridgeBUSD(uint256 amount, address to) external returns (bool);\\r\\n\\r\\n  /********************************************************* */\\r\\n  /*********************FISK-CLAIM************************** */\\r\\n  /********************************************************* */\\r\\n  function claim(address token) external returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/protocol/Prime/Prime.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.10;\\r\\n\\r\\nimport { IAddressesProvider } from \\\"../../common/configuration/AddressProvider/IAddressesProvider.sol\\\";\\r\\nimport { ILendingBorrowing } from \\\"../LendingBorrowing/interface/ILendingBorrowing.sol\\\";\\r\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport { IBarterRouter } from \\\"../Barter/interface/IBarterRouter.sol\\\";\\r\\nimport { IBscViaDuct } from \\\"../Viaduct/interface/IBscViaDuct.sol\\\";\\r\\nimport { ICropYard } from \\\"../CropYard/interface/ICropYard.sol\\\";\\r\\nimport { IBarterZap } from \\\"../Barter/interface/IBarterZap.sol\\\";\\r\\nimport { IUpRight } from \\\"../UpRight/interface/IUpRight.sol\\\";\\r\\nimport { IPrime } from \\\"./interface/IPrime.sol\\\";\\r\\nimport { IFisk } from \\\"../Fisk/interface/IFisk.sol\\\";\\r\\n\\r\\ncontract Prime is ReentrancyGuard, IPrime {\\r\\n  IAddressesProvider public immutable ADDRESSES_PROVIDER;\\r\\n\\r\\n  constructor(IAddressesProvider provider) {\\r\\n    ADDRESSES_PROVIDER = provider;\\r\\n  }\\r\\n\\r\\n  /*************************************************************** */\\r\\n  /*****************************SWAP****************************** */\\r\\n  /*************************************************************** */\\r\\n\\r\\n  // **** ADD LIQUIDITY ****\\r\\n  function addLiquidity(\\r\\n    address tokenA,\\r\\n    address tokenB,\\r\\n    uint256 amountADesired,\\r\\n    uint256 amountBDesired,\\r\\n    uint256 amountAMin,\\r\\n    uint256 amountBMin,\\r\\n    uint256 deadline\\r\\n  ) public override nonReentrant returns (uint256 amountA, uint256 amountB, uint256 liquidity) {\\r\\n    return\\r\\n      IBarterRouter(ADDRESSES_PROVIDER.getBarterRouter()).addLiquidity(\\r\\n        tokenA,\\r\\n        tokenB,\\r\\n        amountADesired,\\r\\n        amountBDesired,\\r\\n        amountAMin,\\r\\n        amountBMin,\\r\\n        msg.sender,\\r\\n        deadline\\r\\n      );\\r\\n  }\\r\\n\\r\\n  // **** REMOVE LIQUIDITY ****\\r\\n  function removeLiquidity(\\r\\n    address tokenA,\\r\\n    address tokenB,\\r\\n    uint256 liquidity,\\r\\n    uint256 amountAMin,\\r\\n    uint256 amountBMin,\\r\\n    uint256 deadline\\r\\n  ) public override nonReentrant returns (uint256 amountA, uint256 amountB) {\\r\\n    return IBarterRouter(ADDRESSES_PROVIDER.getBarterRouter()).removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, msg.sender, deadline);\\r\\n  }\\r\\n\\r\\n  // **** SWAP ****\\r\\n  function swapExactTokensForTokens(\\r\\n    uint256 amountIn,\\r\\n    uint256 amountOutMin,\\r\\n    address[] calldata path,\\r\\n    uint256 deadline\\r\\n  ) public override nonReentrant returns (uint256[] memory amounts) {\\r\\n    return IBarterRouter(ADDRESSES_PROVIDER.getBarterRouter()).swapExactTokensForTokens(amountIn, amountOutMin, path, msg.sender, deadline);\\r\\n  }\\r\\n\\r\\n  // **** SWAP ****\\r\\n  function swapTokensForExactTokens(\\r\\n    uint256 amountOut,\\r\\n    uint256 amountInMax,\\r\\n    address[] calldata path,\\r\\n    uint256 deadline\\r\\n  ) public override nonReentrant returns (uint256[] memory amounts) {\\r\\n    return IBarterRouter(ADDRESSES_PROVIDER.getBarterRouter()).swapTokensForExactTokens(amountOut, amountInMax, path, msg.sender, deadline);\\r\\n  }\\r\\n\\r\\n  function zapInToken(address _tokenToZap, uint256 _tokenAmountIn, address _lpToken, uint256 _tokenAmountOutMin) public override nonReentrant {\\r\\n    return IBarterZap(ADDRESSES_PROVIDER.getZapContract()).zapInToken(_tokenToZap, _tokenAmountIn, _lpToken, _tokenAmountOutMin, msg.sender);\\r\\n  }\\r\\n\\r\\n  function zapOutToken(address _lpToken, address _tokenToReceive, uint256 _lpTokenAmount, uint256 _tokenAmountOutMin) public override nonReentrant {\\r\\n    return IBarterZap(ADDRESSES_PROVIDER.getZapContract()).zapOutToken(_lpToken, _tokenToReceive, _lpTokenAmount, _tokenAmountOutMin, msg.sender);\\r\\n  }\\r\\n\\r\\n  function zapInTokenRebalancing(\\r\\n    address _token0ToZap,\\r\\n    address _token1ToZap,\\r\\n    uint256 _token0AmountIn,\\r\\n    uint256 _token1AmountIn,\\r\\n    address _lpToken,\\r\\n    uint256 _tokenAmountInMax,\\r\\n    uint256 _tokenAmountOutMin,\\r\\n    bool _isToken0Sold\\r\\n  ) public override nonReentrant {\\r\\n    return\\r\\n      IBarterZap(ADDRESSES_PROVIDER.getZapContract()).zapInTokenRebalancing(\\r\\n        _token0ToZap,\\r\\n        _token1ToZap,\\r\\n        _token0AmountIn,\\r\\n        _token1AmountIn,\\r\\n        _lpToken,\\r\\n        _tokenAmountInMax,\\r\\n        _tokenAmountOutMin,\\r\\n        _isToken0Sold,\\r\\n        msg.sender\\r\\n      );\\r\\n  }\\r\\n\\r\\n  /*************************************************************** */\\r\\n  /*****************************STAKE***************************** */\\r\\n  /*************************************************************** */\\r\\n  function stakeStableTokens(uint256 _pId, uint256 amount) public override nonReentrant returns (bool) {\\r\\n    IUpRight(ADDRESSES_PROVIDER.getUpRightContract()).EnableStableTokens(_pId, amount, msg.sender);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function stakeSwapLpTokens(uint256 _pId, uint256 amount) public override nonReentrant returns (bool) {\\r\\n    IUpRight(ADDRESSES_PROVIDER.getUpRightContract()).EnableSwapLpTokens(_pId, amount, msg.sender);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function stakeSwapTokens(uint256 _pId, uint256 amount) public override nonReentrant returns (bool) {\\r\\n    IUpRight(ADDRESSES_PROVIDER.getUpRightContract()).EnableSwapTokens(_pId, amount, msg.sender);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function stakeBorrowStakeTokens(uint256 _pId, uint256 amount) public override nonReentrant returns (bool) {\\r\\n    IUpRight(ADDRESSES_PROVIDER.getUpRightContract()).EnableBorrowStakeTokens(_pId, amount, msg.sender);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /*************************************************************** */\\r\\n\\r\\n  function ClaimStableToken(uint256 _pId) public override nonReentrant returns (bool) {\\r\\n    IUpRight(ADDRESSES_PROVIDER.getUpRightContract()).ClaimStableToken(_pId, msg.sender);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function ClaimSwapLpToken(uint256 _pId) public override nonReentrant returns (bool) {\\r\\n    IUpRight(ADDRESSES_PROVIDER.getUpRightContract()).ClaimSwapLpToken(_pId, msg.sender);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function ClaimBorrowStakeToken(uint256 _pId) public override nonReentrant returns (bool) {\\r\\n    IUpRight(ADDRESSES_PROVIDER.getUpRightContract()).ClaimBorrowStakeToken(_pId, msg.sender);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function ClaimSwapToken(uint256 _pId) public override nonReentrant returns (bool) {\\r\\n    IUpRight(ADDRESSES_PROVIDER.getUpRightContract()).ClaimSwapToken(_pId, msg.sender);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /*************************************************************** */\\r\\n\\r\\n  function LockStableToken(uint256 pId, uint256 duration) public override nonReentrant returns (bool) {\\r\\n    IUpRight(ADDRESSES_PROVIDER.getUpRightContract()).LockStableToken(pId, duration, msg.sender);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function LockSwapLpToken(uint256 pId, uint256 duration) public override nonReentrant returns (bool) {\\r\\n    IUpRight(ADDRESSES_PROVIDER.getUpRightContract()).LockSwapLpToken(pId, duration, msg.sender);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function LockSwapToken(uint256 pId, uint256 duration) public override nonReentrant returns (bool) {\\r\\n    IUpRight(ADDRESSES_PROVIDER.getUpRightContract()).LockSwapToken(pId, duration, msg.sender);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function LockBorrowStakeToken(uint256 pId, uint256 duration) public override nonReentrant returns (bool) {\\r\\n    IUpRight(ADDRESSES_PROVIDER.getUpRightContract()).LockBorrowStakeToken(pId, duration, msg.sender);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /*************************************************************** */\\r\\n\\r\\n  function unStakeStableToken(uint256 pId) public override nonReentrant returns (bool) {\\r\\n    IUpRight(ADDRESSES_PROVIDER.getUpRightContract()).DisableStableToken(pId, msg.sender);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function unStakeSwapLpToken(uint256 pId) public override nonReentrant returns (bool) {\\r\\n    IUpRight(ADDRESSES_PROVIDER.getUpRightContract()).DisableSwapLpToken(pId, msg.sender);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function unStakeSwapToken(uint256 pId) public override nonReentrant returns (bool) {\\r\\n    IUpRight(ADDRESSES_PROVIDER.getUpRightContract()).DisableSwapToken(pId, msg.sender);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function unStakeBorrowStakeToken(uint256 pId) public override nonReentrant returns (bool) {\\r\\n    IUpRight(ADDRESSES_PROVIDER.getUpRightContract()).DisableBorrowStakeToken(pId, msg.sender);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /********************************************************* */\\r\\n  /************************CROP-YARD************************ */\\r\\n  /********************************************************* */\\r\\n\\r\\n  function Farm(uint256 _pId, uint256 amount) public override nonReentrant returns (bool) {\\r\\n    ICropYard(ADDRESSES_PROVIDER.getCropYardContract()).stake(_pId, amount, msg.sender);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function Harvest(uint256 _pId) public override nonReentrant returns (bool) {\\r\\n    ICropYard(ADDRESSES_PROVIDER.getCropYardContract()).claim(_pId, msg.sender);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function LockFarm(uint256 _pId, uint256 duration) public override nonReentrant returns (bool) {\\r\\n    ICropYard(ADDRESSES_PROVIDER.getCropYardContract()).lock(_pId, duration, msg.sender);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function unStakeFarm(uint256 _pId) public override nonReentrant returns (bool) {\\r\\n    ICropYard(ADDRESSES_PROVIDER.getCropYardContract()).unStake(_pId, msg.sender);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /********************************************************* */\\r\\n  /*********************LEND-BORROW************************* */\\r\\n  /********************************************************* */\\r\\n  function Borrow(uint256 amount) public override nonReentrant returns (bool) {\\r\\n    ILendingBorrowing(ADDRESSES_PROVIDER.getBorrowLendContract()).start(msg.sender, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /********************************************************* */\\r\\n  /*********************BSC-VIADUCT************************* */\\r\\n  /********************************************************* */\\r\\n\\r\\n  function bridgeBNB(address to) public payable override nonReentrant returns (bool) {\\r\\n    return IBscViaDuct(ADDRESSES_PROVIDER.getBscViaDuctContract()).bridgeBnb{ value: msg.value }(msg.sender, to);\\r\\n  }\\r\\n\\r\\n  function bridgeBUSD(uint256 amount, address to) public override nonReentrant returns (bool) {\\r\\n    return IBscViaDuct(ADDRESSES_PROVIDER.getBscViaDuctContract()).bridgeBusd(amount, msg.sender, to);\\r\\n  }\\r\\n\\r\\n  /********************************************************* */\\r\\n  /*********************FISK-CLAIM************************** */\\r\\n  /********************************************************* */\\r\\n  function claim(address token) public override nonReentrant returns (bool) {\\r\\n    return IFisk(ADDRESSES_PROVIDER.getFiskContract()).claim(msg.sender, token);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/protocol/UpRight/interface/IUpRight.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.10;\\r\\n\\r\\ninterface IUpRight {\\r\\n  /****************************************************** */\\r\\n  /***********************STAKE************************** */\\r\\n  /****************************************************** */\\r\\n  function EnableStableTokens(uint256 _pId, uint256 amount, address account) external returns (bool);\\r\\n\\r\\n  function EnableSwapLpTokens(uint256 _pId, uint256 amount, address account) external returns (bool);\\r\\n\\r\\n  function EnableSwapTokens(uint256 _pId, uint256 amount, address account) external returns (bool);\\r\\n\\r\\n  function EnableBorrowStakeTokens(uint256 _pId, uint256 amount, address account) external returns (bool);\\r\\n\\r\\n  /****************************************************** */\\r\\n  /***********************CLAIM************************** */\\r\\n  /****************************************************** */\\r\\n  function ClaimStableToken(uint256 _pId, address account) external returns (bool);\\r\\n\\r\\n  function ClaimSwapLpToken(uint256 _pId, address account) external returns (bool);\\r\\n\\r\\n  function ClaimSwapToken(uint256 _pId, address account) external returns (bool);\\r\\n\\r\\n  function ClaimBorrowStakeToken(uint256 _pId, address account) external returns (bool);\\r\\n\\r\\n  /****************************************************** */\\r\\n  /***********************LOCK*************************** */\\r\\n  /****************************************************** */\\r\\n  function LockStableToken(uint256 pId, uint256 duration, address account) external returns (bool);\\r\\n\\r\\n  function LockSwapLpToken(uint256 pId, uint256 duration, address account) external returns (bool);\\r\\n\\r\\n  function LockSwapToken(uint256 pId, uint256 duration, address account) external returns (bool);\\r\\n\\r\\n  function LockBorrowStakeToken(uint256 pId, uint256 duration, address account) external returns (bool);\\r\\n\\r\\n  /****************************************************** */\\r\\n  /***********************UN-STAKE*********************** */\\r\\n  /****************************************************** */\\r\\n  function DisableStableToken(uint256 pId, address account) external returns (bool);\\r\\n\\r\\n  function DisableSwapLpToken(uint256 pId, address account) external returns (bool);\\r\\n\\r\\n  function DisableSwapToken(uint256 pId, address account) external returns (bool);\\r\\n\\r\\n  function DisableBorrowStakeToken(uint256 pId, address account) external returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/protocol/Viaduct/interface/IBscViaDuct.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.10;\\r\\n\\r\\ninterface IBscViaDuct {\\r\\n  /********************************************************* */\\r\\n  /***********************EVENTS**************************** */\\r\\n  /********************************************************* */\\r\\n\\r\\n  event bridgeBNB(address from, uint256 bnbAmount, uint256 usdAmount, uint256 price, uint256 eusdMintAmount, address to);\\r\\n  event bridgeBUSD(address from, uint256 busdAmount, uint256 usdAmount, uint256 price, uint256 eusdMintAmount, address to);\\r\\n\\r\\n  /********************************************************* */\\r\\n  /***********************FUNCTIONS************************ */\\r\\n  /********************************************************* */\\r\\n\\r\\n  function getLatestBnbPrice() external returns (uint256);\\r\\n\\r\\n  function getLatestBusdPrice() external returns (uint256);\\r\\n\\r\\n  function valueOfBnb(uint256 _bnbAmount) external returns (uint256, uint256);\\r\\n\\r\\n  function valueOfBusd(uint256 _busdAmount) external returns (uint256, uint256);\\r\\n\\r\\n  function setBnbPriceFeed(address _bnbPriceFeed) external returns (bool);\\r\\n\\r\\n  function setBusdPriceFeed(address _busdPriceFeed) external returns (bool);\\r\\n\\r\\n  function bridgeBnb(address account, address to) external payable returns (bool);\\r\\n\\r\\n  function bridgeBusd(uint256 amount, address account, address to) external returns (bool);\\r\\n\\r\\n  function syncBNB(uint256 amount, address payable to) external returns (bool);\\r\\n\\r\\n  function syncBUSD(uint256 amount, address to) external returns (bool);\\r\\n\\r\\n  function setFees(uint256 fee) external returns (bool);\\r\\n\\r\\n  function quoteBNB(uint256 amount) external returns (uint256, uint256, uint256, uint256);\\r\\n\\r\\n  function quoteBUSD(uint256 amount) external returns (uint256, uint256, uint256, uint256);\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 99999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IAddressesProvider\",\"name\":\"provider\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ADDRESSES_PROVIDER\",\"outputs\":[{\"internalType\":\"contract IAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pId\",\"type\":\"uint256\"}],\"name\":\"ClaimBorrowStakeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pId\",\"type\":\"uint256\"}],\"name\":\"ClaimStableToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pId\",\"type\":\"uint256\"}],\"name\":\"ClaimSwapLpToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pId\",\"type\":\"uint256\"}],\"name\":\"ClaimSwapToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Farm\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pId\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"LockBorrowStakeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"LockFarm\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"LockStableToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"LockSwapLpToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"LockSwapToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"bridgeBNB\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"bridgeBUSD\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeBorrowStakeTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeStableTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeSwapLpTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeSwapTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pId\",\"type\":\"uint256\"}],\"name\":\"unStakeBorrowStakeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pId\",\"type\":\"uint256\"}],\"name\":\"unStakeFarm\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pId\",\"type\":\"uint256\"}],\"name\":\"unStakeStableToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pId\",\"type\":\"uint256\"}],\"name\":\"unStakeSwapLpToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pId\",\"type\":\"uint256\"}],\"name\":\"unStakeSwapToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenToZap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmountOutMin\",\"type\":\"uint256\"}],\"name\":\"zapInToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token0ToZap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1ToZap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_token0AmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_token1AmountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmountInMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isToken0Sold\",\"type\":\"bool\"}],\"name\":\"zapInTokenRebalancing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenToReceive\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lpTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmountOutMin\",\"type\":\"uint256\"}],\"name\":\"zapOutToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Prime", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "99999", "ConstructorArguments": "00000000000000000000000013ed3ac9199ab184f6bafe8453a847d4223867b7", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}