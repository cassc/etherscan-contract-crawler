{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) internal {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nabstract contract Pausable is Context {\r\n    event Paused(address account);\r\n\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    function _requireNotPaused() internal view virtual {\r\n        require(!paused(), \"Pausable: paused\");\r\n    }\r\n\r\n    function _requirePaused() internal view virtual {\r\n        require(paused(), \"Pausable: not paused\");\r\n    }\r\n\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\ninterface TokenPriceInterface {\r\n    function getTokenPrice() external view returns (uint256);\r\n}\r\n\r\ncontract Staking is Ownable, Pausable {\r\n    IERC20 public token;\r\n    uint256 public DailyEarning = 40;\r\n    uint256 public minimumDeposit = 30 ether;\r\n\r\n    TokenPriceInterface public tokenPriceContract;\r\n    event Withdrawal(address indexed user, uint256 amount);\r\n\r\n    constructor() {\r\n        token = IERC20(0xbf035D8f65b804963a8131B4779863e2541Bd91E);\r\n        tokenPriceContract = TokenPriceInterface(\r\n            0x285DA06f3eeBA9eE2708Cac46ecD5Aab0A932D45\r\n        );\r\n    }\r\n\r\n    struct depoite {\r\n        uint256 amount;\r\n        uint256 depositeTime;\r\n        uint256 checkTime;\r\n        uint256 withdrawTime;\r\n    }\r\n\r\n    struct User {\r\n        depoite[] deposites;\r\n        address refferAddress;\r\n        uint256 refferReward;\r\n        uint256 withdrawReward;\r\n        uint256 timestamp;\r\n    }\r\n\r\n    mapping(address => User) public investment;\r\n    mapping(address => bool) public isExits;\r\n    mapping(address => address[]) myDirectReferrals;\r\n\r\n    uint256[] level = [15, 10, 5, 3, 2, 1];\r\n\r\n    function pause() external onlyOwner returns (bool success) {\r\n        _pause();\r\n        return true;\r\n    }\r\n\r\n    function unpause() external onlyOwner returns (bool success) {\r\n        _unpause();\r\n        return true;\r\n    }\r\n\r\n    function withdrawTokens(address _token, uint256 amount) external onlyOwner {\r\n        require(isContract(_token), \"Invalid contract address\");\r\n        require(\r\n            IERC20(_token).balanceOf(address(this)) >= amount,\r\n            \"Insufficient tokens\"\r\n        );\r\n        IERC20(_token).transfer(_msgSender(), amount);\r\n    }\r\n\r\n    function isContract(address _addr) private view returns (bool iscontract) {\r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n        return (size > 0);\r\n    }\r\n\r\n    function changeEarning(uint256 _apy) external onlyOwner {\r\n        require(_apy > 0, \" Invalid earning\");\r\n        DailyEarning = _apy;\r\n    }\r\n\r\n    modifier checkParameter(uint256 amount) {\r\n        require(\r\n            tokenToUsdPrice(amount) >= minimumDeposit,\r\n            \"Min deposit amount\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function importData(\r\n        address[] memory _users,\r\n        uint256[] memory amount,\r\n        uint256[] memory time,\r\n        uint256[] memory _updatedTime,\r\n        address[] memory _referrer,\r\n        uint256[] memory _referralAmount,\r\n        uint256[] memory _withdrawAmount,\r\n        address[][] memory _myDirectReferrals\r\n    ) external onlyOwner {\r\n        uint256 index = _users.length;\r\n        for (uint256 i = 0; i < index; i++) {\r\n            User storage users = investment[_users[i]];\r\n            users.deposites.push(\r\n                depoite(amount[i], time[i], _updatedTime[i], 500 days)\r\n            );\r\n            users.refferAddress = _referrer[i];\r\n            users.refferReward = _referralAmount[i];\r\n            users.withdrawReward = _withdrawAmount[i];\r\n            users.timestamp = time[i];\r\n            isExits[_users[i]] = true;\r\n            for (uint256 j = 0; j < _myDirectReferrals[i].length; j++) {\r\n                myDirectReferrals[_users[i]].push(_myDirectReferrals[i][j]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function invest(uint256 amount, address referrer)\r\n        public\r\n        checkParameter(amount)\r\n        whenNotPaused\r\n        returns (bool)\r\n    {\r\n        User storage users = investment[msg.sender];\r\n        require(\r\n            amount <= token.allowance(msg.sender, address(this)),\r\n            \"Insufficient Allowence to the contract\"\r\n        );\r\n        token.transferFrom(msg.sender, address(this), amount);\r\n        if (\r\n            referrer != address(0) &&\r\n            referrer != _msgSender() &&\r\n            isExits[referrer] &&\r\n            !isExits[_msgSender()]\r\n        ) {\r\n            users.refferAddress = referrer;\r\n            myDirectReferrals[referrer].push(_msgSender());\r\n        }\r\n        users.timestamp = block.timestamp;\r\n        users.deposites.push(\r\n            depoite(amount, block.timestamp, block.timestamp, 500 days)\r\n        );\r\n        isExits[_msgSender()] = true;\r\n        distributeReferralsReward(_msgSender(), amount);\r\n        return true;\r\n    }\r\n\r\n    function removeId(uint256 indexnum) internal {\r\n        for (\r\n            uint256 i = indexnum;\r\n            i < investment[_msgSender()].deposites.length - 1;\r\n            i++\r\n        ) {\r\n            investment[_msgSender()].deposites[i] = investment[_msgSender()]\r\n                .deposites[i + 1];\r\n        }\r\n        investment[_msgSender()].deposites.pop();\r\n    }\r\n\r\n    function unStake() external returns (bool) {\r\n        User memory users = investment[_msgSender()];\r\n        require(users.deposites.length > 0, \"No deposit amount\");\r\n        uint256 amount;\r\n        for (uint256 i = 0; i < users.deposites.length; i++) {\r\n            uint256 withdrawTime = users.deposites[i].depositeTime +\r\n                users.deposites[i].withdrawTime;\r\n            if (withdrawTime < block.timestamp) {\r\n                uint256 rewards = calculateRewardSpecificId(_msgSender(), i);\r\n                amount += users.deposites[i].amount + rewards;\r\n                removeId(i);\r\n            }\r\n        }\r\n        if (amount > 0) {\r\n            transactions(amount);\r\n        } else revert(\"Unstake time is not reached\");\r\n        return true;\r\n    }\r\n\r\n    function withdrawReferralsReward() external returns (bool) {\r\n        User storage users = investment[_msgSender()];\r\n        require(users.refferReward > 0, \"Referrals reward not found!\");\r\n        transactions(users.refferReward);\r\n        users.refferReward = 0;\r\n        return true;\r\n    }\r\n\r\n    function withdrawRewards() external returns (bool) {\r\n        User storage users = investment[_msgSender()];\r\n        uint256 totalRewards = calculateRewards(msg.sender);\r\n        require(totalRewards > 0, \"No Rewards Found\");\r\n        require(\r\n            totalRewards <= token.balanceOf(address(this)),\r\n            \"Not Enough Token for withdrwal from contract please try after some time\"\r\n        );\r\n        for (uint256 i = 0; i < users.deposites.length; i++) {\r\n            users.deposites[i].checkTime = block.timestamp;\r\n        }\r\n        transactions(totalRewards);\r\n        return true;\r\n    }\r\n\r\n    function calculateRewards(address _user) public view returns (uint256) {\r\n        User memory users = investment[_user];\r\n        uint256 rewards;\r\n        for (uint256 i = 0; i < users.deposites.length; i++) {\r\n            uint256 time = block.timestamp - users.deposites[i].checkTime;\r\n            rewards +=\r\n                (users.deposites[i].amount * (DailyEarning) * time) /\r\n                1 days /\r\n                10000;\r\n        }\r\n        uint256 totalAmountWithdraw = users.withdrawReward +\r\n            rewards +\r\n            users.refferReward;\r\n        uint256 depositAmount = getUserTotalDeposits(_user);\r\n        if (totalAmountWithdraw >= 4 * depositAmount) {\r\n            rewards =\r\n                4 *\r\n                depositAmount -\r\n                users.withdrawReward -\r\n                users.refferReward;\r\n        }\r\n        return rewards;\r\n    }\r\n\r\n    function calculateRewardSpecificId(address _user, uint256 id)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        User memory users = investment[_user];\r\n        uint256 time = block.timestamp - users.deposites[id].checkTime;\r\n        uint256 rewards = (users.deposites[id].amount * (DailyEarning) * time) /\r\n            1 days /\r\n            10000;\r\n\r\n        uint256 totalAmountWithdraw = users.withdrawReward +\r\n            rewards +\r\n            users.refferReward;\r\n        uint256 depositAmount = getUserTotalDeposits(_user);\r\n        if (totalAmountWithdraw >= 4 * depositAmount) {\r\n            rewards =\r\n                4 *\r\n                depositAmount -\r\n                users.withdrawReward -\r\n                users.refferReward;\r\n        }\r\n        return rewards;\r\n    }\r\n\r\n    function getUserDepositeHistory(address _user)\r\n        public\r\n        view\r\n        returns (uint256[] memory, uint256[] memory)\r\n    {\r\n        uint256[] memory amount = new uint256[](\r\n            investment[_user].deposites.length\r\n        );\r\n        uint256[] memory time = new uint256[](\r\n            investment[_user].deposites.length\r\n        );\r\n        for (uint256 i = 0; i < investment[_user].deposites.length; i++) {\r\n            amount[i] = investment[_user].deposites[i].amount;\r\n            time[i] = investment[_user].deposites[i].depositeTime;\r\n        }\r\n        return (amount, time);\r\n    }\r\n\r\n    function transactions(uint256 amount) private {\r\n        User storage users = investment[_msgSender()];\r\n        uint256 totalAmountWithdraw = users.withdrawReward + amount;\r\n        uint256 depositAmount = getUserTotalDeposits(_msgSender());\r\n        if (totalAmountWithdraw >= 4 * depositAmount) {\r\n            amount = 4 * depositAmount - users.withdrawReward;\r\n            token.transfer(_msgSender(), amount);\r\n            delete users.deposites;\r\n            delete investment[_msgSender()];\r\n            delete myDirectReferrals[_msgSender()];\r\n            isExits[_msgSender()] = false;\r\n        } else {\r\n            token.transfer(_msgSender(), amount);\r\n            users.withdrawReward += amount;\r\n        }\r\n        emit Withdrawal(msg.sender, amount);\r\n    }\r\n\r\n    function getUserTotalDeposits(address _user)\r\n        public\r\n        view\r\n        returns (uint256 _totalInvestment)\r\n    {\r\n        for (uint256 i = 0; i < investment[_user].deposites.length; i++) {\r\n            _totalInvestment =\r\n                _totalInvestment +\r\n                investment[_user].deposites[i].amount;\r\n        }\r\n    }\r\n\r\n    function getmyDirectReferrals(address _user)\r\n        public\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        return myDirectReferrals[_user];\r\n    }\r\n\r\n    function distributeReferralsReward(address _user, uint256 amount) private {\r\n        address referral = investment[_user].refferAddress;\r\n        for (uint256 i = 0; i < 15; i++) {\r\n            if (referral != address(0) && isExits[referral]) {\r\n                User storage users = investment[referral];\r\n                uint256 roiRewards = calculateRewards(referral);\r\n                if (i < 5) {\r\n                    uint256 refferReward = (amount * level[i]) / 100;\r\n                    uint256 totalAmountWithdraw = users.withdrawReward +\r\n                        users.refferReward +\r\n                        refferReward +\r\n                        roiRewards;\r\n                    uint256 depositAmount = getUserTotalDeposits(referral);\r\n                    if (totalAmountWithdraw >= 4 * depositAmount) {\r\n                        refferReward =\r\n                            4 *\r\n                            depositAmount -\r\n                            users.withdrawReward -\r\n                            users.refferReward -\r\n                            roiRewards;\r\n                        users.refferReward += refferReward;\r\n                    } else users.refferReward += refferReward;\r\n                } else {\r\n                    uint256 refferReward = (amount * level[5]) / 100;\r\n                    uint256 totalAmountWithdraw = users.withdrawReward +\r\n                        users.refferReward +\r\n                        refferReward +\r\n                        roiRewards;\r\n                    uint256 depositAmount = getUserTotalDeposits(referral);\r\n                    if (totalAmountWithdraw >= 4 * depositAmount) {\r\n                        refferReward =\r\n                            4 *\r\n                            depositAmount -\r\n                            users.withdrawReward -\r\n                            users.refferReward -\r\n                            roiRewards;\r\n                        users.refferReward += refferReward;\r\n                    } else users.refferReward += refferReward;\r\n                }\r\n                referral = users.refferAddress;\r\n            } else break;\r\n        }\r\n    }\r\n\r\n    function getTokenPrice() public view returns (uint256) {\r\n        return tokenPriceContract.getTokenPrice(); // 2 decimals\r\n    }\r\n\r\n    function tokenToUsdPrice(uint256 amount) public view returns (uint256) {\r\n        uint256 tokens = (amount * 100) / getTokenPrice();\r\n        return tokens;\r\n    }\r\n\r\n    function usdToTokens(uint256 amount) public view returns (uint256) {\r\n        uint256 tokens = (amount * getTokenPrice()) / 100;\r\n        return tokens;\r\n    }\r\n\r\n    function teamBusinessAmounts(address _user) public view returns (uint256) {\r\n        uint256 amount;\r\n        for (uint24 i = 0; i < getTeamLength(_user); i++) {\r\n            address referralAddress = myDirectReferrals[_user][i];\r\n            amount += getUserTotalDeposits(referralAddress);\r\n            amount += teamBusinessAmount(referralAddress);\r\n        }\r\n        return tokenToUsdPrice(amount);\r\n    }\r\n\r\n    function teamBusinessAmount(address _user) private view returns (uint256) {\r\n        uint256 amount;\r\n        for (uint24 i = 0; i < getTeamLength(_user); i++) {\r\n            amount += getUserTotalDeposits(myDirectReferrals[_user][i]);\r\n            address firstUser = myDirectReferrals[_user][i];\r\n            for (uint24 i1 = 0; i1 < getTeamLength(firstUser); i1++) {\r\n                amount += getUserTotalDeposits(\r\n                    myDirectReferrals[firstUser][i1]\r\n                );\r\n                address secondUser = myDirectReferrals[firstUser][i1];\r\n                for (uint24 i2 = 0; i2 < getTeamLength(secondUser); i2++) {\r\n                    amount += getUserTotalDeposits(\r\n                        myDirectReferrals[secondUser][i2]\r\n                    );\r\n                    address thirdUser = myDirectReferrals[secondUser][i2];\r\n                    for (uint24 i3 = 0; i3 < getTeamLength(thirdUser); i3++) {\r\n                        amount += getUserTotalDeposits(\r\n                            myDirectReferrals[thirdUser][i3]\r\n                        );\r\n                        address fourthUser = myDirectReferrals[thirdUser][i3];\r\n                        for (\r\n                            uint24 i4 = 0;\r\n                            i4 < getTeamLength(fourthUser);\r\n                            i4++\r\n                        ) {\r\n                            amount += getUserTotalDeposits(\r\n                                myDirectReferrals[fourthUser][i4]\r\n                            );\r\n                            address fifthUser = myDirectReferrals[fourthUser][\r\n                                i4\r\n                            ];\r\n                            for (\r\n                                uint24 i5 = 0;\r\n                                i5 < getTeamLength(fifthUser);\r\n                                i5++\r\n                            ) {\r\n                                amount += getUserTotalDeposits(\r\n                                    myDirectReferrals[fifthUser][i5]\r\n                                );\r\n                                address sixthUser = myDirectReferrals[\r\n                                    fifthUser\r\n                                ][i5];\r\n                                for (\r\n                                    uint24 i6 = 0;\r\n                                    i6 < getTeamLength(sixthUser);\r\n                                    i6++\r\n                                ) {\r\n                                    amount += getUserTotalDeposits(\r\n                                        myDirectReferrals[sixthUser][i6]\r\n                                    );\r\n                                    address seventhUser = myDirectReferrals[\r\n                                        sixthUser\r\n                                    ][i6];\r\n                                    amount += teamBusinessAmount2(seventhUser);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return (amount);\r\n    }\r\n\r\n    function teamBusinessAmount2(address _user) private view returns (uint256) {\r\n        uint256 amount;\r\n        for (uint24 i = 0; i < getTeamLength(_user); i++) {\r\n            amount += getUserTotalDeposits(myDirectReferrals[_user][i]);\r\n            address firstUser = myDirectReferrals[_user][i];\r\n            for (uint24 i1 = 0; i1 < getTeamLength(firstUser); i1++) {\r\n                amount += getUserTotalDeposits(\r\n                    myDirectReferrals[firstUser][i1]\r\n                );\r\n                address secondUser = myDirectReferrals[firstUser][i1];\r\n                for (uint24 i2 = 0; i2 < getTeamLength(secondUser); i2++) {\r\n                    amount += getUserTotalDeposits(\r\n                        myDirectReferrals[secondUser][i2]\r\n                    );\r\n                    address thirdUser = myDirectReferrals[secondUser][i2];\r\n                    for (uint24 i3 = 0; i3 < getTeamLength(thirdUser); i3++) {\r\n                        amount += getUserTotalDeposits(\r\n                            myDirectReferrals[thirdUser][i3]\r\n                        );\r\n                        address fourthUser = myDirectReferrals[thirdUser][i3];\r\n                        for (\r\n                            uint24 i4 = 0;\r\n                            i4 < getTeamLength(fourthUser);\r\n                            i4++\r\n                        ) {\r\n                            amount += getUserTotalDeposits(\r\n                                myDirectReferrals[fourthUser][i4]\r\n                            );\r\n                            address fifthUser = myDirectReferrals[fourthUser][\r\n                                i4\r\n                            ];\r\n                            for (\r\n                                uint24 i5 = 0;\r\n                                i5 < getTeamLength(fifthUser);\r\n                                i5++\r\n                            ) {\r\n                                amount += getUserTotalDeposits(\r\n                                    myDirectReferrals[fifthUser][i5]\r\n                                );\r\n                                address sixthUser = myDirectReferrals[\r\n                                    fifthUser\r\n                                ][i5];\r\n                                for (\r\n                                    uint24 i6 = 0;\r\n                                    i6 < getTeamLength(sixthUser);\r\n                                    i6++\r\n                                ) {\r\n                                    amount += getUserTotalDeposits(\r\n                                        myDirectReferrals[fifthUser][i6]\r\n                                    );\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return (amount);\r\n    }\r\n\r\n    function getTeamLength(address _user) public view returns (uint256) {\r\n        return myDirectReferrals[_user].length;\r\n    }\r\n\r\n    function totalWithdrawRewards(address _user)\r\n        public\r\n        view\r\n        returns (uint256 amount)\r\n    {\r\n        User memory users = investment[_user];\r\n        amount = users.withdrawReward;\r\n    }\r\n\r\n    function getReferralsReward(address _user) public view returns (uint256) {\r\n        User memory users = investment[_user];\r\n        return users.refferReward;\r\n    }\r\n\r\n    struct group {\r\n        bool step1;\r\n        bool step2;\r\n        bool step3;\r\n        bool step4;\r\n        bool step5;\r\n        bool step6;\r\n        bool step7;\r\n        bool step8;\r\n    }\r\n\r\n    mapping(address => group) incomeGroup;\r\n\r\n    function claimRewardsIncome() external {\r\n        address user = msg.sender;\r\n        User memory users = investment[user];\r\n        uint256 amount = teamBusinessAmounts(user);\r\n        bool claimStatus;\r\n        uint256 businessAmount;\r\n        require(\r\n            amount >= 1000 ether,\r\n            \"Minimum total business requirement not met\"\r\n        );\r\n        if (amount >= 1500000 ether && !incomeGroup[user].step1) {\r\n            incomeGroup[user].step1 = true;\r\n            businessAmount += usdToTokens(20000 ether);\r\n            claimStatus = true;\r\n        }\r\n        if (\r\n            amount >= 700000 ether &&\r\n            amount < 1500000 ether &&\r\n            !incomeGroup[user].step2\r\n        ) {\r\n            incomeGroup[user].step2 = true;\r\n            businessAmount += usdToTokens(10000 ether);\r\n            claimStatus = true;\r\n        }\r\n        if (\r\n            amount >= 300000 ether &&\r\n            amount < 700000 ether &&\r\n            !incomeGroup[user].step3\r\n        ) {\r\n            incomeGroup[user].step3 = true;\r\n            businessAmount += usdToTokens(5000 ether);\r\n            claimStatus = true;\r\n        }\r\n        if (\r\n            amount >= 150000 ether &&\r\n            amount < 300000 ether &&\r\n            !incomeGroup[user].step4\r\n        ) {\r\n            incomeGroup[user].step4 = true;\r\n            businessAmount += usdToTokens(2000 ether);\r\n            claimStatus = true;\r\n        }\r\n        if (\r\n            amount >= 50000 ether &&\r\n            amount < 150000 ether &&\r\n            !incomeGroup[user].step5\r\n        ) {\r\n            incomeGroup[user].step5 = true;\r\n            businessAmount += usdToTokens(1000 ether);\r\n            claimStatus = true;\r\n        }\r\n        if (\r\n            amount >= 25000 ether &&\r\n            amount < 50000 ether &&\r\n            !incomeGroup[user].step6\r\n        ) {\r\n            incomeGroup[user].step6 = true;\r\n            businessAmount += usdToTokens(500 ether);\r\n            claimStatus = true;\r\n        }\r\n        if (\r\n            amount >= 5000 ether &&\r\n            amount < 25000 ether &&\r\n            !incomeGroup[user].step7\r\n        ) {\r\n            incomeGroup[user].step7 = true;\r\n            businessAmount += usdToTokens(200 ether);\r\n            claimStatus = true;\r\n        }\r\n        if (\r\n            amount >= 1000 ether &&\r\n            amount < 5000 ether &&\r\n            !incomeGroup[user].step8\r\n        ) {\r\n            incomeGroup[user].step8 = true;\r\n            businessAmount += usdToTokens(50 ether);\r\n            claimStatus = true;\r\n        }\r\n        uint256 roiRewards = calculateRewards(user);\r\n        uint256 totalAmountWithdraw = users.withdrawReward +\r\n            users.refferReward +\r\n            businessAmount +\r\n            roiRewards;\r\n        uint256 depositAmount = getUserTotalDeposits(user);\r\n        if (totalAmountWithdraw >= 4 * depositAmount) {\r\n            businessAmount =\r\n                4 *\r\n                depositAmount -\r\n                users.withdrawReward -\r\n                users.refferReward -\r\n                roiRewards;\r\n        }\r\n\r\n        if (businessAmount > 0) {\r\n            transactions(businessAmount);\r\n        } else revert(\"No bonus prizes received!\");\r\n\r\n        require(claimStatus, \"Minimum total business requirement not met\");\r\n    }\r\n\r\n    function bonusStatus(address user) external view returns (bool) {\r\n        uint256 amount = teamBusinessAmounts(user);\r\n        User memory users = investment[user];\r\n        bool claimStatus;\r\n        if (amount >= 1500000 ether && !incomeGroup[user].step1) {\r\n            claimStatus = true;\r\n        }\r\n        if (\r\n            amount >= 700000 ether &&\r\n            amount < 1500000 ether &&\r\n            !incomeGroup[user].step2\r\n        ) {\r\n            claimStatus = true;\r\n        }\r\n        if (\r\n            amount >= 300000 ether &&\r\n            amount < 700000 ether &&\r\n            !incomeGroup[user].step3\r\n        ) {\r\n            claimStatus = true;\r\n        }\r\n        if (\r\n            amount >= 150000 ether &&\r\n            amount < 300000 ether &&\r\n            !incomeGroup[user].step4\r\n        ) {\r\n            claimStatus = true;\r\n        }\r\n        if (\r\n            amount >= 50000 ether &&\r\n            amount < 150000 ether &&\r\n            !incomeGroup[user].step5\r\n        ) {\r\n            claimStatus = true;\r\n        }\r\n        if (\r\n            amount >= 25000 ether &&\r\n            amount < 50000 ether &&\r\n            !incomeGroup[user].step6\r\n        ) {\r\n            claimStatus = true;\r\n        }\r\n        if (\r\n            amount >= 5000 ether &&\r\n            amount < 25000 ether &&\r\n            !incomeGroup[user].step7\r\n        ) {\r\n            claimStatus = true;\r\n        }\r\n        if (\r\n            amount >= 1000 ether &&\r\n            amount < 5000 ether &&\r\n            !incomeGroup[user].step8\r\n        ) {\r\n            claimStatus = true;\r\n        }\r\n        uint256 totalAmountWithdraw = users.withdrawReward +\r\n            users.refferReward +\r\n            calculateRewards(user);\r\n        uint256 depositAmount = getUserTotalDeposits(user);\r\n        if (totalAmountWithdraw >= 4 * depositAmount) {\r\n            claimStatus = false;\r\n        }\r\n        return claimStatus;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DailyEarning\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"bonusStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"calculateRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_apy\",\"type\":\"uint256\"}],\"name\":\"changeEarning\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewardsIncome\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getReferralsReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTeamLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserDepositeHistory\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserTotalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalInvestment\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getmyDirectReferrals\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"time\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_updatedTime\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_referrer\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_referralAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_withdrawAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"address[][]\",\"name\":\"_myDirectReferrals\",\"type\":\"address[][]\"}],\"name\":\"importData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"invest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"investment\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"refferAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"refferReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"teamBusinessAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPriceContract\",\"outputs\":[{\"internalType\":\"contract TokenPriceInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"tokenToUsdPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"totalWithdrawRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"usdToTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawReferralsReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Staking", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0d38d592f36105d5e4b32894dbadc32cd48a97577ce812eafada2133e0f76220"}