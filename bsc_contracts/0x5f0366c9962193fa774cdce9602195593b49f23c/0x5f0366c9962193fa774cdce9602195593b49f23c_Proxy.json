{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract Admin {\r\n    address public admin;\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin, \"Admin: Not admin\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        setAdmin(msg.sender);\r\n    }\r\n\r\n    function setAdmin(address _newAdmin) private {\r\n        admin = _newAdmin;\r\n    }\r\n\r\n    function tranfserAdminRights(address _newAdmin) external onlyAdmin {\r\n        _transferAdminRights(_newAdmin);\r\n    }\r\n\r\n    function _transferAdminRights(address _newAdmin) private {\r\n        require(_newAdmin != address(0), \"Admin: Zero Address\");\r\n        setAdmin(_newAdmin);\r\n    }\r\n}\r\n\r\ncontract Upgradeable is Admin {\r\n    bytes32 private constant implementationPosition =\r\n        keccak256(\"implementation\");\r\n\r\n    function getImplementation() public view returns (address implementation) {\r\n        bytes32 position = implementationPosition;\r\n        assembly {\r\n            implementation := sload(position)\r\n        }\r\n    }\r\n\r\n    function setImplementation(address _newImplementation) external onlyAdmin {\r\n        require(_newImplementation != address(0), \"Upgradeable: Zero Address\");\r\n        require(\r\n            isContract(_newImplementation),\r\n            \"Upgradeable: Implemenentation address must be a contract\"\r\n        );\r\n        address currentImplementation = getImplementation();\r\n        require(\r\n            currentImplementation != _newImplementation,\r\n            \"Upgradeable: Old and New implementation addresses are same\"\r\n        );\r\n        bytes32 position = implementationPosition;\r\n        assembly {\r\n            sstore(position, _newImplementation)\r\n        }\r\n    }\r\n\r\n    function isContract(address _target) private view returns (bool) {\r\n        if (_target == address(0)) {\r\n            return false;\r\n        }\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(_target)\r\n        }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\ncontract Proxy is Upgradeable {\r\n    fallback() external {\r\n        require(msg.data.length > 0, \"Upgradeable: Invalid data sent\");\r\n        address _impl = getImplementation();\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            calldatacopy(ptr, 0x0, calldatasize())\r\n            let result := delegatecall(\r\n                gas(),\r\n                _impl,\r\n                ptr,\r\n                calldatasize(),\r\n                0x0,\r\n                0\r\n            )\r\n            let size := returndatasize()\r\n            returndatacopy(ptr, 0x0, size)\r\n            switch result\r\n            case 0 {\r\n                revert(ptr, size)\r\n            }\r\n            default {\r\n                return(ptr, size)\r\n            }\r\n        }\r\n    }\r\n}", "ABI": "[{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newImplementation\",\"type\":\"address\"}],\"name\":\"setImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"tranfserAdminRights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f319a67f11aea1355aa5037c4d3b38eee811548670f5779b810f45039c3a7e53"}