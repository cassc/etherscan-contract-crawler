{"SourceCode": "//SPDX-License-Identifier: MIT\r\n//Site:         https://evilpepe.site/\r\n//Telegram:     https://t.me/EvilPepeOfficial\r\n\r\npragma solidity =0.8.19;\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface BEP20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface InterfaceLP {\r\n    function sync() external;\r\n}\r\n\r\ncontract EVILPEPE {\r\n    IDEXRouter public router =\r\n        IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n    InterfaceLP public pairContract;\r\n    address public DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address public betFeeReceiver = 0x1568203454F89c16dce8A71187Db99bAbF8eEB8c;\r\n    address public marketingFeeReceiver =\r\n        0x9FD15E4F22A9C6ef98e0a1a5aA0a5793F8d25618;\r\n    address public stakePoolReceiver =\r\n        0x9FD15E4F22A9C6ef98e0a1a5aA0a5793F8d25618;\r\n    address public buyTokensReceiver =\r\n        0x9FD15E4F22A9C6ef98e0a1a5aA0a5793F8d25618;\r\n    string public name = \"EVIL PEPE\";\r\n    string public symbol = \"$EVILPEPE\";\r\n    uint8 constant _decimals = 18;\r\n    uint256 private _totalSupply = 1000000000 * (10**_decimals);\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) public _isExcludedFromFee;\r\n    mapping(address => bool) public pair;\r\n    //Events, logs and troubleshooting\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event nameUpdated(string newName);\r\n    event symbolUpdated(string newSymbol);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event auditLog(string);\r\n    uint256 public buyTax = 100;\r\n    uint256 public sellTax = 900;\r\n\r\n    //BUY FEES\r\n    uint256 public liquidityFee = 0; // 0% autoliquidify\r\n    uint256 public marketingFee = 0; // 0% marketing\r\n    uint256 public betFee = 0; // 0% bet\r\n    uint256 public stakePoolFee = 0; // 0% stakePool\r\n    uint256 public burnFee = 100; // 1% BURN\r\n\r\n    //SELL FEES\r\n    uint256 public sellLiquidityFee = 0; // 0% autoliquidify\r\n    uint256 public sellMarketingFee = 600; // 6% marketing\r\n    uint256 public sellbetFee = 300; // 3% bet\r\n    uint256 public sellStakePoolFee = 0; // 0% stakePool\r\n    uint256 public sellBurnFee = 0; // 0% BURN\r\n\r\n    uint256 public feeDenominator = 10000;\r\n    uint256 public distributorGas = 300000;\r\n    uint256 public txbnbGas = 50000;\r\n    uint256 public LiquidifyGas = 500000;\r\n    uint256 public swapThreshold = 10 * (10**_decimals);\r\n\r\n    uint256 public lastSync;\r\n    bool public burnEnabled = true;\r\n\r\n    bool public swapEnabled = true;\r\n    bool public inSwap;\r\n    modifier swapping() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    address public WBNB = router.WETH();\r\n    address private _owner;\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n        _allowances[address(this)][address(router)] = _totalSupply * 100;\r\n        _isExcludedFromFee[msg.sender] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n        _balances[msg.sender] = _totalSupply;\r\n        address _pair = IDEXFactory(router.factory()).createPair(\r\n            WBNB,\r\n            address(this)\r\n        );\r\n        pairContract = InterfaceLP(_pair);\r\n        pair[_pair] = true;\r\n\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function totalSupply() external view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function decimals() external pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function getOwner() external view returns (address) {\r\n        return owner();\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(address holder, address spender)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _allowances[holder][spender];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool)\r\n    {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool) {\r\n        require(\r\n            _allowances[sender][msg.sender] >= amount,\r\n            \"Insufficient Allowance\"\r\n        );\r\n        _allowances[sender][msg.sender] =\r\n            _allowances[sender][msg.sender] -\r\n            amount;\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function setPair(address _pair, bool io) external onlyOwner {\r\n        require(pair[_pair] != io, \"The pair already have that value.\");\r\n        pair[_pair] = io;\r\n        emit auditLog(\"We have updated the setPair\");\r\n    }\r\n\r\n    //The following function will update the name of the token in the code and external view.\r\n    //this function wont update the immutable name.\r\n    //this will be used for dAPP to display the current name.\r\n    function changeName(string memory newName) external onlyOwner {\r\n        require(bytes(newName).length > 0, \"New name cannot be empty\");\r\n        require(\r\n            keccak256(abi.encodePacked(newName)) !=\r\n                keccak256(abi.encodePacked(name)),\r\n            \"New name must be different from the current name\"\r\n        );\r\n\r\n        name = newName;\r\n        emit nameUpdated(newName);\r\n    }\r\n\r\n    //The following function will update the symbol of the token in the code and external view.\r\n    //this function wont update the immutable name.\r\n    //this will be used for dAPP to display the current name.\r\n    function changeSymbol(string memory newSymbol) external onlyOwner {\r\n        require(bytes(newSymbol).length > 0, \"New symbol cannot be empty\");\r\n        require(\r\n            keccak256(abi.encodePacked(newSymbol)) !=\r\n                keccak256(abi.encodePacked(symbol)),\r\n            \"New symbol must be different from the current symbol\"\r\n        );\r\n\r\n        symbol = newSymbol;\r\n        emit symbolUpdated(newSymbol);\r\n    }\r\n\r\n    function excludeFromFee(address account) external onlyOwner {\r\n        require(\r\n            _isExcludedFromFee[account] != true,\r\n            \"The address is already excluded.\"\r\n        );\r\n\r\n        _isExcludedFromFee[account] = true;\r\n        emit auditLog(\"We have added the address to the exclude list.\");\r\n    }\r\n\r\n    function includeInFee(address account) external onlyOwner {\r\n        require(\r\n            _isExcludedFromFee[account] != false,\r\n            \"The address is already included.\"\r\n        );\r\n        _isExcludedFromFee[account] = false;\r\n        emit auditLog(\"We have added the address to the inclusion list.\");\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function burn(uint256 amount) external {\r\n        require(amount > 0, \"You need to burn more than 0.\");\r\n        _burn(msg.sender, amount);\r\n        emit auditLog(\"We have successfully burned tokens.\");\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(amount != 0);\r\n        require(amount <= _balances[account]);\r\n        _balances[account] = _balances[account] - amount;\r\n        _totalSupply = _totalSupply - amount;\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _burnIN(address account, uint256 amount) internal {\r\n        _totalSupply = _totalSupply - amount;\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function shouldSwapBack() internal view returns (bool) {\r\n        return\r\n            !pair[msg.sender] &&\r\n            !inSwap &&\r\n            swapEnabled &&\r\n            _balances[address(this)] >= swapThreshold;\r\n    }\r\n\r\n    function setMarketingFeeReceivers(address _marketingFeeReceiver)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            _marketingFeeReceiver != address(0),\r\n            \"setMarketingFeeReceivers: ZERO\"\r\n        );\r\n        marketingFeeReceiver = _marketingFeeReceiver;\r\n        emit auditLog(\"We have updated the Marketing Wallet.\");\r\n    }\r\n\r\n    function setBetFeeReceivers(address _betFeeReceiver) external onlyOwner {\r\n        require(_betFeeReceiver != address(0), \"setBetFeeReceivers: ZERO\");\r\n        betFeeReceiver = _betFeeReceiver;\r\n        emit auditLog(\"We have updated the bet Wallet\");\r\n    }\r\n\r\n    function setStakePoolReceiver(address _autoStakePoolReceiver)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            _autoStakePoolReceiver != address(0),\r\n            \"setStakePoolReceive: ZERO\"\r\n        );\r\n        stakePoolReceiver = _autoStakePoolReceiver;\r\n        emit auditLog(\"We have updated Stake Pool Wallet.\");\r\n    }\r\n\r\n    function setBuyTokensReceiver(address _buyTokensReceiver)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            _buyTokensReceiver != address(0),\r\n            \"setbBuyTokensReceiver: ZERO\"\r\n        );\r\n        buyTokensReceiver = _buyTokensReceiver;\r\n        emit auditLog(\"We have updated the buy Tokens.\");\r\n    }\r\n\r\n    function setSwapBackSettings(bool _enabled) external onlyOwner {\r\n        require(swapEnabled != _enabled, \"Value already set\");\r\n        swapEnabled = _enabled;\r\n        emit auditLog(\"We have updted swapback\");\r\n    }\r\n\r\n    function value(uint256 amount, uint256 percent)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return (amount * percent) / feeDenominator;\r\n    }\r\n\r\n    function _isSell(bool a) internal view returns (uint256) {\r\n        if (a) {\r\n            return sellTax;\r\n        } else {\r\n            return buyTax;\r\n        }\r\n    }\r\n\r\n    function BURNFEE(bool a) internal view returns (uint256) {\r\n        if (a) {\r\n            return sellBurnFee;\r\n        } else {\r\n            return burnFee;\r\n        }\r\n    }\r\n\r\n    function MKTFEE(bool a) internal view returns (uint256) {\r\n        if (a) {\r\n            return sellMarketingFee;\r\n        } else {\r\n            return marketingFee;\r\n        }\r\n    }\r\n\r\n    function betFEE(bool a) internal view returns (uint256) {\r\n        if (a) {\r\n            return sellbetFee;\r\n        } else {\r\n            return betFee;\r\n        }\r\n    }\r\n\r\n    function LIQUIFYFEE(bool a) internal view returns (uint256) {\r\n        if (a) {\r\n            return sellLiquidityFee;\r\n        } else {\r\n            return liquidityFee;\r\n        }\r\n    }\r\n\r\n    function STAKEPOOLFEE(bool a) internal view returns (uint256) {\r\n        if (a) {\r\n            return sellStakePoolFee;\r\n        } else {\r\n            return stakePoolFee;\r\n        }\r\n    }\r\n\r\n    function _transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        if (_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]) {\r\n            _basicTransfer(sender, recipient, amount);\r\n            return true;\r\n        } else {\r\n            uint256 liquidifyFeeAmount = value(\r\n                amount,\r\n                LIQUIFYFEE(pair[recipient])\r\n            );\r\n            uint256 stkpoolFeeAmount = value(\r\n                amount,\r\n                STAKEPOOLFEE(pair[recipient])\r\n            );\r\n            uint256 marketingFeeAmount = value(amount, MKTFEE(pair[recipient]));\r\n            uint256 betFeeAmount = value(amount, betFEE(pair[recipient]));\r\n            uint256 burnFeeAmount = value(amount, BURNFEE(pair[recipient]));\r\n\r\n            uint256 FeeAmount = liquidifyFeeAmount +\r\n                stkpoolFeeAmount +\r\n                marketingFeeAmount +\r\n                betFeeAmount;\r\n\r\n            _txTransfer(sender, address(this), FeeAmount);\r\n\r\n            swapThreshold = balanceOf(address(this));\r\n            if (shouldSwapBack()) {\r\n                swapBack(\r\n                    marketingFeeAmount,\r\n                    liquidifyFeeAmount,\r\n                    stkpoolFeeAmount,\r\n                    betFeeAmount\r\n                );\r\n            } else {\r\n                _balances[address(this)] = _balances[address(this)] - FeeAmount;\r\n                _txTransfer(address(this), buyTokensReceiver, FeeAmount);\r\n\r\n                swapThreshold = balanceOf(address(this));\r\n            }\r\n            _txTransfer(sender, DEAD, burnFeeAmount);\r\n            uint256 feeAmount = value(amount, _isSell(pair[recipient]));\r\n            uint256 amountWithFee = amount - feeAmount;\r\n\r\n            _balances[sender] = _balances[sender] - amount;\r\n            _balances[recipient] = _balances[recipient] + amountWithFee;\r\n\r\n            emit Transfer(sender, recipient, amountWithFee);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function _basicTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        require(_balances[sender] >= amount, \"Insufficient Balance\");\r\n        _balances[sender] = _balances[sender] - amount;\r\n        _balances[recipient] = _balances[recipient] + amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _txTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal {\r\n        _balances[recipient] = _balances[recipient] + amount;\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function getamount(uint256 amount, address[] memory path)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return router.getAmountsOut(amount, path)[1];\r\n    }\r\n\r\n    function swapBack(\r\n        uint256 marketing,\r\n        uint256 liquidity,\r\n        uint256 stakePool,\r\n        uint256 bet\r\n    ) internal swapping {\r\n        uint256 a = marketing + liquidity + stakePool + bet;\r\n        if (a <= swapThreshold) {} else {\r\n            a = swapThreshold;\r\n        }\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = WBNB;\r\n\r\n        uint256 amountBNBLiquidity = liquidity > 0\r\n            ? getamount(liquidity / 2, path)\r\n            : 0;\r\n        uint256 amountBNBMarketing = marketing > 0\r\n            ? getamount(marketing, path)\r\n            : 0;\r\n        uint256 amountBNBStakePool = stakePool > 0\r\n            ? getamount(stakePool, path)\r\n            : 0;\r\n        uint256 amountBNBbet = bet > 0 ? getamount(bet, path) : 0;\r\n        uint256 amountToLiquidify = liquidity > 0 ? (liquidity / 2) : 0;\r\n\r\n        uint256 amountToSwap = amountToLiquidify > 0\r\n            ? a - amountToLiquidify\r\n            : a;\r\n\r\n        swapThreshold = balanceOf(address(this));\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        bool success;\r\n        if (amountBNBMarketing > 0) {\r\n            (success, ) = payable(marketingFeeReceiver).call{\r\n                value: amountBNBMarketing,\r\n                gas: txbnbGas\r\n            }(\"\");\r\n            // payable(marketingFeeReceiver).transfer(amountBNBMarketing);\r\n        }\r\n        if (amountBNBbet > 0) {\r\n            (success, ) = payable(betFeeReceiver).call{\r\n                value: amountBNBbet,\r\n                gas: txbnbGas\r\n            }(\"\");\r\n            // payable(marketingFeeReceiver).transfer(amountBNBMarketing);\r\n        }\r\n        if (amountBNBStakePool > 0) {\r\n            (success, ) = payable(stakePoolReceiver).call{\r\n                value: amountBNBStakePool,\r\n                gas: txbnbGas\r\n            }(\"\");\r\n            //payable(stakePoolReceiver).transfer(amountBNBStakePool);\r\n        }\r\n\r\n        if (amountToLiquidify > 0) {\r\n            router.addLiquidityETH{\r\n                value: amountToLiquidify <= address(this).balance\r\n                    ? amountBNBLiquidity\r\n                    : address(this).balance,\r\n                gas: LiquidifyGas\r\n            }(\r\n                address(this),\r\n                amountToLiquidify,\r\n                0,\r\n                0,\r\n                address(this),\r\n                block.timestamp\r\n            );\r\n        }\r\n    }\r\n\r\n    function setFees(\r\n        uint256 _liquidityFee,\r\n        uint256 _stakePoolFee,\r\n        uint256 _burnFee,\r\n        uint256 _marketingFee,\r\n        uint256 _betFee,\r\n        uint256 _sellLiquidityFee,\r\n        uint256 _sellStakePoolFee,\r\n        uint256 _sellBurnFee,\r\n        uint256 _sellMarketingFee,\r\n        uint256 _sellbetFee\r\n    ) external onlyOwner {\r\n        liquidityFee = _liquidityFee;\r\n        marketingFee = _marketingFee;\r\n        betFee = _betFee;\r\n        stakePoolFee = _stakePoolFee;\r\n        burnFee = _burnFee;\r\n\r\n        buyTax =\r\n            _liquidityFee +\r\n            _marketingFee +\r\n            _stakePoolFee +\r\n            _burnFee +\r\n            betFee;\r\n\r\n        sellLiquidityFee = _sellLiquidityFee;\r\n        sellStakePoolFee = _sellStakePoolFee;\r\n        sellBurnFee = _sellBurnFee;\r\n        sellMarketingFee = _sellMarketingFee;\r\n        sellbetFee = _sellbetFee;\r\n        sellTax =\r\n            _sellLiquidityFee +\r\n            _sellStakePoolFee +\r\n            _sellBurnFee +\r\n            _sellMarketingFee +\r\n            _sellbetFee;\r\n\r\n        require(\r\n            (buyTax + sellTax) <= 1500,\r\n            \"Buy+Sell tax cannot be more than 15%\"\r\n        );\r\n        emit auditLog(\"We have updated the Fees.\");\r\n    }\r\n\r\n    function multiTransfer(\r\n        address[] calldata addresses,\r\n        uint256[] calldata tokens\r\n    ) external {\r\n        require(_isExcludedFromFee[msg.sender]);\r\n        address from = msg.sender;\r\n\r\n        require(\r\n            addresses.length < 501,\r\n            \"GAS Error: max limit is 500 addresses\"\r\n        );\r\n        require(\r\n            addresses.length == tokens.length,\r\n            \"Mismatch between address and token count\"\r\n        );\r\n\r\n        uint256 SCCC = 0;\r\n\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            SCCC = SCCC + tokens[i];\r\n        }\r\n\r\n        require(balanceOf(from) >= SCCC, \"Not enough tokens in wallet\");\r\n\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            _basicTransfer(from, addresses[i], tokens[i]);\r\n        }\r\n        emit auditLog(\"We have performed the multisend.\");\r\n    }\r\n\r\n    function manualSend() external onlyOwner {\r\n        payable(marketingFeeReceiver).transfer(address(this).balance);\r\n        _basicTransfer(\r\n            address(this),\r\n            marketingFeeReceiver,\r\n            balanceOf(address(this))\r\n        );\r\n        emit auditLog(\"We have performed a manualSend\");\r\n    }\r\n\r\n    function disableBurns() external onlyOwner {\r\n        require(burnEnabled = false, \"Burns have been disable.\");\r\n        burnEnabled = false;\r\n        emit auditLog(\"We have disabled burns.\");\r\n    }\r\n\r\n    function LpBurn(uint256 percent) external onlyOwner returns (bool) {\r\n        require(percent <= 200, \"May not nuke more than 2% of tokens in LP\");\r\n        require(block.timestamp > lastSync + 5 minutes, \"Too soon\");\r\n        require(burnEnabled, \"Burns are disabled\");\r\n\r\n        uint256 lp_tokens = this.balanceOf(address(pairContract));\r\n        uint256 lp_burn = (lp_tokens * percent) / 10_000;\r\n\r\n        if (lp_burn > 0) {\r\n            _burn(address(pairContract), lp_burn);\r\n            pairContract.sync();\r\n            emit auditLog(\"We have burned LP.\");\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function setDistributorSettings(uint256 gas) external onlyOwner {\r\n        require(gas < 3000000);\r\n        distributorGas = gas;\r\n        emit auditLog(\"We configured Distributor Settings\");\r\n    }\r\n\r\n    function setTXBNBgas(uint256 gas) external onlyOwner {\r\n        require(gas < 100000);\r\n        txbnbGas = gas;\r\n        emit auditLog(\"We have configured TXBNBgas\");\r\n    }\r\n\r\n    function setLiquidifyGas(uint256 gas) external onlyOwner {\r\n        require(gas < 1000000);\r\n        LiquidifyGas = gas;\r\n        emit auditLog(\"We have configured Liquidify.\");\r\n    }\r\n\r\n    function renounceOwnership() external onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"auditLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"nameUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newSymbol\",\"type\":\"string\"}],\"name\":\"symbolUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LiquidifyGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"LpBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WBNB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"betFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"betFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTokensReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"changeName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newSymbol\",\"type\":\"string\"}],\"name\":\"changeSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableBurns\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributorGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastSync\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokens\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairContract\",\"outputs\":[{\"internalType\":\"contract InterfaceLP\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellStakePoolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellbetFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_betFeeReceiver\",\"type\":\"address\"}],\"name\":\"setBetFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyTokensReceiver\",\"type\":\"address\"}],\"name\":\"setBuyTokensReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"setDistributorSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakePoolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_betFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellLiquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellStakePoolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellBurnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellbetFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"setLiquidifyGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingFeeReceiver\",\"type\":\"address\"}],\"name\":\"setMarketingFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"io\",\"type\":\"bool\"}],\"name\":\"setPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_autoStakePoolReceiver\",\"type\":\"address\"}],\"name\":\"setStakePoolReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"setTXBNBgas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakePoolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakePoolReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txbnbGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"value\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "EVILPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://aca64bb727f9540ac2edfb1c9006a08547be06dde2273f8c0a1dcab239af1c79"}