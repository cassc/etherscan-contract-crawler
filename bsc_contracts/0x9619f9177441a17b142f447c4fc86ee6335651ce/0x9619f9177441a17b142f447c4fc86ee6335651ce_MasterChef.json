{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\npragma solidity 0.6.12;\r\n\r\nabstract contract OwnerRole {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor () public {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\nabstract contract MinterRole {\r\n    mapping(address => bool) private minters;\r\n\r\n    event MinterAdded(address indexed _minter);\r\n    event MinterRemoved(address indexed _minter);\r\n\r\n    constructor () public {\r\n        addMinter(msg.sender);\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(minters[msg.sender], \"Minterable: caller is not the minter\");\r\n        _;\r\n    }\r\n\r\n    function isIMinter() external view returns (bool) {\r\n        return minters[msg.sender];\r\n    }\r\n\r\n    function isMinter(address _minter) external view virtual returns (bool) {\r\n        return minters[_minter];\r\n    }\r\n\r\n    function addMinter(address _minter) public virtual {\r\n        minters[_minter] = true;\r\n        emit MinterAdded(_minter);\r\n    }\r\n\r\n    function removeMinter(address _minter) public virtual {\r\n        minters[_minter] = false;\r\n        emit MinterRemoved(_minter);\r\n    }\r\n}\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, 'SafeMath: addition overflow');\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, 'SafeMath: subtraction overflow');\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, 'SafeMath: multiplication overflow');\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, 'SafeMath: division by zero');\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, 'SafeMath: modulo by zero');\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint256 x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\nabstract contract BEP20 is OwnerRole, MinterRole {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public totalSupply;\r\n    uint256 public totalBurned;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 18;\r\n\r\n    uint16 public burnFee;\r\n    uint16 public devFee;\r\n\r\n    mapping(address => uint256) private balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private allowances;\r\n\r\n    constructor(string memory _name, string memory _symbol) public {\r\n        name = _name;\r\n        symbol = _symbol;\r\n    }\r\n\r\n    function balanceOf(address _account) external view virtual returns (uint256) {\r\n        return balances[_account];\r\n    }\r\n\r\n    function allowance(address _from, address _to) external view virtual returns (uint256) {\r\n        return allowances[_from][_to];\r\n    }\r\n\r\n    function mint(address _to, uint256 _amount) external virtual onlyMinter {\r\n        _mint(_to, _amount);\r\n    }\r\n\r\n    function burn(uint256 _amount) external virtual {\r\n        _burn(msg.sender, _amount);\r\n    }\r\n\r\n    function approve(address _to, uint256 _amount) external virtual returns (bool) {\r\n        require(_amount > 0, \"BEP20: amount must be greater than zero\");\r\n\r\n        _approve(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _amount) external virtual returns (bool) {\r\n        require(msg.sender != _to, \"BEP20: can't transfer to own address\");\r\n\r\n        _transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _amount) external virtual returns (bool) {\r\n        require(_from != _to, \"BEP20: can't transfer to own address\");\r\n        require(allowances[_from][msg.sender] >= _amount, \"BEP20: transfer amount exceeds allowance\");\r\n\r\n        _transfer(_from, _to, _amount);\r\n        _approve(_from, msg.sender, allowances[_from][msg.sender] - _amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address _to, uint256 _amount) external virtual returns (bool) {\r\n        require(_amount > 0, \"BEP20: amount must be greater than zero\");\r\n\r\n        uint256 total = allowances[msg.sender][_to].add(_amount);\r\n        _approve(msg.sender, _to, total);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address _to, uint256 _amount) external virtual returns (bool) {\r\n        require(allowances[msg.sender][_to] >= _amount, \"BEP20: decreased allowance below zero\");\r\n        require(_amount > 0, \"BEP20: amount must be greater than zero\");\r\n\r\n        uint256 total = allowances[msg.sender][_to].sub(_amount);\r\n        _approve(msg.sender, _to, total);\r\n        return true;\r\n    }\r\n\r\n    function addMinter(address _minter) public onlyOwner override(MinterRole) {\r\n        super.addMinter(_minter);\r\n    }\r\n\r\n    function removeMinter(address _minter) public onlyOwner override(MinterRole) {\r\n        super.removeMinter(_minter);\r\n    }\r\n\r\n    function updateBurnFee(uint16 _percent) external onlyOwner {\r\n        require(_percent >= 0 && _percent <= 10000, \"BEP20: incorrect percentage\");\r\n        require(_percent + devFee <= 10000, \"BEP20: the sum of all commissions cannot exceed 10000 percent\");\r\n\r\n        burnFee = _percent;\r\n    }\r\n\r\n    function updateDevFee(uint16 _percent) external onlyOwner {\r\n        require(_percent >= 0 && _percent <= 10000, \"BEP20: incorrect percentage\");\r\n        require(_percent + burnFee <= 10000, \"BEP20: the sum of all commissions cannot exceed 10000 percent\");\r\n\r\n        devFee = _percent;\r\n    }\r\n\r\n    function calcFee(uint256 _amount, uint16 _percent) public pure returns (uint256) {\r\n        require(_percent >= 0 && _percent <= 10000, \"BEP20: incorrect percentage\");\r\n\r\n        return _amount.mul(_percent).div(10000);\r\n    }\r\n\r\n    function _mint(address _to, uint256 _amount) internal virtual {\r\n        require(_to != address(0), \"BEP20: mint to the zero address\");\r\n        require(_amount > 0, \"BEP20: amount must be greater than zero\");\r\n\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n\r\n        emit Transfer(address(0), _to, _amount);\r\n    }\r\n\r\n    function _burn(address _from, uint256 _amount) internal virtual {\r\n        require(_from != address(0), \"BEP20: burn from the zero address\");\r\n        require(_amount > 0, \"BEP20: amount must be greater than zero\");\r\n        require(balances[_from] >= _amount, \"BEP20: burn amount exceeds balance\");\r\n\r\n        balances[_from] = balances[_from].sub(_amount);\r\n        totalSupply = totalSupply.sub(_amount);\r\n        totalBurned = totalBurned.add(_amount);\r\n\r\n        emit Transfer(_from, address(0), _amount);\r\n    }\r\n\r\n    function _approve(address _from, address _to, uint256 _amount) internal virtual {\r\n        require(_from != address(0), \"BEP20: approve from the zero address\");\r\n        require(_to != address(0), \"BEP20: approve to the zero address\");\r\n\r\n        allowances[_from][_to] = _amount;\r\n        emit Approval(_from, _to, _amount);\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint256 _amount) internal virtual {\r\n        require(_from != address(0), \"BEP20: transfer from the zero address\");\r\n        require(_to != address(0), \"BEP20: transfer to the zero address\");\r\n        require(balances[_from] >= _amount, \"BEP20: transfer amount exceeds balance\");\r\n        require(_amount > 0, \"BEP20: amount must be greater than zero\");\r\n\r\n        uint256 burnFeeValue = calcFee(_amount, burnFee);\r\n        uint256 devFeeValue = calcFee(_amount, devFee);\r\n        uint256 calculatedAmount = _amount.sub(burnFeeValue).sub(devFeeValue);\r\n\r\n        balances[_from] = balances[_from].sub(calculatedAmount).sub(devFeeValue);\r\n\r\n        if (calculatedAmount > 0) {\r\n            balances[_to] = balances[_to].add(calculatedAmount);\r\n            emit Transfer(_from, _to, calculatedAmount);\r\n        }\r\n\r\n        if (devFeeValue > 0) {\r\n            balances[owner] = balances[owner].add(devFeeValue);\r\n            emit Transfer(_from, owner, devFeeValue);\r\n        }\r\n\r\n        if (burnFeeValue > 0) {\r\n            _burn(_from, burnFeeValue);\r\n        }\r\n    }\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract Token is BEP20 {\r\n    constructor(string memory _name, string memory _symbol, uint256 _initialSupply) public BEP20(_name, _symbol) {\r\n        _mint(msg.sender, _initialSupply * 10 ** uint256(decimals));\r\n    }\r\n}\r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract MasterChef is OwnerRole {\r\n    using SafeMath for uint256;\r\n\r\n    Token public token;\r\n\r\n    uint256 public tokensPerBlock;\r\n    uint256 public startBlock;\r\n    uint256 public totalAllocPoint;\r\n\r\n    address public devAddress;\r\n    uint16 public harvestDevFee;\r\n\r\n    struct UserInfo {\r\n        uint256 amount;\r\n        uint256 rewardDebt;\r\n        uint16 extraBonus;\r\n    }\r\n\r\n    struct PoolInfo {\r\n        IBEP20 token;\r\n        uint256 total;\r\n        uint256 allocPoint;\r\n        uint256 lastRewardBlock;\r\n        uint256 accTokensPerShare;\r\n        uint16 depositFee;\r\n        uint16 withdrawFee;\r\n        uint16 extraBonus;\r\n    }\r\n\r\n    PoolInfo[] public poolInfo;\r\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\r\n\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n\r\n    constructor(Token _token, uint256 _tokensPerBlock, uint256 _startBlock) public {\r\n        token = _token;\r\n        tokensPerBlock = _tokensPerBlock;\r\n        startBlock = _startBlock;\r\n\r\n        devAddress = msg.sender;\r\n    }\r\n\r\n    function poolLength() external view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n\r\n    function getMultiplier(uint256 _blockFrom, uint256 _blockTo) public pure returns (uint256) {\r\n        return _blockTo.sub(_blockFrom);\r\n    }\r\n\r\n    function calcFee(uint256 _amount, uint16 _percent) public pure returns (uint256) {\r\n        return _amount.mul(_percent).div(10000);\r\n    }\r\n\r\n    function massUpdatePools() public {\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            updatePool(pid);\r\n        }\r\n    }\r\n\r\n    function updatePool(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (block.number <= pool.lastRewardBlock) {\r\n            return;\r\n        }\r\n\r\n        if (pool.total == 0) {\r\n            pool.lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n\r\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\r\n        uint256 tokensReward = multiplier.mul(tokensPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\r\n\r\n        if (harvestDevFee > 0) {\r\n            uint256 harvestFeeAmount = calcFee(tokensReward, harvestDevFee);\r\n            token.mint(address(this), harvestFeeAmount);\r\n            token.transfer(devAddress, harvestFeeAmount);\r\n        }\r\n\r\n        token.mint(address(this), tokensReward);\r\n\r\n        pool.accTokensPerShare = pool.accTokensPerShare.add(tokensReward.mul(1e12).div(pool.total));\r\n        pool.lastRewardBlock = block.number;\r\n    }\r\n\r\n    function pending(uint256 _pid, address _user) external view returns (uint256) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n\r\n        uint256 accTokensPerShare = pool.accTokensPerShare;\r\n\r\n        if (block.number > pool.lastRewardBlock && pool.total != 0) {\r\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\r\n            uint256 treeReward = multiplier.mul(tokensPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\r\n\r\n            accTokensPerShare = accTokensPerShare.add(treeReward.mul(1e12).div(pool.total));\r\n        }\r\n\r\n        uint256 total = user.amount.mul(accTokensPerShare).div(1e12).sub(user.rewardDebt);\r\n\r\n        if (user.extraBonus > 0) {\r\n            uint256 extraBonusAmount = calcFee(total, user.extraBonus);\r\n            total = total.add(extraBonusAmount);\r\n        }\r\n\r\n        return total;\r\n    }\r\n\r\n    function deposit(uint256 _pid, uint256 _amount) external {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n\r\n        updatePool(_pid);\r\n\r\n        if (user.amount > 0) {\r\n            uint256 pendingTokens = user.amount.mul(pool.accTokensPerShare).div(1e12).sub(user.rewardDebt);\r\n            if (pendingTokens > 0) {\r\n                safeTokenTransfer(msg.sender, pendingTokens, _pid);\r\n            }\r\n        }\r\n\r\n        if (_amount > 0) {\r\n            pool.token.transferFrom(address(msg.sender), address(this), _amount);\r\n\r\n            if (pool.depositFee > 0) {\r\n                uint256 depositFeeAmount = calcFee(_amount, pool.depositFee);\r\n\r\n                pool.token.transfer(devAddress, depositFeeAmount);\r\n                _amount = _amount.sub(depositFeeAmount);\r\n            }\r\n\r\n            user.amount = user.amount.add(_amount);\r\n            pool.total = pool.total.add(_amount);\r\n\r\n            if (pool.extraBonus > user.extraBonus) {\r\n                user.extraBonus = pool.extraBonus;\r\n            }\r\n        }\r\n\r\n        user.rewardDebt = user.amount.mul(pool.accTokensPerShare).div(1e12);\r\n        emit Deposit(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    function withdraw(uint256 _pid, uint256 _amount) external {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        require(user.amount >= _amount);\r\n\r\n        updatePool(_pid);\r\n\r\n        if (user.amount > 0) {\r\n            uint256 pendingTokens = user.amount.mul(pool.accTokensPerShare).div(1e12).sub(user.rewardDebt);\r\n            if (pendingTokens > 0) {\r\n                safeTokenTransfer(msg.sender, pendingTokens, _pid);\r\n            }\r\n        }\r\n\r\n        if (_amount > 0) {\r\n            user.extraBonus = 0;\r\n            user.amount = user.amount.sub(_amount);\r\n            pool.total = pool.total.sub(_amount);\r\n\r\n            if (pool.withdrawFee > 0) {\r\n                uint256 withdrawFeeAmount = calcFee(_amount, pool.withdrawFee);\r\n\r\n                pool.token.transfer(devAddress, withdrawFeeAmount);\r\n                _amount = _amount.sub(withdrawFeeAmount);\r\n            }\r\n\r\n            pool.token.transfer(address(msg.sender), _amount);\r\n        }\r\n\r\n        user.rewardDebt = user.amount.mul(pool.accTokensPerShare).div(1e12);\r\n        emit Withdraw(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    function emergencyWithdraw(uint256 _pid) external {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n\r\n        uint256 amount = user.amount;\r\n\r\n        user.amount = 0;\r\n        user.extraBonus = 0;\r\n        user.rewardDebt = 0;\r\n\r\n        pool.total = pool.total.sub(amount);\r\n\r\n        if (pool.withdrawFee > 0) {\r\n            uint256 withdrawFeeAmount = calcFee(amount, pool.withdrawFee);\r\n\r\n            pool.token.transfer(devAddress, withdrawFeeAmount);\r\n            amount = amount.sub(withdrawFeeAmount);\r\n        }\r\n\r\n        pool.token.transfer(address(msg.sender), amount);\r\n\r\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\r\n    }\r\n\r\n    function safeTokenTransfer(address _to, uint256 _amount, uint256 _pid) internal {\r\n        uint256 balance = token.balanceOf(address(this));\r\n        if (_amount > balance) {\r\n            _amount = balance;\r\n        }\r\n\r\n        token.transfer(_to, _amount);\r\n\r\n        UserInfo storage user = userInfo[_pid][_to];\r\n        if (user.extraBonus > 0) {\r\n            uint256 extraBonusAmount = calcFee(_amount, user.extraBonus);\r\n            token.mint(address(this), extraBonusAmount);\r\n            token.transfer(_to, extraBonusAmount);\r\n        }\r\n    }\r\n\r\n    function add(IBEP20 _token, uint256 _allocPoint, uint16 _depositFee, uint16 _withdrawFee, uint16 _extraBonus, bool _withUpdate) external onlyOwner {\r\n        require(_depositFee >= 0 && _depositFee <= 500);\r\n        require(_withdrawFee >= 0 && _withdrawFee <= 500);\r\n\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n\r\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\r\n\r\n        poolInfo.push(PoolInfo({\r\n            token: _token,\r\n            total: 0,\r\n            allocPoint: _allocPoint,\r\n            lastRewardBlock: block.number > startBlock ? block.number : startBlock,\r\n            accTokensPerShare: 0,\r\n            depositFee: _depositFee,\r\n            withdrawFee: _withdrawFee,\r\n            extraBonus: _extraBonus\r\n        }));\r\n    }\r\n\r\n    function set(uint256 _pid, uint256 _allocPoint, uint16 _depositFee, uint16 _withdrawFee, uint16 _extraBonus, bool _withUpdate) external onlyOwner {\r\n        require(_depositFee >= 0 && _depositFee <= 500);\r\n        require(_withdrawFee >= 0 && _withdrawFee <= 500);\r\n\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n\r\n        uint256 prevAllocPoint = poolInfo[_pid].allocPoint;\r\n\r\n        poolInfo[_pid].allocPoint = _allocPoint;\r\n        poolInfo[_pid].depositFee = _depositFee;\r\n        poolInfo[_pid].withdrawFee = _withdrawFee;\r\n        poolInfo[_pid].extraBonus = _extraBonus;\r\n\r\n        if (prevAllocPoint != _allocPoint) {\r\n            totalAllocPoint = totalAllocPoint.sub(prevAllocPoint).add(_allocPoint);\r\n        }\r\n    }\r\n\r\n    function updateExtraBonus(uint16 _extraBonus) external onlyOwner {\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            poolInfo[pid].extraBonus = _extraBonus;\r\n        }\r\n    }\r\n\r\n    function updateDevAddress(address _devAddress) external onlyOwner {\r\n        devAddress = _devAddress;\r\n    }\r\n\r\n    function updateHarvestDevFee(uint16 _harvestDevFee) external onlyOwner {\r\n        harvestDevFee = _harvestDevFee;\r\n    }\r\n\r\n    function updateTokensPerBlock(uint256 _tokensPerBlock) external onlyOwner {\r\n        massUpdatePools();\r\n        tokensPerBlock = _tokensPerBlock;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokensPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_depositFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_withdrawFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_extraBonus\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_percent\",\"type\":\"uint16\"}],\"name\":\"calcFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_blockTo\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestDevFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accTokensPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"depositFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"withdrawFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"extraBonus\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_depositFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_withdrawFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_extraBonus\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract Token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devAddress\",\"type\":\"address\"}],\"name\":\"updateDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_extraBonus\",\"type\":\"uint16\"}],\"name\":\"updateExtraBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_harvestDevFee\",\"type\":\"uint16\"}],\"name\":\"updateHarvestDevFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokensPerBlock\",\"type\":\"uint256\"}],\"name\":\"updateTokensPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"extraBonus\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MasterChef", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000009d78e6466a0d0fcfefb8f357cce9134b99b4fc8a0000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000000000000706792", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://51c922d3213f9d4d675bf4fc9d84314c5a445ae408cc2e0a7d5268271c1436f2"}